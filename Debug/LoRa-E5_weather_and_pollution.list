
LoRa-E5_weather_and_pollution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010bc8  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a24  08010d00  08010d00  00020d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  08011724  08011724  00021724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080117e4  080117e4  00030554  2**0
                  CONTENTS
  5 .ARM          00000008  080117e4  080117e4  000217e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080117ec  080117ec  00030554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  080117ec  080117ec  000217ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080117f4  080117f4  000217f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000554  20000000  080117f8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000022e0  20000554  08011d4c  00030554  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002834  08011d4c  00032834  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030554  2**0
                  CONTENTS, READONLY
 13 .debug_info   00053e3b  00000000  00000000  0003057e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000bec6  00000000  00000000  000843b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00025321  00000000  00000000  0009027f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002768  00000000  00000000  000b55a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000036f0  00000000  00000000  000b7d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027a28  00000000  00000000  000bb3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004497c  00000000  00000000  000e2e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c93fe  00000000  00000000  0012779c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001f0b9a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006df0  00000000  00000000  001f0bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000554 	.word	0x20000554
 8000154:	00000000 	.word	0x00000000
 8000158:	08010ce8 	.word	0x08010ce8

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000558 	.word	0x20000558
 8000174:	08010ce8 	.word	0x08010ce8

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_f2iz>:
 800087c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000880:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000884:	d30f      	bcc.n	80008a6 <__aeabi_f2iz+0x2a>
 8000886:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800088a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800088e:	d90d      	bls.n	80008ac <__aeabi_f2iz+0x30>
 8000890:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000894:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000898:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800089c:	fa23 f002 	lsr.w	r0, r3, r2
 80008a0:	bf18      	it	ne
 80008a2:	4240      	negne	r0, r0
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr
 80008ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80008b0:	d101      	bne.n	80008b6 <__aeabi_f2iz+0x3a>
 80008b2:	0242      	lsls	r2, r0, #9
 80008b4:	d105      	bne.n	80008c2 <__aeabi_f2iz+0x46>
 80008b6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80008ba:	bf08      	it	eq
 80008bc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008c0:	4770      	bx	lr
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	4770      	bx	lr

080008c8 <__aeabi_uldivmod>:
 80008c8:	b953      	cbnz	r3, 80008e0 <__aeabi_uldivmod+0x18>
 80008ca:	b94a      	cbnz	r2, 80008e0 <__aeabi_uldivmod+0x18>
 80008cc:	2900      	cmp	r1, #0
 80008ce:	bf08      	it	eq
 80008d0:	2800      	cmpeq	r0, #0
 80008d2:	bf1c      	itt	ne
 80008d4:	f04f 31ff 	movne.w	r1, #4294967295
 80008d8:	f04f 30ff 	movne.w	r0, #4294967295
 80008dc:	f000 b974 	b.w	8000bc8 <__aeabi_idiv0>
 80008e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008e8:	f000 f806 	bl	80008f8 <__udivmoddi4>
 80008ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f4:	b004      	add	sp, #16
 80008f6:	4770      	bx	lr

080008f8 <__udivmoddi4>:
 80008f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008fc:	9e08      	ldr	r6, [sp, #32]
 80008fe:	460d      	mov	r5, r1
 8000900:	4604      	mov	r4, r0
 8000902:	4688      	mov	r8, r1
 8000904:	2b00      	cmp	r3, #0
 8000906:	d14d      	bne.n	80009a4 <__udivmoddi4+0xac>
 8000908:	428a      	cmp	r2, r1
 800090a:	4694      	mov	ip, r2
 800090c:	d968      	bls.n	80009e0 <__udivmoddi4+0xe8>
 800090e:	fab2 f282 	clz	r2, r2
 8000912:	b152      	cbz	r2, 800092a <__udivmoddi4+0x32>
 8000914:	fa01 f302 	lsl.w	r3, r1, r2
 8000918:	f1c2 0120 	rsb	r1, r2, #32
 800091c:	fa20 f101 	lsr.w	r1, r0, r1
 8000920:	fa0c fc02 	lsl.w	ip, ip, r2
 8000924:	ea41 0803 	orr.w	r8, r1, r3
 8000928:	4094      	lsls	r4, r2
 800092a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800092e:	0c21      	lsrs	r1, r4, #16
 8000930:	fbb8 fef5 	udiv	lr, r8, r5
 8000934:	fa1f f78c 	uxth.w	r7, ip
 8000938:	fb05 831e 	mls	r3, r5, lr, r8
 800093c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000940:	fb0e f107 	mul.w	r1, lr, r7
 8000944:	4299      	cmp	r1, r3
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x68>
 8000948:	eb1c 0303 	adds.w	r3, ip, r3
 800094c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000950:	f080 811e 	bcs.w	8000b90 <__udivmoddi4+0x298>
 8000954:	4299      	cmp	r1, r3
 8000956:	f240 811b 	bls.w	8000b90 <__udivmoddi4+0x298>
 800095a:	f1ae 0e02 	sub.w	lr, lr, #2
 800095e:	4463      	add	r3, ip
 8000960:	1a5b      	subs	r3, r3, r1
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb3 f0f5 	udiv	r0, r3, r5
 8000968:	fb05 3310 	mls	r3, r5, r0, r3
 800096c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000970:	fb00 f707 	mul.w	r7, r0, r7
 8000974:	42a7      	cmp	r7, r4
 8000976:	d90a      	bls.n	800098e <__udivmoddi4+0x96>
 8000978:	eb1c 0404 	adds.w	r4, ip, r4
 800097c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000980:	f080 8108 	bcs.w	8000b94 <__udivmoddi4+0x29c>
 8000984:	42a7      	cmp	r7, r4
 8000986:	f240 8105 	bls.w	8000b94 <__udivmoddi4+0x29c>
 800098a:	4464      	add	r4, ip
 800098c:	3802      	subs	r0, #2
 800098e:	1be4      	subs	r4, r4, r7
 8000990:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000994:	2100      	movs	r1, #0
 8000996:	b11e      	cbz	r6, 80009a0 <__udivmoddi4+0xa8>
 8000998:	40d4      	lsrs	r4, r2
 800099a:	2300      	movs	r3, #0
 800099c:	e9c6 4300 	strd	r4, r3, [r6]
 80009a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a4:	428b      	cmp	r3, r1
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0xc2>
 80009a8:	2e00      	cmp	r6, #0
 80009aa:	f000 80ee 	beq.w	8000b8a <__udivmoddi4+0x292>
 80009ae:	2100      	movs	r1, #0
 80009b0:	e9c6 0500 	strd	r0, r5, [r6]
 80009b4:	4608      	mov	r0, r1
 80009b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ba:	fab3 f183 	clz	r1, r3
 80009be:	2900      	cmp	r1, #0
 80009c0:	d14a      	bne.n	8000a58 <__udivmoddi4+0x160>
 80009c2:	42ab      	cmp	r3, r5
 80009c4:	d302      	bcc.n	80009cc <__udivmoddi4+0xd4>
 80009c6:	4282      	cmp	r2, r0
 80009c8:	f200 80f9 	bhi.w	8000bbe <__udivmoddi4+0x2c6>
 80009cc:	1a84      	subs	r4, r0, r2
 80009ce:	eb65 0303 	sbc.w	r3, r5, r3
 80009d2:	2001      	movs	r0, #1
 80009d4:	4698      	mov	r8, r3
 80009d6:	2e00      	cmp	r6, #0
 80009d8:	d0e2      	beq.n	80009a0 <__udivmoddi4+0xa8>
 80009da:	e9c6 4800 	strd	r4, r8, [r6]
 80009de:	e7df      	b.n	80009a0 <__udivmoddi4+0xa8>
 80009e0:	b902      	cbnz	r2, 80009e4 <__udivmoddi4+0xec>
 80009e2:	deff      	udf	#255	; 0xff
 80009e4:	fab2 f282 	clz	r2, r2
 80009e8:	2a00      	cmp	r2, #0
 80009ea:	f040 8091 	bne.w	8000b10 <__udivmoddi4+0x218>
 80009ee:	eba1 050c 	sub.w	r5, r1, ip
 80009f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f6:	fa1f fe8c 	uxth.w	lr, ip
 80009fa:	2101      	movs	r1, #1
 80009fc:	fbb5 f3f7 	udiv	r3, r5, r7
 8000a00:	fb07 5013 	mls	r0, r7, r3, r5
 8000a04:	0c25      	lsrs	r5, r4, #16
 8000a06:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a0a:	fb0e f003 	mul.w	r0, lr, r3
 8000a0e:	42a8      	cmp	r0, r5
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x12c>
 8000a12:	eb1c 0505 	adds.w	r5, ip, r5
 8000a16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a1a:	d202      	bcs.n	8000a22 <__udivmoddi4+0x12a>
 8000a1c:	42a8      	cmp	r0, r5
 8000a1e:	f200 80cb 	bhi.w	8000bb8 <__udivmoddi4+0x2c0>
 8000a22:	4643      	mov	r3, r8
 8000a24:	1a2d      	subs	r5, r5, r0
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb5 f0f7 	udiv	r0, r5, r7
 8000a2c:	fb07 5510 	mls	r5, r7, r0, r5
 8000a30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a34:	fb0e fe00 	mul.w	lr, lr, r0
 8000a38:	45a6      	cmp	lr, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x156>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f100 35ff 	add.w	r5, r0, #4294967295
 8000a44:	d202      	bcs.n	8000a4c <__udivmoddi4+0x154>
 8000a46:	45a6      	cmp	lr, r4
 8000a48:	f200 80bb 	bhi.w	8000bc2 <__udivmoddi4+0x2ca>
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	eba4 040e 	sub.w	r4, r4, lr
 8000a52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a56:	e79e      	b.n	8000996 <__udivmoddi4+0x9e>
 8000a58:	f1c1 0720 	rsb	r7, r1, #32
 8000a5c:	408b      	lsls	r3, r1
 8000a5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a66:	fa20 f407 	lsr.w	r4, r0, r7
 8000a6a:	fa05 f301 	lsl.w	r3, r5, r1
 8000a6e:	431c      	orrs	r4, r3
 8000a70:	40fd      	lsrs	r5, r7
 8000a72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a76:	fa00 f301 	lsl.w	r3, r0, r1
 8000a7a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a7e:	0c20      	lsrs	r0, r4, #16
 8000a80:	fa1f fe8c 	uxth.w	lr, ip
 8000a84:	fb09 5518 	mls	r5, r9, r8, r5
 8000a88:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000a8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000a90:	42a8      	cmp	r0, r5
 8000a92:	fa02 f201 	lsl.w	r2, r2, r1
 8000a96:	d90b      	bls.n	8000ab0 <__udivmoddi4+0x1b8>
 8000a98:	eb1c 0505 	adds.w	r5, ip, r5
 8000a9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000aa0:	f080 8088 	bcs.w	8000bb4 <__udivmoddi4+0x2bc>
 8000aa4:	42a8      	cmp	r0, r5
 8000aa6:	f240 8085 	bls.w	8000bb4 <__udivmoddi4+0x2bc>
 8000aaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000aae:	4465      	add	r5, ip
 8000ab0:	1a2d      	subs	r5, r5, r0
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb5 f0f9 	udiv	r0, r5, r9
 8000ab8:	fb09 5510 	mls	r5, r9, r0, r5
 8000abc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ac0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ac4:	45ae      	cmp	lr, r5
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x1e2>
 8000ac8:	eb1c 0505 	adds.w	r5, ip, r5
 8000acc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ad0:	d26c      	bcs.n	8000bac <__udivmoddi4+0x2b4>
 8000ad2:	45ae      	cmp	lr, r5
 8000ad4:	d96a      	bls.n	8000bac <__udivmoddi4+0x2b4>
 8000ad6:	3802      	subs	r0, #2
 8000ad8:	4465      	add	r5, ip
 8000ada:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ade:	fba0 9402 	umull	r9, r4, r0, r2
 8000ae2:	eba5 050e 	sub.w	r5, r5, lr
 8000ae6:	42a5      	cmp	r5, r4
 8000ae8:	46c8      	mov	r8, r9
 8000aea:	46a6      	mov	lr, r4
 8000aec:	d356      	bcc.n	8000b9c <__udivmoddi4+0x2a4>
 8000aee:	d053      	beq.n	8000b98 <__udivmoddi4+0x2a0>
 8000af0:	b15e      	cbz	r6, 8000b0a <__udivmoddi4+0x212>
 8000af2:	ebb3 0208 	subs.w	r2, r3, r8
 8000af6:	eb65 050e 	sbc.w	r5, r5, lr
 8000afa:	fa05 f707 	lsl.w	r7, r5, r7
 8000afe:	fa22 f301 	lsr.w	r3, r2, r1
 8000b02:	40cd      	lsrs	r5, r1
 8000b04:	431f      	orrs	r7, r3
 8000b06:	e9c6 7500 	strd	r7, r5, [r6]
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b10:	f1c2 0320 	rsb	r3, r2, #32
 8000b14:	fa20 f103 	lsr.w	r1, r0, r3
 8000b18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1c:	fa25 f303 	lsr.w	r3, r5, r3
 8000b20:	4095      	lsls	r5, r2
 8000b22:	430d      	orrs	r5, r1
 8000b24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b28:	fa1f fe8c 	uxth.w	lr, ip
 8000b2c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000b30:	fb07 3011 	mls	r0, r7, r1, r3
 8000b34:	0c2b      	lsrs	r3, r5, #16
 8000b36:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000b3a:	fb01 f00e 	mul.w	r0, r1, lr
 8000b3e:	4298      	cmp	r0, r3
 8000b40:	fa04 f402 	lsl.w	r4, r4, r2
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x260>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000b4e:	d22f      	bcs.n	8000bb0 <__udivmoddi4+0x2b8>
 8000b50:	4298      	cmp	r0, r3
 8000b52:	d92d      	bls.n	8000bb0 <__udivmoddi4+0x2b8>
 8000b54:	3902      	subs	r1, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a1b      	subs	r3, r3, r0
 8000b5a:	b2ad      	uxth	r5, r5
 8000b5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b60:	fb07 3310 	mls	r3, r7, r0, r3
 8000b64:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b68:	fb00 f30e 	mul.w	r3, r0, lr
 8000b6c:	42ab      	cmp	r3, r5
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x28a>
 8000b70:	eb1c 0505 	adds.w	r5, ip, r5
 8000b74:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b78:	d216      	bcs.n	8000ba8 <__udivmoddi4+0x2b0>
 8000b7a:	42ab      	cmp	r3, r5
 8000b7c:	d914      	bls.n	8000ba8 <__udivmoddi4+0x2b0>
 8000b7e:	3802      	subs	r0, #2
 8000b80:	4465      	add	r5, ip
 8000b82:	1aed      	subs	r5, r5, r3
 8000b84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b88:	e738      	b.n	80009fc <__udivmoddi4+0x104>
 8000b8a:	4631      	mov	r1, r6
 8000b8c:	4630      	mov	r0, r6
 8000b8e:	e707      	b.n	80009a0 <__udivmoddi4+0xa8>
 8000b90:	4686      	mov	lr, r0
 8000b92:	e6e5      	b.n	8000960 <__udivmoddi4+0x68>
 8000b94:	4618      	mov	r0, r3
 8000b96:	e6fa      	b.n	800098e <__udivmoddi4+0x96>
 8000b98:	454b      	cmp	r3, r9
 8000b9a:	d2a9      	bcs.n	8000af0 <__udivmoddi4+0x1f8>
 8000b9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ba0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ba4:	3801      	subs	r0, #1
 8000ba6:	e7a3      	b.n	8000af0 <__udivmoddi4+0x1f8>
 8000ba8:	4640      	mov	r0, r8
 8000baa:	e7ea      	b.n	8000b82 <__udivmoddi4+0x28a>
 8000bac:	4620      	mov	r0, r4
 8000bae:	e794      	b.n	8000ada <__udivmoddi4+0x1e2>
 8000bb0:	4641      	mov	r1, r8
 8000bb2:	e7d1      	b.n	8000b58 <__udivmoddi4+0x260>
 8000bb4:	46d0      	mov	r8, sl
 8000bb6:	e77b      	b.n	8000ab0 <__udivmoddi4+0x1b8>
 8000bb8:	3b02      	subs	r3, #2
 8000bba:	4465      	add	r5, ip
 8000bbc:	e732      	b.n	8000a24 <__udivmoddi4+0x12c>
 8000bbe:	4608      	mov	r0, r1
 8000bc0:	e709      	b.n	80009d6 <__udivmoddi4+0xde>
 8000bc2:	4464      	add	r4, ip
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	e742      	b.n	8000a4e <__udivmoddi4+0x156>

08000bc8 <__aeabi_idiv0>:
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000bcc:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000bce:	4813      	ldr	r0, [pc, #76]	; (8000c1c <MX_ADC_Init+0x50>)
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <MX_ADC_Init+0x54>)
 8000bd2:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000bd8:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bde:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000be0:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be2:	2204      	movs	r2, #4
 8000be4:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000be6:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000be8:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000bea:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000bec:	2201      	movs	r2, #1
 8000bee:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000bf0:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf4:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bf6:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000bf8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000bfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c00:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000c02:	2207      	movs	r2, #7
 8000c04:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000c06:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000c08:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000c0c:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c0e:	f001 fa0f 	bl	8002030 <HAL_ADC_Init>
 8000c12:	b900      	cbnz	r0, 8000c16 <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000c14:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000c16:	f000 faef 	bl	80011f8 <Error_Handler>
}
 8000c1a:	e7fb      	b.n	8000c14 <MX_ADC_Init+0x48>
 8000c1c:	20000570 	.word	0x20000570
 8000c20:	40012400 	.word	0x40012400

08000c24 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000c24:	6802      	ldr	r2, [r0, #0]
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <HAL_ADC_MspInit+0x28>)
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d000      	beq.n	8000c2e <HAL_ADC_MspInit+0xa>
 8000c2c:	4770      	bx	lr
{
 8000c2e:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c3a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c42:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000c44:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000c46:	b002      	add	sp, #8
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40012400 	.word	0x40012400

08000c50 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000c50:	6802      	ldr	r2, [r0, #0]
 8000c52:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_ADC_MspDeInit+0x18>)
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d000      	beq.n	8000c5a <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000c58:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000c5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c5e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000c60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000c64:	6613      	str	r3, [r2, #96]	; 0x60
 8000c66:	e7f7      	b.n	8000c58 <HAL_ADC_MspDeInit+0x8>
 8000c68:	40012400 	.word	0x40012400

08000c6c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000c6c:	b530      	push	{r4, r5, lr}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c72:	2300      	movs	r3, #0
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	9302      	str	r3, [sp, #8]
 8000c78:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8000c7a:	f7ff ffa7 	bl	8000bcc <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000c7e:	4816      	ldr	r0, [pc, #88]	; (8000cd8 <ADC_ReadChannels+0x6c>)
 8000c80:	f001 fe2e 	bl	80028e0 <HAL_ADCEx_Calibration_Start>
 8000c84:	b9f8      	cbnz	r0, 8000cc6 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000c86:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000c8c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c8e:	a901      	add	r1, sp, #4
 8000c90:	4811      	ldr	r0, [pc, #68]	; (8000cd8 <ADC_ReadChannels+0x6c>)
 8000c92:	f001 fb5d 	bl	8002350 <HAL_ADC_ConfigChannel>
 8000c96:	b9c8      	cbnz	r0, 8000ccc <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000c98:	480f      	ldr	r0, [pc, #60]	; (8000cd8 <ADC_ReadChannels+0x6c>)
 8000c9a:	f001 fd29 	bl	80026f0 <HAL_ADC_Start>
 8000c9e:	b9c0      	cbnz	r0, 8000cd2 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000ca0:	4c0d      	ldr	r4, [pc, #52]	; (8000cd8 <ADC_ReadChannels+0x6c>)
 8000ca2:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	f001 faf0 	bl	800228c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000cac:	4620      	mov	r0, r4
 8000cae:	f001 fdf7 	bl	80028a0 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	f001 fb49 	bl	800234a <HAL_ADC_GetValue>
 8000cb8:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8000cba:	4620      	mov	r0, r4
 8000cbc:	f001 fd9a 	bl	80027f4 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000cc0:	4628      	mov	r0, r5
 8000cc2:	b005      	add	sp, #20
 8000cc4:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000cc6:	f000 fa97 	bl	80011f8 <Error_Handler>
 8000cca:	e7dc      	b.n	8000c86 <ADC_ReadChannels+0x1a>
    Error_Handler();
 8000ccc:	f000 fa94 	bl	80011f8 <Error_Handler>
 8000cd0:	e7e2      	b.n	8000c98 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8000cd2:	f000 fa91 	bl	80011f8 <Error_Handler>
 8000cd6:	e7e3      	b.n	8000ca0 <ADC_ReadChannels+0x34>
 8000cd8:	20000570 	.word	0x20000570

08000cdc <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8000cdc:	4b01      	ldr	r3, [pc, #4]	; (8000ce4 <SYS_InitMeasurement+0x8>)
 8000cde:	4a02      	ldr	r2, [pc, #8]	; (8000ce8 <SYS_InitMeasurement+0xc>)
 8000ce0:	601a      	str	r2, [r3, #0]
}
 8000ce2:	4770      	bx	lr
 8000ce4:	20000570 	.word	0x20000570
 8000ce8:	40012400 	.word	0x40012400

08000cec <SYS_GetBatteryLevel>:
{
 8000cec:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000cee:	480b      	ldr	r0, [pc, #44]	; (8000d1c <SYS_GetBatteryLevel+0x30>)
 8000cf0:	f7ff ffbc 	bl	8000c6c <ADC_ReadChannels>
  if (measuredLevel == 0)
 8000cf4:	b178      	cbz	r0, 8000d16 <SYS_GetBatteryLevel+0x2a>
 8000cf6:	4602      	mov	r2, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <SYS_GetBatteryLevel+0x34>)
 8000cfa:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000cfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d02:	428b      	cmp	r3, r1
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000d04:	bf1a      	itte	ne
 8000d06:	f640 40e4 	movwne	r0, #3300	; 0xce4
 8000d0a:	4358      	mulne	r0, r3
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000d0c:	4805      	ldreq	r0, [pc, #20]	; (8000d24 <SYS_GetBatteryLevel+0x38>)
 8000d0e:	fbb0 f0f2 	udiv	r0, r0, r2
 8000d12:	b280      	uxth	r0, r0
}
 8000d14:	bd08      	pop	{r3, pc}
    batteryLevelmV = 0;
 8000d16:	2000      	movs	r0, #0
 8000d18:	e7fc      	b.n	8000d14 <SYS_GetBatteryLevel+0x28>
 8000d1a:	bf00      	nop
 8000d1c:	b4002000 	.word	0xb4002000
 8000d20:	1fff7500 	.word	0x1fff7500
 8000d24:	004c08d8 	.word	0x004c08d8

08000d28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d28:	b500      	push	{lr}
 8000d2a:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000d32:	f042 0204 	orr.w	r2, r2, #4
 8000d36:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000d3a:	f002 0204 	and.w	r2, r2, #4
 8000d3e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000d40:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000d44:	f042 0201 	orr.w	r2, r2, #1
 8000d48:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000d52:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2102      	movs	r1, #2
 8000d58:	200b      	movs	r0, #11
 8000d5a:	f001 fe75 	bl	8002a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d5e:	200b      	movs	r0, #11
 8000d60:	f001 fea8 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	4611      	mov	r1, r2
 8000d68:	200c      	movs	r0, #12
 8000d6a:	f001 fe6d 	bl	8002a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d6e:	200c      	movs	r0, #12
 8000d70:	f001 fea0 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000d74:	2200      	movs	r2, #0
 8000d76:	4611      	mov	r1, r2
 8000d78:	200d      	movs	r0, #13
 8000d7a:	f001 fe65 	bl	8002a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d7e:	200d      	movs	r0, #13
 8000d80:	f001 fe98 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	4611      	mov	r1, r2
 8000d88:	203d      	movs	r0, #61	; 0x3d
 8000d8a:	f001 fe5d 	bl	8002a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8000d8e:	203d      	movs	r0, #61	; 0x3d
 8000d90:	f001 fe90 	bl	8002ab4 <HAL_NVIC_EnableIRQ>

}
 8000d94:	b003      	add	sp, #12
 8000d96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000d9c <FLASH_IF_Write64>:

  /* USER CODE END FLASH_IF_Write_2 */
}

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 8000d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000da0:	4615      	mov	r5, r2
 8000da2:	461e      	mov	r6, r3
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 8000da4:	6802      	ldr	r2, [r0, #0]
 8000da6:	6843      	ldr	r3, [r0, #4]
 8000da8:	429e      	cmp	r6, r3
 8000daa:	bf08      	it	eq
 8000dac:	4295      	cmpeq	r5, r2
 8000dae:	d013      	beq.n	8000dd8 <FLASH_IF_Write64+0x3c>
 8000db0:	4604      	mov	r4, r0
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8000db2:	4f0b      	ldr	r7, [pc, #44]	; (8000de0 <FLASH_IF_Write64+0x44>)
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 8000db4:	f04f 0801 	mov.w	r8, #1
 8000db8:	6939      	ldr	r1, [r7, #16]
 8000dba:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 8000dbe:	d1fb      	bne.n	8000db8 <FLASH_IF_Write64+0x1c>
 8000dc0:	462a      	mov	r2, r5
 8000dc2:	4633      	mov	r3, r6
 8000dc4:	4621      	mov	r1, r4
 8000dc6:	4640      	mov	r0, r8
 8000dc8:	f002 f9d4 	bl	8003174 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 8000dcc:	6822      	ldr	r2, [r4, #0]
 8000dce:	6863      	ldr	r3, [r4, #4]
 8000dd0:	42b3      	cmp	r3, r6
 8000dd2:	bf08      	it	eq
 8000dd4:	42aa      	cmpeq	r2, r5
 8000dd6:	d1ef      	bne.n	8000db8 <FLASH_IF_Write64+0x1c>

  return FLASH_OK;
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 8000dd8:	2000      	movs	r0, #0
 8000dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dde:	bf00      	nop
 8000de0:	58004000 	.word	0x58004000

08000de4 <FLASH_IF_Write_Buffer>:
  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
  uint64_t src_value;
  int32_t status = FLASH_OK;

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8000de4:	2a07      	cmp	r2, #7
 8000de6:	d928      	bls.n	8000e3a <FLASH_IF_Write_Buffer+0x56>
{
 8000de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dec:	b083      	sub	sp, #12
 8000dee:	ea4f 09d2 	mov.w	r9, r2, lsr #3
  uint8_t *pSrc = pSource;
 8000df2:	460c      	mov	r4, r1
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8000df4:	2500      	movs	r5, #0
 8000df6:	1a46      	subs	r6, r0, r1
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 8000df8:	f04f 0808 	mov.w	r8, #8
 8000dfc:	e008      	b.n	8000e10 <FLASH_IF_Write_Buffer+0x2c>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 8000dfe:	4638      	mov	r0, r7
 8000e00:	f7ff ffcc 	bl	8000d9c <FLASH_IF_Write64>
    }

    pDestination += sizeof(uint64_t);
    pSrc += sizeof(uint64_t);
 8000e04:	3408      	adds	r4, #8

    if (status != FLASH_OK)
 8000e06:	4603      	mov	r3, r0
 8000e08:	b998      	cbnz	r0, 8000e32 <FLASH_IF_Write_Buffer+0x4e>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8000e0a:	3501      	adds	r5, #1
 8000e0c:	454d      	cmp	r5, r9
 8000e0e:	d20f      	bcs.n	8000e30 <FLASH_IF_Write_Buffer+0x4c>
 8000e10:	19a7      	adds	r7, r4, r6
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 8000e12:	4642      	mov	r2, r8
 8000e14:	4621      	mov	r1, r4
 8000e16:	4668      	mov	r0, sp
 8000e18:	f00e ffb0 	bl	800fd7c <UTIL_MEM_cpy_8>
    if (src_value != UINT64_MAX)
 8000e1c:	9a00      	ldr	r2, [sp, #0]
 8000e1e:	9b01      	ldr	r3, [sp, #4]
 8000e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e24:	bf08      	it	eq
 8000e26:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8000e2a:	d1e8      	bne.n	8000dfe <FLASH_IF_Write_Buffer+0x1a>
    pSrc += sizeof(uint64_t);
 8000e2c:	3408      	adds	r4, #8
    if (status != FLASH_OK)
 8000e2e:	e7ec      	b.n	8000e0a <FLASH_IF_Write_Buffer+0x26>
 8000e30:	2300      	movs	r3, #0

  return status;
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	b003      	add	sp, #12
 8000e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  int32_t status = FLASH_OK;
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	4770      	bx	lr

08000e40 <FLASH_IF_EraseByPages>:
{
 8000e40:	b500      	push	{lr}
 8000e42:	b085      	sub	sp, #20
  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8000e44:	2302      	movs	r3, #2
 8000e46:	9301      	str	r3, [sp, #4]
  erase_str.Page = page;
 8000e48:	9002      	str	r0, [sp, #8]
  erase_str.NbPages = n;
 8000e4a:	9103      	str	r1, [sp, #12]
  if (interrupt)
 8000e4c:	b15a      	cbz	r2, 8000e66 <FLASH_IF_EraseByPages+0x26>
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 8000e4e:	a801      	add	r0, sp, #4
 8000e50:	f002 fa26 	bl	80032a0 <HAL_FLASHEx_Erase_IT>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8000e54:	b160      	cbz	r0, 8000e70 <FLASH_IF_EraseByPages+0x30>
 8000e56:	2802      	cmp	r0, #2
 8000e58:	bf0c      	ite	eq
 8000e5a:	2001      	moveq	r0, #1
 8000e5c:	f06f 0001 	mvnne.w	r0, #1
}
 8000e60:	b005      	add	sp, #20
 8000e62:	f85d fb04 	ldr.w	pc, [sp], #4
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 8000e66:	4669      	mov	r1, sp
 8000e68:	a801      	add	r0, sp, #4
 8000e6a:	f002 f9c7 	bl	80031fc <HAL_FLASHEx_Erase>
 8000e6e:	e7f1      	b.n	8000e54 <FLASH_IF_EraseByPages+0x14>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8000e70:	2000      	movs	r0, #0
 8000e72:	e7f5      	b.n	8000e60 <FLASH_IF_EraseByPages+0x20>

08000e74 <FLASH_IF_Write>:
{
 8000e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	4693      	mov	fp, r2
 8000e7c:	4699      	mov	r9, r3
  uint32_t page_start_index = PAGE(address);
 8000e7e:	4b55      	ldr	r3, [pc, #340]	; (8000fd4 <FLASH_IF_Write+0x160>)
 8000e80:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 8000e84:	4b54      	ldr	r3, [pc, #336]	; (8000fd8 <FLASH_IF_Write+0x164>)
 8000e86:	ea03 2a82 	and.w	sl, r3, r2, lsl #10
 8000e8a:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 8000e8e:	fbb3 f6fa 	udiv	r6, r3, sl
 8000e92:	fb0a 3316 	mls	r3, sl, r6, r3
 8000e96:	0ade      	lsrs	r6, r3, #11
  uint32_t page_end_index = PAGE(address + size - 1);
 8000e98:	f10b 4378 	add.w	r3, fp, #4160749568	; 0xf8000000
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	4403      	add	r3, r0
 8000ea0:	fbb3 f2fa 	udiv	r2, r3, sl
 8000ea4:	fb0a 3312 	mls	r3, sl, r2, r3
  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 8000ea8:	b309      	cbz	r1, 8000eee <FLASH_IF_Write+0x7a>
 8000eaa:	4604      	mov	r4, r0
 8000eac:	ea4f 2ad3 	mov.w	sl, r3, lsr #11
 8000eb0:	4688      	mov	r8, r1
 8000eb2:	ea40 030b 	orr.w	r3, r0, fp
 8000eb6:	f013 0307 	ands.w	r3, r3, #7
 8000eba:	9301      	str	r3, [sp, #4]
 8000ebc:	d11a      	bne.n	8000ef4 <FLASH_IF_Write+0x80>
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000ebe:	4b47      	ldr	r3, [pc, #284]	; (8000fdc <FLASH_IF_Write+0x168>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	db19      	blt.n	8000efa <FLASH_IF_Write+0x86>
  if (page_start_index != page_end_index)
 8000ec6:	4556      	cmp	r6, sl
 8000ec8:	d006      	beq.n	8000ed8 <FLASH_IF_Write+0x64>
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 8000eca:	f3c0 050a 	ubfx	r5, r0, #0, #11
 8000ece:	f5c5 6500 	rsb	r5, r5, #2048	; 0x800
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8000ed2:	d815      	bhi.n	8000f00 <FLASH_IF_Write+0x8c>
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 8000ed4:	464f      	mov	r7, r9
 8000ed6:	e047      	b.n	8000f68 <FLASH_IF_Write+0xf4>
 8000ed8:	4656      	mov	r6, sl
  uint32_t curr_size = size;
 8000eda:	465d      	mov	r5, fp
 8000edc:	e7fa      	b.n	8000ed4 <FLASH_IF_Write+0x60>
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8000ede:	4629      	mov	r1, r5
 8000ee0:	e04f      	b.n	8000f82 <FLASH_IF_Write+0x10e>
    size--;
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8000ee2:	9a01      	ldr	r2, [sp, #4]
 8000ee4:	e061      	b.n	8000faa <FLASH_IF_Write+0x136>
  int32_t status = FLASH_OK;
 8000ee6:	2000      	movs	r0, #0
}
 8000ee8:	b003      	add	sp, #12
 8000eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return FLASH_PARAM_ERROR;
 8000eee:	f06f 0004 	mvn.w	r0, #4
 8000ef2:	e7f9      	b.n	8000ee8 <FLASH_IF_Write+0x74>
 8000ef4:	f06f 0004 	mvn.w	r0, #4
 8000ef8:	e7f6      	b.n	8000ee8 <FLASH_IF_Write+0x74>
    return FLASH_LOCK_ERROR;
 8000efa:	f06f 0003 	mvn.w	r0, #3
 8000efe:	e7f3      	b.n	8000ee8 <FLASH_IF_Write+0x74>
  int32_t status = FLASH_OK;
 8000f00:	2000      	movs	r0, #0
 8000f02:	e7f1      	b.n	8000ee8 <FLASH_IF_Write+0x74>
        status = FLASH_ERASE_ERROR;
 8000f04:	f06f 0001 	mvn.w	r0, #1
 8000f08:	e7ee      	b.n	8000ee8 <FLASH_IF_Write+0x74>
          status = FLASH_WRITE_ERROR;
 8000f0a:	f06f 0002 	mvn.w	r0, #2
 8000f0e:	e7eb      	b.n	8000ee8 <FLASH_IF_Write+0x74>
        return FLASH_PARAM_ERROR;
 8000f10:	f06f 0004 	mvn.w	r0, #4
 8000f14:	e7e8      	b.n	8000ee8 <FLASH_IF_Write+0x74>
      if (dataTempPage == NULL)
 8000f16:	2f00      	cmp	r7, #0
 8000f18:	d0fa      	beq.n	8000f10 <FLASH_IF_Write+0x9c>
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 8000f1a:	ea4f 29c6 	mov.w	r9, r6, lsl #11
 8000f1e:	f109 6900 	add.w	r9, r9, #134217728	; 0x8000000
 8000f22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f26:	4649      	mov	r1, r9
 8000f28:	4638      	mov	r0, r7
 8000f2a:	f00e ff27 	bl	800fd7c <UTIL_MEM_cpy_8>
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 8000f2e:	f3c4 000a 	ubfx	r0, r4, #0, #11
 8000f32:	b2aa      	uxth	r2, r5
 8000f34:	4641      	mov	r1, r8
 8000f36:	4438      	add	r0, r7
 8000f38:	f00e ff20 	bl	800fd7c <UTIL_MEM_cpy_8>
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2101      	movs	r1, #1
 8000f40:	4630      	mov	r0, r6
 8000f42:	f7ff ff7d 	bl	8000e40 <FLASH_IF_EraseByPages>
 8000f46:	2800      	cmp	r0, #0
 8000f48:	d1dc      	bne.n	8000f04 <FLASH_IF_Write+0x90>
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 8000f4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f4e:	4639      	mov	r1, r7
 8000f50:	4648      	mov	r0, r9
 8000f52:	f7ff ff47 	bl	8000de4 <FLASH_IF_Write_Buffer>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	d1d7      	bne.n	8000f0a <FLASH_IF_Write+0x96>
    curr_dest_addr += curr_size;
 8000f5a:	442c      	add	r4, r5
    curr_src_addr += curr_size;
 8000f5c:	44a8      	add	r8, r5
    curr_size = size - curr_size;
 8000f5e:	ebab 0505 	sub.w	r5, fp, r5
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8000f62:	3601      	adds	r6, #1
 8000f64:	45b2      	cmp	sl, r6
 8000f66:	d3be      	bcc.n	8000ee6 <FLASH_IF_Write+0x72>
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 8000f68:	4623      	mov	r3, r4
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8000f6a:	f014 0f07 	tst.w	r4, #7
 8000f6e:	d0b6      	beq.n	8000ede <FLASH_IF_Write+0x6a>
 8000f70:	1928      	adds	r0, r5, r4
    if (*addr++ != UINT8_MAX)
 8000f72:	781a      	ldrb	r2, [r3, #0]
 8000f74:	3301      	adds	r3, #1
 8000f76:	2aff      	cmp	r2, #255	; 0xff
 8000f78:	d1cd      	bne.n	8000f16 <FLASH_IF_Write+0xa2>
    size--;
 8000f7a:	1ac1      	subs	r1, r0, r3
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8000f7c:	f013 0f07 	tst.w	r3, #7
 8000f80:	d1f7      	bne.n	8000f72 <FLASH_IF_Write+0xfe>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8000f82:	ea4f 0ed1 	mov.w	lr, r1, lsr #3
 8000f86:	2907      	cmp	r1, #7
 8000f88:	d9ab      	bls.n	8000ee2 <FLASH_IF_Write+0x6e>
 8000f8a:	9a01      	ldr	r2, [sp, #4]
 8000f8c:	468c      	mov	ip, r1
  {
    if (*addr64++ != UINT64_MAX)
 8000f8e:	f853 1b08 	ldr.w	r1, [r3], #8
 8000f92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8000f96:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000f9a:	bf08      	it	eq
 8000f9c:	f1b1 3fff 	cmpeq.w	r1, #4294967295
 8000fa0:	d1b9      	bne.n	8000f16 <FLASH_IF_Write+0xa2>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8000fa2:	3201      	adds	r2, #1
 8000fa4:	4572      	cmp	r2, lr
 8000fa6:	d3f2      	bcc.n	8000f8e <FLASH_IF_Write+0x11a>
 8000fa8:	4661      	mov	r1, ip
  }
  size -= sizeof(uint64_t) * i;

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
  while (size != 0)
 8000faa:	ebb1 02c2 	subs.w	r2, r1, r2, lsl #3
 8000fae:	d006      	beq.n	8000fbe <FLASH_IF_Write+0x14a>
 8000fb0:	441a      	add	r2, r3
  {
    if (*addr++ != UINT8_MAX)
 8000fb2:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000fb6:	29ff      	cmp	r1, #255	; 0xff
 8000fb8:	d1ad      	bne.n	8000f16 <FLASH_IF_Write+0xa2>
  while (size != 0)
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d1f9      	bne.n	8000fb2 <FLASH_IF_Write+0x13e>
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8000fbe:	462a      	mov	r2, r5
 8000fc0:	4641      	mov	r1, r8
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f7ff ff0e 	bl	8000de4 <FLASH_IF_Write_Buffer>
 8000fc8:	2800      	cmp	r0, #0
 8000fca:	d0c6      	beq.n	8000f5a <FLASH_IF_Write+0xe6>
        status = FLASH_WRITE_ERROR;
 8000fcc:	f06f 0002 	mvn.w	r0, #2
 8000fd0:	e78a      	b.n	8000ee8 <FLASH_IF_Write+0x74>
 8000fd2:	bf00      	nop
 8000fd4:	1fff7000 	.word	0x1fff7000
 8000fd8:	03fffc00 	.word	0x03fffc00
 8000fdc:	58004000 	.word	0x58004000

08000fe0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	2400      	movs	r4, #0
 8000fe6:	9403      	str	r4, [sp, #12]
 8000fe8:	9404      	str	r4, [sp, #16]
 8000fea:	9405      	str	r4, [sp, #20]
 8000fec:	9406      	str	r4, [sp, #24]
 8000fee:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ff6:	f042 0201 	orr.w	r2, r2, #1
 8000ffa:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ffc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ffe:	f002 0201 	and.w	r2, r2, #1
 8001002:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001004:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001006:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001008:	f042 0204 	orr.w	r2, r2, #4
 800100c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800100e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001010:	f002 0204 	and.w	r2, r2, #4
 8001014:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001016:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001018:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800101a:	f042 0202 	orr.w	r2, r2, #2
 800101e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001028:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 800102a:	4d1e      	ldr	r5, [pc, #120]	; (80010a4 <MX_GPIO_Init+0xc4>)
 800102c:	4622      	mov	r2, r4
 800102e:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001032:	4628      	mov	r0, r5
 8001034:	f002 fab6 	bl	80035a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2120      	movs	r1, #32
 800103c:	4628      	mov	r0, r5
 800103e:	f002 fab1 	bl	80035a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001042:	4622      	mov	r2, r4
 8001044:	2131      	movs	r1, #49	; 0x31
 8001046:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104a:	f002 faab 	bl	80035a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 800104e:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001052:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001054:	2601      	movs	r6, #1
 8001056:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105a:	2703      	movs	r7, #3
 800105c:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	a903      	add	r1, sp, #12
 8001060:	4628      	mov	r0, r5
 8001062:	f002 f957 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001066:	2331      	movs	r3, #49	; 0x31
 8001068:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	a903      	add	r1, sp, #12
 8001072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001076:	f002 f94d 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 800107a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001080:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001084:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001086:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001088:	a903      	add	r1, sp, #12
 800108a:	4628      	mov	r0, r5
 800108c:	f002 f942 	bl	8003314 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001090:	4622      	mov	r2, r4
 8001092:	4621      	mov	r1, r4
 8001094:	2029      	movs	r0, #41	; 0x29
 8001096:	f001 fcd7 	bl	8002a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800109a:	2029      	movs	r0, #41	; 0x29
 800109c:	f001 fd0a 	bl	8002ab4 <HAL_NVIC_EnableIRQ>

}
 80010a0:	b009      	add	sp, #36	; 0x24
 80010a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a4:	48000400 	.word	0x48000400

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b510      	push	{r4, lr}
 80010aa:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ac:	2248      	movs	r2, #72	; 0x48
 80010ae:	2100      	movs	r1, #0
 80010b0:	a808      	add	r0, sp, #32
 80010b2:	f00f fd27 	bl	8010b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b6:	2400      	movs	r4, #0
 80010b8:	9402      	str	r4, [sp, #8]
 80010ba:	9403      	str	r4, [sp, #12]
 80010bc:	9404      	str	r4, [sp, #16]
 80010be:	9405      	str	r4, [sp, #20]
 80010c0:	9406      	str	r4, [sp, #24]
 80010c2:	9407      	str	r4, [sp, #28]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010c4:	f002 fa82 	bl	80035cc <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80010c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010cc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80010d0:	f023 0318 	bic.w	r3, r3, #24
 80010d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010dc:	6813      	ldr	r3, [r2, #0]
 80010de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	6813      	ldr	r3, [r2, #0]
 80010ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	9b01      	ldr	r3, [sp, #4]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80010f2:	2305      	movs	r3, #5
 80010f4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 80010f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010fa:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010fc:	2381      	movs	r3, #129	; 0x81
 80010fe:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8001100:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001102:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001104:	a808      	add	r0, sp, #32
 8001106:	f002 fc01 	bl	800390c <HAL_RCC_OscConfig>
 800110a:	b978      	cbnz	r0, 800112c <SystemClock_Config+0x84>
    Error_Handler();
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800110c:	234f      	movs	r3, #79	; 0x4f
 800110e:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001110:	2302      	movs	r3, #2
 8001112:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001118:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800111c:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800111e:	2101      	movs	r1, #1
 8001120:	a802      	add	r0, sp, #8
 8001122:	f002 ff29 	bl	8003f78 <HAL_RCC_ClockConfig>
 8001126:	b918      	cbnz	r0, 8001130 <SystemClock_Config+0x88>
  {
    Error_Handler();
  }
}
 8001128:	b01a      	add	sp, #104	; 0x68
 800112a:	bd10      	pop	{r4, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800112c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800112e:	e7fe      	b.n	800112e <SystemClock_Config+0x86>
 8001130:	b672      	cpsid	i
 8001132:	e7fe      	b.n	8001132 <SystemClock_Config+0x8a>

08001134 <main>:
{
 8001134:	b508      	push	{r3, lr}
  HAL_Init();
 8001136:	f000 ff2d 	bl	8001f94 <HAL_Init>
  SystemClock_Config();
 800113a:	f7ff ffb5 	bl	80010a8 <SystemClock_Config>
  MX_GPIO_Init();
 800113e:	f7ff ff4f 	bl	8000fe0 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001142:	f005 f9f6 	bl	8006532 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001146:	f000 fc6d 	bl	8001a24 <MX_USART2_UART_Init>
  UART2_SET =0;
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <main+0x6c>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 8001150:	2214      	movs	r2, #20
 8001152:	4914      	ldr	r1, [pc, #80]	; (80011a4 <main+0x70>)
 8001154:	4814      	ldr	r0, [pc, #80]	; (80011a8 <main+0x74>)
 8001156:	f005 f9bf 	bl	80064d8 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <main+0x78>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	6813      	ldr	r3, [r2, #0]
 8001160:	f023 0304 	bic.w	r3, r3, #4
 8001164:	6013      	str	r3, [r2, #0]
    if(UART2_SET){
 8001166:	4c0e      	ldr	r4, [pc, #56]	; (80011a0 <main+0x6c>)
    	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 8001168:	4e0e      	ldr	r6, [pc, #56]	; (80011a4 <main+0x70>)
 800116a:	4d0f      	ldr	r5, [pc, #60]	; (80011a8 <main+0x74>)
    MX_LoRaWAN_Process();
 800116c:	f005 f9e7 	bl	800653e <MX_LoRaWAN_Process>
    if(UART2_SET){
 8001170:	7823      	ldrb	r3, [r4, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0fa      	beq.n	800116c <main+0x38>
    	UART2_SET = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	7023      	strb	r3, [r4, #0]
    	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 800117a:	2214      	movs	r2, #20
 800117c:	4631      	mov	r1, r6
 800117e:	4628      	mov	r0, r5
 8001180:	f005 f9aa 	bl	80064d8 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <main+0x78>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	6813      	ldr	r3, [r2, #0]
 800118a:	f023 0304 	bic.w	r3, r3, #4
 800118e:	6013      	str	r3, [r2, #0]
	PM2_5 = mainBuffer[6]*256+mainBuffer[7];
 8001190:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <main+0x7c>)
 8001192:	7991      	ldrb	r1, [r2, #6]
 8001194:	79d3      	ldrb	r3, [r2, #7]
 8001196:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800119a:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <main+0x80>)
 800119c:	8013      	strh	r3, [r2, #0]
 800119e:	e7e5      	b.n	800116c <main+0x38>
 80011a0:	20000004 	.word	0x20000004
 80011a4:	200005d8 	.word	0x200005d8
 80011a8:	200007fc 	.word	0x200007fc
 80011ac:	2000070c 	.word	0x2000070c
 80011b0:	200005ec 	.word	0x200005ec
 80011b4:	200005d4 	.word	0x200005d4

080011b8 <HAL_UARTEx_RxEventCallback>:
{
 80011b8:	b508      	push	{r3, lr}
	if (huart->Instance == USART2)
 80011ba:	6802      	ldr	r2, [r0, #0]
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_UARTEx_RxEventCallback+0x30>)
 80011be:	429a      	cmp	r2, r3
 80011c0:	d000      	beq.n	80011c4 <HAL_UARTEx_RxEventCallback+0xc>
}
 80011c2:	bd08      	pop	{r3, pc}
		if(aRXBufferUser[0]=='B'&& aRXBufferUser[1]=='M'){
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_UARTEx_RxEventCallback+0x34>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b42      	cmp	r3, #66	; 0x42
 80011ca:	d003      	beq.n	80011d4 <HAL_UARTEx_RxEventCallback+0x1c>
		UART2_SET =1;
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_UARTEx_RxEventCallback+0x38>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
}
 80011d2:	e7f6      	b.n	80011c2 <HAL_UARTEx_RxEventCallback+0xa>
		if(aRXBufferUser[0]=='B'&& aRXBufferUser[1]=='M'){
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <HAL_UARTEx_RxEventCallback+0x34>)
 80011d6:	785b      	ldrb	r3, [r3, #1]
 80011d8:	2b4d      	cmp	r3, #77	; 0x4d
 80011da:	d1f7      	bne.n	80011cc <HAL_UARTEx_RxEventCallback+0x14>
		memcpy(mainBuffer,aRXBufferUser,Size);
 80011dc:	460a      	mov	r2, r1
 80011de:	4903      	ldr	r1, [pc, #12]	; (80011ec <HAL_UARTEx_RxEventCallback+0x34>)
 80011e0:	4804      	ldr	r0, [pc, #16]	; (80011f4 <HAL_UARTEx_RxEventCallback+0x3c>)
 80011e2:	f00f fc81 	bl	8010ae8 <memcpy>
 80011e6:	e7f1      	b.n	80011cc <HAL_UARTEx_RxEventCallback+0x14>
 80011e8:	40004400 	.word	0x40004400
 80011ec:	200005d8 	.word	0x200005d8
 80011f0:	20000004 	.word	0x20000004
 80011f4:	200005ec 	.word	0x200005ec

080011f8 <Error_Handler>:
 80011f8:	b672      	cpsid	i
  while (1)
 80011fa:	e7fe      	b.n	80011fa <Error_Handler+0x2>

080011fc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80011fc:	b500      	push	{lr}
 80011fe:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001200:	222c      	movs	r2, #44	; 0x2c
 8001202:	2100      	movs	r1, #0
 8001204:	a801      	add	r0, sp, #4
 8001206:	f00f fc7d 	bl	8010b04 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800120a:	4819      	ldr	r0, [pc, #100]	; (8001270 <MX_RTC_Init+0x74>)
 800120c:	4b19      	ldr	r3, [pc, #100]	; (8001274 <MX_RTC_Init+0x78>)
 800120e:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001210:	231f      	movs	r3, #31
 8001212:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001218:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800121a:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800121c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001220:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001222:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001224:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001228:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800122a:	f003 f9e3 	bl	80045f4 <HAL_RTC_Init>
 800122e:	b9a8      	cbnz	r0, 800125c <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001230:	480f      	ldr	r0, [pc, #60]	; (8001270 <MX_RTC_Init+0x74>)
 8001232:	f003 fb2b 	bl	800488c <HAL_RTCEx_SetSSRU_IT>
 8001236:	b9a0      	cbnz	r0, 8001262 <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001238:	2200      	movs	r2, #0
 800123a:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800123c:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800123e:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001240:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001244:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001246:	f44f 7380 	mov.w	r3, #256	; 0x100
 800124a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800124c:	a901      	add	r1, sp, #4
 800124e:	4808      	ldr	r0, [pc, #32]	; (8001270 <MX_RTC_Init+0x74>)
 8001250:	f003 fa30 	bl	80046b4 <HAL_RTC_SetAlarm_IT>
 8001254:	b940      	cbnz	r0, 8001268 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001256:	b00d      	add	sp, #52	; 0x34
 8001258:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800125c:	f7ff ffcc 	bl	80011f8 <Error_Handler>
 8001260:	e7e6      	b.n	8001230 <MX_RTC_Init+0x34>
    Error_Handler();
 8001262:	f7ff ffc9 	bl	80011f8 <Error_Handler>
 8001266:	e7e7      	b.n	8001238 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001268:	f7ff ffc6 	bl	80011f8 <Error_Handler>
}
 800126c:	e7f3      	b.n	8001256 <MX_RTC_Init+0x5a>
 800126e:	bf00      	nop
 8001270:	20000600 	.word	0x20000600
 8001274:	40002800 	.word	0x40002800

08001278 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001278:	b510      	push	{r4, lr}
 800127a:	b090      	sub	sp, #64	; 0x40
 800127c:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800127e:	2238      	movs	r2, #56	; 0x38
 8001280:	2100      	movs	r1, #0
 8001282:	a802      	add	r0, sp, #8
 8001284:	f00f fc3e 	bl	8010b04 <memset>
  if(rtcHandle->Instance==RTC)
 8001288:	6822      	ldr	r2, [r4, #0]
 800128a:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <HAL_RTC_MspInit+0x7c>)
 800128c:	429a      	cmp	r2, r3
 800128e:	d001      	beq.n	8001294 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001290:	b010      	add	sp, #64	; 0x40
 8001292:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001298:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800129a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800129e:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a0:	a802      	add	r0, sp, #8
 80012a2:	f002 ff9d 	bl	80041e0 <HAL_RCCEx_PeriphCLKConfig>
 80012a6:	bb08      	cbnz	r0, 80012ec <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80012a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ac:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80012b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 80012b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80012be:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80012c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80012c8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	4611      	mov	r1, r2
 80012ce:	2002      	movs	r0, #2
 80012d0:	f001 fbba 	bl	8002a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80012d4:	2002      	movs	r0, #2
 80012d6:	f001 fbed 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	4611      	mov	r1, r2
 80012de:	202a      	movs	r0, #42	; 0x2a
 80012e0:	f001 fbb2 	bl	8002a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80012e4:	202a      	movs	r0, #42	; 0x2a
 80012e6:	f001 fbe5 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
}
 80012ea:	e7d1      	b.n	8001290 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80012ec:	f7ff ff84 	bl	80011f8 <Error_Handler>
 80012f0:	e7da      	b.n	80012a8 <HAL_RTC_MspInit+0x30>
 80012f2:	bf00      	nop
 80012f4:	40002800 	.word	0x40002800

080012f8 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80012f8:	4770      	bx	lr

080012fa <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80012fa:	4770      	bx	lr

080012fc <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80012fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80012fe:	f000 fe5f 	bl	8001fc0 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001302:	2001      	movs	r0, #1
 8001304:	4b02      	ldr	r3, [pc, #8]	; (8001310 <PWR_EnterStopMode+0x14>)
 8001306:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800130a:	f002 f9cb 	bl	80036a4 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800130e:	bd08      	pop	{r3, pc}
 8001310:	58000400 	.word	0x58000400

08001314 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001314:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001316:	f000 fe5a 	bl	8001fce <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800131a:	bd08      	pop	{r3, pc}

0800131c <PWR_ExitStopMode>:
{
 800131c:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 800131e:	f000 fe56 	bl	8001fce <HAL_ResumeTick>
  vcom_Resume();
 8001322:	f000 fd4f 	bl	8001dc4 <vcom_Resume>
}
 8001326:	bd08      	pop	{r3, pc}

08001328 <PWR_EnterSleepMode>:
{
 8001328:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 800132a:	f000 fe49 	bl	8001fc0 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800132e:	2101      	movs	r1, #1
 8001330:	2000      	movs	r0, #0
 8001332:	f002 f953 	bl	80035dc <HAL_PWR_EnterSLEEPMode>
}
 8001336:	bd08      	pop	{r3, pc}

08001338 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001338:	4770      	bx	lr

0800133a <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800133a:	e7fe      	b.n	800133a <NMI_Handler>

0800133c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133c:	e7fe      	b.n	800133c <HardFault_Handler>

0800133e <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <MemManage_Handler>

08001340 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <BusFault_Handler>

08001342 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <UsageFault_Handler>

08001344 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001344:	4770      	bx	lr

08001346 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001346:	4770      	bx	lr

08001348 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001348:	4770      	bx	lr

0800134a <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134a:	4770      	bx	lr

0800134c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 800134c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800134e:	4802      	ldr	r0, [pc, #8]	; (8001358 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001350:	f003 fac8 	bl	80048e4 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001354:	bd08      	pop	{r3, pc}
 8001356:	bf00      	nop
 8001358:	20000600 	.word	0x20000600

0800135c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800135c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800135e:	4802      	ldr	r0, [pc, #8]	; (8001368 <DMA1_Channel1_IRQHandler+0xc>)
 8001360:	f001 fdc8 	bl	8002ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001364:	bd08      	pop	{r3, pc}
 8001366:	bf00      	nop
 8001368:	200006ac 	.word	0x200006ac

0800136c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800136c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800136e:	4802      	ldr	r0, [pc, #8]	; (8001378 <DMA1_Channel2_IRQHandler+0xc>)
 8001370:	f001 fdc0 	bl	8002ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001374:	bd08      	pop	{r3, pc}
 8001376:	bf00      	nop
 8001378:	2000064c 	.word	0x2000064c

0800137c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800137c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800137e:	4802      	ldr	r0, [pc, #8]	; (8001388 <DMA1_Channel3_IRQHandler+0xc>)
 8001380:	f001 fdb8 	bl	8002ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001384:	bd08      	pop	{r3, pc}
 8001386:	bf00      	nop
 8001388:	2000070c 	.word	0x2000070c

0800138c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 800138c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800138e:	4802      	ldr	r0, [pc, #8]	; (8001398 <USART1_IRQHandler+0xc>)
 8001390:	f003 ff2c 	bl	80051ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001394:	bd08      	pop	{r3, pc}
 8001396:	bf00      	nop
 8001398:	2000076c 	.word	0x2000076c

0800139c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800139c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800139e:	4802      	ldr	r0, [pc, #8]	; (80013a8 <USART2_IRQHandler+0xc>)
 80013a0:	f003 ff24 	bl	80051ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013a4:	bd08      	pop	{r3, pc}
 80013a6:	bf00      	nop
 80013a8:	200007fc 	.word	0x200007fc

080013ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 80013ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 80013ae:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013b2:	f002 f8fd 	bl	80035b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013b6:	bd08      	pop	{r3, pc}

080013b8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80013b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80013ba:	4802      	ldr	r0, [pc, #8]	; (80013c4 <RTC_Alarm_IRQHandler+0xc>)
 80013bc:	f003 f88c 	bl	80044d8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80013c0:	bd08      	pop	{r3, pc}
 80013c2:	bf00      	nop
 80013c4:	20000600 	.word	0x20000600

080013c8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80013c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80013ca:	4802      	ldr	r0, [pc, #8]	; (80013d4 <SUBGHZ_Radio_IRQHandler+0xc>)
 80013cc:	f003 fd20 	bl	8004e10 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80013d0:	bd08      	pop	{r3, pc}
 80013d2:	bf00      	nop
 80013d4:	20000638 	.word	0x20000638

080013d8 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 80013d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 80013da:	4802      	ldr	r0, [pc, #8]	; (80013e4 <DMAMUX1_OVR_IRQHandler+0xc>)
 80013dc:	f001 fe28 	bl	8003030 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 80013e0:	bd08      	pop	{r3, pc}
 80013e2:	bf00      	nop
 80013e4:	2000064c 	.word	0x2000064c

080013e8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80013e8:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_SUBGHZ_Init+0x18>)
 80013ec:	2308      	movs	r3, #8
 80013ee:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80013f0:	f003 faae 	bl	8004950 <HAL_SUBGHZ_Init>
 80013f4:	b900      	cbnz	r0, 80013f8 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80013f6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80013f8:	f7ff fefe 	bl	80011f8 <Error_Handler>
}
 80013fc:	e7fb      	b.n	80013f6 <MX_SUBGHZ_Init+0xe>
 80013fe:	bf00      	nop
 8001400:	20000638 	.word	0x20000638

08001404 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001404:	b500      	push	{lr}
 8001406:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800140c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800140e:	f042 0201 	orr.w	r2, r2, #1
 8001412:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800141c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	4611      	mov	r1, r2
 8001422:	2032      	movs	r0, #50	; 0x32
 8001424:	f001 fb10 	bl	8002a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001428:	2032      	movs	r0, #50	; 0x32
 800142a:	f001 fb43 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800142e:	b003      	add	sp, #12
 8001430:	f85d fb04 	ldr.w	pc, [sp], #4

08001434 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001434:	b40c      	push	{r2, r3}
 8001436:	b500      	push	{lr}
 8001438:	b083      	sub	sp, #12
 800143a:	ab04      	add	r3, sp, #16
 800143c:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001440:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001442:	f00e fd9b 	bl	800ff7c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001446:	b003      	add	sp, #12
 8001448:	f85d eb04 	ldr.w	lr, [sp], #4
 800144c:	b002      	add	sp, #8
 800144e:	4770      	bx	lr

08001450 <TimestampNow>:
{
 8001450:	b530      	push	{r4, r5, lr}
 8001452:	b085      	sub	sp, #20
 8001454:	4604      	mov	r4, r0
 8001456:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001458:	a802      	add	r0, sp, #8
 800145a:	f00e fd05 	bl	800fe68 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800145e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	9b02      	ldr	r3, [sp, #8]
 8001466:	4a05      	ldr	r2, [pc, #20]	; (800147c <TimestampNow+0x2c>)
 8001468:	2110      	movs	r1, #16
 800146a:	4620      	mov	r0, r4
 800146c:	f7ff ffe2 	bl	8001434 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001470:	4620      	mov	r0, r4
 8001472:	f7fe fe81 	bl	8000178 <strlen>
 8001476:	8028      	strh	r0, [r5, #0]
}
 8001478:	b005      	add	sp, #20
 800147a:	bd30      	pop	{r4, r5, pc}
 800147c:	08010d6c 	.word	0x08010d6c

08001480 <SystemApp_Init>:
{
 8001480:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001486:	6893      	ldr	r3, [r2, #8]
 8001488:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800148c:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 800148e:	f00f f80b 	bl	80104a8 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001492:	2401      	movs	r4, #1
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <SystemApp_Init+0x54>)
 8001496:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001498:	f000 f8bc 	bl	8001614 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 800149c:	f00f f9dc 	bl	8010858 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80014a0:	480d      	ldr	r0, [pc, #52]	; (80014d8 <SystemApp_Init+0x58>)
 80014a2:	f00f f9f3 	bl	801088c <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80014a6:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <SystemApp_Init+0x5c>)
 80014a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014ac:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80014ae:	2002      	movs	r0, #2
 80014b0:	f00f f9f2 	bl	8010898 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 80014b4:	f7ff fc12 	bl	8000cdc <SYS_InitMeasurement>
  EnvSensors_Init();
 80014b8:	f000 f936 	bl	8001728 <EnvSensors_Init>
  UTIL_LPM_Init();
 80014bc:	f00e fc04 	bl	800fcc8 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80014c0:	4621      	mov	r1, r4
 80014c2:	4620      	mov	r0, r4
 80014c4:	f00e fc20 	bl	800fd08 <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80014c8:	4621      	mov	r1, r4
 80014ca:	4620      	mov	r0, r4
 80014cc:	f00e fc06 	bl	800fcdc <UTIL_LPM_SetStopMode>
}
 80014d0:	bd10      	pop	{r4, pc}
 80014d2:	bf00      	nop
 80014d4:	20000644 	.word	0x20000644
 80014d8:	08001451 	.word	0x08001451
 80014dc:	58004000 	.word	0x58004000

080014e0 <UTIL_SEQ_Idle>:
{
 80014e0:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 80014e2:	f00e fc27 	bl	800fd34 <UTIL_LPM_EnterLowPower>
}
 80014e6:	bd08      	pop	{r3, pc}

080014e8 <GetBatteryLevel>:
{
 80014e8:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80014ea:	f7ff fbff 	bl	8000cec <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 80014ee:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80014f2:	4298      	cmp	r0, r3
 80014f4:	d80d      	bhi.n	8001512 <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 80014f6:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 80014fa:	d30c      	bcc.n	8001516 <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80014fc:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 8001500:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8001504:	0040      	lsls	r0, r0, #1
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <GetBatteryLevel+0x34>)
 8001508:	fba3 3000 	umull	r3, r0, r3, r0
 800150c:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8001510:	e000      	b.n	8001514 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 8001512:	20fe      	movs	r0, #254	; 0xfe
}
 8001514:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 8001516:	2000      	movs	r0, #0
 8001518:	e7fc      	b.n	8001514 <GetBatteryLevel+0x2c>
 800151a:	bf00      	nop
 800151c:	1b4e81b5 	.word	0x1b4e81b5

08001520 <GetTemperatureLevel>:
{
 8001520:	b500      	push	{lr}
 8001522:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 8001524:	4668      	mov	r0, sp
 8001526:	f000 f8e9 	bl	80016fc <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 800152a:	9801      	ldr	r0, [sp, #4]
 800152c:	f7ff f9a6 	bl	800087c <__aeabi_f2iz>
}
 8001530:	b200      	sxth	r0, r0
 8001532:	b007      	add	sp, #28
 8001534:	f85d fb04 	ldr.w	pc, [sp], #4

08001538 <GetUniqueId>:
{
 8001538:	b538      	push	{r3, r4, r5, lr}
 800153a:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <GetUniqueId+0x68>)
 800153e:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001546:	d013      	beq.n	8001570 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001548:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 800154a:	0a1a      	lsrs	r2, r3, #8
 800154c:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 800154e:	0c1a      	lsrs	r2, r3, #16
 8001550:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001552:	0e1b      	lsrs	r3, r3, #24
 8001554:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <GetUniqueId+0x68>)
    id[3] = val & 0xFF;
 8001558:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
 800155c:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800155e:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001562:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001564:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001566:	0c1a      	lsrs	r2, r3, #16
 8001568:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 800156a:	0e1b      	lsrs	r3, r3, #24
 800156c:	7003      	strb	r3, [r0, #0]
}
 800156e:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001570:	f000 fd34 	bl	8001fdc <HAL_GetUIDw0>
 8001574:	4605      	mov	r5, r0
 8001576:	f000 fd3d 	bl	8001ff4 <HAL_GetUIDw2>
 800157a:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 800157c:	f000 fd34 	bl	8001fe8 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001580:	0e2b      	lsrs	r3, r5, #24
 8001582:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001584:	0c2b      	lsrs	r3, r5, #16
 8001586:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001588:	0a2b      	lsrs	r3, r5, #8
 800158a:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 800158c:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 800158e:	0e03      	lsrs	r3, r0, #24
 8001590:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001592:	0c03      	lsrs	r3, r0, #16
 8001594:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001596:	0a03      	lsrs	r3, r0, #8
 8001598:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 800159a:	7020      	strb	r0, [r4, #0]
 800159c:	e7e7      	b.n	800156e <GetUniqueId+0x36>
 800159e:	bf00      	nop
 80015a0:	1fff7000 	.word	0x1fff7000

080015a4 <GetDevAddr>:
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <GetDevAddr+0x24>)
 80015a6:	f8d3 0580 	ldr.w	r0, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)
 80015aa:	f1b0 3fff 	cmp.w	r0, #4294967295
 80015ae:	d000      	beq.n	80015b2 <GetDevAddr+0xe>
}
 80015b0:	4770      	bx	lr
{
 80015b2:	b510      	push	{r4, lr}
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80015b4:	f000 fd12 	bl	8001fdc <HAL_GetUIDw0>
 80015b8:	4604      	mov	r4, r0
 80015ba:	f000 fd15 	bl	8001fe8 <HAL_GetUIDw1>
 80015be:	4044      	eors	r4, r0
 80015c0:	f000 fd18 	bl	8001ff4 <HAL_GetUIDw2>
 80015c4:	4060      	eors	r0, r4
}
 80015c6:	bd10      	pop	{r4, pc}
 80015c8:	1fff7000 	.word	0x1fff7000

080015cc <UTIL_ADV_TRACE_PreSendHook>:
{
 80015cc:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80015ce:	2101      	movs	r1, #1
 80015d0:	2002      	movs	r0, #2
 80015d2:	f00e fb83 	bl	800fcdc <UTIL_LPM_SetStopMode>
}
 80015d6:	bd08      	pop	{r3, pc}

080015d8 <UTIL_ADV_TRACE_PostSendHook>:
{
 80015d8:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80015da:	2100      	movs	r1, #0
 80015dc:	2002      	movs	r0, #2
 80015de:	f00e fb7d 	bl	800fcdc <UTIL_LPM_SetStopMode>
}
 80015e2:	bd08      	pop	{r3, pc}

080015e4 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80015e4:	2000      	movs	r0, #0
 80015e6:	4770      	bx	lr

080015e8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80015e8:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80015ea:	4b04      	ldr	r3, [pc, #16]	; (80015fc <HAL_GetTick+0x14>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b90b      	cbnz	r3, 80015f4 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 80015f0:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 80015f2:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 80015f4:	f000 f8c6 	bl	8001784 <TIMER_IF_GetTimerValue>
 80015f8:	e7fb      	b.n	80015f2 <HAL_GetTick+0xa>
 80015fa:	bf00      	nop
 80015fc:	20000644 	.word	0x20000644

08001600 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001600:	b500      	push	{lr}
 8001602:	b083      	sub	sp, #12
 8001604:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001606:	9801      	ldr	r0, [sp, #4]
 8001608:	f000 f998 	bl	800193c <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800160c:	b003      	add	sp, #12
 800160e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001614 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001618:	b08b      	sub	sp, #44	; 0x2c
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 800161a:	4a36      	ldr	r2, [pc, #216]	; (80016f4 <DBG_Init+0xe0>)
 800161c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001628:	f000 fcea 	bl	8002000 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800162c:	f000 fcf0 	bl	8002010 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8001630:	f000 fcf6 	bl	8002020 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001634:	2500      	movs	r5, #0
 8001636:	9507      	str	r5, [sp, #28]
 8001638:	9509      	str	r5, [sp, #36]	; 0x24

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 800163a:	2601      	movs	r6, #1
 800163c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	9308      	str	r3, [sp, #32]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001646:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001648:	4332      	orrs	r2, r6
 800164a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800164c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800164e:	4032      	ands	r2, r6
 8001650:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8001652:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001654:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001656:	f042 0202 	orr.w	r2, r2, #2
 800165a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800165c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800165e:	f002 0202 	and.w	r2, r2, #2
 8001662:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8001664:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001666:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001668:	f042 0202 	orr.w	r2, r2, #2
 800166c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800166e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001670:	f002 0202 	and.w	r2, r2, #2
 8001674:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001676:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001678:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800167a:	f042 0202 	orr.w	r2, r2, #2
 800167e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001688:	9b01      	ldr	r3, [sp, #4]
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();
  PROBE_LINE3_CLK_ENABLE();
  PROBE_LINE4_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 800168a:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 800168c:	a905      	add	r1, sp, #20
 800168e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001692:	f001 fe3f 	bl	8003314 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001696:	f44f 6980 	mov.w	r9, #1024	; 0x400
 800169a:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 800169e:	4c16      	ldr	r4, [pc, #88]	; (80016f8 <DBG_Init+0xe4>)
 80016a0:	a905      	add	r1, sp, #20
 80016a2:	4620      	mov	r0, r4
 80016a4:	f001 fe36 	bl	8003314 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 80016a8:	f04f 0808 	mov.w	r8, #8
 80016ac:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 80016b0:	a905      	add	r1, sp, #20
 80016b2:	4620      	mov	r0, r4
 80016b4:	f001 fe2e 	bl	8003314 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 80016b8:	2710      	movs	r7, #16
 80016ba:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 80016bc:	a905      	add	r1, sp, #20
 80016be:	4620      	mov	r0, r4
 80016c0:	f001 fe28 	bl	8003314 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 80016c4:	462a      	mov	r2, r5
 80016c6:	4631      	mov	r1, r6
 80016c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016cc:	f001 ff6a 	bl	80035a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80016d0:	462a      	mov	r2, r5
 80016d2:	4649      	mov	r1, r9
 80016d4:	4620      	mov	r0, r4
 80016d6:	f001 ff65 	bl	80035a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 80016da:	462a      	mov	r2, r5
 80016dc:	4641      	mov	r1, r8
 80016de:	4620      	mov	r0, r4
 80016e0:	f001 ff60 	bl	80035a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 80016e4:	462a      	mov	r2, r5
 80016e6:	4639      	mov	r1, r7
 80016e8:	4620      	mov	r0, r4
 80016ea:	f001 ff5b 	bl	80035a4 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80016ee:	b00b      	add	sp, #44	; 0x2c
 80016f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016f4:	58000800 	.word	0x58000800
 80016f8:	48000400 	.word	0x48000400

080016fc <EnvSensors_Read>:
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <EnvSensors_Read+0x18>)
 80016fe:	6083      	str	r3, [r0, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <EnvSensors_Read+0x1c>)
 8001702:	6043      	str	r3, [r0, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <EnvSensors_Read+0x20>)
 8001706:	6003      	str	r3, [r0, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <EnvSensors_Read+0x24>)
 800170a:	60c3      	str	r3, [r0, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <EnvSensors_Read+0x28>)
 800170e:	6103      	str	r3, [r0, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8001710:	2000      	movs	r0, #0
 8001712:	4770      	bx	lr
 8001714:	42480000 	.word	0x42480000
 8001718:	41900000 	.word	0x41900000
 800171c:	447a0000 	.word	0x447a0000
 8001720:	003e090d 	.word	0x003e090d
 8001724:	000503ab 	.word	0x000503ab

08001728 <EnvSensors_Init>:
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001728:	2000      	movs	r0, #0
 800172a:	4770      	bx	lr

0800172c <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800172c:	4770      	bx	lr
	...

08001730 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <TIMER_IF_SetTimerContext+0x1c>)
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001736:	4282      	cmp	r2, r0
 8001738:	d003      	beq.n	8001742 <TIMER_IF_SetTimerContext+0x12>
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	6898      	ldr	r0, [r3, #8]
 800173e:	4282      	cmp	r2, r0
 8001740:	d1fb      	bne.n	800173a <TIMER_IF_SetTimerContext+0xa>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8001742:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001744:	4b02      	ldr	r3, [pc, #8]	; (8001750 <TIMER_IF_SetTimerContext+0x20>)
 8001746:	6018      	str	r0, [r3, #0]
}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40002800 	.word	0x40002800
 8001750:	20000648 	.word	0x20000648

08001754 <TIMER_IF_GetTimerContext>:
}
 8001754:	4b01      	ldr	r3, [pc, #4]	; (800175c <TIMER_IF_GetTimerContext+0x8>)
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000648 	.word	0x20000648

08001760 <TIMER_IF_GetTimerElapsedTime>:
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001766:	4282      	cmp	r2, r0
 8001768:	d003      	beq.n	8001772 <TIMER_IF_GetTimerElapsedTime+0x12>
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	6898      	ldr	r0, [r3, #8]
 800176e:	4282      	cmp	r2, r0
 8001770:	d1fb      	bne.n	800176a <TIMER_IF_GetTimerElapsedTime+0xa>
  return UINT32_MAX - ssr;
 8001772:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001774:	4b02      	ldr	r3, [pc, #8]	; (8001780 <TIMER_IF_GetTimerElapsedTime+0x20>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	1ac0      	subs	r0, r0, r3
 800177a:	4770      	bx	lr
 800177c:	40002800 	.word	0x40002800
 8001780:	20000648 	.word	0x20000648

08001784 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <TIMER_IF_GetTimerValue+0x20>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	b153      	cbz	r3, 80017a0 <TIMER_IF_GetTimerValue+0x1c>
 800178a:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <TIMER_IF_GetTimerValue+0x24>)
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001790:	4282      	cmp	r2, r0
 8001792:	d003      	beq.n	800179c <TIMER_IF_GetTimerValue+0x18>
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	6898      	ldr	r0, [r3, #8]
 8001798:	4282      	cmp	r2, r0
 800179a:	d1fb      	bne.n	8001794 <TIMER_IF_GetTimerValue+0x10>
  return UINT32_MAX - ssr;
 800179c:	43c0      	mvns	r0, r0
 800179e:	4770      	bx	lr
  uint32_t ret = 0;
 80017a0:	2000      	movs	r0, #0
}
 80017a2:	4770      	bx	lr
 80017a4:	20000645 	.word	0x20000645
 80017a8:	40002800 	.word	0x40002800

080017ac <TIMER_IF_GetMinimumTimeout>:
}
 80017ac:	2003      	movs	r0, #3
 80017ae:	4770      	bx	lr

080017b0 <TIMER_IF_Convert_ms2Tick>:
{
 80017b0:	b508      	push	{r3, lr}
 80017b2:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80017b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017b8:	2300      	movs	r3, #0
 80017ba:	0280      	lsls	r0, r0, #10
 80017bc:	0d89      	lsrs	r1, r1, #22
 80017be:	f7ff f883 	bl	80008c8 <__aeabi_uldivmod>
}
 80017c2:	bd08      	pop	{r3, pc}

080017c4 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80017c4:	0ec2      	lsrs	r2, r0, #27
 80017c6:	0143      	lsls	r3, r0, #5
 80017c8:	1a1b      	subs	r3, r3, r0
 80017ca:	f162 0200 	sbc.w	r2, r2, #0
 80017ce:	0092      	lsls	r2, r2, #2
 80017d0:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	181b      	adds	r3, r3, r0
 80017d8:	f142 0000 	adc.w	r0, r2, #0
 80017dc:	00c0      	lsls	r0, r0, #3
 80017de:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80017e2:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 80017e6:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 80017ea:	4770      	bx	lr

080017ec <TIMER_IF_StopTimer>:
{
 80017ec:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80017ee:	4b07      	ldr	r3, [pc, #28]	; (800180c <TIMER_IF_StopTimer+0x20>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80017f4:	4c06      	ldr	r4, [pc, #24]	; (8001810 <TIMER_IF_StopTimer+0x24>)
 80017f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017fa:	4620      	mov	r0, r4
 80017fc:	f002 fe2c 	bl	8004458 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001800:	f04f 33ff 	mov.w	r3, #4294967295
 8001804:	6323      	str	r3, [r4, #48]	; 0x30
}
 8001806:	2000      	movs	r0, #0
 8001808:	bd10      	pop	{r4, pc}
 800180a:	bf00      	nop
 800180c:	40002800 	.word	0x40002800
 8001810:	20000600 	.word	0x20000600

08001814 <TIMER_IF_Init>:
{
 8001814:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <TIMER_IF_Init+0x44>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	b10b      	cbz	r3, 8001820 <TIMER_IF_Init+0xc>
}
 800181c:	2000      	movs	r0, #0
 800181e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001820:	4c0e      	ldr	r4, [pc, #56]	; (800185c <TIMER_IF_Init+0x48>)
 8001822:	f04f 35ff 	mov.w	r5, #4294967295
 8001826:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8001828:	f7ff fce8 	bl	80011fc <MX_RTC_Init>
    TIMER_IF_StopTimer();
 800182c:	f7ff ffde 	bl	80017ec <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001830:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001834:	4620      	mov	r0, r4
 8001836:	f002 fe0f 	bl	8004458 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800183a:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800183c:	4620      	mov	r0, r4
 800183e:	f003 f805 	bl	800484c <HAL_RTCEx_EnableBypassShadow>
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001842:	2200      	movs	r2, #0
 8001844:	2102      	movs	r1, #2
 8001846:	4620      	mov	r0, r4
 8001848:	f003 f861 	bl	800490e <HAL_RTCEx_BKUPWrite>
    TIMER_IF_SetTimerContext();
 800184c:	f7ff ff70 	bl	8001730 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001850:	4b01      	ldr	r3, [pc, #4]	; (8001858 <TIMER_IF_Init+0x44>)
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]
 8001856:	e7e1      	b.n	800181c <TIMER_IF_Init+0x8>
 8001858:	20000645 	.word	0x20000645
 800185c:	20000600 	.word	0x20000600

08001860 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001860:	b508      	push	{r3, lr}
 8001862:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001864:	2100      	movs	r1, #0
 8001866:	4802      	ldr	r0, [pc, #8]	; (8001870 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001868:	f003 f851 	bl	800490e <HAL_RTCEx_BKUPWrite>
}
 800186c:	bd08      	pop	{r3, pc}
 800186e:	bf00      	nop
 8001870:	20000600 	.word	0x20000600

08001874 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001874:	b508      	push	{r3, lr}
 8001876:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001878:	2101      	movs	r1, #1
 800187a:	4802      	ldr	r0, [pc, #8]	; (8001884 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 800187c:	f003 f847 	bl	800490e <HAL_RTCEx_BKUPWrite>
}
 8001880:	bd08      	pop	{r3, pc}
 8001882:	bf00      	nop
 8001884:	20000600 	.word	0x20000600

08001888 <TIMER_IF_StartTimer>:
{
 8001888:	b510      	push	{r4, lr}
 800188a:	b08c      	sub	sp, #48	; 0x30
 800188c:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 800188e:	222c      	movs	r2, #44	; 0x2c
 8001890:	2100      	movs	r1, #0
 8001892:	a801      	add	r0, sp, #4
 8001894:	f00f f936 	bl	8010b04 <memset>
  TIMER_IF_StopTimer();
 8001898:	f7ff ffa8 	bl	80017ec <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <TIMER_IF_StartTimer+0x48>)
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80018a2:	2300      	movs	r3, #0
 80018a4:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80018a6:	43e4      	mvns	r4, r4
 80018a8:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80018aa:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80018ac:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80018b0:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80018b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018b6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80018b8:	2201      	movs	r2, #1
 80018ba:	a901      	add	r1, sp, #4
 80018bc:	4805      	ldr	r0, [pc, #20]	; (80018d4 <TIMER_IF_StartTimer+0x4c>)
 80018be:	f002 fef9 	bl	80046b4 <HAL_RTC_SetAlarm_IT>
 80018c2:	b910      	cbnz	r0, 80018ca <TIMER_IF_StartTimer+0x42>
}
 80018c4:	2000      	movs	r0, #0
 80018c6:	b00c      	add	sp, #48	; 0x30
 80018c8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80018ca:	f7ff fc95 	bl	80011f8 <Error_Handler>
 80018ce:	e7f9      	b.n	80018c4 <TIMER_IF_StartTimer+0x3c>
 80018d0:	20000648 	.word	0x20000648
 80018d4:	20000600 	.word	0x20000600

080018d8 <TIMER_IF_BkUp_Read_Seconds>:
{
 80018d8:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80018da:	2100      	movs	r1, #0
 80018dc:	4801      	ldr	r0, [pc, #4]	; (80018e4 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 80018de:	f003 f81d 	bl	800491c <HAL_RTCEx_BKUPRead>
}
 80018e2:	bd08      	pop	{r3, pc}
 80018e4:	20000600 	.word	0x20000600

080018e8 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 80018e8:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80018ea:	2101      	movs	r1, #1
 80018ec:	4801      	ldr	r0, [pc, #4]	; (80018f4 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 80018ee:	f003 f815 	bl	800491c <HAL_RTCEx_BKUPRead>
}
 80018f2:	bd08      	pop	{r3, pc}
 80018f4:	20000600 	.word	0x20000600

080018f8 <TIMER_IF_GetTime>:
{
 80018f8:	b538      	push	{r3, r4, r5, lr}
 80018fa:	4605      	mov	r5, r0
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <TIMER_IF_GetTime+0x3c>)
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001902:	42a2      	cmp	r2, r4
 8001904:	d003      	beq.n	800190e <TIMER_IF_GetTime+0x16>
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	689c      	ldr	r4, [r3, #8]
 800190a:	42a2      	cmp	r2, r4
 800190c:	d1fb      	bne.n	8001906 <TIMER_IF_GetTime+0xe>
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800190e:	2102      	movs	r1, #2
 8001910:	4809      	ldr	r0, [pc, #36]	; (8001938 <TIMER_IF_GetTime+0x40>)
 8001912:	f003 f803 	bl	800491c <HAL_RTCEx_BKUPRead>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001916:	43e4      	mvns	r4, r4
  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8001918:	f3c4 0209 	ubfx	r2, r4, #0, #10
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800191c:	0153      	lsls	r3, r2, #5
 800191e:	1a9b      	subs	r3, r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	189b      	adds	r3, r3, r2
 8001924:	f3c3 13d5 	ubfx	r3, r3, #7, #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001928:	802b      	strh	r3, [r5, #0]
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800192a:	0aa4      	lsrs	r4, r4, #10
}
 800192c:	ea44 5080 	orr.w	r0, r4, r0, lsl #22
 8001930:	bd38      	pop	{r3, r4, r5, pc}
 8001932:	bf00      	nop
 8001934:	40002800 	.word	0x40002800
 8001938:	20000600 	.word	0x20000600

0800193c <TIMER_IF_DelayMs>:
{
 800193c:	b508      	push	{r3, lr}
 800193e:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001940:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001944:	2300      	movs	r3, #0
 8001946:	0280      	lsls	r0, r0, #10
 8001948:	0d89      	lsrs	r1, r1, #22
 800194a:	f7fe ffbd 	bl	80008c8 <__aeabi_uldivmod>
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <TIMER_IF_DelayMs+0x4c>)
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001954:	429a      	cmp	r2, r3
 8001956:	d004      	beq.n	8001962 <TIMER_IF_DelayMs+0x26>
 8001958:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <TIMER_IF_DelayMs+0x4c>)
 800195a:	6891      	ldr	r1, [r2, #8]
 800195c:	6893      	ldr	r3, [r2, #8]
 800195e:	4299      	cmp	r1, r3
 8001960:	d1fb      	bne.n	800195a <TIMER_IF_DelayMs+0x1e>
  return UINT32_MAX - ssr;
 8001962:	ea6f 0c03 	mvn.w	ip, r3
 8001966:	4a08      	ldr	r2, [pc, #32]	; (8001988 <TIMER_IF_DelayMs+0x4c>)
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001968:	e000      	b.n	800196c <TIMER_IF_DelayMs+0x30>
    __NOP();
 800196a:	bf00      	nop
 800196c:	6893      	ldr	r3, [r2, #8]
 800196e:	6891      	ldr	r1, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001970:	4299      	cmp	r1, r3
 8001972:	d003      	beq.n	800197c <TIMER_IF_DelayMs+0x40>
 8001974:	6891      	ldr	r1, [r2, #8]
 8001976:	6893      	ldr	r3, [r2, #8]
 8001978:	4299      	cmp	r1, r3
 800197a:	d1fb      	bne.n	8001974 <TIMER_IF_DelayMs+0x38>
  return UINT32_MAX - ssr;
 800197c:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800197e:	eba3 030c 	sub.w	r3, r3, ip
 8001982:	4283      	cmp	r3, r0
 8001984:	d3f1      	bcc.n	800196a <TIMER_IF_DelayMs+0x2e>
}
 8001986:	bd08      	pop	{r3, pc}
 8001988:	40002800 	.word	0x40002800

0800198c <HAL_RTC_AlarmAEventCallback>:
{
 800198c:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800198e:	f00e febb 	bl	8010708 <UTIL_TIMER_IRQ_Handler>
}
 8001992:	bd08      	pop	{r3, pc}

08001994 <HAL_RTCEx_SSRUEventCallback>:
{
 8001994:	b510      	push	{r4, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001996:	4c05      	ldr	r4, [pc, #20]	; (80019ac <HAL_RTCEx_SSRUEventCallback+0x18>)
 8001998:	2102      	movs	r1, #2
 800199a:	4620      	mov	r0, r4
 800199c:	f002 ffbe 	bl	800491c <HAL_RTCEx_BKUPRead>
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80019a0:	1c42      	adds	r2, r0, #1
 80019a2:	2102      	movs	r1, #2
 80019a4:	4620      	mov	r0, r4
 80019a6:	f002 ffb2 	bl	800490e <HAL_RTCEx_BKUPWrite>
}
 80019aa:	bd10      	pop	{r4, pc}
 80019ac:	20000600 	.word	0x20000600

080019b0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019b0:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019b2:	481a      	ldr	r0, [pc, #104]	; (8001a1c <MX_USART1_UART_Init+0x6c>)
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <MX_USART1_UART_Init+0x70>)
 80019b6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80019b8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80019bc:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019be:	2300      	movs	r3, #0
 80019c0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019c2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019c4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019c6:	220c      	movs	r2, #12
 80019c8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ca:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019cc:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ce:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019d0:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 80019d2:	2240      	movs	r2, #64	; 0x40
 80019d4:	6282      	str	r2, [r0, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 80019d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019da:	6442      	str	r2, [r0, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 80019dc:	6483      	str	r3, [r0, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019de:	f004 faf3 	bl	8005fc8 <HAL_UART_Init>
 80019e2:	b970      	cbnz	r0, 8001a02 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e4:	2100      	movs	r1, #0
 80019e6:	480d      	ldr	r0, [pc, #52]	; (8001a1c <MX_USART1_UART_Init+0x6c>)
 80019e8:	f004 fd2c 	bl	8006444 <HAL_UARTEx_SetTxFifoThreshold>
 80019ec:	b960      	cbnz	r0, 8001a08 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ee:	2100      	movs	r1, #0
 80019f0:	480a      	ldr	r0, [pc, #40]	; (8001a1c <MX_USART1_UART_Init+0x6c>)
 80019f2:	f004 fd4c 	bl	800648e <HAL_UARTEx_SetRxFifoThreshold>
 80019f6:	b950      	cbnz	r0, 8001a0e <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80019f8:	4808      	ldr	r0, [pc, #32]	; (8001a1c <MX_USART1_UART_Init+0x6c>)
 80019fa:	f004 fce0 	bl	80063be <HAL_UARTEx_EnableFifoMode>
 80019fe:	b948      	cbnz	r0, 8001a14 <MX_USART1_UART_Init+0x64>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a00:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001a02:	f7ff fbf9 	bl	80011f8 <Error_Handler>
 8001a06:	e7ed      	b.n	80019e4 <MX_USART1_UART_Init+0x34>
    Error_Handler();
 8001a08:	f7ff fbf6 	bl	80011f8 <Error_Handler>
 8001a0c:	e7ef      	b.n	80019ee <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 8001a0e:	f7ff fbf3 	bl	80011f8 <Error_Handler>
 8001a12:	e7f1      	b.n	80019f8 <MX_USART1_UART_Init+0x48>
    Error_Handler();
 8001a14:	f7ff fbf0 	bl	80011f8 <Error_Handler>
}
 8001a18:	e7f2      	b.n	8001a00 <MX_USART1_UART_Init+0x50>
 8001a1a:	bf00      	nop
 8001a1c:	2000076c 	.word	0x2000076c
 8001a20:	40013800 	.word	0x40013800

08001a24 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a24:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a26:	4818      	ldr	r0, [pc, #96]	; (8001a88 <MX_USART2_UART_Init+0x64>)
 8001a28:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <MX_USART2_UART_Init+0x68>)
 8001a2a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8001a2c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001a30:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a32:	2300      	movs	r3, #0
 8001a34:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a36:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a38:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8001a40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a44:	61c2      	str	r2, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a46:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a48:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a4a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a4c:	f004 fabc 	bl	8005fc8 <HAL_UART_Init>
 8001a50:	b970      	cbnz	r0, 8001a70 <MX_USART2_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a52:	2100      	movs	r1, #0
 8001a54:	480c      	ldr	r0, [pc, #48]	; (8001a88 <MX_USART2_UART_Init+0x64>)
 8001a56:	f004 fcf5 	bl	8006444 <HAL_UARTEx_SetTxFifoThreshold>
 8001a5a:	b960      	cbnz	r0, 8001a76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	480a      	ldr	r0, [pc, #40]	; (8001a88 <MX_USART2_UART_Init+0x64>)
 8001a60:	f004 fd15 	bl	800648e <HAL_UARTEx_SetRxFifoThreshold>
 8001a64:	b950      	cbnz	r0, 8001a7c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a66:	4808      	ldr	r0, [pc, #32]	; (8001a88 <MX_USART2_UART_Init+0x64>)
 8001a68:	f004 fccd 	bl	8006406 <HAL_UARTEx_DisableFifoMode>
 8001a6c:	b948      	cbnz	r0, 8001a82 <MX_USART2_UART_Init+0x5e>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a6e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001a70:	f7ff fbc2 	bl	80011f8 <Error_Handler>
 8001a74:	e7ed      	b.n	8001a52 <MX_USART2_UART_Init+0x2e>
    Error_Handler();
 8001a76:	f7ff fbbf 	bl	80011f8 <Error_Handler>
 8001a7a:	e7ef      	b.n	8001a5c <MX_USART2_UART_Init+0x38>
    Error_Handler();
 8001a7c:	f7ff fbbc 	bl	80011f8 <Error_Handler>
 8001a80:	e7f1      	b.n	8001a66 <MX_USART2_UART_Init+0x42>
    Error_Handler();
 8001a82:	f7ff fbb9 	bl	80011f8 <Error_Handler>
}
 8001a86:	e7f2      	b.n	8001a6e <MX_USART2_UART_Init+0x4a>
 8001a88:	200007fc 	.word	0x200007fc
 8001a8c:	40004400 	.word	0x40004400

08001a90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a90:	b510      	push	{r4, lr}
 8001a92:	b09c      	sub	sp, #112	; 0x70
 8001a94:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a96:	2100      	movs	r1, #0
 8001a98:	9117      	str	r1, [sp, #92]	; 0x5c
 8001a9a:	9118      	str	r1, [sp, #96]	; 0x60
 8001a9c:	9119      	str	r1, [sp, #100]	; 0x64
 8001a9e:	911a      	str	r1, [sp, #104]	; 0x68
 8001aa0:	911b      	str	r1, [sp, #108]	; 0x6c
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 8001aa2:	9113      	str	r1, [sp, #76]	; 0x4c
 8001aa4:	9114      	str	r1, [sp, #80]	; 0x50
 8001aa6:	9115      	str	r1, [sp, #84]	; 0x54
 8001aa8:	9116      	str	r1, [sp, #88]	; 0x58
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aaa:	2238      	movs	r2, #56	; 0x38
 8001aac:	a805      	add	r0, sp, #20
 8001aae:	f00f f829 	bl	8010b04 <memset>
  if(uartHandle->Instance==USART1)
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	4a6e      	ldr	r2, [pc, #440]	; (8001c70 <HAL_UART_MspInit+0x1e0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d005      	beq.n	8001ac6 <HAL_UART_MspInit+0x36>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8001aba:	4a6e      	ldr	r2, [pc, #440]	; (8001c74 <HAL_UART_MspInit+0x1e4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	f000 8088 	beq.w	8001bd2 <HAL_UART_MspInit+0x142>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ac2:	b01c      	add	sp, #112	; 0x70
 8001ac4:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001aca:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001ace:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ad0:	a805      	add	r0, sp, #20
 8001ad2:	f002 fb85 	bl	80041e0 <HAL_RCCEx_PeriphCLKConfig>
 8001ad6:	2800      	cmp	r0, #0
 8001ad8:	d16f      	bne.n	8001bba <HAL_UART_MspInit+0x12a>
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ade:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ae0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ae4:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ae6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ae8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001aec:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001aee:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001af0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001af2:	f042 0202 	orr.w	r2, r2, #2
 8001af6:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001b00:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001b02:	23c0      	movs	r3, #192	; 0xc0
 8001b04:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b0e:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b10:	2307      	movs	r3, #7
 8001b12:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b14:	a917      	add	r1, sp, #92	; 0x5c
 8001b16:	4858      	ldr	r0, [pc, #352]	; (8001c78 <HAL_UART_MspInit+0x1e8>)
 8001b18:	f001 fbfc 	bl	8003314 <HAL_GPIO_Init>
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8001b1c:	4b57      	ldr	r3, [pc, #348]	; (8001c7c <HAL_UART_MspInit+0x1ec>)
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b2c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8001b2e:	4854      	ldr	r0, [pc, #336]	; (8001c80 <HAL_UART_MspInit+0x1f0>)
 8001b30:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001b34:	3308      	adds	r3, #8
 8001b36:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001b38:	2312      	movs	r3, #18
 8001b3a:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b3c:	2310      	movs	r3, #16
 8001b3e:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b44:	2280      	movs	r2, #128	; 0x80
 8001b46:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b48:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b4a:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001b4c:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b4e:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001b50:	f001 f82a 	bl	8002ba8 <HAL_DMA_Init>
 8001b54:	2800      	cmp	r0, #0
 8001b56:	d133      	bne.n	8001bc0 <HAL_UART_MspInit+0x130>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001b58:	4b49      	ldr	r3, [pc, #292]	; (8001c80 <HAL_UART_MspInit+0x1f0>)
 8001b5a:	67a3      	str	r3, [r4, #120]	; 0x78
 8001b5c:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8001b5e:	4849      	ldr	r0, [pc, #292]	; (8001c84 <HAL_UART_MspInit+0x1f4>)
 8001b60:	4b49      	ldr	r3, [pc, #292]	; (8001c88 <HAL_UART_MspInit+0x1f8>)
 8001b62:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001b64:	2311      	movs	r3, #17
 8001b66:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b6c:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b6e:	2280      	movs	r2, #128	; 0x80
 8001b70:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b72:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b74:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001b76:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b78:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b7a:	f001 f815 	bl	8002ba8 <HAL_DMA_Init>
 8001b7e:	bb10      	cbnz	r0, 8001bc6 <HAL_UART_MspInit+0x136>
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	9313      	str	r3, [sp, #76]	; 0x4c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8001b84:	9314      	str	r3, [sp, #80]	; 0x50
    pSyncConfig.SyncEnable = DISABLE;
 8001b86:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    pSyncConfig.EventEnable = ENABLE;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
    pSyncConfig.RequestNumber = 1;
 8001b90:	9316      	str	r3, [sp, #88]	; 0x58
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 8001b92:	a913      	add	r1, sp, #76	; 0x4c
 8001b94:	483b      	ldr	r0, [pc, #236]	; (8001c84 <HAL_UART_MspInit+0x1f4>)
 8001b96:	f001 fa1d 	bl	8002fd4 <HAL_DMAEx_ConfigMuxSync>
 8001b9a:	b9b8      	cbnz	r0, 8001bcc <HAL_UART_MspInit+0x13c>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001b9c:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <HAL_UART_MspInit+0x1f4>)
 8001b9e:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001ba0:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2102      	movs	r1, #2
 8001ba6:	2024      	movs	r0, #36	; 0x24
 8001ba8:	f000 ff4e 	bl	8002a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bac:	2024      	movs	r0, #36	; 0x24
 8001bae:	f000 ff81 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001bb2:	200c      	movs	r0, #12
 8001bb4:	f000 ff7e 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
 8001bb8:	e783      	b.n	8001ac2 <HAL_UART_MspInit+0x32>
      Error_Handler();
 8001bba:	f7ff fb1d 	bl	80011f8 <Error_Handler>
 8001bbe:	e78c      	b.n	8001ada <HAL_UART_MspInit+0x4a>
      Error_Handler();
 8001bc0:	f7ff fb1a 	bl	80011f8 <Error_Handler>
 8001bc4:	e7c8      	b.n	8001b58 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8001bc6:	f7ff fb17 	bl	80011f8 <Error_Handler>
 8001bca:	e7d9      	b.n	8001b80 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001bcc:	f7ff fb14 	bl	80011f8 <Error_Handler>
 8001bd0:	e7e4      	b.n	8001b9c <HAL_UART_MspInit+0x10c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bd6:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001bda:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bdc:	a805      	add	r0, sp, #20
 8001bde:	f002 faff 	bl	80041e0 <HAL_RCCEx_PeriphCLKConfig>
 8001be2:	2800      	cmp	r0, #0
 8001be4:	d13e      	bne.n	8001c64 <HAL_UART_MspInit+0x1d4>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001bf0:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001bf2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bf4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001bf8:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8001bfa:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8001c0c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8001c0e:	230c      	movs	r3, #12
 8001c10:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c16:	2301      	movs	r3, #1
 8001c18:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001c1a:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c1c:	2307      	movs	r3, #7
 8001c1e:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	a917      	add	r1, sp, #92	; 0x5c
 8001c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c26:	f001 fb75 	bl	8003314 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8001c2a:	4818      	ldr	r0, [pc, #96]	; (8001c8c <HAL_UART_MspInit+0x1fc>)
 8001c2c:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <HAL_UART_MspInit+0x200>)
 8001c2e:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001c30:	2313      	movs	r3, #19
 8001c32:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c34:	2300      	movs	r3, #0
 8001c36:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c38:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c3a:	2280      	movs	r2, #128	; 0x80
 8001c3c:	6102      	str	r2, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c3e:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c40:	6183      	str	r3, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001c42:	61c3      	str	r3, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c44:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c46:	f000 ffaf 	bl	8002ba8 <HAL_DMA_Init>
 8001c4a:	b970      	cbnz	r0, 8001c6a <HAL_UART_MspInit+0x1da>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <HAL_UART_MspInit+0x1fc>)
 8001c4e:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001c50:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	4611      	mov	r1, r2
 8001c56:	2025      	movs	r0, #37	; 0x25
 8001c58:	f000 fef6 	bl	8002a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c5c:	2025      	movs	r0, #37	; 0x25
 8001c5e:	f000 ff29 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
}
 8001c62:	e72e      	b.n	8001ac2 <HAL_UART_MspInit+0x32>
      Error_Handler();
 8001c64:	f7ff fac8 	bl	80011f8 <Error_Handler>
 8001c68:	e7bd      	b.n	8001be6 <HAL_UART_MspInit+0x156>
      Error_Handler();
 8001c6a:	f7ff fac5 	bl	80011f8 <Error_Handler>
 8001c6e:	e7ed      	b.n	8001c4c <HAL_UART_MspInit+0x1bc>
 8001c70:	40013800 	.word	0x40013800
 8001c74:	40004400 	.word	0x40004400
 8001c78:	48000400 	.word	0x48000400
 8001c7c:	40010000 	.word	0x40010000
 8001c80:	200006ac 	.word	0x200006ac
 8001c84:	2000064c 	.word	0x2000064c
 8001c88:	4002001c 	.word	0x4002001c
 8001c8c:	2000070c 	.word	0x2000070c
 8001c90:	40020030 	.word	0x40020030

08001c94 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001c94:	b510      	push	{r4, lr}
 8001c96:	4604      	mov	r4, r0

  if(uartHandle->Instance==USART1)
 8001c98:	6803      	ldr	r3, [r0, #0]
 8001c9a:	4a16      	ldr	r2, [pc, #88]	; (8001cf4 <HAL_UART_MspDeInit+0x60>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d003      	beq.n	8001ca8 <HAL_UART_MspDeInit+0x14>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8001ca0:	4a15      	ldr	r2, [pc, #84]	; (8001cf8 <HAL_UART_MspDeInit+0x64>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d014      	beq.n	8001cd0 <HAL_UART_MspDeInit+0x3c>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001ca6:	bd10      	pop	{r4, pc}
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001ca8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cac:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cb2:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8001cb4:	21c0      	movs	r1, #192	; 0xc0
 8001cb6:	4811      	ldr	r0, [pc, #68]	; (8001cfc <HAL_UART_MspDeInit+0x68>)
 8001cb8:	f001 fbf6 	bl	80034a8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001cbc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001cbe:	f000 fff1 	bl	8002ca4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001cc2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001cc4:	f000 ffee 	bl	8002ca4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001cc8:	2024      	movs	r0, #36	; 0x24
 8001cca:	f000 ff01 	bl	8002ad0 <HAL_NVIC_DisableIRQ>
 8001cce:	e7ea      	b.n	8001ca6 <HAL_UART_MspDeInit+0x12>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001cd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cd4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001cd6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001cda:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8001cdc:	210c      	movs	r1, #12
 8001cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce2:	f001 fbe1 	bl	80034a8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001ce6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001ce8:	f000 ffdc 	bl	8002ca4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001cec:	2025      	movs	r0, #37	; 0x25
 8001cee:	f000 feef 	bl	8002ad0 <HAL_NVIC_DisableIRQ>
}
 8001cf2:	e7d8      	b.n	8001ca6 <HAL_UART_MspDeInit+0x12>
 8001cf4:	40013800 	.word	0x40013800
 8001cf8:	40004400 	.word	0x40004400
 8001cfc:	48000400 	.word	0x48000400

08001d00 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001d00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <vcom_Init+0x20>)
 8001d04:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8001d06:	f7ff f80f 	bl	8000d28 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001d0a:	f7ff fe51 	bl	80019b0 <MX_USART1_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001d0e:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <vcom_Init+0x24>)
 8001d10:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8001d14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	bd08      	pop	{r3, pc}
 8001d20:	20000890 	.word	0x20000890
 8001d24:	58000800 	.word	0x58000800

08001d28 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001d28:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB2RSTR, Periphs);
 8001d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8001d36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d3c:	641a      	str	r2, [r3, #64]	; 0x40
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
  __HAL_RCC_USART1_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8001d3e:	4804      	ldr	r0, [pc, #16]	; (8001d50 <vcom_DeInit+0x28>)
 8001d40:	f7ff ffa8 	bl	8001c94 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001d44:	200f      	movs	r0, #15
 8001d46:	f000 fec3 	bl	8002ad0 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	bd08      	pop	{r3, pc}
 8001d4e:	bf00      	nop
 8001d50:	2000076c 	.word	0x2000076c

08001d54 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001d54:	b508      	push	{r3, lr}
 8001d56:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001d58:	4601      	mov	r1, r0
 8001d5a:	4802      	ldr	r0, [pc, #8]	; (8001d64 <vcom_Trace_DMA+0x10>)
 8001d5c:	f003 f984 	bl	8005068 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001d60:	2000      	movs	r0, #0
 8001d62:	bd08      	pop	{r3, pc}
 8001d64:	2000076c 	.word	0x2000076c

08001d68 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001d68:	b510      	push	{r4, lr}
 8001d6a:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <vcom_ReceiveInit+0x50>)
 8001d6e:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8001d70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d74:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8001d76:	4c11      	ldr	r4, [pc, #68]	; (8001dbc <vcom_ReceiveInit+0x54>)
 8001d78:	ab02      	add	r3, sp, #8
 8001d7a:	e913 0006 	ldmdb	r3, {r1, r2}
 8001d7e:	4620      	mov	r0, r4
 8001d80:	f004 fab9 	bl	80062f6 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	69da      	ldr	r2, [r3, #28]
 8001d88:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001d8c:	d1fb      	bne.n	8001d86 <vcom_ReceiveInit+0x1e>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8001d8e:	69da      	ldr	r2, [r3, #28]
 8001d90:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8001d94:	d0fb      	beq.n	8001d8e <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001d9c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8001d9e:	4c07      	ldr	r4, [pc, #28]	; (8001dbc <vcom_ReceiveInit+0x54>)
 8001da0:	4620      	mov	r0, r4
 8001da2:	f004 faf5 	bl	8006390 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8001da6:	2201      	movs	r2, #1
 8001da8:	4905      	ldr	r1, [pc, #20]	; (8001dc0 <vcom_ReceiveInit+0x58>)
 8001daa:	4620      	mov	r0, r4
 8001dac:	f004 f9f2 	bl	8006194 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001db0:	2000      	movs	r0, #0
 8001db2:	b002      	add	sp, #8
 8001db4:	bd10      	pop	{r4, pc}
 8001db6:	bf00      	nop
 8001db8:	2000088c 	.word	0x2000088c
 8001dbc:	2000076c 	.word	0x2000076c
 8001dc0:	20000894 	.word	0x20000894

08001dc4 <vcom_Resume>:

void vcom_Resume(void)
{
 8001dc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dc6:	4807      	ldr	r0, [pc, #28]	; (8001de4 <vcom_Resume+0x20>)
 8001dc8:	f004 f8fe 	bl	8005fc8 <HAL_UART_Init>
 8001dcc:	b920      	cbnz	r0, 8001dd8 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001dce:	4806      	ldr	r0, [pc, #24]	; (8001de8 <vcom_Resume+0x24>)
 8001dd0:	f000 feea 	bl	8002ba8 <HAL_DMA_Init>
 8001dd4:	b918      	cbnz	r0, 8001dde <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001dd6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001dd8:	f7ff fa0e 	bl	80011f8 <Error_Handler>
 8001ddc:	e7f7      	b.n	8001dce <vcom_Resume+0xa>
    Error_Handler();
 8001dde:	f7ff fa0b 	bl	80011f8 <Error_Handler>
}
 8001de2:	e7f8      	b.n	8001dd6 <vcom_Resume+0x12>
 8001de4:	2000076c 	.word	0x2000076c
 8001de8:	200006ac 	.word	0x200006ac

08001dec <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8001dee:	6802      	ldr	r2, [r0, #0]
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <HAL_UART_TxCpltCallback+0x18>)
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d000      	beq.n	8001df8 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001df6:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <HAL_UART_TxCpltCallback+0x1c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	4798      	blx	r3
}
 8001e00:	e7f9      	b.n	8001df6 <HAL_UART_TxCpltCallback+0xa>
 8001e02:	bf00      	nop
 8001e04:	40013800 	.word	0x40013800
 8001e08:	20000890 	.word	0x20000890

08001e0c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e0c:	b510      	push	{r4, lr}
 8001e0e:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8001e10:	6802      	ldr	r2, [r0, #0]
 8001e12:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <HAL_UART_RxCpltCallback+0x44>)
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d004      	beq.n	8001e22 <HAL_UART_RxCpltCallback+0x16>
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

      if (huart->Instance == USART2) {
 8001e18:	6822      	ldr	r2, [r4, #0]
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <HAL_UART_RxCpltCallback+0x48>)
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d00f      	beq.n	8001e40 <HAL_UART_RxCpltCallback+0x34>




  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001e20:	bd10      	pop	{r4, pc}
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8001e22:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <HAL_UART_RxCpltCallback+0x4c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	b12b      	cbz	r3, 8001e34 <HAL_UART_RxCpltCallback+0x28>
 8001e28:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001e2c:	b912      	cbnz	r2, 8001e34 <HAL_UART_RxCpltCallback+0x28>
      RxCpltCallback(&charRx, 1, 0);
 8001e2e:	2101      	movs	r1, #1
 8001e30:	480a      	ldr	r0, [pc, #40]	; (8001e5c <HAL_UART_RxCpltCallback+0x50>)
 8001e32:	4798      	blx	r3
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001e34:	2201      	movs	r2, #1
 8001e36:	4909      	ldr	r1, [pc, #36]	; (8001e5c <HAL_UART_RxCpltCallback+0x50>)
 8001e38:	4620      	mov	r0, r4
 8001e3a:	f004 f9ab 	bl	8006194 <HAL_UART_Receive_IT>
 8001e3e:	e7eb      	b.n	8001e18 <HAL_UART_RxCpltCallback+0xc>
    	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);        /* Clear IDLE line flag */
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <HAL_UART_RxCpltCallback+0x54>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2210      	movs	r2, #16
 8001e46:	621a      	str	r2, [r3, #32]
    	  UART2_SET = 1;
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_UART_RxCpltCallback+0x58>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
}
 8001e4e:	e7e7      	b.n	8001e20 <HAL_UART_RxCpltCallback+0x14>
 8001e50:	40013800 	.word	0x40013800
 8001e54:	40004400 	.word	0x40004400
 8001e58:	2000088c 	.word	0x2000088c
 8001e5c:	20000894 	.word	0x20000894
 8001e60:	200007fc 	.word	0x200007fc
 8001e64:	20000004 	.word	0x20000004

08001e68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e68:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e6c:	f7ff fc5e 	bl	800172c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e70:	480c      	ldr	r0, [pc, #48]	; (8001ea4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e72:	490d      	ldr	r1, [pc, #52]	; (8001ea8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e74:	4a0d      	ldr	r2, [pc, #52]	; (8001eac <LoopForever+0xe>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e78:	e002      	b.n	8001e80 <LoopCopyDataInit>

08001e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7e:	3304      	adds	r3, #4

08001e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e84:	d3f9      	bcc.n	8001e7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e86:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e88:	4c0a      	ldr	r4, [pc, #40]	; (8001eb4 <LoopForever+0x16>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e8c:	e001      	b.n	8001e92 <LoopFillZerobss>

08001e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e90:	3204      	adds	r2, #4

08001e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e94:	d3fb      	bcc.n	8001e8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e96:	f00e fe03 	bl	8010aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e9a:	f7ff f94b 	bl	8001134 <main>

08001e9e <LoopForever>:

LoopForever:
    b LoopForever
 8001e9e:	e7fe      	b.n	8001e9e <LoopForever>
  ldr   r0, =_estack
 8001ea0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea8:	20000554 	.word	0x20000554
  ldr r2, =_sidata
 8001eac:	080117f8 	.word	0x080117f8
  ldr r2, =_sbss
 8001eb0:	20000554 	.word	0x20000554
  ldr r4, =_ebss
 8001eb4:	20002834 	.word	0x20002834

08001eb8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001eb8:	e7fe      	b.n	8001eb8 <ADC_IRQHandler>

08001eba <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001eba:	b570      	push	{r4, r5, r6, lr}
 8001ebc:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001ebe:	2400      	movs	r4, #0
 8001ec0:	9403      	str	r4, [sp, #12]
 8001ec2:	9405      	str	r4, [sp, #20]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001ec4:	2510      	movs	r5, #16
 8001ec6:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001ed0:	a901      	add	r1, sp, #4
 8001ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed6:	f001 fa1d 	bl	8003314 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001eda:	2620      	movs	r6, #32
 8001edc:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001ede:	a901      	add	r1, sp, #4
 8001ee0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee4:	f001 fa16 	bl	8003314 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001ee8:	4622      	mov	r2, r4
 8001eea:	4631      	mov	r1, r6
 8001eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef0:	f001 fb58 	bl	80035a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001ef4:	4622      	mov	r2, r4
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001efc:	f001 fb52 	bl	80035a4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8001f00:	4620      	mov	r0, r4
 8001f02:	b006      	add	sp, #24
 8001f04:	bd70      	pop	{r4, r5, r6, pc}

08001f06 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001f06:	b508      	push	{r3, lr}
  switch (Config)
 8001f08:	2803      	cmp	r0, #3
 8001f0a:	d80f      	bhi.n	8001f2c <BSP_RADIO_ConfigRFSwitch+0x26>
 8001f0c:	e8df f000 	tbb	[pc, r0]
 8001f10:	2a1d1002 	.word	0x2a1d1002
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2110      	movs	r1, #16
 8001f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f1c:	f001 fb42 	bl	80035a4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2120      	movs	r1, #32
 8001f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f28:	f001 fb3c 	bl	80035a4 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	bd08      	pop	{r3, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001f30:	2201      	movs	r2, #1
 8001f32:	2110      	movs	r1, #16
 8001f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f38:	f001 fb34 	bl	80035a4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2120      	movs	r1, #32
 8001f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f44:	f001 fb2e 	bl	80035a4 <HAL_GPIO_WritePin>
      break;
 8001f48:	e7f0      	b.n	8001f2c <BSP_RADIO_ConfigRFSwitch+0x26>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	2110      	movs	r1, #16
 8001f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f52:	f001 fb27 	bl	80035a4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001f56:	2201      	movs	r2, #1
 8001f58:	2120      	movs	r1, #32
 8001f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f5e:	f001 fb21 	bl	80035a4 <HAL_GPIO_WritePin>
      break;
 8001f62:	e7e3      	b.n	8001f2c <BSP_RADIO_ConfigRFSwitch+0x26>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001f64:	2200      	movs	r2, #0
 8001f66:	2110      	movs	r1, #16
 8001f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f6c:	f001 fb1a 	bl	80035a4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001f70:	2201      	movs	r2, #1
 8001f72:	2120      	movs	r1, #32
 8001f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f78:	f001 fb14 	bl	80035a4 <HAL_GPIO_WritePin>
      break;
 8001f7c:	e7d6      	b.n	8001f2c <BSP_RADIO_ConfigRFSwitch+0x26>

08001f7e <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_HP;
}
 8001f7e:	2002      	movs	r0, #2
 8001f80:	4770      	bx	lr

08001f82 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8001f82:	2001      	movs	r0, #1
 8001f84:	4770      	bx	lr

08001f86 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8001f86:	2001      	movs	r0, #1
 8001f88:	4770      	bx	lr

08001f8a <BSP_RADIO_GetRFOMaxPowerConfig>:
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8001f8a:	2800      	cmp	r0, #0
  }

  return ret;
}
 8001f8c:	bf0c      	ite	eq
 8001f8e:	200f      	moveq	r0, #15
 8001f90:	2016      	movne	r0, #22
 8001f92:	4770      	bx	lr

08001f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f94:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f96:	2003      	movs	r0, #3
 8001f98:	f000 fd44 	bl	8002a24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001f9c:	f001 fca6 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_Init+0x28>)
 8001fa2:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fa4:	200f      	movs	r0, #15
 8001fa6:	f7ff fb1d 	bl	80015e4 <HAL_InitTick>
 8001faa:	b110      	cbz	r0, 8001fb2 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001fac:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8001fae:	4620      	mov	r0, r4
 8001fb0:	bd10      	pop	{r4, pc}
 8001fb2:	4604      	mov	r4, r0
    HAL_MspInit();
 8001fb4:	f7ff f9c0 	bl	8001338 <HAL_MspInit>
 8001fb8:	e7f9      	b.n	8001fae <HAL_Init+0x1a>
 8001fba:	bf00      	nop
 8001fbc:	20000000 	.word	0x20000000

08001fc0 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001fc0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001fc4:	6913      	ldr	r3, [r2, #16]
 8001fc6:	f023 0302 	bic.w	r3, r3, #2
 8001fca:	6113      	str	r3, [r2, #16]
}
 8001fcc:	4770      	bx	lr

08001fce <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001fce:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001fd2:	6913      	ldr	r3, [r2, #16]
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	6113      	str	r3, [r2, #16]
}
 8001fda:	4770      	bx	lr

08001fdc <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8001fdc:	4b01      	ldr	r3, [pc, #4]	; (8001fe4 <HAL_GetUIDw0+0x8>)
 8001fde:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 8001fe2:	4770      	bx	lr
 8001fe4:	1fff7000 	.word	0x1fff7000

08001fe8 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8001fe8:	4b01      	ldr	r3, [pc, #4]	; (8001ff0 <HAL_GetUIDw1+0x8>)
 8001fea:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 8001fee:	4770      	bx	lr
 8001ff0:	1fff7000 	.word	0x1fff7000

08001ff4 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8001ff4:	4b01      	ldr	r3, [pc, #4]	; (8001ffc <HAL_GetUIDw2+0x8>)
 8001ff6:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8001ffa:	4770      	bx	lr
 8001ffc:	1fff7000 	.word	0x1fff7000

08002000 <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002000:	4a02      	ldr	r2, [pc, #8]	; (800200c <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8002002:	6853      	ldr	r3, [r2, #4]
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 800200a:	4770      	bx	lr
 800200c:	e0042000 	.word	0xe0042000

08002010 <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002010:	4a02      	ldr	r2, [pc, #8]	; (800201c <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8002012:	6853      	ldr	r3, [r2, #4]
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 800201a:	4770      	bx	lr
 800201c:	e0042000 	.word	0xe0042000

08002020 <HAL_DBGMCU_EnableDBGStandbyMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002020:	4a02      	ldr	r2, [pc, #8]	; (800202c <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8002022:	6853      	ldr	r3, [r2, #4]
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 800202a:	4770      	bx	lr
 800202c:	e0042000 	.word	0xe0042000

08002030 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002032:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002034:	2300      	movs	r3, #0
 8002036:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002038:	2800      	cmp	r0, #0
 800203a:	f000 811d 	beq.w	8002278 <HAL_ADC_Init+0x248>
 800203e:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002040:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 80bf 	beq.w	80021c6 <HAL_ADC_Init+0x196>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002048:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800204a:	6893      	ldr	r3, [r2, #8]
 800204c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002050:	d119      	bne.n	8002086 <HAL_ADC_Init+0x56>
  MODIFY_REG(ADCx->CR,
 8002052:	6893      	ldr	r3, [r2, #8]
 8002054:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002058:	f023 0317 	bic.w	r3, r3, #23
 800205c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002060:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002062:	4b86      	ldr	r3, [pc, #536]	; (800227c <HAL_ADC_Init+0x24c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	099b      	lsrs	r3, r3, #6
 8002068:	4a85      	ldr	r2, [pc, #532]	; (8002280 <HAL_ADC_Init+0x250>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	099b      	lsrs	r3, r3, #6
 8002070:	3301      	adds	r3, #1
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002076:	9b01      	ldr	r3, [sp, #4]
 8002078:	b12b      	cbz	r3, 8002086 <HAL_ADC_Init+0x56>
    {
      wait_loop_index--;
 800207a:	9b01      	ldr	r3, [sp, #4]
 800207c:	3b01      	subs	r3, #1
 800207e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002080:	9b01      	ldr	r3, [sp, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f9      	bne.n	800207a <HAL_ADC_Init+0x4a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002086:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002088:	688b      	ldr	r3, [r1, #8]
 800208a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800208e:	f040 80a1 	bne.w	80021d4 <HAL_ADC_Init+0x1a4>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002092:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002094:	f043 0310 	orr.w	r3, r3, #16
 8002098:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80020a2:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020a4:	688b      	ldr	r3, [r1, #8]
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020a6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80020a8:	f002 0210 	and.w	r2, r2, #16
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f040 80da 	bne.w	800226a <HAL_ADC_Init+0x23a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80020b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020c2:	688b      	ldr	r3, [r1, #8]
 80020c4:	f013 0f01 	tst.w	r3, #1
 80020c8:	d153      	bne.n	8002172 <HAL_ADC_Init+0x142>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80020ca:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80020cc:	f894 e018 	ldrb.w	lr, [r4, #24]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80020d0:	7e65      	ldrb	r5, [r4, #25]
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80020d2:	7ea6      	ldrb	r6, [r4, #26]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80020d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80020d6:	2a00      	cmp	r2, #0
 80020d8:	bf18      	it	ne
 80020da:	f44f 5280 	movne.w	r2, #4096	; 0x1000
 80020de:	68e7      	ldr	r7, [r4, #12]
 80020e0:	433b      	orrs	r3, r7
 80020e2:	ea43 338e 	orr.w	r3, r3, lr, lsl #14
 80020e6:	ea43 33c5 	orr.w	r3, r3, r5, lsl #15
 80020ea:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
                   hadc->Init.DataAlign                                           |
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80020ee:	6925      	ldr	r5, [r4, #16]
 80020f0:	2d00      	cmp	r5, #0
 80020f2:	bfb4      	ite	lt
 80020f4:	f025 4500 	biclt.w	r5, r5, #2147483648	; 0x80000000
 80020f8:	f44f 1500 	movge.w	r5, #2097152	; 0x200000
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020fc:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002100:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
 8002104:	4313      	orrs	r3, r2
 8002106:	432b      	orrs	r3, r5

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002108:	f894 2020 	ldrb.w	r2, [r4, #32]
 800210c:	2a01      	cmp	r2, #1
 800210e:	d063      	beq.n	80021d8 <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002110:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002112:	b122      	cbz	r2, 800211e <HAL_ADC_Init+0xee>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002114:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0
 8002118:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800211a:	432a      	orrs	r2, r5
 800211c:	4313      	orrs	r3, r2
                     hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800211e:	68ca      	ldr	r2, [r1, #12]
 8002120:	f422 32fe 	bic.w	r2, r2, #130048	; 0x1fc00
 8002124:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002128:	4313      	orrs	r3, r2
 800212a:	60cb      	str	r3, [r1, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800212c:	6861      	ldr	r1, [r4, #4]
 800212e:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8002132:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002134:	ea41 0203 	orr.w	r2, r1, r3
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002138:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800213c:	2b01      	cmp	r3, #1
 800213e:	d058      	beq.n	80021f2 <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002140:	6821      	ldr	r1, [r4, #0]
 8002142:	690d      	ldr	r5, [r1, #16]
 8002144:	4b4f      	ldr	r3, [pc, #316]	; (8002284 <HAL_ADC_Init+0x254>)
 8002146:	402b      	ands	r3, r5
 8002148:	4313      	orrs	r3, r2
 800214a:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800214c:	6863      	ldr	r3, [r4, #4]
 800214e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002152:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002156:	d00c      	beq.n	8002172 <HAL_ADC_Init+0x142>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002158:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800215c:	d009      	beq.n	8002172 <HAL_ADC_Init+0x142>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800215e:	494a      	ldr	r1, [pc, #296]	; (8002288 <HAL_ADC_Init+0x258>)
 8002160:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 8002164:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 8002168:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3708 	str.w	r3, [r1, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002172:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8002174:	6953      	ldr	r3, [r2, #20]
 8002176:	f023 0307 	bic.w	r3, r3, #7
 800217a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800217c:	430b      	orrs	r3, r1
 800217e:	6153      	str	r3, [r2, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002180:	6822      	ldr	r2, [r4, #0]
 8002182:	6953      	ldr	r3, [r2, #20]
 8002184:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800218e:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002190:	6923      	ldr	r3, [r4, #16]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d137      	bne.n	8002206 <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002196:	6822      	ldr	r2, [r4, #0]
 8002198:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800219a:	f063 030f 	orn	r3, r3, #15
 800219e:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80021a0:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d054      	beq.n	8002258 <HAL_ADC_Init+0x228>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80021b0:	f023 0312 	bic.w	r3, r3, #18
 80021b4:	f043 0310 	orr.w	r3, r3, #16
 80021b8:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80021c2:	2001      	movs	r0, #1
 80021c4:	e056      	b.n	8002274 <HAL_ADC_Init+0x244>
    HAL_ADC_MspInit(hadc);
 80021c6:	f7fe fd2d 	bl	8000c24 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80021ca:	2300      	movs	r3, #0
 80021cc:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80021ce:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80021d2:	e739      	b.n	8002048 <HAL_ADC_Init+0x18>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d4:	2000      	movs	r0, #0
 80021d6:	e765      	b.n	80020a4 <HAL_ADC_Init+0x74>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80021d8:	b916      	cbnz	r6, 80021e0 <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80021da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021de:	e797      	b.n	8002110 <HAL_ADC_Init+0xe0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80021e2:	f042 0220 	orr.w	r2, r2, #32
 80021e6:	65a2      	str	r2, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	65e2      	str	r2, [r4, #92]	; 0x5c
 80021f0:	e78e      	b.n	8002110 <HAL_ADC_Init+0xe0>
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80021f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021f4:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80021f6:	432b      	orrs	r3, r5
 80021f8:	4313      	orrs	r3, r2
 80021fa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80021fc:	4313      	orrs	r3, r2
 80021fe:	430b      	orrs	r3, r1
 8002200:	f043 0201 	orr.w	r2, r3, #1
 8002204:	e79c      	b.n	8002140 <HAL_ADC_Init+0x110>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002206:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800220a:	d1c9      	bne.n	80021a0 <HAL_ADC_Init+0x170>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800220c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800220e:	f001 030f 	and.w	r3, r1, #15
 8002212:	2b0f      	cmp	r3, #15
 8002214:	d00a      	beq.n	800222c <HAL_ADC_Init+0x1fc>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002216:	2201      	movs	r2, #1
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002218:	0093      	lsls	r3, r2, #2
 800221a:	fa21 f303 	lsr.w	r3, r1, r3
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	2b0f      	cmp	r3, #15
 8002224:	d010      	beq.n	8002248 <HAL_ADC_Init+0x218>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002226:	3201      	adds	r2, #1
 8002228:	2a08      	cmp	r2, #8
 800222a:	d1f5      	bne.n	8002218 <HAL_ADC_Init+0x1e8>
        MODIFY_REG(hadc->Instance->CHSELR,
 800222c:	6825      	ldr	r5, [r4, #0]
 800222e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002230:	69e3      	ldr	r3, [r4, #28]
 8002232:	3b01      	subs	r3, #1
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	f003 031c 	and.w	r3, r3, #28
 800223a:	f06f 020f 	mvn.w	r2, #15
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	4319      	orrs	r1, r3
 8002244:	62a9      	str	r1, [r5, #40]	; 0x28
 8002246:	e7ab      	b.n	80021a0 <HAL_ADC_Init+0x170>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002248:	2a01      	cmp	r2, #1
 800224a:	d1ef      	bne.n	800222c <HAL_ADC_Init+0x1fc>
        SET_BIT(hadc->Instance->CHSELR,
 800224c:	6822      	ldr	r2, [r4, #0]
 800224e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002250:	f063 030f 	orn	r3, r3, #15
 8002254:	6293      	str	r3, [r2, #40]	; 0x28
 8002256:	e7a3      	b.n	80021a0 <HAL_ADC_Init+0x170>
      ADC_CLEAR_ERRORCODE(hadc);
 8002258:	2300      	movs	r3, #0
 800225a:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 800225c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800225e:	f023 0303 	bic.w	r3, r3, #3
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	65a3      	str	r3, [r4, #88]	; 0x58
 8002268:	e004      	b.n	8002274 <HAL_ADC_Init+0x244>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800226a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800226c:	f043 0310 	orr.w	r3, r3, #16
 8002270:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002272:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8002274:	b003      	add	sp, #12
 8002276:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002278:	2001      	movs	r0, #1
 800227a:	e7fb      	b.n	8002274 <HAL_ADC_Init+0x244>
 800227c:	20000000 	.word	0x20000000
 8002280:	053e2d63 	.word	0x053e2d63
 8002284:	1ffffc02 	.word	0x1ffffc02
 8002288:	40012000 	.word	0x40012000

0800228c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228e:	4606      	mov	r6, r0
 8002290:	460c      	mov	r4, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002292:	6945      	ldr	r5, [r0, #20]
 8002294:	2d08      	cmp	r5, #8
 8002296:	d005      	beq.n	80022a4 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002298:	6803      	ldr	r3, [r0, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f013 0f01 	tst.w	r3, #1
 80022a0:	d11e      	bne.n	80022e0 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80022a2:	2504      	movs	r5, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80022a4:	f7ff f9a0 	bl	80015e8 <HAL_GetTick>
 80022a8:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80022aa:	6832      	ldr	r2, [r6, #0]
 80022ac:	6813      	ldr	r3, [r2, #0]
 80022ae:	422b      	tst	r3, r5
 80022b0:	d11c      	bne.n	80022ec <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80022b2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80022b6:	d0f9      	beq.n	80022ac <HAL_ADC_PollForConversion+0x20>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80022b8:	f7ff f996 	bl	80015e8 <HAL_GetTick>
 80022bc:	1bc3      	subs	r3, r0, r7
 80022be:	42a3      	cmp	r3, r4
 80022c0:	d801      	bhi.n	80022c6 <HAL_ADC_PollForConversion+0x3a>
 80022c2:	2c00      	cmp	r4, #0
 80022c4:	d1f1      	bne.n	80022aa <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80022c6:	6833      	ldr	r3, [r6, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	422b      	tst	r3, r5
 80022cc:	d1ed      	bne.n	80022aa <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022ce:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80022d0:	f043 0304 	orr.w	r3, r3, #4
 80022d4:	65b3      	str	r3, [r6, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80022d6:	2300      	movs	r3, #0
 80022d8:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54

          return HAL_TIMEOUT;
 80022dc:	2003      	movs	r0, #3
 80022de:	e028      	b.n	8002332 <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022e0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80022e2:	f043 0320 	orr.w	r3, r3, #32
 80022e6:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 80022e8:	2001      	movs	r0, #1
 80022ea:	e022      	b.n	8002332 <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022ec:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80022ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f2:	65b3      	str	r3, [r6, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80022f4:	68d3      	ldr	r3, [r2, #12]
 80022f6:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 80022fa:	d115      	bne.n	8002328 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80022fc:	7eb3      	ldrb	r3, [r6, #26]
 80022fe:	b99b      	cbnz	r3, 8002328 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002300:	6813      	ldr	r3, [r2, #0]
 8002302:	f013 0f08 	tst.w	r3, #8
 8002306:	d00f      	beq.n	8002328 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002308:	6893      	ldr	r3, [r2, #8]
 800230a:	f013 0f04 	tst.w	r3, #4
 800230e:	d111      	bne.n	8002334 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002310:	6853      	ldr	r3, [r2, #4]
 8002312:	f023 030c 	bic.w	r3, r3, #12
 8002316:	6053      	str	r3, [r2, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002318:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800231a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	65b3      	str	r3, [r6, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002328:	7e30      	ldrb	r0, [r6, #24]
 800232a:	b960      	cbnz	r0, 8002346 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800232c:	6833      	ldr	r3, [r6, #0]
 800232e:	220c      	movs	r2, #12
 8002330:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002334:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002336:	f043 0320 	orr.w	r3, r3, #32
 800233a:	65b3      	str	r3, [r6, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800233c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	65f3      	str	r3, [r6, #92]	; 0x5c
 8002344:	e7f0      	b.n	8002328 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8002346:	2000      	movs	r0, #0
 8002348:	e7f3      	b.n	8002332 <HAL_ADC_PollForConversion+0xa6>

0800234a <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800234a:	6803      	ldr	r3, [r0, #0]
 800234c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800234e:	4770      	bx	lr

08002350 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002350:	b470      	push	{r4, r5, r6}
 8002352:	b083      	sub	sp, #12
 8002354:	4603      	mov	r3, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002356:	2200      	movs	r2, #0
 8002358:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800235a:	6900      	ldr	r0, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800235c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8002360:	2a01      	cmp	r2, #1
 8002362:	f000 8104 	beq.w	800256e <HAL_ADC_ConfigChannel+0x21e>
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	6894      	ldr	r4, [r2, #8]
 8002370:	f014 0f04 	tst.w	r4, #4
 8002374:	d00a      	beq.n	800238c <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002376:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002378:	f042 0220 	orr.w	r2, r2, #32
 800237c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800237e:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 8002386:	b003      	add	sp, #12
 8002388:	bc70      	pop	{r4, r5, r6}
 800238a:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 800238c:	684c      	ldr	r4, [r1, #4]
 800238e:	2c02      	cmp	r4, #2
 8002390:	f000 809c 	beq.w	80024cc <HAL_ADC_ConfigChannel+0x17c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002394:	f020 0004 	bic.w	r0, r0, #4
 8002398:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800239c:	d026      	beq.n	80023ec <HAL_ADC_ConfigChannel+0x9c>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800239e:	f004 041f 	and.w	r4, r4, #31
 80023a2:	250f      	movs	r5, #15
 80023a4:	40a5      	lsls	r5, r4
 80023a6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80023a8:	ea20 0505 	bic.w	r5, r0, r5
 80023ac:	6808      	ldr	r0, [r1, #0]
 80023ae:	f3c0 0611 	ubfx	r6, r0, #0, #18
 80023b2:	2e00      	cmp	r6, #0
 80023b4:	d133      	bne.n	800241e <HAL_ADC_ConfigChannel+0xce>
 80023b6:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80023ba:	fa00 f404 	lsl.w	r4, r0, r4
 80023be:	432c      	orrs	r4, r5
 80023c0:	661c      	str	r4, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80023c2:	684c      	ldr	r4, [r1, #4]
 80023c4:	08a0      	lsrs	r0, r4, #2
 80023c6:	3001      	adds	r0, #1
 80023c8:	69dd      	ldr	r5, [r3, #28]
 80023ca:	42a8      	cmp	r0, r5
 80023cc:	d814      	bhi.n	80023f8 <HAL_ADC_ConfigChannel+0xa8>
  MODIFY_REG(ADCx->CHSELR,
 80023ce:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80023d0:	f004 041f 	and.w	r4, r4, #31
 80023d4:	6808      	ldr	r0, [r1, #0]
 80023d6:	f3c0 6083 	ubfx	r0, r0, #26, #4
 80023da:	40a0      	lsls	r0, r4
 80023dc:	260f      	movs	r6, #15
 80023de:	fa06 f404 	lsl.w	r4, r6, r4
 80023e2:	ea25 0404 	bic.w	r4, r5, r4
 80023e6:	4320      	orrs	r0, r4
 80023e8:	6290      	str	r0, [r2, #40]	; 0x28
}
 80023ea:	e005      	b.n	80023f8 <HAL_ADC_ConfigChannel+0xa8>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80023ec:	6a94      	ldr	r4, [r2, #40]	; 0x28
 80023ee:	6808      	ldr	r0, [r1, #0]
 80023f0:	f3c0 0011 	ubfx	r0, r0, #0, #18
 80023f4:	4320      	orrs	r0, r4
 80023f6:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80023f8:	681c      	ldr	r4, [r3, #0]
  MODIFY_REG(ADCx->SMPR,
 80023fa:	6960      	ldr	r0, [r4, #20]
 80023fc:	680d      	ldr	r5, [r1, #0]
 80023fe:	688a      	ldr	r2, [r1, #8]
 8002400:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 8002404:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8002408:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800240c:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 8002410:	4302      	orrs	r2, r0
 8002412:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002414:	680a      	ldr	r2, [r1, #0]
 8002416:	2a00      	cmp	r2, #0
 8002418:	db06      	blt.n	8002428 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800241a:	2000      	movs	r0, #0
 800241c:	e7b0      	b.n	8002380 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	fa90 f0a0 	rbit	r0, r0
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002422:	fab0 f080 	clz	r0, r0
 8002426:	e7c8      	b.n	80023ba <HAL_ADC_ConfigChannel+0x6a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002428:	4952      	ldr	r1, [pc, #328]	; (8002574 <HAL_ADC_ConfigChannel+0x224>)
 800242a:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
 800242e:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002432:	4851      	ldr	r0, [pc, #324]	; (8002578 <HAL_ADC_ConfigChannel+0x228>)
 8002434:	4282      	cmp	r2, r0
 8002436:	d016      	beq.n	8002466 <HAL_ADC_ConfigChannel+0x116>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002438:	4850      	ldr	r0, [pc, #320]	; (800257c <HAL_ADC_ConfigChannel+0x22c>)
 800243a:	4282      	cmp	r2, r0
 800243c:	d037      	beq.n	80024ae <HAL_ADC_ConfigChannel+0x15e>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800243e:	4850      	ldr	r0, [pc, #320]	; (8002580 <HAL_ADC_ConfigChannel+0x230>)
 8002440:	4282      	cmp	r2, r0
 8002442:	f040 8090 	bne.w	8002566 <HAL_ADC_ConfigChannel+0x216>
 8002446:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 800244a:	f040 808e 	bne.w	800256a <HAL_ADC_ConfigChannel+0x21a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800244e:	4949      	ldr	r1, [pc, #292]	; (8002574 <HAL_ADC_ConfigChannel+0x224>)
 8002450:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 8002454:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002458:	4322      	orrs	r2, r4
 800245a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800245e:	f8c1 2708 	str.w	r2, [r1, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002462:	2000      	movs	r0, #0
}
 8002464:	e78c      	b.n	8002380 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002466:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 800246a:	d176      	bne.n	800255a <HAL_ADC_ConfigChannel+0x20a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800246c:	4941      	ldr	r1, [pc, #260]	; (8002574 <HAL_ADC_ConfigChannel+0x224>)
 800246e:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 8002472:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002476:	4314      	orrs	r4, r2
 8002478:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 800247c:	f8c1 4708 	str.w	r4, [r1, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002480:	4a40      	ldr	r2, [pc, #256]	; (8002584 <HAL_ADC_ConfigChannel+0x234>)
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	0992      	lsrs	r2, r2, #6
 8002486:	4940      	ldr	r1, [pc, #256]	; (8002588 <HAL_ADC_ConfigChannel+0x238>)
 8002488:	fba1 1202 	umull	r1, r2, r1, r2
 800248c:	0992      	lsrs	r2, r2, #6
 800248e:	3201      	adds	r2, #1
 8002490:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002494:	0092      	lsls	r2, r2, #2
 8002496:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002498:	9a01      	ldr	r2, [sp, #4]
 800249a:	2a00      	cmp	r2, #0
 800249c:	d05f      	beq.n	800255e <HAL_ADC_ConfigChannel+0x20e>
            wait_loop_index--;
 800249e:	9a01      	ldr	r2, [sp, #4]
 80024a0:	3a01      	subs	r2, #1
 80024a2:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80024a4:	9a01      	ldr	r2, [sp, #4]
 80024a6:	2a00      	cmp	r2, #0
 80024a8:	d1f9      	bne.n	800249e <HAL_ADC_ConfigChannel+0x14e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024aa:	2000      	movs	r0, #0
 80024ac:	e768      	b.n	8002380 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024ae:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 80024b2:	d156      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x212>
 80024b4:	492f      	ldr	r1, [pc, #188]	; (8002574 <HAL_ADC_ConfigChannel+0x224>)
 80024b6:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 80024ba:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80024be:	4314      	orrs	r4, r2
 80024c0:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 80024c4:	f8c1 4708 	str.w	r4, [r1, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c8:	2000      	movs	r0, #0
}
 80024ca:	e759      	b.n	8002380 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80024cc:	f020 0004 	bic.w	r0, r0, #4
 80024d0:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80024d4:	d004      	beq.n	80024e0 <HAL_ADC_ConfigChannel+0x190>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80024d6:	680a      	ldr	r2, [r1, #0]
 80024d8:	2a00      	cmp	r2, #0
 80024da:	db09      	blt.n	80024f0 <HAL_ADC_ConfigChannel+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024dc:	2000      	movs	r0, #0
 80024de:	e74f      	b.n	8002380 <HAL_ADC_ConfigChannel+0x30>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80024e0:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80024e2:	680c      	ldr	r4, [r1, #0]
 80024e4:	f3c4 0411 	ubfx	r4, r4, #0, #18
 80024e8:	ea20 0004 	bic.w	r0, r0, r4
 80024ec:	6290      	str	r0, [r2, #40]	; 0x28
}
 80024ee:	e7f2      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x186>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024f0:	4920      	ldr	r1, [pc, #128]	; (8002574 <HAL_ADC_ConfigChannel+0x224>)
 80024f2:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024f6:	4820      	ldr	r0, [pc, #128]	; (8002578 <HAL_ADC_ConfigChannel+0x228>)
 80024f8:	4282      	cmp	r2, r0
 80024fa:	d007      	beq.n	800250c <HAL_ADC_ConfigChannel+0x1bc>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80024fc:	481f      	ldr	r0, [pc, #124]	; (800257c <HAL_ADC_ConfigChannel+0x22c>)
 80024fe:	4282      	cmp	r2, r0
 8002500:	d013      	beq.n	800252a <HAL_ADC_ConfigChannel+0x1da>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002502:	481f      	ldr	r0, [pc, #124]	; (8002580 <HAL_ADC_ConfigChannel+0x230>)
 8002504:	4282      	cmp	r2, r0
 8002506:	d01c      	beq.n	8002542 <HAL_ADC_ConfigChannel+0x1f2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002508:	2000      	movs	r0, #0
 800250a:	e739      	b.n	8002380 <HAL_ADC_ConfigChannel+0x30>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800250c:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 8002510:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8002514:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002518:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
 800251c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002520:	4311      	orrs	r1, r2
 8002522:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002526:	2000      	movs	r0, #0
}
 8002528:	e72a      	b.n	8002380 <HAL_ADC_ConfigChannel+0x30>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800252a:	4c12      	ldr	r4, [pc, #72]	; (8002574 <HAL_ADC_ConfigChannel+0x224>)
 800252c:	f8d4 0708 	ldr.w	r0, [r4, #1800]	; 0x708
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002530:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
 8002534:	f020 71e0 	bic.w	r1, r0, #29360128	; 0x1c00000
 8002538:	430a      	orrs	r2, r1
 800253a:	f8c4 2708 	str.w	r2, [r4, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800253e:	2000      	movs	r0, #0
}
 8002540:	e71e      	b.n	8002380 <HAL_ADC_ConfigChannel+0x30>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002542:	4c0c      	ldr	r4, [pc, #48]	; (8002574 <HAL_ADC_ConfigChannel+0x224>)
 8002544:	f8d4 0708 	ldr.w	r0, [r4, #1800]	; 0x708
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002548:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
 800254c:	f020 71e0 	bic.w	r1, r0, #29360128	; 0x1c00000
 8002550:	430a      	orrs	r2, r1
 8002552:	f8c4 2708 	str.w	r2, [r4, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002556:	2000      	movs	r0, #0
}
 8002558:	e712      	b.n	8002380 <HAL_ADC_ConfigChannel+0x30>
 800255a:	2000      	movs	r0, #0
 800255c:	e710      	b.n	8002380 <HAL_ADC_ConfigChannel+0x30>
 800255e:	2000      	movs	r0, #0
 8002560:	e70e      	b.n	8002380 <HAL_ADC_ConfigChannel+0x30>
 8002562:	2000      	movs	r0, #0
 8002564:	e70c      	b.n	8002380 <HAL_ADC_ConfigChannel+0x30>
 8002566:	2000      	movs	r0, #0
 8002568:	e70a      	b.n	8002380 <HAL_ADC_ConfigChannel+0x30>
 800256a:	2000      	movs	r0, #0
 800256c:	e708      	b.n	8002380 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 800256e:	2002      	movs	r0, #2
 8002570:	e709      	b.n	8002386 <HAL_ADC_ConfigChannel+0x36>
 8002572:	bf00      	nop
 8002574:	40012000 	.word	0x40012000
 8002578:	b0001000 	.word	0xb0001000
 800257c:	b8004000 	.word	0xb8004000
 8002580:	b4002000 	.word	0xb4002000
 8002584:	20000000 	.word	0x20000000
 8002588:	053e2d63 	.word	0x053e2d63

0800258c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800258c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800258e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	f012 0f04 	tst.w	r2, #4
 8002596:	d031      	beq.n	80025fc <ADC_ConversionStop+0x70>
 8002598:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	f012 0f02 	tst.w	r2, #2
 80025a0:	d107      	bne.n	80025b2 <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025a8:	f022 0217 	bic.w	r2, r2, #23
 80025ac:	f042 0210 	orr.w	r2, r2, #16
 80025b0:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025b2:	f7ff f819 	bl	80015e8 <HAL_GetTick>
 80025b6:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80025b8:	6823      	ldr	r3, [r4, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f013 0f04 	tst.w	r3, #4
 80025c0:	d106      	bne.n	80025d0 <ADC_ConversionStop+0x44>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80025c2:	2000      	movs	r0, #0
 80025c4:	e01b      	b.n	80025fe <ADC_ConversionStop+0x72>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80025c6:	6823      	ldr	r3, [r4, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f013 0f04 	tst.w	r3, #4
 80025ce:	d013      	beq.n	80025f8 <ADC_ConversionStop+0x6c>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80025d0:	f7ff f80a 	bl	80015e8 <HAL_GetTick>
 80025d4:	1b43      	subs	r3, r0, r5
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d9f5      	bls.n	80025c6 <ADC_ConversionStop+0x3a>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80025da:	6823      	ldr	r3, [r4, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f013 0f04 	tst.w	r3, #4
 80025e2:	d0f0      	beq.n	80025c6 <ADC_ConversionStop+0x3a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80025e6:	f043 0310 	orr.w	r3, r3, #16
 80025ea:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 80025f4:	2001      	movs	r0, #1
 80025f6:	e002      	b.n	80025fe <ADC_ConversionStop+0x72>
  return HAL_OK;
 80025f8:	2000      	movs	r0, #0
 80025fa:	e000      	b.n	80025fe <ADC_ConversionStop+0x72>
 80025fc:	2000      	movs	r0, #0
}
 80025fe:	bd38      	pop	{r3, r4, r5, pc}

08002600 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002600:	b530      	push	{r4, r5, lr}
 8002602:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002604:	2300      	movs	r3, #0
 8002606:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002608:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	f012 0f01 	tst.w	r2, #1
 8002610:	d163      	bne.n	80026da <ADC_Enable+0xda>
 8002612:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002614:	6899      	ldr	r1, [r3, #8]
 8002616:	4a32      	ldr	r2, [pc, #200]	; (80026e0 <ADC_Enable+0xe0>)
 8002618:	4211      	tst	r1, r2
 800261a:	d123      	bne.n	8002664 <ADC_Enable+0x64>
  MODIFY_REG(ADCx->CR,
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002622:	f022 0217 	bic.w	r2, r2, #23
 8002626:	f042 0201 	orr.w	r2, r2, #1
 800262a:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800262c:	4b2d      	ldr	r3, [pc, #180]	; (80026e4 <ADC_Enable+0xe4>)
 800262e:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002632:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8002636:	d010      	beq.n	800265a <ADC_Enable+0x5a>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002638:	4b2b      	ldr	r3, [pc, #172]	; (80026e8 <ADC_Enable+0xe8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	099b      	lsrs	r3, r3, #6
 800263e:	4a2b      	ldr	r2, [pc, #172]	; (80026ec <ADC_Enable+0xec>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	099b      	lsrs	r3, r3, #6
 8002646:	3301      	adds	r3, #1
 8002648:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800264a:	9b01      	ldr	r3, [sp, #4]
 800264c:	b12b      	cbz	r3, 800265a <ADC_Enable+0x5a>
      {
        wait_loop_index--;
 800264e:	9b01      	ldr	r3, [sp, #4]
 8002650:	3b01      	subs	r3, #1
 8002652:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002654:	9b01      	ldr	r3, [sp, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f9      	bne.n	800264e <ADC_Enable+0x4e>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800265a:	7e63      	ldrb	r3, [r4, #25]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d10b      	bne.n	8002678 <ADC_Enable+0x78>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002660:	2000      	movs	r0, #0
 8002662:	e03b      	b.n	80026dc <ADC_Enable+0xdc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002664:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002666:	f043 0310 	orr.w	r3, r3, #16
 800266a:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8002674:	2001      	movs	r0, #1
 8002676:	e031      	b.n	80026dc <ADC_Enable+0xdc>
      tickstart = HAL_GetTick();
 8002678:	f7fe ffb6 	bl	80015e8 <HAL_GetTick>
 800267c:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800267e:	6823      	ldr	r3, [r4, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	f012 0f01 	tst.w	r2, #1
 8002686:	d006      	beq.n	8002696 <ADC_Enable+0x96>
  return HAL_OK;
 8002688:	2000      	movs	r0, #0
 800268a:	e027      	b.n	80026dc <ADC_Enable+0xdc>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	f012 0f01 	tst.w	r2, #1
 8002694:	d11f      	bne.n	80026d6 <ADC_Enable+0xd6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	f012 0f01 	tst.w	r2, #1
 800269c:	d107      	bne.n	80026ae <ADC_Enable+0xae>
  MODIFY_REG(ADCx->CR,
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026a4:	f022 0217 	bic.w	r2, r2, #23
 80026a8:	f042 0201 	orr.w	r2, r2, #1
 80026ac:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026ae:	f7fe ff9b 	bl	80015e8 <HAL_GetTick>
 80026b2:	1b40      	subs	r0, r0, r5
 80026b4:	2802      	cmp	r0, #2
 80026b6:	d9e9      	bls.n	800268c <ADC_Enable+0x8c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026b8:	6823      	ldr	r3, [r4, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f013 0f01 	tst.w	r3, #1
 80026c0:	d1e4      	bne.n	800268c <ADC_Enable+0x8c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80026c4:	f043 0310 	orr.w	r3, r3, #16
 80026c8:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 80026d2:	2001      	movs	r0, #1
 80026d4:	e002      	b.n	80026dc <ADC_Enable+0xdc>
  return HAL_OK;
 80026d6:	2000      	movs	r0, #0
 80026d8:	e000      	b.n	80026dc <ADC_Enable+0xdc>
 80026da:	2000      	movs	r0, #0
}
 80026dc:	b003      	add	sp, #12
 80026de:	bd30      	pop	{r4, r5, pc}
 80026e0:	80000017 	.word	0x80000017
 80026e4:	40012000 	.word	0x40012000
 80026e8:	20000000 	.word	0x20000000
 80026ec:	053e2d63 	.word	0x053e2d63

080026f0 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026f0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f013 0f04 	tst.w	r3, #4
 80026f8:	d128      	bne.n	800274c <HAL_ADC_Start+0x5c>
{
 80026fa:	b510      	push	{r4, lr}
 80026fc:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 80026fe:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8002702:	2b01      	cmp	r3, #1
 8002704:	d024      	beq.n	8002750 <HAL_ADC_Start+0x60>
 8002706:	2301      	movs	r3, #1
 8002708:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 800270c:	f7ff ff78 	bl	8002600 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002710:	b9c0      	cbnz	r0, 8002744 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8002712:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002714:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002720:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8002722:	2300      	movs	r3, #0
 8002724:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002726:	6822      	ldr	r2, [r4, #0]
 8002728:	211c      	movs	r1, #28
 800272a:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 800272c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002730:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002732:	6893      	ldr	r3, [r2, #8]
 8002734:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002738:	f023 0317 	bic.w	r3, r3, #23
 800273c:	f043 0304 	orr.w	r3, r3, #4
 8002740:	6093      	str	r3, [r2, #8]
}
 8002742:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8002744:	2300      	movs	r3, #0
 8002746:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800274a:	e7fa      	b.n	8002742 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 800274c:	2002      	movs	r0, #2
}
 800274e:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8002750:	2002      	movs	r0, #2
 8002752:	e7f6      	b.n	8002742 <HAL_ADC_Start+0x52>

08002754 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002754:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002756:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002758:	6899      	ldr	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	f012 0f01 	tst.w	r2, #1
 8002760:	d043      	beq.n	80027ea <ADC_Disable+0x96>
 8002762:	4604      	mov	r4, r0

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8002764:	f011 0f02 	tst.w	r1, #2
 8002768:	d141      	bne.n	80027ee <ADC_Disable+0x9a>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	f002 0205 	and.w	r2, r2, #5
 8002770:	2a01      	cmp	r2, #1
 8002772:	d009      	beq.n	8002788 <ADC_Disable+0x34>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002774:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002776:	f043 0310 	orr.w	r3, r3, #16
 800277a:	6583      	str	r3, [r0, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800277c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	65c3      	str	r3, [r0, #92]	; 0x5c

      return HAL_ERROR;
 8002784:	2001      	movs	r0, #1
 8002786:	e031      	b.n	80027ec <ADC_Disable+0x98>
  MODIFY_REG(ADCx->CR,
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800278e:	f022 0217 	bic.w	r2, r2, #23
 8002792:	f042 0202 	orr.w	r2, r2, #2
 8002796:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002798:	6803      	ldr	r3, [r0, #0]
 800279a:	2203      	movs	r2, #3
 800279c:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800279e:	f7fe ff23 	bl	80015e8 <HAL_GetTick>
 80027a2:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027a4:	6823      	ldr	r3, [r4, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f013 0f01 	tst.w	r3, #1
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027ac:	bf08      	it	eq
 80027ae:	2000      	moveq	r0, #0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027b0:	d105      	bne.n	80027be <ADC_Disable+0x6a>
 80027b2:	e01b      	b.n	80027ec <ADC_Disable+0x98>
 80027b4:	6823      	ldr	r3, [r4, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f013 0f01 	tst.w	r3, #1
 80027bc:	d013      	beq.n	80027e6 <ADC_Disable+0x92>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027be:	f7fe ff13 	bl	80015e8 <HAL_GetTick>
 80027c2:	1b40      	subs	r0, r0, r5
 80027c4:	2802      	cmp	r0, #2
 80027c6:	d9f5      	bls.n	80027b4 <ADC_Disable+0x60>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027c8:	6823      	ldr	r3, [r4, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f013 0f01 	tst.w	r3, #1
 80027d0:	d0f0      	beq.n	80027b4 <ADC_Disable+0x60>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027d4:	f043 0310 	orr.w	r3, r3, #16
 80027d8:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027da:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 80027e2:	2001      	movs	r0, #1
 80027e4:	e002      	b.n	80027ec <ADC_Disable+0x98>
  return HAL_OK;
 80027e6:	2000      	movs	r0, #0
 80027e8:	e000      	b.n	80027ec <ADC_Disable+0x98>
 80027ea:	2000      	movs	r0, #0
}
 80027ec:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80027ee:	2000      	movs	r0, #0
 80027f0:	e7fc      	b.n	80027ec <ADC_Disable+0x98>
	...

080027f4 <HAL_ADC_DeInit>:
{
 80027f4:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 80027f6:	2800      	cmp	r0, #0
 80027f8:	d04c      	beq.n	8002894 <HAL_ADC_DeInit+0xa0>
 80027fa:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80027fc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80027fe:	f043 0302 	orr.w	r3, r3, #2
 8002802:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002804:	f7ff fec2 	bl	800258c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002808:	4606      	mov	r6, r0
 800280a:	2800      	cmp	r0, #0
 800280c:	d033      	beq.n	8002876 <HAL_ADC_DeInit+0x82>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800280e:	6822      	ldr	r2, [r4, #0]
 8002810:	6853      	ldr	r3, [r2, #4]
 8002812:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8002816:	f023 0303 	bic.w	r3, r3, #3
 800281a:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	f240 329f 	movw	r2, #927	; 0x39f
 8002822:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8002824:	6822      	ldr	r2, [r4, #0]
 8002826:	68d1      	ldr	r1, [r2, #12]
 8002828:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <HAL_ADC_DeInit+0xa4>)
 800282a:	400b      	ands	r3, r1
 800282c:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800282e:	6822      	ldr	r2, [r4, #0]
 8002830:	6913      	ldr	r3, [r2, #16]
 8002832:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002836:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8002838:	6822      	ldr	r2, [r4, #0]
 800283a:	6953      	ldr	r3, [r2, #20]
 800283c:	f023 0307 	bic.w	r3, r3, #7
 8002840:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8002842:	6822      	ldr	r2, [r4, #0]
 8002844:	6a13      	ldr	r3, [r2, #32]
 8002846:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800284a:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800284c:	6823      	ldr	r3, [r4, #0]
 800284e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002850:	2500      	movs	r5, #0
 8002852:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8002854:	4a11      	ldr	r2, [pc, #68]	; (800289c <HAL_ADC_DeInit+0xa8>)
 8002856:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 800285a:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800285e:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 8002862:	4620      	mov	r0, r4
 8002864:	f7fe f9f4 	bl	8000c50 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8002868:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 800286a:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 800286c:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 800286e:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8002872:	4630      	mov	r0, r6
 8002874:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8002876:	4620      	mov	r0, r4
 8002878:	f7ff ff6c 	bl	8002754 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800287c:	4606      	mov	r6, r0
 800287e:	b908      	cbnz	r0, 8002884 <HAL_ADC_DeInit+0x90>
      hadc->State = HAL_ADC_STATE_READY;
 8002880:	2301      	movs	r3, #1
 8002882:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8002884:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002886:	6893      	ldr	r3, [r2, #8]
 8002888:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800288c:	f023 0317 	bic.w	r3, r3, #23
 8002890:	6093      	str	r3, [r2, #8]
}
 8002892:	e7bc      	b.n	800280e <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8002894:	2601      	movs	r6, #1
 8002896:	e7ec      	b.n	8002872 <HAL_ADC_DeInit+0x7e>
 8002898:	833e0200 	.word	0x833e0200
 800289c:	40012000 	.word	0x40012000

080028a0 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80028a0:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d019      	beq.n	80028dc <HAL_ADC_Stop+0x3c>
{
 80028a8:	b510      	push	{r4, lr}
 80028aa:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80028ac:	2301      	movs	r3, #1
 80028ae:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 80028b2:	f7ff fe6b 	bl	800258c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80028b6:	b118      	cbz	r0, 80028c0 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 80028b8:	2300      	movs	r3, #0
 80028ba:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 80028be:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80028c0:	4620      	mov	r0, r4
 80028c2:	f7ff ff47 	bl	8002754 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80028c6:	2800      	cmp	r0, #0
 80028c8:	d1f6      	bne.n	80028b8 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 80028ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80028cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028d0:	f023 0301 	bic.w	r3, r3, #1
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	65a3      	str	r3, [r4, #88]	; 0x58
 80028da:	e7ed      	b.n	80028b8 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 80028dc:	2002      	movs	r0, #2
}
 80028de:	4770      	bx	lr

080028e0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80028e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028e2:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80028e8:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	f000 8097 	beq.w	8002a20 <HAL_ADCEx_Calibration_Start+0x140>
 80028f2:	4604      	mov	r4, r0
 80028f4:	2301      	movs	r3, #1
 80028f6:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80028fa:	f7ff ff2b 	bl	8002754 <ADC_Disable>
 80028fe:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002900:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	f012 0201 	ands.w	r2, r2, #1
 8002908:	d009      	beq.n	800291e <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800290a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800290c:	f043 0310 	orr.w	r3, r3, #16
 8002910:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002912:	2300      	movs	r3, #0
 8002914:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 8002918:	4628      	mov	r0, r5
 800291a:	b003      	add	sp, #12
 800291c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800291e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002920:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8002924:	f041 0102 	orr.w	r1, r1, #2
 8002928:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800292a:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800292c:	68d9      	ldr	r1, [r3, #12]
 800292e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8002932:	f021 0103 	bic.w	r1, r1, #3
 8002936:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8002938:	4610      	mov	r0, r2
      LL_ADC_StartCalibration(hadc->Instance);
 800293a:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800293c:	688b      	ldr	r3, [r1, #8]
 800293e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002942:	f023 0317 	bic.w	r3, r3, #23
 8002946:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800294a:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800294c:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800294e:	688b      	ldr	r3, [r1, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	db39      	blt.n	80029c8 <HAL_ADCEx_Calibration_Start+0xe8>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002954:	f8d1 30b4 	ldr.w	r3, [r1, #180]	; 0xb4
 8002958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800295c:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800295e:	3201      	adds	r2, #1
 8002960:	2a08      	cmp	r2, #8
 8002962:	d1ea      	bne.n	800293a <HAL_ADCEx_Calibration_Start+0x5a>
  MODIFY_REG(ADCx->CR,
 8002964:	688b      	ldr	r3, [r1, #8]
 8002966:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800296a:	f023 0317 	bic.w	r3, r3, #23
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	608b      	str	r3, [r1, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002974:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002976:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 800297a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800297e:	ea43 00d0 	orr.w	r0, r3, r0, lsr #3
 8002982:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 8002986:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002988:	6893      	ldr	r3, [r2, #8]
 800298a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800298e:	f023 0317 	bic.w	r3, r3, #23
 8002992:	f043 0302 	orr.w	r3, r3, #2
 8002996:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8002998:	f7fe fe26 	bl	80015e8 <HAL_GetTick>
 800299c:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800299e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	f012 0f01 	tst.w	r2, #1
 80029a6:	d130      	bne.n	8002a0a <HAL_ADCEx_Calibration_Start+0x12a>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80029a8:	68da      	ldr	r2, [r3, #12]
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80029aa:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 80029ae:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 80029b2:	0436      	lsls	r6, r6, #16
 80029b4:	0c36      	lsrs	r6, r6, #16
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80029b6:	4316      	orrs	r6, r2
 80029b8:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80029ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80029bc:	f023 0303 	bic.w	r3, r3, #3
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	65a3      	str	r3, [r4, #88]	; 0x58
 80029c6:	e7a4      	b.n	8002912 <HAL_ADCEx_Calibration_Start+0x32>
        wait_loop_index++;
 80029c8:	9b01      	ldr	r3, [sp, #4]
 80029ca:	3301      	adds	r3, #1
 80029cc:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80029ce:	9b01      	ldr	r3, [sp, #4]
 80029d0:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 80029d4:	d3bb      	bcc.n	800294e <HAL_ADCEx_Calibration_Start+0x6e>
          ADC_STATE_CLR_SET(hadc->State,
 80029d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80029d8:	f023 0312 	bic.w	r3, r3, #18
 80029dc:	f043 0310 	orr.w	r3, r3, #16
 80029e0:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 80029e2:	2300      	movs	r3, #0
 80029e4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 80029e8:	2501      	movs	r5, #1
 80029ea:	e795      	b.n	8002918 <HAL_ADCEx_Calibration_Start+0x38>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f013 0f01 	tst.w	r3, #1
 80029f4:	d00e      	beq.n	8002a14 <HAL_ADCEx_Calibration_Start+0x134>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80029f8:	f043 0310 	orr.w	r3, r3, #16
 80029fc:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8002a06:	2501      	movs	r5, #1
 8002a08:	e786      	b.n	8002918 <HAL_ADCEx_Calibration_Start+0x38>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a0a:	f7fe fded 	bl	80015e8 <HAL_GetTick>
 8002a0e:	1bc3      	subs	r3, r0, r7
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d8eb      	bhi.n	80029ec <HAL_ADCEx_Calibration_Start+0x10c>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	f012 0f01 	tst.w	r2, #1
 8002a1c:	d1f5      	bne.n	8002a0a <HAL_ADCEx_Calibration_Start+0x12a>
 8002a1e:	e7c3      	b.n	80029a8 <HAL_ADCEx_Calibration_Start+0xc8>
  __HAL_LOCK(hadc);
 8002a20:	2502      	movs	r5, #2
 8002a22:	e779      	b.n	8002918 <HAL_ADCEx_Calibration_Start+0x38>

08002a24 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a24:	4907      	ldr	r1, [pc, #28]	; (8002a44 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002a26:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a28:	0203      	lsls	r3, r0, #8
 8002a2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a32:	0412      	lsls	r2, r2, #16
 8002a34:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002a40:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002a42:	4770      	bx	lr
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a48:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a4a:	4b18      	ldr	r3, [pc, #96]	; (8002aac <HAL_NVIC_SetPriority+0x64>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a52:	f1c3 0c07 	rsb	ip, r3, #7
 8002a56:	f1bc 0f04 	cmp.w	ip, #4
 8002a5a:	bf28      	it	cs
 8002a5c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a60:	f103 0e04 	add.w	lr, r3, #4
 8002a64:	f1be 0f06 	cmp.w	lr, #6
 8002a68:	bf8c      	ite	hi
 8002a6a:	3b03      	subhi	r3, #3
 8002a6c:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a6e:	f04f 3eff 	mov.w	lr, #4294967295
 8002a72:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002a76:	ea21 010c 	bic.w	r1, r1, ip
 8002a7a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a7c:	fa0e f303 	lsl.w	r3, lr, r3
 8002a80:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a84:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002a86:	2800      	cmp	r0, #0
 8002a88:	db09      	blt.n	8002a9e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8a:	0109      	lsls	r1, r1, #4
 8002a8c:	b2c9      	uxtb	r1, r1
 8002a8e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002a92:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002a96:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002a9a:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9e:	f000 000f 	and.w	r0, r0, #15
 8002aa2:	0109      	lsls	r1, r1, #4
 8002aa4:	b2c9      	uxtb	r1, r1
 8002aa6:	4b02      	ldr	r3, [pc, #8]	; (8002ab0 <HAL_NVIC_SetPriority+0x68>)
 8002aa8:	5419      	strb	r1, [r3, r0]
 8002aaa:	e7f6      	b.n	8002a9a <HAL_NVIC_SetPriority+0x52>
 8002aac:	e000ed00 	.word	0xe000ed00
 8002ab0:	e000ed14 	.word	0xe000ed14

08002ab4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	db08      	blt.n	8002aca <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab8:	0942      	lsrs	r2, r0, #5
 8002aba:	f000 001f 	and.w	r0, r0, #31
 8002abe:	2301      	movs	r3, #1
 8002ac0:	fa03 f000 	lsl.w	r0, r3, r0
 8002ac4:	4b01      	ldr	r3, [pc, #4]	; (8002acc <HAL_NVIC_EnableIRQ+0x18>)
 8002ac6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002aca:	4770      	bx	lr
 8002acc:	e000e100 	.word	0xe000e100

08002ad0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	db0d      	blt.n	8002af0 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ad4:	0943      	lsrs	r3, r0, #5
 8002ad6:	f000 001f 	and.w	r0, r0, #31
 8002ada:	2201      	movs	r2, #1
 8002adc:	fa02 f000 	lsl.w	r0, r2, r0
 8002ae0:	3320      	adds	r3, #32
 8002ae2:	4a04      	ldr	r2, [pc, #16]	; (8002af4 <HAL_NVIC_DisableIRQ+0x24>)
 8002ae4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002ae8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002aec:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	e000e100 	.word	0xe000e100

08002af8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002af8:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002afa:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8002afc:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 8002b00:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002b04:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8002b06:	b124      	cbz	r4, 8002b12 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b08:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8002b0a:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 8002b0e:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b12:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002b14:	f004 0c1c 	and.w	ip, r4, #28
 8002b18:	2401      	movs	r4, #1
 8002b1a:	fa04 f40c 	lsl.w	r4, r4, ip
 8002b1e:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 8002b22:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b26:	6804      	ldr	r4, [r0, #0]
 8002b28:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b2a:	6883      	ldr	r3, [r0, #8]
 8002b2c:	2b10      	cmp	r3, #16
 8002b2e:	d005      	beq.n	8002b3c <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002b30:	6803      	ldr	r3, [r0, #0]
 8002b32:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002b34:	6803      	ldr	r3, [r0, #0]
 8002b36:	60da      	str	r2, [r3, #12]
  }
}
 8002b38:	bc10      	pop	{r4}
 8002b3a:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002b3c:	6803      	ldr	r3, [r0, #0]
 8002b3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002b40:	6803      	ldr	r3, [r0, #0]
 8002b42:	60d9      	str	r1, [r3, #12]
 8002b44:	e7f8      	b.n	8002b38 <DMA_SetConfig+0x40>
	...

08002b48 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002b48:	6803      	ldr	r3, [r0, #0]
 8002b4a:	4a13      	ldr	r2, [pc, #76]	; (8002b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d816      	bhi.n	8002b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002b50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002b52:	f022 0203 	bic.w	r2, r2, #3
 8002b56:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002b5a:	f502 3202 	add.w	r2, r2, #133120	; 0x20800

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	3b08      	subs	r3, #8
 8002b62:	490e      	ldr	r1, [pc, #56]	; (8002b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002b64:	fba1 1303 	umull	r1, r3, r1, r3
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	6482      	str	r2, [r0, #72]	; 0x48
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b6c:	4a0c      	ldr	r2, [pc, #48]	; (8002ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8002b6e:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	2201      	movs	r2, #1
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	6503      	str	r3, [r0, #80]	; 0x50
}
 8002b7c:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002b7e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002b80:	f022 0103 	bic.w	r1, r2, #3
 8002b84:	4a07      	ldr	r2, [pc, #28]	; (8002ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8002b86:	440a      	add	r2, r1
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	3b08      	subs	r3, #8
 8002b8c:	4903      	ldr	r1, [pc, #12]	; (8002b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002b8e:	fba1 1303 	umull	r1, r3, r1, r3
 8002b92:	091b      	lsrs	r3, r3, #4
 8002b94:	3307      	adds	r3, #7
 8002b96:	e7e8      	b.n	8002b6a <DMA_CalcDMAMUXChannelBaseAndMask+0x22>
 8002b98:	40020407 	.word	0x40020407
 8002b9c:	cccccccd 	.word	0xcccccccd
 8002ba0:	40020880 	.word	0x40020880
 8002ba4:	4002081c 	.word	0x4002081c

08002ba8 <HAL_DMA_Init>:
  if (hdma == NULL)
 8002ba8:	2800      	cmp	r0, #0
 8002baa:	d068      	beq.n	8002c7e <HAL_DMA_Init+0xd6>
{
 8002bac:	b510      	push	{r4, lr}
 8002bae:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002bb0:	6802      	ldr	r2, [r0, #0]
 8002bb2:	4b34      	ldr	r3, [pc, #208]	; (8002c84 <HAL_DMA_Init+0xdc>)
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d844      	bhi.n	8002c42 <HAL_DMA_Init+0x9a>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002bb8:	4b33      	ldr	r3, [pc, #204]	; (8002c88 <HAL_DMA_Init+0xe0>)
 8002bba:	4413      	add	r3, r2
 8002bbc:	4933      	ldr	r1, [pc, #204]	; (8002c8c <HAL_DMA_Init+0xe4>)
 8002bbe:	fba1 1303 	umull	r1, r3, r1, r3
 8002bc2:	091b      	lsrs	r3, r3, #4
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002bc8:	4b31      	ldr	r3, [pc, #196]	; (8002c90 <HAL_DMA_Init+0xe8>)
 8002bca:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002bd2:	6813      	ldr	r3, [r2, #0]
 8002bd4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bdc:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002bde:	6822      	ldr	r2, [r4, #0]
 8002be0:	6811      	ldr	r1, [r2, #0]
 8002be2:	68a3      	ldr	r3, [r4, #8]
 8002be4:	68e0      	ldr	r0, [r4, #12]
 8002be6:	4303      	orrs	r3, r0
 8002be8:	6920      	ldr	r0, [r4, #16]
 8002bea:	4303      	orrs	r3, r0
 8002bec:	6960      	ldr	r0, [r4, #20]
 8002bee:	4303      	orrs	r3, r0
 8002bf0:	69a0      	ldr	r0, [r4, #24]
 8002bf2:	4303      	orrs	r3, r0
 8002bf4:	69e0      	ldr	r0, [r4, #28]
 8002bf6:	4303      	orrs	r3, r0
 8002bf8:	6a20      	ldr	r0, [r4, #32]
 8002bfa:	4303      	orrs	r3, r0
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c00:	4620      	mov	r0, r4
 8002c02:	f7ff ffa1 	bl	8002b48 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c06:	68a3      	ldr	r3, [r4, #8]
 8002c08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c0c:	bf04      	itt	eq
 8002c0e:	2300      	moveq	r3, #0
 8002c10:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c12:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002c14:	6863      	ldr	r3, [r4, #4]
 8002c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c1a:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c1c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002c1e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002c20:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002c22:	6863      	ldr	r3, [r4, #4]
 8002c24:	1e5a      	subs	r2, r3, #1
 8002c26:	2a03      	cmp	r2, #3
 8002c28:	d916      	bls.n	8002c58 <HAL_DMA_Init+0xb0>
    hdma->DMAmuxRequestGen = 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002c2e:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c30:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c32:	2000      	movs	r0, #0
 8002c34:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8002c36:	2301      	movs	r3, #1
 8002c38:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8002c3c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8002c40:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c42:	4b14      	ldr	r3, [pc, #80]	; (8002c94 <HAL_DMA_Init+0xec>)
 8002c44:	4413      	add	r3, r2
 8002c46:	4911      	ldr	r1, [pc, #68]	; (8002c8c <HAL_DMA_Init+0xe4>)
 8002c48:	fba1 1303 	umull	r1, r3, r1, r3
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c52:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <HAL_DMA_Init+0xf0>)
 8002c54:	6403      	str	r3, [r0, #64]	; 0x40
 8002c56:	e7b9      	b.n	8002bcc <HAL_DMA_Init+0x24>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c5c:	4a0f      	ldr	r2, [pc, #60]	; (8002c9c <HAL_DMA_Init+0xf4>)
 8002c5e:	441a      	add	r2, r3
 8002c60:	0092      	lsls	r2, r2, #2
 8002c62:	6562      	str	r2, [r4, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c64:	490e      	ldr	r1, [pc, #56]	; (8002ca0 <HAL_DMA_Init+0xf8>)
 8002c66:	65a1      	str	r1, [r4, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c70:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c78:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002c7a:	605a      	str	r2, [r3, #4]
 8002c7c:	e7d9      	b.n	8002c32 <HAL_DMA_Init+0x8a>
    return HAL_ERROR;
 8002c7e:	2001      	movs	r0, #1
}
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40020407 	.word	0x40020407
 8002c88:	bffdfff8 	.word	0xbffdfff8
 8002c8c:	cccccccd 	.word	0xcccccccd
 8002c90:	40020000 	.word	0x40020000
 8002c94:	bffdfbf8 	.word	0xbffdfbf8
 8002c98:	40020400 	.word	0x40020400
 8002c9c:	1000823f 	.word	0x1000823f
 8002ca0:	40020940 	.word	0x40020940

08002ca4 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	d053      	beq.n	8002d50 <HAL_DMA_DeInit+0xac>
{
 8002ca8:	b538      	push	{r3, r4, r5, lr}
 8002caa:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8002cac:	6802      	ldr	r2, [r0, #0]
 8002cae:	6813      	ldr	r3, [r2, #0]
 8002cb0:	f023 0301 	bic.w	r3, r3, #1
 8002cb4:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002cb6:	6802      	ldr	r2, [r0, #0]
 8002cb8:	4b26      	ldr	r3, [pc, #152]	; (8002d54 <HAL_DMA_DeInit+0xb0>)
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d82c      	bhi.n	8002d18 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cbe:	4b26      	ldr	r3, [pc, #152]	; (8002d58 <HAL_DMA_DeInit+0xb4>)
 8002cc0:	4413      	add	r3, r2
 8002cc2:	4926      	ldr	r1, [pc, #152]	; (8002d5c <HAL_DMA_DeInit+0xb8>)
 8002cc4:	fba1 1303 	umull	r1, r3, r1, r3
 8002cc8:	091b      	lsrs	r3, r3, #4
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002cce:	4b24      	ldr	r3, [pc, #144]	; (8002d60 <HAL_DMA_DeInit+0xbc>)
 8002cd0:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8002cd2:	2500      	movs	r5, #0
 8002cd4:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cd6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002cd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002cda:	f003 021c 	and.w	r2, r3, #28
 8002cde:	2301      	movs	r3, #1
 8002ce0:	4093      	lsls	r3, r2
 8002ce2:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	f7ff ff2f 	bl	8002b48 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8002cea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002cec:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002cf0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002cf2:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002cf4:	6863      	ldr	r3, [r4, #4]
 8002cf6:	1e5a      	subs	r2, r3, #1
 8002cf8:	2a03      	cmp	r2, #3
 8002cfa:	d918      	bls.n	8002d2e <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8002d00:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d02:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8002d04:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002d06:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8002d08:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8002d0a:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d0c:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8002d0e:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8002d12:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8002d16:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d18:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <HAL_DMA_DeInit+0xc0>)
 8002d1a:	4413      	add	r3, r2
 8002d1c:	490f      	ldr	r1, [pc, #60]	; (8002d5c <HAL_DMA_DeInit+0xb8>)
 8002d1e:	fba1 1303 	umull	r1, r3, r1, r3
 8002d22:	091b      	lsrs	r3, r3, #4
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d28:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <HAL_DMA_DeInit+0xc4>)
 8002d2a:	6403      	str	r3, [r0, #64]	; 0x40
 8002d2c:	e7d1      	b.n	8002cd2 <HAL_DMA_DeInit+0x2e>
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d32:	4a0e      	ldr	r2, [pc, #56]	; (8002d6c <HAL_DMA_DeInit+0xc8>)
 8002d34:	441a      	add	r2, r3
 8002d36:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002d38:	490d      	ldr	r1, [pc, #52]	; (8002d70 <HAL_DMA_DeInit+0xcc>)
 8002d3a:	65a1      	str	r1, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	2101      	movs	r1, #1
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d46:	6015      	str	r5, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d4a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	e7d5      	b.n	8002cfc <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8002d50:	2001      	movs	r0, #1
}
 8002d52:	4770      	bx	lr
 8002d54:	40020407 	.word	0x40020407
 8002d58:	bffdfff8 	.word	0xbffdfff8
 8002d5c:	cccccccd 	.word	0xcccccccd
 8002d60:	40020000 	.word	0x40020000
 8002d64:	bffdfbf8 	.word	0xbffdfbf8
 8002d68:	40020400 	.word	0x40020400
 8002d6c:	1000823f 	.word	0x1000823f
 8002d70:	40020940 	.word	0x40020940

08002d74 <HAL_DMA_Start_IT>:
{
 8002d74:	b538      	push	{r3, r4, r5, lr}
 8002d76:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8002d78:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8002d7c:	2801      	cmp	r0, #1
 8002d7e:	d043      	beq.n	8002e08 <HAL_DMA_Start_IT+0x94>
 8002d80:	2001      	movs	r0, #1
 8002d82:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8002d86:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8002d8a:	b2c0      	uxtb	r0, r0
 8002d8c:	2801      	cmp	r0, #1
 8002d8e:	d006      	beq.n	8002d9e <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002d94:	2300      	movs	r3, #0
 8002d96:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8002d9a:	2001      	movs	r0, #1
}
 8002d9c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d9e:	2002      	movs	r0, #2
 8002da0:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da4:	2000      	movs	r0, #0
 8002da6:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002da8:	6825      	ldr	r5, [r4, #0]
 8002daa:	6828      	ldr	r0, [r5, #0]
 8002dac:	f020 0001 	bic.w	r0, r0, #1
 8002db0:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002db2:	4620      	mov	r0, r4
 8002db4:	f7ff fea0 	bl	8002af8 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8002db8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002dba:	b1d3      	cbz	r3, 8002df2 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dbc:	6822      	ldr	r2, [r4, #0]
 8002dbe:	6813      	ldr	r3, [r2, #0]
 8002dc0:	f043 030e 	orr.w	r3, r3, #14
 8002dc4:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002dc6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002dce:	d003      	beq.n	8002dd8 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dd6:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002dd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002dda:	b11b      	cbz	r3, 8002de4 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002de2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002de4:	6822      	ldr	r2, [r4, #0]
 8002de6:	6813      	ldr	r3, [r2, #0]
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dee:	2000      	movs	r0, #0
 8002df0:	e7d4      	b.n	8002d9c <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002df2:	6822      	ldr	r2, [r4, #0]
 8002df4:	6813      	ldr	r3, [r2, #0]
 8002df6:	f023 0304 	bic.w	r3, r3, #4
 8002dfa:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002dfc:	6822      	ldr	r2, [r4, #0]
 8002dfe:	6813      	ldr	r3, [r2, #0]
 8002e00:	f043 030a 	orr.w	r3, r3, #10
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e7de      	b.n	8002dc6 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8002e08:	2002      	movs	r0, #2
 8002e0a:	e7c7      	b.n	8002d9c <HAL_DMA_Start_IT+0x28>

08002e0c <HAL_DMA_Abort>:
  if (NULL == hdma)
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2800      	cmp	r0, #0
 8002e10:	d034      	beq.n	8002e7c <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002e12:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	2a02      	cmp	r2, #2
 8002e1a:	d006      	beq.n	8002e2a <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002e20:	2200      	movs	r2, #0
 8002e22:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002e26:	2001      	movs	r0, #1
 8002e28:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e2a:	6801      	ldr	r1, [r0, #0]
 8002e2c:	680a      	ldr	r2, [r1, #0]
 8002e2e:	f022 020e 	bic.w	r2, r2, #14
 8002e32:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e34:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002e36:	680a      	ldr	r2, [r1, #0]
 8002e38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e3c:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8002e3e:	6801      	ldr	r1, [r0, #0]
 8002e40:	680a      	ldr	r2, [r1, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e48:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002e4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e4c:	f002 011c 	and.w	r1, r2, #28
 8002e50:	2201      	movs	r2, #1
 8002e52:	408a      	lsls	r2, r1
 8002e54:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e58:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002e5a:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002e5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e5e:	b132      	cbz	r2, 8002e6e <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e60:	6811      	ldr	r1, [r2, #0]
 8002e62:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002e66:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e6a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002e6c:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002e74:	2000      	movs	r0, #0
 8002e76:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8002e7a:	4770      	bx	lr
    return HAL_ERROR;
 8002e7c:	2001      	movs	r0, #1
}
 8002e7e:	4770      	bx	lr

08002e80 <HAL_DMA_Abort_IT>:
{
 8002e80:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002e82:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d003      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8002e90:	2001      	movs	r0, #1
}
 8002e92:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e94:	6802      	ldr	r2, [r0, #0]
 8002e96:	6813      	ldr	r3, [r2, #0]
 8002e98:	f023 030e 	bic.w	r3, r3, #14
 8002e9c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002e9e:	6802      	ldr	r2, [r0, #0]
 8002ea0:	6813      	ldr	r3, [r2, #0]
 8002ea2:	f023 0301 	bic.w	r3, r3, #1
 8002ea6:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ea8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002eaa:	6813      	ldr	r3, [r2, #0]
 8002eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eb0:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002eb2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002eb4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002eb6:	f003 021c 	and.w	r2, r3, #28
 8002eba:	2301      	movs	r3, #1
 8002ebc:	4093      	lsls	r3, r2
 8002ebe:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ec0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002ec2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002ec4:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002ec6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002ec8:	b133      	cbz	r3, 8002ed8 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ed0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ed2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002ed4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002ed6:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8002ee4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002ee6:	b113      	cbz	r3, 8002eee <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8002ee8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002eea:	2000      	movs	r0, #0
 8002eec:	e7d1      	b.n	8002e92 <HAL_DMA_Abort_IT+0x12>
 8002eee:	2000      	movs	r0, #0
 8002ef0:	e7cf      	b.n	8002e92 <HAL_DMA_Abort_IT+0x12>
	...

08002ef4 <HAL_DMA_IRQHandler>:
{
 8002ef4:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ef6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002ef8:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002efa:	6804      	ldr	r4, [r0, #0]
 8002efc:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002efe:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002f00:	f003 031c 	and.w	r3, r3, #28
 8002f04:	2204      	movs	r2, #4
 8002f06:	409a      	lsls	r2, r3
 8002f08:	420a      	tst	r2, r1
 8002f0a:	d015      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x44>
 8002f0c:	f015 0f04 	tst.w	r5, #4
 8002f10:	d012      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f12:	6823      	ldr	r3, [r4, #0]
 8002f14:	f013 0f20 	tst.w	r3, #32
 8002f18:	d103      	bne.n	8002f22 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	f023 0304 	bic.w	r3, r3, #4
 8002f20:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f22:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002f24:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002f26:	f003 021c 	and.w	r2, r3, #28
 8002f2a:	2304      	movs	r3, #4
 8002f2c:	4093      	lsls	r3, r2
 8002f2e:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8002f30:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002f32:	b103      	cbz	r3, 8002f36 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8002f34:	4798      	blx	r3
}
 8002f36:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002f38:	2202      	movs	r2, #2
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	420a      	tst	r2, r1
 8002f3e:	d023      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x94>
 8002f40:	f015 0f02 	tst.w	r5, #2
 8002f44:	d020      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x94>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f46:	6823      	ldr	r3, [r4, #0]
 8002f48:	f013 0f20 	tst.w	r3, #32
 8002f4c:	d106      	bne.n	8002f5c <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	f023 030a 	bic.w	r3, r3, #10
 8002f54:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8002f56:	2301      	movs	r3, #1
 8002f58:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002f5c:	6802      	ldr	r2, [r0, #0]
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <HAL_DMA_IRQHandler+0xd4>)
 8002f60:	429a      	cmp	r2, r3
 8002f62:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002f64:	f003 021c 	and.w	r2, r3, #28
 8002f68:	f04f 0302 	mov.w	r3, #2
 8002f6c:	fa03 f302 	lsl.w	r3, r3, r2
 8002f70:	bf8c      	ite	hi
 8002f72:	4a16      	ldrhi	r2, [pc, #88]	; (8002fcc <HAL_DMA_IRQHandler+0xd8>)
 8002f74:	4a16      	ldrls	r2, [pc, #88]	; (8002fd0 <HAL_DMA_IRQHandler+0xdc>)
 8002f76:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8002f7e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0d8      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8002f84:	4798      	blx	r3
 8002f86:	e7d6      	b.n	8002f36 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002f88:	2208      	movs	r2, #8
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	420b      	tst	r3, r1
 8002f90:	d0d1      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x42>
 8002f92:	f015 0f08 	tst.w	r5, #8
 8002f96:	d0ce      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	f023 030e 	bic.w	r3, r3, #14
 8002f9e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fa0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002fa2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002fa4:	f003 031c 	and.w	r3, r3, #28
 8002fa8:	2201      	movs	r2, #1
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fb0:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002fb2:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8002fbc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0b9      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8002fc2:	4798      	blx	r3
  return;
 8002fc4:	e7b7      	b.n	8002f36 <HAL_DMA_IRQHandler+0x42>
 8002fc6:	bf00      	nop
 8002fc8:	40020080 	.word	0x40020080
 8002fcc:	40020400 	.word	0x40020400
 8002fd0:	40020000 	.word	0x40020000

08002fd4 <HAL_DMAEx_ConfigMuxSync>:
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002fd4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d122      	bne.n	8003024 <HAL_DMAEx_ConfigMuxSync+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8002fde:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d022      	beq.n	800302c <HAL_DMAEx_ConfigMuxSync+0x58>
{
 8002fe6:	b430      	push	{r4, r5}
    __HAL_LOCK(hdma);
 8002fe8:	2301      	movs	r3, #1
 8002fea:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8002fee:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002ff0:	6822      	ldr	r2, [r4, #0]
 8002ff2:	68cb      	ldr	r3, [r1, #12]
 8002ff4:	f103 3cff 	add.w	ip, r3, #4294967295
 8002ff8:	680b      	ldr	r3, [r1, #0]
 8002ffa:	684d      	ldr	r5, [r1, #4]
 8002ffc:	432b      	orrs	r3, r5
 8002ffe:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
 8003002:	f891 c008 	ldrb.w	ip, [r1, #8]
 8003006:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800300a:	7a49      	ldrb	r1, [r1, #9]
 800300c:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8003010:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003014:	4313      	orrs	r3, r2
 8003016:	6023      	str	r3, [r4, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8003018:	2300      	movs	r3, #0
 800301a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    return HAL_OK;
 800301e:	4618      	mov	r0, r3
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;

    /* Return error status */
    return HAL_ERROR;
  }
}
 8003020:	bc30      	pop	{r4, r5}
 8003022:	4770      	bx	lr
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	63c3      	str	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8003028:	2001      	movs	r0, #1
 800302a:	4770      	bx	lr
    __HAL_LOCK(hdma);
 800302c:	2002      	movs	r0, #2
}
 800302e:	4770      	bx	lr

08003030 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003030:	b510      	push	{r4, lr}
 8003032:	4604      	mov	r4, r0
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8003034:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800303a:	421a      	tst	r2, r3
 800303c:	d00e      	beq.n	800305c <HAL_DMAEx_MUX_IRQHandler+0x2c>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800303e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003040:	6813      	ldr	r3, [r2, #0]
 8003042:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003046:	6013      	str	r3, [r2, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003048:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800304a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800304c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 800304e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003050:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003054:	63c3      	str	r3, [r0, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8003056:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003058:	b103      	cbz	r3, 800305c <HAL_DMAEx_MUX_IRQHandler+0x2c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800305a:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 800305c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800305e:	b19b      	cbz	r3, 8003088 <HAL_DMAEx_MUX_IRQHandler+0x58>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8003060:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003062:	6811      	ldr	r1, [r2, #0]
 8003064:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003066:	4211      	tst	r1, r2
 8003068:	d00e      	beq.n	8003088 <HAL_DMAEx_MUX_IRQHandler+0x58>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003070:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003072:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003074:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003076:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8003078:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800307a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800307e:	63e3      	str	r3, [r4, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8003080:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003082:	b10b      	cbz	r3, 8003088 <HAL_DMAEx_MUX_IRQHandler+0x58>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003084:	4620      	mov	r0, r4
 8003086:	4798      	blx	r3
      }
    }
  }
}
 8003088:	bd10      	pop	{r4, pc}
	...

0800308c <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 800308c:	b410      	push	{r4}
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 800308e:	460b      	mov	r3, r1

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003090:	4c0c      	ldr	r4, [pc, #48]	; (80030c4 <FLASH_Program_Fast+0x38>)
 8003092:	6962      	ldr	r2, [r4, #20]
 8003094:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003098:	6162      	str	r2, [r4, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800309a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800309e:	b672      	cpsid	i
 80030a0:	f501 7c80 	add.w	ip, r1, #256	; 0x100
 80030a4:	1a41      	subs	r1, r0, r1
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	505a      	str	r2, [r3, r1]
    dest_addr++;
    src_addr++;
 80030aa:	3304      	adds	r3, #4
    row_index--;
  }
  while (row_index != 0U);
 80030ac:	4563      	cmp	r3, ip
 80030ae:	d1fa      	bne.n	80030a6 <FLASH_Program_Fast+0x1a>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80030b0:	4a04      	ldr	r2, [pc, #16]	; (80030c4 <FLASH_Program_Fast+0x38>)
 80030b2:	6913      	ldr	r3, [r2, #16]
 80030b4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80030b8:	d1fb      	bne.n	80030b2 <FLASH_Program_Fast+0x26>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ba:	f384 8810 	msr	PRIMASK, r4
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80030be:	bc10      	pop	{r4}
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	58004000 	.word	0x58004000

080030c8 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80030c8:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <HAL_FLASH_Unlock+0x20>)
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	db01      	blt.n	80030d4 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80030d0:	2000      	movs	r0, #0
}
 80030d2:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80030d4:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <HAL_FLASH_Unlock+0x20>)
 80030d6:	4a05      	ldr	r2, [pc, #20]	; (80030ec <HAL_FLASH_Unlock+0x24>)
 80030d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80030da:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80030de:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80030e0:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 80030e2:	0fc0      	lsrs	r0, r0, #31
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	58004000 	.word	0x58004000
 80030ec:	45670123 	.word	0x45670123

080030f0 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80030f0:	4b04      	ldr	r3, [pc, #16]	; (8003104 <HAL_FLASH_Lock+0x14>)
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80030f8:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80030fa:	6958      	ldr	r0, [r3, #20]
}
 80030fc:	43c0      	mvns	r0, r0
 80030fe:	0fc0      	lsrs	r0, r0, #31
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	58004000 	.word	0x58004000

08003108 <FLASH_WaitForLastOperation>:
{
 8003108:	b570      	push	{r4, r5, r6, lr}
 800310a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800310c:	f7fe fa6c 	bl	80015e8 <HAL_GetTick>
 8003110:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003112:	4e16      	ldr	r6, [pc, #88]	; (800316c <FLASH_WaitForLastOperation+0x64>)
 8003114:	6933      	ldr	r3, [r6, #16]
 8003116:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800311a:	d006      	beq.n	800312a <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800311c:	f7fe fa64 	bl	80015e8 <HAL_GetTick>
 8003120:	1b00      	subs	r0, r0, r4
 8003122:	42a8      	cmp	r0, r5
 8003124:	d3f6      	bcc.n	8003114 <FLASH_WaitForLastOperation+0xc>
      return HAL_TIMEOUT;
 8003126:	2003      	movs	r0, #3
}
 8003128:	bd70      	pop	{r4, r5, r6, pc}
  error = FLASH->SR;
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <FLASH_WaitForLastOperation+0x64>)
 800312c:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 800312e:	f013 0f01 	tst.w	r3, #1
 8003132:	d002      	beq.n	800313a <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003134:	4a0d      	ldr	r2, [pc, #52]	; (800316c <FLASH_WaitForLastOperation+0x64>)
 8003136:	2101      	movs	r1, #1
 8003138:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 800313a:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 800313e:	4013      	ands	r3, r2
 8003140:	d10b      	bne.n	800315a <FLASH_WaitForLastOperation+0x52>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8003142:	4e0a      	ldr	r6, [pc, #40]	; (800316c <FLASH_WaitForLastOperation+0x64>)
 8003144:	6933      	ldr	r3, [r6, #16]
 8003146:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800314a:	d00c      	beq.n	8003166 <FLASH_WaitForLastOperation+0x5e>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800314c:	f7fe fa4c 	bl	80015e8 <HAL_GetTick>
 8003150:	1b00      	subs	r0, r0, r4
 8003152:	42a8      	cmp	r0, r5
 8003154:	d3f6      	bcc.n	8003144 <FLASH_WaitForLastOperation+0x3c>
      return HAL_TIMEOUT;
 8003156:	2003      	movs	r0, #3
 8003158:	e7e6      	b.n	8003128 <FLASH_WaitForLastOperation+0x20>
  __HAL_FLASH_CLEAR_FLAG(error);
 800315a:	4a04      	ldr	r2, [pc, #16]	; (800316c <FLASH_WaitForLastOperation+0x64>)
 800315c:	6113      	str	r3, [r2, #16]
    pFlash.ErrorCode = error;
 800315e:	4a04      	ldr	r2, [pc, #16]	; (8003170 <FLASH_WaitForLastOperation+0x68>)
 8003160:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8003162:	2001      	movs	r0, #1
 8003164:	e7e0      	b.n	8003128 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8003166:	2000      	movs	r0, #0
 8003168:	e7de      	b.n	8003128 <FLASH_WaitForLastOperation+0x20>
 800316a:	bf00      	nop
 800316c:	58004000 	.word	0x58004000
 8003170:	20000898 	.word	0x20000898

08003174 <HAL_FLASH_Program>:
{
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003176:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8003178:	4b17      	ldr	r3, [pc, #92]	; (80031d8 <HAL_FLASH_Program+0x64>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d029      	beq.n	80031d4 <HAL_FLASH_Program+0x60>
 8003180:	4604      	mov	r4, r0
 8003182:	460d      	mov	r5, r1
 8003184:	4616      	mov	r6, r2
 8003186:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <HAL_FLASH_Program+0x64>)
 8003188:	2201      	movs	r2, #1
 800318a:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800318c:	2200      	movs	r2, #0
 800318e:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003190:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003194:	f7ff ffb8 	bl	8003108 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003198:	b970      	cbnz	r0, 80031b8 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800319a:	2c01      	cmp	r4, #1
 800319c:	d010      	beq.n	80031c0 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800319e:	4631      	mov	r1, r6
 80031a0:	4628      	mov	r0, r5
 80031a2:	f7ff ff73 	bl	800308c <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80031a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031aa:	f7ff ffad 	bl	8003108 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80031ae:	4a0b      	ldr	r2, [pc, #44]	; (80031dc <HAL_FLASH_Program+0x68>)
 80031b0:	6953      	ldr	r3, [r2, #20]
 80031b2:	ea23 0404 	bic.w	r4, r3, r4
 80031b6:	6154      	str	r4, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 80031b8:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <HAL_FLASH_Program+0x64>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
}
 80031be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80031c0:	4a06      	ldr	r2, [pc, #24]	; (80031dc <HAL_FLASH_Program+0x68>)
 80031c2:	6953      	ldr	r3, [r2, #20]
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	6153      	str	r3, [r2, #20]
  *(uint32_t *)Address = (uint32_t)Data;
 80031ca:	602e      	str	r6, [r5, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80031cc:	f3bf 8f6f 	isb	sy
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80031d0:	606f      	str	r7, [r5, #4]
}
 80031d2:	e7e8      	b.n	80031a6 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 80031d4:	2002      	movs	r0, #2
 80031d6:	e7f2      	b.n	80031be <HAL_FLASH_Program+0x4a>
 80031d8:	20000898 	.word	0x20000898
 80031dc:	58004000 	.word	0x58004000

080031e0 <FLASH_PageErase>:

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80031e0:	4a05      	ldr	r2, [pc, #20]	; (80031f8 <FLASH_PageErase+0x18>)
 80031e2:	6953      	ldr	r3, [r2, #20]
 80031e4:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80031e8:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 80031ec:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80031f0:	f040 0002 	orr.w	r0, r0, #2
 80031f4:	6150      	str	r0, [r2, #20]
#endif
}
 80031f6:	4770      	bx	lr
 80031f8:	58004000 	.word	0x58004000

080031fc <HAL_FLASHEx_Erase>:
{
 80031fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80031fe:	4b26      	ldr	r3, [pc, #152]	; (8003298 <HAL_FLASHEx_Erase+0x9c>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d046      	beq.n	8003294 <HAL_FLASHEx_Erase+0x98>
 8003206:	4605      	mov	r5, r0
 8003208:	460e      	mov	r6, r1
 800320a:	4b23      	ldr	r3, [pc, #140]	; (8003298 <HAL_FLASHEx_Erase+0x9c>)
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003210:	2200      	movs	r2, #0
 8003212:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003214:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003218:	f7ff ff76 	bl	8003108 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800321c:	4601      	mov	r1, r0
 800321e:	2800      	cmp	r0, #0
 8003220:	d133      	bne.n	800328a <HAL_FLASHEx_Erase+0x8e>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003222:	682b      	ldr	r3, [r5, #0]
 8003224:	2b04      	cmp	r3, #4
 8003226:	d018      	beq.n	800325a <HAL_FLASHEx_Erase+0x5e>
      *PageError = 0xFFFFFFFFU;
 8003228:	f04f 33ff 	mov.w	r3, #4294967295
 800322c:	6033      	str	r3, [r6, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800322e:	686c      	ldr	r4, [r5, #4]
 8003230:	68ab      	ldr	r3, [r5, #8]
 8003232:	4423      	add	r3, r4
 8003234:	429c      	cmp	r4, r3
 8003236:	d21e      	bcs.n	8003276 <HAL_FLASHEx_Erase+0x7a>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003238:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
        FLASH_PageErase(index);
 800323c:	4620      	mov	r0, r4
 800323e:	f7ff ffcf 	bl	80031e0 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003242:	4638      	mov	r0, r7
 8003244:	f7ff ff60 	bl	8003108 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8003248:	4601      	mov	r1, r0
 800324a:	b998      	cbnz	r0, 8003274 <HAL_FLASHEx_Erase+0x78>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800324c:	3401      	adds	r4, #1
 800324e:	686b      	ldr	r3, [r5, #4]
 8003250:	68aa      	ldr	r2, [r5, #8]
 8003252:	4413      	add	r3, r2
 8003254:	42a3      	cmp	r3, r4
 8003256:	d8f1      	bhi.n	800323c <HAL_FLASHEx_Erase+0x40>
 8003258:	e00d      	b.n	8003276 <HAL_FLASHEx_Erase+0x7a>
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 800325a:	4a10      	ldr	r2, [pc, #64]	; (800329c <HAL_FLASHEx_Erase+0xa0>)
 800325c:	6953      	ldr	r3, [r2, #20]
 800325e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003262:	f043 0304 	orr.w	r3, r3, #4
 8003266:	6153      	str	r3, [r2, #20]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003268:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800326c:	f7ff ff4c 	bl	8003108 <FLASH_WaitForLastOperation>
 8003270:	4601      	mov	r1, r0
 8003272:	e007      	b.n	8003284 <HAL_FLASHEx_Erase+0x88>
          *PageError = index;
 8003274:	6034      	str	r4, [r6, #0]
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003276:	4a09      	ldr	r2, [pc, #36]	; (800329c <HAL_FLASHEx_Erase+0xa0>)
 8003278:	6953      	ldr	r3, [r2, #20]
 800327a:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800327e:	f023 0302 	bic.w	r3, r3, #2
 8003282:	6153      	str	r3, [r2, #20]
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8003284:	4b05      	ldr	r3, [pc, #20]	; (800329c <HAL_FLASHEx_Erase+0xa0>)
 8003286:	681a      	ldr	r2, [r3, #0]
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8003288:	681b      	ldr	r3, [r3, #0]
  __HAL_UNLOCK(&pFlash);
 800328a:	4b03      	ldr	r3, [pc, #12]	; (8003298 <HAL_FLASHEx_Erase+0x9c>)
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]
}
 8003290:	4608      	mov	r0, r1
 8003292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8003294:	2102      	movs	r1, #2
 8003296:	e7fb      	b.n	8003290 <HAL_FLASHEx_Erase+0x94>
 8003298:	20000898 	.word	0x20000898
 800329c:	58004000 	.word	0x58004000

080032a0 <HAL_FLASHEx_Erase_IT>:
{
 80032a0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(&pFlash);
 80032a2:	4b1a      	ldr	r3, [pc, #104]	; (800330c <HAL_FLASHEx_Erase_IT+0x6c>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d02d      	beq.n	8003306 <HAL_FLASHEx_Erase_IT+0x66>
 80032aa:	4604      	mov	r4, r0
 80032ac:	4b17      	ldr	r3, [pc, #92]	; (800330c <HAL_FLASHEx_Erase_IT+0x6c>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80032b2:	2200      	movs	r2, #0
 80032b4:	605a      	str	r2, [r3, #4]
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 80032b6:	6802      	ldr	r2, [r0, #0]
 80032b8:	609a      	str	r2, [r3, #8]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80032ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032be:	f7ff ff23 	bl	8003108 <FLASH_WaitForLastOperation>
  if (status != HAL_OK)
 80032c2:	4605      	mov	r5, r0
 80032c4:	b120      	cbz	r0, 80032d0 <HAL_FLASHEx_Erase_IT+0x30>
    __HAL_UNLOCK(&pFlash);
 80032c6:	4b11      	ldr	r3, [pc, #68]	; (800330c <HAL_FLASHEx_Erase_IT+0x6c>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
}
 80032cc:	4628      	mov	r0, r5
 80032ce:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 80032d0:	4a0f      	ldr	r2, [pc, #60]	; (8003310 <HAL_FLASHEx_Erase_IT+0x70>)
 80032d2:	6953      	ldr	r3, [r2, #20]
 80032d4:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80032d8:	6153      	str	r3, [r2, #20]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d007      	beq.n	80032f0 <HAL_FLASHEx_Erase_IT+0x50>
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 80032e0:	68a2      	ldr	r2, [r4, #8]
 80032e2:	4b0a      	ldr	r3, [pc, #40]	; (800330c <HAL_FLASHEx_Erase_IT+0x6c>)
 80032e4:	615a      	str	r2, [r3, #20]
      pFlash.Page = pEraseInit->Page;
 80032e6:	6860      	ldr	r0, [r4, #4]
 80032e8:	6118      	str	r0, [r3, #16]
      FLASH_PageErase(pEraseInit->Page);
 80032ea:	f7ff ff79 	bl	80031e0 <FLASH_PageErase>
 80032ee:	e7ed      	b.n	80032cc <HAL_FLASHEx_Erase_IT+0x2c>
      pFlash.Page = 0;
 80032f0:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_FLASHEx_Erase_IT+0x6c>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	611a      	str	r2, [r3, #16]
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80032f6:	4a06      	ldr	r2, [pc, #24]	; (8003310 <HAL_FLASHEx_Erase_IT+0x70>)
 80032f8:	6953      	ldr	r3, [r2, #20]
 80032fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fe:	f043 0304 	orr.w	r3, r3, #4
 8003302:	6153      	str	r3, [r2, #20]
}
 8003304:	e7e2      	b.n	80032cc <HAL_FLASHEx_Erase_IT+0x2c>
  __HAL_LOCK(&pFlash);
 8003306:	2502      	movs	r5, #2
 8003308:	e7e0      	b.n	80032cc <HAL_FLASHEx_Erase_IT+0x2c>
 800330a:	bf00      	nop
 800330c:	20000898 	.word	0x20000898
 8003310:	58004000 	.word	0x58004000

08003314 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003314:	680b      	ldr	r3, [r1, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 80c0 	beq.w	800349c <HAL_GPIO_Init+0x188>
{
 800331c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003320:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00u;
 8003324:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003326:	2501      	movs	r5, #1
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003328:	f04f 0e03 	mov.w	lr, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800332c:	2607      	movs	r6, #7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800332e:	4c5c      	ldr	r4, [pc, #368]	; (80034a0 <HAL_GPIO_Init+0x18c>)
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003330:	f04f 080f 	mov.w	r8, #15
 8003334:	e050      	b.n	80033d8 <HAL_GPIO_Init+0xc4>
        temp = GPIOx->OSPEEDR;
 8003336:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003338:	fa0e fa0c 	lsl.w	sl, lr, ip
 800333c:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003340:	68cb      	ldr	r3, [r1, #12]
 8003342:	fa03 f30c 	lsl.w	r3, r3, ip
 8003346:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 800334a:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 800334c:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800334e:	ea23 0a07 	bic.w	sl, r3, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003352:	684b      	ldr	r3, [r1, #4]
 8003354:	f3c3 1700 	ubfx	r7, r3, #4, #1
 8003358:	4097      	lsls	r7, r2
 800335a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800335e:	6047      	str	r7, [r0, #4]
 8003360:	e045      	b.n	80033ee <HAL_GPIO_Init+0xda>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003362:	2700      	movs	r7, #0
 8003364:	fa07 f70b 	lsl.w	r7, r7, fp
 8003368:	ea47 070a 	orr.w	r7, r7, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 800336c:	609f      	str	r7, [r3, #8]
        temp = EXTI->RTSR1;
 800336e:	6823      	ldr	r3, [r4, #0]
        temp &= ~(iocurrent);
 8003370:	ea6f 0709 	mvn.w	r7, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003374:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8003378:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800337c:	bf0c      	ite	eq
 800337e:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8003380:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 8003384:	6023      	str	r3, [r4, #0]

        temp = EXTI->FTSR1;
 8003386:	6863      	ldr	r3, [r4, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003388:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800338c:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8003390:	bf0c      	ite	eq
 8003392:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8003394:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR1 = temp;
 8003398:	6063      	str	r3, [r4, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800339a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800339e:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80033a2:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
        temp &= ~(iocurrent);
 80033a6:	bf0c      	ite	eq
 80033a8:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 80033aa:	ea49 0303 	orrne.w	r3, r9, r3
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80033ae:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80033b2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033b6:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80033ba:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
        temp &= ~(iocurrent);
 80033be:	bf0c      	ite	eq
 80033c0:	401f      	andeq	r7, r3
        {
          temp |= iocurrent;
 80033c2:	ea49 0703 	orrne.w	r7, r9, r3
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80033c6:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80033ca:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033cc:	680b      	ldr	r3, [r1, #0]
 80033ce:	f10c 0c02 	add.w	ip, ip, #2
 80033d2:	fa33 f702 	lsrs.w	r7, r3, r2
 80033d6:	d05f      	beq.n	8003498 <HAL_GPIO_Init+0x184>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033d8:	fa05 f702 	lsl.w	r7, r5, r2
    if (iocurrent != 0x00u)
 80033dc:	ea17 0903 	ands.w	r9, r7, r3
 80033e0:	d0f3      	beq.n	80033ca <HAL_GPIO_Init+0xb6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033e2:	684b      	ldr	r3, [r1, #4]
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d9a3      	bls.n	8003336 <HAL_GPIO_Init+0x22>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033ee:	684b      	ldr	r3, [r1, #4]
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	d020      	beq.n	800343a <HAL_GPIO_Init+0x126>
        temp = GPIOx->PUPDR;
 80033f8:	68c3      	ldr	r3, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033fa:	fa0e f70c 	lsl.w	r7, lr, ip
 80033fe:	ea23 0707 	bic.w	r7, r3, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003402:	688b      	ldr	r3, [r1, #8]
 8003404:	fa03 f30c 	lsl.w	r3, r3, ip
 8003408:	433b      	orrs	r3, r7
        GPIOx->PUPDR = temp;
 800340a:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800340c:	684b      	ldr	r3, [r1, #4]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d111      	bne.n	800343a <HAL_GPIO_Init+0x126>
        temp = GPIOx->AFR[position >> 3U];
 8003416:	08d7      	lsrs	r7, r2, #3
 8003418:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800341c:	6a3b      	ldr	r3, [r7, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800341e:	f002 0b07 	and.w	fp, r2, #7
 8003422:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003426:	fa08 fa0b 	lsl.w	sl, r8, fp
 800342a:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800342e:	690b      	ldr	r3, [r1, #16]
 8003430:	fa03 f30b 	lsl.w	r3, r3, fp
 8003434:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3u] = temp;
 8003438:	623b      	str	r3, [r7, #32]
      temp = GPIOx->MODER;
 800343a:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800343c:	fa0e f70c 	lsl.w	r7, lr, ip
 8003440:	ea23 0707 	bic.w	r7, r3, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003444:	684b      	ldr	r3, [r1, #4]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	fa03 f30c 	lsl.w	r3, r3, ip
 800344e:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 8003450:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003452:	684b      	ldr	r3, [r1, #4]
 8003454:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8003458:	d0b7      	beq.n	80033ca <HAL_GPIO_Init+0xb6>
        temp = SYSCFG->EXTICR[position >> 2u];
 800345a:	f022 0303 	bic.w	r3, r2, #3
 800345e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003462:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003466:	689f      	ldr	r7, [r3, #8]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003468:	f002 0b03 	and.w	fp, r2, #3
 800346c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003470:	fa06 fa0b 	lsl.w	sl, r6, fp
 8003474:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003478:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800347c:	f43f af71 	beq.w	8003362 <HAL_GPIO_Init+0x4e>
 8003480:	4f08      	ldr	r7, [pc, #32]	; (80034a4 <HAL_GPIO_Init+0x190>)
 8003482:	42b8      	cmp	r0, r7
 8003484:	d006      	beq.n	8003494 <HAL_GPIO_Init+0x180>
 8003486:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800348a:	42b8      	cmp	r0, r7
 800348c:	bf0c      	ite	eq
 800348e:	2702      	moveq	r7, #2
 8003490:	2707      	movne	r7, #7
 8003492:	e767      	b.n	8003364 <HAL_GPIO_Init+0x50>
 8003494:	462f      	mov	r7, r5
 8003496:	e765      	b.n	8003364 <HAL_GPIO_Init+0x50>
  }
}
 8003498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	58000800 	.word	0x58000800
 80034a4:	48000400 	.word	0x48000400

080034a8 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80034a8:	2900      	cmp	r1, #0
 80034aa:	d075      	beq.n	8003598 <HAL_GPIO_DeInit+0xf0>
{
 80034ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034b0:	468c      	mov	ip, r1
  uint32_t position = 0x00u;
 80034b2:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80034b4:	f04f 0801 	mov.w	r8, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80034b8:	f04f 0b07 	mov.w	fp, #7
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80034bc:	f04f 0a03 	mov.w	sl, #3
        EXTI->IMR1 &= ~(iocurrent);
 80034c0:	4f36      	ldr	r7, [pc, #216]	; (800359c <HAL_GPIO_DeInit+0xf4>)
 80034c2:	e029      	b.n	8003518 <HAL_GPIO_DeInit+0x70>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80034c4:	f04f 0900 	mov.w	r9, #0
 80034c8:	fa09 f404 	lsl.w	r4, r9, r4
 80034cc:	42ac      	cmp	r4, r5
 80034ce:	d048      	beq.n	8003562 <HAL_GPIO_DeInit+0xba>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80034d0:	6804      	ldr	r4, [r0, #0]
 80034d2:	0059      	lsls	r1, r3, #1
 80034d4:	fa0a f101 	lsl.w	r1, sl, r1
 80034d8:	430c      	orrs	r4, r1
 80034da:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80034dc:	08dd      	lsrs	r5, r3, #3
 80034de:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80034e2:	6a2e      	ldr	r6, [r5, #32]
 80034e4:	f003 0407 	and.w	r4, r3, #7
 80034e8:	00a4      	lsls	r4, r4, #2
 80034ea:	f04f 0e0f 	mov.w	lr, #15
 80034ee:	fa0e f404 	lsl.w	r4, lr, r4
 80034f2:	ea26 0404 	bic.w	r4, r6, r4
 80034f6:	622c      	str	r4, [r5, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034f8:	6884      	ldr	r4, [r0, #8]
 80034fa:	ea24 0401 	bic.w	r4, r4, r1
 80034fe:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003500:	6844      	ldr	r4, [r0, #4]
 8003502:	ea24 0202 	bic.w	r2, r4, r2
 8003506:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003508:	68c2      	ldr	r2, [r0, #12]
 800350a:	ea22 0101 	bic.w	r1, r2, r1
 800350e:	60c1      	str	r1, [r0, #12]
    }

    position++;
 8003510:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8003512:	fa3c f203 	lsrs.w	r2, ip, r3
 8003516:	d03d      	beq.n	8003594 <HAL_GPIO_DeInit+0xec>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003518:	fa08 f203 	lsl.w	r2, r8, r3
    if (iocurrent != 0x00u)
 800351c:	ea12 060c 	ands.w	r6, r2, ip
 8003520:	d0f6      	beq.n	8003510 <HAL_GPIO_DeInit+0x68>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8003522:	f023 0103 	bic.w	r1, r3, #3
 8003526:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800352a:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 800352e:	688d      	ldr	r5, [r1, #8]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8003530:	f003 0403 	and.w	r4, r3, #3
 8003534:	00a4      	lsls	r4, r4, #2
 8003536:	fa0b fe04 	lsl.w	lr, fp, r4
 800353a:	ea0e 0505 	and.w	r5, lr, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800353e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003542:	d0bf      	beq.n	80034c4 <HAL_GPIO_DeInit+0x1c>
 8003544:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80035a0 <HAL_GPIO_DeInit+0xf8>
 8003548:	4548      	cmp	r0, r9
 800354a:	d008      	beq.n	800355e <HAL_GPIO_DeInit+0xb6>
 800354c:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8003550:	4548      	cmp	r0, r9
 8003552:	bf0c      	ite	eq
 8003554:	f04f 0902 	moveq.w	r9, #2
 8003558:	f04f 0907 	movne.w	r9, #7
 800355c:	e7b4      	b.n	80034c8 <HAL_GPIO_DeInit+0x20>
 800355e:	46c1      	mov	r9, r8
 8003560:	e7b2      	b.n	80034c8 <HAL_GPIO_DeInit+0x20>
        EXTI->IMR1 &= ~(iocurrent);
 8003562:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8003566:	ea24 0406 	bic.w	r4, r4, r6
 800356a:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800356e:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8003572:	ea24 0406 	bic.w	r4, r4, r6
 8003576:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 800357a:	683c      	ldr	r4, [r7, #0]
 800357c:	ea24 0406 	bic.w	r4, r4, r6
 8003580:	603c      	str	r4, [r7, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8003582:	687c      	ldr	r4, [r7, #4]
 8003584:	ea24 0606 	bic.w	r6, r4, r6
 8003588:	607e      	str	r6, [r7, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800358a:	688c      	ldr	r4, [r1, #8]
 800358c:	ea24 040e 	bic.w	r4, r4, lr
 8003590:	608c      	str	r4, [r1, #8]
 8003592:	e79d      	b.n	80034d0 <HAL_GPIO_DeInit+0x28>
  }
}
 8003594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	58000800 	.word	0x58000800
 80035a0:	48000400 	.word	0x48000400

080035a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035a4:	b10a      	cbz	r2, 80035aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035a6:	6181      	str	r1, [r0, #24]
 80035a8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035aa:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80035ac:	4770      	bx	lr
	...

080035b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035b0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035b2:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	4203      	tst	r3, r0
 80035b8:	d100      	bne.n	80035bc <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80035ba:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035bc:	4b02      	ldr	r3, [pc, #8]	; (80035c8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80035be:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035c0:	f003 f9b8 	bl	8006934 <HAL_GPIO_EXTI_Callback>
}
 80035c4:	e7f9      	b.n	80035ba <HAL_GPIO_EXTI_IRQHandler+0xa>
 80035c6:	bf00      	nop
 80035c8:	58000800 	.word	0x58000800

080035cc <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035cc:	4a02      	ldr	r2, [pc, #8]	; (80035d8 <HAL_PWR_EnableBkUpAccess+0xc>)
 80035ce:	6813      	ldr	r3, [r2, #0]
 80035d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d4:	6013      	str	r3, [r2, #0]
}
 80035d6:	4770      	bx	lr
 80035d8:	58000400 	.word	0x58000400

080035dc <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80035dc:	b510      	push	{r4, lr}
 80035de:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80035e0:	b9a0      	cbnz	r0, 800360c <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80035e2:	4b0f      	ldr	r3, [pc, #60]	; (8003620 <HAL_PWR_EnterSLEEPMode+0x44>)
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80035ea:	d10a      	bne.n	8003602 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80035ec:	4a0d      	ldr	r2, [pc, #52]	; (8003624 <HAL_PWR_EnterSLEEPMode+0x48>)
 80035ee:	6913      	ldr	r3, [r2, #16]
 80035f0:	f023 0304 	bic.w	r3, r3, #4
 80035f4:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80035f6:	2c01      	cmp	r4, #1
 80035f8:	d010      	beq.n	800361c <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80035fa:	bf40      	sev
    __WFE();
 80035fc:	bf20      	wfe
    __WFE();
 80035fe:	bf20      	wfe
  }
}
 8003600:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003602:	f000 f821 	bl	8003648 <HAL_PWREx_DisableLowPowerRunMode>
 8003606:	2800      	cmp	r0, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_PWR_EnterSLEEPMode+0x10>
 800360a:	e7f9      	b.n	8003600 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 800360c:	4b04      	ldr	r3, [pc, #16]	; (8003620 <HAL_PWR_EnterSLEEPMode+0x44>)
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003614:	d1ea      	bne.n	80035ec <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8003616:	f000 f80f 	bl	8003638 <HAL_PWREx_EnableLowPowerRunMode>
 800361a:	e7e7      	b.n	80035ec <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 800361c:	bf30      	wfi
 800361e:	e7ef      	b.n	8003600 <HAL_PWR_EnterSLEEPMode+0x24>
 8003620:	58000400 	.word	0x58000400
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8003628:	4b02      	ldr	r3, [pc, #8]	; (8003634 <HAL_PWREx_GetVoltageRange+0xc>)
 800362a:	6818      	ldr	r0, [r3, #0]
}
 800362c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	58000400 	.word	0x58000400

08003638 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003638:	4a02      	ldr	r2, [pc, #8]	; (8003644 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 800363a:	6813      	ldr	r3, [r2, #0]
 800363c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003640:	6013      	str	r3, [r2, #0]
}
 8003642:	4770      	bx	lr
 8003644:	58000400 	.word	0x58000400

08003648 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8003648:	4912      	ldr	r1, [pc, #72]	; (8003694 <HAL_PWREx_DisableLowPowerRunMode+0x4c>)
 800364a:	680b      	ldr	r3, [r1, #0]
 800364c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003650:	600b      	str	r3, [r1, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8003652:	4b11      	ldr	r3, [pc, #68]	; (8003698 <HAL_PWREx_DisableLowPowerRunMode+0x50>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	2332      	movs	r3, #50	; 0x32
 8003658:	fb03 f202 	mul.w	r2, r3, r2
 800365c:	4b0f      	ldr	r3, [pc, #60]	; (800369c <HAL_PWREx_DisableLowPowerRunMode+0x54>)
 800365e:	fba3 0302 	umull	r0, r3, r3, r2
 8003662:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003664:	6949      	ldr	r1, [r1, #20]
 8003666:	f411 7f00 	tst.w	r1, #512	; 0x200
 800366a:	d00a      	beq.n	8003682 <HAL_PWREx_DisableLowPowerRunMode+0x3a>
 800366c:	490c      	ldr	r1, [pc, #48]	; (80036a0 <HAL_PWREx_DisableLowPowerRunMode+0x58>)
 800366e:	428a      	cmp	r2, r1
 8003670:	d907      	bls.n	8003682 <HAL_PWREx_DisableLowPowerRunMode+0x3a>
 8003672:	4908      	ldr	r1, [pc, #32]	; (8003694 <HAL_PWREx_DisableLowPowerRunMode+0x4c>)
  {
    wait_loop_index--;
 8003674:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003676:	694a      	ldr	r2, [r1, #20]
 8003678:	f412 7f00 	tst.w	r2, #512	; 0x200
 800367c:	d001      	beq.n	8003682 <HAL_PWREx_DisableLowPowerRunMode+0x3a>
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f8      	bne.n	8003674 <HAL_PWREx_DisableLowPowerRunMode+0x2c>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8003682:	4b04      	ldr	r3, [pc, #16]	; (8003694 <HAL_PWREx_DisableLowPowerRunMode+0x4c>)
 8003684:	695b      	ldr	r3, [r3, #20]
  {
    return HAL_TIMEOUT;
 8003686:	f413 7f00 	tst.w	r3, #512	; 0x200
  }

  return HAL_OK;
}
 800368a:	bf0c      	ite	eq
 800368c:	2000      	moveq	r0, #0
 800368e:	2003      	movne	r0, #3
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	58000400 	.word	0x58000400
 8003698:	20000000 	.word	0x20000000
 800369c:	431bde83 	.word	0x431bde83
 80036a0:	000f423f 	.word	0x000f423f

080036a4 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80036a4:	4a0c      	ldr	r2, [pc, #48]	; (80036d8 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 80036a6:	6813      	ldr	r3, [r2, #0]
 80036a8:	f023 0307 	bic.w	r3, r3, #7
 80036ac:	f043 0302 	orr.w	r3, r3, #2
 80036b0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80036b2:	4a0a      	ldr	r2, [pc, #40]	; (80036dc <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80036b4:	6913      	ldr	r3, [r2, #16]
 80036b6:	f043 0304 	orr.w	r3, r3, #4
 80036ba:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80036bc:	2801      	cmp	r0, #1
 80036be:	d008      	beq.n	80036d2 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80036c0:	bf40      	sev
    __WFE();
 80036c2:	bf20      	wfe
    __WFE();
 80036c4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80036c6:	4a05      	ldr	r2, [pc, #20]	; (80036dc <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80036c8:	6913      	ldr	r3, [r2, #16]
 80036ca:	f023 0304 	bic.w	r3, r3, #4
 80036ce:	6113      	str	r3, [r2, #16]
}
 80036d0:	4770      	bx	lr
    __WFI();
 80036d2:	bf30      	wfi
 80036d4:	e7f7      	b.n	80036c6 <HAL_PWREx_EnterSTOP2Mode+0x22>
 80036d6:	bf00      	nop
 80036d8:	58000400 	.word	0x58000400
 80036dc:	e000ed00 	.word	0xe000ed00

080036e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80036e0:	b570      	push	{r4, r5, r6, lr}
 80036e2:	b084      	sub	sp, #16
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80036e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80036ec:	f3c0 1003 	ubfx	r0, r0, #4, #4
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	4a30      	ldr	r2, [pc, #192]	; (80037b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 80036f6:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 80036fa:	4a30      	ldr	r2, [pc, #192]	; (80037bc <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 80036fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003700:	fbb4 f4f3 	udiv	r4, r4, r3

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003704:	f7ff ff90 	bl	8003628 <HAL_PWREx_GetVoltageRange>
 8003708:	4605      	mov	r5, r0

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800370a:	4b2d      	ldr	r3, [pc, #180]	; (80037c0 <RCC_SetFlashLatencyFromMSIRange+0xe0>)
 800370c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003710:	ab04      	add	r3, sp, #16
 8003712:	e903 0007 	stmdb	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003716:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800371a:	d027      	beq.n	800376c <RCC_SetFlashLatencyFromMSIRange+0x8c>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800371c:	4b29      	ldr	r3, [pc, #164]	; (80037c4 <RCC_SetFlashLatencyFromMSIRange+0xe4>)
 800371e:	429c      	cmp	r4, r3
 8003720:	d33d      	bcc.n	800379e <RCC_SetFlashLatencyFromMSIRange+0xbe>
 8003722:	f503 03b7 	add.w	r3, r3, #5996544	; 0x5b8000
 8003726:	f603 537f 	addw	r3, r3, #3455	; 0xd7f
 800372a:	429c      	cmp	r4, r3
 800372c:	d93e      	bls.n	80037ac <RCC_SetFlashLatencyFromMSIRange+0xcc>
 800372e:	f503 1374 	add.w	r3, r3, #3997696	; 0x3d0000
 8003732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003736:	429c      	cmp	r4, r3
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003738:	bf98      	it	ls
 800373a:	2302      	movls	r3, #2
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800373c:	d930      	bls.n	80037a0 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800373e:	2500      	movs	r5, #0
        break;
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003740:	4a21      	ldr	r2, [pc, #132]	; (80037c8 <RCC_SetFlashLatencyFromMSIRange+0xe8>)
 8003742:	6813      	ldr	r3, [r2, #0]
 8003744:	f023 0307 	bic.w	r3, r3, #7
 8003748:	432b      	orrs	r3, r5
 800374a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800374c:	f7fd ff4c 	bl	80015e8 <HAL_GetTick>
 8003750:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003752:	4e1d      	ldr	r6, [pc, #116]	; (80037c8 <RCC_SetFlashLatencyFromMSIRange+0xe8>)
 8003754:	6833      	ldr	r3, [r6, #0]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	429d      	cmp	r5, r3
 800375c:	d028      	beq.n	80037b0 <RCC_SetFlashLatencyFromMSIRange+0xd0>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800375e:	f7fd ff43 	bl	80015e8 <HAL_GetTick>
 8003762:	1b00      	subs	r0, r0, r4
 8003764:	2802      	cmp	r0, #2
 8003766:	d9f5      	bls.n	8003754 <RCC_SetFlashLatencyFromMSIRange+0x74>
    {
      return HAL_TIMEOUT;
 8003768:	2003      	movs	r0, #3
 800376a:	e022      	b.n	80037b2 <RCC_SetFlashLatencyFromMSIRange+0xd2>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800376c:	4b17      	ldr	r3, [pc, #92]	; (80037cc <RCC_SetFlashLatencyFromMSIRange+0xec>)
 800376e:	429c      	cmp	r4, r3
 8003770:	d90c      	bls.n	800378c <RCC_SetFlashLatencyFromMSIRange+0xac>
 8003772:	4b17      	ldr	r3, [pc, #92]	; (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xf0>)
 8003774:	429c      	cmp	r4, r3
 8003776:	d910      	bls.n	800379a <RCC_SetFlashLatencyFromMSIRange+0xba>
 8003778:	f503 0337 	add.w	r3, r3, #11993088	; 0xb70000
 800377c:	f503 53d8 	add.w	r3, r3, #6912	; 0x1b00
 8003780:	429c      	cmp	r4, r3
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003782:	bf98      	it	ls
 8003784:	2302      	movls	r3, #2
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003786:	d902      	bls.n	800378e <RCC_SetFlashLatencyFromMSIRange+0xae>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003788:	2500      	movs	r5, #0
 800378a:	e7d9      	b.n	8003740 <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800378c:	2300      	movs	r3, #0
        latency = FLASH_LATENCY_RANGE[index];
 800378e:	aa04      	add	r2, sp, #16
 8003790:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003794:	f853 5c0c 	ldr.w	r5, [r3, #-12]
        break;
 8003798:	e7d2      	b.n	8003740 <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800379a:	2301      	movs	r3, #1
 800379c:	e7f7      	b.n	800378e <RCC_SetFlashLatencyFromMSIRange+0xae>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800379e:	2300      	movs	r3, #0
        latency = FLASH_LATENCY_RANGE[index];
 80037a0:	aa04      	add	r2, sp, #16
 80037a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80037a6:	f853 5c0c 	ldr.w	r5, [r3, #-12]
        break;
 80037aa:	e7c9      	b.n	8003740 <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80037ac:	2301      	movs	r3, #1
 80037ae:	e7f7      	b.n	80037a0 <RCC_SetFlashLatencyFromMSIRange+0xc0>
    }
  }
  return HAL_OK;
 80037b0:	2000      	movs	r0, #0
}
 80037b2:	b004      	add	sp, #16
 80037b4:	bd70      	pop	{r4, r5, r6, pc}
 80037b6:	bf00      	nop
 80037b8:	08010dd8 	.word	0x08010dd8
 80037bc:	08010d78 	.word	0x08010d78
 80037c0:	08010d00 	.word	0x08010d00
 80037c4:	006acfc0 	.word	0x006acfc0
 80037c8:	58004000 	.word	0x58004000
 80037cc:	0121eabf 	.word	0x0121eabf
 80037d0:	0234933f 	.word	0x0234933f

080037d4 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80037d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037d8:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80037da:	68d2      	ldr	r2, [r2, #12]
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80037dc:	f013 030c 	ands.w	r3, r3, #12
 80037e0:	d015      	beq.n	800380e <HAL_RCC_GetSysClockFreq+0x3a>
 80037e2:	2b0c      	cmp	r3, #12
 80037e4:	d00c      	beq.n	8003800 <HAL_RCC_GetSysClockFreq+0x2c>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d04a      	beq.n	8003880 <HAL_RCC_GetSysClockFreq+0xac>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d14b      	bne.n	8003886 <HAL_RCC_GetSysClockFreq+0xb2>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80037ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 80037f8:	d048      	beq.n	800388c <HAL_RCC_GetSysClockFreq+0xb8>
  uint32_t msifreq = 0U;
 80037fa:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 80037fc:	4838      	ldr	r0, [pc, #224]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037fe:	e02d      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003800:	f002 0203 	and.w	r2, r2, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003804:	2a01      	cmp	r2, #1
 8003806:	d002      	beq.n	800380e <HAL_RCC_GetSysClockFreq+0x3a>
  uint32_t msifreq = 0U;
 8003808:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 800380a:	4610      	mov	r0, r2
 800380c:	e026      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x88>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800380e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	f012 0208 	ands.w	r2, r2, #8
 8003818:	d00d      	beq.n	8003836 <HAL_RCC_GetSysClockFreq+0x62>
 800381a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800381e:	6812      	ldr	r2, [r2, #0]
 8003820:	f012 0208 	ands.w	r2, r2, #8
 8003824:	d126      	bne.n	8003874 <HAL_RCC_GetSysClockFreq+0xa0>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003826:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800382a:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800382e:	492d      	ldr	r1, [pc, #180]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003830:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003834:	e00e      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x80>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003836:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800383a:	6809      	ldr	r1, [r1, #0]
 800383c:	f011 0f08 	tst.w	r1, #8
 8003840:	d114      	bne.n	800386c <HAL_RCC_GetSysClockFreq+0x98>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003842:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003846:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800384a:	f3c2 2203 	ubfx	r2, r2, #8, #4
 800384e:	4925      	ldr	r1, [pc, #148]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003850:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      sysclockfreq = msifreq;
 8003854:	2b00      	cmp	r3, #0
 8003856:	bf0c      	ite	eq
 8003858:	4610      	moveq	r0, r2
 800385a:	2000      	movne	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800385c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003866:	2b0c      	cmp	r3, #12
 8003868:	d012      	beq.n	8003890 <HAL_RCC_GetSysClockFreq+0xbc>
}
 800386a:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800386c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003870:	6809      	ldr	r1, [r1, #0]
 8003872:	e7ec      	b.n	800384e <HAL_RCC_GetSysClockFreq+0x7a>
 8003874:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003878:	6812      	ldr	r2, [r2, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800387a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800387e:	e7d6      	b.n	800382e <HAL_RCC_GetSysClockFreq+0x5a>
  uint32_t msifreq = 0U;
 8003880:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8003882:	4817      	ldr	r0, [pc, #92]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003884:	e7ea      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t msifreq = 0U;
 8003886:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8003888:	4610      	mov	r0, r2
 800388a:	e7e7      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x88>
      sysclockfreq = HSE_VALUE;
 800388c:	4816      	ldr	r0, [pc, #88]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800388e:	e7e5      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800389a:	2b02      	cmp	r3, #2
 800389c:	d01d      	beq.n	80038da <HAL_RCC_GetSysClockFreq+0x106>
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d108      	bne.n	80038b4 <HAL_RCC_GetSysClockFreq+0xe0>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80038a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a6:	681b      	ldr	r3, [r3, #0]
          pllinputfreq = HSE_VALUE / 2U;
 80038a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80038ac:	480e      	ldr	r0, [pc, #56]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x114>)
 80038ae:	4a0c      	ldr	r2, [pc, #48]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80038b0:	bf08      	it	eq
 80038b2:	4602      	moveq	r2, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80038b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b8:	68d8      	ldr	r0, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80038ba:	68d9      	ldr	r1, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80038bc:	68db      	ldr	r3, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80038be:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80038c2:	fb02 f000 	mul.w	r0, r2, r0
 80038c6:	f3c1 1202 	ubfx	r2, r1, #4, #3
 80038ca:	3201      	adds	r2, #1
 80038cc:	fbb0 f0f2 	udiv	r0, r0, r2
 80038d0:	0f5b      	lsrs	r3, r3, #29
 80038d2:	3301      	adds	r3, #1
 80038d4:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80038d8:	e7c7      	b.n	800386a <HAL_RCC_GetSysClockFreq+0x96>
        pllinputfreq = HSI_VALUE;
 80038da:	4a01      	ldr	r2, [pc, #4]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80038dc:	e7ea      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0xe0>
 80038de:	bf00      	nop
 80038e0:	00f42400 	.word	0x00f42400
 80038e4:	08010dd8 	.word	0x08010dd8
 80038e8:	01e84800 	.word	0x01e84800

080038ec <HAL_RCC_GetHCLKFreq>:
{
 80038ec:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80038ee:	f7ff ff71 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80038f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80038fc:	4a02      	ldr	r2, [pc, #8]	; (8003908 <HAL_RCC_GetHCLKFreq+0x1c>)
 80038fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8003902:	fbb0 f0f3 	udiv	r0, r0, r3
 8003906:	bd08      	pop	{r3, pc}
 8003908:	08010d78 	.word	0x08010d78

0800390c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800390c:	2800      	cmp	r0, #0
 800390e:	f000 8314 	beq.w	8003f3a <HAL_RCC_OscConfig+0x62e>
{
 8003912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003916:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800391c:	689d      	ldr	r5, [r3, #8]
 800391e:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003922:	68de      	ldr	r6, [r3, #12]
 8003924:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003928:	6803      	ldr	r3, [r0, #0]
 800392a:	f013 0f20 	tst.w	r3, #32
 800392e:	f000 808b 	beq.w	8003a48 <HAL_RCC_OscConfig+0x13c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003932:	b1f5      	cbz	r5, 8003972 <HAL_RCC_OscConfig+0x66>
 8003934:	2d0c      	cmp	r5, #12
 8003936:	d01a      	beq.n	800396e <HAL_RCC_OscConfig+0x62>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003938:	6a23      	ldr	r3, [r4, #32]
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80b9 	beq.w	8003ab2 <HAL_RCC_OscConfig+0x1a6>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003940:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003944:	6813      	ldr	r3, [r2, #0]
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800394c:	f7fd fe4c 	bl	80015e8 <HAL_GetTick>
 8003950:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003952:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
 8003956:	f8d8 3000 	ldr.w	r3, [r8]
 800395a:	f013 0f02 	tst.w	r3, #2
 800395e:	d160      	bne.n	8003a22 <HAL_RCC_OscConfig+0x116>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003960:	f7fd fe42 	bl	80015e8 <HAL_GetTick>
 8003964:	1bc0      	subs	r0, r0, r7
 8003966:	2802      	cmp	r0, #2
 8003968:	d9f5      	bls.n	8003956 <HAL_RCC_OscConfig+0x4a>
            return HAL_TIMEOUT;
 800396a:	2003      	movs	r0, #3
 800396c:	e2f2      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800396e:	2e01      	cmp	r6, #1
 8003970:	d1e2      	bne.n	8003938 <HAL_RCC_OscConfig+0x2c>
 8003972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f013 0f02 	tst.w	r3, #2
 800397c:	d003      	beq.n	8003986 <HAL_RCC_OscConfig+0x7a>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800397e:	6a23      	ldr	r3, [r4, #32]
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 82dc 	beq.w	8003f3e <HAL_RCC_OscConfig+0x632>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003986:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f013 0f08 	tst.w	r3, #8
 8003992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003996:	bf12      	itee	ne
 8003998:	681b      	ldrne	r3, [r3, #0]
 800399a:	f8d3 3094 	ldreq.w	r3, [r3, #148]	; 0x94
 800399e:	091b      	lsreq	r3, r3, #4
 80039a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a4:	4298      	cmp	r0, r3
 80039a6:	d922      	bls.n	80039ee <HAL_RCC_OscConfig+0xe2>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039a8:	f7ff fe9a 	bl	80036e0 <RCC_SetFlashLatencyFromMSIRange>
 80039ac:	2800      	cmp	r0, #0
 80039ae:	f040 82c8 	bne.w	8003f42 <HAL_RCC_OscConfig+0x636>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	f042 0208 	orr.w	r2, r2, #8
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80039c4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80039c6:	430a      	orrs	r2, r1
 80039c8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80039ce:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80039d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80039d6:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80039d8:	f7ff ff88 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 80039dc:	4bad      	ldr	r3, [pc, #692]	; (8003c94 <HAL_RCC_OscConfig+0x388>)
 80039de:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80039e0:	4bad      	ldr	r3, [pc, #692]	; (8003c98 <HAL_RCC_OscConfig+0x38c>)
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	f7fd fdfe 	bl	80015e4 <HAL_InitTick>
        if (status != HAL_OK)
 80039e8:	2800      	cmp	r0, #0
 80039ea:	d02d      	beq.n	8003a48 <HAL_RCC_OscConfig+0x13c>
 80039ec:	e2b2      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	f042 0208 	orr.w	r2, r2, #8
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003a00:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003a02:	430a      	orrs	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003a0a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003a0e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003a12:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a14:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003a16:	f7ff fe63 	bl	80036e0 <RCC_SetFlashLatencyFromMSIRange>
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d0dc      	beq.n	80039d8 <HAL_RCC_OscConfig+0xcc>
            return HAL_ERROR;
 8003a1e:	2001      	movs	r0, #1
 8003a20:	e298      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	f042 0208 	orr.w	r2, r2, #8
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003a34:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003a36:	430a      	orrs	r2, r1
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003a3e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003a42:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003a46:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	f013 0f01 	tst.w	r3, #1
 8003a4e:	d053      	beq.n	8003af8 <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003a50:	2d08      	cmp	r5, #8
 8003a52:	d047      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x1d8>
 8003a54:	2d0c      	cmp	r5, #12
 8003a56:	d043      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x1d4>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8003a58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a5c:	6813      	ldr	r3, [r2, #0]
 8003a5e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003a62:	68a1      	ldr	r1, [r4, #8]
 8003a64:	430b      	orrs	r3, r1
 8003a66:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a68:	6863      	ldr	r3, [r4, #4]
 8003a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6e:	d065      	beq.n	8003b3c <HAL_RCC_OscConfig+0x230>
 8003a70:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003a74:	d067      	beq.n	8003b46 <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a80:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003a88:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a8a:	6863      	ldr	r3, [r4, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d065      	beq.n	8003b5c <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 8003a90:	f7fd fdaa 	bl	80015e8 <HAL_GetTick>
 8003a94:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003a96:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
 8003a9a:	f8d8 3000 	ldr.w	r3, [r8]
 8003a9e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003aa2:	d129      	bne.n	8003af8 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa4:	f7fd fda0 	bl	80015e8 <HAL_GetTick>
 8003aa8:	1bc0      	subs	r0, r0, r7
 8003aaa:	2864      	cmp	r0, #100	; 0x64
 8003aac:	d9f5      	bls.n	8003a9a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8003aae:	2003      	movs	r0, #3
 8003ab0:	e250      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003ab2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ab6:	6813      	ldr	r3, [r2, #0]
 8003ab8:	f023 0301 	bic.w	r3, r3, #1
 8003abc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003abe:	f7fd fd93 	bl	80015e8 <HAL_GetTick>
 8003ac2:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003ac4:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
 8003ac8:	f8d8 3000 	ldr.w	r3, [r8]
 8003acc:	f013 0f02 	tst.w	r3, #2
 8003ad0:	d0ba      	beq.n	8003a48 <HAL_RCC_OscConfig+0x13c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ad2:	f7fd fd89 	bl	80015e8 <HAL_GetTick>
 8003ad6:	1bc0      	subs	r0, r0, r7
 8003ad8:	2802      	cmp	r0, #2
 8003ada:	d9f5      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 8003adc:	2003      	movs	r0, #3
 8003ade:	e239      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ae0:	2e03      	cmp	r6, #3
 8003ae2:	d1b9      	bne.n	8003a58 <HAL_RCC_OscConfig+0x14c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003aee:	d003      	beq.n	8003af8 <HAL_RCC_OscConfig+0x1ec>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af0:	6863      	ldr	r3, [r4, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 8227 	beq.w	8003f46 <HAL_RCC_OscConfig+0x63a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	f013 0f02 	tst.w	r3, #2
 8003afe:	d053      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003b00:	2d04      	cmp	r5, #4
 8003b02:	d03e      	beq.n	8003b82 <HAL_RCC_OscConfig+0x276>
 8003b04:	2d0c      	cmp	r5, #12
 8003b06:	d03a      	beq.n	8003b7e <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b08:	6923      	ldr	r3, [r4, #16]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 8092 	beq.w	8003c34 <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003b10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b14:	6813      	ldr	r3, [r2, #0]
 8003b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003b1c:	f7fd fd64 	bl	80015e8 <HAL_GetTick>
 8003b20:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003b22:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003b2c:	d178      	bne.n	8003c20 <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b2e:	f7fd fd5b 	bl	80015e8 <HAL_GetTick>
 8003b32:	1b80      	subs	r0, r0, r6
 8003b34:	2802      	cmp	r0, #2
 8003b36:	d9f6      	bls.n	8003b26 <HAL_RCC_OscConfig+0x21a>
            return HAL_TIMEOUT;
 8003b38:	2003      	movs	r0, #3
 8003b3a:	e20b      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003b3c:	6813      	ldr	r3, [r2, #0]
 8003b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b42:	6013      	str	r3, [r2, #0]
}
 8003b44:	e7a1      	b.n	8003a8a <HAL_RCC_OscConfig+0x17e>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003b50:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b58:	601a      	str	r2, [r3, #0]
}
 8003b5a:	e796      	b.n	8003a8a <HAL_RCC_OscConfig+0x17e>
        tickstart = HAL_GetTick();
 8003b5c:	f7fd fd44 	bl	80015e8 <HAL_GetTick>
 8003b60:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003b62:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
 8003b66:	f8d8 3000 	ldr.w	r3, [r8]
 8003b6a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003b6e:	d0c3      	beq.n	8003af8 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b70:	f7fd fd3a 	bl	80015e8 <HAL_GetTick>
 8003b74:	1bc0      	subs	r0, r0, r7
 8003b76:	2864      	cmp	r0, #100	; 0x64
 8003b78:	d9f5      	bls.n	8003b66 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8003b7a:	2003      	movs	r0, #3
 8003b7c:	e1ea      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b7e:	2e02      	cmp	r6, #2
 8003b80:	d1c2      	bne.n	8003b08 <HAL_RCC_OscConfig+0x1fc>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003b8c:	d003      	beq.n	8003b96 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b8e:	6923      	ldr	r3, [r4, #16]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 81da 	beq.w	8003f4a <HAL_RCC_OscConfig+0x63e>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b9a:	6853      	ldr	r3, [r2, #4]
 8003b9c:	6961      	ldr	r1, [r4, #20]
 8003b9e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003ba2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003ba6:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ba8:	6823      	ldr	r3, [r4, #0]
 8003baa:	f013 0f08 	tst.w	r3, #8
 8003bae:	f000 808e 	beq.w	8003cce <HAL_RCC_OscConfig+0x3c2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bb2:	69a3      	ldr	r3, [r4, #24]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d071      	beq.n	8003c9c <HAL_RCC_OscConfig+0x390>
      uint32_t csr_temp = RCC->CSR;
 8003bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003bc0:	f003 0210 	and.w	r2, r3, #16
 8003bc4:	69e1      	ldr	r1, [r4, #28]
 8003bc6:	4291      	cmp	r1, r2
 8003bc8:	d011      	beq.n	8003bee <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003bca:	f003 0203 	and.w	r2, r3, #3
 8003bce:	2a02      	cmp	r2, #2
 8003bd0:	f000 81bd 	beq.w	8003f4e <HAL_RCC_OscConfig+0x642>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003bd4:	f013 0f01 	tst.w	r3, #1
 8003bd8:	d142      	bne.n	8003c60 <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8003bda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bde:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003be2:	f023 0310 	bic.w	r3, r3, #16
 8003be6:	69e1      	ldr	r1, [r4, #28]
 8003be8:	430b      	orrs	r3, r1
 8003bea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8003bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bf2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003bfe:	f7fd fcf3 	bl	80015e8 <HAL_GetTick>
 8003c02:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003c04:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8003c08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c0c:	f013 0f02 	tst.w	r3, #2
 8003c10:	d15d      	bne.n	8003cce <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c12:	f7fd fce9 	bl	80015e8 <HAL_GetTick>
 8003c16:	1b80      	subs	r0, r0, r6
 8003c18:	2811      	cmp	r0, #17
 8003c1a:	d9f5      	bls.n	8003c08 <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 8003c1c:	2003      	movs	r0, #3
 8003c1e:	e199      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003c20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c24:	6853      	ldr	r3, [r2, #4]
 8003c26:	6961      	ldr	r1, [r4, #20]
 8003c28:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003c2c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003c30:	6053      	str	r3, [r2, #4]
}
 8003c32:	e7b9      	b.n	8003ba8 <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003c34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c38:	6813      	ldr	r3, [r2, #0]
 8003c3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c3e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003c40:	f7fd fcd2 	bl	80015e8 <HAL_GetTick>
 8003c44:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003c46:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003c50:	d0aa      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c52:	f7fd fcc9 	bl	80015e8 <HAL_GetTick>
 8003c56:	1b80      	subs	r0, r0, r6
 8003c58:	2802      	cmp	r0, #2
 8003c5a:	d9f6      	bls.n	8003c4a <HAL_RCC_OscConfig+0x33e>
            return HAL_TIMEOUT;
 8003c5c:	2003      	movs	r0, #3
 8003c5e:	e179      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003c60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c64:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003c68:	f023 0301 	bic.w	r3, r3, #1
 8003c6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8003c70:	f7fd fcba 	bl	80015e8 <HAL_GetTick>
 8003c74:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003c76:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8003c7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c7e:	f013 0f02 	tst.w	r3, #2
 8003c82:	d0aa      	beq.n	8003bda <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c84:	f7fd fcb0 	bl	80015e8 <HAL_GetTick>
 8003c88:	1b80      	subs	r0, r0, r6
 8003c8a:	2811      	cmp	r0, #17
 8003c8c:	d9f5      	bls.n	8003c7a <HAL_RCC_OscConfig+0x36e>
              return HAL_TIMEOUT;
 8003c8e:	2003      	movs	r0, #3
 8003c90:	e160      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
 8003c92:	bf00      	nop
 8003c94:	20000000 	.word	0x20000000
 8003c98:	20000008 	.word	0x20000008
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003c9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ca0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003cac:	f7fd fc9c 	bl	80015e8 <HAL_GetTick>
 8003cb0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003cb2:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8003cb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003cba:	f013 0f02 	tst.w	r3, #2
 8003cbe:	d006      	beq.n	8003cce <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc0:	f7fd fc92 	bl	80015e8 <HAL_GetTick>
 8003cc4:	1b80      	subs	r0, r0, r6
 8003cc6:	2811      	cmp	r0, #17
 8003cc8:	d9f5      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x3aa>
          return HAL_TIMEOUT;
 8003cca:	2003      	movs	r0, #3
 8003ccc:	e142      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	f013 0f04 	tst.w	r3, #4
 8003cd4:	f000 80ac 	beq.w	8003e30 <HAL_RCC_OscConfig+0x524>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003cd8:	4ba5      	ldr	r3, [pc, #660]	; (8003f70 <HAL_RCC_OscConfig+0x664>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ce0:	d110      	bne.n	8003d04 <HAL_RCC_OscConfig+0x3f8>
      HAL_PWR_EnableBkUpAccess();
 8003ce2:	f7ff fc73 	bl	80035cc <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8003ce6:	f7fd fc7f 	bl	80015e8 <HAL_GetTick>
 8003cea:	4606      	mov	r6, r0
 8003cec:	4fa0      	ldr	r7, [pc, #640]	; (8003f70 <HAL_RCC_OscConfig+0x664>)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003cf4:	d106      	bne.n	8003d04 <HAL_RCC_OscConfig+0x3f8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf6:	f7fd fc77 	bl	80015e8 <HAL_GetTick>
 8003cfa:	1b80      	subs	r0, r0, r6
 8003cfc:	2802      	cmp	r0, #2
 8003cfe:	d9f6      	bls.n	8003cee <HAL_RCC_OscConfig+0x3e2>
          return HAL_TIMEOUT;
 8003d00:	2003      	movs	r0, #3
 8003d02:	e127      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d04:	68e3      	ldr	r3, [r4, #12]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d05e      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x4bc>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d0e:	2b05      	cmp	r3, #5
 8003d10:	d107      	bne.n	8003d22 <HAL_RCC_OscConfig+0x416>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d16:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003d1a:	f043 0304 	orr.w	r3, r3, #4
 8003d1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8003d22:	f7fd fc61 	bl	80015e8 <HAL_GetTick>
 8003d26:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d2c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d38:	4617      	mov	r7, r2
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3a:	f241 3888 	movw	r8, #5000	; 0x1388
 8003d3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d42:	f013 0f02 	tst.w	r3, #2
 8003d46:	d106      	bne.n	8003d56 <HAL_RCC_OscConfig+0x44a>
 8003d48:	f7fd fc4e 	bl	80015e8 <HAL_GetTick>
 8003d4c:	1b80      	subs	r0, r0, r6
 8003d4e:	4540      	cmp	r0, r8
 8003d50:	d9f5      	bls.n	8003d3e <HAL_RCC_OscConfig+0x432>
          return HAL_TIMEOUT;
 8003d52:	2003      	movs	r0, #3
 8003d54:	e0fe      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003d56:	68e3      	ldr	r3, [r4, #12]
 8003d58:	f023 0304 	bic.w	r3, r3, #4
 8003d5c:	2b81      	cmp	r3, #129	; 0x81
 8003d5e:	d019      	beq.n	8003d94 <HAL_RCC_OscConfig+0x488>
        tickstart = HAL_GetTick();
 8003d60:	f7fd fc42 	bl	80015e8 <HAL_GetTick>
 8003d64:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003d66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d6a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d76:	4617      	mov	r7, r2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d78:	f241 3888 	movw	r8, #5000	; 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d80:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003d84:	d054      	beq.n	8003e30 <HAL_RCC_OscConfig+0x524>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d86:	f7fd fc2f 	bl	80015e8 <HAL_GetTick>
 8003d8a:	1b80      	subs	r0, r0, r6
 8003d8c:	4540      	cmp	r0, r8
 8003d8e:	d9f5      	bls.n	8003d7c <HAL_RCC_OscConfig+0x470>
            return HAL_TIMEOUT;
 8003d90:	2003      	movs	r0, #3
 8003d92:	e0df      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
        tickstart = HAL_GetTick();
 8003d94:	f7fd fc28 	bl	80015e8 <HAL_GetTick>
 8003d98:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003d9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d9e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003daa:	4617      	mov	r7, r2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dac:	f241 3888 	movw	r8, #5000	; 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003db0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003db4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003db8:	d13a      	bne.n	8003e30 <HAL_RCC_OscConfig+0x524>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dba:	f7fd fc15 	bl	80015e8 <HAL_GetTick>
 8003dbe:	1b80      	subs	r0, r0, r6
 8003dc0:	4540      	cmp	r0, r8
 8003dc2:	d9f5      	bls.n	8003db0 <HAL_RCC_OscConfig+0x4a4>
            return HAL_TIMEOUT;
 8003dc4:	2003      	movs	r0, #3
 8003dc6:	e0c5      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
      tickstart = HAL_GetTick();
 8003dc8:	f7fd fc0e 	bl	80015e8 <HAL_GetTick>
 8003dcc:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003dce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dd2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003dde:	4617      	mov	r7, r2
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de0:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003de4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003de8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003dec:	d006      	beq.n	8003dfc <HAL_RCC_OscConfig+0x4f0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fd fbfb 	bl	80015e8 <HAL_GetTick>
 8003df2:	1b80      	subs	r0, r0, r6
 8003df4:	4540      	cmp	r0, r8
 8003df6:	d9f5      	bls.n	8003de4 <HAL_RCC_OscConfig+0x4d8>
          return HAL_TIMEOUT;
 8003df8:	2003      	movs	r0, #3
 8003dfa:	e0ab      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
      tickstart = HAL_GetTick();
 8003dfc:	f7fd fbf4 	bl	80015e8 <HAL_GetTick>
 8003e00:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e06:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003e0a:	f023 0301 	bic.w	r3, r3, #1
 8003e0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e12:	4617      	mov	r7, r2
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e14:	f241 3888 	movw	r8, #5000	; 0x1388
 8003e18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e1c:	f013 0f02 	tst.w	r3, #2
 8003e20:	d006      	beq.n	8003e30 <HAL_RCC_OscConfig+0x524>
 8003e22:	f7fd fbe1 	bl	80015e8 <HAL_GetTick>
 8003e26:	1b80      	subs	r0, r0, r6
 8003e28:	4540      	cmp	r0, r8
 8003e2a:	d9f5      	bls.n	8003e18 <HAL_RCC_OscConfig+0x50c>
          return HAL_TIMEOUT;
 8003e2c:	2003      	movs	r0, #3
 8003e2e:	e091      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 808d 	beq.w	8003f52 <HAL_RCC_OscConfig+0x646>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e38:	2d0c      	cmp	r5, #12
 8003e3a:	d062      	beq.n	8003f02 <HAL_RCC_OscConfig+0x5f6>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d01f      	beq.n	8003e80 <HAL_RCC_OscConfig+0x574>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003e4a:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	f022 0203 	bic.w	r2, r2, #3
 8003e52:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8003e5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e5e:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8003e60:	f7fd fbc2 	bl	80015e8 <HAL_GetTick>
 8003e64:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003e66:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8003e6a:	682b      	ldr	r3, [r5, #0]
 8003e6c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003e70:	d074      	beq.n	8003f5c <HAL_RCC_OscConfig+0x650>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e72:	f7fd fbb9 	bl	80015e8 <HAL_GetTick>
 8003e76:	1b00      	subs	r0, r0, r4
 8003e78:	280a      	cmp	r0, #10
 8003e7a:	d9f6      	bls.n	8003e6a <HAL_RCC_OscConfig+0x55e>
            return HAL_TIMEOUT;
 8003e7c:	2003      	movs	r0, #3
 8003e7e:	e069      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003e80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e84:	6813      	ldr	r3, [r2, #0]
 8003e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e8a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003e8c:	f7fd fbac 	bl	80015e8 <HAL_GetTick>
 8003e90:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003e92:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8003e96:	6833      	ldr	r3, [r6, #0]
 8003e98:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003e9c:	d12a      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x5e8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ea2:	68d0      	ldr	r0, [r2, #12]
 8003ea4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ea6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ea8:	430b      	orrs	r3, r1
 8003eaa:	4932      	ldr	r1, [pc, #200]	; (8003f74 <HAL_RCC_OscConfig+0x668>)
 8003eac:	4001      	ands	r1, r0
 8003eae:	430b      	orrs	r3, r1
 8003eb0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003eb2:	430b      	orrs	r3, r1
 8003eb4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003eb6:	430b      	orrs	r3, r1
 8003eb8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003ebe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003ec2:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003ec4:	6813      	ldr	r3, [r2, #0]
 8003ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eca:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ecc:	68d3      	ldr	r3, [r2, #12]
 8003ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8003ed4:	f7fd fb88 	bl	80015e8 <HAL_GetTick>
 8003ed8:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003eda:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8003ede:	682b      	ldr	r3, [r5, #0]
 8003ee0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003ee4:	d138      	bne.n	8003f58 <HAL_RCC_OscConfig+0x64c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee6:	f7fd fb7f 	bl	80015e8 <HAL_GetTick>
 8003eea:	1b00      	subs	r0, r0, r4
 8003eec:	280a      	cmp	r0, #10
 8003eee:	d9f6      	bls.n	8003ede <HAL_RCC_OscConfig+0x5d2>
            return HAL_TIMEOUT;
 8003ef0:	2003      	movs	r0, #3
 8003ef2:	e02f      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef4:	f7fd fb78 	bl	80015e8 <HAL_GetTick>
 8003ef8:	1b40      	subs	r0, r0, r5
 8003efa:	280a      	cmp	r0, #10
 8003efc:	d9cb      	bls.n	8003e96 <HAL_RCC_OscConfig+0x58a>
            return HAL_TIMEOUT;
 8003efe:	2003      	movs	r0, #3
 8003f00:	e028      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d02c      	beq.n	8003f60 <HAL_RCC_OscConfig+0x654>
        pll_config = RCC->PLLCFGR;
 8003f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f0a:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003f0c:	f003 0103 	and.w	r1, r3, #3
 8003f10:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003f12:	4291      	cmp	r1, r2
 8003f14:	d126      	bne.n	8003f64 <HAL_RCC_OscConfig+0x658>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003f16:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f1c:	428a      	cmp	r2, r1
 8003f1e:	d123      	bne.n	8003f68 <HAL_RCC_OscConfig+0x65c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003f20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f24:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003f26:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003f2a:	d11f      	bne.n	8003f6c <HAL_RCC_OscConfig+0x660>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003f2c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8003f30:	6c60      	ldr	r0, [r4, #68]	; 0x44
        return HAL_ERROR;
 8003f32:	1a18      	subs	r0, r3, r0
 8003f34:	bf18      	it	ne
 8003f36:	2001      	movne	r0, #1
 8003f38:	e00c      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
    return HAL_ERROR;
 8003f3a:	2001      	movs	r0, #1
}
 8003f3c:	4770      	bx	lr
        return HAL_ERROR;
 8003f3e:	2001      	movs	r0, #1
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
            return HAL_ERROR;
 8003f42:	2001      	movs	r0, #1
 8003f44:	e006      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 8003f46:	2001      	movs	r0, #1
 8003f48:	e004      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 8003f4a:	2001      	movs	r0, #1
 8003f4c:	e002      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
          return HAL_ERROR;
 8003f4e:	2001      	movs	r0, #1
 8003f50:	e000      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
  return HAL_OK;
 8003f52:	2000      	movs	r0, #0
}
 8003f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8003f58:	2000      	movs	r0, #0
 8003f5a:	e7fb      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	e7f9      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 8003f60:	2001      	movs	r0, #1
 8003f62:	e7f7      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
          return HAL_ERROR;
 8003f64:	2001      	movs	r0, #1
 8003f66:	e7f5      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
 8003f68:	2001      	movs	r0, #1
 8003f6a:	e7f3      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
 8003f6c:	2001      	movs	r0, #1
 8003f6e:	e7f1      	b.n	8003f54 <HAL_RCC_OscConfig+0x648>
 8003f70:	58000400 	.word	0x58000400
 8003f74:	11c1808c 	.word	0x11c1808c

08003f78 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003f78:	2800      	cmp	r0, #0
 8003f7a:	f000 8106 	beq.w	800418a <HAL_RCC_ClockConfig+0x212>
{
 8003f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f82:	460c      	mov	r4, r1
 8003f84:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f86:	4b83      	ldr	r3, [pc, #524]	; (8004194 <HAL_RCC_ClockConfig+0x21c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	428b      	cmp	r3, r1
 8003f90:	d327      	bcc.n	8003fe2 <HAL_RCC_ClockConfig+0x6a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f92:	682b      	ldr	r3, [r5, #0]
 8003f94:	f013 0f02 	tst.w	r3, #2
 8003f98:	d139      	bne.n	800400e <HAL_RCC_ClockConfig+0x96>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003f9a:	682b      	ldr	r3, [r5, #0]
 8003f9c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003fa0:	d14d      	bne.n	800403e <HAL_RCC_ClockConfig+0xc6>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa2:	682b      	ldr	r3, [r5, #0]
 8003fa4:	f013 0f04 	tst.w	r3, #4
 8003fa8:	d165      	bne.n	8004076 <HAL_RCC_ClockConfig+0xfe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003faa:	682b      	ldr	r3, [r5, #0]
 8003fac:	f013 0f08 	tst.w	r3, #8
 8003fb0:	d179      	bne.n	80040a6 <HAL_RCC_ClockConfig+0x12e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fb2:	682b      	ldr	r3, [r5, #0]
 8003fb4:	f013 0f01 	tst.w	r3, #1
 8003fb8:	f000 80c1 	beq.w	800413e <HAL_RCC_ClockConfig+0x1c6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fbc:	686b      	ldr	r3, [r5, #4]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	f000 808b 	beq.w	80040da <HAL_RCC_ClockConfig+0x162>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	f000 8090 	beq.w	80040ea <HAL_RCC_ClockConfig+0x172>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f040 8095 	bne.w	80040fa <HAL_RCC_ClockConfig+0x182>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003fd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fd4:	6812      	ldr	r2, [r2, #0]
 8003fd6:	f012 0f02 	tst.w	r2, #2
 8003fda:	f040 8094 	bne.w	8004106 <HAL_RCC_ClockConfig+0x18e>
        return HAL_ERROR;
 8003fde:	2001      	movs	r0, #1
 8003fe0:	e0d1      	b.n	8004186 <HAL_RCC_ClockConfig+0x20e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe2:	4a6c      	ldr	r2, [pc, #432]	; (8004194 <HAL_RCC_ClockConfig+0x21c>)
 8003fe4:	6813      	ldr	r3, [r2, #0]
 8003fe6:	f023 0307 	bic.w	r3, r3, #7
 8003fea:	430b      	orrs	r3, r1
 8003fec:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003fee:	f7fd fafb 	bl	80015e8 <HAL_GetTick>
 8003ff2:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff4:	4f67      	ldr	r7, [pc, #412]	; (8004194 <HAL_RCC_ClockConfig+0x21c>)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	42a3      	cmp	r3, r4
 8003ffe:	d0c8      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004000:	f7fd faf2 	bl	80015e8 <HAL_GetTick>
 8004004:	1b80      	subs	r0, r0, r6
 8004006:	2802      	cmp	r0, #2
 8004008:	d9f5      	bls.n	8003ff6 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 800400a:	2003      	movs	r0, #3
 800400c:	e0bb      	b.n	8004186 <HAL_RCC_ClockConfig+0x20e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800400e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004012:	6893      	ldr	r3, [r2, #8]
 8004014:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004018:	68a9      	ldr	r1, [r5, #8]
 800401a:	430b      	orrs	r3, r1
 800401c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800401e:	f7fd fae3 	bl	80015e8 <HAL_GetTick>
 8004022:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004024:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800402e:	d1b4      	bne.n	8003f9a <HAL_RCC_ClockConfig+0x22>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004030:	f7fd fada 	bl	80015e8 <HAL_GetTick>
 8004034:	1b80      	subs	r0, r0, r6
 8004036:	2802      	cmp	r0, #2
 8004038:	d9f6      	bls.n	8004028 <HAL_RCC_ClockConfig+0xb0>
        return HAL_TIMEOUT;
 800403a:	2003      	movs	r0, #3
 800403c:	e0a3      	b.n	8004186 <HAL_RCC_ClockConfig+0x20e>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800403e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004042:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8004046:	6969      	ldr	r1, [r5, #20]
 8004048:	f023 030f 	bic.w	r3, r3, #15
 800404c:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8004050:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004054:	f7fd fac8 	bl	80015e8 <HAL_GetTick>
 8004058:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800405a:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 800405e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004062:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004066:	d19c      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0x2a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004068:	f7fd fabe 	bl	80015e8 <HAL_GetTick>
 800406c:	1b80      	subs	r0, r0, r6
 800406e:	2802      	cmp	r0, #2
 8004070:	d9f5      	bls.n	800405e <HAL_RCC_ClockConfig+0xe6>
        return HAL_TIMEOUT;
 8004072:	2003      	movs	r0, #3
 8004074:	e087      	b.n	8004186 <HAL_RCC_ClockConfig+0x20e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004076:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800407a:	6893      	ldr	r3, [r2, #8]
 800407c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004080:	68e9      	ldr	r1, [r5, #12]
 8004082:	430b      	orrs	r3, r1
 8004084:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004086:	f7fd faaf 	bl	80015e8 <HAL_GetTick>
 800408a:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800408c:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004096:	d188      	bne.n	8003faa <HAL_RCC_ClockConfig+0x32>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004098:	f7fd faa6 	bl	80015e8 <HAL_GetTick>
 800409c:	1b80      	subs	r0, r0, r6
 800409e:	2802      	cmp	r0, #2
 80040a0:	d9f6      	bls.n	8004090 <HAL_RCC_ClockConfig+0x118>
        return HAL_TIMEOUT;
 80040a2:	2003      	movs	r0, #3
 80040a4:	e06f      	b.n	8004186 <HAL_RCC_ClockConfig+0x20e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80040a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040aa:	6893      	ldr	r3, [r2, #8]
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80040ac:	6929      	ldr	r1, [r5, #16]
 80040ae:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80040b2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80040b6:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80040b8:	f7fd fa96 	bl	80015e8 <HAL_GetTick>
 80040bc:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80040be:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80040c8:	f47f af73 	bne.w	8003fb2 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80040cc:	f7fd fa8c 	bl	80015e8 <HAL_GetTick>
 80040d0:	1b80      	subs	r0, r0, r6
 80040d2:	2802      	cmp	r0, #2
 80040d4:	d9f5      	bls.n	80040c2 <HAL_RCC_ClockConfig+0x14a>
        return HAL_TIMEOUT;
 80040d6:	2003      	movs	r0, #3
 80040d8:	e055      	b.n	8004186 <HAL_RCC_ClockConfig+0x20e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80040da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80040e4:	d10f      	bne.n	8004106 <HAL_RCC_ClockConfig+0x18e>
        return HAL_ERROR;
 80040e6:	2001      	movs	r0, #1
 80040e8:	e04d      	b.n	8004186 <HAL_RCC_ClockConfig+0x20e>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80040ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040ee:	6812      	ldr	r2, [r2, #0]
 80040f0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80040f4:	d107      	bne.n	8004106 <HAL_RCC_ClockConfig+0x18e>
        return HAL_ERROR;
 80040f6:	2001      	movs	r0, #1
 80040f8:	e045      	b.n	8004186 <HAL_RCC_ClockConfig+0x20e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80040fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040fe:	6812      	ldr	r2, [r2, #0]
 8004100:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004104:	d043      	beq.n	800418e <HAL_RCC_ClockConfig+0x216>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800410a:	688a      	ldr	r2, [r1, #8]
 800410c:	f022 0203 	bic.w	r2, r2, #3
 8004110:	4313      	orrs	r3, r2
 8004112:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004114:	f7fd fa68 	bl	80015e8 <HAL_GetTick>
 8004118:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800411a:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800411e:	f241 3888 	movw	r8, #5000	; 0x1388
 8004122:	68bb      	ldr	r3, [r7, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004124:	686a      	ldr	r2, [r5, #4]
 8004126:	f003 030c 	and.w	r3, r3, #12
 800412a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800412e:	d006      	beq.n	800413e <HAL_RCC_ClockConfig+0x1c6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004130:	f7fd fa5a 	bl	80015e8 <HAL_GetTick>
 8004134:	1b80      	subs	r0, r0, r6
 8004136:	4540      	cmp	r0, r8
 8004138:	d9f3      	bls.n	8004122 <HAL_RCC_ClockConfig+0x1aa>
        return HAL_TIMEOUT;
 800413a:	2003      	movs	r0, #3
 800413c:	e023      	b.n	8004186 <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800413e:	4b15      	ldr	r3, [pc, #84]	; (8004194 <HAL_RCC_ClockConfig+0x21c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	42a3      	cmp	r3, r4
 8004148:	d915      	bls.n	8004176 <HAL_RCC_ClockConfig+0x1fe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414a:	4a12      	ldr	r2, [pc, #72]	; (8004194 <HAL_RCC_ClockConfig+0x21c>)
 800414c:	6813      	ldr	r3, [r2, #0]
 800414e:	f023 0307 	bic.w	r3, r3, #7
 8004152:	4323      	orrs	r3, r4
 8004154:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004156:	f7fd fa47 	bl	80015e8 <HAL_GetTick>
 800415a:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800415c:	4e0d      	ldr	r6, [pc, #52]	; (8004194 <HAL_RCC_ClockConfig+0x21c>)
 800415e:	6833      	ldr	r3, [r6, #0]
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	42a3      	cmp	r3, r4
 8004166:	d006      	beq.n	8004176 <HAL_RCC_ClockConfig+0x1fe>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004168:	f7fd fa3e 	bl	80015e8 <HAL_GetTick>
 800416c:	1b40      	subs	r0, r0, r5
 800416e:	2802      	cmp	r0, #2
 8004170:	d9f5      	bls.n	800415e <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8004172:	2003      	movs	r0, #3
 8004174:	e007      	b.n	8004186 <HAL_RCC_ClockConfig+0x20e>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004176:	f7ff fbb9 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 800417a:	4b07      	ldr	r3, [pc, #28]	; (8004198 <HAL_RCC_ClockConfig+0x220>)
 800417c:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800417e:	4b07      	ldr	r3, [pc, #28]	; (800419c <HAL_RCC_ClockConfig+0x224>)
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	f7fd fa2f 	bl	80015e4 <HAL_InitTick>
}
 8004186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800418a:	2001      	movs	r0, #1
}
 800418c:	4770      	bx	lr
        return HAL_ERROR;
 800418e:	2001      	movs	r0, #1
 8004190:	e7f9      	b.n	8004186 <HAL_RCC_ClockConfig+0x20e>
 8004192:	bf00      	nop
 8004194:	58004000 	.word	0x58004000
 8004198:	20000000 	.word	0x20000000
 800419c:	20000008 	.word	0x20000008

080041a0 <HAL_RCC_GetPCLK1Freq>:
{
 80041a0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80041a2:	f7ff fba3 	bl	80038ec <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80041a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80041b0:	4a02      	ldr	r2, [pc, #8]	; (80041bc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80041b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80041b6:	40d8      	lsrs	r0, r3
 80041b8:	bd08      	pop	{r3, pc}
 80041ba:	bf00      	nop
 80041bc:	08010db8 	.word	0x08010db8

080041c0 <HAL_RCC_GetPCLK2Freq>:
{
 80041c0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80041c2:	f7ff fb93 	bl	80038ec <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80041c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80041d0:	4a02      	ldr	r2, [pc, #8]	; (80041dc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80041d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80041d6:	40d8      	lsrs	r0, r3
 80041d8:	bd08      	pop	{r3, pc}
 80041da:	bf00      	nop
 80041dc:	08010db8 	.word	0x08010db8

080041e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e2:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041e4:	6803      	ldr	r3, [r0, #0]
 80041e6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80041ea:	f040 80a5 	bne.w	8004338 <HAL_RCCEx_PeriphCLKConfig+0x158>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80041ee:	2000      	movs	r0, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	f013 0f01 	tst.w	r3, #1
 80041f6:	d00a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041f8:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80041fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041fe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004202:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004206:	b292      	uxth	r2, r2
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	f013 0f02 	tst.w	r3, #2
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004216:	68a2      	ldr	r2, [r4, #8]
 8004218:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800421c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004220:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004224:	b292      	uxth	r2, r2
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	f013 0f20 	tst.w	r3, #32
 8004232:	d009      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x68>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004234:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004238:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800423c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004240:	6921      	ldr	r1, [r4, #16]
 8004242:	430b      	orrs	r3, r1
 8004244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004248:	6823      	ldr	r3, [r4, #0]
 800424a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800424e:	d00c      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004250:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004252:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004256:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800425a:	0c2a      	lsrs	r2, r5, #16
 800425c:	0412      	lsls	r2, r2, #16
 800425e:	ea23 0302 	bic.w	r3, r3, r2
 8004262:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8004266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004270:	d00c      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004272:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004274:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004278:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800427c:	0c2a      	lsrs	r2, r5, #16
 800427e:	0412      	lsls	r2, r2, #16
 8004280:	ea23 0302 	bic.w	r3, r3, r2
 8004284:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8004288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004292:	d00c      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004294:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004296:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800429a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800429e:	0c2a      	lsrs	r2, r5, #16
 80042a0:	0412      	lsls	r2, r2, #16
 80042a2:	ea23 0302 	bic.w	r3, r3, r2
 80042a6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80042aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80042b4:	d151      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x17a>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80042bc:	d15e      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042be:	6823      	ldr	r3, [r4, #0]
 80042c0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80042c4:	d16b      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	f013 0f10 	tst.w	r3, #16
 80042cc:	d00d      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x10a>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80042ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80042d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042da:	68e1      	ldr	r1, [r4, #12]
 80042dc:	430b      	orrs	r3, r1
 80042de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80042e2:	68e3      	ldr	r3, [r4, #12]
 80042e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e8:	d06a      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80042f0:	d00f      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x132>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80042f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80042fa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80042fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004300:	430b      	orrs	r3, r1
 8004302:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004306:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004308:	b91b      	cbnz	r3, 8004312 <HAL_RCCEx_PeriphCLKConfig+0x132>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800430a:	68d3      	ldr	r3, [r2, #12]
 800430c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004310:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004318:	d00d      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x156>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800431a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800431e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004322:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004326:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004328:	430b      	orrs	r3, r1
 800432a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800432e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004334:	d049      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8004336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_PWR_EnableBkUpAccess();
 8004338:	f7ff f948 	bl	80035cc <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 800433c:	f7fd f954 	bl	80015e8 <HAL_GetTick>
 8004340:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004342:	4e44      	ldr	r6, [pc, #272]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8004344:	6833      	ldr	r3, [r6, #0]
 8004346:	f413 7f80 	tst.w	r3, #256	; 0x100
 800434a:	d14f      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800434c:	f7fd f94c 	bl	80015e8 <HAL_GetTick>
 8004350:	1b40      	subs	r0, r0, r5
 8004352:	2802      	cmp	r0, #2
 8004354:	d9f6      	bls.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x164>
        ret = HAL_TIMEOUT;
 8004356:	2003      	movs	r0, #3
 8004358:	e74a      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x10>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800435a:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800435c:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8004360:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8004364:	0919      	lsrs	r1, r3, #4
 8004366:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800436a:	ea22 0201 	bic.w	r2, r2, r1
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 800437a:	e79c      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800437c:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800437e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8004382:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8004386:	0919      	lsrs	r1, r3, #4
 8004388:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800438c:	ea22 0201 	bic.w	r2, r2, r1
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004396:	4313      	orrs	r3, r2
 8004398:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 800439c:	e78f      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800439e:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80043a0:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80043a4:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 80043a8:	0919      	lsrs	r1, r3, #4
 80043aa:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80043ae:	ea22 0201 	bic.w	r2, r2, r1
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 80043be:	e782      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80043c0:	68d3      	ldr	r3, [r2, #12]
 80043c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043c6:	60d3      	str	r3, [r2, #12]
 80043c8:	e78f      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x10a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043ca:	68d3      	ldr	r3, [r2, #12]
 80043cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d0:	60d3      	str	r3, [r2, #12]
  return status;
 80043d2:	e7b0      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x156>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80043d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043d8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80043dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043e2:	430b      	orrs	r3, r1
 80043e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80043e8:	2000      	movs	r0, #0
}
 80043ea:	e701      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80043ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80043f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d0ea      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004402:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004406:	f421 7040 	bic.w	r0, r1, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800440a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800440e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004412:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004416:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800441a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800441e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004422:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004426:	f011 0f02 	tst.w	r1, #2
 800442a:	d0d3      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        tickstart = HAL_GetTick();
 800442c:	f7fd f8dc 	bl	80015e8 <HAL_GetTick>
 8004430:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004432:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004436:	f241 3788 	movw	r7, #5000	; 0x1388
 800443a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800443e:	f013 0f02 	tst.w	r3, #2
 8004442:	d1c7      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 8004444:	f7fd f8d0 	bl	80015e8 <HAL_GetTick>
 8004448:	1b40      	subs	r0, r0, r5
 800444a:	42b8      	cmp	r0, r7
 800444c:	d9f5      	bls.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            ret = HAL_TIMEOUT;
 800444e:	2003      	movs	r0, #3
 8004450:	e6ce      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x10>
 8004452:	bf00      	nop
 8004454:	58000400 	.word	0x58000400

08004458 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004458:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800445c:	2b01      	cmp	r3, #1
 800445e:	d036      	beq.n	80044ce <HAL_RTC_DeactivateAlarm+0x76>
 8004460:	2301      	movs	r3, #1
 8004462:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004466:	2302      	movs	r3, #2
 8004468:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800446c:	4b19      	ldr	r3, [pc, #100]	; (80044d4 <HAL_RTC_DeactivateAlarm+0x7c>)
 800446e:	22ca      	movs	r2, #202	; 0xca
 8004470:	625a      	str	r2, [r3, #36]	; 0x24
 8004472:	2253      	movs	r2, #83	; 0x53
 8004474:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004476:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800447a:	d019      	beq.n	80044b0 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800447c:	4b15      	ldr	r3, [pc, #84]	; (80044d4 <HAL_RTC_DeactivateAlarm+0x7c>)
 800447e:	699a      	ldr	r2, [r3, #24]
 8004480:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8004484:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004486:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004488:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800448c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800448e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004490:	f022 0202 	bic.w	r2, r2, #2
 8004494:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004496:	2202      	movs	r2, #2
 8004498:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800449a:	4b0e      	ldr	r3, [pc, #56]	; (80044d4 <HAL_RTC_DeactivateAlarm+0x7c>)
 800449c:	22ff      	movs	r2, #255	; 0xff
 800449e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80044a0:	2301      	movs	r3, #1
 80044a2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044a6:	2300      	movs	r3, #0
 80044a8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80044ac:	4618      	mov	r0, r3
 80044ae:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80044b0:	699a      	ldr	r2, [r3, #24]
 80044b2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80044b6:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80044b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044be:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80044c0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80044c2:	f022 0201 	bic.w	r2, r2, #1
 80044c6:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80044c8:	2201      	movs	r2, #1
 80044ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80044cc:	e7e5      	b.n	800449a <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 80044ce:	2002      	movs	r0, #2
}
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40002800 	.word	0x40002800

080044d8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80044d8:	b538      	push	{r3, r4, r5, lr}
 80044da:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80044dc:	4b0d      	ldr	r3, [pc, #52]	; (8004514 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80044de:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80044e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80044e2:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80044e4:	f015 0f01 	tst.w	r5, #1
 80044e8:	d106      	bne.n	80044f8 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80044ea:	f015 0f02 	tst.w	r5, #2
 80044ee:	d109      	bne.n	8004504 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80044f0:	2301      	movs	r3, #1
 80044f2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 80044f6:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80044f8:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 80044fe:	f7fd fa45 	bl	800198c <HAL_RTC_AlarmAEventCallback>
 8004502:	e7f2      	b.n	80044ea <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004504:	4b03      	ldr	r3, [pc, #12]	; (8004514 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004506:	2202      	movs	r2, #2
 8004508:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800450a:	4620      	mov	r0, r4
 800450c:	f000 f9fe 	bl	800490c <HAL_RTCEx_AlarmBEventCallback>
 8004510:	e7ee      	b.n	80044f0 <HAL_RTC_AlarmIRQHandler+0x18>
 8004512:	bf00      	nop
 8004514:	40002800 	.word	0x40002800

08004518 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004518:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800451a:	4a0b      	ldr	r2, [pc, #44]	; (8004548 <HAL_RTC_WaitForSynchro+0x30>)
 800451c:	68d3      	ldr	r3, [r2, #12]
 800451e:	f023 0320 	bic.w	r3, r3, #32
 8004522:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004524:	f7fd f860 	bl	80015e8 <HAL_GetTick>
 8004528:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800452a:	4d07      	ldr	r5, [pc, #28]	; (8004548 <HAL_RTC_WaitForSynchro+0x30>)
 800452c:	68eb      	ldr	r3, [r5, #12]
 800452e:	f013 0f20 	tst.w	r3, #32
 8004532:	d107      	bne.n	8004544 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004534:	f7fd f858 	bl	80015e8 <HAL_GetTick>
 8004538:	1b00      	subs	r0, r0, r4
 800453a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800453e:	d9f5      	bls.n	800452c <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8004540:	2003      	movs	r0, #3
 8004542:	e000      	b.n	8004546 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004544:	2000      	movs	r0, #0
}
 8004546:	bd38      	pop	{r3, r4, r5, pc}
 8004548:	40002800 	.word	0x40002800

0800454c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800454c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004550:	4b13      	ldr	r3, [pc, #76]	; (80045a0 <RTC_EnterInitMode+0x54>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004558:	d003      	beq.n	8004562 <RTC_EnterInitMode+0x16>
  HAL_StatusTypeDef status = HAL_OK;
 800455a:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 800455c:	4620      	mov	r0, r4
 800455e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004562:	4607      	mov	r7, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004564:	4a0e      	ldr	r2, [pc, #56]	; (80045a0 <RTC_EnterInitMode+0x54>)
 8004566:	68d3      	ldr	r3, [r2, #12]
 8004568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800456c:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800456e:	f7fd f83b 	bl	80015e8 <HAL_GetTick>
 8004572:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8004574:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004576:	4e0a      	ldr	r6, [pc, #40]	; (80045a0 <RTC_EnterInitMode+0x54>)
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004578:	f04f 0803 	mov.w	r8, #3
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800457c:	e008      	b.n	8004590 <RTC_EnterInitMode+0x44>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800457e:	f7fd f833 	bl	80015e8 <HAL_GetTick>
 8004582:	1b43      	subs	r3, r0, r5
 8004584:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004588:	bf84      	itt	hi
 800458a:	f887 802d 	strbhi.w	r8, [r7, #45]	; 0x2d
        status = HAL_TIMEOUT;
 800458e:	4644      	movhi	r4, r8
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004590:	68f3      	ldr	r3, [r6, #12]
 8004592:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004596:	d1e1      	bne.n	800455c <RTC_EnterInitMode+0x10>
 8004598:	2c03      	cmp	r4, #3
 800459a:	d1f0      	bne.n	800457e <RTC_EnterInitMode+0x32>
 800459c:	e7de      	b.n	800455c <RTC_EnterInitMode+0x10>
 800459e:	bf00      	nop
 80045a0:	40002800 	.word	0x40002800

080045a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80045a4:	b510      	push	{r4, lr}
 80045a6:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80045a8:	4b11      	ldr	r3, [pc, #68]	; (80045f0 <RTC_ExitInitMode+0x4c>)
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045b0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	f013 0f20 	tst.w	r3, #32
 80045b8:	d107      	bne.n	80045ca <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045ba:	f7ff ffad 	bl	8004518 <HAL_RTC_WaitForSynchro>
 80045be:	4603      	mov	r3, r0
 80045c0:	b1a0      	cbz	r0, 80045ec <RTC_ExitInitMode+0x48>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80045c8:	e010      	b.n	80045ec <RTC_ExitInitMode+0x48>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80045ca:	4a09      	ldr	r2, [pc, #36]	; (80045f0 <RTC_ExitInitMode+0x4c>)
 80045cc:	6993      	ldr	r3, [r2, #24]
 80045ce:	f023 0320 	bic.w	r3, r3, #32
 80045d2:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045d4:	f7ff ffa0 	bl	8004518 <HAL_RTC_WaitForSynchro>
 80045d8:	4603      	mov	r3, r0
 80045da:	b110      	cbz	r0, 80045e2 <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80045e2:	4903      	ldr	r1, [pc, #12]	; (80045f0 <RTC_ExitInitMode+0x4c>)
 80045e4:	698a      	ldr	r2, [r1, #24]
 80045e6:	f042 0220 	orr.w	r2, r2, #32
 80045ea:	618a      	str	r2, [r1, #24]
  }

  return status;
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	bd10      	pop	{r4, pc}
 80045f0:	40002800 	.word	0x40002800

080045f4 <HAL_RTC_Init>:
  if (hrtc != NULL)
 80045f4:	2800      	cmp	r0, #0
 80045f6:	d04b      	beq.n	8004690 <HAL_RTC_Init+0x9c>
{
 80045f8:	b538      	push	{r3, r4, r5, lr}
 80045fa:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80045fc:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8004600:	b17b      	cbz	r3, 8004622 <HAL_RTC_Init+0x2e>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004602:	2302      	movs	r3, #2
 8004604:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004608:	4b22      	ldr	r3, [pc, #136]	; (8004694 <HAL_RTC_Init+0xa0>)
 800460a:	22ca      	movs	r2, #202	; 0xca
 800460c:	625a      	str	r2, [r3, #36]	; 0x24
 800460e:	2253      	movs	r2, #83	; 0x53
 8004610:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8004612:	4620      	mov	r0, r4
 8004614:	f7ff ff9a 	bl	800454c <RTC_EnterInitMode>
    if (status == HAL_OK)
 8004618:	b140      	cbz	r0, 800462c <HAL_RTC_Init+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800461a:	4b1e      	ldr	r3, [pc, #120]	; (8004694 <HAL_RTC_Init+0xa0>)
 800461c:	22ff      	movs	r2, #255	; 0xff
 800461e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004620:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8004622:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8004626:	f7fc fe27 	bl	8001278 <HAL_RTC_MspInit>
 800462a:	e7ea      	b.n	8004602 <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800462c:	4b19      	ldr	r3, [pc, #100]	; (8004694 <HAL_RTC_Init+0xa0>)
 800462e:	699a      	ldr	r2, [r3, #24]
 8004630:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8004634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004638:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800463a:	6999      	ldr	r1, [r3, #24]
 800463c:	6862      	ldr	r2, [r4, #4]
 800463e:	6920      	ldr	r0, [r4, #16]
 8004640:	4302      	orrs	r2, r0
 8004642:	430a      	orrs	r2, r1
 8004644:	69a1      	ldr	r1, [r4, #24]
 8004646:	430a      	orrs	r2, r1
 8004648:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800464a:	68a1      	ldr	r1, [r4, #8]
 800464c:	68e2      	ldr	r2, [r4, #12]
 800464e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004652:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8004654:	68d9      	ldr	r1, [r3, #12]
 8004656:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004658:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800465a:	4302      	orrs	r2, r0
 800465c:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
 8004660:	430a      	orrs	r2, r1
 8004662:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 8004664:	4620      	mov	r0, r4
 8004666:	f7ff ff9d 	bl	80045a4 <RTC_ExitInitMode>
      if (status == HAL_OK)
 800466a:	2800      	cmp	r0, #0
 800466c:	d1d5      	bne.n	800461a <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 800466e:	4a09      	ldr	r2, [pc, #36]	; (8004694 <HAL_RTC_Init+0xa0>)
 8004670:	6991      	ldr	r1, [r2, #24]
 8004672:	6a23      	ldr	r3, [r4, #32]
 8004674:	69e5      	ldr	r5, [r4, #28]
 8004676:	432b      	orrs	r3, r5
 8004678:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 800467c:	430b      	orrs	r3, r1
 800467e:	6961      	ldr	r1, [r4, #20]
 8004680:	430b      	orrs	r3, r1
 8004682:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004684:	23ff      	movs	r3, #255	; 0xff
 8004686:	6253      	str	r3, [r2, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_READY;
 8004688:	2301      	movs	r3, #1
 800468a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800468e:	e7c7      	b.n	8004620 <HAL_RTC_Init+0x2c>
  HAL_StatusTypeDef status = HAL_ERROR;
 8004690:	2001      	movs	r0, #1
}
 8004692:	4770      	bx	lr
 8004694:	40002800 	.word	0x40002800

08004698 <RTC_ByteToBcd2>:
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8004698:	2809      	cmp	r0, #9
 800469a:	d909      	bls.n	80046b0 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0U;
 800469c:	2300      	movs	r3, #0
  {
    bcdhigh++;
 800469e:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 80046a0:	380a      	subs	r0, #10
 80046a2:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 80046a4:	2809      	cmp	r0, #9
 80046a6:	d8fa      	bhi.n	800469e <RTC_ByteToBcd2+0x6>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80046a8:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 80046ac:	b2c0      	uxtb	r0, r0
 80046ae:	4770      	bx	lr
  uint32_t bcdhigh = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	e7f9      	b.n	80046a8 <RTC_ByteToBcd2+0x10>

080046b4 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 80046b4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	f000 8095 	beq.w	80047e8 <HAL_RTC_SetAlarm_IT+0x134>
{
 80046be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c2:	4605      	mov	r5, r0
 80046c4:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 80046c6:	2301      	movs	r3, #1
 80046c8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80046cc:	2302      	movs	r3, #2
 80046ce:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80046d2:	4b5c      	ldr	r3, [pc, #368]	; (8004844 <HAL_RTC_SetAlarm_IT+0x190>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 80046da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046de:	f000 809b 	beq.w	8004818 <HAL_RTC_SetAlarm_IT+0x164>
    if (Format == RTC_FORMAT_BIN)
 80046e2:	2a00      	cmp	r2, #0
 80046e4:	d154      	bne.n	8004790 <HAL_RTC_SetAlarm_IT+0xdc>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80046e6:	4b57      	ldr	r3, [pc, #348]	; (8004844 <HAL_RTC_SetAlarm_IT+0x190>)
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	f013 0f40 	tst.w	r3, #64	; 0x40
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80046ee:	bf04      	itt	eq
 80046f0:	2300      	moveq	r3, #0
 80046f2:	70cb      	strbeq	r3, [r1, #3]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80046f4:	7808      	ldrb	r0, [r1, #0]
 80046f6:	f7ff ffcf 	bl	8004698 <RTC_ByteToBcd2>
 80046fa:	4607      	mov	r7, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80046fc:	7860      	ldrb	r0, [r4, #1]
 80046fe:	f7ff ffcb 	bl	8004698 <RTC_ByteToBcd2>
 8004702:	4606      	mov	r6, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004704:	78a0      	ldrb	r0, [r4, #2]
 8004706:	f7ff ffc7 	bl	8004698 <RTC_ByteToBcd2>
 800470a:	4680      	mov	r8, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800470c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8004710:	f7ff ffc2 	bl	8004698 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004714:	6963      	ldr	r3, [r4, #20]
 8004716:	6a22      	ldr	r2, [r4, #32]
 8004718:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800471a:	78e2      	ldrb	r2, [r4, #3]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800471c:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8004720:	ea43 0308 	orr.w	r3, r3, r8
 8004724:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004728:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 800472c:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004730:	4b44      	ldr	r3, [pc, #272]	; (8004844 <HAL_RTC_SetAlarm_IT+0x190>)
 8004732:	22ca      	movs	r2, #202	; 0xca
 8004734:	625a      	str	r2, [r3, #36]	; 0x24
 8004736:	2253      	movs	r2, #83	; 0x53
 8004738:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800473a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800473c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004740:	d054      	beq.n	80047ec <HAL_RTC_SetAlarm_IT+0x138>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004742:	4b40      	ldr	r3, [pc, #256]	; (8004844 <HAL_RTC_SetAlarm_IT+0x190>)
 8004744:	699a      	ldr	r2, [r3, #24]
 8004746:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 800474a:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800474c:	2202      	movs	r2, #2
 800474e:	65da      	str	r2, [r3, #92]	; 0x5c
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004750:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8004752:	69a2      	ldr	r2, [r4, #24]
 8004754:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8004756:	6862      	ldr	r2, [r4, #4]
 8004758:	4b3a      	ldr	r3, [pc, #232]	; (8004844 <HAL_RTC_SetAlarm_IT+0x190>)
 800475a:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800475c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800475e:	f042 0202 	orr.w	r2, r2, #2
 8004762:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 800476a:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800476c:	4a36      	ldr	r2, [pc, #216]	; (8004848 <HAL_RTC_SetAlarm_IT+0x194>)
 800476e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004776:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800477a:	4b32      	ldr	r3, [pc, #200]	; (8004844 <HAL_RTC_SetAlarm_IT+0x190>)
 800477c:	22ff      	movs	r2, #255	; 0xff
 800477e:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004780:	2301      	movs	r3, #1
 8004782:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8004786:	2000      	movs	r0, #0
 8004788:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 800478c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8004790:	694b      	ldr	r3, [r1, #20]
 8004792:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8004796:	d009      	beq.n	80047ac <HAL_RTC_SetAlarm_IT+0xf8>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8004798:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800479c:	d006      	beq.n	80047ac <HAL_RTC_SetAlarm_IT+0xf8>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800479e:	4a29      	ldr	r2, [pc, #164]	; (8004844 <HAL_RTC_SetAlarm_IT+0x190>)
 80047a0:	6992      	ldr	r2, [r2, #24]
 80047a2:	f012 0f40 	tst.w	r2, #64	; 0x40
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80047a6:	bf04      	itt	eq
 80047a8:	2200      	moveq	r2, #0
 80047aa:	70ca      	strbeq	r2, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80047ac:	6a20      	ldr	r0, [r4, #32]
 80047ae:	4318      	orrs	r0, r3
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80047b0:	78a3      	ldrb	r3, [r4, #2]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80047b2:	4318      	orrs	r0, r3
 80047b4:	7823      	ldrb	r3, [r4, #0]
 80047b6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80047ba:	7863      	ldrb	r3, [r4, #1]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80047bc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80047c0:	78e3      	ldrb	r3, [r4, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80047c2:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80047c6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80047ca:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80047ce:	e7af      	b.n	8004730 <HAL_RTC_SetAlarm_IT+0x7c>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80047d0:	4b1c      	ldr	r3, [pc, #112]	; (8004844 <HAL_RTC_SetAlarm_IT+0x190>)
 80047d2:	699a      	ldr	r2, [r3, #24]
 80047d4:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80047d8:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80047da:	2201      	movs	r2, #1
 80047dc:	65da      	str	r2, [r3, #92]	; 0x5c
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80047de:	69a2      	ldr	r2, [r4, #24]
 80047e0:	69e1      	ldr	r1, [r4, #28]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	645a      	str	r2, [r3, #68]	; 0x44
 80047e6:	e00b      	b.n	8004800 <HAL_RTC_SetAlarm_IT+0x14c>
  __HAL_LOCK(hrtc);
 80047e8:	2002      	movs	r0, #2
}
 80047ea:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80047ec:	4b15      	ldr	r3, [pc, #84]	; (8004844 <HAL_RTC_SetAlarm_IT+0x190>)
 80047ee:	699a      	ldr	r2, [r3, #24]
 80047f0:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80047f4:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80047f6:	2201      	movs	r2, #1
 80047f8:	65da      	str	r2, [r3, #92]	; 0x5c
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80047fa:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80047fc:	69a2      	ldr	r2, [r4, #24]
 80047fe:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8004800:	6862      	ldr	r2, [r4, #4]
 8004802:	4b10      	ldr	r3, [pc, #64]	; (8004844 <HAL_RTC_SetAlarm_IT+0x190>)
 8004804:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004806:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004808:	f042 0201 	orr.w	r2, r2, #1
 800480c:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800480e:	699a      	ldr	r2, [r3, #24]
 8004810:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8004814:	619a      	str	r2, [r3, #24]
 8004816:	e7a9      	b.n	800476c <HAL_RTC_SetAlarm_IT+0xb8>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004818:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <HAL_RTC_SetAlarm_IT+0x190>)
 800481a:	22ca      	movs	r2, #202	; 0xca
 800481c:	625a      	str	r2, [r3, #36]	; 0x24
 800481e:	2253      	movs	r2, #83	; 0x53
 8004820:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004822:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004828:	d0d2      	beq.n	80047d0 <HAL_RTC_SetAlarm_IT+0x11c>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800482a:	4b06      	ldr	r3, [pc, #24]	; (8004844 <HAL_RTC_SetAlarm_IT+0x190>)
 800482c:	699a      	ldr	r2, [r3, #24]
 800482e:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8004832:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004834:	2202      	movs	r2, #2
 8004836:	65da      	str	r2, [r3, #92]	; 0x5c
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8004838:	69a2      	ldr	r2, [r4, #24]
 800483a:	69e1      	ldr	r1, [r4, #28]
 800483c:	430a      	orrs	r2, r1
 800483e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004840:	e789      	b.n	8004756 <HAL_RTC_SetAlarm_IT+0xa2>
 8004842:	bf00      	nop
 8004844:	40002800 	.word	0x40002800
 8004848:	58000800 	.word	0x58000800

0800484c <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800484c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d017      	beq.n	8004884 <HAL_RTCEx_EnableBypassShadow+0x38>
 8004854:	2101      	movs	r1, #1
 8004856:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800485a:	2302      	movs	r3, #2
 800485c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004860:	4b09      	ldr	r3, [pc, #36]	; (8004888 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8004862:	22ca      	movs	r2, #202	; 0xca
 8004864:	625a      	str	r2, [r3, #36]	; 0x24
 8004866:	2253      	movs	r2, #83	; 0x53
 8004868:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800486a:	699a      	ldr	r2, [r3, #24]
 800486c:	f042 0220 	orr.w	r2, r2, #32
 8004870:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004872:	22ff      	movs	r2, #255	; 0xff
 8004874:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004876:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800487a:	2300      	movs	r3, #0
 800487c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8004880:	4618      	mov	r0, r3
 8004882:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8004884:	2002      	movs	r0, #2
}
 8004886:	4770      	bx	lr
 8004888:	40002800 	.word	0x40002800

0800488c <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800488c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004890:	2b01      	cmp	r3, #1
 8004892:	d020      	beq.n	80048d6 <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8004894:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8004896:	2101      	movs	r1, #1
 8004898:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800489c:	2302      	movs	r3, #2
 800489e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048a2:	4b0e      	ldr	r3, [pc, #56]	; (80048dc <HAL_RTCEx_SetSSRU_IT+0x50>)
 80048a4:	22ca      	movs	r2, #202	; 0xca
 80048a6:	625a      	str	r2, [r3, #36]	; 0x24
 80048a8:	2253      	movs	r2, #83	; 0x53
 80048aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80048ac:	699a      	ldr	r2, [r3, #24]
 80048ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048b2:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80048b4:	4c0a      	ldr	r4, [pc, #40]	; (80048e0 <HAL_RTCEx_SetSSRU_IT+0x54>)
 80048b6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80048ba:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80048be:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048c2:	22ff      	movs	r2, #255	; 0xff
 80048c4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80048c6:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048ca:	2300      	movs	r3, #0
 80048cc:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80048d0:	4618      	mov	r0, r3
}
 80048d2:	bc10      	pop	{r4}
 80048d4:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80048d6:	2002      	movs	r0, #2
}
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40002800 	.word	0x40002800
 80048e0:	58000800 	.word	0x58000800

080048e4 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80048e4:	b510      	push	{r4, lr}
 80048e6:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80048e8:	4b07      	ldr	r3, [pc, #28]	; (8004908 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80048ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80048f0:	d103      	bne.n	80048fa <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 80048f8:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 80048fa:	4b03      	ldr	r3, [pc, #12]	; (8004908 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80048fc:	2240      	movs	r2, #64	; 0x40
 80048fe:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8004900:	f7fd f848 	bl	8001994 <HAL_RTCEx_SSRUEventCallback>
 8004904:	e7f5      	b.n	80048f2 <HAL_RTCEx_SSRUIRQHandler+0xe>
 8004906:	bf00      	nop
 8004908:	40002800 	.word	0x40002800

0800490c <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800490c:	4770      	bx	lr

0800490e <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800490e:	0089      	lsls	r1, r1, #2
 8004910:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004914:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004918:	600a      	str	r2, [r1, #0]
}
 800491a:	4770      	bx	lr

0800491c <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800491c:	0089      	lsls	r1, r1, #2
 800491e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004922:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004926:	6808      	ldr	r0, [r1, #0]
}
 8004928:	4770      	bx	lr
	...

0800492c <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800492c:	4b07      	ldr	r3, [pc, #28]	; (800494c <SUBGHZSPI_Init+0x20>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004934:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004936:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 800493a:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800493c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8004940:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004948:	601a      	str	r2, [r3, #0]
}
 800494a:	4770      	bx	lr
 800494c:	58010000 	.word	0x58010000

08004950 <HAL_SUBGHZ_Init>:
  if (hsubghz == NULL)
 8004950:	2800      	cmp	r0, #0
 8004952:	d061      	beq.n	8004a18 <HAL_SUBGHZ_Init+0xc8>
{
 8004954:	b510      	push	{r4, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800495a:	7983      	ldrb	r3, [r0, #6]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d03f      	beq.n	80049e0 <HAL_SUBGHZ_Init+0x90>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004960:	2302      	movs	r3, #2
 8004962:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8004964:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004968:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800496c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004970:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004974:	4b29      	ldr	r3, [pc, #164]	; (8004a1c <HAL_SUBGHZ_Init+0xcc>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800497c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8004980:	2264      	movs	r2, #100	; 0x64
 8004982:	fb02 f303 	mul.w	r3, r2, r3
 8004986:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8004988:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    if (count == 0U)
 800498c:	9b01      	ldr	r3, [sp, #4]
 800498e:	b35b      	cbz	r3, 80049e8 <HAL_SUBGHZ_Init+0x98>
    count--;
 8004990:	9b01      	ldr	r3, [sp, #4]
 8004992:	3b01      	subs	r3, #1
 8004994:	9301      	str	r3, [sp, #4]
 8004996:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800499a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800499e:	d1f5      	bne.n	800498c <HAL_SUBGHZ_Init+0x3c>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80049a0:	4b1f      	ldr	r3, [pc, #124]	; (8004a20 <HAL_SUBGHZ_Init+0xd0>)
 80049a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80049a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(EXTI->IMR2, ExtiLine);
 80049ae:	491d      	ldr	r1, [pc, #116]	; (8004a24 <HAL_SUBGHZ_Init+0xd4>)
 80049b0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80049b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049b8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049c2:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80049c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049c8:	619a      	str	r2, [r3, #24]
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80049ca:	6820      	ldr	r0, [r4, #0]
 80049cc:	f7ff ffae 	bl	800492c <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80049d0:	2301      	movs	r3, #1
 80049d2:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80049d4:	2000      	movs	r0, #0
 80049d6:	60a0      	str	r0, [r4, #8]
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80049d8:	2301      	movs	r3, #1
 80049da:	71a3      	strb	r3, [r4, #6]
}
 80049dc:	b002      	add	sp, #8
 80049de:	bd10      	pop	{r4, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 80049e0:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 80049e2:	f7fc fd0f 	bl	8001404 <HAL_SUBGHZ_MspInit>
 80049e6:	e7bb      	b.n	8004960 <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80049e8:	2001      	movs	r0, #1
 80049ea:	60a0      	str	r0, [r4, #8]
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80049ec:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <HAL_SUBGHZ_Init+0xd0>)
 80049ee:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80049f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80049fa:	490a      	ldr	r1, [pc, #40]	; (8004a24 <HAL_SUBGHZ_Init+0xd4>)
 80049fc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004a00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a04:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a0e:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004a10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a14:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8004a16:	e7df      	b.n	80049d8 <HAL_SUBGHZ_Init+0x88>
    return status;
 8004a18:	2001      	movs	r0, #1
}
 8004a1a:	4770      	bx	lr
 8004a1c:	20000000 	.word	0x20000000
 8004a20:	58000400 	.word	0x58000400
 8004a24:	58000800 	.word	0x58000800

08004a28 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004a28:	b082      	sub	sp, #8
 8004a2a:	4684      	mov	ip, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004a2c:	4b1b      	ldr	r3, [pc, #108]	; (8004a9c <SUBGHZSPI_Transmit+0x74>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004a34:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8004a38:	2264      	movs	r2, #100	; 0x64
 8004a3a:	fb02 f303 	mul.w	r3, r2, r3
 8004a3e:	9301      	str	r3, [sp, #4]
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004a40:	4a17      	ldr	r2, [pc, #92]	; (8004aa0 <SUBGHZSPI_Transmit+0x78>)
    if (count == 0U)
 8004a42:	9b01      	ldr	r3, [sp, #4]
 8004a44:	b143      	cbz	r3, 8004a58 <SUBGHZSPI_Transmit+0x30>
    count--;
 8004a46:	9b01      	ldr	r3, [sp, #4]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004a4c:	6893      	ldr	r3, [r2, #8]
 8004a4e:	f013 0f02 	tst.w	r3, #2
 8004a52:	d0f6      	beq.n	8004a42 <SUBGHZSPI_Transmit+0x1a>
  HAL_StatusTypeDef status = HAL_OK;
 8004a54:	2000      	movs	r0, #0
 8004a56:	e002      	b.n	8004a5e <SUBGHZSPI_Transmit+0x36>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004a58:	2001      	movs	r0, #1
 8004a5a:	f8cc 0008 	str.w	r0, [ip, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8004a5e:	4b10      	ldr	r3, [pc, #64]	; (8004aa0 <SUBGHZSPI_Transmit+0x78>)
 8004a60:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004a62:	4b0e      	ldr	r3, [pc, #56]	; (8004a9c <SUBGHZSPI_Transmit+0x74>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004a6a:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8004a6e:	2264      	movs	r2, #100	; 0x64
 8004a70:	fb02 f303 	mul.w	r3, r2, r3
 8004a74:	9301      	str	r3, [sp, #4]
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004a76:	4a0a      	ldr	r2, [pc, #40]	; (8004aa0 <SUBGHZSPI_Transmit+0x78>)
    if (count == 0U)
 8004a78:	9b01      	ldr	r3, [sp, #4]
 8004a7a:	b13b      	cbz	r3, 8004a8c <SUBGHZSPI_Transmit+0x64>
    count--;
 8004a7c:	9b01      	ldr	r3, [sp, #4]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004a82:	6893      	ldr	r3, [r2, #8]
 8004a84:	f013 0f01 	tst.w	r3, #1
 8004a88:	d0f6      	beq.n	8004a78 <SUBGHZSPI_Transmit+0x50>
 8004a8a:	e002      	b.n	8004a92 <SUBGHZSPI_Transmit+0x6a>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004a8c:	2001      	movs	r0, #1
 8004a8e:	f8cc 0008 	str.w	r0, [ip, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004a92:	4b03      	ldr	r3, [pc, #12]	; (8004aa0 <SUBGHZSPI_Transmit+0x78>)
 8004a94:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8004a96:	b002      	add	sp, #8
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	20000000 	.word	0x20000000
 8004aa0:	58010000 	.word	0x58010000

08004aa4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004aa4:	b082      	sub	sp, #8
 8004aa6:	4684      	mov	ip, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004aa8:	4b1c      	ldr	r3, [pc, #112]	; (8004b1c <SUBGHZSPI_Receive+0x78>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004ab0:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8004ab4:	2264      	movs	r2, #100	; 0x64
 8004ab6:	fb02 f303 	mul.w	r3, r2, r3
 8004aba:	9301      	str	r3, [sp, #4]
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004abc:	4a18      	ldr	r2, [pc, #96]	; (8004b20 <SUBGHZSPI_Receive+0x7c>)
    if (count == 0U)
 8004abe:	9b01      	ldr	r3, [sp, #4]
 8004ac0:	b143      	cbz	r3, 8004ad4 <SUBGHZSPI_Receive+0x30>
    count--;
 8004ac2:	9b01      	ldr	r3, [sp, #4]
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004ac8:	6893      	ldr	r3, [r2, #8]
 8004aca:	f013 0f02 	tst.w	r3, #2
 8004ace:	d0f6      	beq.n	8004abe <SUBGHZSPI_Receive+0x1a>
  HAL_StatusTypeDef status = HAL_OK;
 8004ad0:	2000      	movs	r0, #0
 8004ad2:	e002      	b.n	8004ada <SUBGHZSPI_Receive+0x36>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004ad4:	2001      	movs	r0, #1
 8004ad6:	f8cc 0008 	str.w	r0, [ip, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8004ada:	4b11      	ldr	r3, [pc, #68]	; (8004b20 <SUBGHZSPI_Receive+0x7c>)
 8004adc:	22ff      	movs	r2, #255	; 0xff
 8004ade:	731a      	strb	r2, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004ae0:	4b0e      	ldr	r3, [pc, #56]	; (8004b1c <SUBGHZSPI_Receive+0x78>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004ae8:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8004aec:	2264      	movs	r2, #100	; 0x64
 8004aee:	fb02 f303 	mul.w	r3, r2, r3
 8004af2:	9301      	str	r3, [sp, #4]
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004af4:	4a0a      	ldr	r2, [pc, #40]	; (8004b20 <SUBGHZSPI_Receive+0x7c>)
    if (count == 0U)
 8004af6:	9b01      	ldr	r3, [sp, #4]
 8004af8:	b13b      	cbz	r3, 8004b0a <SUBGHZSPI_Receive+0x66>
    count--;
 8004afa:	9b01      	ldr	r3, [sp, #4]
 8004afc:	3b01      	subs	r3, #1
 8004afe:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004b00:	6893      	ldr	r3, [r2, #8]
 8004b02:	f013 0f01 	tst.w	r3, #1
 8004b06:	d0f6      	beq.n	8004af6 <SUBGHZSPI_Receive+0x52>
 8004b08:	e002      	b.n	8004b10 <SUBGHZSPI_Receive+0x6c>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004b0a:	2001      	movs	r0, #1
 8004b0c:	f8cc 0008 	str.w	r0, [ip, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004b10:	4b03      	ldr	r3, [pc, #12]	; (8004b20 <SUBGHZSPI_Receive+0x7c>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	700b      	strb	r3, [r1, #0]

  return status;
}
 8004b16:	b002      	add	sp, #8
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	20000000 	.word	0x20000000
 8004b20:	58010000 	.word	0x58010000

08004b24 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004b24:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004b26:	4b10      	ldr	r3, [pc, #64]	; (8004b68 <SUBGHZ_WaitOnBusy+0x44>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004b2e:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8004b32:	2264      	movs	r2, #100	; 0x64
 8004b34:	fb02 f303 	mul.w	r3, r2, r3
 8004b38:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004b3a:	490c      	ldr	r1, [pc, #48]	; (8004b6c <SUBGHZ_WaitOnBusy+0x48>)
 8004b3c:	694b      	ldr	r3, [r1, #20]
 8004b3e:	f3c3 0380 	ubfx	r3, r3, #2, #1
  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
 8004b42:	9a01      	ldr	r2, [sp, #4]
 8004b44:	b152      	cbz	r2, 8004b5c <SUBGHZ_WaitOnBusy+0x38>
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
      break;
    }
    count--;
 8004b46:	9a01      	ldr	r2, [sp, #4]
 8004b48:	3a01      	subs	r2, #1
 8004b4a:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004b4c:	694a      	ldr	r2, [r1, #20]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004b4e:	f012 0f02 	tst.w	r2, #2
 8004b52:	d001      	beq.n	8004b58 <SUBGHZ_WaitOnBusy+0x34>
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1f1      	bne.n	8004b3c <SUBGHZ_WaitOnBusy+0x18>
  status = HAL_OK;
 8004b58:	2000      	movs	r0, #0
 8004b5a:	e002      	b.n	8004b62 <SUBGHZ_WaitOnBusy+0x3e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8004b60:	2001      	movs	r0, #1

  return status;
}
 8004b62:	b002      	add	sp, #8
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20000000 	.word	0x20000000
 8004b6c:	58000400 	.word	0x58000400

08004b70 <SUBGHZ_CheckDeviceReady>:
{
 8004b70:	b500      	push	{lr}
 8004b72:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004b74:	7903      	ldrb	r3, [r0, #4]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d004      	beq.n	8004b84 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004b7a:	f7ff ffd3 	bl	8004b24 <SUBGHZ_WaitOnBusy>
}
 8004b7e:	b003      	add	sp, #12
 8004b80:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004b84:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <SUBGHZ_CheckDeviceReady+0x4c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004b8c:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8004b90:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004b92:	4a0b      	ldr	r2, [pc, #44]	; (8004bc0 <SUBGHZ_CheckDeviceReady+0x50>)
 8004b94:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004b98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8004ba0:	9b01      	ldr	r3, [sp, #4]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8004ba6:	9b01      	ldr	r3, [sp, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1f9      	bne.n	8004ba0 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004bac:	4a04      	ldr	r2, [pc, #16]	; (8004bc0 <SUBGHZ_CheckDeviceReady+0x50>)
 8004bae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004bba:	e7de      	b.n	8004b7a <SUBGHZ_CheckDeviceReady+0xa>
 8004bbc:	20000000 	.word	0x20000000
 8004bc0:	58000400 	.word	0x58000400

08004bc4 <HAL_SUBGHZ_WriteRegisters>:
{
 8004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc6:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004bc8:	7980      	ldrb	r0, [r0, #6]
 8004bca:	b2c0      	uxtb	r0, r0
 8004bcc:	2801      	cmp	r0, #1
 8004bce:	d13e      	bne.n	8004c4e <HAL_SUBGHZ_WriteRegisters+0x8a>
 8004bd0:	460d      	mov	r5, r1
 8004bd2:	4617      	mov	r7, r2
 8004bd4:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8004bd6:	7963      	ldrb	r3, [r4, #5]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d03a      	beq.n	8004c52 <HAL_SUBGHZ_WriteRegisters+0x8e>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	7163      	strb	r3, [r4, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004be0:	2302      	movs	r3, #2
 8004be2:	71a3      	strb	r3, [r4, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004be4:	4620      	mov	r0, r4
 8004be6:	f7ff ffc3 	bl	8004b70 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004bea:	4a1b      	ldr	r2, [pc, #108]	; (8004c58 <HAL_SUBGHZ_WriteRegisters+0x94>)
 8004bec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004bf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004bf8:	210d      	movs	r1, #13
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f7ff ff14 	bl	8004a28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004c00:	0a29      	lsrs	r1, r5, #8
 8004c02:	4620      	mov	r0, r4
 8004c04:	f7ff ff10 	bl	8004a28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004c08:	b2e9      	uxtb	r1, r5
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f7ff ff0c 	bl	8004a28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004c10:	b156      	cbz	r6, 8004c28 <HAL_SUBGHZ_WriteRegisters+0x64>
 8004c12:	1e7d      	subs	r5, r7, #1
 8004c14:	3e01      	subs	r6, #1
 8004c16:	fa17 f686 	uxtah	r6, r7, r6
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004c1a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004c1e:	4620      	mov	r0, r4
 8004c20:	f7ff ff02 	bl	8004a28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004c24:	42b5      	cmp	r5, r6
 8004c26:	d1f8      	bne.n	8004c1a <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004c28:	4a0b      	ldr	r2, [pc, #44]	; (8004c58 <HAL_SUBGHZ_WriteRegisters+0x94>)
 8004c2a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004c36:	4620      	mov	r0, r4
 8004c38:	f7ff ff74 	bl	8004b24 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004c3c:	68a0      	ldr	r0, [r4, #8]
      status = HAL_ERROR;
 8004c3e:	3800      	subs	r0, #0
 8004c40:	bf18      	it	ne
 8004c42:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004c44:	2301      	movs	r3, #1
 8004c46:	71a3      	strb	r3, [r4, #6]
    __HAL_UNLOCK(hsubghz);
 8004c48:	2300      	movs	r3, #0
 8004c4a:	7163      	strb	r3, [r4, #5]
}
 8004c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8004c4e:	2002      	movs	r0, #2
 8004c50:	e7fc      	b.n	8004c4c <HAL_SUBGHZ_WriteRegisters+0x88>
    __HAL_LOCK(hsubghz);
 8004c52:	2002      	movs	r0, #2
 8004c54:	e7fa      	b.n	8004c4c <HAL_SUBGHZ_WriteRegisters+0x88>
 8004c56:	bf00      	nop
 8004c58:	58000400 	.word	0x58000400

08004c5c <HAL_SUBGHZ_ReadRegisters>:
{
 8004c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5e:	4614      	mov	r4, r2
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004c60:	7982      	ldrb	r2, [r0, #6]
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	2a01      	cmp	r2, #1
 8004c66:	d13c      	bne.n	8004ce2 <HAL_SUBGHZ_ReadRegisters+0x86>
 8004c68:	4605      	mov	r5, r0
 8004c6a:	460f      	mov	r7, r1
 8004c6c:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8004c6e:	7943      	ldrb	r3, [r0, #5]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d038      	beq.n	8004ce6 <HAL_SUBGHZ_ReadRegisters+0x8a>
 8004c74:	2301      	movs	r3, #1
 8004c76:	7143      	strb	r3, [r0, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004c78:	f7ff ff7a 	bl	8004b70 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004c7c:	4a1b      	ldr	r2, [pc, #108]	; (8004cec <HAL_SUBGHZ_ReadRegisters+0x90>)
 8004c7e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004c82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004c8a:	211d      	movs	r1, #29
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	f7ff fecb 	bl	8004a28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004c92:	0a39      	lsrs	r1, r7, #8
 8004c94:	4628      	mov	r0, r5
 8004c96:	f7ff fec7 	bl	8004a28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004c9a:	b2f9      	uxtb	r1, r7
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	f7ff fec3 	bl	8004a28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	f7ff febf 	bl	8004a28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004caa:	b13e      	cbz	r6, 8004cbc <HAL_SUBGHZ_ReadRegisters+0x60>
 8004cac:	4426      	add	r6, r4
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004cae:	4621      	mov	r1, r4
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	f7ff fef7 	bl	8004aa4 <SUBGHZSPI_Receive>
      pData++;
 8004cb6:	3401      	adds	r4, #1
    for (uint16_t i = 0U; i < Size; i++)
 8004cb8:	42b4      	cmp	r4, r6
 8004cba:	d1f8      	bne.n	8004cae <HAL_SUBGHZ_ReadRegisters+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004cbc:	4a0b      	ldr	r2, [pc, #44]	; (8004cec <HAL_SUBGHZ_ReadRegisters+0x90>)
 8004cbe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004cca:	4628      	mov	r0, r5
 8004ccc:	f7ff ff2a 	bl	8004b24 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004cd0:	68a8      	ldr	r0, [r5, #8]
      status = HAL_ERROR;
 8004cd2:	3800      	subs	r0, #0
 8004cd4:	bf18      	it	ne
 8004cd6:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8004cdc:	2300      	movs	r3, #0
 8004cde:	716b      	strb	r3, [r5, #5]
}
 8004ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8004ce2:	2002      	movs	r0, #2
 8004ce4:	e7fc      	b.n	8004ce0 <HAL_SUBGHZ_ReadRegisters+0x84>
    __HAL_LOCK(hsubghz);
 8004ce6:	2002      	movs	r0, #2
 8004ce8:	e7fa      	b.n	8004ce0 <HAL_SUBGHZ_ReadRegisters+0x84>
 8004cea:	bf00      	nop
 8004cec:	58000400 	.word	0x58000400

08004cf0 <HAL_SUBGHZ_ExecSetCmd>:
{
 8004cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf4:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004cf6:	7980      	ldrb	r0, [r0, #6]
 8004cf8:	b2c0      	uxtb	r0, r0
 8004cfa:	2801      	cmp	r0, #1
 8004cfc:	d140      	bne.n	8004d80 <HAL_SUBGHZ_ExecSetCmd+0x90>
 8004cfe:	460f      	mov	r7, r1
 8004d00:	4690      	mov	r8, r2
 8004d02:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8004d04:	7963      	ldrb	r3, [r4, #5]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d03c      	beq.n	8004d84 <HAL_SUBGHZ_ExecSetCmd+0x94>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	7163      	strb	r3, [r4, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004d0e:	4620      	mov	r0, r4
 8004d10:	f7ff ff2e 	bl	8004b70 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8004d14:	f007 03ef 	and.w	r3, r7, #239	; 0xef
 8004d18:	2b84      	cmp	r3, #132	; 0x84
 8004d1a:	bf14      	ite	ne
 8004d1c:	2300      	movne	r3, #0
 8004d1e:	2301      	moveq	r3, #1
 8004d20:	7123      	strb	r3, [r4, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004d22:	4a19      	ldr	r2, [pc, #100]	; (8004d88 <HAL_SUBGHZ_ExecSetCmd+0x98>)
 8004d24:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004d28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004d30:	4639      	mov	r1, r7
 8004d32:	4620      	mov	r0, r4
 8004d34:	f7ff fe78 	bl	8004a28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004d38:	b15e      	cbz	r6, 8004d52 <HAL_SUBGHZ_ExecSetCmd+0x62>
 8004d3a:	f108 35ff 	add.w	r5, r8, #4294967295
 8004d3e:	3e01      	subs	r6, #1
 8004d40:	fa18 f686 	uxtah	r6, r8, r6
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004d44:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004d48:	4620      	mov	r0, r4
 8004d4a:	f7ff fe6d 	bl	8004a28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004d4e:	42b5      	cmp	r5, r6
 8004d50:	d1f8      	bne.n	8004d44 <HAL_SUBGHZ_ExecSetCmd+0x54>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004d52:	4a0d      	ldr	r2, [pc, #52]	; (8004d88 <HAL_SUBGHZ_ExecSetCmd+0x98>)
 8004d54:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004d58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8004d60:	2f84      	cmp	r7, #132	; 0x84
 8004d62:	d109      	bne.n	8004d78 <HAL_SUBGHZ_ExecSetCmd+0x88>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004d64:	68a0      	ldr	r0, [r4, #8]
      status = HAL_ERROR;
 8004d66:	3800      	subs	r0, #0
 8004d68:	bf18      	it	ne
 8004d6a:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	71a3      	strb	r3, [r4, #6]
    __HAL_UNLOCK(hsubghz);
 8004d70:	2300      	movs	r3, #0
 8004d72:	7163      	strb	r3, [r4, #5]
}
 8004d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004d78:	4620      	mov	r0, r4
 8004d7a:	f7ff fed3 	bl	8004b24 <SUBGHZ_WaitOnBusy>
 8004d7e:	e7f1      	b.n	8004d64 <HAL_SUBGHZ_ExecSetCmd+0x74>
    return HAL_BUSY;
 8004d80:	2002      	movs	r0, #2
 8004d82:	e7f7      	b.n	8004d74 <HAL_SUBGHZ_ExecSetCmd+0x84>
    __HAL_LOCK(hsubghz);
 8004d84:	2002      	movs	r0, #2
 8004d86:	e7f5      	b.n	8004d74 <HAL_SUBGHZ_ExecSetCmd+0x84>
 8004d88:	58000400 	.word	0x58000400

08004d8c <HAL_SUBGHZ_ExecGetCmd>:
{
 8004d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8e:	4614      	mov	r4, r2
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004d90:	7982      	ldrb	r2, [r0, #6]
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	2a01      	cmp	r2, #1
 8004d96:	d134      	bne.n	8004e02 <HAL_SUBGHZ_ExecGetCmd+0x76>
 8004d98:	4605      	mov	r5, r0
 8004d9a:	460f      	mov	r7, r1
 8004d9c:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8004d9e:	7943      	ldrb	r3, [r0, #5]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d030      	beq.n	8004e06 <HAL_SUBGHZ_ExecGetCmd+0x7a>
 8004da4:	2301      	movs	r3, #1
 8004da6:	7143      	strb	r3, [r0, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004da8:	f7ff fee2 	bl	8004b70 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004dac:	4a17      	ldr	r2, [pc, #92]	; (8004e0c <HAL_SUBGHZ_ExecGetCmd+0x80>)
 8004dae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004db2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004db6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004dba:	4639      	mov	r1, r7
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	f7ff fe33 	bl	8004a28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	f7ff fe2f 	bl	8004a28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004dca:	b13e      	cbz	r6, 8004ddc <HAL_SUBGHZ_ExecGetCmd+0x50>
 8004dcc:	4426      	add	r6, r4
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004dce:	4621      	mov	r1, r4
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	f7ff fe67 	bl	8004aa4 <SUBGHZSPI_Receive>
      pData++;
 8004dd6:	3401      	adds	r4, #1
    for (uint16_t i = 0U; i < Size; i++)
 8004dd8:	42b4      	cmp	r4, r6
 8004dda:	d1f8      	bne.n	8004dce <HAL_SUBGHZ_ExecGetCmd+0x42>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004ddc:	4a0b      	ldr	r2, [pc, #44]	; (8004e0c <HAL_SUBGHZ_ExecGetCmd+0x80>)
 8004dde:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004dea:	4628      	mov	r0, r5
 8004dec:	f7ff fe9a 	bl	8004b24 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004df0:	68a8      	ldr	r0, [r5, #8]
      status = HAL_ERROR;
 8004df2:	3800      	subs	r0, #0
 8004df4:	bf18      	it	ne
 8004df6:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	716b      	strb	r3, [r5, #5]
}
 8004e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8004e02:	2002      	movs	r0, #2
 8004e04:	e7fc      	b.n	8004e00 <HAL_SUBGHZ_ExecGetCmd+0x74>
    __HAL_LOCK(hsubghz);
 8004e06:	2002      	movs	r0, #2
 8004e08:	e7fa      	b.n	8004e00 <HAL_SUBGHZ_ExecGetCmd+0x74>
 8004e0a:	bf00      	nop
 8004e0c:	58000400 	.word	0x58000400

08004e10 <HAL_SUBGHZ_IRQHandler>:
{
 8004e10:	b530      	push	{r4, r5, lr}
 8004e12:	b083      	sub	sp, #12
 8004e14:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8004e16:	2300      	movs	r3, #0
 8004e18:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	aa01      	add	r2, sp, #4
 8004e20:	2112      	movs	r1, #18
 8004e22:	f7ff ffb3 	bl	8004d8c <HAL_SUBGHZ_ExecGetCmd>
  itsource = (itsource << 8U) | tmpisr[1U];
 8004e26:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8004e2a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004e2e:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004e32:	f013 0f01 	tst.w	r3, #1
 8004e36:	d127      	bne.n	8004e88 <HAL_SUBGHZ_IRQHandler+0x78>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004e38:	f014 0f02 	tst.w	r4, #2
 8004e3c:	d128      	bne.n	8004e90 <HAL_SUBGHZ_IRQHandler+0x80>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004e3e:	f014 0f04 	tst.w	r4, #4
 8004e42:	d129      	bne.n	8004e98 <HAL_SUBGHZ_IRQHandler+0x88>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004e44:	f014 0f08 	tst.w	r4, #8
 8004e48:	d12a      	bne.n	8004ea0 <HAL_SUBGHZ_IRQHandler+0x90>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004e4a:	f014 0f10 	tst.w	r4, #16
 8004e4e:	d12b      	bne.n	8004ea8 <HAL_SUBGHZ_IRQHandler+0x98>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004e50:	f014 0f20 	tst.w	r4, #32
 8004e54:	d12c      	bne.n	8004eb0 <HAL_SUBGHZ_IRQHandler+0xa0>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004e56:	f014 0f40 	tst.w	r4, #64	; 0x40
 8004e5a:	d12d      	bne.n	8004eb8 <HAL_SUBGHZ_IRQHandler+0xa8>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004e5c:	f014 0f80 	tst.w	r4, #128	; 0x80
 8004e60:	d007      	beq.n	8004e72 <HAL_SUBGHZ_IRQHandler+0x62>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004e62:	f414 7f80 	tst.w	r4, #256	; 0x100
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004e66:	bf14      	ite	ne
 8004e68:	2101      	movne	r1, #1
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004e6a:	2100      	moveq	r1, #0
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	f00a fe7b 	bl	800fb68 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004e72:	f414 7f00 	tst.w	r4, #512	; 0x200
 8004e76:	d123      	bne.n	8004ec0 <HAL_SUBGHZ_IRQHandler+0xb0>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8004e78:	2302      	movs	r3, #2
 8004e7a:	aa01      	add	r2, sp, #4
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4628      	mov	r0, r5
 8004e80:	f7ff ff36 	bl	8004cf0 <HAL_SUBGHZ_ExecSetCmd>
}
 8004e84:	b003      	add	sp, #12
 8004e86:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004e88:	4628      	mov	r0, r5
 8004e8a:	f00a fe55 	bl	800fb38 <HAL_SUBGHZ_TxCpltCallback>
 8004e8e:	e7d3      	b.n	8004e38 <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004e90:	4628      	mov	r0, r5
 8004e92:	f00a fe59 	bl	800fb48 <HAL_SUBGHZ_RxCpltCallback>
 8004e96:	e7d2      	b.n	8004e3e <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f00a fe89 	bl	800fbb0 <HAL_SUBGHZ_PreambleDetectedCallback>
 8004e9e:	e7d1      	b.n	8004e44 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	f00a fe8d 	bl	800fbc0 <HAL_SUBGHZ_SyncWordValidCallback>
 8004ea6:	e7d0      	b.n	8004e4a <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	f00a fe91 	bl	800fbd0 <HAL_SUBGHZ_HeaderValidCallback>
 8004eae:	e7cf      	b.n	8004e50 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	f00a fe75 	bl	800fba0 <HAL_SUBGHZ_HeaderErrorCallback>
 8004eb6:	e7ce      	b.n	8004e56 <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004eb8:	4628      	mov	r0, r5
 8004eba:	f00a fe4d 	bl	800fb58 <HAL_SUBGHZ_CRCErrorCallback>
 8004ebe:	e7cd      	b.n	8004e5c <HAL_SUBGHZ_IRQHandler+0x4c>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	f00a fe63 	bl	800fb8c <HAL_SUBGHZ_RxTxTimeoutCallback>
 8004ec6:	e7d7      	b.n	8004e78 <HAL_SUBGHZ_IRQHandler+0x68>

08004ec8 <HAL_SUBGHZ_WriteBuffer>:
{
 8004ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eca:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004ecc:	7980      	ldrb	r0, [r0, #6]
 8004ece:	b2c0      	uxtb	r0, r0
 8004ed0:	2801      	cmp	r0, #1
 8004ed2:	d138      	bne.n	8004f46 <HAL_SUBGHZ_WriteBuffer+0x7e>
 8004ed4:	460d      	mov	r5, r1
 8004ed6:	4617      	mov	r7, r2
 8004ed8:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8004eda:	7963      	ldrb	r3, [r4, #5]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d034      	beq.n	8004f4a <HAL_SUBGHZ_WriteBuffer+0x82>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	7163      	strb	r3, [r4, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f7ff fe43 	bl	8004b70 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004eea:	4a19      	ldr	r2, [pc, #100]	; (8004f50 <HAL_SUBGHZ_WriteBuffer+0x88>)
 8004eec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004ef0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004ef8:	210e      	movs	r1, #14
 8004efa:	4620      	mov	r0, r4
 8004efc:	f7ff fd94 	bl	8004a28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004f00:	4629      	mov	r1, r5
 8004f02:	4620      	mov	r0, r4
 8004f04:	f7ff fd90 	bl	8004a28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004f08:	b156      	cbz	r6, 8004f20 <HAL_SUBGHZ_WriteBuffer+0x58>
 8004f0a:	1e7d      	subs	r5, r7, #1
 8004f0c:	3e01      	subs	r6, #1
 8004f0e:	fa17 f686 	uxtah	r6, r7, r6
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004f12:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004f16:	4620      	mov	r0, r4
 8004f18:	f7ff fd86 	bl	8004a28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004f1c:	42b5      	cmp	r5, r6
 8004f1e:	d1f8      	bne.n	8004f12 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004f20:	4a0b      	ldr	r2, [pc, #44]	; (8004f50 <HAL_SUBGHZ_WriteBuffer+0x88>)
 8004f22:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004f2e:	4620      	mov	r0, r4
 8004f30:	f7ff fdf8 	bl	8004b24 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004f34:	68a0      	ldr	r0, [r4, #8]
      status = HAL_ERROR;
 8004f36:	3800      	subs	r0, #0
 8004f38:	bf18      	it	ne
 8004f3a:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	71a3      	strb	r3, [r4, #6]
    __HAL_UNLOCK(hsubghz);
 8004f40:	2300      	movs	r3, #0
 8004f42:	7163      	strb	r3, [r4, #5]
}
 8004f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8004f46:	2002      	movs	r0, #2
 8004f48:	e7fc      	b.n	8004f44 <HAL_SUBGHZ_WriteBuffer+0x7c>
    __HAL_LOCK(hsubghz);
 8004f4a:	2002      	movs	r0, #2
 8004f4c:	e7fa      	b.n	8004f44 <HAL_SUBGHZ_WriteBuffer+0x7c>
 8004f4e:	bf00      	nop
 8004f50:	58000400 	.word	0x58000400

08004f54 <HAL_SUBGHZ_ReadBuffer>:
{
 8004f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f56:	4614      	mov	r4, r2
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004f58:	7982      	ldrb	r2, [r0, #6]
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	2a01      	cmp	r2, #1
 8004f5e:	d138      	bne.n	8004fd2 <HAL_SUBGHZ_ReadBuffer+0x7e>
 8004f60:	4605      	mov	r5, r0
 8004f62:	460f      	mov	r7, r1
 8004f64:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8004f66:	7943      	ldrb	r3, [r0, #5]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d034      	beq.n	8004fd6 <HAL_SUBGHZ_ReadBuffer+0x82>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	7143      	strb	r3, [r0, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004f70:	f7ff fdfe 	bl	8004b70 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004f74:	4a19      	ldr	r2, [pc, #100]	; (8004fdc <HAL_SUBGHZ_ReadBuffer+0x88>)
 8004f76:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004f7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004f82:	211e      	movs	r1, #30
 8004f84:	4628      	mov	r0, r5
 8004f86:	f7ff fd4f 	bl	8004a28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004f8a:	4639      	mov	r1, r7
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	f7ff fd4b 	bl	8004a28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004f92:	2100      	movs	r1, #0
 8004f94:	4628      	mov	r0, r5
 8004f96:	f7ff fd47 	bl	8004a28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004f9a:	b13e      	cbz	r6, 8004fac <HAL_SUBGHZ_ReadBuffer+0x58>
 8004f9c:	4426      	add	r6, r4
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	f7ff fd7f 	bl	8004aa4 <SUBGHZSPI_Receive>
      pData++;
 8004fa6:	3401      	adds	r4, #1
    for (uint16_t i = 0U; i < Size; i++)
 8004fa8:	42b4      	cmp	r4, r6
 8004faa:	d1f8      	bne.n	8004f9e <HAL_SUBGHZ_ReadBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004fac:	4a0b      	ldr	r2, [pc, #44]	; (8004fdc <HAL_SUBGHZ_ReadBuffer+0x88>)
 8004fae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004fba:	4628      	mov	r0, r5
 8004fbc:	f7ff fdb2 	bl	8004b24 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004fc0:	68a8      	ldr	r0, [r5, #8]
      status = HAL_ERROR;
 8004fc2:	3800      	subs	r0, #0
 8004fc4:	bf18      	it	ne
 8004fc6:	2001      	movne	r0, #1
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8004fcc:	2300      	movs	r3, #0
 8004fce:	716b      	strb	r3, [r5, #5]
}
 8004fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8004fd2:	2002      	movs	r0, #2
 8004fd4:	e7fc      	b.n	8004fd0 <HAL_SUBGHZ_ReadBuffer+0x7c>
    __HAL_LOCK(hsubghz);
 8004fd6:	2002      	movs	r0, #2
 8004fd8:	e7fa      	b.n	8004fd0 <HAL_SUBGHZ_ReadBuffer+0x7c>
 8004fda:	bf00      	nop
 8004fdc:	58000400 	.word	0x58000400

08004fe0 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004fe0:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe2:	e852 3f00 	ldrex	r3, [r2]
 8004fe6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fea:	e842 3100 	strex	r1, r3, [r2]
 8004fee:	2900      	cmp	r1, #0
 8004ff0:	d1f6      	bne.n	8004fe0 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004ff2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	f102 0308 	add.w	r3, r2, #8
 8004ff8:	e853 3f00 	ldrex	r3, [r3]
 8004ffc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005000:	3208      	adds	r2, #8
 8005002:	e842 3100 	strex	r1, r3, [r2]
 8005006:	2900      	cmp	r1, #0
 8005008:	d1f3      	bne.n	8004ff2 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800500a:	2320      	movs	r3, #32
 800500c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8005010:	4770      	bx	lr

08005012 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005012:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005014:	e852 3f00 	ldrex	r3, [r2]
 8005018:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501c:	e842 3100 	strex	r1, r3, [r2]
 8005020:	2900      	cmp	r1, #0
 8005022:	d1f6      	bne.n	8005012 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005024:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005026:	f102 0308 	add.w	r3, r2, #8
 800502a:	e853 3f00 	ldrex	r3, [r3]
 800502e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005032:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005036:	3208      	adds	r2, #8
 8005038:	e842 3100 	strex	r1, r3, [r2]
 800503c:	2900      	cmp	r1, #0
 800503e:	d1f1      	bne.n	8005024 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005040:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005042:	2b01      	cmp	r3, #1
 8005044:	d006      	beq.n	8005054 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005046:	2320      	movs	r3, #32
 8005048:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800504c:	2300      	movs	r3, #0
 800504e:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005050:	6703      	str	r3, [r0, #112]	; 0x70
}
 8005052:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005054:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	e852 3f00 	ldrex	r3, [r2]
 800505a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505e:	e842 3100 	strex	r1, r3, [r2]
 8005062:	2900      	cmp	r1, #0
 8005064:	d1f6      	bne.n	8005054 <UART_EndRxTransfer+0x42>
 8005066:	e7ee      	b.n	8005046 <UART_EndRxTransfer+0x34>

08005068 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8005068:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800506c:	2b20      	cmp	r3, #32
 800506e:	d14c      	bne.n	800510a <HAL_UART_Transmit_DMA+0xa2>
{
 8005070:	b510      	push	{r4, lr}
 8005072:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8005074:	2900      	cmp	r1, #0
 8005076:	d04a      	beq.n	800510e <HAL_UART_Transmit_DMA+0xa6>
 8005078:	2a00      	cmp	r2, #0
 800507a:	d04a      	beq.n	8005112 <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 800507c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005080:	2b01      	cmp	r3, #1
 8005082:	d048      	beq.n	8005116 <HAL_UART_Transmit_DMA+0xae>
 8005084:	2301      	movs	r3, #1
 8005086:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 800508a:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 800508c:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8005090:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005094:	2300      	movs	r3, #0
 8005096:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800509a:	2321      	movs	r3, #33	; 0x21
 800509c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 80050a0:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80050a2:	b1f3      	cbz	r3, 80050e2 <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80050a4:	491d      	ldr	r1, [pc, #116]	; (800511c <HAL_UART_Transmit_DMA+0xb4>)
 80050a6:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80050a8:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80050aa:	491d      	ldr	r1, [pc, #116]	; (8005120 <HAL_UART_Transmit_DMA+0xb8>)
 80050ac:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80050ae:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80050b0:	491c      	ldr	r1, [pc, #112]	; (8005124 <HAL_UART_Transmit_DMA+0xbc>)
 80050b2:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 80050b4:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80050b6:	2100      	movs	r1, #0
 80050b8:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80050ba:	6801      	ldr	r1, [r0, #0]
 80050bc:	4613      	mov	r3, r2
 80050be:	f101 0228 	add.w	r2, r1, #40	; 0x28
 80050c2:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80050c4:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80050c6:	f7fd fe55 	bl	8002d74 <HAL_DMA_Start_IT>
 80050ca:	b150      	cbz	r0, 80050e2 <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80050cc:	2310      	movs	r3, #16
 80050ce:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 80050d2:	2300      	movs	r3, #0
 80050d4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 80050d8:	2320      	movs	r3, #32
 80050da:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 80050de:	2001      	movs	r0, #1
 80050e0:	e012      	b.n	8005108 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	2240      	movs	r2, #64	; 0x40
 80050e6:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 80050e8:	2300      	movs	r3, #0
 80050ea:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80050ee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	f102 0308 	add.w	r3, r2, #8
 80050f4:	e853 3f00 	ldrex	r3, [r3]
 80050f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	3208      	adds	r2, #8
 80050fe:	e842 3100 	strex	r1, r3, [r2]
 8005102:	2900      	cmp	r1, #0
 8005104:	d1f3      	bne.n	80050ee <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 8005106:	2000      	movs	r0, #0
}
 8005108:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800510a:	2002      	movs	r0, #2
}
 800510c:	4770      	bx	lr
      return HAL_ERROR;
 800510e:	2001      	movs	r0, #1
 8005110:	e7fa      	b.n	8005108 <HAL_UART_Transmit_DMA+0xa0>
 8005112:	2001      	movs	r0, #1
 8005114:	e7f8      	b.n	8005108 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 8005116:	2002      	movs	r0, #2
 8005118:	e7f6      	b.n	8005108 <HAL_UART_Transmit_DMA+0xa0>
 800511a:	bf00      	nop
 800511c:	08005129 	.word	0x08005129
 8005120:	08005173 	.word	0x08005173
 8005124:	08005181 	.word	0x08005181

08005128 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005128:	b508      	push	{r3, lr}
 800512a:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800512c:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f013 0f20 	tst.w	r3, #32
 8005136:	d118      	bne.n	800516a <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800513e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005140:	f102 0308 	add.w	r3, r2, #8
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514c:	3208      	adds	r2, #8
 800514e:	e842 3100 	strex	r1, r3, [r2]
 8005152:	2900      	cmp	r1, #0
 8005154:	d1f3      	bne.n	800513e <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005156:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005158:	e852 3f00 	ldrex	r3, [r2]
 800515c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005160:	e842 3100 	strex	r1, r3, [r2]
 8005164:	2900      	cmp	r1, #0
 8005166:	d1f6      	bne.n	8005156 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005168:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800516a:	f7fc fe3f 	bl	8001dec <HAL_UART_TxCpltCallback>
}
 800516e:	e7fb      	b.n	8005168 <UART_DMATransmitCplt+0x40>

08005170 <HAL_UART_TxHalfCpltCallback>:
}
 8005170:	4770      	bx	lr

08005172 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005172:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005174:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005176:	f7ff fffb 	bl	8005170 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800517a:	bd08      	pop	{r3, pc}

0800517c <HAL_UART_RxHalfCpltCallback>:
}
 800517c:	4770      	bx	lr

0800517e <HAL_UART_ErrorCallback>:
}
 800517e:	4770      	bx	lr

08005180 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005180:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005182:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005184:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005188:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005194:	d001      	beq.n	800519a <UART_DMAError+0x1a>
 8005196:	2a21      	cmp	r2, #33	; 0x21
 8005198:	d010      	beq.n	80051bc <UART_DMAError+0x3c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f013 0f40 	tst.w	r3, #64	; 0x40
 80051a2:	d001      	beq.n	80051a8 <UART_DMAError+0x28>
 80051a4:	2d22      	cmp	r5, #34	; 0x22
 80051a6:	d010      	beq.n	80051ca <UART_DMAError+0x4a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80051a8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80051ac:	f043 0310 	orr.w	r3, r3, #16
 80051b0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051b4:	4620      	mov	r0, r4
 80051b6:	f7ff ffe2 	bl	800517e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051ba:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80051c2:	4620      	mov	r0, r4
 80051c4:	f7ff ff0c 	bl	8004fe0 <UART_EndTxTransfer>
 80051c8:	e7e7      	b.n	800519a <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80051d0:	4620      	mov	r0, r4
 80051d2:	f7ff ff1e 	bl	8005012 <UART_EndRxTransfer>
 80051d6:	e7e7      	b.n	80051a8 <UART_DMAError+0x28>

080051d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051d8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051da:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80051e2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051e6:	f7ff ffca 	bl	800517e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051ea:	bd08      	pop	{r3, pc}

080051ec <HAL_UART_IRQHandler>:
{
 80051ec:	b570      	push	{r4, r5, r6, lr}
 80051ee:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051f0:	6802      	ldr	r2, [r0, #0]
 80051f2:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051f4:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051f6:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 80051f8:	f640 0c0f 	movw	ip, #2063	; 0x80f
 80051fc:	ea13 0f0c 	tst.w	r3, ip
 8005200:	d10e      	bne.n	8005220 <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005202:	f013 0f20 	tst.w	r3, #32
 8005206:	d014      	beq.n	8005232 <HAL_UART_IRQHandler+0x46>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005208:	f000 0520 	and.w	r5, r0, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800520c:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
 8005210:	ea55 050c 	orrs.w	r5, r5, ip
 8005214:	d00d      	beq.n	8005232 <HAL_UART_IRQHandler+0x46>
      if (huart->RxISR != NULL)
 8005216:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005218:	b3a3      	cbz	r3, 8005284 <HAL_UART_IRQHandler+0x98>
        huart->RxISR(huart);
 800521a:	4620      	mov	r0, r4
 800521c:	4798      	blx	r3
 800521e:	e031      	b.n	8005284 <HAL_UART_IRQHandler+0x98>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005220:	4db6      	ldr	r5, [pc, #728]	; (80054fc <HAL_UART_IRQHandler+0x310>)
 8005222:	400d      	ands	r5, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005224:	f8df c2d8 	ldr.w	ip, [pc, #728]	; 8005500 <HAL_UART_IRQHandler+0x314>
 8005228:	ea00 0c0c 	and.w	ip, r0, ip
 800522c:	ea5c 0605 	orrs.w	r6, ip, r5
 8005230:	d129      	bne.n	8005286 <HAL_UART_IRQHandler+0x9a>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005232:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8005234:	2d01      	cmp	r5, #1
 8005236:	f000 80c1 	beq.w	80053bc <HAL_UART_IRQHandler+0x1d0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800523a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800523e:	d003      	beq.n	8005248 <HAL_UART_IRQHandler+0x5c>
 8005240:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8005244:	f040 8152 	bne.w	80054ec <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005248:	f013 0f80 	tst.w	r3, #128	; 0x80
 800524c:	d006      	beq.n	800525c <HAL_UART_IRQHandler+0x70>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800524e:	f000 0280 	and.w	r2, r0, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005252:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8005256:	430a      	orrs	r2, r1
 8005258:	f040 8156 	bne.w	8005508 <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800525c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005260:	d003      	beq.n	800526a <HAL_UART_IRQHandler+0x7e>
 8005262:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005266:	f040 8156 	bne.w	8005516 <HAL_UART_IRQHandler+0x32a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800526a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800526e:	d003      	beq.n	8005278 <HAL_UART_IRQHandler+0x8c>
 8005270:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005274:	f040 8161 	bne.w	800553a <HAL_UART_IRQHandler+0x34e>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005278:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800527c:	d002      	beq.n	8005284 <HAL_UART_IRQHandler+0x98>
 800527e:	2800      	cmp	r0, #0
 8005280:	f2c0 815f 	blt.w	8005542 <HAL_UART_IRQHandler+0x356>
}
 8005284:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005286:	f013 0f01 	tst.w	r3, #1
 800528a:	d009      	beq.n	80052a0 <HAL_UART_IRQHandler+0xb4>
 800528c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005290:	d006      	beq.n	80052a0 <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005292:	2601      	movs	r6, #1
 8005294:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005296:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800529a:	4332      	orrs	r2, r6
 800529c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052a0:	f013 0f02 	tst.w	r3, #2
 80052a4:	d00f      	beq.n	80052c6 <HAL_UART_IRQHandler+0xda>
 80052a6:	f011 0f01 	tst.w	r1, #1
 80052aa:	d01b      	beq.n	80052e4 <HAL_UART_IRQHandler+0xf8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052ac:	6822      	ldr	r2, [r4, #0]
 80052ae:	2602      	movs	r6, #2
 80052b0:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052b2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80052b6:	f042 0204 	orr.w	r2, r2, #4
 80052ba:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052be:	f013 0f04 	tst.w	r3, #4
 80052c2:	d106      	bne.n	80052d2 <HAL_UART_IRQHandler+0xe6>
 80052c4:	e00e      	b.n	80052e4 <HAL_UART_IRQHandler+0xf8>
 80052c6:	f013 0f04 	tst.w	r3, #4
 80052ca:	d00b      	beq.n	80052e4 <HAL_UART_IRQHandler+0xf8>
 80052cc:	f011 0f01 	tst.w	r1, #1
 80052d0:	d008      	beq.n	80052e4 <HAL_UART_IRQHandler+0xf8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052d2:	6822      	ldr	r2, [r4, #0]
 80052d4:	2604      	movs	r6, #4
 80052d6:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052d8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80052dc:	f042 0202 	orr.w	r2, r2, #2
 80052e0:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052e4:	f013 0f08 	tst.w	r3, #8
 80052e8:	d00b      	beq.n	8005302 <HAL_UART_IRQHandler+0x116>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052ea:	f000 0220 	and.w	r2, r0, #32
 80052ee:	432a      	orrs	r2, r5
 80052f0:	d007      	beq.n	8005302 <HAL_UART_IRQHandler+0x116>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052f2:	6822      	ldr	r2, [r4, #0]
 80052f4:	2508      	movs	r5, #8
 80052f6:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052f8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80052fc:	432a      	orrs	r2, r5
 80052fe:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005302:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005306:	d00c      	beq.n	8005322 <HAL_UART_IRQHandler+0x136>
 8005308:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800530c:	d009      	beq.n	8005322 <HAL_UART_IRQHandler+0x136>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800530e:	6822      	ldr	r2, [r4, #0]
 8005310:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8005314:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005316:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800531a:	f042 0220 	orr.w	r2, r2, #32
 800531e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005322:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005326:	2a00      	cmp	r2, #0
 8005328:	d0ac      	beq.n	8005284 <HAL_UART_IRQHandler+0x98>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800532a:	f013 0f20 	tst.w	r3, #32
 800532e:	d00a      	beq.n	8005346 <HAL_UART_IRQHandler+0x15a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005330:	f000 0020 	and.w	r0, r0, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005334:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8005338:	ea50 0301 	orrs.w	r3, r0, r1
 800533c:	d003      	beq.n	8005346 <HAL_UART_IRQHandler+0x15a>
        if (huart->RxISR != NULL)
 800533e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005340:	b10b      	cbz	r3, 8005346 <HAL_UART_IRQHandler+0x15a>
          huart->RxISR(huart);
 8005342:	4620      	mov	r0, r4
 8005344:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8005346:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800534a:	6822      	ldr	r2, [r4, #0]
 800534c:	6892      	ldr	r2, [r2, #8]
 800534e:	f002 0240 	and.w	r2, r2, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005352:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005356:	4313      	orrs	r3, r2
 8005358:	d029      	beq.n	80053ae <HAL_UART_IRQHandler+0x1c2>
        UART_EndRxTransfer(huart);
 800535a:	4620      	mov	r0, r4
 800535c:	f7ff fe59 	bl	8005012 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005368:	d01d      	beq.n	80053a6 <HAL_UART_IRQHandler+0x1ba>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800536a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536c:	f102 0308 	add.w	r3, r2, #8
 8005370:	e853 3f00 	ldrex	r3, [r3]
 8005374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005378:	3208      	adds	r2, #8
 800537a:	e842 3100 	strex	r1, r3, [r2]
 800537e:	2900      	cmp	r1, #0
 8005380:	d1f3      	bne.n	800536a <HAL_UART_IRQHandler+0x17e>
          if (huart->hdmarx != NULL)
 8005382:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005384:	b15b      	cbz	r3, 800539e <HAL_UART_IRQHandler+0x1b2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005386:	4a5f      	ldr	r2, [pc, #380]	; (8005504 <HAL_UART_IRQHandler+0x318>)
 8005388:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800538a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800538c:	f7fd fd78 	bl	8002e80 <HAL_DMA_Abort_IT>
 8005390:	2800      	cmp	r0, #0
 8005392:	f43f af77 	beq.w	8005284 <HAL_UART_IRQHandler+0x98>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005396:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005398:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800539a:	4798      	blx	r3
 800539c:	e772      	b.n	8005284 <HAL_UART_IRQHandler+0x98>
            HAL_UART_ErrorCallback(huart);
 800539e:	4620      	mov	r0, r4
 80053a0:	f7ff feed 	bl	800517e <HAL_UART_ErrorCallback>
 80053a4:	e76e      	b.n	8005284 <HAL_UART_IRQHandler+0x98>
          HAL_UART_ErrorCallback(huart);
 80053a6:	4620      	mov	r0, r4
 80053a8:	f7ff fee9 	bl	800517e <HAL_UART_ErrorCallback>
 80053ac:	e76a      	b.n	8005284 <HAL_UART_IRQHandler+0x98>
        HAL_UART_ErrorCallback(huart);
 80053ae:	4620      	mov	r0, r4
 80053b0:	f7ff fee5 	bl	800517e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b4:	2300      	movs	r3, #0
 80053b6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80053ba:	e763      	b.n	8005284 <HAL_UART_IRQHandler+0x98>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80053bc:	f013 0f10 	tst.w	r3, #16
 80053c0:	f43f af3b 	beq.w	800523a <HAL_UART_IRQHandler+0x4e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80053c4:	f010 0f10 	tst.w	r0, #16
 80053c8:	f43f af37 	beq.w	800523a <HAL_UART_IRQHandler+0x4e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053cc:	2310      	movs	r3, #16
 80053ce:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80053d8:	d04e      	beq.n	8005478 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053da:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80053dc:	6813      	ldr	r3, [r2, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f43f af4e 	beq.w	8005284 <HAL_UART_IRQHandler+0x98>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80053e8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80053ec:	4299      	cmp	r1, r3
 80053ee:	f67f af49 	bls.w	8005284 <HAL_UART_IRQHandler+0x98>
        huart->RxXferCount = nb_remaining_rx_data;
 80053f2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80053f6:	6813      	ldr	r3, [r2, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f013 0f20 	tst.w	r3, #32
 80053fe:	d131      	bne.n	8005464 <HAL_UART_IRQHandler+0x278>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005400:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005402:	e852 3f00 	ldrex	r3, [r2]
 8005406:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540a:	e842 3100 	strex	r1, r3, [r2]
 800540e:	2900      	cmp	r1, #0
 8005410:	d1f6      	bne.n	8005400 <HAL_UART_IRQHandler+0x214>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005412:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005414:	f102 0308 	add.w	r3, r2, #8
 8005418:	e853 3f00 	ldrex	r3, [r3]
 800541c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005420:	3208      	adds	r2, #8
 8005422:	e842 3100 	strex	r1, r3, [r2]
 8005426:	2900      	cmp	r1, #0
 8005428:	d1f3      	bne.n	8005412 <HAL_UART_IRQHandler+0x226>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800542a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542c:	f102 0308 	add.w	r3, r2, #8
 8005430:	e853 3f00 	ldrex	r3, [r3]
 8005434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005438:	3208      	adds	r2, #8
 800543a:	e842 3100 	strex	r1, r3, [r2]
 800543e:	2900      	cmp	r1, #0
 8005440:	d1f3      	bne.n	800542a <HAL_UART_IRQHandler+0x23e>
          huart->RxState = HAL_UART_STATE_READY;
 8005442:	2320      	movs	r3, #32
 8005444:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005448:	2300      	movs	r3, #0
 800544a:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800544c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544e:	e852 3f00 	ldrex	r3, [r2]
 8005452:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005456:	e842 3100 	strex	r1, r3, [r2]
 800545a:	2900      	cmp	r1, #0
 800545c:	d1f6      	bne.n	800544c <HAL_UART_IRQHandler+0x260>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800545e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005460:	f7fd fcd4 	bl	8002e0c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005464:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005468:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800546c:	1ac9      	subs	r1, r1, r3
 800546e:	b289      	uxth	r1, r1
 8005470:	4620      	mov	r0, r4
 8005472:	f7fb fea1 	bl	80011b8 <HAL_UARTEx_RxEventCallback>
 8005476:	e705      	b.n	8005284 <HAL_UART_IRQHandler+0x98>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005478:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800547c:	b29a      	uxth	r2, r3
      if (  (huart->RxXferCount > 0U)
 800547e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005482:	b29b      	uxth	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	f43f aefd 	beq.w	8005284 <HAL_UART_IRQHandler+0x98>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800548a:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 800548e:	1a9b      	subs	r3, r3, r2
 8005490:	b299      	uxth	r1, r3
          &&(nb_rx_data > 0U) )
 8005492:	2900      	cmp	r1, #0
 8005494:	f43f aef6 	beq.w	8005284 <HAL_UART_IRQHandler+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005498:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	e852 3f00 	ldrex	r3, [r2]
 800549e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a2:	e842 3000 	strex	r0, r3, [r2]
 80054a6:	2800      	cmp	r0, #0
 80054a8:	d1f6      	bne.n	8005498 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054aa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ac:	f102 0308 	add.w	r3, r2, #8
 80054b0:	e853 3f00 	ldrex	r3, [r3]
 80054b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	3208      	adds	r2, #8
 80054be:	e842 3000 	strex	r0, r3, [r2]
 80054c2:	2800      	cmp	r0, #0
 80054c4:	d1f1      	bne.n	80054aa <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 80054c6:	2320      	movs	r3, #32
 80054c8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054cc:	2300      	movs	r3, #0
 80054ce:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80054d0:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	e852 3f00 	ldrex	r3, [r2]
 80054d8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	e842 3000 	strex	r0, r3, [r2]
 80054e0:	2800      	cmp	r0, #0
 80054e2:	d1f6      	bne.n	80054d2 <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054e4:	4620      	mov	r0, r4
 80054e6:	f7fb fe67 	bl	80011b8 <HAL_UARTEx_RxEventCallback>
 80054ea:	e6cb      	b.n	8005284 <HAL_UART_IRQHandler+0x98>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80054ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80054f0:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80054f2:	4620      	mov	r0, r4
 80054f4:	f000 fefc 	bl	80062f0 <HAL_UARTEx_WakeupCallback>
    return;
 80054f8:	e6c4      	b.n	8005284 <HAL_UART_IRQHandler+0x98>
 80054fa:	bf00      	nop
 80054fc:	10000001 	.word	0x10000001
 8005500:	04000120 	.word	0x04000120
 8005504:	080051d9 	.word	0x080051d9
    if (huart->TxISR != NULL)
 8005508:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800550a:	2b00      	cmp	r3, #0
 800550c:	f43f aeba 	beq.w	8005284 <HAL_UART_IRQHandler+0x98>
      huart->TxISR(huart);
 8005510:	4620      	mov	r0, r4
 8005512:	4798      	blx	r3
 8005514:	e6b6      	b.n	8005284 <HAL_UART_IRQHandler+0x98>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005516:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005518:	e852 3f00 	ldrex	r3, [r2]
 800551c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005520:	e842 3100 	strex	r1, r3, [r2]
 8005524:	2900      	cmp	r1, #0
 8005526:	d1f6      	bne.n	8005516 <HAL_UART_IRQHandler+0x32a>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005528:	2320      	movs	r3, #32
 800552a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800552e:	2300      	movs	r3, #0
 8005530:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005532:	4620      	mov	r0, r4
 8005534:	f7fc fc5a 	bl	8001dec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005538:	e6a4      	b.n	8005284 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800553a:	4620      	mov	r0, r4
 800553c:	f000 feda 	bl	80062f4 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8005540:	e6a0      	b.n	8005284 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005542:	4620      	mov	r0, r4
 8005544:	f000 fed5 	bl	80062f2 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8005548:	e69c      	b.n	8005284 <HAL_UART_IRQHandler+0x98>
 800554a:	bf00      	nop

0800554c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800554c:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800554e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005552:	2b22      	cmp	r3, #34	; 0x22
 8005554:	d005      	beq.n	8005562 <UART_RxISR_8BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005556:	6802      	ldr	r2, [r0, #0]
 8005558:	6993      	ldr	r3, [r2, #24]
 800555a:	f043 0308 	orr.w	r3, r3, #8
 800555e:	6193      	str	r3, [r2, #24]
  }
}
 8005560:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005562:	6803      	ldr	r3, [r0, #0]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005566:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8005568:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
 800556c:	400b      	ands	r3, r1
 800556e:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8005570:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005572:	3301      	adds	r3, #1
 8005574:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005576:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800557a:	3b01      	subs	r3, #1
 800557c:	b29b      	uxth	r3, r3
 800557e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8005582:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005586:	b29b      	uxth	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1e9      	bne.n	8005560 <UART_RxISR_8BIT+0x14>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800558c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558e:	e852 3f00 	ldrex	r3, [r2]
 8005592:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	e842 3100 	strex	r1, r3, [r2]
 800559a:	2900      	cmp	r1, #0
 800559c:	d1f6      	bne.n	800558c <UART_RxISR_8BIT+0x40>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800559e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a0:	f102 0308 	add.w	r3, r2, #8
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	3208      	adds	r2, #8
 80055ae:	e842 3100 	strex	r1, r3, [r2]
 80055b2:	2900      	cmp	r1, #0
 80055b4:	d1f3      	bne.n	800559e <UART_RxISR_8BIT+0x52>
      huart->RxState = HAL_UART_STATE_READY;
 80055b6:	2320      	movs	r3, #32
 80055b8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 80055bc:	2300      	movs	r3, #0
 80055be:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055c0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d116      	bne.n	80055f4 <UART_RxISR_8BIT+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c6:	2300      	movs	r3, #0
 80055c8:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ca:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055cc:	e852 3f00 	ldrex	r3, [r2]
 80055d0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d4:	e842 3100 	strex	r1, r3, [r2]
 80055d8:	2900      	cmp	r1, #0
 80055da:	d1f6      	bne.n	80055ca <UART_RxISR_8BIT+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055dc:	6803      	ldr	r3, [r0, #0]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	f012 0f10 	tst.w	r2, #16
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055e4:	bf1c      	itt	ne
 80055e6:	2210      	movne	r2, #16
 80055e8:	621a      	strne	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055ea:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80055ee:	f7fb fde3 	bl	80011b8 <HAL_UARTEx_RxEventCallback>
 80055f2:	e7b5      	b.n	8005560 <UART_RxISR_8BIT+0x14>
        HAL_UART_RxCpltCallback(huart);
 80055f4:	f7fc fc0a 	bl	8001e0c <HAL_UART_RxCpltCallback>
 80055f8:	e7b2      	b.n	8005560 <UART_RxISR_8BIT+0x14>

080055fa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80055fa:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055fc:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005600:	2b22      	cmp	r3, #34	; 0x22
 8005602:	d005      	beq.n	8005610 <UART_RxISR_16BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005604:	6802      	ldr	r2, [r0, #0]
 8005606:	6993      	ldr	r3, [r2, #24]
 8005608:	f043 0308 	orr.w	r3, r3, #8
 800560c:	6193      	str	r3, [r2, #24]
  }
}
 800560e:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005610:	6803      	ldr	r3, [r0, #0]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005614:	6d82      	ldr	r2, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8005616:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
 800561a:	400b      	ands	r3, r1
 800561c:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 800561e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005620:	3302      	adds	r3, #2
 8005622:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005624:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005628:	3b01      	subs	r3, #1
 800562a:	b29b      	uxth	r3, r3
 800562c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8005630:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e9      	bne.n	800560e <UART_RxISR_16BIT+0x14>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800563a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563c:	e852 3f00 	ldrex	r3, [r2]
 8005640:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	e842 3100 	strex	r1, r3, [r2]
 8005648:	2900      	cmp	r1, #0
 800564a:	d1f6      	bne.n	800563a <UART_RxISR_16BIT+0x40>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564e:	f102 0308 	add.w	r3, r2, #8
 8005652:	e853 3f00 	ldrex	r3, [r3]
 8005656:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565a:	3208      	adds	r2, #8
 800565c:	e842 3100 	strex	r1, r3, [r2]
 8005660:	2900      	cmp	r1, #0
 8005662:	d1f3      	bne.n	800564c <UART_RxISR_16BIT+0x52>
      huart->RxState = HAL_UART_STATE_READY;
 8005664:	2320      	movs	r3, #32
 8005666:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 800566a:	2300      	movs	r3, #0
 800566c:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800566e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005670:	2b01      	cmp	r3, #1
 8005672:	d116      	bne.n	80056a2 <UART_RxISR_16BIT+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005674:	2300      	movs	r3, #0
 8005676:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005678:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567a:	e852 3f00 	ldrex	r3, [r2]
 800567e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	e842 3100 	strex	r1, r3, [r2]
 8005686:	2900      	cmp	r1, #0
 8005688:	d1f6      	bne.n	8005678 <UART_RxISR_16BIT+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800568a:	6803      	ldr	r3, [r0, #0]
 800568c:	69da      	ldr	r2, [r3, #28]
 800568e:	f012 0f10 	tst.w	r2, #16
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005692:	bf1c      	itt	ne
 8005694:	2210      	movne	r2, #16
 8005696:	621a      	strne	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005698:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800569c:	f7fb fd8c 	bl	80011b8 <HAL_UARTEx_RxEventCallback>
 80056a0:	e7b5      	b.n	800560e <UART_RxISR_16BIT+0x14>
        HAL_UART_RxCpltCallback(huart);
 80056a2:	f7fc fbb3 	bl	8001e0c <HAL_UART_RxCpltCallback>
 80056a6:	e7b2      	b.n	800560e <UART_RxISR_16BIT+0x14>

080056a8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80056a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80056ac:	6803      	ldr	r3, [r0, #0]
 80056ae:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80056b0:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80056b4:	689f      	ldr	r7, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056b6:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80056ba:	2a22      	cmp	r2, #34	; 0x22
 80056bc:	d005      	beq.n	80056ca <UART_RxISR_8BIT_FIFOEN+0x22>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056be:	699a      	ldr	r2, [r3, #24]
 80056c0:	f042 0208 	orr.w	r2, r2, #8
 80056c4:	619a      	str	r2, [r3, #24]
  }
}
 80056c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ca:	4604      	mov	r4, r0
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80056cc:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 80bc 	beq.w	800584e <UART_RxISR_8BIT_FIFOEN+0x1a6>
 80056d6:	f011 0f20 	tst.w	r1, #32
 80056da:	f000 8095 	beq.w	8005808 <UART_RxISR_8BIT_FIFOEN+0x160>
  uint16_t  uhMask = huart->Mask;
 80056de:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e2:	f04f 0800 	mov.w	r8, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056e6:	f04f 0a04 	mov.w	sl, #4
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056ea:	f007 0701 	and.w	r7, r7, #1
 80056ee:	e018      	b.n	8005722 <UART_RxISR_8BIT_FIFOEN+0x7a>
 80056f0:	f015 0f04 	tst.w	r5, #4
 80056f4:	d009      	beq.n	800570a <UART_RxISR_8BIT_FIFOEN+0x62>
 80056f6:	b147      	cbz	r7, 800570a <UART_RxISR_8BIT_FIFOEN+0x62>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	f8c3 a020 	str.w	sl, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056fe:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005702:	f043 0302 	orr.w	r3, r3, #2
 8005706:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800570a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800570e:	2b00      	cmp	r3, #0
 8005710:	d139      	bne.n	8005786 <UART_RxISR_8BIT_FIFOEN+0xde>
      if (huart->RxXferCount == 0U)
 8005712:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005716:	b29b      	uxth	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d03a      	beq.n	8005792 <UART_RxISR_8BIT_FIFOEN+0xea>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800571c:	f015 0f20 	tst.w	r5, #32
 8005720:	d072      	beq.n	8005808 <UART_RxISR_8BIT_FIFOEN+0x160>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005726:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005728:	4033      	ands	r3, r6
 800572a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800572c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800572e:	3301      	adds	r3, #1
 8005730:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8005732:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005736:	3b01      	subs	r3, #1
 8005738:	b29b      	uxth	r3, r3
 800573a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005742:	f015 0f07 	tst.w	r5, #7
 8005746:	d0e4      	beq.n	8005712 <UART_RxISR_8BIT_FIFOEN+0x6a>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005748:	f015 0f01 	tst.w	r5, #1
 800574c:	d009      	beq.n	8005762 <UART_RxISR_8BIT_FIFOEN+0xba>
 800574e:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005752:	d006      	beq.n	8005762 <UART_RxISR_8BIT_FIFOEN+0xba>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005754:	2201      	movs	r2, #1
 8005756:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005758:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005762:	f015 0f02 	tst.w	r5, #2
 8005766:	d0c3      	beq.n	80056f0 <UART_RxISR_8BIT_FIFOEN+0x48>
 8005768:	2f00      	cmp	r7, #0
 800576a:	d0ce      	beq.n	800570a <UART_RxISR_8BIT_FIFOEN+0x62>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	2202      	movs	r2, #2
 8005770:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005772:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005776:	f043 0304 	orr.w	r3, r3, #4
 800577a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800577e:	f015 0f04 	tst.w	r5, #4
 8005782:	d1b9      	bne.n	80056f8 <UART_RxISR_8BIT_FIFOEN+0x50>
 8005784:	e7c1      	b.n	800570a <UART_RxISR_8BIT_FIFOEN+0x62>
          HAL_UART_ErrorCallback(huart);
 8005786:	4620      	mov	r0, r4
 8005788:	f7ff fcf9 	bl	800517e <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800578c:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
 8005790:	e7bf      	b.n	8005712 <UART_RxISR_8BIT_FIFOEN+0x6a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005792:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	e852 3f00 	ldrex	r3, [r2]
 8005798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579c:	e842 3100 	strex	r1, r3, [r2]
 80057a0:	2900      	cmp	r1, #0
 80057a2:	d1f6      	bne.n	8005792 <UART_RxISR_8BIT_FIFOEN+0xea>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057a4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	f102 0308 	add.w	r3, r2, #8
 80057aa:	e853 3f00 	ldrex	r3, [r3]
 80057ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057b2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	3208      	adds	r2, #8
 80057b8:	e842 3100 	strex	r1, r3, [r2]
 80057bc:	2900      	cmp	r1, #0
 80057be:	d1f1      	bne.n	80057a4 <UART_RxISR_8BIT_FIFOEN+0xfc>
        huart->RxState = HAL_UART_STATE_READY;
 80057c0:	2320      	movs	r3, #32
 80057c2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 80057c6:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ca:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d003      	beq.n	80057d8 <UART_RxISR_8BIT_FIFOEN+0x130>
          HAL_UART_RxCpltCallback(huart);
 80057d0:	4620      	mov	r0, r4
 80057d2:	f7fc fb1b 	bl	8001e0c <HAL_UART_RxCpltCallback>
 80057d6:	e7a1      	b.n	800571c <UART_RxISR_8BIT_FIFOEN+0x74>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d8:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057dc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057de:	e852 3f00 	ldrex	r3, [r2]
 80057e2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	e842 3100 	strex	r1, r3, [r2]
 80057ea:	2900      	cmp	r1, #0
 80057ec:	d1f6      	bne.n	80057dc <UART_RxISR_8BIT_FIFOEN+0x134>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	69da      	ldr	r2, [r3, #28]
 80057f2:	f012 0f10 	tst.w	r2, #16
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057f6:	bf1c      	itt	ne
 80057f8:	2210      	movne	r2, #16
 80057fa:	621a      	strne	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057fc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005800:	4620      	mov	r0, r4
 8005802:	f7fb fcd9 	bl	80011b8 <HAL_UARTEx_RxEventCallback>
 8005806:	e789      	b.n	800571c <UART_RxISR_8BIT_FIFOEN+0x74>
    rxdatacount = huart->RxXferCount;
 8005808:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800580c:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800580e:	2b00      	cmp	r3, #0
 8005810:	f43f af59 	beq.w	80056c6 <UART_RxISR_8BIT_FIFOEN+0x1e>
 8005814:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8005818:	429a      	cmp	r2, r3
 800581a:	f67f af54 	bls.w	80056c6 <UART_RxISR_8BIT_FIFOEN+0x1e>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800581e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005820:	f102 0308 	add.w	r3, r2, #8
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582c:	3208      	adds	r2, #8
 800582e:	e842 3100 	strex	r1, r3, [r2]
 8005832:	2900      	cmp	r1, #0
 8005834:	d1f3      	bne.n	800581e <UART_RxISR_8BIT_FIFOEN+0x176>
      huart->RxISR = UART_RxISR_8BIT;
 8005836:	4b07      	ldr	r3, [pc, #28]	; (8005854 <UART_RxISR_8BIT_FIFOEN+0x1ac>)
 8005838:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800583a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	e852 3f00 	ldrex	r3, [r2]
 8005840:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005844:	e842 3100 	strex	r1, r3, [r2]
 8005848:	2900      	cmp	r1, #0
 800584a:	d1f6      	bne.n	800583a <UART_RxISR_8BIT_FIFOEN+0x192>
 800584c:	e73b      	b.n	80056c6 <UART_RxISR_8BIT_FIFOEN+0x1e>
    rxdatacount = huart->RxXferCount;
 800584e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005852:	e738      	b.n	80056c6 <UART_RxISR_8BIT_FIFOEN+0x1e>
 8005854:	0800554d 	.word	0x0800554d

08005858 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800585c:	6803      	ldr	r3, [r0, #0]
 800585e:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005860:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005864:	689f      	ldr	r7, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005866:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800586a:	2a22      	cmp	r2, #34	; 0x22
 800586c:	d005      	beq.n	800587a <UART_RxISR_16BIT_FIFOEN+0x22>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800586e:	699a      	ldr	r2, [r3, #24]
 8005870:	f042 0208 	orr.w	r2, r2, #8
 8005874:	619a      	str	r2, [r3, #24]
  }
}
 8005876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800587a:	4604      	mov	r4, r0
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800587c:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 80bc 	beq.w	80059fe <UART_RxISR_16BIT_FIFOEN+0x1a6>
 8005886:	f011 0f20 	tst.w	r1, #32
 800588a:	f000 8095 	beq.w	80059b8 <UART_RxISR_16BIT_FIFOEN+0x160>
  uint16_t  uhMask = huart->Mask;
 800588e:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005892:	f04f 0800 	mov.w	r8, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005896:	f04f 0a04 	mov.w	sl, #4
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800589a:	f007 0701 	and.w	r7, r7, #1
 800589e:	e018      	b.n	80058d2 <UART_RxISR_16BIT_FIFOEN+0x7a>
 80058a0:	f015 0f04 	tst.w	r5, #4
 80058a4:	d009      	beq.n	80058ba <UART_RxISR_16BIT_FIFOEN+0x62>
 80058a6:	b147      	cbz	r7, 80058ba <UART_RxISR_16BIT_FIFOEN+0x62>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	f8c3 a020 	str.w	sl, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058ae:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80058b2:	f043 0302 	orr.w	r3, r3, #2
 80058b6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058ba:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d139      	bne.n	8005936 <UART_RxISR_16BIT_FIFOEN+0xde>
      if (huart->RxXferCount == 0U)
 80058c2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d03a      	beq.n	8005942 <UART_RxISR_16BIT_FIFOEN+0xea>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80058cc:	f015 0f20 	tst.w	r5, #32
 80058d0:	d072      	beq.n	80059b8 <UART_RxISR_16BIT_FIFOEN+0x160>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80058d6:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 80058d8:	4033      	ands	r3, r6
 80058da:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80058dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058de:	3302      	adds	r3, #2
 80058e0:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80058e2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80058f2:	f015 0f07 	tst.w	r5, #7
 80058f6:	d0e4      	beq.n	80058c2 <UART_RxISR_16BIT_FIFOEN+0x6a>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80058f8:	f015 0f01 	tst.w	r5, #1
 80058fc:	d009      	beq.n	8005912 <UART_RxISR_16BIT_FIFOEN+0xba>
 80058fe:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005902:	d006      	beq.n	8005912 <UART_RxISR_16BIT_FIFOEN+0xba>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005904:	2201      	movs	r2, #1
 8005906:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005908:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005912:	f015 0f02 	tst.w	r5, #2
 8005916:	d0c3      	beq.n	80058a0 <UART_RxISR_16BIT_FIFOEN+0x48>
 8005918:	2f00      	cmp	r7, #0
 800591a:	d0ce      	beq.n	80058ba <UART_RxISR_16BIT_FIFOEN+0x62>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	2202      	movs	r2, #2
 8005920:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005922:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005926:	f043 0304 	orr.w	r3, r3, #4
 800592a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800592e:	f015 0f04 	tst.w	r5, #4
 8005932:	d1b9      	bne.n	80058a8 <UART_RxISR_16BIT_FIFOEN+0x50>
 8005934:	e7c1      	b.n	80058ba <UART_RxISR_16BIT_FIFOEN+0x62>
          HAL_UART_ErrorCallback(huart);
 8005936:	4620      	mov	r0, r4
 8005938:	f7ff fc21 	bl	800517e <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800593c:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
 8005940:	e7bf      	b.n	80058c2 <UART_RxISR_16BIT_FIFOEN+0x6a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005942:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005944:	e852 3f00 	ldrex	r3, [r2]
 8005948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594c:	e842 3100 	strex	r1, r3, [r2]
 8005950:	2900      	cmp	r1, #0
 8005952:	d1f6      	bne.n	8005942 <UART_RxISR_16BIT_FIFOEN+0xea>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005954:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	f102 0308 	add.w	r3, r2, #8
 800595a:	e853 3f00 	ldrex	r3, [r3]
 800595e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005962:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	3208      	adds	r2, #8
 8005968:	e842 3100 	strex	r1, r3, [r2]
 800596c:	2900      	cmp	r1, #0
 800596e:	d1f1      	bne.n	8005954 <UART_RxISR_16BIT_FIFOEN+0xfc>
        huart->RxState = HAL_UART_STATE_READY;
 8005970:	2320      	movs	r3, #32
 8005972:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8005976:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800597a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d003      	beq.n	8005988 <UART_RxISR_16BIT_FIFOEN+0x130>
          HAL_UART_RxCpltCallback(huart);
 8005980:	4620      	mov	r0, r4
 8005982:	f7fc fa43 	bl	8001e0c <HAL_UART_RxCpltCallback>
 8005986:	e7a1      	b.n	80058cc <UART_RxISR_16BIT_FIFOEN+0x74>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005988:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800598c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598e:	e852 3f00 	ldrex	r3, [r2]
 8005992:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005996:	e842 3100 	strex	r1, r3, [r2]
 800599a:	2900      	cmp	r1, #0
 800599c:	d1f6      	bne.n	800598c <UART_RxISR_16BIT_FIFOEN+0x134>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	69da      	ldr	r2, [r3, #28]
 80059a2:	f012 0f10 	tst.w	r2, #16
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059a6:	bf1c      	itt	ne
 80059a8:	2210      	movne	r2, #16
 80059aa:	621a      	strne	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059ac:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80059b0:	4620      	mov	r0, r4
 80059b2:	f7fb fc01 	bl	80011b8 <HAL_UARTEx_RxEventCallback>
 80059b6:	e789      	b.n	80058cc <UART_RxISR_16BIT_FIFOEN+0x74>
    rxdatacount = huart->RxXferCount;
 80059b8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80059bc:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f43f af59 	beq.w	8005876 <UART_RxISR_16BIT_FIFOEN+0x1e>
 80059c4:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80059c8:	429a      	cmp	r2, r3
 80059ca:	f67f af54 	bls.w	8005876 <UART_RxISR_16BIT_FIFOEN+0x1e>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80059ce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	f102 0308 	add.w	r3, r2, #8
 80059d4:	e853 3f00 	ldrex	r3, [r3]
 80059d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059dc:	3208      	adds	r2, #8
 80059de:	e842 3100 	strex	r1, r3, [r2]
 80059e2:	2900      	cmp	r1, #0
 80059e4:	d1f3      	bne.n	80059ce <UART_RxISR_16BIT_FIFOEN+0x176>
      huart->RxISR = UART_RxISR_16BIT;
 80059e6:	4b07      	ldr	r3, [pc, #28]	; (8005a04 <UART_RxISR_16BIT_FIFOEN+0x1ac>)
 80059e8:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80059ea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ec:	e852 3f00 	ldrex	r3, [r2]
 80059f0:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f4:	e842 3100 	strex	r1, r3, [r2]
 80059f8:	2900      	cmp	r1, #0
 80059fa:	d1f6      	bne.n	80059ea <UART_RxISR_16BIT_FIFOEN+0x192>
 80059fc:	e73b      	b.n	8005876 <UART_RxISR_16BIT_FIFOEN+0x1e>
    rxdatacount = huart->RxXferCount;
 80059fe:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005a02:	e738      	b.n	8005876 <UART_RxISR_16BIT_FIFOEN+0x1e>
 8005a04:	080055fb 	.word	0x080055fb

08005a08 <UART_DMARxHalfCplt>:
{
 8005a08:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a0a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a0c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d002      	beq.n	8005a18 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8005a12:	f7ff fbb3 	bl	800517c <HAL_UART_RxHalfCpltCallback>
}
 8005a16:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005a18:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005a1c:	0849      	lsrs	r1, r1, #1
 8005a1e:	f7fb fbcb 	bl	80011b8 <HAL_UARTEx_RxEventCallback>
 8005a22:	e7f8      	b.n	8005a16 <UART_DMARxHalfCplt+0xe>

08005a24 <UART_DMAReceiveCplt>:
{
 8005a24:	b508      	push	{r3, lr}
 8005a26:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a28:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f013 0f20 	tst.w	r3, #32
 8005a32:	d129      	bne.n	8005a88 <UART_DMAReceiveCplt+0x64>
    huart->RxXferCount = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a3a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	e852 3f00 	ldrex	r3, [r2]
 8005a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a44:	e842 3100 	strex	r1, r3, [r2]
 8005a48:	2900      	cmp	r1, #0
 8005a4a:	d1f6      	bne.n	8005a3a <UART_DMAReceiveCplt+0x16>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a4c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	f102 0308 	add.w	r3, r2, #8
 8005a52:	e853 3f00 	ldrex	r3, [r3]
 8005a56:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	3208      	adds	r2, #8
 8005a5c:	e842 3100 	strex	r1, r3, [r2]
 8005a60:	2900      	cmp	r1, #0
 8005a62:	d1f3      	bne.n	8005a4c <UART_DMAReceiveCplt+0x28>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a64:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a66:	f102 0308 	add.w	r3, r2, #8
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a72:	3208      	adds	r2, #8
 8005a74:	e842 3100 	strex	r1, r3, [r2]
 8005a78:	2900      	cmp	r1, #0
 8005a7a:	d1f3      	bne.n	8005a64 <UART_DMAReceiveCplt+0x40>
    huart->RxState = HAL_UART_STATE_READY;
 8005a7c:	2320      	movs	r3, #32
 8005a7e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a82:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d005      	beq.n	8005a94 <UART_DMAReceiveCplt+0x70>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a88:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d00c      	beq.n	8005aa8 <UART_DMAReceiveCplt+0x84>
    HAL_UART_RxCpltCallback(huart);
 8005a8e:	f7fc f9bd 	bl	8001e0c <HAL_UART_RxCpltCallback>
}
 8005a92:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a94:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a96:	e852 3f00 	ldrex	r3, [r2]
 8005a9a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9e:	e842 3100 	strex	r1, r3, [r2]
 8005aa2:	2900      	cmp	r1, #0
 8005aa4:	d1f6      	bne.n	8005a94 <UART_DMAReceiveCplt+0x70>
 8005aa6:	e7ef      	b.n	8005a88 <UART_DMAReceiveCplt+0x64>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005aa8:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005aac:	f7fb fb84 	bl	80011b8 <HAL_UARTEx_RxEventCallback>
 8005ab0:	e7ef      	b.n	8005a92 <UART_DMAReceiveCplt+0x6e>
	...

08005ab4 <UART_SetConfig>:
{
 8005ab4:	b570      	push	{r4, r5, r6, lr}
 8005ab6:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ab8:	6801      	ldr	r1, [r0, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005aba:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005abc:	68a3      	ldr	r3, [r4, #8]
 8005abe:	6922      	ldr	r2, [r4, #16]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	6962      	ldr	r2, [r4, #20]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	69e2      	ldr	r2, [r4, #28]
 8005ac8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005aca:	4aa9      	ldr	r2, [pc, #676]	; (8005d70 <UART_SetConfig+0x2bc>)
 8005acc:	4002      	ands	r2, r0
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ad2:	6822      	ldr	r2, [r4, #0]
 8005ad4:	6853      	ldr	r3, [r2, #4]
 8005ad6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005ada:	68e1      	ldr	r1, [r4, #12]
 8005adc:	430b      	orrs	r3, r1
 8005ade:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ae0:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ae2:	6822      	ldr	r2, [r4, #0]
 8005ae4:	4ba3      	ldr	r3, [pc, #652]	; (8005d74 <UART_SetConfig+0x2c0>)
 8005ae6:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8005ae8:	bf1c      	itt	ne
 8005aea:	6a23      	ldrne	r3, [r4, #32]
 8005aec:	4319      	orrne	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aee:	6893      	ldr	r3, [r2, #8]
 8005af0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005af4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005af8:	430b      	orrs	r3, r1
 8005afa:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005afc:	6822      	ldr	r2, [r4, #0]
 8005afe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005b00:	f023 030f 	bic.w	r3, r3, #15
 8005b04:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005b06:	430b      	orrs	r3, r1
 8005b08:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	4a9a      	ldr	r2, [pc, #616]	; (8005d78 <UART_SetConfig+0x2c4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d019      	beq.n	8005b46 <UART_SetConfig+0x92>
 8005b12:	4a9a      	ldr	r2, [pc, #616]	; (8005d7c <UART_SetConfig+0x2c8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d02c      	beq.n	8005b72 <UART_SetConfig+0xbe>
 8005b18:	4a96      	ldr	r2, [pc, #600]	; (8005d74 <UART_SetConfig+0x2c0>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d04a      	beq.n	8005bb4 <UART_SetConfig+0x100>
 8005b1e:	2210      	movs	r2, #16
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b20:	69e0      	ldr	r0, [r4, #28]
 8005b22:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005b26:	f000 80b8 	beq.w	8005c9a <UART_SetConfig+0x1e6>
    switch (clocksource)
 8005b2a:	2a08      	cmp	r2, #8
 8005b2c:	f200 8130 	bhi.w	8005d90 <UART_SetConfig+0x2dc>
 8005b30:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005b34:	010a00e8 	.word	0x010a00e8
 8005b38:	012e0110 	.word	0x012e0110
 8005b3c:	012e010d 	.word	0x012e010d
 8005b40:	012e012e 	.word	0x012e012e
 8005b44:	00e5      	.short	0x00e5
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8005b46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b4a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005b4e:	f002 0203 	and.w	r2, r2, #3
 8005b52:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b56:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8005b5a:	2a03      	cmp	r2, #3
 8005b5c:	d807      	bhi.n	8005b6e <UART_SetConfig+0xba>
 8005b5e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005b62:	0070      	.short	0x0070
 8005b64:	011d0004 	.word	0x011d0004
 8005b68:	011f      	.short	0x011f
 8005b6a:	2204      	movs	r2, #4
 8005b6c:	e7d8      	b.n	8005b20 <UART_SetConfig+0x6c>
 8005b6e:	2210      	movs	r2, #16
 8005b70:	e7d6      	b.n	8005b20 <UART_SetConfig+0x6c>
 8005b72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b76:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005b7a:	f002 020c 	and.w	r2, r2, #12
 8005b7e:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8005b82:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8005b86:	2a0c      	cmp	r2, #12
 8005b88:	d812      	bhi.n	8005bb0 <UART_SetConfig+0xfc>
 8005b8a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005b8e:	0077      	.short	0x0077
 8005b90:	00110011 	.word	0x00110011
 8005b94:	000d0011 	.word	0x000d0011
 8005b98:	00110011 	.word	0x00110011
 8005b9c:	010b0011 	.word	0x010b0011
 8005ba0:	00110011 	.word	0x00110011
 8005ba4:	000f0011 	.word	0x000f0011
 8005ba8:	2204      	movs	r2, #4
 8005baa:	e7b9      	b.n	8005b20 <UART_SetConfig+0x6c>
 8005bac:	2208      	movs	r2, #8
 8005bae:	e7b7      	b.n	8005b20 <UART_SetConfig+0x6c>
 8005bb0:	2210      	movs	r2, #16
 8005bb2:	e7b5      	b.n	8005b20 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005bc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bc4:	d064      	beq.n	8005c90 <UART_SetConfig+0x1dc>
 8005bc6:	d80a      	bhi.n	8005bde <UART_SetConfig+0x12a>
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d05b      	beq.n	8005c84 <UART_SetConfig+0x1d0>
 8005bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd0:	bf18      	it	ne
 8005bd2:	2001      	movne	r0, #1
 8005bd4:	f040 80af 	bne.w	8005d36 <UART_SetConfig+0x282>
        pclk = HAL_RCC_GetSysClockFreq();
 8005bd8:	f7fd fdfc 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
        break;
 8005bdc:	e054      	b.n	8005c88 <UART_SetConfig+0x1d4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005be2:	d12c      	bne.n	8005c3e <UART_SetConfig+0x18a>
 8005be4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005be8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005bea:	4b65      	ldr	r3, [pc, #404]	; (8005d80 <UART_SetConfig+0x2cc>)
 8005bec:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005bf0:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bf4:	6865      	ldr	r5, [r4, #4]
 8005bf6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8005bfa:	4299      	cmp	r1, r3
 8005bfc:	f200 80ae 	bhi.w	8005d5c <UART_SetConfig+0x2a8>
 8005c00:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8005c04:	f200 80ac 	bhi.w	8005d60 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c08:	2600      	movs	r6, #0
 8005c0a:	4633      	mov	r3, r6
 8005c0c:	4631      	mov	r1, r6
 8005c0e:	f7fa fe5b 	bl	80008c8 <__aeabi_uldivmod>
 8005c12:	0209      	lsls	r1, r1, #8
 8005c14:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8005c18:	0200      	lsls	r0, r0, #8
 8005c1a:	086b      	lsrs	r3, r5, #1
 8005c1c:	18c0      	adds	r0, r0, r3
 8005c1e:	462a      	mov	r2, r5
 8005c20:	4633      	mov	r3, r6
 8005c22:	f141 0100 	adc.w	r1, r1, #0
 8005c26:	f7fa fe4f 	bl	80008c8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c2a:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8005c2e:	4b55      	ldr	r3, [pc, #340]	; (8005d84 <UART_SetConfig+0x2d0>)
 8005c30:	429a      	cmp	r2, r3
 8005c32:	f200 8097 	bhi.w	8005d64 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	60d8      	str	r0, [r3, #12]
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	e07b      	b.n	8005d36 <UART_SetConfig+0x282>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c3e:	2001      	movs	r0, #1
 8005c40:	e079      	b.n	8005d36 <UART_SetConfig+0x282>
 8005c42:	2201      	movs	r2, #1
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c44:	494b      	ldr	r1, [pc, #300]	; (8005d74 <UART_SetConfig+0x2c0>)
 8005c46:	428b      	cmp	r3, r1
 8005c48:	f47f af6a 	bne.w	8005b20 <UART_SetConfig+0x6c>
    switch (clocksource)
 8005c4c:	2a08      	cmp	r2, #8
 8005c4e:	f200 8083 	bhi.w	8005d58 <UART_SetConfig+0x2a4>
 8005c52:	a301      	add	r3, pc, #4	; (adr r3, 8005c58 <UART_SetConfig+0x1a4>)
 8005c54:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8005c58:	08005c85 	.word	0x08005c85
 8005c5c:	08005d59 	.word	0x08005d59
 8005c60:	08005c81 	.word	0x08005c81
 8005c64:	08005d59 	.word	0x08005d59
 8005c68:	08005bd9 	.word	0x08005bd9
 8005c6c:	08005d59 	.word	0x08005d59
 8005c70:	08005d59 	.word	0x08005d59
 8005c74:	08005d59 	.word	0x08005d59
 8005c78:	08005c95 	.word	0x08005c95
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	e7e1      	b.n	8005c44 <UART_SetConfig+0x190>
    switch (clocksource)
 8005c80:	4841      	ldr	r0, [pc, #260]	; (8005d88 <UART_SetConfig+0x2d4>)
 8005c82:	e7b1      	b.n	8005be8 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c84:	f7fe fa8c 	bl	80041a0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	d1ad      	bne.n	8005be8 <UART_SetConfig+0x134>
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	e052      	b.n	8005d36 <UART_SetConfig+0x282>
        pclk = (uint32_t) HSI_VALUE;
 8005c90:	483d      	ldr	r0, [pc, #244]	; (8005d88 <UART_SetConfig+0x2d4>)
 8005c92:	e7a9      	b.n	8005be8 <UART_SetConfig+0x134>
        pclk = (uint32_t) LSE_VALUE;
 8005c94:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005c98:	e7a6      	b.n	8005be8 <UART_SetConfig+0x134>
    switch (clocksource)
 8005c9a:	2a08      	cmp	r2, #8
 8005c9c:	d864      	bhi.n	8005d68 <UART_SetConfig+0x2b4>
 8005c9e:	e8df f002 	tbb	[pc, r2]
 8005ca2:	2605      	.short	0x2605
 8005ca4:	6329632c 	.word	0x6329632c
 8005ca8:	6363      	.short	0x6363
 8005caa:	09          	.byte	0x09
 8005cab:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cac:	f7fe fa78 	bl	80041a0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	d05b      	beq.n	8005d6c <UART_SetConfig+0x2b8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cb4:	6862      	ldr	r2, [r4, #4]
 8005cb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005cb8:	4b31      	ldr	r3, [pc, #196]	; (8005d80 <UART_SetConfig+0x2cc>)
 8005cba:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005cbe:	fbb0 f0f3 	udiv	r0, r0, r3
 8005cc2:	0853      	lsrs	r3, r2, #1
 8005cc4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005cc8:	fbb0 f0f2 	udiv	r0, r0, r2
 8005ccc:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cce:	f1a3 0110 	sub.w	r1, r3, #16
 8005cd2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005cd6:	4291      	cmp	r1, r2
 8005cd8:	d858      	bhi.n	8005d8c <UART_SetConfig+0x2d8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cda:	f020 000f 	bic.w	r0, r0, #15
 8005cde:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8005ce0:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ce2:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8005ce6:	4318      	orrs	r0, r3
 8005ce8:	60d0      	str	r0, [r2, #12]
 8005cea:	2000      	movs	r0, #0
 8005cec:	e023      	b.n	8005d36 <UART_SetConfig+0x282>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cee:	f7fe fa67 	bl	80041c0 <HAL_RCC_GetPCLK2Freq>
        break;
 8005cf2:	e7dd      	b.n	8005cb0 <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetSysClockFreq();
 8005cf4:	f7fd fd6e 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
        break;
 8005cf8:	e7da      	b.n	8005cb0 <UART_SetConfig+0x1fc>
        pclk = (uint32_t) HSI_VALUE;
 8005cfa:	4823      	ldr	r0, [pc, #140]	; (8005d88 <UART_SetConfig+0x2d4>)
 8005cfc:	e7da      	b.n	8005cb4 <UART_SetConfig+0x200>
    switch (clocksource)
 8005cfe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005d02:	e003      	b.n	8005d0c <UART_SetConfig+0x258>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d04:	f7fe fa4c 	bl	80041a0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	d043      	beq.n	8005d94 <UART_SetConfig+0x2e0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d0c:	6863      	ldr	r3, [r4, #4]
 8005d0e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005d10:	4a1b      	ldr	r2, [pc, #108]	; (8005d80 <UART_SetConfig+0x2cc>)
 8005d12:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8005d16:	fbb0 f0f2 	udiv	r0, r0, r2
 8005d1a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005d1e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005d22:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d24:	f1a0 0210 	sub.w	r2, r0, #16
 8005d28:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d833      	bhi.n	8005d98 <UART_SetConfig+0x2e4>
        huart->Instance->BRR = usartdiv;
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	60d8      	str	r0, [r3, #12]
 8005d34:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8005d36:	2301      	movs	r3, #1
 8005d38:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d3c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8005d40:	2300      	movs	r3, #0
 8005d42:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8005d44:	6763      	str	r3, [r4, #116]	; 0x74
}
 8005d46:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d48:	f7fe fa3a 	bl	80041c0 <HAL_RCC_GetPCLK2Freq>
        break;
 8005d4c:	e7dc      	b.n	8005d08 <UART_SetConfig+0x254>
        pclk = HAL_RCC_GetSysClockFreq();
 8005d4e:	f7fd fd41 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
        break;
 8005d52:	e7d9      	b.n	8005d08 <UART_SetConfig+0x254>
        pclk = (uint32_t) HSI_VALUE;
 8005d54:	480c      	ldr	r0, [pc, #48]	; (8005d88 <UART_SetConfig+0x2d4>)
 8005d56:	e7d9      	b.n	8005d0c <UART_SetConfig+0x258>
    switch (clocksource)
 8005d58:	2001      	movs	r0, #1
 8005d5a:	e7ec      	b.n	8005d36 <UART_SetConfig+0x282>
        ret = HAL_ERROR;
 8005d5c:	2001      	movs	r0, #1
 8005d5e:	e7ea      	b.n	8005d36 <UART_SetConfig+0x282>
 8005d60:	2001      	movs	r0, #1
 8005d62:	e7e8      	b.n	8005d36 <UART_SetConfig+0x282>
          ret = HAL_ERROR;
 8005d64:	2001      	movs	r0, #1
 8005d66:	e7e6      	b.n	8005d36 <UART_SetConfig+0x282>
    switch (clocksource)
 8005d68:	2001      	movs	r0, #1
 8005d6a:	e7e4      	b.n	8005d36 <UART_SetConfig+0x282>
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	e7e2      	b.n	8005d36 <UART_SetConfig+0x282>
 8005d70:	cfff69f3 	.word	0xcfff69f3
 8005d74:	40008000 	.word	0x40008000
 8005d78:	40013800 	.word	0x40013800
 8005d7c:	40004400 	.word	0x40004400
 8005d80:	08010e68 	.word	0x08010e68
 8005d84:	000ffcff 	.word	0x000ffcff
 8005d88:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8005d8c:	2001      	movs	r0, #1
 8005d8e:	e7d2      	b.n	8005d36 <UART_SetConfig+0x282>
    switch (clocksource)
 8005d90:	2001      	movs	r0, #1
 8005d92:	e7d0      	b.n	8005d36 <UART_SetConfig+0x282>
 8005d94:	2000      	movs	r0, #0
 8005d96:	e7ce      	b.n	8005d36 <UART_SetConfig+0x282>
        ret = HAL_ERROR;
 8005d98:	2001      	movs	r0, #1
 8005d9a:	e7cc      	b.n	8005d36 <UART_SetConfig+0x282>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d9c:	2202      	movs	r2, #2
 8005d9e:	e6bf      	b.n	8005b20 <UART_SetConfig+0x6c>
 8005da0:	2208      	movs	r2, #8
 8005da2:	e6bd      	b.n	8005b20 <UART_SetConfig+0x6c>
 8005da4:	2202      	movs	r2, #2
 8005da6:	e6bb      	b.n	8005b20 <UART_SetConfig+0x6c>

08005da8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005da8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005daa:	f013 0f01 	tst.w	r3, #1
 8005dae:	d006      	beq.n	8005dbe <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005db0:	6802      	ldr	r2, [r0, #0]
 8005db2:	6853      	ldr	r3, [r2, #4]
 8005db4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005db8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005dba:	430b      	orrs	r3, r1
 8005dbc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dbe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005dc0:	f013 0f02 	tst.w	r3, #2
 8005dc4:	d006      	beq.n	8005dd4 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dc6:	6802      	ldr	r2, [r0, #0]
 8005dc8:	6853      	ldr	r3, [r2, #4]
 8005dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dce:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005dd0:	430b      	orrs	r3, r1
 8005dd2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dd4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005dd6:	f013 0f04 	tst.w	r3, #4
 8005dda:	d006      	beq.n	8005dea <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ddc:	6802      	ldr	r2, [r0, #0]
 8005dde:	6853      	ldr	r3, [r2, #4]
 8005de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005de4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005de6:	430b      	orrs	r3, r1
 8005de8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005dec:	f013 0f08 	tst.w	r3, #8
 8005df0:	d006      	beq.n	8005e00 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005df2:	6802      	ldr	r2, [r0, #0]
 8005df4:	6853      	ldr	r3, [r2, #4]
 8005df6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dfa:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005dfc:	430b      	orrs	r3, r1
 8005dfe:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e00:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005e02:	f013 0f10 	tst.w	r3, #16
 8005e06:	d006      	beq.n	8005e16 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e08:	6802      	ldr	r2, [r0, #0]
 8005e0a:	6893      	ldr	r3, [r2, #8]
 8005e0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e10:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005e12:	430b      	orrs	r3, r1
 8005e14:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e16:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005e18:	f013 0f20 	tst.w	r3, #32
 8005e1c:	d006      	beq.n	8005e2c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e1e:	6802      	ldr	r2, [r0, #0]
 8005e20:	6893      	ldr	r3, [r2, #8]
 8005e22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e26:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005e28:	430b      	orrs	r3, r1
 8005e2a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005e2e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005e32:	d00a      	beq.n	8005e4a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e34:	6802      	ldr	r2, [r0, #0]
 8005e36:	6853      	ldr	r3, [r2, #4]
 8005e38:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005e3c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005e3e:	430b      	orrs	r3, r1
 8005e40:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e42:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005e44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e48:	d00b      	beq.n	8005e62 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005e4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e50:	d006      	beq.n	8005e60 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e52:	6802      	ldr	r2, [r0, #0]
 8005e54:	6853      	ldr	r3, [r2, #4]
 8005e56:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005e5a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8005e5c:	430b      	orrs	r3, r1
 8005e5e:	6053      	str	r3, [r2, #4]
}
 8005e60:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e62:	6802      	ldr	r2, [r0, #0]
 8005e64:	6853      	ldr	r3, [r2, #4]
 8005e66:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005e6a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005e6c:	430b      	orrs	r3, r1
 8005e6e:	6053      	str	r3, [r2, #4]
 8005e70:	e7eb      	b.n	8005e4a <UART_AdvFeatureConfig+0xa2>

08005e72 <UART_WaitOnFlagUntilTimeout>:
{
 8005e72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e76:	4680      	mov	r8, r0
 8005e78:	460e      	mov	r6, r1
 8005e7a:	4615      	mov	r5, r2
 8005e7c:	4699      	mov	r9, r3
 8005e7e:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e80:	f8d8 2000 	ldr.w	r2, [r8]
 8005e84:	69d4      	ldr	r4, [r2, #28]
 8005e86:	ea36 0304 	bics.w	r3, r6, r4
 8005e8a:	bf0c      	ite	eq
 8005e8c:	f04f 0c01 	moveq.w	ip, #1
 8005e90:	f04f 0c00 	movne.w	ip, #0
 8005e94:	45ac      	cmp	ip, r5
 8005e96:	d15a      	bne.n	8005f4e <UART_WaitOnFlagUntilTimeout+0xdc>
    if (Timeout != HAL_MAX_DELAY)
 8005e98:	f1b7 3fff 	cmp.w	r7, #4294967295
 8005e9c:	d0f2      	beq.n	8005e84 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e9e:	f7fb fba3 	bl	80015e8 <HAL_GetTick>
 8005ea2:	eba0 0009 	sub.w	r0, r0, r9
 8005ea6:	42b8      	cmp	r0, r7
 8005ea8:	d830      	bhi.n	8005f0c <UART_WaitOnFlagUntilTimeout+0x9a>
 8005eaa:	b37f      	cbz	r7, 8005f0c <UART_WaitOnFlagUntilTimeout+0x9a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005eac:	f8d8 3000 	ldr.w	r3, [r8]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	f012 0f04 	tst.w	r2, #4
 8005eb6:	d0e3      	beq.n	8005e80 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005eb8:	69da      	ldr	r2, [r3, #28]
 8005eba:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005ebe:	d0df      	beq.n	8005e80 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ec4:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ec6:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eca:	e852 3f00 	ldrex	r3, [r2]
 8005ece:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed2:	e842 3100 	strex	r1, r3, [r2]
 8005ed6:	2900      	cmp	r1, #0
 8005ed8:	d1f5      	bne.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0x54>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eda:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ede:	f102 0308 	add.w	r3, r2, #8
 8005ee2:	e853 3f00 	ldrex	r3, [r3]
 8005ee6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eea:	3208      	adds	r2, #8
 8005eec:	e842 3100 	strex	r1, r3, [r2]
 8005ef0:	2900      	cmp	r1, #0
 8005ef2:	d1f2      	bne.n	8005eda <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 8005ef4:	2320      	movs	r3, #32
 8005ef6:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005efa:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005efe:	f8c8 308c 	str.w	r3, [r8, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8005f02:	2300      	movs	r3, #0
 8005f04:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
          return HAL_TIMEOUT;
 8005f08:	2003      	movs	r0, #3
 8005f0a:	e021      	b.n	8005f50 <UART_WaitOnFlagUntilTimeout+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f0c:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f10:	e852 3f00 	ldrex	r3, [r2]
 8005f14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f18:	e842 3100 	strex	r1, r3, [r2]
 8005f1c:	2900      	cmp	r1, #0
 8005f1e:	d1f5      	bne.n	8005f0c <UART_WaitOnFlagUntilTimeout+0x9a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f20:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f24:	f102 0308 	add.w	r3, r2, #8
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f30:	3208      	adds	r2, #8
 8005f32:	e842 3100 	strex	r1, r3, [r2]
 8005f36:	2900      	cmp	r1, #0
 8005f38:	d1f2      	bne.n	8005f20 <UART_WaitOnFlagUntilTimeout+0xae>
        huart->gState = HAL_UART_STATE_READY;
 8005f3a:	2320      	movs	r3, #32
 8005f3c:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005f40:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8005f44:	2300      	movs	r3, #0
 8005f46:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
        return HAL_TIMEOUT;
 8005f4a:	2003      	movs	r0, #3
 8005f4c:	e000      	b.n	8005f50 <UART_WaitOnFlagUntilTimeout+0xde>
  return HAL_OK;
 8005f4e:	2000      	movs	r0, #0
}
 8005f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005f54 <UART_CheckIdleState>:
{
 8005f54:	b530      	push	{r4, r5, lr}
 8005f56:	b083      	sub	sp, #12
 8005f58:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8005f60:	f7fb fb42 	bl	80015e8 <HAL_GetTick>
 8005f64:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f66:	6822      	ldr	r2, [r4, #0]
 8005f68:	6812      	ldr	r2, [r2, #0]
 8005f6a:	f012 0f08 	tst.w	r2, #8
 8005f6e:	d10f      	bne.n	8005f90 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f013 0f04 	tst.w	r3, #4
 8005f78:	d118      	bne.n	8005fac <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8005f7a:	2320      	movs	r3, #32
 8005f7c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005f80:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f84:	2000      	movs	r0, #0
 8005f86:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8005f88:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8005f8c:	b003      	add	sp, #12
 8005f8e:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	4603      	mov	r3, r0
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f7ff ff67 	bl	8005e72 <UART_WaitOnFlagUntilTimeout>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	d0e3      	beq.n	8005f70 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8005fa8:	2003      	movs	r0, #3
 8005faa:	e7ef      	b.n	8005f8c <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	462b      	mov	r3, r5
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f7ff ff59 	bl	8005e72 <UART_WaitOnFlagUntilTimeout>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d0da      	beq.n	8005f7a <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8005fc4:	2003      	movs	r0, #3
 8005fc6:	e7e1      	b.n	8005f8c <UART_CheckIdleState+0x38>

08005fc8 <HAL_UART_Init>:
  if (huart == NULL)
 8005fc8:	b378      	cbz	r0, 800602a <HAL_UART_Init+0x62>
{
 8005fca:	b510      	push	{r4, lr}
 8005fcc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005fce:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005fd2:	b30b      	cbz	r3, 8006018 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005fd4:	2324      	movs	r3, #36	; 0x24
 8005fd6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8005fda:	6822      	ldr	r2, [r4, #0]
 8005fdc:	6813      	ldr	r3, [r2, #0]
 8005fde:	f023 0301 	bic.w	r3, r3, #1
 8005fe2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	f7ff fd65 	bl	8005ab4 <UART_SetConfig>
 8005fea:	2801      	cmp	r0, #1
 8005fec:	d013      	beq.n	8006016 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005ff0:	b9bb      	cbnz	r3, 8006022 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ff2:	6822      	ldr	r2, [r4, #0]
 8005ff4:	6853      	ldr	r3, [r2, #4]
 8005ff6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005ffa:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ffc:	6822      	ldr	r2, [r4, #0]
 8005ffe:	6893      	ldr	r3, [r2, #8]
 8006000:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006004:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006006:	6822      	ldr	r2, [r4, #0]
 8006008:	6813      	ldr	r3, [r2, #0]
 800600a:	f043 0301 	orr.w	r3, r3, #1
 800600e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006010:	4620      	mov	r0, r4
 8006012:	f7ff ff9f 	bl	8005f54 <UART_CheckIdleState>
}
 8006016:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006018:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800601c:	f7fb fd38 	bl	8001a90 <HAL_UART_MspInit>
 8006020:	e7d8      	b.n	8005fd4 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8006022:	4620      	mov	r0, r4
 8006024:	f7ff fec0 	bl	8005da8 <UART_AdvFeatureConfig>
 8006028:	e7e3      	b.n	8005ff2 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800602a:	2001      	movs	r0, #1
}
 800602c:	4770      	bx	lr
	...

08006030 <UART_Start_Receive_IT>:
{
 8006030:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8006032:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006034:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006038:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 800603c:	2300      	movs	r3, #0
 800603e:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8006040:	6883      	ldr	r3, [r0, #8]
 8006042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006046:	d006      	beq.n	8006056 <UART_Start_Receive_IT+0x26>
 8006048:	b9a3      	cbnz	r3, 8006074 <UART_Start_Receive_IT+0x44>
 800604a:	6903      	ldr	r3, [r0, #16]
 800604c:	b973      	cbnz	r3, 800606c <UART_Start_Receive_IT+0x3c>
 800604e:	23ff      	movs	r3, #255	; 0xff
 8006050:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006054:	e014      	b.n	8006080 <UART_Start_Receive_IT+0x50>
 8006056:	6903      	ldr	r3, [r0, #16]
 8006058:	b923      	cbnz	r3, 8006064 <UART_Start_Receive_IT+0x34>
 800605a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800605e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006062:	e00d      	b.n	8006080 <UART_Start_Receive_IT+0x50>
 8006064:	23ff      	movs	r3, #255	; 0xff
 8006066:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800606a:	e009      	b.n	8006080 <UART_Start_Receive_IT+0x50>
 800606c:	237f      	movs	r3, #127	; 0x7f
 800606e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006072:	e005      	b.n	8006080 <UART_Start_Receive_IT+0x50>
 8006074:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006078:	d030      	beq.n	80060dc <UART_Start_Receive_IT+0xac>
 800607a:	2300      	movs	r3, #0
 800607c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006080:	2300      	movs	r3, #0
 8006082:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006086:	2322      	movs	r3, #34	; 0x22
 8006088:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800608c:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608e:	f101 0308 	add.w	r3, r1, #8
 8006092:	e853 3f00 	ldrex	r3, [r3]
 8006096:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609a:	3108      	adds	r1, #8
 800609c:	e841 3400 	strex	r4, r3, [r1]
 80060a0:	2c00      	cmp	r4, #0
 80060a2:	d1f3      	bne.n	800608c <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80060a4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80060a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060aa:	d021      	beq.n	80060f0 <UART_Start_Receive_IT+0xc0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ac:	6883      	ldr	r3, [r0, #8]
 80060ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b2:	d04a      	beq.n	800614a <UART_Start_Receive_IT+0x11a>
      huart->RxISR = UART_RxISR_8BIT;
 80060b4:	4b33      	ldr	r3, [pc, #204]	; (8006184 <UART_Start_Receive_IT+0x154>)
 80060b6:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 80060b8:	2300      	movs	r3, #0
 80060ba:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 80060be:	6903      	ldr	r3, [r0, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d055      	beq.n	8006170 <UART_Start_Receive_IT+0x140>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80060c4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	e852 3f00 	ldrex	r3, [r2]
 80060ca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	e842 3100 	strex	r1, r3, [r2]
 80060d2:	2900      	cmp	r1, #0
 80060d4:	d1f6      	bne.n	80060c4 <UART_Start_Receive_IT+0x94>
}
 80060d6:	2000      	movs	r0, #0
 80060d8:	bc10      	pop	{r4}
 80060da:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 80060dc:	6903      	ldr	r3, [r0, #16]
 80060de:	b91b      	cbnz	r3, 80060e8 <UART_Start_Receive_IT+0xb8>
 80060e0:	237f      	movs	r3, #127	; 0x7f
 80060e2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80060e6:	e7cb      	b.n	8006080 <UART_Start_Receive_IT+0x50>
 80060e8:	233f      	movs	r3, #63	; 0x3f
 80060ea:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80060ee:	e7c7      	b.n	8006080 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80060f0:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d8d9      	bhi.n	80060ac <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060f8:	6883      	ldr	r3, [r0, #8]
 80060fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060fe:	d01c      	beq.n	800613a <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006100:	4b21      	ldr	r3, [pc, #132]	; (8006188 <UART_Start_Receive_IT+0x158>)
 8006102:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8006104:	2300      	movs	r3, #0
 8006106:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 800610a:	6903      	ldr	r3, [r0, #16]
 800610c:	b143      	cbz	r3, 8006120 <UART_Start_Receive_IT+0xf0>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800610e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006110:	e852 3f00 	ldrex	r3, [r2]
 8006114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006118:	e842 3100 	strex	r1, r3, [r2]
 800611c:	2900      	cmp	r1, #0
 800611e:	d1f6      	bne.n	800610e <UART_Start_Receive_IT+0xde>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006120:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006122:	f102 0308 	add.w	r3, r2, #8
 8006126:	e853 3f00 	ldrex	r3, [r3]
 800612a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612e:	3208      	adds	r2, #8
 8006130:	e842 3100 	strex	r1, r3, [r2]
 8006134:	2900      	cmp	r1, #0
 8006136:	d1f3      	bne.n	8006120 <UART_Start_Receive_IT+0xf0>
 8006138:	e7cd      	b.n	80060d6 <UART_Start_Receive_IT+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800613a:	6903      	ldr	r3, [r0, #16]
 800613c:	b16b      	cbz	r3, 800615a <UART_Start_Receive_IT+0x12a>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800613e:	4b12      	ldr	r3, [pc, #72]	; (8006188 <UART_Start_Receive_IT+0x158>)
 8006140:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8006142:	2300      	movs	r3, #0
 8006144:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006148:	e7e1      	b.n	800610e <UART_Start_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800614a:	6903      	ldr	r3, [r0, #16]
 800614c:	b15b      	cbz	r3, 8006166 <UART_Start_Receive_IT+0x136>
      huart->RxISR = UART_RxISR_8BIT;
 800614e:	4b0d      	ldr	r3, [pc, #52]	; (8006184 <UART_Start_Receive_IT+0x154>)
 8006150:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8006152:	2300      	movs	r3, #0
 8006154:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006158:	e7b4      	b.n	80060c4 <UART_Start_Receive_IT+0x94>
 800615a:	4b0c      	ldr	r3, [pc, #48]	; (800618c <UART_Start_Receive_IT+0x15c>)
 800615c:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 800615e:	2300      	movs	r3, #0
 8006160:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006164:	e7dc      	b.n	8006120 <UART_Start_Receive_IT+0xf0>
 8006166:	4b0a      	ldr	r3, [pc, #40]	; (8006190 <UART_Start_Receive_IT+0x160>)
 8006168:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 800616a:	2300      	movs	r3, #0
 800616c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006170:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006172:	e852 3f00 	ldrex	r3, [r2]
 8006176:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617a:	e842 3100 	strex	r1, r3, [r2]
 800617e:	2900      	cmp	r1, #0
 8006180:	d1f6      	bne.n	8006170 <UART_Start_Receive_IT+0x140>
 8006182:	e7a8      	b.n	80060d6 <UART_Start_Receive_IT+0xa6>
 8006184:	0800554d 	.word	0x0800554d
 8006188:	080056a9 	.word	0x080056a9
 800618c:	08005859 	.word	0x08005859
 8006190:	080055fb 	.word	0x080055fb

08006194 <HAL_UART_Receive_IT>:
{
 8006194:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8006196:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800619a:	2b20      	cmp	r3, #32
 800619c:	d11e      	bne.n	80061dc <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 800619e:	b1f9      	cbz	r1, 80061e0 <HAL_UART_Receive_IT+0x4c>
 80061a0:	b302      	cbz	r2, 80061e4 <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 80061a2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d01e      	beq.n	80061e8 <HAL_UART_Receive_IT+0x54>
 80061aa:	2301      	movs	r3, #1
 80061ac:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b0:	2300      	movs	r3, #0
 80061b2:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80061b4:	6803      	ldr	r3, [r0, #0]
 80061b6:	4c0d      	ldr	r4, [pc, #52]	; (80061ec <HAL_UART_Receive_IT+0x58>)
 80061b8:	42a3      	cmp	r3, r4
 80061ba:	d00c      	beq.n	80061d6 <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80061c2:	d008      	beq.n	80061d6 <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061c4:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c6:	e854 3f00 	ldrex	r3, [r4]
 80061ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ce:	e844 3500 	strex	r5, r3, [r4]
 80061d2:	2d00      	cmp	r5, #0
 80061d4:	d1f6      	bne.n	80061c4 <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 80061d6:	f7ff ff2b 	bl	8006030 <UART_Start_Receive_IT>
 80061da:	e000      	b.n	80061de <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 80061dc:	2002      	movs	r0, #2
}
 80061de:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80061e0:	2001      	movs	r0, #1
 80061e2:	e7fc      	b.n	80061de <HAL_UART_Receive_IT+0x4a>
 80061e4:	2001      	movs	r0, #1
 80061e6:	e7fa      	b.n	80061de <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 80061e8:	2002      	movs	r0, #2
 80061ea:	e7f8      	b.n	80061de <HAL_UART_Receive_IT+0x4a>
 80061ec:	40008000 	.word	0x40008000

080061f0 <UART_Start_Receive_DMA>:
{
 80061f0:	b510      	push	{r4, lr}
 80061f2:	4604      	mov	r4, r0
 80061f4:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 80061f6:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 80061f8:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061fc:	2200      	movs	r2, #0
 80061fe:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006202:	2222      	movs	r2, #34	; 0x22
 8006204:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (huart->hdmarx != NULL)
 8006208:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800620a:	b18a      	cbz	r2, 8006230 <UART_Start_Receive_DMA+0x40>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800620c:	4922      	ldr	r1, [pc, #136]	; (8006298 <UART_Start_Receive_DMA+0xa8>)
 800620e:	62d1      	str	r1, [r2, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006210:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006212:	4922      	ldr	r1, [pc, #136]	; (800629c <UART_Start_Receive_DMA+0xac>)
 8006214:	6311      	str	r1, [r2, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006216:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006218:	4921      	ldr	r1, [pc, #132]	; (80062a0 <UART_Start_Receive_DMA+0xb0>)
 800621a:	6351      	str	r1, [r2, #52]	; 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 800621c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800621e:	2100      	movs	r1, #0
 8006220:	6391      	str	r1, [r2, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006222:	6801      	ldr	r1, [r0, #0]
 8006224:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8006226:	3124      	adds	r1, #36	; 0x24
 8006228:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800622a:	f7fc fda3 	bl	8002d74 <HAL_DMA_Start_IT>
 800622e:	bb38      	cbnz	r0, 8006280 <UART_Start_Receive_DMA+0x90>
  __HAL_UNLOCK(huart);
 8006230:	2300      	movs	r3, #0
 8006232:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006236:	6923      	ldr	r3, [r4, #16]
 8006238:	b143      	cbz	r3, 800624c <UART_Start_Receive_DMA+0x5c>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800623a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	e852 3f00 	ldrex	r3, [r2]
 8006240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006244:	e842 3100 	strex	r1, r3, [r2]
 8006248:	2900      	cmp	r1, #0
 800624a:	d1f6      	bne.n	800623a <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800624c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624e:	f102 0308 	add.w	r3, r2, #8
 8006252:	e853 3f00 	ldrex	r3, [r3]
 8006256:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625a:	3208      	adds	r2, #8
 800625c:	e842 3100 	strex	r1, r3, [r2]
 8006260:	2900      	cmp	r1, #0
 8006262:	d1f3      	bne.n	800624c <UART_Start_Receive_DMA+0x5c>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006264:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	f102 0308 	add.w	r3, r2, #8
 800626a:	e853 3f00 	ldrex	r3, [r3]
 800626e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006272:	3208      	adds	r2, #8
 8006274:	e842 3100 	strex	r1, r3, [r2]
 8006278:	2900      	cmp	r1, #0
 800627a:	d1f3      	bne.n	8006264 <UART_Start_Receive_DMA+0x74>
  return HAL_OK;
 800627c:	2000      	movs	r0, #0
}
 800627e:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006280:	2310      	movs	r3, #16
 8006282:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      __HAL_UNLOCK(huart);
 8006286:	2300      	movs	r3, #0
 8006288:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
      huart->RxState = HAL_UART_STATE_READY;
 800628c:	2320      	movs	r3, #32
 800628e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 8006292:	2001      	movs	r0, #1
 8006294:	e7f3      	b.n	800627e <UART_Start_Receive_DMA+0x8e>
 8006296:	bf00      	nop
 8006298:	08005a25 	.word	0x08005a25
 800629c:	08005a09 	.word	0x08005a09
 80062a0:	08005181 	.word	0x08005181

080062a4 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062a4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80062a6:	b92b      	cbnz	r3, 80062b4 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 80062a8:	2301      	movs	r3, #1
 80062aa:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80062ae:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 80062b2:	4770      	bx	lr
{
 80062b4:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062b6:	6803      	ldr	r3, [r0, #0]
 80062b8:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062ba:	6899      	ldr	r1, [r3, #8]
 80062bc:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062be:	4d0a      	ldr	r5, [pc, #40]	; (80062e8 <UARTEx_SetNbDataToProcess+0x44>)
 80062c0:	5c6b      	ldrb	r3, [r5, r1]
 80062c2:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80062c4:	4c09      	ldr	r4, [pc, #36]	; (80062ec <UARTEx_SetNbDataToProcess+0x48>)
 80062c6:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062c8:	fb93 f3f1 	sdiv	r3, r3, r1
 80062cc:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062d0:	f3c2 6242 	ubfx	r2, r2, #25, #3
 80062d4:	5cab      	ldrb	r3, [r5, r2]
 80062d6:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80062d8:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062da:	fb93 f3f2 	sdiv	r3, r3, r2
 80062de:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 80062e2:	bc30      	pop	{r4, r5}
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	08010e88 	.word	0x08010e88
 80062ec:	08010e80 	.word	0x08010e80

080062f0 <HAL_UARTEx_WakeupCallback>:
}
 80062f0:	4770      	bx	lr

080062f2 <HAL_UARTEx_RxFifoFullCallback>:
}
 80062f2:	4770      	bx	lr

080062f4 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 80062f4:	4770      	bx	lr

080062f6 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 80062f6:	b510      	push	{r4, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	ab04      	add	r3, sp, #16
 80062fc:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8006300:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006304:	2b01      	cmp	r3, #1
 8006306:	d041      	beq.n	800638c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x96>
 8006308:	4604      	mov	r4, r0
 800630a:	460a      	mov	r2, r1
 800630c:	2301      	movs	r3, #1
 800630e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006312:	2324      	movs	r3, #36	; 0x24
 8006314:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8006318:	6801      	ldr	r1, [r0, #0]
 800631a:	680b      	ldr	r3, [r1, #0]
 800631c:	f023 0301 	bic.w	r3, r3, #1
 8006320:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006322:	6801      	ldr	r1, [r0, #0]
 8006324:	688b      	ldr	r3, [r1, #8]
 8006326:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800632a:	4313      	orrs	r3, r2
 800632c:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800632e:	b1aa      	cbz	r2, 800635c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8006330:	6822      	ldr	r2, [r4, #0]
 8006332:	6813      	ldr	r3, [r2, #0]
 8006334:	f043 0301 	orr.w	r3, r3, #1
 8006338:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800633a:	f7fb f955 	bl	80015e8 <HAL_GetTick>
 800633e:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006340:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8006344:	9200      	str	r2, [sp, #0]
 8006346:	2200      	movs	r2, #0
 8006348:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800634c:	4620      	mov	r0, r4
 800634e:	f7ff fd90 	bl	8005e72 <UART_WaitOnFlagUntilTimeout>
 8006352:	b9a8      	cbnz	r0, 8006380 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x8a>
    huart->gState = HAL_UART_STATE_READY;
 8006354:	2320      	movs	r3, #32
 8006356:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800635a:	e012      	b.n	8006382 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x8c>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800635c:	f89d 000e 	ldrb.w	r0, [sp, #14]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8006360:	6821      	ldr	r1, [r4, #0]
 8006362:	684a      	ldr	r2, [r1, #4]
 8006364:	f022 0210 	bic.w	r2, r2, #16
 8006368:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800636c:	431a      	orrs	r2, r3
 800636e:	604a      	str	r2, [r1, #4]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8006370:	6822      	ldr	r2, [r4, #0]
 8006372:	6853      	ldr	r3, [r2, #4]
 8006374:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006378:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800637c:	6053      	str	r3, [r2, #4]
 800637e:	e7d7      	b.n	8006330 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8006380:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8006382:	2300      	movs	r3, #0
 8006384:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006388:	b004      	add	sp, #16
 800638a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800638c:	2002      	movs	r0, #2
 800638e:	e7fb      	b.n	8006388 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x92>

08006390 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8006390:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006394:	2b01      	cmp	r3, #1
 8006396:	d010      	beq.n	80063ba <HAL_UARTEx_EnableStopMode+0x2a>
 8006398:	2301      	movs	r3, #1
 800639a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800639e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a0:	e852 3f00 	ldrex	r3, [r2]
 80063a4:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a8:	e842 3100 	strex	r1, r3, [r2]
 80063ac:	2900      	cmp	r1, #0
 80063ae:	d1f6      	bne.n	800639e <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 80063b0:	2300      	movs	r3, #0
 80063b2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 80063b6:	4618      	mov	r0, r3
 80063b8:	4770      	bx	lr
  __HAL_LOCK(huart);
 80063ba:	2002      	movs	r0, #2
}
 80063bc:	4770      	bx	lr

080063be <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 80063be:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d01d      	beq.n	8006402 <HAL_UARTEx_EnableFifoMode+0x44>
{
 80063c6:	b510      	push	{r4, lr}
 80063c8:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80063ca:	2301      	movs	r3, #1
 80063cc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80063d0:	2324      	movs	r3, #36	; 0x24
 80063d2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063d6:	6802      	ldr	r2, [r0, #0]
 80063d8:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80063da:	6811      	ldr	r1, [r2, #0]
 80063dc:	f021 0101 	bic.w	r1, r1, #1
 80063e0:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80063e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80063e6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80063ea:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063ec:	6802      	ldr	r2, [r0, #0]
 80063ee:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 80063f0:	f7ff ff58 	bl	80062a4 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80063f4:	2320      	movs	r3, #32
 80063f6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80063fa:	2000      	movs	r0, #0
 80063fc:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006400:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006402:	2002      	movs	r0, #2
}
 8006404:	4770      	bx	lr

08006406 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8006406:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800640a:	2b01      	cmp	r3, #1
 800640c:	d018      	beq.n	8006440 <HAL_UARTEx_DisableFifoMode+0x3a>
 800640e:	2301      	movs	r3, #1
 8006410:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006414:	2324      	movs	r3, #36	; 0x24
 8006416:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800641a:	6803      	ldr	r3, [r0, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800641e:	6819      	ldr	r1, [r3, #0]
 8006420:	f021 0101 	bic.w	r1, r1, #1
 8006424:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006426:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800642a:	2300      	movs	r3, #0
 800642c:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800642e:	6801      	ldr	r1, [r0, #0]
 8006430:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006432:	2220      	movs	r2, #32
 8006434:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006438:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800643c:	4618      	mov	r0, r3
 800643e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006440:	2002      	movs	r0, #2
}
 8006442:	4770      	bx	lr

08006444 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006444:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006446:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800644a:	2b01      	cmp	r3, #1
 800644c:	d01d      	beq.n	800648a <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800644e:	4604      	mov	r4, r0
 8006450:	2301      	movs	r3, #1
 8006452:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006456:	2324      	movs	r3, #36	; 0x24
 8006458:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800645c:	6803      	ldr	r3, [r0, #0]
 800645e:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	f022 0201 	bic.w	r2, r2, #1
 8006466:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006468:	6802      	ldr	r2, [r0, #0]
 800646a:	6893      	ldr	r3, [r2, #8]
 800646c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006470:	4319      	orrs	r1, r3
 8006472:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006474:	f7ff ff16 	bl	80062a4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800647c:	2320      	movs	r3, #32
 800647e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006482:	2000      	movs	r0, #0
 8006484:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006488:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800648a:	2002      	movs	r0, #2
 800648c:	e7fc      	b.n	8006488 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800648e <HAL_UARTEx_SetRxFifoThreshold>:
{
 800648e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006490:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006494:	2b01      	cmp	r3, #1
 8006496:	d01d      	beq.n	80064d4 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8006498:	4604      	mov	r4, r0
 800649a:	2301      	movs	r3, #1
 800649c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80064a0:	2324      	movs	r3, #36	; 0x24
 80064a2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064a6:	6803      	ldr	r3, [r0, #0]
 80064a8:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	f022 0201 	bic.w	r2, r2, #1
 80064b0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80064b2:	6802      	ldr	r2, [r0, #0]
 80064b4:	6893      	ldr	r3, [r2, #8]
 80064b6:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80064ba:	4319      	orrs	r1, r3
 80064bc:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80064be:	f7ff fef1 	bl	80062a4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80064c6:	2320      	movs	r3, #32
 80064c8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80064cc:	2000      	movs	r0, #0
 80064ce:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80064d2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80064d4:	2002      	movs	r0, #2
 80064d6:	e7fc      	b.n	80064d2 <HAL_UARTEx_SetRxFifoThreshold+0x44>

080064d8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80064d8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80064dc:	2b20      	cmp	r3, #32
 80064de:	d120      	bne.n	8006522 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
{
 80064e0:	b510      	push	{r4, lr}
 80064e2:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 80064e4:	b1f9      	cbz	r1, 8006526 <HAL_UARTEx_ReceiveToIdle_DMA+0x4e>
 80064e6:	b302      	cbz	r2, 800652a <HAL_UARTEx_ReceiveToIdle_DMA+0x52>
    __HAL_LOCK(huart);
 80064e8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d01e      	beq.n	800652e <HAL_UARTEx_ReceiveToIdle_DMA+0x56>
 80064f0:	2301      	movs	r3, #1
 80064f2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80064f6:	66c3      	str	r3, [r0, #108]	; 0x6c
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80064f8:	f7ff fe7a 	bl	80061f0 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 80064fc:	b9b0      	cbnz	r0, 800652c <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064fe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006500:	2b01      	cmp	r3, #1
 8006502:	d001      	beq.n	8006508 <HAL_UARTEx_ReceiveToIdle_DMA+0x30>
        status = HAL_ERROR;
 8006504:	2001      	movs	r0, #1
 8006506:	e011      	b.n	800652c <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006508:	6823      	ldr	r3, [r4, #0]
 800650a:	2210      	movs	r2, #16
 800650c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800650e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006510:	e852 3f00 	ldrex	r3, [r2]
 8006514:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006518:	e842 3100 	strex	r1, r3, [r2]
 800651c:	2900      	cmp	r1, #0
 800651e:	d1f6      	bne.n	800650e <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 8006520:	e004      	b.n	800652c <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
    return HAL_BUSY;
 8006522:	2002      	movs	r0, #2
}
 8006524:	4770      	bx	lr
      return HAL_ERROR;
 8006526:	2001      	movs	r0, #1
 8006528:	e000      	b.n	800652c <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
 800652a:	2001      	movs	r0, #1
}
 800652c:	bd10      	pop	{r4, pc}
    __HAL_LOCK(huart);
 800652e:	2002      	movs	r0, #2
 8006530:	e7fc      	b.n	800652c <HAL_UARTEx_ReceiveToIdle_DMA+0x54>

08006532 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8006532:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8006534:	f7fa ffa4 	bl	8001480 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8006538:	f000 f976 	bl	8006828 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800653c:	bd08      	pop	{r3, pc}

0800653e <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800653e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8006540:	f04f 30ff 	mov.w	r0, #4294967295
 8006544:	f009 ff08 	bl	8010358 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8006548:	bd08      	pop	{r3, pc}

0800654a <OnTxTimerLedEvent>:
static void OnTxTimerLedEvent(void *context)
{
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800654a:	4770      	bx	lr

0800654c <OnRxTimerLedEvent>:
static void OnRxTimerLedEvent(void *context)
{
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800654c:	4770      	bx	lr

0800654e <OnJoinTimerLedEvent>:
static void OnJoinTimerLedEvent(void *context)
{
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800654e:	4770      	bx	lr

08006550 <OnBeaconStatusChange>:
        break;
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 8006550:	4770      	bx	lr

08006552 <OnClassChange>:
static void OnClassChange(DeviceClass_t deviceClass)
{
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
  /* USER CODE END OnClassChange_1 */
}
 8006552:	4770      	bx	lr

08006554 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8006554:	4b01      	ldr	r3, [pc, #4]	; (800655c <OnTxFrameCtrlChanged+0x8>)
 8006556:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	20000064 	.word	0x20000064

08006560 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8006560:	4b01      	ldr	r3, [pc, #4]	; (8006568 <OnPingSlotPeriodicityChanged+0x8>)
 8006562:	7318      	strb	r0, [r3, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	20000064 	.word	0x20000064

0800656c <OnNvmDataChange>:
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800656c:	4770      	bx	lr
	...

08006570 <OnTxData>:
  if ((params != NULL))
 8006570:	b138      	cbz	r0, 8006582 <OnTxData+0x12>
{
 8006572:	b508      	push	{r3, lr}
    if (params->IsMcpsConfirm != 0)
 8006574:	7803      	ldrb	r3, [r0, #0]
 8006576:	b903      	cbnz	r3, 800657a <OnTxData+0xa>
}
 8006578:	bd08      	pop	{r3, pc}
      UTIL_TIMER_Start(&TxLedTimer);
 800657a:	4802      	ldr	r0, [pc, #8]	; (8006584 <OnTxData+0x14>)
 800657c:	f00a f864 	bl	8010648 <UTIL_TIMER_Start>
}
 8006580:	e7fa      	b.n	8006578 <OnTxData+0x8>
 8006582:	4770      	bx	lr
 8006584:	200009ec 	.word	0x200009ec

08006588 <OnTxTimerEvent>:
{
 8006588:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800658a:	2100      	movs	r1, #0
 800658c:	2002      	movs	r0, #2
 800658e:	f009 feaf 	bl	80102f0 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 8006592:	4802      	ldr	r0, [pc, #8]	; (800659c <OnTxTimerEvent+0x14>)
 8006594:	f00a f858 	bl	8010648 <UTIL_TIMER_Start>
}
 8006598:	bd08      	pop	{r3, pc}
 800659a:	bf00      	nop
 800659c:	20000a04 	.word	0x20000a04

080065a0 <OnMacProcessNotify>:
{
 80065a0:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 80065a2:	2100      	movs	r1, #0
 80065a4:	2001      	movs	r0, #1
 80065a6:	f009 fea3 	bl	80102f0 <UTIL_SEQ_SetTask>
}
 80065aa:	bd08      	pop	{r3, pc}

080065ac <OnStopJoinTimerEvent>:
{
 80065ac:	b508      	push	{r3, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 80065ae:	4b05      	ldr	r3, [pc, #20]	; (80065c4 <OnStopJoinTimerEvent+0x18>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d000      	beq.n	80065b8 <OnStopJoinTimerEvent+0xc>
}
 80065b6:	bd08      	pop	{r3, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 80065b8:	2100      	movs	r1, #0
 80065ba:	2008      	movs	r0, #8
 80065bc:	f009 fe98 	bl	80102f0 <UTIL_SEQ_SetTask>
}
 80065c0:	e7f9      	b.n	80065b6 <OnStopJoinTimerEvent+0xa>
 80065c2:	bf00      	nop
 80065c4:	2000000c 	.word	0x2000000c

080065c8 <OnSystemReset>:
{
 80065c8:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80065ca:	f001 fd42 	bl	8008052 <LmHandlerHalt>
 80065ce:	b100      	cbz	r0, 80065d2 <OnSystemReset+0xa>
}
 80065d0:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80065d2:	f001 f90b 	bl	80077ec <LmHandlerJoinStatus>
 80065d6:	2801      	cmp	r0, #1
 80065d8:	d1fa      	bne.n	80065d0 <OnSystemReset+0x8>
  __ASM volatile ("dsb 0xF":::"memory");
 80065da:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80065de:	4905      	ldr	r1, [pc, #20]	; (80065f4 <OnSystemReset+0x2c>)
 80065e0:	68ca      	ldr	r2, [r1, #12]
 80065e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80065e6:	4b04      	ldr	r3, [pc, #16]	; (80065f8 <OnSystemReset+0x30>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	60cb      	str	r3, [r1, #12]
 80065ec:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80065f0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80065f2:	e7fd      	b.n	80065f0 <OnSystemReset+0x28>
 80065f4:	e000ed00 	.word	0xe000ed00
 80065f8:	05fa0004 	.word	0x05fa0004

080065fc <OnJoinRequest>:
  if (joinParams != NULL)
 80065fc:	b188      	cbz	r0, 8006622 <OnJoinRequest+0x26>
{
 80065fe:	b508      	push	{r3, lr}
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8006600:	f990 2005 	ldrsb.w	r2, [r0, #5]
 8006604:	b11a      	cbz	r2, 800660e <OnJoinRequest+0x12>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 8006606:	7983      	ldrb	r3, [r0, #6]
 8006608:	2b02      	cmp	r3, #2
 800660a:	d004      	beq.n	8006616 <OnJoinRequest+0x1a>
}
 800660c:	bd08      	pop	{r3, pc}
      UTIL_TIMER_Stop(&JoinLedTimer);
 800660e:	4805      	ldr	r0, [pc, #20]	; (8006624 <OnJoinRequest+0x28>)
 8006610:	f009 ffba 	bl	8010588 <UTIL_TIMER_Stop>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8006614:	e7fa      	b.n	800660c <OnJoinRequest+0x10>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 8006616:	2101      	movs	r1, #1
 8006618:	4b03      	ldr	r3, [pc, #12]	; (8006628 <OnJoinRequest+0x2c>)
 800661a:	7818      	ldrb	r0, [r3, #0]
 800661c:	f001 f956 	bl	80078cc <LmHandlerJoin>
}
 8006620:	e7f4      	b.n	800660c <OnJoinRequest+0x10>
 8006622:	4770      	bx	lr
 8006624:	200009a4 	.word	0x200009a4
 8006628:	2000000c 	.word	0x2000000c

0800662c <OnTxPeriodicityChanged>:
{
 800662c:	b510      	push	{r4, lr}
  if (TxPeriodicity == 0)
 800662e:	b110      	cbz	r0, 8006636 <OnTxPeriodicityChanged+0xa>
  TxPeriodicity = periodicity;
 8006630:	4a09      	ldr	r2, [pc, #36]	; (8006658 <OnTxPeriodicityChanged+0x2c>)
 8006632:	6010      	str	r0, [r2, #0]
 8006634:	e003      	b.n	800663e <OnTxPeriodicityChanged+0x12>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8006636:	4b08      	ldr	r3, [pc, #32]	; (8006658 <OnTxPeriodicityChanged+0x2c>)
 8006638:	f242 7210 	movw	r2, #10000	; 0x2710
 800663c:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 800663e:	4c07      	ldr	r4, [pc, #28]	; (800665c <OnTxPeriodicityChanged+0x30>)
 8006640:	4620      	mov	r0, r4
 8006642:	f009 ffa1 	bl	8010588 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8006646:	4b04      	ldr	r3, [pc, #16]	; (8006658 <OnTxPeriodicityChanged+0x2c>)
 8006648:	6819      	ldr	r1, [r3, #0]
 800664a:	4620      	mov	r0, r4
 800664c:	f00a f842 	bl	80106d4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8006650:	4620      	mov	r0, r4
 8006652:	f009 fff9 	bl	8010648 <UTIL_TIMER_Start>
}
 8006656:	bd10      	pop	{r4, pc}
 8006658:	20000078 	.word	0x20000078
 800665c:	20000a04 	.word	0x20000a04

08006660 <OnRxData>:
  if (params != NULL)
 8006660:	b399      	cbz	r1, 80066ca <OnRxData+0x6a>
{
 8006662:	b538      	push	{r3, r4, r5, lr}
 8006664:	4604      	mov	r4, r0
 8006666:	460d      	mov	r5, r1
    UTIL_TIMER_Start(&RxLedTimer);
 8006668:	4818      	ldr	r0, [pc, #96]	; (80066cc <OnRxData+0x6c>)
 800666a:	f009 ffed 	bl	8010648 <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 800666e:	782b      	ldrb	r3, [r5, #0]
 8006670:	b153      	cbz	r3, 8006688 <OnRxData+0x28>
      if (appData != NULL)
 8006672:	b14c      	cbz	r4, 8006688 <OnRxData+0x28>
        if (appData->Buffer != NULL)
 8006674:	6863      	ldr	r3, [r4, #4]
 8006676:	b13b      	cbz	r3, 8006688 <OnRxData+0x28>
        RxPort = appData->Port;
 8006678:	7822      	ldrb	r2, [r4, #0]
    switch (appData->Port)
 800667a:	2a02      	cmp	r2, #2
 800667c:	d018      	beq.n	80066b0 <OnRxData+0x50>
 800667e:	2a03      	cmp	r2, #3
 8006680:	d102      	bne.n	8006688 <OnRxData+0x28>
        if (appData->BufferSize == 1)
 8006682:	7862      	ldrb	r2, [r4, #1]
 8006684:	2a01      	cmp	r2, #1
 8006686:	d000      	beq.n	800668a <OnRxData+0x2a>
}
 8006688:	bd38      	pop	{r3, r4, r5, pc}
          switch (appData->Buffer[0])
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d007      	beq.n	80066a0 <OnRxData+0x40>
 8006690:	2b02      	cmp	r3, #2
 8006692:	d009      	beq.n	80066a8 <OnRxData+0x48>
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1f7      	bne.n	8006688 <OnRxData+0x28>
              LmHandlerRequestClass(CLASS_A);
 8006698:	2000      	movs	r0, #0
 800669a:	f001 f8bb 	bl	8007814 <LmHandlerRequestClass>
              break;
 800669e:	e7f3      	b.n	8006688 <OnRxData+0x28>
              LmHandlerRequestClass(CLASS_B);
 80066a0:	2001      	movs	r0, #1
 80066a2:	f001 f8b7 	bl	8007814 <LmHandlerRequestClass>
              break;
 80066a6:	e7ef      	b.n	8006688 <OnRxData+0x28>
              LmHandlerRequestClass(CLASS_C);
 80066a8:	2002      	movs	r0, #2
 80066aa:	f001 f8b3 	bl	8007814 <LmHandlerRequestClass>
              break;
 80066ae:	e7eb      	b.n	8006688 <OnRxData+0x28>
        if (appData->BufferSize == 1)
 80066b0:	7862      	ldrb	r2, [r4, #1]
 80066b2:	2a01      	cmp	r2, #1
 80066b4:	d1e8      	bne.n	8006688 <OnRxData+0x28>
          AppLedStateOn = appData->Buffer[0] & 0x01;
 80066b6:	781b      	ldrb	r3, [r3, #0]
          if (AppLedStateOn == RESET)
 80066b8:	f013 0f01 	tst.w	r3, #1
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 80066bc:	bf18      	it	ne
 80066be:	2200      	movne	r2, #0
 80066c0:	2120      	movs	r1, #32
 80066c2:	4803      	ldr	r0, [pc, #12]	; (80066d0 <OnRxData+0x70>)
 80066c4:	f7fc ff6e 	bl	80035a4 <HAL_GPIO_WritePin>
}
 80066c8:	e7de      	b.n	8006688 <OnRxData+0x28>
 80066ca:	4770      	bx	lr
 80066cc:	200009bc 	.word	0x200009bc
 80066d0:	48000400 	.word	0x48000400

080066d4 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 80066d4:	b538      	push	{r3, r4, r5, lr}
 80066d6:	4605      	mov	r5, r0
 80066d8:	460c      	mov	r4, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80066da:	f7fc fcf5 	bl	80030c8 <HAL_FLASH_Unlock>
 80066de:	b100      	cbz	r0, 80066e2 <OnStoreContextRequest+0xe>
    HAL_FLASH_Lock();
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 80066e0:	bd38      	pop	{r3, r4, r5, pc}
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 80066e2:	4b0f      	ldr	r3, [pc, #60]	; (8006720 <OnStoreContextRequest+0x4c>)
 80066e4:	f8d3 05e0 	ldr.w	r0, [r3, #1504]	; 0x5e0
 80066e8:	4b0e      	ldr	r3, [pc, #56]	; (8006724 <OnStoreContextRequest+0x50>)
 80066ea:	ea03 2080 	and.w	r0, r3, r0, lsl #10
 80066ee:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 80066f2:	fbb3 f3f0 	udiv	r3, r3, r0
 80066f6:	fb00 f303 	mul.w	r3, r0, r3
 80066fa:	f5c3 337c 	rsb	r3, r3, #258048	; 0x3f000
 80066fe:	2200      	movs	r2, #0
 8006700:	2101      	movs	r1, #1
 8006702:	0ad8      	lsrs	r0, r3, #11
 8006704:	f7fa fb9c 	bl	8000e40 <FLASH_IF_EraseByPages>
 8006708:	b110      	cbz	r0, 8006710 <OnStoreContextRequest+0x3c>
    HAL_FLASH_Lock();
 800670a:	f7fc fcf1 	bl	80030f0 <HAL_FLASH_Lock>
}
 800670e:	e7e7      	b.n	80066e0 <OnStoreContextRequest+0xc>
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 8006710:	2300      	movs	r3, #0
 8006712:	4622      	mov	r2, r4
 8006714:	4629      	mov	r1, r5
 8006716:	4804      	ldr	r0, [pc, #16]	; (8006728 <OnStoreContextRequest+0x54>)
 8006718:	f7fa fbac 	bl	8000e74 <FLASH_IF_Write>
 800671c:	e7f5      	b.n	800670a <OnStoreContextRequest+0x36>
 800671e:	bf00      	nop
 8006720:	1fff7000 	.word	0x1fff7000
 8006724:	03fffc00 	.word	0x03fffc00
 8006728:	0803f000 	.word	0x0803f000

0800672c <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800672c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800672e:	b28a      	uxth	r2, r1
 8006730:	4901      	ldr	r1, [pc, #4]	; (8006738 <OnRestoreContextRequest+0xc>)
 8006732:	f009 fb23 	bl	800fd7c <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8006736:	bd08      	pop	{r3, pc}
 8006738:	0803f000 	.word	0x0803f000

0800673c <StopJoin>:
{
 800673c:	b538      	push	{r3, r4, r5, lr}
  UTIL_TIMER_Stop(&TxTimer);
 800673e:	480c      	ldr	r0, [pc, #48]	; (8006770 <StopJoin+0x34>)
 8006740:	f009 ff22 	bl	8010588 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 8006744:	f001 fc7c 	bl	8008040 <LmHandlerStop>
 8006748:	b118      	cbz	r0, 8006752 <StopJoin+0x16>
  UTIL_TIMER_Start(&StopJoinTimer);
 800674a:	480a      	ldr	r0, [pc, #40]	; (8006774 <StopJoin+0x38>)
 800674c:	f009 ff7c 	bl	8010648 <UTIL_TIMER_Start>
}
 8006750:	bd38      	pop	{r3, r4, r5, pc}
      ActivationType = ACTIVATION_TYPE_ABP;
 8006752:	4c09      	ldr	r4, [pc, #36]	; (8006778 <StopJoin+0x3c>)
 8006754:	2501      	movs	r5, #1
 8006756:	7025      	strb	r5, [r4, #0]
    LmHandlerConfigure(&LmHandlerParams);
 8006758:	4808      	ldr	r0, [pc, #32]	; (800677c <StopJoin+0x40>)
 800675a:	f001 fb01 	bl	8007d60 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800675e:	4629      	mov	r1, r5
 8006760:	7820      	ldrb	r0, [r4, #0]
 8006762:	f001 f8b3 	bl	80078cc <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 8006766:	4802      	ldr	r0, [pc, #8]	; (8006770 <StopJoin+0x34>)
 8006768:	f009 ff6e 	bl	8010648 <UTIL_TIMER_Start>
 800676c:	e7ed      	b.n	800674a <StopJoin+0xe>
 800676e:	bf00      	nop
 8006770:	20000a04 	.word	0x20000a04
 8006774:	200009d4 	.word	0x200009d4
 8006778:	2000000c 	.word	0x2000000c
 800677c:	20000064 	.word	0x20000064

08006780 <StoreContext>:
{
 8006780:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 8006782:	f001 fc6f 	bl	8008064 <LmHandlerNvmDataStore>
}
 8006786:	bd08      	pop	{r3, pc}

08006788 <SendTxData>:
{
 8006788:	b538      	push	{r3, r4, r5, lr}
  uint8_t batteryLevel = GetBatteryLevel();
 800678a:	f7fa fead 	bl	80014e8 <GetBatteryLevel>
  AppData.Port = LORAWAN_USER_APP_PORT;
 800678e:	4b21      	ldr	r3, [pc, #132]	; (8006814 <SendTxData+0x8c>)
 8006790:	2202      	movs	r2, #2
 8006792:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++]='h';
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	2168      	movs	r1, #104	; 0x68
 8006798:	7011      	strb	r1, [r2, #0]
  AppData.Buffer[i++]='e';
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	2165      	movs	r1, #101	; 0x65
 800679e:	7051      	strb	r1, [r2, #1]
  AppData.Buffer[i++]='l';
 80067a0:	6859      	ldr	r1, [r3, #4]
 80067a2:	226c      	movs	r2, #108	; 0x6c
 80067a4:	708a      	strb	r2, [r1, #2]
  AppData.Buffer[i++]='l';
 80067a6:	6859      	ldr	r1, [r3, #4]
 80067a8:	70ca      	strb	r2, [r1, #3]
  AppData.Buffer[i++]='o';
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	216f      	movs	r1, #111	; 0x6f
 80067ae:	7111      	strb	r1, [r2, #4]
  AppData.Buffer[i++]='!';
 80067b0:	6859      	ldr	r1, [r3, #4]
 80067b2:	2221      	movs	r2, #33	; 0x21
 80067b4:	714a      	strb	r2, [r1, #5]
  AppData.Buffer[i++]='!';
 80067b6:	6859      	ldr	r1, [r3, #4]
 80067b8:	718a      	strb	r2, [r1, #6]
  AppData.BufferSize = i;
 80067ba:	2207      	movs	r2, #7
 80067bc:	705a      	strb	r2, [r3, #1]
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80067be:	4b16      	ldr	r3, [pc, #88]	; (8006818 <SendTxData+0x90>)
 80067c0:	7a5b      	ldrb	r3, [r3, #9]
 80067c2:	b9d3      	cbnz	r3, 80067fa <SendTxData+0x72>
  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 80067c4:	2200      	movs	r2, #0
 80067c6:	4b15      	ldr	r3, [pc, #84]	; (800681c <SendTxData+0x94>)
 80067c8:	78d9      	ldrb	r1, [r3, #3]
 80067ca:	4812      	ldr	r0, [pc, #72]	; (8006814 <SendTxData+0x8c>)
 80067cc:	f001 f8de 	bl	800798c <LmHandlerSend>
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 80067d0:	f110 0f06 	cmn.w	r0, #6
  UTIL_TIMER_Time_t nextTxIn = 0;
 80067d4:	bf18      	it	ne
 80067d6:	2500      	movne	r5, #0
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 80067d8:	d017      	beq.n	800680a <SendTxData+0x82>
    UTIL_TIMER_Stop(&TxTimer);
 80067da:	4c11      	ldr	r4, [pc, #68]	; (8006820 <SendTxData+0x98>)
 80067dc:	4620      	mov	r0, r4
 80067de:	f009 fed3 	bl	8010588 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 80067e2:	4b10      	ldr	r3, [pc, #64]	; (8006824 <SendTxData+0x9c>)
 80067e4:	6819      	ldr	r1, [r3, #0]
 80067e6:	42a9      	cmp	r1, r5
 80067e8:	bf38      	it	cc
 80067ea:	4629      	movcc	r1, r5
 80067ec:	4620      	mov	r0, r4
 80067ee:	f009 ff71 	bl	80106d4 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 80067f2:	4620      	mov	r0, r4
 80067f4:	f009 ff28 	bl	8010648 <UTIL_TIMER_Start>
}
 80067f8:	bd38      	pop	{r3, r4, r5, pc}
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80067fa:	f000 fff7 	bl	80077ec <LmHandlerJoinStatus>
 80067fe:	2801      	cmp	r0, #1
 8006800:	d1e0      	bne.n	80067c4 <SendTxData+0x3c>
    UTIL_TIMER_Stop(&JoinLedTimer);
 8006802:	4805      	ldr	r0, [pc, #20]	; (8006818 <SendTxData+0x90>)
 8006804:	f009 fec0 	bl	8010588 <UTIL_TIMER_Stop>
 8006808:	e7dc      	b.n	80067c4 <SendTxData+0x3c>
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800680a:	f000 ffe9 	bl	80077e0 <LmHandlerGetDutyCycleWaitTime>
 800680e:	4605      	mov	r5, r0
    if (nextTxIn > 0)
 8006810:	e7e3      	b.n	80067da <SendTxData+0x52>
 8006812:	bf00      	nop
 8006814:	20000010 	.word	0x20000010
 8006818:	200009a4 	.word	0x200009a4
 800681c:	20000064 	.word	0x20000064
 8006820:	20000a04 	.word	0x20000a04
 8006824:	20000078 	.word	0x20000078

08006828 <LoRaWAN_Init>:
{
 8006828:	b530      	push	{r4, r5, lr}
 800682a:	b085      	sub	sp, #20
  uint32_t feature_version = 0UL;
 800682c:	2400      	movs	r4, #0
 800682e:	9403      	str	r4, [sp, #12]
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8006830:	a903      	add	r1, sp, #12
 8006832:	4620      	mov	r0, r4
 8006834:	f001 fbee 	bl	8008014 <LmHandlerGetVersion>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8006838:	a903      	add	r1, sp, #12
 800683a:	2001      	movs	r0, #1
 800683c:	f001 fbea 	bl	8008014 <LmHandlerGetVersion>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8006840:	9400      	str	r4, [sp, #0]
 8006842:	4b2a      	ldr	r3, [pc, #168]	; (80068ec <LoRaWAN_Init+0xc4>)
 8006844:	4622      	mov	r2, r4
 8006846:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800684a:	4829      	ldr	r0, [pc, #164]	; (80068f0 <LoRaWAN_Init+0xc8>)
 800684c:	f009 fe38 	bl	80104c0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8006850:	9400      	str	r4, [sp, #0]
 8006852:	4b28      	ldr	r3, [pc, #160]	; (80068f4 <LoRaWAN_Init+0xcc>)
 8006854:	4622      	mov	r2, r4
 8006856:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800685a:	4827      	ldr	r0, [pc, #156]	; (80068f8 <LoRaWAN_Init+0xd0>)
 800685c:	f009 fe30 	bl	80104c0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8006860:	4d26      	ldr	r5, [pc, #152]	; (80068fc <LoRaWAN_Init+0xd4>)
 8006862:	9400      	str	r4, [sp, #0]
 8006864:	4b26      	ldr	r3, [pc, #152]	; (8006900 <LoRaWAN_Init+0xd8>)
 8006866:	2201      	movs	r2, #1
 8006868:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800686c:	4628      	mov	r0, r5
 800686e:	f009 fe27 	bl	80104c0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8006872:	9400      	str	r4, [sp, #0]
 8006874:	4b23      	ldr	r3, [pc, #140]	; (8006904 <LoRaWAN_Init+0xdc>)
 8006876:	4622      	mov	r2, r4
 8006878:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800687c:	4822      	ldr	r0, [pc, #136]	; (8006908 <LoRaWAN_Init+0xe0>)
 800687e:	f009 fe1f 	bl	80104c0 <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8006882:	4a22      	ldr	r2, [pc, #136]	; (800690c <LoRaWAN_Init+0xe4>)
 8006884:	4621      	mov	r1, r4
 8006886:	2001      	movs	r0, #1
 8006888:	f009 fdfe 	bl	8010488 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800688c:	4a20      	ldr	r2, [pc, #128]	; (8006910 <LoRaWAN_Init+0xe8>)
 800688e:	4621      	mov	r1, r4
 8006890:	2002      	movs	r0, #2
 8006892:	f009 fdf9 	bl	8010488 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8006896:	4a1f      	ldr	r2, [pc, #124]	; (8006914 <LoRaWAN_Init+0xec>)
 8006898:	4621      	mov	r1, r4
 800689a:	2004      	movs	r0, #4
 800689c:	f009 fdf4 	bl	8010488 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 80068a0:	4a1d      	ldr	r2, [pc, #116]	; (8006918 <LoRaWAN_Init+0xf0>)
 80068a2:	4621      	mov	r1, r4
 80068a4:	2008      	movs	r0, #8
 80068a6:	f009 fdef 	bl	8010488 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 80068aa:	f000 f84d 	bl	8006948 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 80068ae:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 80068b2:	481a      	ldr	r0, [pc, #104]	; (800691c <LoRaWAN_Init+0xf4>)
 80068b4:	f001 fb7c 	bl	8007fb0 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 80068b8:	4819      	ldr	r0, [pc, #100]	; (8006920 <LoRaWAN_Init+0xf8>)
 80068ba:	f001 fa51 	bl	8007d60 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 80068be:	4628      	mov	r0, r5
 80068c0:	f009 fec2 	bl	8010648 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 80068c4:	2101      	movs	r1, #1
 80068c6:	4b17      	ldr	r3, [pc, #92]	; (8006924 <LoRaWAN_Init+0xfc>)
 80068c8:	7818      	ldrb	r0, [r3, #0]
 80068ca:	f000 ffff 	bl	80078cc <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 80068ce:	4d16      	ldr	r5, [pc, #88]	; (8006928 <LoRaWAN_Init+0x100>)
 80068d0:	9400      	str	r4, [sp, #0]
 80068d2:	4b16      	ldr	r3, [pc, #88]	; (800692c <LoRaWAN_Init+0x104>)
 80068d4:	4622      	mov	r2, r4
 80068d6:	4916      	ldr	r1, [pc, #88]	; (8006930 <LoRaWAN_Init+0x108>)
 80068d8:	6809      	ldr	r1, [r1, #0]
 80068da:	4628      	mov	r0, r5
 80068dc:	f009 fdf0 	bl	80104c0 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 80068e0:	4628      	mov	r0, r5
 80068e2:	f009 feb1 	bl	8010648 <UTIL_TIMER_Start>
}
 80068e6:	b005      	add	sp, #20
 80068e8:	bd30      	pop	{r4, r5, pc}
 80068ea:	bf00      	nop
 80068ec:	0800654b 	.word	0x0800654b
 80068f0:	200009ec 	.word	0x200009ec
 80068f4:	0800654d 	.word	0x0800654d
 80068f8:	200009bc 	.word	0x200009bc
 80068fc:	200009a4 	.word	0x200009a4
 8006900:	0800654f 	.word	0x0800654f
 8006904:	080065ad 	.word	0x080065ad
 8006908:	200009d4 	.word	0x200009d4
 800690c:	08007799 	.word	0x08007799
 8006910:	08006789 	.word	0x08006789
 8006914:	08006781 	.word	0x08006781
 8006918:	0800673d 	.word	0x0800673d
 800691c:	20000018 	.word	0x20000018
 8006920:	20000064 	.word	0x20000064
 8006924:	2000000c 	.word	0x2000000c
 8006928:	20000a04 	.word	0x20000a04
 800692c:	08006589 	.word	0x08006589
 8006930:	20000078 	.word	0x20000078

08006934 <HAL_GPIO_EXTI_Callback>:
  switch (GPIO_Pin)
 8006934:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8006938:	d000      	beq.n	800693c <HAL_GPIO_EXTI_Callback+0x8>
 800693a:	4770      	bx	lr
{
 800693c:	b508      	push	{r3, lr}
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800693e:	2100      	movs	r1, #0
 8006940:	2002      	movs	r0, #2
 8006942:	f009 fcd5 	bl	80102f0 <UTIL_SEQ_SetTask>
}
 8006946:	bd08      	pop	{r3, pc}

08006948 <LoraInfo_Init>:
/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
  loraInfo.Region = 0;
  loraInfo.ClassB = 0;
 8006948:	4b04      	ldr	r3, [pc, #16]	; (800695c <LoraInfo_Init+0x14>)
 800694a:	2200      	movs	r2, #0
 800694c:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800694e:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8006950:	2220      	movs	r2, #32
 8006952:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8006954:	2203      	movs	r2, #3
 8006956:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	20000a1c 	.word	0x20000a1c

08006960 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8006960:	4800      	ldr	r0, [pc, #0]	; (8006964 <LoraInfo_GetPtr+0x4>)
 8006962:	4770      	bx	lr
 8006964:	20000a1c 	.word	0x20000a1c

08006968 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8006968:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800696a:	f7fb faa6 	bl	8001eba <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800696e:	bd08      	pop	{r3, pc}

08006970 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8006970:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8006972:	f7fb fac8 	bl	8001f06 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8006976:	bd08      	pop	{r3, pc}

08006978 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8006978:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800697a:	f7fb fb00 	bl	8001f7e <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800697e:	bd08      	pop	{r3, pc}

08006980 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8006980:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8006982:	f7fb fafe 	bl	8001f82 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8006986:	bd08      	pop	{r3, pc}

08006988 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8006988:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800698a:	f7fb fafc 	bl	8001f86 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800698e:	bd08      	pop	{r3, pc}

08006990 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8006990:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8006992:	f7fb fafa 	bl	8001f8a <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8006996:	bd08      	pop	{r3, pc}

08006998 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8006998:	b510      	push	{r4, lr}
 800699a:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800699c:	2210      	movs	r2, #16
 800699e:	2100      	movs	r1, #0
 80069a0:	30f1      	adds	r0, #241	; 0xf1
 80069a2:	f007 f885 	bl	800dab0 <memset1>
    ctx->M_n = 0;
 80069a6:	2100      	movs	r1, #0
 80069a8:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 80069ac:	22f0      	movs	r2, #240	; 0xf0
 80069ae:	4620      	mov	r0, r4
 80069b0:	f007 f87e 	bl	800dab0 <memset1>
}
 80069b4:	bd10      	pop	{r4, pc}

080069b6 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 80069b6:	b508      	push	{r3, lr}
 80069b8:	4602      	mov	r2, r0
 80069ba:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 80069bc:	2110      	movs	r1, #16
 80069be:	f000 f9d9 	bl	8006d74 <lorawan_aes_set_key>
}
 80069c2:	bd08      	pop	{r3, pc}

080069c4 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 80069c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c8:	b085      	sub	sp, #20
 80069ca:	4606      	mov	r6, r0
 80069cc:	460d      	mov	r5, r1
 80069ce:	4692      	mov	sl, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 80069d0:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 80069d4:	bbf3      	cbnz	r3, 8006a54 <AES_CMAC_Update+0x90>
        memcpy1( &ctx->X[0], in, 16 );

        data += mlen;
        len -= mlen;
    }
    while( len > 16 )
 80069d6:	f1ba 0f10 	cmp.w	sl, #16
 80069da:	d970      	bls.n	8006abe <AES_CMAC_Update+0xfa>
 80069dc:	f1aa 0b11 	sub.w	fp, sl, #17
 80069e0:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
 80069e4:	f10b 0901 	add.w	r9, fp, #1
 80069e8:	eb05 1909 	add.w	r9, r5, r9, lsl #4
 80069ec:	f506 7480 	add.w	r4, r6, #256	; 0x100
    { /* not last block */

        XOR( data, ctx->X );

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80069f0:	f106 08f1 	add.w	r8, r6, #241	; 0xf1
 80069f4:	2710      	movs	r7, #16
        XOR( data, ctx->X );
 80069f6:	f106 03f0 	add.w	r3, r6, #240	; 0xf0
 80069fa:	1e69      	subs	r1, r5, #1
 80069fc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8006a00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006a04:	4042      	eors	r2, r0
 8006a06:	701a      	strb	r2, [r3, #0]
 8006a08:	42a3      	cmp	r3, r4
 8006a0a:	d1f7      	bne.n	80069fc <AES_CMAC_Update+0x38>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8006a0c:	463a      	mov	r2, r7
 8006a0e:	4641      	mov	r1, r8
 8006a10:	4668      	mov	r0, sp
 8006a12:	f007 f833 	bl	800da7c <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8006a16:	4632      	mov	r2, r6
 8006a18:	4669      	mov	r1, sp
 8006a1a:	4668      	mov	r0, sp
 8006a1c:	f000 fa3c 	bl	8006e98 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8006a20:	463a      	mov	r2, r7
 8006a22:	4669      	mov	r1, sp
 8006a24:	4640      	mov	r0, r8
 8006a26:	f007 f829 	bl	800da7c <memcpy1>

        data += 16;
 8006a2a:	3510      	adds	r5, #16
    while( len > 16 )
 8006a2c:	454d      	cmp	r5, r9
 8006a2e:	d1e2      	bne.n	80069f6 <AES_CMAC_Update+0x32>
 8006a30:	f1aa 0a10 	sub.w	sl, sl, #16
        len -= 16;
 8006a34:	ebcb 7b0b 	rsb	fp, fp, fp, lsl #28
 8006a38:	eb0a 1a0b 	add.w	sl, sl, fp, lsl #4
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8006a3c:	fa1f f28a 	uxth.w	r2, sl
 8006a40:	4649      	mov	r1, r9
 8006a42:	f206 1001 	addw	r0, r6, #257	; 0x101
 8006a46:	f007 f819 	bl	800da7c <memcpy1>
    ctx->M_n = len;
 8006a4a:	f8c6 a114 	str.w	sl, [r6, #276]	; 0x114
}
 8006a4e:	b005      	add	sp, #20
 8006a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mlen = MIN( 16 - ctx->M_n, len );
 8006a54:	f1c3 0710 	rsb	r7, r3, #16
 8006a58:	463c      	mov	r4, r7
 8006a5a:	4297      	cmp	r7, r2
 8006a5c:	bf28      	it	cs
 8006a5e:	4614      	movcs	r4, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8006a60:	f200 1001 	addw	r0, r0, #257	; 0x101
 8006a64:	b2a2      	uxth	r2, r4
 8006a66:	4418      	add	r0, r3
 8006a68:	f007 f808 	bl	800da7c <memcpy1>
        ctx->M_n += mlen;
 8006a6c:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
 8006a70:	4423      	add	r3, r4
 8006a72:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 8006a76:	2b0f      	cmp	r3, #15
 8006a78:	d9e9      	bls.n	8006a4e <AES_CMAC_Update+0x8a>
 8006a7a:	4557      	cmp	r7, sl
 8006a7c:	d2e7      	bcs.n	8006a4e <AES_CMAC_Update+0x8a>
 8006a7e:	f106 03f0 	add.w	r3, r6, #240	; 0xf0
 8006a82:	f506 7080 	add.w	r0, r6, #256	; 0x100
        XOR( ctx->M_last, ctx->X );
 8006a86:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8006a8a:	7c19      	ldrb	r1, [r3, #16]
 8006a8c:	404a      	eors	r2, r1
 8006a8e:	701a      	strb	r2, [r3, #0]
 8006a90:	4283      	cmp	r3, r0
 8006a92:	d1f8      	bne.n	8006a86 <AES_CMAC_Update+0xc2>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8006a94:	f106 07f1 	add.w	r7, r6, #241	; 0xf1
 8006a98:	2210      	movs	r2, #16
 8006a9a:	4639      	mov	r1, r7
 8006a9c:	4668      	mov	r0, sp
 8006a9e:	f006 ffed 	bl	800da7c <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8006aa2:	4632      	mov	r2, r6
 8006aa4:	4669      	mov	r1, sp
 8006aa6:	4668      	mov	r0, sp
 8006aa8:	f000 f9f6 	bl	8006e98 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8006aac:	2210      	movs	r2, #16
 8006aae:	4669      	mov	r1, sp
 8006ab0:	4638      	mov	r0, r7
 8006ab2:	f006 ffe3 	bl	800da7c <memcpy1>
        data += mlen;
 8006ab6:	4425      	add	r5, r4
        len -= mlen;
 8006ab8:	ebaa 0a04 	sub.w	sl, sl, r4
 8006abc:	e78b      	b.n	80069d6 <AES_CMAC_Update+0x12>
    while( len > 16 )
 8006abe:	46a9      	mov	r9, r5
 8006ac0:	e7bc      	b.n	8006a3c <AES_CMAC_Update+0x78>

08006ac2 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8006ac2:	b530      	push	{r4, r5, lr}
 8006ac4:	b089      	sub	sp, #36	; 0x24
 8006ac6:	4605      	mov	r5, r0
 8006ac8:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8006aca:	2210      	movs	r2, #16
 8006acc:	2100      	movs	r1, #0
 8006ace:	eb0d 0002 	add.w	r0, sp, r2
 8006ad2:	f006 ffed 	bl	800dab0 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8006ad6:	4622      	mov	r2, r4
 8006ad8:	a904      	add	r1, sp, #16
 8006ada:	4608      	mov	r0, r1
 8006adc:	f000 f9dc 	bl	8006e98 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8006ae0:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	db37      	blt.n	8006b58 <AES_CMAC_Final+0x96>
 8006ae8:	aa04      	add	r2, sp, #16
 8006aea:	f10d 001f 	add.w	r0, sp, #31
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 8006aee:	7813      	ldrb	r3, [r2, #0]
 8006af0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
 8006afa:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006afe:	4282      	cmp	r2, r0
 8006b00:	d1f5      	bne.n	8006aee <AES_CMAC_Final+0x2c>
 8006b02:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 8006b0c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8006b10:	2b10      	cmp	r3, #16
 8006b12:	d036      	beq.n	8006b82 <AES_CMAC_Final+0xc0>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 8006b14:	f99d 2010 	ldrsb.w	r2, [sp, #16]
 8006b18:	2a00      	cmp	r2, #0
 8006b1a:	db40      	blt.n	8006b9e <AES_CMAC_Final+0xdc>
 8006b1c:	a904      	add	r1, sp, #16
 8006b1e:	f10d 0c1f 	add.w	ip, sp, #31
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 8006b22:	780a      	ldrb	r2, [r1, #0]
 8006b24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006b28:	0052      	lsls	r2, r2, #1
 8006b2a:	ea42 12d0 	orr.w	r2, r2, r0, lsr #7
 8006b2e:	f801 2c01 	strb.w	r2, [r1, #-1]
 8006b32:	4561      	cmp	r1, ip
 8006b34:	d1f5      	bne.n	8006b22 <AES_CMAC_Final+0x60>
 8006b36:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8006b3a:	0052      	lsls	r2, r2, #1
 8006b3c:	f88d 201f 	strb.w	r2, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 8006b40:	18e2      	adds	r2, r4, r3
 8006b42:	2180      	movs	r1, #128	; 0x80
 8006b44:	f882 1101 	strb.w	r1, [r2, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8006b48:	3301      	adds	r3, #1
 8006b4a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8006b4e:	2b0f      	cmp	r3, #15
 8006b50:	d843      	bhi.n	8006bda <AES_CMAC_Final+0x118>
 8006b52:	461a      	mov	r2, r3
            ctx->M_last[ctx->M_n] = 0;
 8006b54:	2100      	movs	r1, #0
 8006b56:	e038      	b.n	8006bca <AES_CMAC_Final+0x108>
 8006b58:	aa04      	add	r2, sp, #16
 8006b5a:	f10d 001f 	add.w	r0, sp, #31
        LSHIFT( K, K );
 8006b5e:	7813      	ldrb	r3, [r2, #0]
 8006b60:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
 8006b6a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006b6e:	4282      	cmp	r2, r0
 8006b70:	d1f5      	bne.n	8006b5e <AES_CMAC_Final+0x9c>
 8006b72:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8006b76:	005b      	lsls	r3, r3, #1
        K[15] ^= 0x87;
 8006b78:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 8006b7c:	f88d 301f 	strb.w	r3, [sp, #31]
 8006b80:	e7c4      	b.n	8006b0c <AES_CMAC_Final+0x4a>
 8006b82:	f504 7180 	add.w	r1, r4, #256	; 0x100
 8006b86:	aa04      	add	r2, sp, #16
 8006b88:	f10d 0c20 	add.w	ip, sp, #32
        XOR( K, ctx->M_last );
 8006b8c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006b90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006b94:	4043      	eors	r3, r0
 8006b96:	700b      	strb	r3, [r1, #0]
 8006b98:	4562      	cmp	r2, ip
 8006b9a:	d1f7      	bne.n	8006b8c <AES_CMAC_Final+0xca>
 8006b9c:	e02a      	b.n	8006bf4 <AES_CMAC_Final+0x132>
 8006b9e:	a904      	add	r1, sp, #16
 8006ba0:	f10d 0c1f 	add.w	ip, sp, #31
            LSHIFT( K, K );
 8006ba4:	780a      	ldrb	r2, [r1, #0]
 8006ba6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006baa:	0052      	lsls	r2, r2, #1
 8006bac:	ea42 12d0 	orr.w	r2, r2, r0, lsr #7
 8006bb0:	f801 2c01 	strb.w	r2, [r1, #-1]
 8006bb4:	4561      	cmp	r1, ip
 8006bb6:	d1f5      	bne.n	8006ba4 <AES_CMAC_Final+0xe2>
 8006bb8:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8006bbc:	0052      	lsls	r2, r2, #1
            K[15] ^= 0x87;
 8006bbe:	f082 0287 	eor.w	r2, r2, #135	; 0x87
 8006bc2:	f88d 201f 	strb.w	r2, [sp, #31]
 8006bc6:	e7bb      	b.n	8006b40 <AES_CMAC_Final+0x7e>
        while( ++ctx->M_n < 16 )
 8006bc8:	461a      	mov	r2, r3
            ctx->M_last[ctx->M_n] = 0;
 8006bca:	4423      	add	r3, r4
 8006bcc:	f883 1101 	strb.w	r1, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8006bd0:	1c53      	adds	r3, r2, #1
 8006bd2:	2b0f      	cmp	r3, #15
 8006bd4:	d9f8      	bls.n	8006bc8 <AES_CMAC_Final+0x106>
 8006bd6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114

        XOR( K, ctx->M_last );
 8006bda:	f504 7180 	add.w	r1, r4, #256	; 0x100
 8006bde:	aa04      	add	r2, sp, #16
 8006be0:	f10d 0c20 	add.w	ip, sp, #32
 8006be4:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006be8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006bec:	4043      	eors	r3, r0
 8006bee:	700b      	strb	r3, [r1, #0]
 8006bf0:	4562      	cmp	r2, ip
 8006bf2:	d1f7      	bne.n	8006be4 <AES_CMAC_Final+0x122>
    }
    XOR( ctx->M_last, ctx->X );
 8006bf4:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
 8006bf8:	f504 7180 	add.w	r1, r4, #256	; 0x100
 8006bfc:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 8006c00:	7c1a      	ldrb	r2, [r3, #16]
 8006c02:	ea8c 0c02 	eor.w	ip, ip, r2
 8006c06:	f883 c000 	strb.w	ip, [r3]
 8006c0a:	4299      	cmp	r1, r3
 8006c0c:	d1f6      	bne.n	8006bfc <AES_CMAC_Final+0x13a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8006c0e:	2210      	movs	r2, #16
 8006c10:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 8006c14:	4668      	mov	r0, sp
 8006c16:	f006 ff31 	bl	800da7c <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8006c1a:	4622      	mov	r2, r4
 8006c1c:	4629      	mov	r1, r5
 8006c1e:	4668      	mov	r0, sp
 8006c20:	f000 f93a 	bl	8006e98 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8006c24:	2210      	movs	r2, #16
 8006c26:	2100      	movs	r1, #0
 8006c28:	eb0d 0002 	add.w	r0, sp, r2
 8006c2c:	f006 ff40 	bl	800dab0 <memset1>
}
 8006c30:	b009      	add	sp, #36	; 0x24
 8006c32:	bd30      	pop	{r4, r5, pc}

08006c34 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8006c34:	7803      	ldrb	r3, [r0, #0]
 8006c36:	780a      	ldrb	r2, [r1, #0]
 8006c38:	4053      	eors	r3, r2
 8006c3a:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8006c3c:	7843      	ldrb	r3, [r0, #1]
 8006c3e:	784a      	ldrb	r2, [r1, #1]
 8006c40:	4053      	eors	r3, r2
 8006c42:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8006c44:	7883      	ldrb	r3, [r0, #2]
 8006c46:	788a      	ldrb	r2, [r1, #2]
 8006c48:	4053      	eors	r3, r2
 8006c4a:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8006c4c:	78c3      	ldrb	r3, [r0, #3]
 8006c4e:	78ca      	ldrb	r2, [r1, #3]
 8006c50:	4053      	eors	r3, r2
 8006c52:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8006c54:	7903      	ldrb	r3, [r0, #4]
 8006c56:	790a      	ldrb	r2, [r1, #4]
 8006c58:	4053      	eors	r3, r2
 8006c5a:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8006c5c:	7943      	ldrb	r3, [r0, #5]
 8006c5e:	794a      	ldrb	r2, [r1, #5]
 8006c60:	4053      	eors	r3, r2
 8006c62:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8006c64:	7983      	ldrb	r3, [r0, #6]
 8006c66:	798a      	ldrb	r2, [r1, #6]
 8006c68:	4053      	eors	r3, r2
 8006c6a:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8006c6c:	79c3      	ldrb	r3, [r0, #7]
 8006c6e:	79ca      	ldrb	r2, [r1, #7]
 8006c70:	4053      	eors	r3, r2
 8006c72:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8006c74:	7a03      	ldrb	r3, [r0, #8]
 8006c76:	7a0a      	ldrb	r2, [r1, #8]
 8006c78:	4053      	eors	r3, r2
 8006c7a:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8006c7c:	7a43      	ldrb	r3, [r0, #9]
 8006c7e:	7a4a      	ldrb	r2, [r1, #9]
 8006c80:	4053      	eors	r3, r2
 8006c82:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8006c84:	7a83      	ldrb	r3, [r0, #10]
 8006c86:	7a8a      	ldrb	r2, [r1, #10]
 8006c88:	4053      	eors	r3, r2
 8006c8a:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8006c8c:	7ac3      	ldrb	r3, [r0, #11]
 8006c8e:	7aca      	ldrb	r2, [r1, #11]
 8006c90:	4053      	eors	r3, r2
 8006c92:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8006c94:	7b03      	ldrb	r3, [r0, #12]
 8006c96:	7b0a      	ldrb	r2, [r1, #12]
 8006c98:	4053      	eors	r3, r2
 8006c9a:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8006c9c:	7b43      	ldrb	r3, [r0, #13]
 8006c9e:	7b4a      	ldrb	r2, [r1, #13]
 8006ca0:	4053      	eors	r3, r2
 8006ca2:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8006ca4:	7b83      	ldrb	r3, [r0, #14]
 8006ca6:	7b8a      	ldrb	r2, [r1, #14]
 8006ca8:	4053      	eors	r3, r2
 8006caa:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8006cac:	7bc3      	ldrb	r3, [r0, #15]
 8006cae:	7bca      	ldrb	r2, [r1, #15]
 8006cb0:	4053      	eors	r3, r2
 8006cb2:	73c3      	strb	r3, [r0, #15]
#endif
}
 8006cb4:	4770      	bx	lr

08006cb6 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8006cb6:	780b      	ldrb	r3, [r1, #0]
 8006cb8:	f892 c000 	ldrb.w	ip, [r2]
 8006cbc:	ea83 030c 	eor.w	r3, r3, ip
 8006cc0:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8006cc2:	784b      	ldrb	r3, [r1, #1]
 8006cc4:	f892 c001 	ldrb.w	ip, [r2, #1]
 8006cc8:	ea83 030c 	eor.w	r3, r3, ip
 8006ccc:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8006cce:	788b      	ldrb	r3, [r1, #2]
 8006cd0:	f892 c002 	ldrb.w	ip, [r2, #2]
 8006cd4:	ea83 030c 	eor.w	r3, r3, ip
 8006cd8:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8006cda:	78cb      	ldrb	r3, [r1, #3]
 8006cdc:	f892 c003 	ldrb.w	ip, [r2, #3]
 8006ce0:	ea83 030c 	eor.w	r3, r3, ip
 8006ce4:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8006ce6:	790b      	ldrb	r3, [r1, #4]
 8006ce8:	f892 c004 	ldrb.w	ip, [r2, #4]
 8006cec:	ea83 030c 	eor.w	r3, r3, ip
 8006cf0:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8006cf2:	794b      	ldrb	r3, [r1, #5]
 8006cf4:	f892 c005 	ldrb.w	ip, [r2, #5]
 8006cf8:	ea83 030c 	eor.w	r3, r3, ip
 8006cfc:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8006cfe:	798b      	ldrb	r3, [r1, #6]
 8006d00:	f892 c006 	ldrb.w	ip, [r2, #6]
 8006d04:	ea83 030c 	eor.w	r3, r3, ip
 8006d08:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8006d0a:	79cb      	ldrb	r3, [r1, #7]
 8006d0c:	f892 c007 	ldrb.w	ip, [r2, #7]
 8006d10:	ea83 030c 	eor.w	r3, r3, ip
 8006d14:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8006d16:	7a0b      	ldrb	r3, [r1, #8]
 8006d18:	f892 c008 	ldrb.w	ip, [r2, #8]
 8006d1c:	ea83 030c 	eor.w	r3, r3, ip
 8006d20:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8006d22:	7a4b      	ldrb	r3, [r1, #9]
 8006d24:	f892 c009 	ldrb.w	ip, [r2, #9]
 8006d28:	ea83 030c 	eor.w	r3, r3, ip
 8006d2c:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8006d2e:	7a8b      	ldrb	r3, [r1, #10]
 8006d30:	f892 c00a 	ldrb.w	ip, [r2, #10]
 8006d34:	ea83 030c 	eor.w	r3, r3, ip
 8006d38:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8006d3a:	7acb      	ldrb	r3, [r1, #11]
 8006d3c:	f892 c00b 	ldrb.w	ip, [r2, #11]
 8006d40:	ea83 030c 	eor.w	r3, r3, ip
 8006d44:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8006d46:	7b0b      	ldrb	r3, [r1, #12]
 8006d48:	f892 c00c 	ldrb.w	ip, [r2, #12]
 8006d4c:	ea83 030c 	eor.w	r3, r3, ip
 8006d50:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8006d52:	7b4b      	ldrb	r3, [r1, #13]
 8006d54:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8006d58:	ea83 030c 	eor.w	r3, r3, ip
 8006d5c:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8006d5e:	7b8b      	ldrb	r3, [r1, #14]
 8006d60:	f892 c00e 	ldrb.w	ip, [r2, #14]
 8006d64:	ea83 030c 	eor.w	r3, r3, ip
 8006d68:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8006d6a:	7bcb      	ldrb	r3, [r1, #15]
 8006d6c:	7bd2      	ldrb	r2, [r2, #15]
 8006d6e:	4053      	eors	r3, r2
 8006d70:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8006d72:	4770      	bx	lr

08006d74 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8006d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t cc, rc, hi;

    switch( keylen )
 8006d78:	f1a1 0310 	sub.w	r3, r1, #16
 8006d7c:	b2dc      	uxtb	r4, r3
 8006d7e:	2c10      	cmp	r4, #16
 8006d80:	d806      	bhi.n	8006d90 <lorawan_aes_set_key+0x1c>
 8006d82:	2301      	movs	r3, #1
 8006d84:	40a3      	lsls	r3, r4
 8006d86:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8006d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d8e:	b92b      	cbnz	r3, 8006d9c <lorawan_aes_set_key+0x28>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
        return ( uint8_t )-1;
 8006d96:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8006d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while( nn-- )
 8006d9c:	1e4d      	subs	r5, r1, #1
 8006d9e:	b2ed      	uxtb	r5, r5
 8006da0:	2900      	cmp	r1, #0
 8006da2:	d070      	beq.n	8006e86 <lorawan_aes_set_key+0x112>
 8006da4:	1e53      	subs	r3, r2, #1
 8006da6:	3501      	adds	r5, #1
 8006da8:	4405      	add	r5, r0
        *d++ = *s++;
 8006daa:	f810 4b01 	ldrb.w	r4, [r0], #1
 8006dae:	f803 4f01 	strb.w	r4, [r3, #1]!
    while( nn-- )
 8006db2:	42a8      	cmp	r0, r5
 8006db4:	d1f9      	bne.n	8006daa <lorawan_aes_set_key+0x36>
    hi = (keylen + 28) << 2;
 8006db6:	f101 031c 	add.w	r3, r1, #28
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	fa5f fa83 	uxtb.w	sl, r3
    ctx->rnd = (hi >> 4) - 1;
 8006dc0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8006dca:	4551      	cmp	r1, sl
 8006dcc:	d259      	bcs.n	8006e82 <lorawan_aes_set_key+0x10e>
    hi = (keylen + 28) << 2;
 8006dce:	460b      	mov	r3, r1
 8006dd0:	f04f 0e00 	mov.w	lr, #0
 8006dd4:	f04f 0901 	mov.w	r9, #1
            t0 = s_box(t0);
 8006dd8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8006e94 <lorawan_aes_set_key+0x120>
 8006ddc:	e01f      	b.n	8006e1e <lorawan_aes_set_key+0xaa>
        else if( keylen > 24 && cc % keylen == 16 )
 8006dde:	2918      	cmp	r1, #24
 8006de0:	d902      	bls.n	8006de8 <lorawan_aes_set_key+0x74>
 8006de2:	f1bc 0f10 	cmp.w	ip, #16
 8006de6:	d041      	beq.n	8006e6c <lorawan_aes_set_key+0xf8>
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8006de8:	f812 c00e 	ldrb.w	ip, [r2, lr]
 8006dec:	ea87 070c 	eor.w	r7, r7, ip
 8006df0:	5417      	strb	r7, [r2, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8006df2:	4410      	add	r0, r2
 8006df4:	eb02 070e 	add.w	r7, r2, lr
 8006df8:	f897 c001 	ldrb.w	ip, [r7, #1]
 8006dfc:	ea86 060c 	eor.w	r6, r6, ip
 8006e00:	7046      	strb	r6, [r0, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8006e02:	78be      	ldrb	r6, [r7, #2]
 8006e04:	4075      	eors	r5, r6
 8006e06:	7085      	strb	r5, [r0, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8006e08:	78fd      	ldrb	r5, [r7, #3]
 8006e0a:	406c      	eors	r4, r5
 8006e0c:	70c4      	strb	r4, [r0, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8006e0e:	3304      	adds	r3, #4
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	f10e 0e04 	add.w	lr, lr, #4
 8006e16:	fa5f fe8e 	uxtb.w	lr, lr
 8006e1a:	4553      	cmp	r3, sl
 8006e1c:	d22f      	bcs.n	8006e7e <lorawan_aes_set_key+0x10a>
        t0 = ctx->ksch[cc - 4];
 8006e1e:	4618      	mov	r0, r3
 8006e20:	18d4      	adds	r4, r2, r3
 8006e22:	f814 7c04 	ldrb.w	r7, [r4, #-4]
        t1 = ctx->ksch[cc - 3];
 8006e26:	f814 6c03 	ldrb.w	r6, [r4, #-3]
        t2 = ctx->ksch[cc - 2];
 8006e2a:	f814 5c02 	ldrb.w	r5, [r4, #-2]
        t3 = ctx->ksch[cc - 1];
 8006e2e:	f814 4c01 	ldrb.w	r4, [r4, #-1]
        if( cc % keylen == 0 )
 8006e32:	fbb3 fcf1 	udiv	ip, r3, r1
 8006e36:	fb01 3c1c 	mls	ip, r1, ip, r3
 8006e3a:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 8006e3e:	d1ce      	bne.n	8006dde <lorawan_aes_set_key+0x6a>
            t0 = s_box(t1) ^ rc;
 8006e40:	f818 c006 	ldrb.w	ip, [r8, r6]
 8006e44:	ea89 0c0c 	eor.w	ip, r9, ip
            t1 = s_box(t2);
 8006e48:	f818 6005 	ldrb.w	r6, [r8, r5]
            t2 = s_box(t3);
 8006e4c:	f818 5004 	ldrb.w	r5, [r8, r4]
            t3 = s_box(tt);
 8006e50:	f818 4007 	ldrb.w	r4, [r8, r7]
            rc = f2(rc);
 8006e54:	ea4f 17d9 	mov.w	r7, r9, lsr #7
 8006e58:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8006e5c:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
 8006e60:	ea87 0949 	eor.w	r9, r7, r9, lsl #1
 8006e64:	fa5f f989 	uxtb.w	r9, r9
            t0 = s_box(t1) ^ rc;
 8006e68:	4667      	mov	r7, ip
 8006e6a:	e7bd      	b.n	8006de8 <lorawan_aes_set_key+0x74>
            t0 = s_box(t0);
 8006e6c:	f818 7007 	ldrb.w	r7, [r8, r7]
            t1 = s_box(t1);
 8006e70:	f818 6006 	ldrb.w	r6, [r8, r6]
            t2 = s_box(t2);
 8006e74:	f818 5005 	ldrb.w	r5, [r8, r5]
            t3 = s_box(t3);
 8006e78:	f818 4004 	ldrb.w	r4, [r8, r4]
 8006e7c:	e7b4      	b.n	8006de8 <lorawan_aes_set_key+0x74>
    return 0;
 8006e7e:	2000      	movs	r0, #0
 8006e80:	e78a      	b.n	8006d98 <lorawan_aes_set_key+0x24>
 8006e82:	2000      	movs	r0, #0
 8006e84:	e788      	b.n	8006d98 <lorawan_aes_set_key+0x24>
    ctx->rnd = (hi >> 4) - 1;
 8006e86:	2306      	movs	r3, #6
 8006e88:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
    hi = (keylen + 28) << 2;
 8006e8c:	f04f 0a70 	mov.w	sl, #112	; 0x70
 8006e90:	e79d      	b.n	8006dce <lorawan_aes_set_key+0x5a>
 8006e92:	bf00      	nop
 8006e94:	08011090 	.word	0x08011090

08006e98 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 8006e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9c:	b091      	sub	sp, #68	; 0x44
 8006e9e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006ea0:	920a      	str	r2, [sp, #40]	; 0x28
    if( ctx->rnd )
 8006ea2:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 816b 	beq.w	8007182 <lorawan_aes_encrypt+0x2ea>
 8006eac:	4614      	mov	r4, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8006eae:	4601      	mov	r1, r0
 8006eb0:	a80c      	add	r0, sp, #48	; 0x30
 8006eb2:	f7ff ff00 	bl	8006cb6 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8006eb6:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	f240 815e 	bls.w	800717c <lorawan_aes_encrypt+0x2e4>
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	9300      	str	r3, [sp, #0]
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8006ec4:	4cb0      	ldr	r4, [pc, #704]	; (8007188 <lorawan_aes_encrypt+0x2f0>)
 8006ec6:	4eb1      	ldr	r6, [pc, #708]	; (800718c <lorawan_aes_encrypt+0x2f4>)
 8006ec8:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 8007190 <lorawan_aes_encrypt+0x2f8>
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8006ecc:	f89d 5031 	ldrb.w	r5, [sp, #49]	; 0x31
 8006ed0:	9501      	str	r5, [sp, #4]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8006ed2:	f89d 7032 	ldrb.w	r7, [sp, #50]	; 0x32
 8006ed6:	9702      	str	r7, [sp, #8]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8006ed8:	f89d e033 	ldrb.w	lr, [sp, #51]	; 0x33
 8006edc:	f8cd e00c 	str.w	lr, [sp, #12]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8006ee0:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8006ee4:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8006ee8:	9304      	str	r3, [sp, #16]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8006eea:	f89d c037 	ldrb.w	ip, [sp, #55]	; 0x37
 8006eee:	f8cd c014 	str.w	ip, [sp, #20]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8006ef2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8006ef6:	9206      	str	r2, [sp, #24]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8006ef8:	f89d 5039 	ldrb.w	r5, [sp, #57]	; 0x39
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8006efc:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 8006f00:	9007      	str	r0, [sp, #28]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8006f02:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 8006f06:	f8cd 8020 	str.w	r8, [sp, #32]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8006f0a:	f89d 903d 	ldrb.w	r9, [sp, #61]	; 0x3d
 8006f0e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8006f12:	f89d 003e 	ldrb.w	r0, [sp, #62]	; 0x3e
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8006f16:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
 8006f1a:	f89d 8035 	ldrb.w	r8, [sp, #53]	; 0x35
 8006f1e:	f89d e03a 	ldrb.w	lr, [sp, #58]	; 0x3a
 8006f22:	f814 900e 	ldrb.w	r9, [r4, lr]
 8006f26:	f89d 703f 	ldrb.w	r7, [sp, #63]	; 0x3f
 8006f2a:	5de3      	ldrb	r3, [r4, r7]
 8006f2c:	f816 200c 	ldrb.w	r2, [r6, ip]
 8006f30:	f81b a008 	ldrb.w	sl, [fp, r8]
 8006f34:	ea82 020a 	eor.w	r2, r2, sl
 8006f38:	ea89 0202 	eor.w	r2, r9, r2
 8006f3c:	405a      	eors	r2, r3
 8006f3e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8006f42:	f814 200c 	ldrb.w	r2, [r4, ip]
 8006f46:	4053      	eors	r3, r2
 8006f48:	f816 a008 	ldrb.w	sl, [r6, r8]
 8006f4c:	ea8a 0303 	eor.w	r3, sl, r3
 8006f50:	f81b a00e 	ldrb.w	sl, [fp, lr]
 8006f54:	ea83 030a 	eor.w	r3, r3, sl
 8006f58:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8006f5c:	f814 3008 	ldrb.w	r3, [r4, r8]
 8006f60:	405a      	eors	r2, r3
 8006f62:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8006f66:	ea82 020e 	eor.w	r2, r2, lr
 8006f6a:	f81b e007 	ldrb.w	lr, [fp, r7]
 8006f6e:	ea82 020e 	eor.w	r2, r2, lr
 8006f72:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8006f76:	ea89 0303 	eor.w	r3, r9, r3
 8006f7a:	f81b 900c 	ldrb.w	r9, [fp, ip]
 8006f7e:	ea89 0903 	eor.w	r9, r9, r3
 8006f82:	5df3      	ldrb	r3, [r6, r7]
 8006f84:	ea89 0303 	eor.w	r3, r9, r3
 8006f88:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8006f8c:	5c27      	ldrb	r7, [r4, r0]
 8006f8e:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8006f92:	f814 300e 	ldrb.w	r3, [r4, lr]
 8006f96:	5c72      	ldrb	r2, [r6, r1]
 8006f98:	f81b c005 	ldrb.w	ip, [fp, r5]
 8006f9c:	ea82 020c 	eor.w	r2, r2, ip
 8006fa0:	407a      	eors	r2, r7
 8006fa2:	405a      	eors	r2, r3
 8006fa4:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8006fa8:	5c62      	ldrb	r2, [r4, r1]
 8006faa:	4053      	eors	r3, r2
 8006fac:	f816 c005 	ldrb.w	ip, [r6, r5]
 8006fb0:	ea8c 0303 	eor.w	r3, ip, r3
 8006fb4:	f81b c000 	ldrb.w	ip, [fp, r0]
 8006fb8:	ea83 030c 	eor.w	r3, r3, ip
 8006fbc:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8006fc0:	5d63      	ldrb	r3, [r4, r5]
 8006fc2:	405a      	eors	r2, r3
 8006fc4:	5c30      	ldrb	r0, [r6, r0]
 8006fc6:	4042      	eors	r2, r0
 8006fc8:	f81b 000e 	ldrb.w	r0, [fp, lr]
 8006fcc:	4042      	eors	r2, r0
 8006fce:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8006fd2:	407b      	eors	r3, r7
 8006fd4:	f81b 7001 	ldrb.w	r7, [fp, r1]
 8006fd8:	405f      	eors	r7, r3
 8006fda:	f816 300e 	ldrb.w	r3, [r6, lr]
 8006fde:	407b      	eors	r3, r7
 8006fe0:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8006fe4:	9f02      	ldr	r7, [sp, #8]
 8006fe6:	5de2      	ldrb	r2, [r4, r7]
 8006fe8:	f8dd c014 	ldr.w	ip, [sp, #20]
 8006fec:	f814 300c 	ldrb.w	r3, [r4, ip]
 8006ff0:	f8dd e018 	ldr.w	lr, [sp, #24]
 8006ff4:	f816 100e 	ldrb.w	r1, [r6, lr]
 8006ff8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006ffc:	f81b 0009 	ldrb.w	r0, [fp, r9]
 8007000:	4041      	eors	r1, r0
 8007002:	4051      	eors	r1, r2
 8007004:	4059      	eors	r1, r3
 8007006:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800700a:	f814 100e 	ldrb.w	r1, [r4, lr]
 800700e:	404b      	eors	r3, r1
 8007010:	f816 0009 	ldrb.w	r0, [r6, r9]
 8007014:	4043      	eors	r3, r0
 8007016:	f81b 0007 	ldrb.w	r0, [fp, r7]
 800701a:	4043      	eors	r3, r0
 800701c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8007020:	f814 3009 	ldrb.w	r3, [r4, r9]
 8007024:	4059      	eors	r1, r3
 8007026:	5df0      	ldrb	r0, [r6, r7]
 8007028:	4041      	eors	r1, r0
 800702a:	f81b 000c 	ldrb.w	r0, [fp, ip]
 800702e:	4041      	eors	r1, r0
 8007030:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8007034:	405a      	eors	r2, r3
 8007036:	f81b 300e 	ldrb.w	r3, [fp, lr]
 800703a:	4053      	eors	r3, r2
 800703c:	f816 200c 	ldrb.w	r2, [r6, ip]
 8007040:	4053      	eors	r3, r2
 8007042:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8007046:	9f04      	ldr	r7, [sp, #16]
 8007048:	5de3      	ldrb	r3, [r4, r7]
 800704a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800704e:	f814 100c 	ldrb.w	r1, [r4, ip]
 8007052:	f8dd e020 	ldr.w	lr, [sp, #32]
 8007056:	f816 200e 	ldrb.w	r2, [r6, lr]
 800705a:	9d01      	ldr	r5, [sp, #4]
 800705c:	f81b 0005 	ldrb.w	r0, [fp, r5]
 8007060:	4042      	eors	r2, r0
 8007062:	405a      	eors	r2, r3
 8007064:	404a      	eors	r2, r1
 8007066:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800706a:	f814 200e 	ldrb.w	r2, [r4, lr]
 800706e:	4051      	eors	r1, r2
 8007070:	5d70      	ldrb	r0, [r6, r5]
 8007072:	4041      	eors	r1, r0
 8007074:	f81b 0007 	ldrb.w	r0, [fp, r7]
 8007078:	4041      	eors	r1, r0
 800707a:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800707e:	5d61      	ldrb	r1, [r4, r5]
 8007080:	404a      	eors	r2, r1
 8007082:	5df0      	ldrb	r0, [r6, r7]
 8007084:	4042      	eors	r2, r0
 8007086:	f81b 000c 	ldrb.w	r0, [fp, ip]
 800708a:	4042      	eors	r2, r0
 800708c:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8007090:	404b      	eors	r3, r1
 8007092:	f81b 200e 	ldrb.w	r2, [fp, lr]
 8007096:	4053      	eors	r3, r2
 8007098:	f816 200c 	ldrb.w	r2, [r6, ip]
 800709c:	4053      	eors	r3, r2
 800709e:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    xor_block(d, k);
 80070a2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80070a4:	9f00      	ldr	r7, [sp, #0]
 80070a6:	eb05 1107 	add.w	r1, r5, r7, lsl #4
 80070aa:	a80c      	add	r0, sp, #48	; 0x30
 80070ac:	f7ff fdc2 	bl	8006c34 <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 80070b0:	463b      	mov	r3, r7
 80070b2:	3301      	adds	r3, #1
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	9200      	str	r2, [sp, #0]
 80070b8:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 80070bc:	4293      	cmp	r3, r2
 80070be:	f63f af05 	bhi.w	8006ecc <lorawan_aes_encrypt+0x34>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80070c2:	4b31      	ldr	r3, [pc, #196]	; (8007188 <lorawan_aes_encrypt+0x2f0>)
 80070c4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80070c8:	5c9a      	ldrb	r2, [r3, r2]
 80070ca:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 80070ce:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 80070d2:	5c9a      	ldrb	r2, [r3, r2]
 80070d4:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80070d8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80070dc:	5c9a      	ldrb	r2, [r3, r2]
 80070de:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 80070e2:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 80070e6:	5c9a      	ldrb	r2, [r3, r2]
 80070e8:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 80070ec:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 80070f0:	f89d 1035 	ldrb.w	r1, [sp, #53]	; 0x35
 80070f4:	5c59      	ldrb	r1, [r3, r1]
 80070f6:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
 80070fa:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
 80070fe:	5c59      	ldrb	r1, [r3, r1]
 8007100:	f88d 1035 	strb.w	r1, [sp, #53]	; 0x35
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8007104:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8007108:	5c59      	ldrb	r1, [r3, r1]
 800710a:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
 800710e:	5c9a      	ldrb	r2, [r3, r2]
 8007110:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8007114:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8007118:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
 800711c:	5c59      	ldrb	r1, [r3, r1]
 800711e:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
 8007122:	5c9a      	ldrb	r2, [r3, r2]
 8007124:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8007128:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 800712c:	f89d 103e 	ldrb.w	r1, [sp, #62]	; 0x3e
 8007130:	5c59      	ldrb	r1, [r3, r1]
 8007132:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
 8007136:	5c9a      	ldrb	r2, [r3, r2]
 8007138:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800713c:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8007140:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
 8007144:	5c59      	ldrb	r1, [r3, r1]
 8007146:	f88d 103f 	strb.w	r1, [sp, #63]	; 0x3f
 800714a:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
 800714e:	5c59      	ldrb	r1, [r3, r1]
 8007150:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8007154:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
 8007158:	5c59      	ldrb	r1, [r3, r1]
 800715a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
 800715e:	5c9b      	ldrb	r3, [r3, r2]
 8007160:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007166:	9a00      	ldr	r2, [sp, #0]
 8007168:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800716c:	a90c      	add	r1, sp, #48	; 0x30
 800716e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007170:	f7ff fda1 	bl	8006cb6 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8007174:	2000      	movs	r0, #0
}
 8007176:	b011      	add	sp, #68	; 0x44
 8007178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for( r = 1 ; r < ctx->rnd ; ++r )
 800717c:	2301      	movs	r3, #1
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	e79f      	b.n	80070c2 <lorawan_aes_encrypt+0x22a>
        return ( uint8_t )-1;
 8007182:	20ff      	movs	r0, #255	; 0xff
 8007184:	e7f7      	b.n	8007176 <lorawan_aes_encrypt+0x2de>
 8007186:	bf00      	nop
 8007188:	08011090 	.word	0x08011090
 800718c:	08010e90 	.word	0x08010e90
 8007190:	08010f90 	.word	0x08010f90

08007194 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 8007194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007198:	b0ca      	sub	sp, #296	; 0x128
 800719a:	9c50      	ldr	r4, [sp, #320]	; 0x140
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800719c:	2900      	cmp	r1, #0
 800719e:	d044      	beq.n	800722a <ComputeCmac+0x96>
 80071a0:	4605      	mov	r5, r0
 80071a2:	4616      	mov	r6, r2
 80071a4:	4698      	mov	r8, r3
 80071a6:	460f      	mov	r7, r1
 80071a8:	2c00      	cmp	r4, #0
 80071aa:	d040      	beq.n	800722e <ComputeCmac+0x9a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 80071ac:	4668      	mov	r0, sp
 80071ae:	f7ff fbf3 	bl	8006998 <AES_CMAC_Init>
        if( SeNvm->KeyList[i].KeyID == keyID )
 80071b2:	4b20      	ldr	r3, [pc, #128]	; (8007234 <ComputeCmac+0xa0>)
 80071b4:	6819      	ldr	r1, [r3, #0]
 80071b6:	468e      	mov	lr, r1
 80071b8:	f04f 0c00 	mov.w	ip, #0
 80071bc:	f89e 2010 	ldrb.w	r2, [lr, #16]
 80071c0:	4542      	cmp	r2, r8
 80071c2:	d00a      	beq.n	80071da <ComputeCmac+0x46>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80071c4:	f10c 0c01 	add.w	ip, ip, #1
 80071c8:	f10e 0e11 	add.w	lr, lr, #17
 80071cc:	f1bc 0f0a 	cmp.w	ip, #10
 80071d0:	d1f4      	bne.n	80071bc <ComputeCmac+0x28>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80071d2:	2003      	movs	r0, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 80071d4:	b04a      	add	sp, #296	; 0x128
 80071d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 80071da:	f10c 0c01 	add.w	ip, ip, #1
 80071de:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80071e2:	4461      	add	r1, ip
 80071e4:	4668      	mov	r0, sp
 80071e6:	f7ff fbe6 	bl	80069b6 <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 80071ea:	b125      	cbz	r5, 80071f6 <ComputeCmac+0x62>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 80071ec:	2210      	movs	r2, #16
 80071ee:	4629      	mov	r1, r5
 80071f0:	4668      	mov	r0, sp
 80071f2:	f7ff fbe7 	bl	80069c4 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 80071f6:	4632      	mov	r2, r6
 80071f8:	4639      	mov	r1, r7
 80071fa:	4668      	mov	r0, sp
 80071fc:	f7ff fbe2 	bl	80069c4 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 8007200:	4669      	mov	r1, sp
 8007202:	a846      	add	r0, sp, #280	; 0x118
 8007204:	f7ff fc5d 	bl	8006ac2 <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 8007208:	f89d 211b 	ldrb.w	r2, [sp, #283]	; 0x11b
 800720c:	f89d 311a 	ldrb.w	r3, [sp, #282]	; 0x11a
 8007210:	041b      	lsls	r3, r3, #16
 8007212:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                              ( uint32_t ) Cmac[0] );
 8007216:	f89d 2118 	ldrb.w	r2, [sp, #280]	; 0x118
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800721a:	4313      	orrs	r3, r2
 800721c:	f89d 2119 	ldrb.w	r2, [sp, #281]	; 0x119
 8007220:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007224:	6023      	str	r3, [r4, #0]
    return retval;
 8007226:	2000      	movs	r0, #0
 8007228:	e7d4      	b.n	80071d4 <ComputeCmac+0x40>
        return SECURE_ELEMENT_ERROR_NPE;
 800722a:	2002      	movs	r0, #2
 800722c:	e7d2      	b.n	80071d4 <ComputeCmac+0x40>
 800722e:	2002      	movs	r0, #2
 8007230:	e7d0      	b.n	80071d4 <ComputeCmac+0x40>
 8007232:	bf00      	nop
 8007234:	20000a2c 	.word	0x20000a2c

08007238 <SecureElementInit>:
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 8007238:	b140      	cbz	r0, 800724c <SecureElementInit+0x14>
{
 800723a:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800723c:	4a04      	ldr	r2, [pc, #16]	; (8007250 <SecureElementInit+0x18>)
 800723e:	6010      	str	r0, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 8007240:	22c0      	movs	r2, #192	; 0xc0
 8007242:	4904      	ldr	r1, [pc, #16]	; (8007254 <SecureElementInit+0x1c>)
 8007244:	f006 fc1a 	bl	800da7c <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 8007248:	2000      	movs	r0, #0
}
 800724a:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800724c:	2002      	movs	r0, #2
}
 800724e:	4770      	bx	lr
 8007250:	20000a2c 	.word	0x20000a2c
 8007254:	08011724 	.word	0x08011724

08007258 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 8007258:	b410      	push	{r4}
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800725a:	4b0b      	ldr	r3, [pc, #44]	; (8007288 <SecureElementGetKeyByID+0x30>)
 800725c:	681c      	ldr	r4, [r3, #0]
 800725e:	4622      	mov	r2, r4
 8007260:	2300      	movs	r3, #0
 8007262:	f892 c010 	ldrb.w	ip, [r2, #16]
 8007266:	4584      	cmp	ip, r0
 8007268:	d006      	beq.n	8007278 <SecureElementGetKeyByID+0x20>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800726a:	3301      	adds	r3, #1
 800726c:	3211      	adds	r2, #17
 800726e:	2b0a      	cmp	r3, #10
 8007270:	d1f7      	bne.n	8007262 <SecureElementGetKeyByID+0xa>
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007272:	2003      	movs	r0, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 8007274:	bc10      	pop	{r4}
 8007276:	4770      	bx	lr
            *keyItem = &(SeNvm->KeyList[i]);
 8007278:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800727c:	3310      	adds	r3, #16
 800727e:	4423      	add	r3, r4
 8007280:	600b      	str	r3, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8007282:	2000      	movs	r0, #0
 8007284:	e7f6      	b.n	8007274 <SecureElementGetKeyByID+0x1c>
 8007286:	bf00      	nop
 8007288:	20000a2c 	.word	0x20000a2c

0800728c <PrintKey>:
{
 800728c:	b510      	push	{r4, lr}
 800728e:	b092      	sub	sp, #72	; 0x48
 8007290:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 8007292:	a911      	add	r1, sp, #68	; 0x44
 8007294:	f7ff ffe0 	bl	8007258 <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 8007298:	2800      	cmp	r0, #0
 800729a:	d144      	bne.n	8007326 <PrintKey+0x9a>
        if (key == APP_KEY)
 800729c:	b1b4      	cbz	r4, 80072cc <PrintKey+0x40>
        else if (key == NWK_KEY)
 800729e:	2c01      	cmp	r4, #1
 80072a0:	d043      	beq.n	800732a <PrintKey+0x9e>
        else if (key == APP_S_KEY)
 80072a2:	2c03      	cmp	r4, #3
 80072a4:	d048      	beq.n	8007338 <PrintKey+0xac>
        else if (key == NWK_S_KEY)
 80072a6:	2c02      	cmp	r4, #2
 80072a8:	d04d      	beq.n	8007346 <PrintKey+0xba>
        else if (key == MC_ROOT_KEY)
 80072aa:	2c04      	cmp	r4, #4
 80072ac:	d052      	beq.n	8007354 <PrintKey+0xc8>
        else if (key == MC_KE_KEY)
 80072ae:	2c7f      	cmp	r4, #127	; 0x7f
 80072b0:	d057      	beq.n	8007362 <PrintKey+0xd6>
        else if (key == MC_KEY_0)
 80072b2:	2c80      	cmp	r4, #128	; 0x80
 80072b4:	d05c      	beq.n	8007370 <PrintKey+0xe4>
        else if (key == MC_APP_S_KEY_0)
 80072b6:	2c81      	cmp	r4, #129	; 0x81
 80072b8:	d061      	beq.n	800737e <PrintKey+0xf2>
        else if (key == MC_NWK_S_KEY_0)
 80072ba:	2c82      	cmp	r4, #130	; 0x82
 80072bc:	d10c      	bne.n	80072d8 <PrintKey+0x4c>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 80072be:	4b33      	ldr	r3, [pc, #204]	; (800738c <PrintKey+0x100>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	4611      	mov	r1, r2
 80072c4:	2002      	movs	r0, #2
 80072c6:	f009 fb35 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
 80072ca:	e005      	b.n	80072d8 <PrintKey+0x4c>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 80072cc:	4b30      	ldr	r3, [pc, #192]	; (8007390 <PrintKey+0x104>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	4611      	mov	r1, r2
 80072d2:	2002      	movs	r0, #2
 80072d4:	f009 fb2e 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80072d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072da:	7c1a      	ldrb	r2, [r3, #16]
 80072dc:	920f      	str	r2, [sp, #60]	; 0x3c
 80072de:	7bda      	ldrb	r2, [r3, #15]
 80072e0:	920e      	str	r2, [sp, #56]	; 0x38
 80072e2:	7b9a      	ldrb	r2, [r3, #14]
 80072e4:	920d      	str	r2, [sp, #52]	; 0x34
 80072e6:	7b5a      	ldrb	r2, [r3, #13]
 80072e8:	920c      	str	r2, [sp, #48]	; 0x30
 80072ea:	7b1a      	ldrb	r2, [r3, #12]
 80072ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80072ee:	7ada      	ldrb	r2, [r3, #11]
 80072f0:	920a      	str	r2, [sp, #40]	; 0x28
 80072f2:	7a9a      	ldrb	r2, [r3, #10]
 80072f4:	9209      	str	r2, [sp, #36]	; 0x24
 80072f6:	7a5a      	ldrb	r2, [r3, #9]
 80072f8:	9208      	str	r2, [sp, #32]
 80072fa:	7a1a      	ldrb	r2, [r3, #8]
 80072fc:	9207      	str	r2, [sp, #28]
 80072fe:	79da      	ldrb	r2, [r3, #7]
 8007300:	9206      	str	r2, [sp, #24]
 8007302:	799a      	ldrb	r2, [r3, #6]
 8007304:	9205      	str	r2, [sp, #20]
 8007306:	795a      	ldrb	r2, [r3, #5]
 8007308:	9204      	str	r2, [sp, #16]
 800730a:	791a      	ldrb	r2, [r3, #4]
 800730c:	9203      	str	r2, [sp, #12]
 800730e:	78da      	ldrb	r2, [r3, #3]
 8007310:	9202      	str	r2, [sp, #8]
 8007312:	789a      	ldrb	r2, [r3, #2]
 8007314:	9201      	str	r2, [sp, #4]
 8007316:	785b      	ldrb	r3, [r3, #1]
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	4b1e      	ldr	r3, [pc, #120]	; (8007394 <PrintKey+0x108>)
 800731c:	2200      	movs	r2, #0
 800731e:	4611      	mov	r1, r2
 8007320:	2002      	movs	r0, #2
 8007322:	f009 fb07 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
}
 8007326:	b012      	add	sp, #72	; 0x48
 8007328:	bd10      	pop	{r4, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800732a:	4b1b      	ldr	r3, [pc, #108]	; (8007398 <PrintKey+0x10c>)
 800732c:	2200      	movs	r2, #0
 800732e:	4611      	mov	r1, r2
 8007330:	2002      	movs	r0, #2
 8007332:	f009 faff 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
 8007336:	e7cf      	b.n	80072d8 <PrintKey+0x4c>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 8007338:	4b18      	ldr	r3, [pc, #96]	; (800739c <PrintKey+0x110>)
 800733a:	2200      	movs	r2, #0
 800733c:	4611      	mov	r1, r2
 800733e:	2002      	movs	r0, #2
 8007340:	f009 faf8 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
 8007344:	e7c8      	b.n	80072d8 <PrintKey+0x4c>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 8007346:	4b16      	ldr	r3, [pc, #88]	; (80073a0 <PrintKey+0x114>)
 8007348:	2200      	movs	r2, #0
 800734a:	4611      	mov	r1, r2
 800734c:	2002      	movs	r0, #2
 800734e:	f009 faf1 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
 8007352:	e7c1      	b.n	80072d8 <PrintKey+0x4c>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 8007354:	4b13      	ldr	r3, [pc, #76]	; (80073a4 <PrintKey+0x118>)
 8007356:	2200      	movs	r2, #0
 8007358:	4611      	mov	r1, r2
 800735a:	2002      	movs	r0, #2
 800735c:	f009 faea 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
 8007360:	e7ba      	b.n	80072d8 <PrintKey+0x4c>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 8007362:	4b11      	ldr	r3, [pc, #68]	; (80073a8 <PrintKey+0x11c>)
 8007364:	2200      	movs	r2, #0
 8007366:	4611      	mov	r1, r2
 8007368:	2002      	movs	r0, #2
 800736a:	f009 fae3 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
 800736e:	e7b3      	b.n	80072d8 <PrintKey+0x4c>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 8007370:	4b0e      	ldr	r3, [pc, #56]	; (80073ac <PrintKey+0x120>)
 8007372:	2200      	movs	r2, #0
 8007374:	4611      	mov	r1, r2
 8007376:	2002      	movs	r0, #2
 8007378:	f009 fadc 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
 800737c:	e7ac      	b.n	80072d8 <PrintKey+0x4c>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800737e:	4b0c      	ldr	r3, [pc, #48]	; (80073b0 <PrintKey+0x124>)
 8007380:	2200      	movs	r2, #0
 8007382:	4611      	mov	r1, r2
 8007384:	2002      	movs	r0, #2
 8007386:	f009 fad5 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
 800738a:	e7a5      	b.n	80072d8 <PrintKey+0x4c>
 800738c:	08011250 	.word	0x08011250
 8007390:	08011190 	.word	0x08011190
 8007394:	08011268 	.word	0x08011268
 8007398:	080111a8 	.word	0x080111a8
 800739c:	080111c0 	.word	0x080111c0
 80073a0:	080111d8 	.word	0x080111d8
 80073a4:	080111f0 	.word	0x080111f0
 80073a8:	08011208 	.word	0x08011208
 80073ac:	08011220 	.word	0x08011220
 80073b0:	08011238 	.word	0x08011238

080073b4 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 80073b4:	b510      	push	{r4, lr}
 80073b6:	b088      	sub	sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 80073b8:	4b27      	ldr	r3, [pc, #156]	; (8007458 <SecureElementPrintKeys+0xa4>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	4611      	mov	r1, r2
 80073be:	2002      	movs	r0, #2
 80073c0:	f009 fab8 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 80073c4:	2000      	movs	r0, #0
 80073c6:	f7ff ff61 	bl	800728c <PrintKey>
    PrintKey(NWK_KEY);
 80073ca:	2001      	movs	r0, #1
 80073cc:	f7ff ff5e 	bl	800728c <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 80073d0:	4b22      	ldr	r3, [pc, #136]	; (800745c <SecureElementPrintKeys+0xa8>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	4611      	mov	r1, r2
 80073d6:	2002      	movs	r0, #2
 80073d8:	f009 faac 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 80073dc:	2003      	movs	r0, #3
 80073de:	f7ff ff55 	bl	800728c <PrintKey>
    PrintKey(NWK_S_KEY);
 80073e2:	2002      	movs	r0, #2
 80073e4:	f7ff ff52 	bl	800728c <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 80073e8:	4b1d      	ldr	r3, [pc, #116]	; (8007460 <SecureElementPrintKeys+0xac>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	4611      	mov	r1, r2
 80073ee:	2002      	movs	r0, #2
 80073f0:	f009 faa0 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80073f4:	4c1b      	ldr	r4, [pc, #108]	; (8007464 <SecureElementPrintKeys+0xb0>)
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	79da      	ldrb	r2, [r3, #7]
 80073fa:	9207      	str	r2, [sp, #28]
 80073fc:	799a      	ldrb	r2, [r3, #6]
 80073fe:	9206      	str	r2, [sp, #24]
 8007400:	795a      	ldrb	r2, [r3, #5]
 8007402:	9205      	str	r2, [sp, #20]
 8007404:	791a      	ldrb	r2, [r3, #4]
 8007406:	9204      	str	r2, [sp, #16]
 8007408:	78da      	ldrb	r2, [r3, #3]
 800740a:	9203      	str	r2, [sp, #12]
 800740c:	789a      	ldrb	r2, [r3, #2]
 800740e:	9202      	str	r2, [sp, #8]
 8007410:	785a      	ldrb	r2, [r3, #1]
 8007412:	9201      	str	r2, [sp, #4]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	4b13      	ldr	r3, [pc, #76]	; (8007468 <SecureElementPrintKeys+0xb4>)
 800741a:	2200      	movs	r2, #0
 800741c:	4611      	mov	r1, r2
 800741e:	2002      	movs	r0, #2
 8007420:	f009 fa88 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	7bda      	ldrb	r2, [r3, #15]
 8007428:	9207      	str	r2, [sp, #28]
 800742a:	7b9a      	ldrb	r2, [r3, #14]
 800742c:	9206      	str	r2, [sp, #24]
 800742e:	7b5a      	ldrb	r2, [r3, #13]
 8007430:	9205      	str	r2, [sp, #20]
 8007432:	7b1a      	ldrb	r2, [r3, #12]
 8007434:	9204      	str	r2, [sp, #16]
 8007436:	7ada      	ldrb	r2, [r3, #11]
 8007438:	9203      	str	r2, [sp, #12]
 800743a:	7a9a      	ldrb	r2, [r3, #10]
 800743c:	9202      	str	r2, [sp, #8]
 800743e:	7a5a      	ldrb	r2, [r3, #9]
 8007440:	9201      	str	r2, [sp, #4]
 8007442:	7a1b      	ldrb	r3, [r3, #8]
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	4b09      	ldr	r3, [pc, #36]	; (800746c <SecureElementPrintKeys+0xb8>)
 8007448:	2200      	movs	r2, #0
 800744a:	4611      	mov	r1, r2
 800744c:	2002      	movs	r0, #2
 800744e:	f009 fa71 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
}
 8007452:	2000      	movs	r0, #0
 8007454:	b008      	add	sp, #32
 8007456:	bd10      	pop	{r4, pc}
 8007458:	080112bc 	.word	0x080112bc
 800745c:	080112d4 	.word	0x080112d4
 8007460:	080112ec 	.word	0x080112ec
 8007464:	20000a2c 	.word	0x20000a2c
 8007468:	08011304 	.word	0x08011304
 800746c:	08011344 	.word	0x08011344

08007470 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 8007470:	b508      	push	{r3, lr}
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 8007472:	2004      	movs	r0, #4
 8007474:	f7ff ff0a 	bl	800728c <PrintKey>
    PrintKey(MC_KE_KEY);
 8007478:	207f      	movs	r0, #127	; 0x7f
 800747a:	f7ff ff07 	bl	800728c <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800747e:	2002      	movs	r0, #2
 8007480:	f7ff ff04 	bl	800728c <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 8007484:	2003      	movs	r0, #3
 8007486:	f7ff ff01 	bl	800728c <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
}
 800748a:	2000      	movs	r0, #0
 800748c:	bd08      	pop	{r3, pc}

0800748e <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800748e:	2b7e      	cmp	r3, #126	; 0x7e
 8007490:	d80a      	bhi.n	80074a8 <SecureElementComputeAesCmac+0x1a>
{
 8007492:	b500      	push	{lr}
 8007494:	b083      	sub	sp, #12
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8007496:	f8dd c010 	ldr.w	ip, [sp, #16]
 800749a:	f8cd c000 	str.w	ip, [sp]
 800749e:	f7ff fe79 	bl	8007194 <ComputeCmac>
}
 80074a2:	b003      	add	sp, #12
 80074a4:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80074a8:	2003      	movs	r0, #3
}
 80074aa:	4770      	bx	lr

080074ac <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 80074ac:	b190      	cbz	r0, 80074d4 <SecureElementVerifyAesCmac+0x28>
{
 80074ae:	b510      	push	{r4, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	468c      	mov	ip, r1
 80074b4:	4614      	mov	r4, r2
 80074b6:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 80074b8:	2000      	movs	r0, #0
 80074ba:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 80074bc:	aa03      	add	r2, sp, #12
 80074be:	9200      	str	r2, [sp, #0]
 80074c0:	4662      	mov	r2, ip
 80074c2:	f7ff fe67 	bl	8007194 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 80074c6:	b918      	cbnz	r0, 80074d0 <SecureElementVerifyAesCmac+0x24>
        return SECURE_ELEMENT_ERROR_NPE;
 80074c8:	9803      	ldr	r0, [sp, #12]
 80074ca:	1b00      	subs	r0, r0, r4
 80074cc:	bf18      	it	ne
 80074ce:	2001      	movne	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 80074d0:	b004      	add	sp, #16
 80074d2:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80074d4:	2002      	movs	r0, #2
}
 80074d6:	4770      	bx	lr

080074d8 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
    if( buffer == NULL || encBuffer == NULL )
 80074d8:	2800      	cmp	r0, #0
 80074da:	d039      	beq.n	8007550 <SecureElementAesEncrypt+0x78>
{
 80074dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074de:	b0bf      	sub	sp, #252	; 0xfc
 80074e0:	460d      	mov	r5, r1
 80074e2:	4614      	mov	r4, r2
 80074e4:	461e      	mov	r6, r3
 80074e6:	4607      	mov	r7, r0
    if( buffer == NULL || encBuffer == NULL )
 80074e8:	b3a3      	cbz	r3, 8007554 <SecureElementAesEncrypt+0x7c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 80074ea:	f011 0f0f 	tst.w	r1, #15
 80074ee:	d133      	bne.n	8007558 <SecureElementAesEncrypt+0x80>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 80074f0:	22f0      	movs	r2, #240	; 0xf0
 80074f2:	2100      	movs	r1, #0
 80074f4:	a801      	add	r0, sp, #4
 80074f6:	f006 fadb 	bl	800dab0 <memset1>
        if( SeNvm->KeyList[i].KeyID == keyID )
 80074fa:	4b19      	ldr	r3, [pc, #100]	; (8007560 <SecureElementAesEncrypt+0x88>)
 80074fc:	6818      	ldr	r0, [r3, #0]
 80074fe:	4686      	mov	lr, r0
 8007500:	f04f 0c00 	mov.w	ip, #0
 8007504:	f89e 3010 	ldrb.w	r3, [lr, #16]
 8007508:	42a3      	cmp	r3, r4
 800750a:	d008      	beq.n	800751e <SecureElementAesEncrypt+0x46>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800750c:	f10c 0c01 	add.w	ip, ip, #1
 8007510:	f10e 0e11 	add.w	lr, lr, #17
 8007514:	f1bc 0f0a 	cmp.w	ip, #10
 8007518:	d1f4      	bne.n	8007504 <SecureElementAesEncrypt+0x2c>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800751a:	2003      	movs	r0, #3
 800751c:	e01d      	b.n	800755a <SecureElementAesEncrypt+0x82>
    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );

    if( retval == SECURE_ELEMENT_SUCCESS )
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800751e:	f10c 0c01 	add.w	ip, ip, #1
 8007522:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8007526:	aa01      	add	r2, sp, #4
 8007528:	2110      	movs	r1, #16
 800752a:	4460      	add	r0, ip
 800752c:	f7ff fc22 	bl	8006d74 <lorawan_aes_set_key>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 8007530:	2000      	movs	r0, #0
        while( size != 0 )
 8007532:	b195      	cbz	r5, 800755a <SecureElementAesEncrypt+0x82>
 8007534:	462c      	mov	r4, r5
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 8007536:	1b28      	subs	r0, r5, r4
 8007538:	b2c0      	uxtb	r0, r0
 800753a:	aa01      	add	r2, sp, #4
 800753c:	1831      	adds	r1, r6, r0
 800753e:	4438      	add	r0, r7
 8007540:	f7ff fcaa 	bl	8006e98 <lorawan_aes_encrypt>
            size  = size - 16;
 8007544:	3c10      	subs	r4, #16
 8007546:	b2a4      	uxth	r4, r4
        while( size != 0 )
 8007548:	2c00      	cmp	r4, #0
 800754a:	d1f4      	bne.n	8007536 <SecureElementAesEncrypt+0x5e>
    return retval;
 800754c:	2000      	movs	r0, #0
 800754e:	e004      	b.n	800755a <SecureElementAesEncrypt+0x82>
        return SECURE_ELEMENT_ERROR_NPE;
 8007550:	2002      	movs	r0, #2
}
 8007552:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 8007554:	2002      	movs	r0, #2
 8007556:	e000      	b.n	800755a <SecureElementAesEncrypt+0x82>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8007558:	2005      	movs	r0, #5
}
 800755a:	b03f      	add	sp, #252	; 0xfc
 800755c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800755e:	bf00      	nop
 8007560:	20000a2c 	.word	0x20000a2c

08007564 <SecureElementSetKey>:
{
 8007564:	b530      	push	{r4, r5, lr}
 8007566:	b085      	sub	sp, #20
    if( key == NULL )
 8007568:	b391      	cbz	r1, 80075d0 <SecureElementSetKey+0x6c>
 800756a:	468c      	mov	ip, r1
        if( SeNvm->KeyList[i].KeyID == keyID )
 800756c:	4b19      	ldr	r3, [pc, #100]	; (80075d4 <SecureElementSetKey+0x70>)
 800756e:	681d      	ldr	r5, [r3, #0]
 8007570:	462b      	mov	r3, r5
 8007572:	2400      	movs	r4, #0
 8007574:	7c1a      	ldrb	r2, [r3, #16]
 8007576:	4282      	cmp	r2, r0
 8007578:	d007      	beq.n	800758a <SecureElementSetKey+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800757a:	3401      	adds	r4, #1
 800757c:	3311      	adds	r3, #17
 800757e:	2c0a      	cmp	r4, #10
 8007580:	d1f8      	bne.n	8007574 <SecureElementSetKey+0x10>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007582:	2503      	movs	r5, #3
}
 8007584:	4628      	mov	r0, r5
 8007586:	b005      	add	sp, #20
 8007588:	bd30      	pop	{r4, r5, pc}
            if ( keyID == MC_KEY_0 )
 800758a:	2880      	cmp	r0, #128	; 0x80
 800758c:	d009      	beq.n	80075a2 <SecureElementSetKey+0x3e>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800758e:	3401      	adds	r4, #1
 8007590:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8007594:	2210      	movs	r2, #16
 8007596:	4661      	mov	r1, ip
 8007598:	1928      	adds	r0, r5, r4
 800759a:	f006 fa6f 	bl	800da7c <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800759e:	2500      	movs	r5, #0
 80075a0:	e7f0      	b.n	8007584 <SecureElementSetKey+0x20>
                uint8_t               decryptedKey[16] = { 0 };
 80075a2:	2300      	movs	r3, #0
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	9301      	str	r3, [sp, #4]
 80075a8:	9302      	str	r3, [sp, #8]
 80075aa:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 80075ac:	466b      	mov	r3, sp
 80075ae:	227f      	movs	r2, #127	; 0x7f
 80075b0:	2110      	movs	r1, #16
 80075b2:	4660      	mov	r0, ip
 80075b4:	f7ff ff90 	bl	80074d8 <SecureElementAesEncrypt>
 80075b8:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 80075ba:	3401      	adds	r4, #1
 80075bc:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80075c0:	4b04      	ldr	r3, [pc, #16]	; (80075d4 <SecureElementSetKey+0x70>)
 80075c2:	6818      	ldr	r0, [r3, #0]
 80075c4:	2210      	movs	r2, #16
 80075c6:	4669      	mov	r1, sp
 80075c8:	4420      	add	r0, r4
 80075ca:	f006 fa57 	bl	800da7c <memcpy1>
                return retval;
 80075ce:	e7d9      	b.n	8007584 <SecureElementSetKey+0x20>
        return SECURE_ELEMENT_ERROR_NPE;
 80075d0:	2502      	movs	r5, #2
 80075d2:	e7d7      	b.n	8007584 <SecureElementSetKey+0x20>
 80075d4:	20000a2c 	.word	0x20000a2c

080075d8 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 80075d8:	b1d0      	cbz	r0, 8007610 <SecureElementDeriveAndStoreKey+0x38>
{
 80075da:	b510      	push	{r4, lr}
 80075dc:	b084      	sub	sp, #16
 80075de:	4614      	mov	r4, r2
 80075e0:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 80075e2:	2a7f      	cmp	r2, #127	; 0x7f
 80075e4:	d101      	bne.n	80075ea <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 80075e6:	2904      	cmp	r1, #4
 80075e8:	d114      	bne.n	8007614 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 80075ea:	2300      	movs	r3, #0
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	9301      	str	r3, [sp, #4]
 80075f0:	9302      	str	r3, [sp, #8]
 80075f2:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 80075f4:	466b      	mov	r3, sp
 80075f6:	460a      	mov	r2, r1
 80075f8:	2110      	movs	r1, #16
 80075fa:	4660      	mov	r0, ip
 80075fc:	f7ff ff6c 	bl	80074d8 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8007600:	b108      	cbz	r0, 8007606 <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8007602:	b004      	add	sp, #16
 8007604:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 8007606:	4669      	mov	r1, sp
 8007608:	4620      	mov	r0, r4
 800760a:	f7ff ffab 	bl	8007564 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800760e:	e7f8      	b.n	8007602 <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 8007610:	2002      	movs	r0, #2
}
 8007612:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007614:	2003      	movs	r0, #3
 8007616:	e7f4      	b.n	8007602 <SecureElementDeriveAndStoreKey+0x2a>

08007618 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 8007618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800761c:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8007620:	9c07      	ldr	r4, [sp, #28]
 8007622:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8007624:	b383      	cbz	r3, 8007688 <SecureElementProcessJoinAccept+0x70>
 8007626:	4698      	mov	r8, r3
 8007628:	b384      	cbz	r4, 800768c <SecureElementProcessJoinAccept+0x74>
 800762a:	b38e      	cbz	r6, 8007690 <SecureElementProcessJoinAccept+0x78>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800762c:	2d21      	cmp	r5, #33	; 0x21
 800762e:	d831      	bhi.n	8007694 <SecureElementProcessJoinAccept+0x7c>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8007630:	b2af      	uxth	r7, r5
 8007632:	463a      	mov	r2, r7
 8007634:	4619      	mov	r1, r3
 8007636:	4620      	mov	r0, r4
 8007638:	f006 fa20 	bl	800da7c <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800763c:	1e79      	subs	r1, r7, #1
 800763e:	1c63      	adds	r3, r4, #1
 8007640:	2201      	movs	r2, #1
 8007642:	b289      	uxth	r1, r1
 8007644:	eb08 0002 	add.w	r0, r8, r2
 8007648:	f7ff ff46 	bl	80074d8 <SecureElementAesEncrypt>
 800764c:	bb28      	cbnz	r0, 800769a <SecureElementProcessJoinAccept+0x82>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800764e:	7ae3      	ldrb	r3, [r4, #11]
 8007650:	09db      	lsrs	r3, r3, #7
 8007652:	7033      	strb	r3, [r6, #0]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 8007654:	bb1b      	cbnz	r3, 800769e <SecureElementProcessJoinAccept+0x86>
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8007656:	4425      	add	r5, r4
 8007658:	f815 3c02 	ldrb.w	r3, [r5, #-2]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800765c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007660:	0612      	lsls	r2, r2, #24
 8007662:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 8007666:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 800766a:	431a      	orrs	r2, r3
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800766c:	f815 0c03 	ldrb.w	r0, [r5, #-3]
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8007670:	1f39      	subs	r1, r7, #4
 8007672:	2301      	movs	r3, #1
 8007674:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007678:	b289      	uxth	r1, r1
 800767a:	4620      	mov	r0, r4
 800767c:	f7ff ff16 	bl	80074ac <SecureElementVerifyAesCmac>
        return SECURE_ELEMENT_ERROR_NPE;
 8007680:	3800      	subs	r0, #0
 8007682:	bf18      	it	ne
 8007684:	2001      	movne	r0, #1
 8007686:	e006      	b.n	8007696 <SecureElementProcessJoinAccept+0x7e>
 8007688:	2002      	movs	r0, #2
 800768a:	e004      	b.n	8007696 <SecureElementProcessJoinAccept+0x7e>
 800768c:	2002      	movs	r0, #2
 800768e:	e002      	b.n	8007696 <SecureElementProcessJoinAccept+0x7e>
 8007690:	2002      	movs	r0, #2
 8007692:	e000      	b.n	8007696 <SecureElementProcessJoinAccept+0x7e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8007694:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8007696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800769a:	2007      	movs	r0, #7
 800769c:	e7fb      	b.n	8007696 <SecureElementProcessJoinAccept+0x7e>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800769e:	2004      	movs	r0, #4
 80076a0:	e7f9      	b.n	8007696 <SecureElementProcessJoinAccept+0x7e>
	...

080076a4 <SecureElementRandomNumber>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
    if( randomNum == NULL )
 80076a4:	b138      	cbz	r0, 80076b6 <SecureElementRandomNumber+0x12>
{
 80076a6:	b510      	push	{r4, lr}
 80076a8:	4604      	mov	r4, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random();
 80076aa:	4b04      	ldr	r3, [pc, #16]	; (80076bc <SecureElementRandomNumber+0x18>)
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	4798      	blx	r3
 80076b0:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 80076b2:	2000      	movs	r0, #0
}
 80076b4:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80076b6:	2002      	movs	r0, #2
}
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	08011584 	.word	0x08011584

080076c0 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 80076c0:	b140      	cbz	r0, 80076d4 <SecureElementSetDevEui+0x14>
{
 80076c2:	b508      	push	{r3, lr}
 80076c4:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 80076c6:	2208      	movs	r2, #8
 80076c8:	4b03      	ldr	r3, [pc, #12]	; (80076d8 <SecureElementSetDevEui+0x18>)
 80076ca:	6818      	ldr	r0, [r3, #0]
 80076cc:	f006 f9d6 	bl	800da7c <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80076d0:	2000      	movs	r0, #0
}
 80076d2:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80076d4:	2002      	movs	r0, #2
}
 80076d6:	4770      	bx	lr
 80076d8:	20000a2c 	.word	0x20000a2c

080076dc <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 80076dc:	4b01      	ldr	r3, [pc, #4]	; (80076e4 <SecureElementGetDevEui+0x8>)
 80076de:	6818      	ldr	r0, [r3, #0]
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	20000a2c 	.word	0x20000a2c

080076e8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 80076e8:	b148      	cbz	r0, 80076fe <SecureElementSetJoinEui+0x16>
{
 80076ea:	b508      	push	{r3, lr}
 80076ec:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 80076ee:	4b05      	ldr	r3, [pc, #20]	; (8007704 <SecureElementSetJoinEui+0x1c>)
 80076f0:	6818      	ldr	r0, [r3, #0]
 80076f2:	2208      	movs	r2, #8
 80076f4:	4410      	add	r0, r2
 80076f6:	f006 f9c1 	bl	800da7c <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80076fa:	2000      	movs	r0, #0
}
 80076fc:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80076fe:	2002      	movs	r0, #2
}
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	20000a2c 	.word	0x20000a2c

08007708 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 8007708:	4b01      	ldr	r3, [pc, #4]	; (8007710 <SecureElementGetJoinEui+0x8>)
 800770a:	6818      	ldr	r0, [r3, #0]
}
 800770c:	3008      	adds	r0, #8
 800770e:	4770      	bx	lr
 8007710:	20000a2c 	.word	0x20000a2c

08007714 <LmHandlerDeviceTimeReq>:

    return lmhStatus;
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 8007714:	b500      	push	{lr}
 8007716:	b087      	sub	sp, #28
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 8007718:	230a      	movs	r3, #10
 800771a:	f88d 3004 	strb.w	r3, [sp, #4]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800771e:	a801      	add	r0, sp, #4
 8007720:	f003 fbb8 	bl	800ae94 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8007724:	4b04      	ldr	r3, [pc, #16]	; (8007738 <LmHandlerDeviceTimeReq+0x24>)
 8007726:	9a05      	ldr	r2, [sp, #20]
 8007728:	601a      	str	r2, [r3, #0]

    if( status == LORAMAC_STATUS_OK )
 800772a:	3800      	subs	r0, #0
 800772c:	bf18      	it	ne
 800772e:	2001      	movne	r0, #1
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
    }
}
 8007730:	4240      	negs	r0, r0
 8007732:	b007      	add	sp, #28
 8007734:	f85d fb04 	ldr.w	pc, [sp], #4
 8007738:	20000b24 	.word	0x20000b24

0800773c <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800773c:	b570      	push	{r4, r5, r6, lr}
 800773e:	4605      	mov	r5, r0
    TxParams.IsMcpsConfirm = 1;
 8007740:	4812      	ldr	r0, [pc, #72]	; (800778c <McpsConfirm+0x50>)
 8007742:	2301      	movs	r3, #1
 8007744:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 8007746:	786b      	ldrb	r3, [r5, #1]
 8007748:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800774a:	78ab      	ldrb	r3, [r5, #2]
 800774c:	7283      	strb	r3, [r0, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800774e:	68eb      	ldr	r3, [r5, #12]
 8007750:	60c3      	str	r3, [r0, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8007752:	f995 3003 	ldrsb.w	r3, [r5, #3]
 8007756:	7603      	strb	r3, [r0, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8007758:	692b      	ldr	r3, [r5, #16]
 800775a:	7643      	strb	r3, [r0, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800775c:	792b      	ldrb	r3, [r5, #4]
 800775e:	7243      	strb	r3, [r0, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 8007760:	4b0b      	ldr	r3, [pc, #44]	; (8007790 <McpsConfirm+0x54>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007766:	4798      	blx	r3
    }
}

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007768:	4c0a      	ldr	r4, [pc, #40]	; (8007794 <McpsConfirm+0x58>)
 800776a:	f104 0614 	add.w	r6, r4, #20
 800776e:	e001      	b.n	8007774 <McpsConfirm+0x38>
 8007770:	42a6      	cmp	r6, r4
 8007772:	d009      	beq.n	8007788 <McpsConfirm+0x4c>
    {
        if( LmHandlerPackages[i] != NULL )
 8007774:	f854 3b04 	ldr.w	r3, [r4], #4
 8007778:	2b00      	cmp	r3, #0
 800777a:	d0f9      	beq.n	8007770 <McpsConfirm+0x34>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d0f6      	beq.n	8007770 <McpsConfirm+0x34>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8007782:	4628      	mov	r0, r5
 8007784:	4798      	blx	r3
 8007786:	e7f3      	b.n	8007770 <McpsConfirm+0x34>
}
 8007788:	bd70      	pop	{r4, r5, r6, pc}
 800778a:	bf00      	nop
 800778c:	200000bc 	.word	0x200000bc
 8007790:	20000b28 	.word	0x20000b28
 8007794:	20000b2c 	.word	0x20000b2c

08007798 <LmHandlerProcess>:
{
 8007798:	b570      	push	{r4, r5, r6, lr}
    LoRaMacProcess( );
 800779a:	f001 ff23 	bl	80095e4 <LoRaMacProcess>
}
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800779e:	4d0f      	ldr	r5, [pc, #60]	; (80077dc <LmHandlerProcess+0x44>)
 80077a0:	2400      	movs	r4, #0
 80077a2:	e009      	b.n	80077b8 <LmHandlerProcess+0x20>
        return LmHandlerPackages[id]->IsInitialized( );
 80077a4:	4798      	blx	r3
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80077a6:	b118      	cbz	r0, 80077b0 <LmHandlerProcess+0x18>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
        {
            LmHandlerPackages[i]->Process( );
 80077a8:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80077b0:	3401      	adds	r4, #1
 80077b2:	b264      	sxtb	r4, r4
 80077b4:	2c05      	cmp	r4, #5
 80077b6:	d00f      	beq.n	80077d8 <LmHandlerProcess+0x40>
        if( ( LmHandlerPackages[i] != NULL ) &&
 80077b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d0f7      	beq.n	80077b0 <LmHandlerProcess+0x18>
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d0f4      	beq.n	80077b0 <LmHandlerProcess+0x18>
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 80077c6:	b2e3      	uxtb	r3, r4
 80077c8:	2b04      	cmp	r3, #4
 80077ca:	d8f1      	bhi.n	80077b0 <LmHandlerProcess+0x18>
 80077cc:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e6      	bne.n	80077a4 <LmHandlerProcess+0xc>
 80077d6:	e7eb      	b.n	80077b0 <LmHandlerProcess+0x18>
}
 80077d8:	bd70      	pop	{r4, r5, r6, pc}
 80077da:	bf00      	nop
 80077dc:	20000b2c 	.word	0x20000b2c

080077e0 <LmHandlerGetDutyCycleWaitTime>:
}
 80077e0:	4b01      	ldr	r3, [pc, #4]	; (80077e8 <LmHandlerGetDutyCycleWaitTime+0x8>)
 80077e2:	6818      	ldr	r0, [r3, #0]
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	20000b24 	.word	0x20000b24

080077ec <LmHandlerJoinStatus>:
{
 80077ec:	b500      	push	{lr}
 80077ee:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80077f0:	2301      	movs	r3, #1
 80077f2:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 80077f6:	a801      	add	r0, sp, #4
 80077f8:	f002 ff48 	bl	800a68c <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 80077fc:	b938      	cbnz	r0, 800780e <LmHandlerJoinStatus+0x22>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 80077fe:	f89d 0008 	ldrb.w	r0, [sp, #8]
            return LORAMAC_HANDLER_RESET;
 8007802:	3800      	subs	r0, #0
 8007804:	bf18      	it	ne
 8007806:	2001      	movne	r0, #1
}
 8007808:	b00b      	add	sp, #44	; 0x2c
 800780a:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_RESET;
 800780e:	2000      	movs	r0, #0
 8007810:	e7fa      	b.n	8007808 <LmHandlerJoinStatus+0x1c>
	...

08007814 <LmHandlerRequestClass>:
{
 8007814:	b510      	push	{r4, lr}
 8007816:	b08a      	sub	sp, #40	; 0x28
 8007818:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 800781a:	f001 fed3 	bl	80095c4 <LoRaMacIsBusy>
 800781e:	2800      	cmp	r0, #0
 8007820:	d137      	bne.n	8007892 <LmHandlerRequestClass+0x7e>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8007822:	f7ff ffe3 	bl	80077ec <LmHandlerJoinStatus>
 8007826:	2801      	cmp	r0, #1
 8007828:	d136      	bne.n	8007898 <LmHandlerRequestClass+0x84>
    mibReq.Type = MIB_DEVICE_CLASS;
 800782a:	2300      	movs	r3, #0
 800782c:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007830:	a801      	add	r0, sp, #4
 8007832:	f002 ff2b 	bl	800a68c <LoRaMacMibGetRequestConfirm>
 8007836:	bb90      	cbnz	r0, 800789e <LmHandlerRequestClass+0x8a>
    currentClass = mibReq.Param.Class;
 8007838:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 800783c:	42a3      	cmp	r3, r4
 800783e:	d031      	beq.n	80078a4 <LmHandlerRequestClass+0x90>
        switch( newClass )
 8007840:	2c01      	cmp	r4, #1
 8007842:	d031      	beq.n	80078a8 <LmHandlerRequestClass+0x94>
 8007844:	2c02      	cmp	r4, #2
 8007846:	d014      	beq.n	8007872 <LmHandlerRequestClass+0x5e>
 8007848:	b114      	cbz	r4, 8007850 <LmHandlerRequestClass+0x3c>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800784a:	2000      	movs	r0, #0
}
 800784c:	b00a      	add	sp, #40	; 0x28
 800784e:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 8007850:	b90b      	cbnz	r3, 8007856 <LmHandlerRequestClass+0x42>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007852:	2000      	movs	r0, #0
 8007854:	e7fa      	b.n	800784c <LmHandlerRequestClass+0x38>
                    mibReq.Param.Class = newClass;
 8007856:	2300      	movs	r3, #0
 8007858:	f88d 3008 	strb.w	r3, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800785c:	a801      	add	r0, sp, #4
 800785e:	f003 f847 	bl	800a8f0 <LoRaMacMibSetRequestConfirm>
 8007862:	bb20      	cbnz	r0, 80078ae <LmHandlerRequestClass+0x9a>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8007864:	4b18      	ldr	r3, [pc, #96]	; (80078c8 <LmHandlerRequestClass+0xb4>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786a:	b31b      	cbz	r3, 80078b4 <LmHandlerRequestClass+0xa0>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800786c:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800786e:	2000      	movs	r0, #0
 8007870:	e7ec      	b.n	800784c <LmHandlerRequestClass+0x38>
                if( currentClass != CLASS_A )
 8007872:	bb0b      	cbnz	r3, 80078b8 <LmHandlerRequestClass+0xa4>
                    mibReq.Param.Class = newClass;
 8007874:	2302      	movs	r3, #2
 8007876:	f88d 3008 	strb.w	r3, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800787a:	a801      	add	r0, sp, #4
 800787c:	f003 f838 	bl	800a8f0 <LoRaMacMibSetRequestConfirm>
 8007880:	b9e8      	cbnz	r0, 80078be <LmHandlerRequestClass+0xaa>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8007882:	4b11      	ldr	r3, [pc, #68]	; (80078c8 <LmHandlerRequestClass+0xb4>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007888:	b1e3      	cbz	r3, 80078c4 <LmHandlerRequestClass+0xb0>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800788a:	2002      	movs	r0, #2
 800788c:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800788e:	2000      	movs	r0, #0
 8007890:	e7dc      	b.n	800784c <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007892:	f06f 0001 	mvn.w	r0, #1
 8007896:	e7d9      	b.n	800784c <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007898:	f06f 0002 	mvn.w	r0, #2
 800789c:	e7d6      	b.n	800784c <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_ERROR;
 800789e:	f04f 30ff 	mov.w	r0, #4294967295
 80078a2:	e7d3      	b.n	800784c <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80078a4:	2000      	movs	r0, #0
 80078a6:	e7d1      	b.n	800784c <LmHandlerRequestClass+0x38>
        switch( newClass )
 80078a8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ac:	e7ce      	b.n	800784c <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 80078ae:	f04f 30ff 	mov.w	r0, #4294967295
 80078b2:	e7cb      	b.n	800784c <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80078b4:	2000      	movs	r0, #0
 80078b6:	e7c9      	b.n	800784c <LmHandlerRequestClass+0x38>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 80078b8:	f04f 30ff 	mov.w	r0, #4294967295
 80078bc:	e7c6      	b.n	800784c <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 80078be:	f04f 30ff 	mov.w	r0, #4294967295
 80078c2:	e7c3      	b.n	800784c <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80078c4:	2000      	movs	r0, #0
 80078c6:	e7c1      	b.n	800784c <LmHandlerRequestClass+0x38>
 80078c8:	20000b28 	.word	0x20000b28

080078cc <LmHandlerJoin>:
{
 80078cc:	b500      	push	{lr}
 80078ce:	b08f      	sub	sp, #60	; 0x3c
    mlmeReq.Type = MLME_JOIN;
 80078d0:	2301      	movs	r3, #1
 80078d2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 80078d6:	4b28      	ldr	r3, [pc, #160]	; (8007978 <LmHandlerJoin+0xac>)
 80078d8:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80078dc:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    if ( mode == ACTIVATION_TYPE_OTAA )
 80078e0:	2802      	cmp	r0, #2
 80078e2:	d021      	beq.n	8007928 <LmHandlerJoin+0x5c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 80078e4:	2001      	movs	r0, #1
 80078e6:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 80078ea:	4b24      	ldr	r3, [pc, #144]	; (800797c <LmHandlerJoin+0xb0>)
 80078ec:	7198      	strb	r0, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 80078ee:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80078f0:	2000      	movs	r0, #0
 80078f2:	7158      	strb	r0, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 80078f4:	71d9      	strb	r1, [r3, #7]
        if (CtxRestoreDone == false)
 80078f6:	4b22      	ldr	r3, [pc, #136]	; (8007980 <LmHandlerJoin+0xb4>)
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	b30b      	cbz	r3, 8007940 <LmHandlerJoin+0x74>
        LoRaMacStart();
 80078fc:	f002 fe16 	bl	800a52c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007900:	2301      	movs	r3, #1
 8007902:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8007906:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800790a:	4668      	mov	r0, sp
 800790c:	f002 fff0 	bl	800a8f0 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8007910:	4b1c      	ldr	r3, [pc, #112]	; (8007984 <LmHandlerJoin+0xb8>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007916:	4819      	ldr	r0, [pc, #100]	; (800797c <LmHandlerJoin+0xb0>)
 8007918:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800791a:	4b17      	ldr	r3, [pc, #92]	; (8007978 <LmHandlerJoin+0xac>)
 800791c:	7858      	ldrb	r0, [r3, #1]
 800791e:	f7ff ff79 	bl	8007814 <LmHandlerRequestClass>
}
 8007922:	b00f      	add	sp, #60	; 0x3c
 8007924:	f85d fb04 	ldr.w	pc, [sp], #4
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8007928:	2202      	movs	r2, #2
 800792a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800792e:	4b13      	ldr	r3, [pc, #76]	; (800797c <LmHandlerJoin+0xb0>)
 8007930:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8007932:	71d9      	strb	r1, [r3, #7]
        LoRaMacStart();
 8007934:	f002 fdfa 	bl	800a52c <LoRaMacStart>
        LoRaMacMlmeRequest( &mlmeReq );
 8007938:	a809      	add	r0, sp, #36	; 0x24
 800793a:	f003 faab 	bl	800ae94 <LoRaMacMlmeRequest>
 800793e:	e7f0      	b.n	8007922 <LmHandlerJoin+0x56>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8007940:	231e      	movs	r3, #30
 8007942:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8007946:	f88d 2004 	strb.w	r2, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800794a:	4668      	mov	r0, sp
 800794c:	f002 ffd0 	bl	800a8f0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 8007950:	231f      	movs	r3, #31
 8007952:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8007956:	4b08      	ldr	r3, [pc, #32]	; (8007978 <LmHandlerJoin+0xac>)
 8007958:	791b      	ldrb	r3, [r3, #4]
 800795a:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800795e:	4668      	mov	r0, sp
 8007960:	f002 ffc6 	bl	800a8f0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8007964:	2328      	movs	r3, #40	; 0x28
 8007966:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800796a:	4b07      	ldr	r3, [pc, #28]	; (8007988 <LmHandlerJoin+0xbc>)
 800796c:	9301      	str	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800796e:	4668      	mov	r0, sp
 8007970:	f002 ffbe 	bl	800a8f0 <LoRaMacMibSetRequestConfirm>
 8007974:	e7c2      	b.n	80078fc <LmHandlerJoin+0x30>
 8007976:	bf00      	nop
 8007978:	20000b40 	.word	0x20000b40
 800797c:	20000094 	.word	0x20000094
 8007980:	20000b22 	.word	0x20000b22
 8007984:	20000b28 	.word	0x20000b28
 8007988:	01000300 	.word	0x01000300

0800798c <LmHandlerSend>:
{
 800798c:	b570      	push	{r4, r5, r6, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	4604      	mov	r4, r0
 8007992:	460d      	mov	r5, r1
 8007994:	4616      	mov	r6, r2
    if (LoRaMacIsBusy() == true)
 8007996:	f001 fe15 	bl	80095c4 <LoRaMacIsBusy>
 800799a:	2800      	cmp	r0, #0
 800799c:	d16a      	bne.n	8007a74 <LmHandlerSend+0xe8>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800799e:	f7ff ff25 	bl	80077ec <LmHandlerJoinStatus>
 80079a2:	2801      	cmp	r0, #1
 80079a4:	d142      	bne.n	8007a2c <LmHandlerSend+0xa0>
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 80079a6:	4b39      	ldr	r3, [pc, #228]	; (8007a8c <LmHandlerSend+0x100>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	4798      	blx	r3
 80079ae:	b138      	cbz	r0, 80079c0 <LmHandlerSend+0x34>
 80079b0:	7823      	ldrb	r3, [r4, #0]
 80079b2:	4a36      	ldr	r2, [pc, #216]	; (8007a8c <LmHandlerSend+0x100>)
 80079b4:	6812      	ldr	r2, [r2, #0]
 80079b6:	7812      	ldrb	r2, [r2, #0]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d001      	beq.n	80079c0 <LmHandlerSend+0x34>
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d15c      	bne.n	8007a7a <LmHandlerSend+0xee>
    TxParams.MsgType = isTxConfirmed;
 80079c0:	4b33      	ldr	r3, [pc, #204]	; (8007a90 <LmHandlerSend+0x104>)
 80079c2:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 80079c4:	3d00      	subs	r5, #0
 80079c6:	bf18      	it	ne
 80079c8:	2501      	movne	r5, #1
 80079ca:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 80079ce:	4b31      	ldr	r3, [pc, #196]	; (8007a94 <LmHandlerSend+0x108>)
 80079d0:	791b      	ldrb	r3, [r3, #4]
 80079d2:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 80079d6:	4669      	mov	r1, sp
 80079d8:	7860      	ldrb	r0, [r4, #1]
 80079da:	f002 fdf3 	bl	800a5c4 <LoRaMacQueryTxPossible>
 80079de:	b368      	cbz	r0, 8007a3c <LmHandlerSend+0xb0>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 80079e0:	2300      	movs	r3, #0
 80079e2:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 80079e6:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 80079e8:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 80079ec:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 80079f0:	4b27      	ldr	r3, [pc, #156]	; (8007a90 <LmHandlerSend+0x104>)
 80079f2:	f103 0c10 	add.w	ip, r3, #16
 80079f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80079fa:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 80079fe:	4a25      	ldr	r2, [pc, #148]	; (8007a94 <LmHandlerSend+0x108>)
 8007a00:	7912      	ldrb	r2, [r2, #4]
 8007a02:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8007a04:	4631      	mov	r1, r6
 8007a06:	a801      	add	r0, sp, #4
 8007a08:	f003 fb66 	bl	800b0d8 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8007a0c:	4b22      	ldr	r3, [pc, #136]	; (8007a98 <LmHandlerSend+0x10c>)
 8007a0e:	9a05      	ldr	r2, [sp, #20]
 8007a10:	601a      	str	r2, [r3, #0]
    switch (status)
 8007a12:	2811      	cmp	r0, #17
 8007a14:	d82b      	bhi.n	8007a6e <LmHandlerSend+0xe2>
 8007a16:	e8df f000 	tbb	[pc, r0]
 8007a1a:	331f      	.short	0x331f
 8007a1c:	2a2a2a2a 	.word	0x2a2a2a2a
 8007a20:	2a2a1c2a 	.word	0x2a2a1c2a
 8007a24:	2a2a272a 	.word	0x2a2a272a
 8007a28:	24333333 	.word	0x24333333
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8007a2c:	4b1b      	ldr	r3, [pc, #108]	; (8007a9c <LmHandlerSend+0x110>)
 8007a2e:	79d9      	ldrb	r1, [r3, #7]
 8007a30:	7998      	ldrb	r0, [r3, #6]
 8007a32:	f7ff ff4b 	bl	80078cc <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007a36:	f06f 0502 	mvn.w	r5, #2
 8007a3a:	e023      	b.n	8007a84 <LmHandlerSend+0xf8>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8007a3c:	7823      	ldrb	r3, [r4, #0]
 8007a3e:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8007a42:	7863      	ldrb	r3, [r4, #1]
 8007a44:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8007a48:	6863      	ldr	r3, [r4, #4]
 8007a4a:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8007a4c:	f04f 35ff 	mov.w	r5, #4294967295
 8007a50:	e7ce      	b.n	80079f0 <LmHandlerSend+0x64>
    switch (status)
 8007a52:	f06f 0502 	mvn.w	r5, #2
 8007a56:	e015      	b.n	8007a84 <LmHandlerSend+0xf8>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8007a58:	f115 0f07 	cmn.w	r5, #7
 8007a5c:	bf18      	it	ne
 8007a5e:	2500      	movne	r5, #0
 8007a60:	e010      	b.n	8007a84 <LmHandlerSend+0xf8>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8007a62:	f06f 0504 	mvn.w	r5, #4
            break;
 8007a66:	e00d      	b.n	8007a84 <LmHandlerSend+0xf8>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8007a68:	f06f 0505 	mvn.w	r5, #5
            break;
 8007a6c:	e00a      	b.n	8007a84 <LmHandlerSend+0xf8>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8007a6e:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 8007a72:	e007      	b.n	8007a84 <LmHandlerSend+0xf8>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007a74:	f06f 0501 	mvn.w	r5, #1
 8007a78:	e004      	b.n	8007a84 <LmHandlerSend+0xf8>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8007a7a:	f06f 0503 	mvn.w	r5, #3
 8007a7e:	e001      	b.n	8007a84 <LmHandlerSend+0xf8>
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 8007a80:	f06f 0501 	mvn.w	r5, #1
}
 8007a84:	4628      	mov	r0, r5
 8007a86:	b006      	add	sp, #24
 8007a88:	bd70      	pop	{r4, r5, r6, pc}
 8007a8a:	bf00      	nop
 8007a8c:	20000b2c 	.word	0x20000b2c
 8007a90:	200000bc 	.word	0x200000bc
 8007a94:	20000b40 	.word	0x20000b40
 8007a98:	20000b24 	.word	0x20000b24
 8007a9c:	20000094 	.word	0x20000094

08007aa0 <MlmeIndication>:
{
 8007aa0:	b570      	push	{r4, r5, r6, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	4605      	mov	r5, r0
    RxParams.IsMcpsIndication = 0;
 8007aa6:	4b21      	ldr	r3, [pc, #132]	; (8007b2c <MlmeIndication+0x8c>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8007aac:	7842      	ldrb	r2, [r0, #1]
 8007aae:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8007ab0:	7882      	ldrb	r2, [r0, #2]
 8007ab2:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8007ab4:	880a      	ldrh	r2, [r1, #0]
 8007ab6:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8007ab8:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8007abc:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8007abe:	78ca      	ldrb	r2, [r1, #3]
 8007ac0:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8007ac2:	6842      	ldr	r2, [r0, #4]
 8007ac4:	60da      	str	r2, [r3, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 8007ac6:	7803      	ldrb	r3, [r0, #0]
 8007ac8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8007acc:	2b0b      	cmp	r3, #11
 8007ace:	d005      	beq.n	8007adc <MlmeIndication+0x3c>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8007ad0:	4b17      	ldr	r3, [pc, #92]	; (8007b30 <MlmeIndication+0x90>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad6:	4915      	ldr	r1, [pc, #84]	; (8007b2c <MlmeIndication+0x8c>)
 8007ad8:	2000      	movs	r0, #0
 8007ada:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007adc:	4c15      	ldr	r4, [pc, #84]	; (8007b34 <MlmeIndication+0x94>)
 8007ade:	f104 0614 	add.w	r6, r4, #20
 8007ae2:	e001      	b.n	8007ae8 <MlmeIndication+0x48>
 8007ae4:	42a6      	cmp	r6, r4
 8007ae6:	d009      	beq.n	8007afc <MlmeIndication+0x5c>
        if( LmHandlerPackages[i] != NULL )
 8007ae8:	f854 3b04 	ldr.w	r3, [r4], #4
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d0f9      	beq.n	8007ae4 <MlmeIndication+0x44>
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8007af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0f6      	beq.n	8007ae4 <MlmeIndication+0x44>
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8007af6:	4628      	mov	r0, r5
 8007af8:	4798      	blx	r3
 8007afa:	e7f3      	b.n	8007ae4 <MlmeIndication+0x44>
    switch( mlmeIndication->MlmeIndication )
 8007afc:	782b      	ldrb	r3, [r5, #0]
 8007afe:	2b07      	cmp	r3, #7
 8007b00:	d001      	beq.n	8007b06 <MlmeIndication+0x66>
}
 8007b02:	b002      	add	sp, #8
 8007b04:	bd70      	pop	{r4, r5, r6, pc}
            LmHandlerAppData_t appData =
 8007b06:	2300      	movs	r3, #0
 8007b08:	f88d 3000 	strb.w	r3, [sp]
 8007b0c:	f88d 3001 	strb.w	r3, [sp, #1]
 8007b10:	9301      	str	r3, [sp, #4]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 8007b12:	4b08      	ldr	r3, [pc, #32]	; (8007b34 <MlmeIndication+0x94>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	4798      	blx	r3
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d1f1      	bne.n	8007b02 <MlmeIndication+0x62>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 8007b1e:	2201      	movs	r2, #1
 8007b20:	2100      	movs	r1, #0
 8007b22:	4668      	mov	r0, sp
 8007b24:	f7ff ff32 	bl	800798c <LmHandlerSend>
}
 8007b28:	e7eb      	b.n	8007b02 <MlmeIndication+0x62>
 8007b2a:	bf00      	nop
 8007b2c:	200000a8 	.word	0x200000a8
 8007b30:	20000b28 	.word	0x20000b28
 8007b34:	20000b2c 	.word	0x20000b2c

08007b38 <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 8007b38:	b170      	cbz	r0, 8007b58 <LmHandlerGetCurrentClass+0x20>
{
 8007b3a:	b510      	push	{r4, lr}
 8007b3c:	b08a      	sub	sp, #40	; 0x28
 8007b3e:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8007b40:	2300      	movs	r3, #0
 8007b42:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 8007b46:	a801      	add	r0, sp, #4
 8007b48:	f002 fda0 	bl	800a68c <LoRaMacMibGetRequestConfirm>
 8007b4c:	b938      	cbnz	r0, 8007b5e <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 8007b4e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8007b52:	7023      	strb	r3, [r4, #0]
}
 8007b54:	b00a      	add	sp, #40	; 0x28
 8007b56:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007b58:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007b5c:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8007b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b62:	e7f7      	b.n	8007b54 <LmHandlerGetCurrentClass+0x1c>

08007b64 <McpsIndication>:
{
 8007b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b66:	b087      	sub	sp, #28
 8007b68:	460b      	mov	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f88d 200f 	strb.w	r2, [sp, #15]
    RxParams.IsMcpsIndication = 1;
 8007b70:	492f      	ldr	r1, [pc, #188]	; (8007c30 <McpsIndication+0xcc>)
 8007b72:	2201      	movs	r2, #1
 8007b74:	700a      	strb	r2, [r1, #0]
    RxParams.Status = mcpsIndication->Status;
 8007b76:	7842      	ldrb	r2, [r0, #1]
 8007b78:	704a      	strb	r2, [r1, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8007b7a:	2a00      	cmp	r2, #0
 8007b7c:	d146      	bne.n	8007c0c <McpsIndication+0xa8>
 8007b7e:	4605      	mov	r5, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8007b80:	7902      	ldrb	r2, [r0, #4]
 8007b82:	720a      	strb	r2, [r1, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8007b84:	881a      	ldrh	r2, [r3, #0]
 8007b86:	724a      	strb	r2, [r1, #9]
    RxParams.Snr = rxStatus->Snr;
 8007b88:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8007b8c:	728a      	strb	r2, [r1, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8007b8e:	78db      	ldrb	r3, [r3, #3]
 8007b90:	740b      	strb	r3, [r1, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8007b92:	6903      	ldr	r3, [r0, #16]
 8007b94:	60cb      	str	r3, [r1, #12]
    appData.Port = mcpsIndication->Port;
 8007b96:	78c3      	ldrb	r3, [r0, #3]
 8007b98:	f88d 3010 	strb.w	r3, [sp, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 8007b9c:	7b03      	ldrb	r3, [r0, #12]
 8007b9e:	f88d 3011 	strb.w	r3, [sp, #17]
    appData.Buffer = mcpsIndication->Buffer;
 8007ba2:	6883      	ldr	r3, [r0, #8]
 8007ba4:	9305      	str	r3, [sp, #20]
    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 8007ba6:	4c23      	ldr	r4, [pc, #140]	; (8007c34 <McpsIndication+0xd0>)
 8007ba8:	6823      	ldr	r3, [r4, #0]
 8007baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bac:	a804      	add	r0, sp, #16
 8007bae:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 8007bb0:	6823      	ldr	r3, [r4, #0]
 8007bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb4:	b113      	cbz	r3, 8007bbc <McpsIndication+0x58>
 8007bb6:	7e2a      	ldrb	r2, [r5, #24]
 8007bb8:	b102      	cbz	r2, 8007bbc <McpsIndication+0x58>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8007bba:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007bbc:	4e1e      	ldr	r6, [pc, #120]	; (8007c38 <McpsIndication+0xd4>)
{
 8007bbe:	2401      	movs	r4, #1
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 8007bc0:	4637      	mov	r7, r6
 8007bc2:	e009      	b.n	8007bd8 <McpsIndication+0x74>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 8007bc4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007bc8:	69db      	ldr	r3, [r3, #28]
 8007bca:	4628      	mov	r0, r5
 8007bcc:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007bce:	b263      	sxtb	r3, r4
 8007bd0:	2b04      	cmp	r3, #4
 8007bd2:	dc14      	bgt.n	8007bfe <McpsIndication+0x9a>
 8007bd4:	3401      	adds	r4, #1
 8007bd6:	b2e4      	uxtb	r4, r4
        if( LmHandlerPackages[i] != NULL )
 8007bd8:	f856 3b04 	ldr.w	r3, [r6], #4
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d0f6      	beq.n	8007bce <McpsIndication+0x6a>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8007be0:	69da      	ldr	r2, [r3, #28]
 8007be2:	2a00      	cmp	r2, #0
 8007be4:	d0f3      	beq.n	8007bce <McpsIndication+0x6a>
 8007be6:	781a      	ldrb	r2, [r3, #0]
 8007be8:	78eb      	ldrb	r3, [r5, #3]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d0ea      	beq.n	8007bc4 <McpsIndication+0x60>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8007bee:	2c01      	cmp	r4, #1
 8007bf0:	d1ed      	bne.n	8007bce <McpsIndication+0x6a>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	4798      	blx	r3
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d0eb      	beq.n	8007bd4 <McpsIndication+0x70>
 8007bfc:	e7e2      	b.n	8007bc4 <McpsIndication+0x60>
    LmHandlerGetCurrentClass( &deviceClass );
 8007bfe:	f10d 000f 	add.w	r0, sp, #15
 8007c02:	f7ff ff99 	bl	8007b38 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 8007c06:	796b      	ldrb	r3, [r5, #5]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d001      	beq.n	8007c10 <McpsIndication+0xac>
}
 8007c0c:	b007      	add	sp, #28
 8007c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 8007c10:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1f9      	bne.n	8007c0c <McpsIndication+0xa8>
        LmHandlerAppData_t appData =
 8007c18:	2100      	movs	r1, #0
 8007c1a:	f88d 1004 	strb.w	r1, [sp, #4]
 8007c1e:	f88d 1005 	strb.w	r1, [sp, #5]
 8007c22:	9102      	str	r1, [sp, #8]
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
 8007c24:	2201      	movs	r2, #1
 8007c26:	a801      	add	r0, sp, #4
 8007c28:	f7ff feb0 	bl	800798c <LmHandlerSend>
 8007c2c:	e7ee      	b.n	8007c0c <McpsIndication+0xa8>
 8007c2e:	bf00      	nop
 8007c30:	200000a8 	.word	0x200000a8
 8007c34:	20000b28 	.word	0x20000b28
 8007c38:	20000b2c 	.word	0x20000b2c

08007c3c <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 8007c3c:	b180      	cbz	r0, 8007c60 <LmHandlerGetTxDatarate+0x24>
{
 8007c3e:	b510      	push	{r4, lr}
 8007c40:	b08a      	sub	sp, #40	; 0x28
 8007c42:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8007c44:	231f      	movs	r3, #31
 8007c46:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 8007c4a:	a801      	add	r0, sp, #4
 8007c4c:	f002 fd1e 	bl	800a68c <LoRaMacMibGetRequestConfirm>
 8007c50:	b948      	cbnz	r0, 8007c66 <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8007c52:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 8007c56:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8007c58:	4a04      	ldr	r2, [pc, #16]	; (8007c6c <LmHandlerGetTxDatarate+0x30>)
 8007c5a:	7113      	strb	r3, [r2, #4]
}
 8007c5c:	b00a      	add	sp, #40	; 0x28
 8007c5e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007c60:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007c64:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8007c66:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6a:	e7f7      	b.n	8007c5c <LmHandlerGetTxDatarate+0x20>
 8007c6c:	20000b40 	.word	0x20000b40

08007c70 <MlmeConfirm>:
{
 8007c70:	b570      	push	{r4, r5, r6, lr}
 8007c72:	b08a      	sub	sp, #40	; 0x28
 8007c74:	4605      	mov	r5, r0
    TxParams.IsMcpsConfirm = 0;
 8007c76:	482a      	ldr	r0, [pc, #168]	; (8007d20 <MlmeConfirm+0xb0>)
 8007c78:	2300      	movs	r3, #0
 8007c7a:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 8007c7c:	786b      	ldrb	r3, [r5, #1]
 8007c7e:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8007c80:	4b28      	ldr	r3, [pc, #160]	; (8007d24 <MlmeConfirm+0xb4>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c86:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007c88:	4c27      	ldr	r4, [pc, #156]	; (8007d28 <MlmeConfirm+0xb8>)
 8007c8a:	f104 0614 	add.w	r6, r4, #20
 8007c8e:	e001      	b.n	8007c94 <MlmeConfirm+0x24>
 8007c90:	42a6      	cmp	r6, r4
 8007c92:	d009      	beq.n	8007ca8 <MlmeConfirm+0x38>
        if( LmHandlerPackages[i] != NULL )
 8007c94:	f854 3b04 	ldr.w	r3, [r4], #4
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d0f9      	beq.n	8007c90 <MlmeConfirm+0x20>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d0f6      	beq.n	8007c90 <MlmeConfirm+0x20>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	4798      	blx	r3
 8007ca6:	e7f3      	b.n	8007c90 <MlmeConfirm+0x20>
    switch( mlmeConfirm->MlmeRequest )
 8007ca8:	782b      	ldrb	r3, [r5, #0]
 8007caa:	2b04      	cmp	r3, #4
 8007cac:	d029      	beq.n	8007d02 <MlmeConfirm+0x92>
 8007cae:	2b0c      	cmp	r3, #12
 8007cb0:	d02f      	beq.n	8007d12 <MlmeConfirm+0xa2>
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d001      	beq.n	8007cba <MlmeConfirm+0x4a>
}
 8007cb6:	b00a      	add	sp, #40	; 0x28
 8007cb8:	bd70      	pop	{r4, r5, r6, pc}
            mibReq.Type = MIB_DEV_ADDR;
 8007cba:	2306      	movs	r3, #6
 8007cbc:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007cc0:	a801      	add	r0, sp, #4
 8007cc2:	f002 fce3 	bl	800a68c <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8007cc6:	4b19      	ldr	r3, [pc, #100]	; (8007d2c <MlmeConfirm+0xbc>)
 8007cc8:	9a02      	ldr	r2, [sp, #8]
 8007cca:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8007ccc:	4818      	ldr	r0, [pc, #96]	; (8007d30 <MlmeConfirm+0xc0>)
 8007cce:	f7ff ffb5 	bl	8007c3c <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007cd2:	786b      	ldrb	r3, [r5, #1]
 8007cd4:	b16b      	cbz	r3, 8007cf2 <MlmeConfirm+0x82>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8007cd6:	4b17      	ldr	r3, [pc, #92]	; (8007d34 <MlmeConfirm+0xc4>)
 8007cd8:	22ff      	movs	r2, #255	; 0xff
 8007cda:	715a      	strb	r2, [r3, #5]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8007cdc:	4b11      	ldr	r3, [pc, #68]	; (8007d24 <MlmeConfirm+0xb4>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce2:	4814      	ldr	r0, [pc, #80]	; (8007d34 <MlmeConfirm+0xc4>)
 8007ce4:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007ce6:	786b      	ldrb	r3, [r5, #1]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1e4      	bne.n	8007cb6 <MlmeConfirm+0x46>
                SecureElementPrintSessionKeys();
 8007cec:	f7ff fbc0 	bl	8007470 <SecureElementPrintSessionKeys>
        break;
 8007cf0:	e7e1      	b.n	8007cb6 <MlmeConfirm+0x46>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8007cf2:	4b10      	ldr	r3, [pc, #64]	; (8007d34 <MlmeConfirm+0xc4>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8007cf8:	4b0f      	ldr	r3, [pc, #60]	; (8007d38 <MlmeConfirm+0xc8>)
 8007cfa:	7858      	ldrb	r0, [r3, #1]
 8007cfc:	f7ff fd8a 	bl	8007814 <LmHandlerRequestClass>
 8007d00:	e7ec      	b.n	8007cdc <MlmeConfirm+0x6c>
            RxParams.LinkCheck = true;
 8007d02:	4b0e      	ldr	r3, [pc, #56]	; (8007d3c <MlmeConfirm+0xcc>)
 8007d04:	2201      	movs	r2, #1
 8007d06:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8007d08:	7a2a      	ldrb	r2, [r5, #8]
 8007d0a:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 8007d0c:	7a6a      	ldrb	r2, [r5, #9]
 8007d0e:	74da      	strb	r2, [r3, #19]
        break;
 8007d10:	e7d1      	b.n	8007cb6 <MlmeConfirm+0x46>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007d12:	786b      	ldrb	r3, [r5, #1]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d0ce      	beq.n	8007cb6 <MlmeConfirm+0x46>
                LmHandlerDeviceTimeReq( );
 8007d18:	f7ff fcfc 	bl	8007714 <LmHandlerDeviceTimeReq>
}
 8007d1c:	e7cb      	b.n	8007cb6 <MlmeConfirm+0x46>
 8007d1e:	bf00      	nop
 8007d20:	200000bc 	.word	0x200000bc
 8007d24:	20000b28 	.word	0x20000b28
 8007d28:	20000b2c 	.word	0x20000b2c
 8007d2c:	2000007c 	.word	0x2000007c
 8007d30:	20000098 	.word	0x20000098
 8007d34:	20000094 	.word	0x20000094
 8007d38:	20000b40 	.word	0x20000b40
 8007d3c:	200000a8 	.word	0x200000a8

08007d40 <LmHandlerSetSystemMaxRxError>:
{
 8007d40:	b500      	push	{lr}
 8007d42:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8007d44:	2322      	movs	r3, #34	; 0x22
 8007d46:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8007d4a:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007d4c:	a801      	add	r0, sp, #4
 8007d4e:	f002 fdcf 	bl	800a8f0 <LoRaMacMibSetRequestConfirm>
 8007d52:	3800      	subs	r0, #0
 8007d54:	bf18      	it	ne
 8007d56:	2001      	movne	r0, #1
}
 8007d58:	4240      	negs	r0, r0
 8007d5a:	b00b      	add	sp, #44	; 0x2c
 8007d5c:	f85d fb04 	ldr.w	pc, [sp], #4

08007d60 <LmHandlerConfigure>:
{
 8007d60:	b570      	push	{r4, r5, r6, lr}
 8007d62:	b090      	sub	sp, #64	; 0x40
 8007d64:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8007d66:	4c74      	ldr	r4, [pc, #464]	; (8007f38 <LmHandlerConfigure+0x1d8>)
 8007d68:	2214      	movs	r2, #20
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f008 f806 	bl	800fd7c <UTIL_MEM_cpy_8>
    loraInfo = LoraInfo_GetPtr();
 8007d70:	f7fe fdf6 	bl	8006960 <LoraInfo_GetPtr>
    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8007d74:	7822      	ldrb	r2, [r4, #0]
 8007d76:	2301      	movs	r3, #1
 8007d78:	4093      	lsls	r3, r2
 8007d7a:	6841      	ldr	r1, [r0, #4]
 8007d7c:	420b      	tst	r3, r1
 8007d7e:	d106      	bne.n	8007d8e <LmHandlerConfigure+0x2e>
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 8007d80:	4b6e      	ldr	r3, [pc, #440]	; (8007f3c <LmHandlerConfigure+0x1dc>)
 8007d82:	2201      	movs	r2, #1
 8007d84:	2100      	movs	r1, #0
 8007d86:	4608      	mov	r0, r1
 8007d88:	f008 fdd4 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 8007d8c:	e7fe      	b.n	8007d8c <LmHandlerConfigure+0x2c>
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 8007d8e:	496c      	ldr	r1, [pc, #432]	; (8007f40 <LmHandlerConfigure+0x1e0>)
 8007d90:	486c      	ldr	r0, [pc, #432]	; (8007f44 <LmHandlerConfigure+0x1e4>)
 8007d92:	f002 fa05 	bl	800a1a0 <LoRaMacInitialization>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	f040 80cb 	bne.w	8007f32 <LmHandlerConfigure+0x1d2>
    mibReq.Type = MIB_NVM_CTXS;
 8007d9c:	2326      	movs	r3, #38	; 0x26
 8007d9e:	f88d 301c 	strb.w	r3, [sp, #28]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8007da2:	a807      	add	r0, sp, #28
 8007da4:	f002 fda4 	bl	800a8f0 <LoRaMacMibSetRequestConfirm>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	f040 8081 	bne.w	8007eb0 <LmHandlerConfigure+0x150>
        CtxRestoreDone = true;
 8007dae:	4b66      	ldr	r3, [pc, #408]	; (8007f48 <LmHandlerConfigure+0x1e8>)
 8007db0:	2201      	movs	r2, #1
 8007db2:	701a      	strb	r2, [r3, #0]
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 8007db4:	4b65      	ldr	r3, [pc, #404]	; (8007f4c <LmHandlerConfigure+0x1ec>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	b10b      	cbz	r3, 8007dc0 <LmHandlerConfigure+0x60>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	4798      	blx	r3
        mibReq.Type = MIB_DEV_ADDR;
 8007dc0:	2306      	movs	r3, #6
 8007dc2:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8007dc6:	a807      	add	r0, sp, #28
 8007dc8:	f002 fc60 	bl	800a68c <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8007dcc:	4b60      	ldr	r3, [pc, #384]	; (8007f50 <LmHandlerConfigure+0x1f0>)
 8007dce:	9a08      	ldr	r2, [sp, #32]
 8007dd0:	615a      	str	r2, [r3, #20]
        mibReq.Type = MIB_NVM_CTXS;
 8007dd2:	2326      	movs	r3, #38	; 0x26
 8007dd4:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8007dd8:	a807      	add	r0, sp, #28
 8007dda:	f002 fc57 	bl	800a68c <LoRaMacMibGetRequestConfirm>
        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 8007dde:	9a08      	ldr	r2, [sp, #32]
 8007de0:	4b55      	ldr	r3, [pc, #340]	; (8007f38 <LmHandlerConfigure+0x1d8>)
 8007de2:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
 8007de6:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 8007de8:	f892 1104 	ldrb.w	r1, [r2, #260]	; 0x104
 8007dec:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 8007dee:	f892 2106 	ldrb.w	r2, [r2, #262]	; 0x106
 8007df2:	709a      	strb	r2, [r3, #2]
    mibReq.Type = MIB_DEV_EUI;
 8007df4:	2502      	movs	r5, #2
 8007df6:	f88d 501c 	strb.w	r5, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8007dfa:	a807      	add	r0, sp, #28
 8007dfc:	f002 fc46 	bl	800a68c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 8007e00:	4c53      	ldr	r4, [pc, #332]	; (8007f50 <LmHandlerConfigure+0x1f0>)
 8007e02:	2208      	movs	r2, #8
 8007e04:	9908      	ldr	r1, [sp, #32]
 8007e06:	4620      	mov	r0, r4
 8007e08:	f005 fe38 	bl	800da7c <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	f88d 301c 	strb.w	r3, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8007e12:	a807      	add	r0, sp, #28
 8007e14:	f002 fc3a 	bl	800a68c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 8007e18:	2208      	movs	r2, #8
 8007e1a:	9908      	ldr	r1, [sp, #32]
 8007e1c:	18a0      	adds	r0, r4, r2
 8007e1e:	f005 fe2d 	bl	800da7c <memcpy1>
    SecureElementPrintKeys();
 8007e22:	f7ff fac7 	bl	80073b4 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 8007e26:	7d23      	ldrb	r3, [r4, #20]
 8007e28:	9303      	str	r3, [sp, #12]
 8007e2a:	7d63      	ldrb	r3, [r4, #21]
 8007e2c:	9302      	str	r3, [sp, #8]
 8007e2e:	7da3      	ldrb	r3, [r4, #22]
 8007e30:	9301      	str	r3, [sp, #4]
 8007e32:	7de3      	ldrb	r3, [r4, #23]
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	4b47      	ldr	r3, [pc, #284]	; (8007f54 <LmHandlerConfigure+0x1f4>)
 8007e38:	2200      	movs	r2, #0
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	f008 fd79 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8007e42:	260f      	movs	r6, #15
 8007e44:	f88d 601c 	strb.w	r6, [sp, #28]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8007e4e:	a807      	add	r0, sp, #28
 8007e50:	f002 fd4e 	bl	800a8f0 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8007e54:	2310      	movs	r3, #16
 8007e56:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8007e5a:	2500      	movs	r5, #0
 8007e5c:	f88d 5020 	strb.w	r5, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007e60:	a807      	add	r0, sp, #28
 8007e62:	f002 fd45 	bl	800a8f0 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8007e66:	2304      	movs	r3, #4
 8007e68:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8007e6c:	4c32      	ldr	r4, [pc, #200]	; (8007f38 <LmHandlerConfigure+0x1d8>)
 8007e6e:	78a3      	ldrb	r3, [r4, #2]
 8007e70:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007e74:	a807      	add	r0, sp, #28
 8007e76:	f002 fd3b 	bl	800a8f0 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 8007e7a:	2337      	movs	r3, #55	; 0x37
 8007e7c:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 8007e80:	6923      	ldr	r3, [r4, #16]
 8007e82:	9308      	str	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007e84:	a807      	add	r0, sp, #28
 8007e86:	f002 fd33 	bl	800a8f0 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8007e8a:	f88d 6014 	strb.w	r6, [sp, #20]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8007e8e:	a905      	add	r1, sp, #20
 8007e90:	7820      	ldrb	r0, [r4, #0]
 8007e92:	f004 faf0 	bl	800c476 <RegionGetPhyParam>
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8007e96:	1b43      	subs	r3, r0, r5
 8007e98:	bf18      	it	ne
 8007e9a:	2301      	movne	r3, #1
 8007e9c:	71a3      	strb	r3, [r4, #6]
    LmHandlerSetSystemMaxRxError( 20 );
 8007e9e:	2014      	movs	r0, #20
 8007ea0:	f7ff ff4e 	bl	8007d40 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8007ea4:	79a0      	ldrb	r0, [r4, #6]
 8007ea6:	f003 fad5 	bl	800b454 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8007eaa:	4628      	mov	r0, r5
}
 8007eac:	b010      	add	sp, #64	; 0x40
 8007eae:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 8007eb0:	2327      	movs	r3, #39	; 0x27
 8007eb2:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 8007eb6:	4b25      	ldr	r3, [pc, #148]	; (8007f4c <LmHandlerConfigure+0x1ec>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	b14b      	cbz	r3, 8007ed2 <LmHandlerConfigure+0x172>
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007ebe:	a807      	add	r0, sp, #28
 8007ec0:	f002 fbe4 	bl	800a68c <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 8007ec4:	4b21      	ldr	r3, [pc, #132]	; (8007f4c <LmHandlerConfigure+0x1ec>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	f44f 61e5 	mov.w	r1, #1832	; 0x728
 8007ece:	9808      	ldr	r0, [sp, #32]
 8007ed0:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 8007ed2:	2326      	movs	r3, #38	; 0x26
 8007ed4:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8007ed8:	a807      	add	r0, sp, #28
 8007eda:	f002 fd09 	bl	800a8f0 <LoRaMacMibSetRequestConfirm>
 8007ede:	b1d0      	cbz	r0, 8007f16 <LmHandlerConfigure+0x1b6>
    if (CtxRestoreDone == true)
 8007ee0:	4b19      	ldr	r3, [pc, #100]	; (8007f48 <LmHandlerConfigure+0x1e8>)
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f47f af65 	bne.w	8007db4 <LmHandlerConfigure+0x54>
        mibReq.Type = MIB_NET_ID;
 8007eea:	2305      	movs	r3, #5
 8007eec:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	9308      	str	r3, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8007ef4:	a807      	add	r0, sp, #28
 8007ef6:	f002 fcfb 	bl	800a8f0 <LoRaMacMibSetRequestConfirm>
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 8007efa:	4b14      	ldr	r3, [pc, #80]	; (8007f4c <LmHandlerConfigure+0x1ec>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	4798      	blx	r3
 8007f02:	4b13      	ldr	r3, [pc, #76]	; (8007f50 <LmHandlerConfigure+0x1f0>)
 8007f04:	6158      	str	r0, [r3, #20]
        mibReq.Type = MIB_DEV_ADDR;
 8007f06:	2306      	movs	r3, #6
 8007f08:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 8007f0c:	9008      	str	r0, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8007f0e:	a807      	add	r0, sp, #28
 8007f10:	f002 fcee 	bl	800a8f0 <LoRaMacMibSetRequestConfirm>
 8007f14:	e76e      	b.n	8007df4 <LmHandlerConfigure+0x94>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007f16:	2301      	movs	r3, #1
 8007f18:	f88d 301c 	strb.w	r3, [sp, #28]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007f1c:	a807      	add	r0, sp, #28
 8007f1e:	f002 fbb5 	bl	800a68c <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 8007f22:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0da      	beq.n	8007ee0 <LmHandlerConfigure+0x180>
                CtxRestoreDone = true;
 8007f2a:	4b07      	ldr	r3, [pc, #28]	; (8007f48 <LmHandlerConfigure+0x1e8>)
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	701a      	strb	r2, [r3, #0]
 8007f30:	e740      	b.n	8007db4 <LmHandlerConfigure+0x54>
        return LORAMAC_HANDLER_ERROR;
 8007f32:	f04f 30ff 	mov.w	r0, #4294967295
 8007f36:	e7b9      	b.n	8007eac <LmHandlerConfigure+0x14c>
 8007f38:	20000b40 	.word	0x20000b40
 8007f3c:	08011384 	.word	0x08011384
 8007f40:	20000b54 	.word	0x20000b54
 8007f44:	20000b68 	.word	0x20000b68
 8007f48:	20000b22 	.word	0x20000b22
 8007f4c:	20000b28 	.word	0x20000b28
 8007f50:	2000007c 	.word	0x2000007c
 8007f54:	080113d0 	.word	0x080113d0

08007f58 <LmHandlerPackageRegister>:
    switch( id )
 8007f58:	b9b8      	cbnz	r0, 8007f8a <LmHandlerPackageRegister+0x32>
{
 8007f5a:	b510      	push	{r4, lr}
 8007f5c:	460c      	mov	r4, r1
            package = LmhpCompliancePackageFactory( );
 8007f5e:	f000 faa5 	bl	80084ac <LmhpCompliancePackageFactory>
    if( package != NULL )
 8007f62:	b1a8      	cbz	r0, 8007f90 <LmHandlerPackageRegister+0x38>
        LmHandlerPackages[id] = package;
 8007f64:	4a0c      	ldr	r2, [pc, #48]	; (8007f98 <LmHandlerPackageRegister+0x40>)
 8007f66:	6010      	str	r0, [r2, #0]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8007f68:	4a0c      	ldr	r2, [pc, #48]	; (8007f9c <LmHandlerPackageRegister+0x44>)
 8007f6a:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8007f6c:	4a0c      	ldr	r2, [pc, #48]	; (8007fa0 <LmHandlerPackageRegister+0x48>)
 8007f6e:	62c2      	str	r2, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8007f70:	4a0c      	ldr	r2, [pc, #48]	; (8007fa4 <LmHandlerPackageRegister+0x4c>)
 8007f72:	6302      	str	r2, [r0, #48]	; 0x30
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8007f74:	4a0c      	ldr	r2, [pc, #48]	; (8007fa8 <LmHandlerPackageRegister+0x50>)
 8007f76:	6812      	ldr	r2, [r2, #0]
 8007f78:	6992      	ldr	r2, [r2, #24]
 8007f7a:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8007f7c:	6843      	ldr	r3, [r0, #4]
 8007f7e:	22f2      	movs	r2, #242	; 0xf2
 8007f80:	490a      	ldr	r1, [pc, #40]	; (8007fac <LmHandlerPackageRegister+0x54>)
 8007f82:	4620      	mov	r0, r4
 8007f84:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 8007f86:	2000      	movs	r0, #0
}
 8007f88:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007f8a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007f8e:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8007f90:	f04f 30ff 	mov.w	r0, #4294967295
 8007f94:	e7f8      	b.n	8007f88 <LmHandlerPackageRegister+0x30>
 8007f96:	bf00      	nop
 8007f98:	20000b2c 	.word	0x20000b2c
 8007f9c:	080078cd 	.word	0x080078cd
 8007fa0:	0800798d 	.word	0x0800798d
 8007fa4:	08007715 	.word	0x08007715
 8007fa8:	20000b28 	.word	0x20000b28
 8007fac:	20000a30 	.word	0x20000a30

08007fb0 <LmHandlerInit>:
{
 8007fb0:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 8007fb2:	4b0f      	ldr	r3, [pc, #60]	; (8007ff0 <LmHandlerInit+0x40>)
 8007fb4:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8007fb6:	4b0f      	ldr	r3, [pc, #60]	; (8007ff4 <LmHandlerInit+0x44>)
 8007fb8:	4a0f      	ldr	r2, [pc, #60]	; (8007ff8 <LmHandlerInit+0x48>)
 8007fba:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8007fbc:	4a0f      	ldr	r2, [pc, #60]	; (8007ffc <LmHandlerInit+0x4c>)
 8007fbe:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8007fc0:	4a0f      	ldr	r2, [pc, #60]	; (8008000 <LmHandlerInit+0x50>)
 8007fc2:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8007fc4:	4a0f      	ldr	r2, [pc, #60]	; (8008004 <LmHandlerInit+0x54>)
 8007fc6:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8007fc8:	6802      	ldr	r2, [r0, #0]
 8007fca:	4b0f      	ldr	r3, [pc, #60]	; (8008008 <LmHandlerInit+0x58>)
 8007fcc:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 8007fce:	6842      	ldr	r2, [r0, #4]
 8007fd0:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8007fd2:	6882      	ldr	r2, [r0, #8]
 8007fd4:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8007fd6:	4a0d      	ldr	r2, [pc, #52]	; (800800c <LmHandlerInit+0x5c>)
 8007fd8:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8007fda:	6982      	ldr	r2, [r0, #24]
 8007fdc:	611a      	str	r2, [r3, #16]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8007fde:	490c      	ldr	r1, [pc, #48]	; (8008010 <LmHandlerInit+0x60>)
 8007fe0:	2000      	movs	r0, #0
 8007fe2:	f7ff ffb9 	bl	8007f58 <LmHandlerPackageRegister>
 8007fe6:	3800      	subs	r0, #0
 8007fe8:	bf18      	it	ne
 8007fea:	2001      	movne	r0, #1
}
 8007fec:	4240      	negs	r0, r0
 8007fee:	bd08      	pop	{r3, pc}
 8007ff0:	20000b28 	.word	0x20000b28
 8007ff4:	20000b68 	.word	0x20000b68
 8007ff8:	0800773d 	.word	0x0800773d
 8007ffc:	08007b65 	.word	0x08007b65
 8008000:	08007c71 	.word	0x08007c71
 8008004:	08007aa1 	.word	0x08007aa1
 8008008:	20000b54 	.word	0x20000b54
 800800c:	080080e5 	.word	0x080080e5
 8008010:	2000009c 	.word	0x2000009c

08008014 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
    if (featureVersion == NULL)
 8008014:	b161      	cbz	r1, 8008030 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch(lmhType)
 8008016:	b118      	cbz	r0, 8008020 <LmHandlerGetVersion+0xc>
 8008018:	2801      	cmp	r0, #1
 800801a:	d005      	beq.n	8008028 <LmHandlerGetVersion+0x14>
 800801c:	2000      	movs	r0, #0
 800801e:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 8008020:	4a05      	ldr	r2, [pc, #20]	; (8008038 <LmHandlerGetVersion+0x24>)
 8008022:	600a      	str	r2, [r1, #0]
            break;
        default:
          break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 8008024:	2000      	movs	r0, #0
            break;
 8008026:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 8008028:	4a04      	ldr	r2, [pc, #16]	; (800803c <LmHandlerGetVersion+0x28>)
 800802a:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800802c:	2000      	movs	r0, #0
            break;
 800802e:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008030:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	01000300 	.word	0x01000300
 800803c:	01010003 	.word	0x01010003

08008040 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 8008040:	b508      	push	{r3, lr}
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 8008042:	f003 fa1b 	bl	800b47c <LoRaMacDeInitialization>
    {
        return LORAMAC_HANDLER_SUCCESS;
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8008046:	2800      	cmp	r0, #0
    }
}
 8008048:	bf0c      	ite	eq
 800804a:	2000      	moveq	r0, #0
 800804c:	f06f 0001 	mvnne.w	r0, #1
 8008050:	bd08      	pop	{r3, pc}

08008052 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 8008052:	b508      	push	{r3, lr}
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 8008054:	f002 fa84 	bl	800a560 <LoRaMacHalt>
    {
        return LORAMAC_HANDLER_SUCCESS;
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8008058:	2800      	cmp	r0, #0
    }
}
 800805a:	bf0c      	ite	eq
 800805c:	2000      	moveq	r0, #0
 800805e:	f06f 0001 	mvnne.w	r0, #1
 8008062:	bd08      	pop	{r3, pc}

08008064 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8008064:	b510      	push	{r4, lr}
 8008066:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 8008068:	f7ff fff3 	bl	8008052 <LmHandlerHalt>

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800806c:	4604      	mov	r4, r0
 800806e:	b110      	cbz	r0, 8008076 <LmHandlerNvmDataStore+0x12>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
    }

    return lmhStatus;
}
 8008070:	4620      	mov	r0, r4
 8008072:	b00a      	add	sp, #40	; 0x28
 8008074:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 8008076:	f000 f836 	bl	80080e6 <NvmDataMgmtStoreBegin>
        if (status == NVM_DATA_NO_UPDATED_DATA)
 800807a:	f110 0f02 	cmn.w	r0, #2
 800807e:	d01c      	beq.n	80080ba <LmHandlerNvmDataStore+0x56>
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 8008080:	bb20      	cbnz	r0, 80080cc <LmHandlerNvmDataStore+0x68>
 8008082:	4b17      	ldr	r3, [pc, #92]	; (80080e0 <LmHandlerNvmDataStore+0x7c>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	695b      	ldr	r3, [r3, #20]
 8008088:	b31b      	cbz	r3, 80080d2 <LmHandlerNvmDataStore+0x6e>
          mibReq.Type = MIB_NVM_CTXS;
 800808a:	2326      	movs	r3, #38	; 0x26
 800808c:	f88d 3004 	strb.w	r3, [sp, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 8008090:	a801      	add	r0, sp, #4
 8008092:	f002 fafb 	bl	800a68c <LoRaMacMibGetRequestConfirm>
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 8008096:	4b12      	ldr	r3, [pc, #72]	; (80080e0 <LmHandlerNvmDataStore+0x7c>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	f44f 61e5 	mov.w	r1, #1832	; 0x728
 80080a0:	9802      	ldr	r0, [sp, #8]
 80080a2:	4798      	blx	r3
        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 80080a4:	f000 f822 	bl	80080ec <NvmDataMgmtStoreEnd>
 80080a8:	b9b0      	cbnz	r0, 80080d8 <LmHandlerNvmDataStore+0x74>
    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 80080aa:	4b0d      	ldr	r3, [pc, #52]	; (80080e0 <LmHandlerNvmDataStore+0x7c>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d0dd      	beq.n	8008070 <LmHandlerNvmDataStore+0xc>
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 80080b4:	2001      	movs	r0, #1
 80080b6:	4798      	blx	r3
 80080b8:	e7da      	b.n	8008070 <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 80080ba:	f06f 0407 	mvn.w	r4, #7
        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 80080be:	f000 f815 	bl	80080ec <NvmDataMgmtStoreEnd>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80080c2:	2800      	cmp	r0, #0
 80080c4:	bf18      	it	ne
 80080c6:	f04f 34ff 	movne.w	r4, #4294967295
 80080ca:	e7d1      	b.n	8008070 <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80080cc:	f04f 34ff 	mov.w	r4, #4294967295
 80080d0:	e7f5      	b.n	80080be <LmHandlerNvmDataStore+0x5a>
 80080d2:	f04f 34ff 	mov.w	r4, #4294967295
 80080d6:	e7f2      	b.n	80080be <LmHandlerNvmDataStore+0x5a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80080d8:	f04f 34ff 	mov.w	r4, #4294967295
 80080dc:	e7c8      	b.n	8008070 <LmHandlerNvmDataStore+0xc>
 80080de:	bf00      	nop
 80080e0:	20000b28 	.word	0x20000b28

080080e4 <NvmDataMgmtEvent>:
void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 80080e4:	4770      	bx	lr

080080e6 <NvmDataMgmtStoreBegin>:
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 80080e6:	f06f 0004 	mvn.w	r0, #4
 80080ea:	4770      	bx	lr

080080ec <NvmDataMgmtStoreEnd>:
    LoRaMacStart( );
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 80080ec:	f06f 0004 	mvn.w	r0, #4
 80080f0:	4770      	bx	lr
	...

080080f4 <LmhpComplianceInit>:
    return &LmhpCompliancePackage;
}

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 80080f4:	4603      	mov	r3, r0
 80080f6:	b140      	cbz	r0, 800810a <LmhpComplianceInit+0x16>
 80080f8:	b139      	cbz	r1, 800810a <LmhpComplianceInit+0x16>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 80080fa:	4807      	ldr	r0, [pc, #28]	; (8008118 <LmhpComplianceInit+0x24>)
 80080fc:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 80080fe:	4b07      	ldr	r3, [pc, #28]	; (800811c <LmhpComplianceInit+0x28>)
 8008100:	6099      	str	r1, [r3, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8008102:	715a      	strb	r2, [r3, #5]
        ComplianceTestState.Initialized = true;
 8008104:	2201      	movs	r2, #1
 8008106:	701a      	strb	r2, [r3, #0]
 8008108:	4770      	bx	lr
    }
    else
    {
        LmhpComplianceParams = NULL;
 800810a:	2300      	movs	r3, #0
 800810c:	4a02      	ldr	r2, [pc, #8]	; (8008118 <LmhpComplianceInit+0x24>)
 800810e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8008110:	4a02      	ldr	r2, [pc, #8]	; (800811c <LmhpComplianceInit+0x28>)
 8008112:	7013      	strb	r3, [r2, #0]
    }
}
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	20000ba4 	.word	0x20000ba4
 800811c:	20000b78 	.word	0x20000b78

08008120 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8008120:	4b01      	ldr	r3, [pc, #4]	; (8008128 <LmhpComplianceIsInitialized+0x8>)
 8008122:	7818      	ldrb	r0, [r3, #0]
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	20000b78 	.word	0x20000b78

0800812c <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 800812c:	4b02      	ldr	r3, [pc, #8]	; (8008138 <LmhpComplianceIsRunning+0xc>)
 800812e:	7818      	ldrb	r0, [r3, #0]
 8008130:	b100      	cbz	r0, 8008134 <LmhpComplianceIsRunning+0x8>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 8008132:	7858      	ldrb	r0, [r3, #1]
}
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	20000b78 	.word	0x20000b78

0800813c <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
    if (ComplianceTestState.Initialized == false)
 800813c:	4b08      	ldr	r3, [pc, #32]	; (8008160 <LmhpComplianceOnMcpsConfirm+0x24>)
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	b12b      	cbz	r3, 800814e <LmhpComplianceOnMcpsConfirm+0x12>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 8008142:	4b07      	ldr	r3, [pc, #28]	; (8008160 <LmhpComplianceOnMcpsConfirm+0x24>)
 8008144:	785b      	ldrb	r3, [r3, #1]
 8008146:	b113      	cbz	r3, 800814e <LmhpComplianceOnMcpsConfirm+0x12>
 8008148:	7803      	ldrb	r3, [r0, #0]
 800814a:	2b01      	cmp	r3, #1
 800814c:	d000      	beq.n	8008150 <LmhpComplianceOnMcpsConfirm+0x14>
        (mcpsConfirm->AckReceived != 0))
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
    }
}
 800814e:	4770      	bx	lr
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8008150:	7903      	ldrb	r3, [r0, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0fb      	beq.n	800814e <LmhpComplianceOnMcpsConfirm+0x12>
        ComplianceTestState.DownLinkCounter++;
 8008156:	4a02      	ldr	r2, [pc, #8]	; (8008160 <LmhpComplianceOnMcpsConfirm+0x24>)
 8008158:	8993      	ldrh	r3, [r2, #12]
 800815a:	3301      	adds	r3, #1
 800815c:	8193      	strh	r3, [r2, #12]
 800815e:	e7f6      	b.n	800814e <LmhpComplianceOnMcpsConfirm+0x12>
 8008160:	20000b78 	.word	0x20000b78

08008164 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
    if( ComplianceTestState.Initialized == false )
 8008164:	4b08      	ldr	r3, [pc, #32]	; (8008188 <LmhpComplianceOnMlmeConfirm+0x24>)
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	b12b      	cbz	r3, 8008176 <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800816a:	4b07      	ldr	r3, [pc, #28]	; (8008188 <LmhpComplianceOnMlmeConfirm+0x24>)
 800816c:	785b      	ldrb	r3, [r3, #1]
 800816e:	b113      	cbz	r3, 8008176 <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8008170:	7803      	ldrb	r3, [r0, #0]
 8008172:	2b04      	cmp	r3, #4
 8008174:	d000      	beq.n	8008178 <LmhpComplianceOnMlmeConfirm+0x14>
    {
        ComplianceTestState.LinkCheck = true;
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
    }
}
 8008176:	4770      	bx	lr
        ComplianceTestState.LinkCheck = true;
 8008178:	4b03      	ldr	r3, [pc, #12]	; (8008188 <LmhpComplianceOnMlmeConfirm+0x24>)
 800817a:	2201      	movs	r2, #1
 800817c:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800817e:	7a02      	ldrb	r2, [r0, #8]
 8008180:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8008182:	7a42      	ldrb	r2, [r0, #9]
 8008184:	741a      	strb	r2, [r3, #16]
 8008186:	e7f6      	b.n	8008176 <LmhpComplianceOnMlmeConfirm+0x12>
 8008188:	20000b78 	.word	0x20000b78

0800818c <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 800818c:	4770      	bx	lr
	...

08008190 <LmhpComplianceTxProcess>:
    if( ComplianceTestState.Initialized == false )
 8008190:	4b23      	ldr	r3, [pc, #140]	; (8008220 <LmhpComplianceTxProcess+0x90>)
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d03d      	beq.n	8008214 <LmhpComplianceTxProcess+0x84>
    if( ComplianceTestState.IsRunning == false )
 8008198:	4b21      	ldr	r3, [pc, #132]	; (8008220 <LmhpComplianceTxProcess+0x90>)
 800819a:	785b      	ldrb	r3, [r3, #1]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d03c      	beq.n	800821a <LmhpComplianceTxProcess+0x8a>
{
 80081a0:	b510      	push	{r4, lr}
 80081a2:	b082      	sub	sp, #8
    if( ComplianceTestState.LinkCheck == true )
 80081a4:	4b1e      	ldr	r3, [pc, #120]	; (8008220 <LmhpComplianceTxProcess+0x90>)
 80081a6:	7b9b      	ldrb	r3, [r3, #14]
 80081a8:	b30b      	cbz	r3, 80081ee <LmhpComplianceTxProcess+0x5e>
        ComplianceTestState.LinkCheck = false;
 80081aa:	4b1d      	ldr	r3, [pc, #116]	; (8008220 <LmhpComplianceTxProcess+0x90>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 80081b0:	2203      	movs	r2, #3
 80081b2:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 80081b4:	689a      	ldr	r2, [r3, #8]
 80081b6:	2105      	movs	r1, #5
 80081b8:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 80081ba:	7bd9      	ldrb	r1, [r3, #15]
 80081bc:	7051      	strb	r1, [r2, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 80081be:	7c19      	ldrb	r1, [r3, #16]
 80081c0:	7091      	strb	r1, [r2, #2]
        ComplianceTestState.State = 1;
 80081c2:	2201      	movs	r2, #1
 80081c4:	709a      	strb	r2, [r3, #2]
    LmHandlerAppData_t appData =
 80081c6:	23e0      	movs	r3, #224	; 0xe0
 80081c8:	f88d 3000 	strb.w	r3, [sp]
        .BufferSize = ComplianceTestState.DataBufferSize,
 80081cc:	4c14      	ldr	r4, [pc, #80]	; (8008220 <LmhpComplianceTxProcess+0x90>)
    LmHandlerAppData_t appData =
 80081ce:	79a3      	ldrb	r3, [r4, #6]
 80081d0:	f88d 3001 	strb.w	r3, [sp, #1]
 80081d4:	68a3      	ldr	r3, [r4, #8]
 80081d6:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 80081d8:	4812      	ldr	r0, [pc, #72]	; (8008224 <LmhpComplianceTxProcess+0x94>)
 80081da:	f008 fa35 	bl	8010648 <UTIL_TIMER_Start>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 80081de:	4b12      	ldr	r3, [pc, #72]	; (8008228 <LmhpComplianceTxProcess+0x98>)
 80081e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e2:	2201      	movs	r2, #1
 80081e4:	78e1      	ldrb	r1, [r4, #3]
 80081e6:	4668      	mov	r0, sp
 80081e8:	4798      	blx	r3
}
 80081ea:	b002      	add	sp, #8
 80081ec:	bd10      	pop	{r4, pc}
        switch( ComplianceTestState.State )
 80081ee:	4b0c      	ldr	r3, [pc, #48]	; (8008220 <LmhpComplianceTxProcess+0x90>)
 80081f0:	789b      	ldrb	r3, [r3, #2]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d005      	beq.n	8008202 <LmhpComplianceTxProcess+0x72>
 80081f6:	2b04      	cmp	r3, #4
 80081f8:	d1e5      	bne.n	80081c6 <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.State = 1;
 80081fa:	4b09      	ldr	r3, [pc, #36]	; (8008220 <LmhpComplianceTxProcess+0x90>)
 80081fc:	2201      	movs	r2, #1
 80081fe:	709a      	strb	r2, [r3, #2]
            break;
 8008200:	e7e1      	b.n	80081c6 <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.DataBufferSize = 2;
 8008202:	4b07      	ldr	r3, [pc, #28]	; (8008220 <LmhpComplianceTxProcess+0x90>)
 8008204:	2202      	movs	r2, #2
 8008206:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8008208:	899a      	ldrh	r2, [r3, #12]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	0a11      	lsrs	r1, r2, #8
 800820e:	7019      	strb	r1, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8008210:	705a      	strb	r2, [r3, #1]
            break;
 8008212:	e7d8      	b.n	80081c6 <LmhpComplianceTxProcess+0x36>
        return LORAMAC_HANDLER_ERROR;
 8008214:	f04f 30ff 	mov.w	r0, #4294967295
 8008218:	4770      	bx	lr
        return LORAMAC_HANDLER_SUCCESS;
 800821a:	2000      	movs	r0, #0
}
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	20000b78 	.word	0x20000b78
 8008224:	20000b8c 	.word	0x20000b8c
 8008228:	200000d8 	.word	0x200000d8

0800822c <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 800822c:	4b98      	ldr	r3, [pc, #608]	; (8008490 <LmhpComplianceOnMcpsIndication+0x264>)
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	f000 812c 	beq.w	800848e <LmhpComplianceOnMcpsIndication+0x262>
    if( mcpsIndication->RxData == false )
 8008236:	7b43      	ldrb	r3, [r0, #13]
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 8128 	beq.w	800848e <LmhpComplianceOnMcpsIndication+0x262>
{
 800823e:	b510      	push	{r4, lr}
 8008240:	b08c      	sub	sp, #48	; 0x30
    if ((ComplianceTestState.IsRunning == true) &&
 8008242:	4b93      	ldr	r3, [pc, #588]	; (8008490 <LmhpComplianceOnMcpsIndication+0x264>)
 8008244:	785b      	ldrb	r3, [r3, #1]
 8008246:	2b00      	cmp	r3, #0
 8008248:	f000 8118 	beq.w	800847c <LmhpComplianceOnMcpsIndication+0x250>
 800824c:	7b83      	ldrb	r3, [r0, #14]
 800824e:	b91b      	cbnz	r3, 8008258 <LmhpComplianceOnMcpsIndication+0x2c>
        ComplianceTestState.DownLinkCounter++;
 8008250:	4a8f      	ldr	r2, [pc, #572]	; (8008490 <LmhpComplianceOnMcpsIndication+0x264>)
 8008252:	8993      	ldrh	r3, [r2, #12]
 8008254:	3301      	adds	r3, #1
 8008256:	8193      	strh	r3, [r2, #12]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8008258:	78c3      	ldrb	r3, [r0, #3]
 800825a:	2be0      	cmp	r3, #224	; 0xe0
 800825c:	f040 8115 	bne.w	800848a <LmhpComplianceOnMcpsIndication+0x25e>
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8008260:	6882      	ldr	r2, [r0, #8]
 8008262:	7813      	ldrb	r3, [r2, #0]
 8008264:	498a      	ldr	r1, [pc, #552]	; (8008490 <LmhpComplianceOnMcpsIndication+0x264>)
 8008266:	708b      	strb	r3, [r1, #2]
        switch( ComplianceTestState.State )
 8008268:	2b0a      	cmp	r3, #10
 800826a:	f200 810e 	bhi.w	800848a <LmhpComplianceOnMcpsIndication+0x25e>
 800826e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008272:	004b      	.short	0x004b
 8008274:	006c0068 	.word	0x006c0068
 8008278:	00770071 	.word	0x00770071
 800827c:	009c0095 	.word	0x009c0095
 8008280:	00ea00bc 	.word	0x00ea00bc
 8008284:	00fb00f1 	.word	0x00fb00f1
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8008288:	6883      	ldr	r3, [r0, #8]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800828a:	781a      	ldrb	r2, [r3, #0]
 800828c:	2a01      	cmp	r2, #1
 800828e:	f040 80fc 	bne.w	800848a <LmhpComplianceOnMcpsIndication+0x25e>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8008292:	785a      	ldrb	r2, [r3, #1]
 8008294:	2a01      	cmp	r2, #1
 8008296:	f040 80f8 	bne.w	800848a <LmhpComplianceOnMcpsIndication+0x25e>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800829a:	789a      	ldrb	r2, [r3, #2]
 800829c:	2a01      	cmp	r2, #1
 800829e:	f040 80f4 	bne.w	800848a <LmhpComplianceOnMcpsIndication+0x25e>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 80082a2:	78db      	ldrb	r3, [r3, #3]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	f040 80f0 	bne.w	800848a <LmhpComplianceOnMcpsIndication+0x25e>
            ComplianceTestState.IsTxConfirmed = false;
 80082aa:	4b79      	ldr	r3, [pc, #484]	; (8008490 <LmhpComplianceOnMcpsIndication+0x264>)
 80082ac:	2400      	movs	r4, #0
 80082ae:	70dc      	strb	r4, [r3, #3]
            ComplianceTestState.Port = 224;
 80082b0:	22e0      	movs	r2, #224	; 0xe0
 80082b2:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 80082b4:	2202      	movs	r2, #2
 80082b6:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 80082b8:	819c      	strh	r4, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 80082ba:	739c      	strb	r4, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 80082bc:	73dc      	strb	r4, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 80082be:	741c      	strb	r4, [r3, #16]
            ComplianceTestState.IsRunning = true;
 80082c0:	2201      	movs	r2, #1
 80082c2:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 80082c4:	709a      	strb	r2, [r3, #2]
            mibReq.Type = MIB_ADR;
 80082c6:	2304      	movs	r3, #4
 80082c8:	f88d 300c 	strb.w	r3, [sp, #12]
            mibReq.Param.AdrEnable = true;
 80082cc:	f88d 2010 	strb.w	r2, [sp, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80082d0:	a803      	add	r0, sp, #12
 80082d2:	f002 fb0d 	bl	800a8f0 <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 80082d6:	4620      	mov	r0, r4
 80082d8:	f003 f8bc 	bl	800b454 <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 80082dc:	4b6d      	ldr	r3, [pc, #436]	; (8008494 <LmhpComplianceOnMcpsIndication+0x268>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	b103      	cbz	r3, 80082e6 <LmhpComplianceOnMcpsIndication+0xba>
                LmhpComplianceParams->StopPeripherals( );
 80082e4:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 80082e6:	4c6c      	ldr	r4, [pc, #432]	; (8008498 <LmhpComplianceOnMcpsIndication+0x26c>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	9200      	str	r2, [sp, #0]
 80082ec:	4b6b      	ldr	r3, [pc, #428]	; (800849c <LmhpComplianceOnMcpsIndication+0x270>)
 80082ee:	f04f 31ff 	mov.w	r1, #4294967295
 80082f2:	4620      	mov	r0, r4
 80082f4:	f008 f8e4 	bl	80104c0 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 80082f8:	f241 3188 	movw	r1, #5000	; 0x1388
 80082fc:	4620      	mov	r0, r4
 80082fe:	f008 f9e9 	bl	80106d4 <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 8008302:	f7ff ff45 	bl	8008190 <LmhpComplianceTxProcess>
 8008306:	e0c0      	b.n	800848a <LmhpComplianceOnMcpsIndication+0x25e>
                TimerStop( &ComplianceTxNextPacketTimer );
 8008308:	4863      	ldr	r0, [pc, #396]	; (8008498 <LmhpComplianceOnMcpsIndication+0x26c>)
 800830a:	f008 f93d 	bl	8010588 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 800830e:	4b60      	ldr	r3, [pc, #384]	; (8008490 <LmhpComplianceOnMcpsIndication+0x264>)
 8008310:	2200      	movs	r2, #0
 8008312:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8008314:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 8008316:	2304      	movs	r3, #4
 8008318:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800831c:	4c5d      	ldr	r4, [pc, #372]	; (8008494 <LmhpComplianceOnMcpsIndication+0x268>)
 800831e:	6823      	ldr	r3, [r4, #0]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8008326:	a803      	add	r0, sp, #12
 8008328:	f002 fae2 	bl	800a8f0 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800832c:	6823      	ldr	r3, [r4, #0]
 800832e:	7858      	ldrb	r0, [r3, #1]
 8008330:	f003 f890 	bl	800b454 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8008334:	6823      	ldr	r3, [r4, #0]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	f000 80a6 	beq.w	800848a <LmhpComplianceOnMcpsIndication+0x25e>
                    LmhpComplianceParams->StartPeripherals( );
 800833e:	4798      	blx	r3
            break;
 8008340:	e0a3      	b.n	800848a <LmhpComplianceOnMcpsIndication+0x25e>
            ComplianceTestState.DataBufferSize = 2;
 8008342:	4b53      	ldr	r3, [pc, #332]	; (8008490 <LmhpComplianceOnMcpsIndication+0x264>)
 8008344:	2202      	movs	r2, #2
 8008346:	719a      	strb	r2, [r3, #6]
            break;
 8008348:	e09f      	b.n	800848a <LmhpComplianceOnMcpsIndication+0x25e>
            ComplianceTestState.IsTxConfirmed = true;
 800834a:	4b51      	ldr	r3, [pc, #324]	; (8008490 <LmhpComplianceOnMcpsIndication+0x264>)
 800834c:	2201      	movs	r2, #1
 800834e:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8008350:	709a      	strb	r2, [r3, #2]
            break;
 8008352:	e09a      	b.n	800848a <LmhpComplianceOnMcpsIndication+0x25e>
            ComplianceTestState.IsTxConfirmed = false;
 8008354:	4b4e      	ldr	r3, [pc, #312]	; (8008490 <LmhpComplianceOnMcpsIndication+0x264>)
 8008356:	2200      	movs	r2, #0
 8008358:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800835a:	2201      	movs	r2, #1
 800835c:	709a      	strb	r2, [r3, #2]
            break;
 800835e:	e094      	b.n	800848a <LmhpComplianceOnMcpsIndication+0x25e>
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8008360:	7b04      	ldrb	r4, [r0, #12]
 8008362:	494b      	ldr	r1, [pc, #300]	; (8008490 <LmhpComplianceOnMcpsIndication+0x264>)
 8008364:	718c      	strb	r4, [r1, #6]
            ComplianceTestState.DataBuffer[0] = 4;
 8008366:	688a      	ldr	r2, [r1, #8]
 8008368:	2304      	movs	r3, #4
 800836a:	7013      	strb	r3, [r2, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800836c:	794b      	ldrb	r3, [r1, #5]
 800836e:	42a3      	cmp	r3, r4
 8008370:	bf28      	it	cs
 8008372:	4623      	movcs	r3, r4
 8008374:	2b01      	cmp	r3, #1
 8008376:	f240 8088 	bls.w	800848a <LmhpComplianceOnMcpsIndication+0x25e>
 800837a:	1c51      	adds	r1, r2, #1
 800837c:	3b02      	subs	r3, #2
 800837e:	fa51 f183 	uxtab	r1, r1, r3
 8008382:	4613      	mov	r3, r2
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8008384:	f1c2 0c01 	rsb	ip, r2, #1
 8008388:	6882      	ldr	r2, [r0, #8]
 800838a:	441a      	add	r2, r3
 800838c:	f812 200c 	ldrb.w	r2, [r2, ip]
 8008390:	3201      	adds	r2, #1
 8008392:	f803 2f01 	strb.w	r2, [r3, #1]!
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8008396:	428b      	cmp	r3, r1
 8008398:	d1f6      	bne.n	8008388 <LmhpComplianceOnMcpsIndication+0x15c>
 800839a:	e076      	b.n	800848a <LmhpComplianceOnMcpsIndication+0x25e>
                mlmeReq.Type = MLME_LINK_CHECK;
 800839c:	2304      	movs	r3, #4
 800839e:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 80083a2:	a803      	add	r0, sp, #12
 80083a4:	f002 fd76 	bl	800ae94 <LoRaMacMlmeRequest>
            break;
 80083a8:	e06f      	b.n	800848a <LmhpComplianceOnMcpsIndication+0x25e>
                TimerStop(&ComplianceTxNextPacketTimer);
 80083aa:	483b      	ldr	r0, [pc, #236]	; (8008498 <LmhpComplianceOnMcpsIndication+0x26c>)
 80083ac:	f008 f8ec 	bl	8010588 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 80083b0:	4b37      	ldr	r3, [pc, #220]	; (8008490 <LmhpComplianceOnMcpsIndication+0x264>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 80083b6:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 80083b8:	2304      	movs	r3, #4
 80083ba:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80083be:	4c35      	ldr	r4, [pc, #212]	; (8008494 <LmhpComplianceOnMcpsIndication+0x268>)
 80083c0:	6823      	ldr	r3, [r4, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80083c8:	a803      	add	r0, sp, #12
 80083ca:	f002 fa91 	bl	800a8f0 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 80083ce:	6823      	ldr	r3, [r4, #0]
 80083d0:	7858      	ldrb	r0, [r3, #1]
 80083d2:	f003 f83f 	bl	800b454 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	b103      	cbz	r3, 80083de <LmhpComplianceOnMcpsIndication+0x1b2>
                    LmhpComplianceParams->StartPeripherals( );
 80083dc:	4798      	blx	r3
                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 80083de:	4b30      	ldr	r3, [pc, #192]	; (80084a0 <LmhpComplianceOnMcpsIndication+0x274>)
 80083e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e2:	2101      	movs	r1, #1
 80083e4:	2002      	movs	r0, #2
 80083e6:	4798      	blx	r3
            break;
 80083e8:	e04f      	b.n	800848a <LmhpComplianceOnMcpsIndication+0x25e>
                if( mcpsIndication->BufferSize == 3 )
 80083ea:	7b03      	ldrb	r3, [r0, #12]
 80083ec:	2b03      	cmp	r3, #3
 80083ee:	d008      	beq.n	8008402 <LmhpComplianceOnMcpsIndication+0x1d6>
                else if( mcpsIndication->BufferSize == 7 )
 80083f0:	2b07      	cmp	r3, #7
 80083f2:	d010      	beq.n	8008416 <LmhpComplianceOnMcpsIndication+0x1ea>
                LoRaMacMlmeRequest( &mlmeReq );
 80083f4:	a803      	add	r0, sp, #12
 80083f6:	f002 fd4d 	bl	800ae94 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 80083fa:	4b25      	ldr	r3, [pc, #148]	; (8008490 <LmhpComplianceOnMcpsIndication+0x264>)
 80083fc:	2201      	movs	r2, #1
 80083fe:	709a      	strb	r2, [r3, #2]
            break;
 8008400:	e043      	b.n	800848a <LmhpComplianceOnMcpsIndication+0x25e>
                    mlmeReq.Type = MLME_TXCW;
 8008402:	2305      	movs	r3, #5
 8008404:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8008408:	7851      	ldrb	r1, [r2, #1]
 800840a:	7893      	ldrb	r3, [r2, #2]
 800840c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008410:	f8ad 3010 	strh.w	r3, [sp, #16]
 8008414:	e7ee      	b.n	80083f4 <LmhpComplianceOnMcpsIndication+0x1c8>
                    mlmeReq.Type = MLME_TXCW_1;
 8008416:	2306      	movs	r3, #6
 8008418:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800841c:	7851      	ldrb	r1, [r2, #1]
 800841e:	7893      	ldrb	r3, [r2, #2]
 8008420:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008424:	f8ad 3010 	strh.w	r3, [sp, #16]
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8008428:	78d1      	ldrb	r1, [r2, #3]
 800842a:	7913      	ldrb	r3, [r2, #4]
 800842c:	021b      	lsls	r3, r3, #8
 800842e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008432:	7951      	ldrb	r1, [r2, #5]
 8008434:	430b      	orrs	r3, r1
 8008436:	2164      	movs	r1, #100	; 0x64
 8008438:	fb01 f303 	mul.w	r3, r1, r3
 800843c:	9305      	str	r3, [sp, #20]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800843e:	7993      	ldrb	r3, [r2, #6]
 8008440:	f88d 3018 	strb.w	r3, [sp, #24]
 8008444:	e7d6      	b.n	80083f4 <LmhpComplianceOnMcpsIndication+0x1c8>
                mlmeReq.Type = MLME_DEVICE_TIME;
 8008446:	230a      	movs	r3, #10
 8008448:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 800844c:	a803      	add	r0, sp, #12
 800844e:	f002 fd21 	bl	800ae94 <LoRaMacMlmeRequest>
            break;
 8008452:	e01a      	b.n	800848a <LmhpComplianceOnMcpsIndication+0x25e>
                mibReq.Type = MIB_DEVICE_CLASS;
 8008454:	2300      	movs	r3, #0
 8008456:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800845a:	7853      	ldrb	r3, [r2, #1]
 800845c:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8008460:	a803      	add	r0, sp, #12
 8008462:	f002 fa45 	bl	800a8f0 <LoRaMacMibSetRequestConfirm>
            break;
 8008466:	e010      	b.n	800848a <LmhpComplianceOnMcpsIndication+0x25e>
                mlmeReq.Type = MLME_PING_SLOT_INFO;
 8008468:	230d      	movs	r3, #13
 800846a:	f88d 300c 	strb.w	r3, [sp, #12]
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800846e:	7853      	ldrb	r3, [r2, #1]
 8008470:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMlmeRequest( &mlmeReq );
 8008474:	a803      	add	r0, sp, #12
 8008476:	f002 fd0d 	bl	800ae94 <LoRaMacMlmeRequest>
            break;
 800847a:	e006      	b.n	800848a <LmhpComplianceOnMcpsIndication+0x25e>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800847c:	78c3      	ldrb	r3, [r0, #3]
 800847e:	2be0      	cmp	r3, #224	; 0xe0
 8008480:	d103      	bne.n	800848a <LmhpComplianceOnMcpsIndication+0x25e>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8008482:	7b03      	ldrb	r3, [r0, #12]
 8008484:	2b04      	cmp	r3, #4
 8008486:	f43f aeff 	beq.w	8008288 <LmhpComplianceOnMcpsIndication+0x5c>
}
 800848a:	b00c      	add	sp, #48	; 0x30
 800848c:	bd10      	pop	{r4, pc}
 800848e:	4770      	bx	lr
 8008490:	20000b78 	.word	0x20000b78
 8008494:	20000ba4 	.word	0x20000ba4
 8008498:	20000b8c 	.word	0x20000b8c
 800849c:	080084a5 	.word	0x080084a5
 80084a0:	200000d8 	.word	0x200000d8

080084a4 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 80084a4:	b508      	push	{r3, lr}
    LmhpComplianceTxProcess( );
 80084a6:	f7ff fe73 	bl	8008190 <LmhpComplianceTxProcess>
}
 80084aa:	bd08      	pop	{r3, pc}

080084ac <LmhpCompliancePackageFactory>:
}
 80084ac:	4800      	ldr	r0, [pc, #0]	; (80084b0 <LmhpCompliancePackageFactory+0x4>)
 80084ae:	4770      	bx	lr
 80084b0:	200000d8 	.word	0x200000d8

080084b4 <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 80084b4:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 80084b6:	4a06      	ldr	r2, [pc, #24]	; (80084d0 <OnRadioRxError+0x1c>)
 80084b8:	7813      	ldrb	r3, [r2, #0]
 80084ba:	f043 0302 	orr.w	r3, r3, #2
 80084be:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80084c0:	4b04      	ldr	r3, [pc, #16]	; (80084d4 <OnRadioRxError+0x20>)
 80084c2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80084c6:	b113      	cbz	r3, 80084ce <OnRadioRxError+0x1a>
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	b103      	cbz	r3, 80084ce <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80084cc:	4798      	blx	r3
    }
}
 80084ce:	bd08      	pop	{r3, pc}
 80084d0:	200019f8 	.word	0x200019f8
 80084d4:	200019fc 	.word	0x200019fc

080084d8 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80084d8:	4b04      	ldr	r3, [pc, #16]	; (80084ec <UpdateRxSlotIdleState+0x14>)
 80084da:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80084de:	2b02      	cmp	r3, #2
 80084e0:	bf18      	it	ne
 80084e2:	2306      	movne	r3, #6
 80084e4:	4a02      	ldr	r2, [pc, #8]	; (80084f0 <UpdateRxSlotIdleState+0x18>)
 80084e6:	f882 3484 	strb.w	r3, [r2, #1156]	; 0x484
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 80084ea:	4770      	bx	lr
 80084ec:	200012d0 	.word	0x200012d0
 80084f0:	200019fc 	.word	0x200019fc

080084f4 <StopRetransmission>:
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80084f4:	4b11      	ldr	r3, [pc, #68]	; (800853c <StopRetransmission+0x48>)
 80084f6:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80084fa:	f013 0f02 	tst.w	r3, #2
 80084fe:	d004      	beq.n	800850a <StopRetransmission+0x16>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8008500:	4b0e      	ldr	r3, [pc, #56]	; (800853c <StopRetransmission+0x48>)
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008502:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8008506:	2b01      	cmp	r3, #1
 8008508:	d907      	bls.n	800851a <StopRetransmission+0x26>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800850a:	4b0d      	ldr	r3, [pc, #52]	; (8008540 <StopRetransmission+0x4c>)
 800850c:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8008510:	b11b      	cbz	r3, 800851a <StopRetransmission+0x26>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8008512:	4a0b      	ldr	r2, [pc, #44]	; (8008540 <StopRetransmission+0x4c>)
 8008514:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8008516:	3301      	adds	r3, #1
 8008518:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800851a:	4b08      	ldr	r3, [pc, #32]	; (800853c <StopRetransmission+0x48>)
 800851c:	2200      	movs	r2, #0
 800851e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8008522:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8008526:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800852a:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800852e:	f022 0202 	bic.w	r2, r2, #2
 8008532:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 8008536:	2001      	movs	r0, #1
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	200019fc 	.word	0x200019fc
 8008540:	200012d0 	.word	0x200012d0

08008544 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8008544:	b500      	push	{lr}
 8008546:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008548:	4b0c      	ldr	r3, [pc, #48]	; (800857c <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 800854a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800854e:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 8008552:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8008556:	220d      	movs	r2, #13
 8008558:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800855c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008560:	b113      	cbz	r3, 8008568 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008562:	230e      	movs	r3, #14
 8008564:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008568:	a902      	add	r1, sp, #8
 800856a:	4b04      	ldr	r3, [pc, #16]	; (800857c <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 800856c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008570:	f003 ff81 	bl	800c476 <RegionGetPhyParam>
}
 8008574:	b2c0      	uxtb	r0, r0
 8008576:	b005      	add	sp, #20
 8008578:	f85d fb04 	ldr.w	pc, [sp], #4
 800857c:	200012d0 	.word	0x200012d0

08008580 <OnAckTimeoutTimerEvent>:
{
 8008580:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 8008582:	4c10      	ldr	r4, [pc, #64]	; (80085c4 <OnAckTimeoutTimerEvent+0x44>)
 8008584:	f504 707e 	add.w	r0, r4, #1016	; 0x3f8
 8008588:	f007 fffe 	bl	8010588 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 800858c:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8008590:	b113      	cbz	r3, 8008598 <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 8008592:	2201      	movs	r2, #1
 8008594:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8008598:	4b0b      	ldr	r3, [pc, #44]	; (80085c8 <OnAckTimeoutTimerEvent+0x48>)
 800859a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d007      	beq.n	80085b2 <OnAckTimeoutTimerEvent+0x32>
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80085a2:	4b08      	ldr	r3, [pc, #32]	; (80085c4 <OnAckTimeoutTimerEvent+0x44>)
 80085a4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80085a8:	b113      	cbz	r3, 80085b0 <OnAckTimeoutTimerEvent+0x30>
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	b103      	cbz	r3, 80085b0 <OnAckTimeoutTimerEvent+0x30>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80085ae:	4798      	blx	r3
}
 80085b0:	bd10      	pop	{r4, pc}
        MacCtx.MacFlags.Bits.MacDone = 1;
 80085b2:	4a04      	ldr	r2, [pc, #16]	; (80085c4 <OnAckTimeoutTimerEvent+0x44>)
 80085b4:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80085b8:	f043 0320 	orr.w	r3, r3, #32
 80085bc:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 80085c0:	e7ef      	b.n	80085a2 <OnAckTimeoutTimerEvent+0x22>
 80085c2:	bf00      	nop
 80085c4:	200019fc 	.word	0x200019fc
 80085c8:	200012d0 	.word	0x200012d0

080085cc <PrepareRxDoneAbort>:
{
 80085cc:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80085ce:	4b0c      	ldr	r3, [pc, #48]	; (8008600 <PrepareRxDoneAbort+0x34>)
 80085d0:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80085d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80085d8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 80085dc:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80085e0:	b94b      	cbnz	r3, 80085f6 <PrepareRxDoneAbort+0x2a>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80085e2:	4a07      	ldr	r2, [pc, #28]	; (8008600 <PrepareRxDoneAbort+0x34>)
 80085e4:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
    MacCtx.MacFlags.Bits.MacDone = 1;
 80085e8:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 80085ec:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    UpdateRxSlotIdleState( );
 80085f0:	f7ff ff72 	bl	80084d8 <UpdateRxSlotIdleState>
}
 80085f4:	bd08      	pop	{r3, pc}
        OnAckTimeoutTimerEvent( NULL );
 80085f6:	2000      	movs	r0, #0
 80085f8:	f7ff ffc2 	bl	8008580 <OnAckTimeoutTimerEvent>
 80085fc:	e7f1      	b.n	80085e2 <PrepareRxDoneAbort+0x16>
 80085fe:	bf00      	nop
 8008600:	200019fc 	.word	0x200019fc

08008604 <ProcessMacCommands>:
{
 8008604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008608:	b08f      	sub	sp, #60	; 0x3c
 800860a:	469a      	mov	sl, r3
    uint8_t status = 0;
 800860c:	2300      	movs	r3, #0
 800860e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8008612:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    while( macIndex < commandsSize )
 8008616:	4291      	cmp	r1, r2
 8008618:	f080 82c1 	bcs.w	8008b9e <ProcessMacCommands+0x59a>
 800861c:	4605      	mov	r5, r0
 800861e:	460c      	mov	r4, r1
 8008620:	4616      	mov	r6, r2
    bool adrBlockFound = false;
 8008622:	4698      	mov	r8, r3
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8008624:	4fbe      	ldr	r7, [pc, #760]	; (8008920 <ProcessMacCommands+0x31c>)
 8008626:	e027      	b.n	8008678 <ProcessMacCommands+0x74>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8008628:	2004      	movs	r0, #4
 800862a:	f003 f9fb 	bl	800ba24 <LoRaMacConfirmQueueIsCmdActive>
 800862e:	b908      	cbnz	r0, 8008634 <ProcessMacCommands+0x30>
        switch( payload[macIndex++] )
 8008630:	464c      	mov	r4, r9
 8008632:	e01e      	b.n	8008672 <ProcessMacCommands+0x6e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8008634:	2104      	movs	r1, #4
 8008636:	2000      	movs	r0, #0
 8008638:	f003 f9aa 	bl	800b990 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800863c:	1ca3      	adds	r3, r4, #2
 800863e:	b2db      	uxtb	r3, r3
 8008640:	f815 2009 	ldrb.w	r2, [r5, r9]
 8008644:	f887 2454 	strb.w	r2, [r7, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8008648:	3403      	adds	r4, #3
 800864a:	b2e4      	uxtb	r4, r4
 800864c:	5ceb      	ldrb	r3, [r5, r3]
 800864e:	f887 3455 	strb.w	r3, [r7, #1109]	; 0x455
 8008652:	e00e      	b.n	8008672 <ProcessMacCommands+0x6e>
                int8_t linkAdrDatarate = DR_0;
 8008654:	2300      	movs	r3, #0
 8008656:	f88d 300e 	strb.w	r3, [sp, #14]
                int8_t linkAdrTxPower = TX_POWER_0;
 800865a:	f88d 300f 	strb.w	r3, [sp, #15]
                uint8_t linkAdrNbRep = 0;
 800865e:	f88d 3010 	strb.w	r3, [sp, #16]
                uint8_t linkAdrNbBytesParsed = 0;
 8008662:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 8008666:	f1b8 0f00 	cmp.w	r8, #0
 800866a:	d03d      	beq.n	80086e8 <ProcessMacCommands+0xe4>
                break;
 800866c:	464c      	mov	r4, r9
 800866e:	f04f 0801 	mov.w	r8, #1
    while( macIndex < commandsSize )
 8008672:	42a6      	cmp	r6, r4
 8008674:	f240 8293 	bls.w	8008b9e <ProcessMacCommands+0x59a>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8008678:	5d28      	ldrb	r0, [r5, r4]
 800867a:	f003 f8ed 	bl	800b858 <LoRaMacCommandsGetCmdSize>
 800867e:	4420      	add	r0, r4
 8008680:	42b0      	cmp	r0, r6
 8008682:	f300 828c 	bgt.w	8008b9e <ProcessMacCommands+0x59a>
        switch( payload[macIndex++] )
 8008686:	f104 0901 	add.w	r9, r4, #1
 800868a:	fa5f f989 	uxtb.w	r9, r9
 800868e:	5d2b      	ldrb	r3, [r5, r4]
 8008690:	3b02      	subs	r3, #2
 8008692:	2b11      	cmp	r3, #17
 8008694:	f200 8283 	bhi.w	8008b9e <ProcessMacCommands+0x59a>
 8008698:	a201      	add	r2, pc, #4	; (adr r2, 80086a0 <ProcessMacCommands+0x9c>)
 800869a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869e:	bf00      	nop
 80086a0:	08008629 	.word	0x08008629
 80086a4:	08008655 	.word	0x08008655
 80086a8:	080087a7 	.word	0x080087a7
 80086ac:	080087cf 	.word	0x080087cf
 80086b0:	08008855 	.word	0x08008855
 80086b4:	08008883 	.word	0x08008883
 80086b8:	080088f1 	.word	0x080088f1
 80086bc:	0800892d 	.word	0x0800892d
 80086c0:	080089c5 	.word	0x080089c5
 80086c4:	08008b9f 	.word	0x08008b9f
 80086c8:	08008b9f 	.word	0x08008b9f
 80086cc:	08008a21 	.word	0x08008a21
 80086d0:	08008b9f 	.word	0x08008b9f
 80086d4:	08008b9f 	.word	0x08008b9f
 80086d8:	08008ac3 	.word	0x08008ac3
 80086dc:	08008aef 	.word	0x08008aef
 80086e0:	08008b31 	.word	0x08008b31
 80086e4:	08008b69 	.word	0x08008b69
                    linkAdrReq.Payload = &payload[macIndex - 1];
 80086e8:	f109 33ff 	add.w	r3, r9, #4294967295
 80086ec:	442b      	add	r3, r5
 80086ee:	9308      	str	r3, [sp, #32]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80086f0:	1b33      	subs	r3, r6, r4
 80086f2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80086f6:	488b      	ldr	r0, [pc, #556]	; (8008924 <ProcessMacCommands+0x320>)
 80086f8:	f890 3106 	ldrb.w	r3, [r0, #262]	; 0x106
 80086fc:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008700:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8008704:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8008708:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800870c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8008710:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8008714:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8008718:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800871c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8008720:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8008724:	9307      	str	r3, [sp, #28]
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8008726:	ab05      	add	r3, sp, #20
 8008728:	9301      	str	r3, [sp, #4]
 800872a:	ab04      	add	r3, sp, #16
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	f10d 030f 	add.w	r3, sp, #15
 8008732:	f10d 020e 	add.w	r2, sp, #14
 8008736:	a907      	add	r1, sp, #28
 8008738:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800873c:	f003 fef9 	bl	800c532 <RegionLinkAdrReq>
 8008740:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                    if( ( status & 0x07 ) == 0x07 )
 8008744:	f000 0007 	and.w	r0, r0, #7
 8008748:	2807      	cmp	r0, #7
 800874a:	d01e      	beq.n	800878a <ProcessMacCommands+0x186>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800874c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008750:	2b04      	cmp	r3, #4
 8008752:	d916      	bls.n	8008782 <ProcessMacCommands+0x17e>
 8008754:	f04f 0800 	mov.w	r8, #0
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8008758:	f04f 0b01 	mov.w	fp, #1
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800875c:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8008928 <ProcessMacCommands+0x324>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8008760:	465a      	mov	r2, fp
 8008762:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 8008766:	2003      	movs	r0, #3
 8008768:	f002 ff5e 	bl	800b628 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800876c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008770:	f108 0801 	add.w	r8, r8, #1
 8008774:	fba9 2103 	umull	r2, r1, r9, r3
 8008778:	fa5f f288 	uxtb.w	r2, r8
 800877c:	ebb2 0f91 	cmp.w	r2, r1, lsr #2
 8008780:	d3ee      	bcc.n	8008760 <ProcessMacCommands+0x15c>
                    macIndex += linkAdrNbBytesParsed - 1;
 8008782:	4423      	add	r3, r4
 8008784:	fa5f f983 	uxtb.w	r9, r3
 8008788:	e770      	b.n	800866c <ProcessMacCommands+0x68>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800878a:	4b66      	ldr	r3, [pc, #408]	; (8008924 <ProcessMacCommands+0x320>)
 800878c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8008790:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8008794:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8008798:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800879c:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80087a0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80087a4:	e7d2      	b.n	800874c <ProcessMacCommands+0x148>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80087a6:	3402      	adds	r4, #2
 80087a8:	b2e4      	uxtb	r4, r4
 80087aa:	f815 3009 	ldrb.w	r3, [r5, r9]
 80087ae:	f003 030f 	and.w	r3, r3, #15
 80087b2:	495c      	ldr	r1, [pc, #368]	; (8008924 <ProcessMacCommands+0x320>)
 80087b4:	f881 3107 	strb.w	r3, [r1, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80087b8:	2201      	movs	r2, #1
 80087ba:	fa02 f303 	lsl.w	r3, r2, r3
 80087be:	f8a1 310a 	strh.w	r3, [r1, #266]	; 0x10a
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80087c2:	2200      	movs	r2, #0
 80087c4:	a90b      	add	r1, sp, #44	; 0x2c
 80087c6:	2004      	movs	r0, #4
 80087c8:	f002 ff2e 	bl	800b628 <LoRaMacCommandsAddCmd>
                break;
 80087cc:	e751      	b.n	8008672 <ProcessMacCommands+0x6e>
                status = 0x07;
 80087ce:	2307      	movs	r3, #7
 80087d0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80087d4:	f815 3009 	ldrb.w	r3, [r5, r9]
 80087d8:	f3c3 1202 	ubfx	r2, r3, #4, #3
 80087dc:	f88d 201d 	strb.w	r2, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80087e0:	f003 030f 	and.w	r3, r3, #15
 80087e4:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 80087e8:	1ca3      	adds	r3, r4, #2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	5ce8      	ldrb	r0, [r5, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80087ee:	1d22      	adds	r2, r4, #4
 80087f0:	b2d2      	uxtb	r2, r2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80087f2:	1ce1      	adds	r1, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80087f4:	b2c9      	uxtb	r1, r1
 80087f6:	5c69      	ldrb	r1, [r5, r1]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80087f8:	3405      	adds	r4, #5
 80087fa:	b2e4      	uxtb	r4, r4
 80087fc:	5cab      	ldrb	r3, [r5, r2]
 80087fe:	041b      	lsls	r3, r3, #16
 8008800:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008804:	4303      	orrs	r3, r0
                rxParamSetupReq.Frequency *= 100;
 8008806:	2264      	movs	r2, #100	; 0x64
 8008808:	fb02 f303 	mul.w	r3, r2, r3
 800880c:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800880e:	a907      	add	r1, sp, #28
 8008810:	4b44      	ldr	r3, [pc, #272]	; (8008924 <ProcessMacCommands+0x320>)
 8008812:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008816:	f003 fe9e 	bl	800c556 <RegionRxParamSetupReq>
 800881a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 800881e:	f000 0307 	and.w	r3, r0, #7
 8008822:	2b07      	cmp	r3, #7
 8008824:	d007      	beq.n	8008836 <ProcessMacCommands+0x232>
                macCmdPayload[0] = status;
 8008826:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800882a:	2201      	movs	r2, #1
 800882c:	a90b      	add	r1, sp, #44	; 0x2c
 800882e:	2005      	movs	r0, #5
 8008830:	f002 fefa 	bl	800b628 <LoRaMacCommandsAddCmd>
                break;
 8008834:	e71d      	b.n	8008672 <ProcessMacCommands+0x6e>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8008836:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800883a:	4b3a      	ldr	r3, [pc, #232]	; (8008924 <ProcessMacCommands+0x320>)
 800883c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8008840:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8008844:	9a08      	ldr	r2, [sp, #32]
 8008846:	665a      	str	r2, [r3, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8008848:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800884a:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800884e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8008852:	e7e8      	b.n	8008826 <ProcessMacCommands+0x222>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8008854:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8008858:	b17b      	cbz	r3, 800887a <ProcessMacCommands+0x276>
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	b17b      	cbz	r3, 800887e <ProcessMacCommands+0x27a>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800885e:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8008860:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8008864:	f00a 033f 	and.w	r3, sl, #63	; 0x3f
 8008868:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800886c:	2202      	movs	r2, #2
 800886e:	a90b      	add	r1, sp, #44	; 0x2c
 8008870:	2006      	movs	r0, #6
 8008872:	f002 fed9 	bl	800b628 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 8008876:	464c      	mov	r4, r9
                break;
 8008878:	e6fb      	b.n	8008672 <ProcessMacCommands+0x6e>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800887a:	20ff      	movs	r0, #255	; 0xff
 800887c:	e7f0      	b.n	8008860 <ProcessMacCommands+0x25c>
 800887e:	20ff      	movs	r0, #255	; 0xff
 8008880:	e7ee      	b.n	8008860 <ProcessMacCommands+0x25c>
                status = 0x03;
 8008882:	2303      	movs	r3, #3
 8008884:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 8008888:	f815 3009 	ldrb.w	r3, [r5, r9]
 800888c:	f88d 3018 	strb.w	r3, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 8008890:	ab07      	add	r3, sp, #28
 8008892:	9305      	str	r3, [sp, #20]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008894:	1d62      	adds	r2, r4, #5
 8008896:	b2d2      	uxtb	r2, r2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8008898:	1ce3      	adds	r3, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800889a:	b2db      	uxtb	r3, r3
 800889c:	5ce8      	ldrb	r0, [r5, r3]
 800889e:	1d21      	adds	r1, r4, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80088a0:	b2c9      	uxtb	r1, r1
 80088a2:	5c6b      	ldrb	r3, [r5, r1]
 80088a4:	041b      	lsls	r3, r3, #16
 80088a6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                newChannelReq.ChannelId = payload[macIndex++];
 80088aa:	1ca1      	adds	r1, r4, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80088ac:	b2c9      	uxtb	r1, r1
 80088ae:	5c69      	ldrb	r1, [r5, r1]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80088b0:	430b      	orrs	r3, r1
                chParam.Frequency *= 100;
 80088b2:	2164      	movs	r1, #100	; 0x64
 80088b4:	fb01 f303 	mul.w	r3, r1, r3
 80088b8:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 80088ba:	2300      	movs	r3, #0
 80088bc:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 80088be:	3406      	adds	r4, #6
 80088c0:	b2e4      	uxtb	r4, r4
 80088c2:	5cab      	ldrb	r3, [r5, r2]
 80088c4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80088c8:	a905      	add	r1, sp, #20
 80088ca:	4b16      	ldr	r3, [pc, #88]	; (8008924 <ProcessMacCommands+0x320>)
 80088cc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80088d0:	f003 fe4a 	bl	800c568 <RegionNewChannelReq>
 80088d4:	b2c3      	uxtb	r3, r0
 80088d6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 80088da:	2800      	cmp	r0, #0
 80088dc:	f6ff aec9 	blt.w	8008672 <ProcessMacCommands+0x6e>
                    macCmdPayload[0] = status;
 80088e0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80088e4:	2201      	movs	r2, #1
 80088e6:	a90b      	add	r1, sp, #44	; 0x2c
 80088e8:	2007      	movs	r0, #7
 80088ea:	f002 fe9d 	bl	800b628 <LoRaMacCommandsAddCmd>
                break;
 80088ee:	e6c0      	b.n	8008672 <ProcessMacCommands+0x6e>
                uint8_t delay = payload[macIndex++] & 0x0F;
 80088f0:	3402      	adds	r4, #2
 80088f2:	b2e4      	uxtb	r4, r4
 80088f4:	f815 3009 	ldrb.w	r3, [r5, r9]
 80088f8:	f003 030f 	and.w	r3, r3, #15
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	bf38      	it	cc
 8008900:	2301      	movcc	r3, #1
 8008902:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008906:	fb02 f303 	mul.w	r3, r2, r3
 800890a:	4a06      	ldr	r2, [pc, #24]	; (8008924 <ProcessMacCommands+0x320>)
 800890c:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800890e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8008912:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8008914:	2200      	movs	r2, #0
 8008916:	a90b      	add	r1, sp, #44	; 0x2c
 8008918:	2008      	movs	r0, #8
 800891a:	f002 fe85 	bl	800b628 <LoRaMacCommandsAddCmd>
                break;
 800891e:	e6a8      	b.n	8008672 <ProcessMacCommands+0x6e>
 8008920:	200019fc 	.word	0x200019fc
 8008924:	200012d0 	.word	0x200012d0
 8008928:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 800892c:	3402      	adds	r4, #2
 800892e:	b2e4      	uxtb	r4, r4
 8008930:	f815 3009 	ldrb.w	r3, [r5, r9]
                txParamSetupReq.UplinkDwellTime = 0;
 8008934:	2200      	movs	r2, #0
 8008936:	f88d 2010 	strb.w	r2, [sp, #16]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800893a:	f013 0f20 	tst.w	r3, #32
                    txParamSetupReq.DownlinkDwellTime = 1;
 800893e:	bf18      	it	ne
 8008940:	2201      	movne	r2, #1
 8008942:	f88d 2011 	strb.w	r2, [sp, #17]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8008946:	f013 0f10 	tst.w	r3, #16
                    txParamSetupReq.UplinkDwellTime = 1;
 800894a:	bf1c      	itt	ne
 800894c:	2201      	movne	r2, #1
 800894e:	f88d 2010 	strbne.w	r2, [sp, #16]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8008952:	f003 030f 	and.w	r3, r3, #15
 8008956:	f88d 3012 	strb.w	r3, [sp, #18]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800895a:	a904      	add	r1, sp, #16
 800895c:	4b91      	ldr	r3, [pc, #580]	; (8008ba4 <ProcessMacCommands+0x5a0>)
 800895e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008962:	f003 fe0a 	bl	800c57a <RegionTxParamSetupReq>
 8008966:	f1b0 3fff 	cmp.w	r0, #4294967295
 800896a:	f43f ae82 	beq.w	8008672 <ProcessMacCommands+0x6e>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800896e:	f89d b010 	ldrb.w	fp, [sp, #16]
 8008972:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8008ba4 <ProcessMacCommands+0x5a0>
 8008976:	f889 b074 	strb.w	fp, [r9, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800897a:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800897e:	f889 3075 	strb.w	r3, [r9, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8008982:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8008986:	4a88      	ldr	r2, [pc, #544]	; (8008ba8 <ProcessMacCommands+0x5a4>)
 8008988:	5cd0      	ldrb	r0, [r2, r3]
 800898a:	f7f7 ff1f 	bl	80007cc <__aeabi_ui2f>
 800898e:	f8c9 0078 	str.w	r0, [r9, #120]	; 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8008992:	2302      	movs	r3, #2
 8008994:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008998:	f88d b01e 	strb.w	fp, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800899c:	a907      	add	r1, sp, #28
 800899e:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
 80089a2:	f003 fd68 	bl	800c476 <RegionGetPhyParam>
 80089a6:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80089a8:	b240      	sxtb	r0, r0
 80089aa:	f999 3039 	ldrsb.w	r3, [r9, #57]	; 0x39
 80089ae:	4298      	cmp	r0, r3
 80089b0:	bfb8      	it	lt
 80089b2:	4618      	movlt	r0, r3
 80089b4:	f889 0039 	strb.w	r0, [r9, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80089b8:	2200      	movs	r2, #0
 80089ba:	a90b      	add	r1, sp, #44	; 0x2c
 80089bc:	2009      	movs	r0, #9
 80089be:	f002 fe33 	bl	800b628 <LoRaMacCommandsAddCmd>
                break;
 80089c2:	e656      	b.n	8008672 <ProcessMacCommands+0x6e>
                status = 0x03;
 80089c4:	2303      	movs	r3, #3
 80089c6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 80089ca:	f815 3009 	ldrb.w	r3, [r5, r9]
 80089ce:	f88d 301c 	strb.w	r3, [sp, #28]
 80089d2:	1ca3      	adds	r3, r4, #2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	5ce8      	ldrb	r0, [r5, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80089d8:	1d22      	adds	r2, r4, #4
 80089da:	b2d2      	uxtb	r2, r2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80089dc:	1ce1      	adds	r1, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80089de:	b2c9      	uxtb	r1, r1
 80089e0:	5c69      	ldrb	r1, [r5, r1]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80089e2:	3405      	adds	r4, #5
 80089e4:	b2e4      	uxtb	r4, r4
 80089e6:	5cab      	ldrb	r3, [r5, r2]
 80089e8:	041b      	lsls	r3, r3, #16
 80089ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80089ee:	4303      	orrs	r3, r0
                dlChannelReq.Rx1Frequency *= 100;
 80089f0:	2264      	movs	r2, #100	; 0x64
 80089f2:	fb02 f303 	mul.w	r3, r2, r3
 80089f6:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80089f8:	a907      	add	r1, sp, #28
 80089fa:	4b6a      	ldr	r3, [pc, #424]	; (8008ba4 <ProcessMacCommands+0x5a0>)
 80089fc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008a00:	f003 fdc4 	bl	800c58c <RegionDlChannelReq>
 8008a04:	b2c3      	uxtb	r3, r0
 8008a06:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 8008a0a:	2800      	cmp	r0, #0
 8008a0c:	f6ff ae31 	blt.w	8008672 <ProcessMacCommands+0x6e>
                    macCmdPayload[0] = status;
 8008a10:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8008a14:	2201      	movs	r2, #1
 8008a16:	a90b      	add	r1, sp, #44	; 0x2c
 8008a18:	200a      	movs	r0, #10
 8008a1a:	f002 fe05 	bl	800b628 <LoRaMacCommandsAddCmd>
                break;
 8008a1e:	e628      	b.n	8008672 <ProcessMacCommands+0x6e>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8008a20:	200a      	movs	r0, #10
 8008a22:	f002 ffff 	bl	800ba24 <LoRaMacConfirmQueueIsCmdActive>
 8008a26:	b908      	cbnz	r0, 8008a2c <ProcessMacCommands+0x428>
        switch( payload[macIndex++] )
 8008a28:	464c      	mov	r4, r9
 8008a2a:	e622      	b.n	8008672 <ProcessMacCommands+0x6e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8008a2c:	210a      	movs	r1, #10
 8008a2e:	2000      	movs	r0, #0
 8008a30:	f002 ffae 	bl	800b990 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
 8008a34:	2300      	movs	r3, #0
 8008a36:	f8ad 301a 	strh.w	r3, [sp, #26]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008a3a:	1d62      	adds	r2, r4, #5
 8008a3c:	b2d2      	uxtb	r2, r2
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8008a3e:	1ca3      	adds	r3, r4, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	5ce8      	ldrb	r0, [r5, r3]
 8008a44:	1ce1      	adds	r1, r4, #3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008a46:	b2c9      	uxtb	r1, r1
 8008a48:	5c6b      	ldrb	r3, [r5, r1]
 8008a4a:	041b      	lsls	r3, r3, #16
 8008a4c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8008a50:	f815 9009 	ldrb.w	r9, [r5, r9]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008a54:	ea43 0909 	orr.w	r9, r3, r9
 8008a58:	1d23      	adds	r3, r4, #4
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	5ceb      	ldrb	r3, [r5, r3]
 8008a5e:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8008a62:	3406      	adds	r4, #6
 8008a64:	b2e4      	uxtb	r4, r4
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8008a66:	5cab      	ldrb	r3, [r5, r2]
 8008a68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a6c:	fb02 f303 	mul.w	r3, r2, r3
 8008a70:	121b      	asrs	r3, r3, #8
 8008a72:	f8ad 3018 	strh.w	r3, [sp, #24]
                    sysTimeCurrent = SysTimeGet( );
 8008a76:	f10d 0b1c 	add.w	fp, sp, #28
 8008a7a:	4658      	mov	r0, fp
 8008a7c:	f007 f9f4 	bl	800fe68 <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8008a80:	4b4a      	ldr	r3, [pc, #296]	; (8008bac <ProcessMacCommands+0x5a8>)
 8008a82:	444b      	add	r3, r9
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8008a84:	9305      	str	r3, [sp, #20]
 8008a86:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8008a90:	f10d 0914 	add.w	r9, sp, #20
 8008a94:	e899 0006 	ldmia.w	r9, {r1, r2}
 8008a98:	a80c      	add	r0, sp, #48	; 0x30
 8008a9a:	f007 f9a1 	bl	800fde0 <SysTimeSub>
 8008a9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008aa4:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8008aa8:	4648      	mov	r0, r9
 8008aaa:	f007 f97e 	bl	800fdaa <SysTimeAdd>
                    SysTimeSet( sysTime );
 8008aae:	e899 0003 	ldmia.w	r9, {r0, r1}
 8008ab2:	f007 f9b1 	bl	800fe18 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8008ab6:	f002 fda1 	bl	800b5fc <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8008aba:	2301      	movs	r3, #1
 8008abc:	f887 3434 	strb.w	r3, [r7, #1076]	; 0x434
 8008ac0:	e5d7      	b.n	8008672 <ProcessMacCommands+0x6e>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8008ac2:	200d      	movs	r0, #13
 8008ac4:	f002 ffae 	bl	800ba24 <LoRaMacConfirmQueueIsCmdActive>
 8008ac8:	b908      	cbnz	r0, 8008ace <ProcessMacCommands+0x4ca>
        switch( payload[macIndex++] )
 8008aca:	464c      	mov	r4, r9
 8008acc:	e5d1      	b.n	8008672 <ProcessMacCommands+0x6e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8008ace:	210d      	movs	r1, #13
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	f002 ff5d 	bl	800b990 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8008ad6:	f897 3484 	ldrb.w	r3, [r7, #1156]	; 0x484
 8008ada:	3b04      	subs	r3, #4
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d801      	bhi.n	8008ae6 <ProcessMacCommands+0x4e2>
        switch( payload[macIndex++] )
 8008ae2:	464c      	mov	r4, r9
 8008ae4:	e5c5      	b.n	8008672 <ProcessMacCommands+0x6e>
                        LoRaMacClassBPingSlotInfoAns( );
 8008ae6:	f002 fd85 	bl	800b5f4 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 8008aea:	464c      	mov	r4, r9
 8008aec:	e5c1      	b.n	8008672 <ProcessMacCommands+0x6e>
                frequency = ( uint32_t )payload[macIndex++];
 8008aee:	f815 0009 	ldrb.w	r0, [r5, r9]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008af2:	1d22      	adds	r2, r4, #4
 8008af4:	b2d2      	uxtb	r2, r2
                frequency = ( uint32_t )payload[macIndex++];
 8008af6:	1ca1      	adds	r1, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008af8:	b2c9      	uxtb	r1, r1
 8008afa:	f815 c001 	ldrb.w	ip, [r5, r1]
 8008afe:	1ce1      	adds	r1, r4, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008b00:	b2c9      	uxtb	r1, r1
 8008b02:	5c6b      	ldrb	r3, [r5, r1]
 8008b04:	041b      	lsls	r3, r3, #16
 8008b06:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8008b0a:	4303      	orrs	r3, r0
                datarate = payload[macIndex++] & 0x0F;
 8008b0c:	3405      	adds	r4, #5
 8008b0e:	b2e4      	uxtb	r4, r4
 8008b10:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8008b12:	2164      	movs	r1, #100	; 0x64
 8008b14:	fb03 f101 	mul.w	r1, r3, r1
 8008b18:	f000 000f 	and.w	r0, r0, #15
 8008b1c:	f002 fd6b 	bl	800b5f6 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8008b20:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8008b24:	2201      	movs	r2, #1
 8008b26:	a90b      	add	r1, sp, #44	; 0x2c
 8008b28:	2011      	movs	r0, #17
 8008b2a:	f002 fd7d 	bl	800b628 <LoRaMacCommandsAddCmd>
                break;
 8008b2e:	e5a0      	b.n	8008672 <ProcessMacCommands+0x6e>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8008b30:	200e      	movs	r0, #14
 8008b32:	f002 ff77 	bl	800ba24 <LoRaMacConfirmQueueIsCmdActive>
 8008b36:	b908      	cbnz	r0, 8008b3c <ProcessMacCommands+0x538>
        switch( payload[macIndex++] )
 8008b38:	464c      	mov	r4, r9
 8008b3a:	e59a      	b.n	8008672 <ProcessMacCommands+0x6e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8008b3c:	210e      	movs	r1, #14
 8008b3e:	2000      	movs	r0, #0
 8008b40:	f002 ff26 	bl	800b990 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8008b44:	1ce3      	adds	r3, r4, #3
 8008b46:	b2db      	uxtb	r3, r3
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8008b48:	1ca2      	adds	r2, r4, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8008b4a:	b2d2      	uxtb	r2, r2
 8008b4c:	f815 c002 	ldrb.w	ip, [r5, r2]
 8008b50:	f815 0009 	ldrb.w	r0, [r5, r9]
                    beaconTimingChannel = payload[macIndex++];
 8008b54:	3404      	adds	r4, #4
 8008b56:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8008b58:	4a15      	ldr	r2, [pc, #84]	; (8008bb0 <ProcessMacCommands+0x5ac>)
 8008b5a:	6812      	ldr	r2, [r2, #0]
 8008b5c:	5ce9      	ldrb	r1, [r5, r3]
 8008b5e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8008b62:	f002 fd4a 	bl	800b5fa <LoRaMacClassBBeaconTimingAns>
 8008b66:	e584      	b.n	8008672 <ProcessMacCommands+0x6e>
                    frequency = ( uint32_t )payload[macIndex++];
 8008b68:	f815 0009 	ldrb.w	r0, [r5, r9]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008b6c:	1ce2      	adds	r2, r4, #3
 8008b6e:	b2d2      	uxtb	r2, r2
                    frequency = ( uint32_t )payload[macIndex++];
 8008b70:	1ca1      	adds	r1, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008b72:	b2c9      	uxtb	r1, r1
 8008b74:	5c69      	ldrb	r1, [r5, r1]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008b76:	3404      	adds	r4, #4
 8008b78:	b2e4      	uxtb	r4, r4
 8008b7a:	5cab      	ldrb	r3, [r5, r2]
 8008b7c:	041b      	lsls	r3, r3, #16
 8008b7e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008b82:	4303      	orrs	r3, r0
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8008b84:	2064      	movs	r0, #100	; 0x64
 8008b86:	fb03 f000 	mul.w	r0, r3, r0
 8008b8a:	f002 fd38 	bl	800b5fe <LoRaMacClassBBeaconFreqReq>
 8008b8e:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8008b92:	2201      	movs	r2, #1
 8008b94:	a90b      	add	r1, sp, #44	; 0x2c
 8008b96:	2013      	movs	r0, #19
 8008b98:	f002 fd46 	bl	800b628 <LoRaMacCommandsAddCmd>
                break;
 8008b9c:	e569      	b.n	8008672 <ProcessMacCommands+0x6e>
}
 8008b9e:	b00f      	add	sp, #60	; 0x3c
 8008ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba4:	200012d0 	.word	0x200012d0
 8008ba8:	0801143c 	.word	0x0801143c
 8008bac:	12d53d80 	.word	0x12d53d80
 8008bb0:	20001f08 	.word	0x20001f08

08008bb4 <HandleRadioRxErrorTimeout>:
{
 8008bb4:	b570      	push	{r4, r5, r6, lr}
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008bba:	4b3a      	ldr	r3, [pc, #232]	; (8008ca4 <HandleRadioRxErrorTimeout+0xf0>)
 8008bbc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d002      	beq.n	8008bca <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 8008bc4:	4b38      	ldr	r3, [pc, #224]	; (8008ca8 <HandleRadioRxErrorTimeout+0xf4>)
 8008bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc8:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008bca:	f002 fd02 	bl	800b5d2 <LoRaMacClassBIsBeaconExpected>
 8008bce:	4606      	mov	r6, r0
 8008bd0:	bb40      	cbnz	r0, 8008c24 <HandleRadioRxErrorTimeout+0x70>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008bd2:	4b34      	ldr	r3, [pc, #208]	; (8008ca4 <HandleRadioRxErrorTimeout+0xf0>)
 8008bd4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d031      	beq.n	8008c40 <HandleRadioRxErrorTimeout+0x8c>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008bdc:	4b33      	ldr	r3, [pc, #204]	; (8008cac <HandleRadioRxErrorTimeout+0xf8>)
 8008bde:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d146      	bne.n	8008c74 <HandleRadioRxErrorTimeout+0xc0>
            if( MacCtx.NodeAckRequested == true )
 8008be6:	4b31      	ldr	r3, [pc, #196]	; (8008cac <HandleRadioRxErrorTimeout+0xf8>)
 8008be8:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8008bec:	b113      	cbz	r3, 8008bf4 <HandleRadioRxErrorTimeout+0x40>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8008bee:	4b2f      	ldr	r3, [pc, #188]	; (8008cac <HandleRadioRxErrorTimeout+0xf8>)
 8008bf0:	f883 5439 	strb.w	r5, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	f002 fef3 	bl	800b9e0 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8008bfa:	4b2a      	ldr	r3, [pc, #168]	; (8008ca4 <HandleRadioRxErrorTimeout+0xf0>)
 8008bfc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008bfe:	f007 fc87 	bl	8010510 <UTIL_TIMER_GetElapsedTime>
 8008c02:	4b2a      	ldr	r3, [pc, #168]	; (8008cac <HandleRadioRxErrorTimeout+0xf8>)
 8008c04:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8008c08:	4298      	cmp	r0, r3
 8008c0a:	d316      	bcc.n	8008c3a <HandleRadioRxErrorTimeout+0x86>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8008c0c:	4c27      	ldr	r4, [pc, #156]	; (8008cac <HandleRadioRxErrorTimeout+0xf8>)
 8008c0e:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8008c12:	f007 fcb9 	bl	8010588 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8008c16:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8008c1a:	f043 0320 	orr.w	r3, r3, #32
 8008c1e:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
 8008c22:	e00a      	b.n	8008c3a <HandleRadioRxErrorTimeout+0x86>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8008c24:	2002      	movs	r0, #2
 8008c26:	f002 fcca 	bl	800b5be <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	f002 fccc 	bl	800b5c8 <LoRaMacClassBBeaconTimerEvent>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008c30:	4b1c      	ldr	r3, [pc, #112]	; (8008ca4 <HandleRadioRxErrorTimeout+0xf0>)
 8008c32:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d002      	beq.n	8008c40 <HandleRadioRxErrorTimeout+0x8c>
    UpdateRxSlotIdleState( );
 8008c3a:	f7ff fc4d 	bl	80084d8 <UpdateRxSlotIdleState>
}
 8008c3e:	bd70      	pop	{r4, r5, r6, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008c40:	f002 fcc9 	bl	800b5d6 <LoRaMacClassBIsPingExpected>
 8008c44:	b928      	cbnz	r0, 8008c52 <HandleRadioRxErrorTimeout+0x9e>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008c46:	f002 fcc8 	bl	800b5da <LoRaMacClassBIsMulticastExpected>
 8008c4a:	b960      	cbnz	r0, 8008c66 <HandleRadioRxErrorTimeout+0xb2>
    if( classBRx == false )
 8008c4c:	2e00      	cmp	r6, #0
 8008c4e:	d1f4      	bne.n	8008c3a <HandleRadioRxErrorTimeout+0x86>
 8008c50:	e7c4      	b.n	8008bdc <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008c52:	2000      	movs	r0, #0
 8008c54:	f002 fcb4 	bl	800b5c0 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008c58:	2000      	movs	r0, #0
 8008c5a:	f002 fcb6 	bl	800b5ca <LoRaMacClassBPingSlotTimerEvent>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008c5e:	f002 fcbc 	bl	800b5da <LoRaMacClassBIsMulticastExpected>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d0e9      	beq.n	8008c3a <HandleRadioRxErrorTimeout+0x86>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008c66:	2000      	movs	r0, #0
 8008c68:	f002 fcab 	bl	800b5c2 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	f002 fcad 	bl	800b5cc <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 8008c72:	e7e2      	b.n	8008c3a <HandleRadioRxErrorTimeout+0x86>
            if( MacCtx.NodeAckRequested == true )
 8008c74:	4b0d      	ldr	r3, [pc, #52]	; (8008cac <HandleRadioRxErrorTimeout+0xf8>)
 8008c76:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8008c7a:	b113      	cbz	r3, 8008c82 <HandleRadioRxErrorTimeout+0xce>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8008c7c:	4b0b      	ldr	r3, [pc, #44]	; (8008cac <HandleRadioRxErrorTimeout+0xf8>)
 8008c7e:	f883 4439 	strb.w	r4, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8008c82:	4620      	mov	r0, r4
 8008c84:	f002 feac 	bl	800b9e0 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008c88:	4b06      	ldr	r3, [pc, #24]	; (8008ca4 <HandleRadioRxErrorTimeout+0xf0>)
 8008c8a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d0d3      	beq.n	8008c3a <HandleRadioRxErrorTimeout+0x86>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8008c92:	4a06      	ldr	r2, [pc, #24]	; (8008cac <HandleRadioRxErrorTimeout+0xf8>)
 8008c94:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8008c98:	f043 0320 	orr.w	r3, r3, #32
 8008c9c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8008ca0:	e7cb      	b.n	8008c3a <HandleRadioRxErrorTimeout+0x86>
 8008ca2:	bf00      	nop
 8008ca4:	200012d0 	.word	0x200012d0
 8008ca8:	08011584 	.word	0x08011584
 8008cac:	200019fc 	.word	0x200019fc

08008cb0 <ScheduleTx>:
{
 8008cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cb2:	b093      	sub	sp, #76	; 0x4c
 8008cb4:	4605      	mov	r5, r0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008cb6:	f002 fc8c 	bl	800b5d2 <LoRaMacClassBIsBeaconExpected>
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	f040 8198 	bne.w	8008ff0 <ScheduleTx+0x340>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008cc0:	4bb7      	ldr	r3, [pc, #732]	; (8008fa0 <ScheduleTx+0x2f0>)
 8008cc2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d016      	beq.n	8008cf8 <ScheduleTx+0x48>
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8008cca:	4bb5      	ldr	r3, [pc, #724]	; (8008fa0 <ScheduleTx+0x2f0>)
 8008ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cce:	b94b      	cbnz	r3, 8008ce4 <ScheduleTx+0x34>
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8008cd0:	4ab3      	ldr	r2, [pc, #716]	; (8008fa0 <ScheduleTx+0x2f0>)
 8008cd2:	f8b2 310a 	ldrh.w	r3, [r2, #266]	; 0x10a
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	49b2      	ldr	r1, [pc, #712]	; (8008fa4 <ScheduleTx+0x2f4>)
 8008cda:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
 8008cde:	fb01 f303 	mul.w	r3, r1, r3
 8008ce2:	6313      	str	r3, [r2, #48]	; 0x30
    switch( MacCtx.TxMsg.Type )
 8008ce4:	4baf      	ldr	r3, [pc, #700]	; (8008fa4 <ScheduleTx+0x2f4>)
 8008ce6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008cea:	b183      	cbz	r3, 8008d0e <ScheduleTx+0x5e>
 8008cec:	2b04      	cmp	r3, #4
 8008cee:	d066      	beq.n	8008dbe <ScheduleTx+0x10e>
 8008cf0:	2403      	movs	r4, #3
}
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	b013      	add	sp, #76	; 0x4c
 8008cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008cf8:	f002 fc6d 	bl	800b5d6 <LoRaMacClassBIsPingExpected>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	f040 8179 	bne.w	8008ff4 <ScheduleTx+0x344>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008d02:	f002 fc6a 	bl	800b5da <LoRaMacClassBIsMulticastExpected>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d0df      	beq.n	8008cca <ScheduleTx+0x1a>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8008d0a:	240f      	movs	r4, #15
    if( status != LORAMAC_STATUS_OK )
 8008d0c:	e7f1      	b.n	8008cf2 <ScheduleTx+0x42>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8008d0e:	48a6      	ldr	r0, [pc, #664]	; (8008fa8 <ScheduleTx+0x2f8>)
 8008d10:	f003 fb08 	bl	800c324 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8008d14:	2800      	cmp	r0, #0
 8008d16:	f040 8169 	bne.w	8008fec <ScheduleTx+0x33c>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8008d1a:	4ba2      	ldr	r3, [pc, #648]	; (8008fa4 <ScheduleTx+0x2f4>)
 8008d1c:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008d20:	801a      	strh	r2, [r3, #0]
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8008d22:	4c9f      	ldr	r4, [pc, #636]	; (8008fa0 <ScheduleTx+0x2f0>)
 8008d24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008d26:	930a      	str	r3, [sp, #40]	; 0x28
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008d28:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8008d2c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8008d30:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
 8008d34:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8008d38:	af10      	add	r7, sp, #64	; 0x40
 8008d3a:	4638      	mov	r0, r7
 8008d3c:	f007 f8ba 	bl	800feb4 <SysTimeGetMcuTime>
 8008d40:	ae02      	add	r6, sp, #8
 8008d42:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8008d4c:	e897 0006 	ldmia.w	r7, {r1, r2}
 8008d50:	4630      	mov	r0, r6
 8008d52:	f007 f845 	bl	800fde0 <SysTimeSub>
 8008d56:	ab0d      	add	r3, sp, #52	; 0x34
 8008d58:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008d5c:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8008d60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d62:	930b      	str	r3, [sp, #44]	; 0x2c
    nextChan.LastTxIsJoinRequest = false;
 8008d64:	2300      	movs	r3, #0
 8008d66:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
    nextChan.Joined = true;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    nextChan.PktLen = MacCtx.PktBufferLen;
 8008d70:	4b8c      	ldr	r3, [pc, #560]	; (8008fa4 <ScheduleTx+0x2f4>)
 8008d72:	881b      	ldrh	r3, [r3, #0]
 8008d74:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008d78:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
 8008d7c:	b92b      	cbnz	r3, 8008d8a <ScheduleTx+0xda>
        nextChan.LastTxIsJoinRequest = true;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        nextChan.Joined = false;
 8008d84:	2300      	movs	r3, #0
 8008d86:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8008d8a:	4a86      	ldr	r2, [pc, #536]	; (8008fa4 <ScheduleTx+0x2f4>)
 8008d8c:	4884      	ldr	r0, [pc, #528]	; (8008fa0 <ScheduleTx+0x2f0>)
 8008d8e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008d92:	9300      	str	r3, [sp, #0]
 8008d94:	f502 6391 	add.w	r3, r2, #1160	; 0x488
 8008d98:	f202 4215 	addw	r2, r2, #1045	; 0x415
 8008d9c:	a90a      	add	r1, sp, #40	; 0x28
 8008d9e:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8008da2:	f003 fc07 	bl	800c5b4 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 8008da6:	4604      	mov	r4, r0
 8008da8:	b320      	cbz	r0, 8008df4 <ScheduleTx+0x144>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8008daa:	280b      	cmp	r0, #11
 8008dac:	d1a1      	bne.n	8008cf2 <ScheduleTx+0x42>
 8008dae:	2d00      	cmp	r5, #0
 8008db0:	d09f      	beq.n	8008cf2 <ScheduleTx+0x42>
            if( MacCtx.DutyCycleWaitTime != 0 )
 8008db2:	4b7c      	ldr	r3, [pc, #496]	; (8008fa4 <ScheduleTx+0x2f4>)
 8008db4:	f8d3 1488 	ldr.w	r1, [r3, #1160]	; 0x488
 8008db8:	b961      	cbnz	r1, 8008dd4 <ScheduleTx+0x124>
            return LORAMAC_STATUS_OK;
 8008dba:	2400      	movs	r4, #0
 8008dbc:	e799      	b.n	8008cf2 <ScheduleTx+0x42>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8008dbe:	487a      	ldr	r0, [pc, #488]	; (8008fa8 <ScheduleTx+0x2f8>)
 8008dc0:	f003 fae6 	bl	800c390 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	f040 8111 	bne.w	8008fec <ScheduleTx+0x33c>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008dca:	4b76      	ldr	r3, [pc, #472]	; (8008fa4 <ScheduleTx+0x2f4>)
 8008dcc:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008dd0:	801a      	strh	r2, [r3, #0]
            break;
 8008dd2:	e7a6      	b.n	8008d22 <ScheduleTx+0x72>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8008dd4:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8008dd8:	f042 0220 	orr.w	r2, r2, #32
 8008ddc:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8008de0:	f503 745a 	add.w	r4, r3, #872	; 0x368
 8008de4:	4620      	mov	r0, r4
 8008de6:	f007 fc75 	bl	80106d4 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8008dea:	4620      	mov	r0, r4
 8008dec:	f007 fc2c 	bl	8010648 <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 8008df0:	2400      	movs	r4, #0
 8008df2:	e77e      	b.n	8008cf2 <ScheduleTx+0x42>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008df4:	4d6a      	ldr	r5, [pc, #424]	; (8008fa0 <ScheduleTx+0x2f0>)
 8008df6:	f895 7040 	ldrb.w	r7, [r5, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8008dfa:	f995 3061 	ldrsb.w	r3, [r5, #97]	; 0x61
 8008dfe:	f995 2039 	ldrsb.w	r2, [r5, #57]	; 0x39
 8008e02:	f895 1075 	ldrb.w	r1, [r5, #117]	; 0x75
 8008e06:	4638      	mov	r0, r7
 8008e08:	f003 fbe9 	bl	800c5de <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008e0c:	4e65      	ldr	r6, [pc, #404]	; (8008fa4 <ScheduleTx+0x2f4>)
 8008e0e:	f506 736e 	add.w	r3, r6, #952	; 0x3b8
 8008e12:	9300      	str	r3, [sp, #0]
 8008e14:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008e16:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 8008e1a:	b241      	sxtb	r1, r0
 8008e1c:	4638      	mov	r0, r7
 8008e1e:	f003 fb65 	bl	800c4ec <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008e22:	f506 7373 	add.w	r3, r6, #972	; 0x3cc
 8008e26:	9300      	str	r3, [sp, #0]
 8008e28:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008e2a:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 8008e2e:	f995 1068 	ldrsb.w	r1, [r5, #104]	; 0x68
 8008e32:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 8008e36:	f003 fb59 	bl	800c4ec <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008e3a:	f8d6 13c4 	ldr.w	r1, [r6, #964]	; 0x3c4
 8008e3e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008e40:	440b      	add	r3, r1
 8008e42:	f8c6 33b0 	str.w	r3, [r6, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008e46:	f8d6 23d8 	ldr.w	r2, [r6, #984]	; 0x3d8
 8008e4a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f8c6 33b4 	str.w	r3, [r6, #948]	; 0x3b4
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008e52:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	f040 80b0 	bne.w	8008fbc <ScheduleTx+0x30c>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008e5c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008e5e:	440b      	add	r3, r1
 8008e60:	f8c6 33b0 	str.w	r3, [r6, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008e64:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8008e66:	441a      	add	r2, r3
 8008e68:	f8c6 23b4 	str.w	r2, [r6, #948]	; 0x3b4
    return SendFrameOnChannel( MacCtx.Channel );
 8008e6c:	4d4d      	ldr	r5, [pc, #308]	; (8008fa4 <ScheduleTx+0x2f4>)
 8008e6e:	f895 7415 	ldrb.w	r7, [r5, #1045]	; 0x415
    int8_t txPower = 0;
 8008e72:	2300      	movs	r3, #0
 8008e74:	f88d 3013 	strb.w	r3, [sp, #19]
    txConfig.Channel = channel;
 8008e78:	f88d 7018 	strb.w	r7, [sp, #24]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008e7c:	4e48      	ldr	r6, [pc, #288]	; (8008fa0 <ScheduleTx+0x2f0>)
 8008e7e:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
 8008e82:	f88d 3019 	strb.w	r3, [sp, #25]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8008e86:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 8008e8a:	f88d 301a 	strb.w	r3, [sp, #26]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8008e8e:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 8008e90:	9307      	str	r3, [sp, #28]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8008e92:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 8008e94:	9308      	str	r3, [sp, #32]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8008e96:	882b      	ldrh	r3, [r5, #0]
 8008e98:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8008e9c:	f505 6383 	add.w	r3, r5, #1048	; 0x418
 8008ea0:	f10d 0213 	add.w	r2, sp, #19
 8008ea4:	a906      	add	r1, sp, #24
 8008ea6:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 8008eaa:	f003 fb36 	bl	800c51a <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	f885 3439 	strb.w	r3, [r5, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008eb4:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
 8008eb8:	f885 343a 	strb.w	r3, [r5, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 8008ebc:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8008ec0:	f885 343b 	strb.w	r3, [r5, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 8008ec4:	f8c5 7448 	str.w	r7, [r5, #1096]	; 0x448
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008ec8:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
 8008ecc:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008ed0:	f8c5 3450 	str.w	r3, [r5, #1104]	; 0x450
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8008ed4:	f002 fb83 	bl	800b5de <LoRaMacClassBIsBeaconModeActive>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d131      	bne.n	8008f40 <ScheduleTx+0x290>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008edc:	4b30      	ldr	r3, [pc, #192]	; (8008fa0 <ScheduleTx+0x2f0>)
 8008ede:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d035      	beq.n	8008f52 <ScheduleTx+0x2a2>
    LoRaMacClassBHaltBeaconing( );
 8008ee6:	f002 fb7d 	bl	800b5e4 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8008eea:	4b2d      	ldr	r3, [pc, #180]	; (8008fa0 <ScheduleTx+0x2f0>)
 8008eec:	f993 6039 	ldrsb.w	r6, [r3, #57]	; 0x39
 8008ef0:	4b2c      	ldr	r3, [pc, #176]	; (8008fa4 <ScheduleTx+0x2f4>)
 8008ef2:	f893 5415 	ldrb.w	r5, [r3, #1045]	; 0x415
    uint32_t fCntUp = 0;
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	9205      	str	r2, [sp, #20]
    switch( MacCtx.TxMsg.Type )
 8008efa:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008efe:	b35b      	cbz	r3, 8008f58 <ScheduleTx+0x2a8>
 8008f00:	2b04      	cmp	r3, #4
 8008f02:	d157      	bne.n	8008fb4 <ScheduleTx+0x304>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8008f04:	a805      	add	r0, sp, #20
 8008f06:	f002 ff21 	bl	800bd4c <LoRaMacCryptoGetFCntUp>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	d146      	bne.n	8008f9c <ScheduleTx+0x2ec>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8008f0e:	4b25      	ldr	r3, [pc, #148]	; (8008fa4 <ScheduleTx+0x2f4>)
 8008f10:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8008f14:	b923      	cbnz	r3, 8008f20 <ScheduleTx+0x270>
 8008f16:	4b23      	ldr	r3, [pc, #140]	; (8008fa4 <ScheduleTx+0x2f4>)
 8008f18:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d902      	bls.n	8008f26 <ScheduleTx+0x276>
                fCntUp -= 1;
 8008f20:	9b05      	ldr	r3, [sp, #20]
 8008f22:	3b01      	subs	r3, #1
 8008f24:	9305      	str	r3, [sp, #20]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8008f26:	4b20      	ldr	r3, [pc, #128]	; (8008fa8 <ScheduleTx+0x2f8>)
 8008f28:	462a      	mov	r2, r5
 8008f2a:	b2f1      	uxtb	r1, r6
 8008f2c:	9805      	ldr	r0, [sp, #20]
 8008f2e:	f002 ff89 	bl	800be44 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8008f32:	2800      	cmp	r0, #0
 8008f34:	d13c      	bne.n	8008fb0 <ScheduleTx+0x300>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008f36:	4b1b      	ldr	r3, [pc, #108]	; (8008fa4 <ScheduleTx+0x2f4>)
 8008f38:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008f3c:	801a      	strh	r2, [r3, #0]
            break;
 8008f3e:	e013      	b.n	8008f68 <ScheduleTx+0x2b8>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8008f40:	4b18      	ldr	r3, [pc, #96]	; (8008fa4 <ScheduleTx+0x2f4>)
 8008f42:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
 8008f46:	f002 fb5c 	bl	800b602 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d0c6      	beq.n	8008edc <ScheduleTx+0x22c>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8008f4e:	2410      	movs	r4, #16
    return SendFrameOnChannel( MacCtx.Channel );
 8008f50:	e6cf      	b.n	8008cf2 <ScheduleTx+0x42>
        LoRaMacClassBStopRxSlots( );
 8008f52:	f002 fb58 	bl	800b606 <LoRaMacClassBStopRxSlots>
 8008f56:	e7c6      	b.n	8008ee6 <ScheduleTx+0x236>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8008f58:	4813      	ldr	r0, [pc, #76]	; (8008fa8 <ScheduleTx+0x2f8>)
 8008f5a:	f002 ff47 	bl	800bdec <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8008f5e:	b9d8      	cbnz	r0, 8008f98 <ScheduleTx+0x2e8>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8008f60:	4b10      	ldr	r3, [pc, #64]	; (8008fa4 <ScheduleTx+0x2f4>)
 8008f62:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008f66:	801a      	strh	r2, [r3, #0]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008f68:	4b0e      	ldr	r3, [pc, #56]	; (8008fa4 <ScheduleTx+0x2f4>)
 8008f6a:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8008f6e:	f042 0202 	orr.w	r2, r2, #2
 8008f72:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 8008f76:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8008f7a:	b92b      	cbnz	r3, 8008f88 <ScheduleTx+0x2d8>
        MacCtx.ChannelsNbTransCounter++;
 8008f7c:	4a09      	ldr	r2, [pc, #36]	; (8008fa4 <ScheduleTx+0x2f4>)
 8008f7e:	f892 3410 	ldrb.w	r3, [r2, #1040]	; 0x410
 8008f82:	3301      	adds	r3, #1
 8008f84:	f882 3410 	strb.w	r3, [r2, #1040]	; 0x410
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8008f88:	4806      	ldr	r0, [pc, #24]	; (8008fa4 <ScheduleTx+0x2f4>)
 8008f8a:	f830 1b02 	ldrh.w	r1, [r0], #2
 8008f8e:	4b07      	ldr	r3, [pc, #28]	; (8008fac <ScheduleTx+0x2fc>)
 8008f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f92:	b2c9      	uxtb	r1, r1
 8008f94:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 8008f96:	e6ac      	b.n	8008cf2 <ScheduleTx+0x42>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008f98:	2411      	movs	r4, #17
 8008f9a:	e6aa      	b.n	8008cf2 <ScheduleTx+0x42>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8008f9c:	2412      	movs	r4, #18
 8008f9e:	e6a8      	b.n	8008cf2 <ScheduleTx+0x42>
 8008fa0:	200012d0 	.word	0x200012d0
 8008fa4:	200019fc 	.word	0x200019fc
 8008fa8:	20001b04 	.word	0x20001b04
 8008fac:	08011584 	.word	0x08011584
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008fb0:	2411      	movs	r4, #17
    if( status != LORAMAC_STATUS_OK )
 8008fb2:	e69e      	b.n	8008cf2 <ScheduleTx+0x42>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8008fb4:	2403      	movs	r4, #3
 8008fb6:	e69c      	b.n	8008cf2 <ScheduleTx+0x42>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008fb8:	2413      	movs	r4, #19
    if( status != LORAMAC_STATUS_OK )
 8008fba:	e69a      	b.n	8008cf2 <ScheduleTx+0x42>
    size_t macCmdsSize = 0;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	9306      	str	r3, [sp, #24]
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008fc0:	a806      	add	r0, sp, #24
 8008fc2:	f002 fbf3 	bl	800b7ac <LoRaMacCommandsGetSizeSerializedCmds>
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	d1f6      	bne.n	8008fb8 <ScheduleTx+0x308>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8008fca:	4b0b      	ldr	r3, [pc, #44]	; (8008ff8 <ScheduleTx+0x348>)
 8008fcc:	f893 5237 	ldrb.w	r5, [r3, #567]	; 0x237
 8008fd0:	f89d 6018 	ldrb.w	r6, [sp, #24]
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8008fd4:	4b09      	ldr	r3, [pc, #36]	; (8008ffc <ScheduleTx+0x34c>)
 8008fd6:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 8008fda:	f7ff fab3 	bl	8008544 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8008fde:	b280      	uxth	r0, r0
 8008fe0:	4435      	add	r5, r6
 8008fe2:	42a8      	cmp	r0, r5
 8008fe4:	f4bf af42 	bcs.w	8008e6c <ScheduleTx+0x1bc>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8008fe8:	2408      	movs	r4, #8
 8008fea:	e682      	b.n	8008cf2 <ScheduleTx+0x42>
            return LORAMAC_STATUS_OK;
 8008fec:	2411      	movs	r4, #17
 8008fee:	e680      	b.n	8008cf2 <ScheduleTx+0x42>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8008ff0:	240e      	movs	r4, #14
 8008ff2:	e67e      	b.n	8008cf2 <ScheduleTx+0x42>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8008ff4:	240f      	movs	r4, #15
 8008ff6:	e67c      	b.n	8008cf2 <ScheduleTx+0x42>
 8008ff8:	200019fc 	.word	0x200019fc
 8008ffc:	200012d0 	.word	0x200012d0

08009000 <OnTxDelayedTimerEvent>:
{
 8009000:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8009002:	4c11      	ldr	r4, [pc, #68]	; (8009048 <OnTxDelayedTimerEvent+0x48>)
 8009004:	f504 705a 	add.w	r0, r4, #872	; 0x368
 8009008:	f007 fabe 	bl	8010588 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800900c:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8009010:	f023 0320 	bic.w	r3, r3, #32
 8009014:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    switch( ScheduleTx( true ) )
 8009018:	2001      	movs	r0, #1
 800901a:	f7ff fe49 	bl	8008cb0 <ScheduleTx>
 800901e:	b108      	cbz	r0, 8009024 <OnTxDelayedTimerEvent+0x24>
 8009020:	280b      	cmp	r0, #11
 8009022:	d100      	bne.n	8009026 <OnTxDelayedTimerEvent+0x26>
}
 8009024:	bd10      	pop	{r4, pc}
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009026:	4a09      	ldr	r2, [pc, #36]	; (800904c <OnTxDelayedTimerEvent+0x4c>)
 8009028:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 800902c:	f884 243a 	strb.w	r2, [r4, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8009030:	f894 2412 	ldrb.w	r2, [r4, #1042]	; 0x412
 8009034:	f884 243d 	strb.w	r2, [r4, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009038:	2009      	movs	r0, #9
 800903a:	f884 0439 	strb.w	r0, [r4, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800903e:	f002 fccf 	bl	800b9e0 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8009042:	f7ff fa57 	bl	80084f4 <StopRetransmission>
}
 8009046:	e7ed      	b.n	8009024 <OnTxDelayedTimerEvent+0x24>
 8009048:	200019fc 	.word	0x200019fc
 800904c:	200012d0 	.word	0x200012d0

08009050 <OpenContinuousRxCWindow>:
{
 8009050:	b570      	push	{r4, r5, r6, lr}
 8009052:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8009054:	4c14      	ldr	r4, [pc, #80]	; (80090a8 <OpenContinuousRxCWindow+0x58>)
 8009056:	4d15      	ldr	r5, [pc, #84]	; (80090ac <OpenContinuousRxCWindow+0x5c>)
 8009058:	f505 7678 	add.w	r6, r5, #992	; 0x3e0
 800905c:	9600      	str	r6, [sp, #0]
 800905e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009060:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8009064:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 8009068:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800906c:	f003 fa3e 	bl	800c4ec <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009070:	2302      	movs	r3, #2
 8009072:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009076:	2301      	movs	r3, #1
 8009078:	f885 33f2 	strb.w	r3, [r5, #1010]	; 0x3f2
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800907c:	f505 6284 	add.w	r2, r5, #1056	; 0x420
 8009080:	4631      	mov	r1, r6
 8009082:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009086:	f003 fa3d 	bl	800c504 <RegionRxConfig>
 800908a:	b158      	cbz	r0, 80090a4 <OpenContinuousRxCWindow+0x54>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800908c:	f895 3420 	ldrb.w	r3, [r5, #1056]	; 0x420
 8009090:	f885 3462 	strb.w	r3, [r5, #1122]	; 0x462
        Radio.Rx( 0 ); // Continuous mode
 8009094:	4b06      	ldr	r3, [pc, #24]	; (80090b0 <OpenContinuousRxCWindow+0x60>)
 8009096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009098:	2000      	movs	r0, #0
 800909a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800909c:	f895 33f3 	ldrb.w	r3, [r5, #1011]	; 0x3f3
 80090a0:	f885 3484 	strb.w	r3, [r5, #1156]	; 0x484
}
 80090a4:	b002      	add	sp, #8
 80090a6:	bd70      	pop	{r4, r5, r6, pc}
 80090a8:	200012d0 	.word	0x200012d0
 80090ac:	200019fc 	.word	0x200019fc
 80090b0:	08011584 	.word	0x08011584

080090b4 <RxWindowSetup>:
{
 80090b4:	b538      	push	{r3, r4, r5, lr}
 80090b6:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 80090b8:	f007 fa66 	bl	8010588 <UTIL_TIMER_Stop>
    Radio.Standby( );
 80090bc:	4b0c      	ldr	r3, [pc, #48]	; (80090f0 <RxWindowSetup+0x3c>)
 80090be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c0:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80090c2:	4a0c      	ldr	r2, [pc, #48]	; (80090f4 <RxWindowSetup+0x40>)
 80090c4:	4621      	mov	r1, r4
 80090c6:	4b0c      	ldr	r3, [pc, #48]	; (80090f8 <RxWindowSetup+0x44>)
 80090c8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80090cc:	f003 fa1a 	bl	800c504 <RegionRxConfig>
 80090d0:	b160      	cbz	r0, 80090ec <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80090d2:	4d0a      	ldr	r5, [pc, #40]	; (80090fc <RxWindowSetup+0x48>)
 80090d4:	f895 3420 	ldrb.w	r3, [r5, #1056]	; 0x420
 80090d8:	f885 3462 	strb.w	r3, [r5, #1122]	; 0x462
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80090dc:	4b04      	ldr	r3, [pc, #16]	; (80090f0 <RxWindowSetup+0x3c>)
 80090de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e0:	4a05      	ldr	r2, [pc, #20]	; (80090f8 <RxWindowSetup+0x44>)
 80090e2:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 80090e4:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80090e6:	7ce3      	ldrb	r3, [r4, #19]
 80090e8:	f885 3484 	strb.w	r3, [r5, #1156]	; 0x484
}
 80090ec:	bd38      	pop	{r3, r4, r5, pc}
 80090ee:	bf00      	nop
 80090f0:	08011584 	.word	0x08011584
 80090f4:	20001e1c 	.word	0x20001e1c
 80090f8:	200012d0 	.word	0x200012d0
 80090fc:	200019fc 	.word	0x200019fc

08009100 <OnRxWindow2TimerEvent>:
{
 8009100:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009102:	4b11      	ldr	r3, [pc, #68]	; (8009148 <OnRxWindow2TimerEvent+0x48>)
 8009104:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8009108:	b903      	cbnz	r3, 800910c <OnRxWindow2TimerEvent+0xc>
}
 800910a:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800910c:	480e      	ldr	r0, [pc, #56]	; (8009148 <OnRxWindow2TimerEvent+0x48>)
 800910e:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 8009112:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8009116:	4b0d      	ldr	r3, [pc, #52]	; (800914c <OnRxWindow2TimerEvent+0x4c>)
 8009118:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800911a:	f8c0 23d0 	str.w	r2, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800911e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8009122:	f880 23dc 	strb.w	r2, [r0, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009126:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800912a:	f880 33dd 	strb.w	r3, [r0, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800912e:	2300      	movs	r3, #0
 8009130:	f880 33de 	strb.w	r3, [r0, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8009134:	2301      	movs	r3, #1
 8009136:	f880 33df 	strb.w	r3, [r0, #991]	; 0x3df
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800913a:	f500 7173 	add.w	r1, r0, #972	; 0x3cc
 800913e:	f500 7066 	add.w	r0, r0, #920	; 0x398
 8009142:	f7ff ffb7 	bl	80090b4 <RxWindowSetup>
 8009146:	e7e0      	b.n	800910a <OnRxWindow2TimerEvent+0xa>
 8009148:	200019fc 	.word	0x200019fc
 800914c:	200012d0 	.word	0x200012d0

08009150 <OnRxWindow1TimerEvent>:
{
 8009150:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8009152:	480f      	ldr	r0, [pc, #60]	; (8009190 <OnRxWindow1TimerEvent+0x40>)
 8009154:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 8009158:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800915c:	4b0d      	ldr	r3, [pc, #52]	; (8009194 <OnRxWindow1TimerEvent+0x44>)
 800915e:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 8009162:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009166:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800916a:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800916e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009172:	f880 33c9 	strb.w	r3, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8009176:	2300      	movs	r3, #0
 8009178:	f880 33ca 	strb.w	r3, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800917c:	f880 33cb 	strb.w	r3, [r0, #971]	; 0x3cb
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8009180:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 8009184:	f500 7060 	add.w	r0, r0, #896	; 0x380
 8009188:	f7ff ff94 	bl	80090b4 <RxWindowSetup>
}
 800918c:	bd08      	pop	{r3, pc}
 800918e:	bf00      	nop
 8009190:	200019fc 	.word	0x200019fc
 8009194:	200012d0 	.word	0x200012d0

08009198 <LoRaMacHandleNvm>:
{
 8009198:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800919a:	4b33      	ldr	r3, [pc, #204]	; (8009268 <LoRaMacHandleNvm+0xd0>)
 800919c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80091a0:	b103      	cbz	r3, 80091a4 <LoRaMacHandleNvm+0xc>
}
 80091a2:	bd38      	pop	{r3, r4, r5, pc}
 80091a4:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 80091a6:	2124      	movs	r1, #36	; 0x24
 80091a8:	f004 fc8c 	bl	800dac4 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 80091ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091ae:	4283      	cmp	r3, r0
        nvmData->Crypto.Crc32 = crc;
 80091b0:	bf1a      	itte	ne
 80091b2:	6260      	strne	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 80091b4:	2501      	movne	r5, #1
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 80091b6:	2500      	moveq	r5, #0
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 80091b8:	2114      	movs	r1, #20
 80091ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80091be:	f004 fc81 	bl	800dac4 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 80091c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80091c4:	4283      	cmp	r3, r0
        nvmData->MacGroup1.Crc32 = crc;
 80091c6:	bf1c      	itt	ne
 80091c8:	63e0      	strne	r0, [r4, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 80091ca:	f045 0502 	orrne.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 80091ce:	21dc      	movs	r1, #220	; 0xdc
 80091d0:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80091d4:	f004 fc76 	bl	800dac4 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 80091d8:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 80091dc:	4283      	cmp	r3, r0
        nvmData->MacGroup2.Crc32 = crc;
 80091de:	bf1c      	itt	ne
 80091e0:	f8c4 011c 	strne.w	r0, [r4, #284]	; 0x11c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 80091e4:	f045 0504 	orrne.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 80091e8:	21bc      	movs	r1, #188	; 0xbc
 80091ea:	f504 7090 	add.w	r0, r4, #288	; 0x120
 80091ee:	f004 fc69 	bl	800dac4 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 80091f2:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 80091f6:	4283      	cmp	r3, r0
        nvmData->SecureElement.Crc32 = crc;
 80091f8:	bf1c      	itt	ne
 80091fa:	f8c4 01dc 	strne.w	r0, [r4, #476]	; 0x1dc
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 80091fe:	f045 0508 	orrne.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8009202:	2190      	movs	r1, #144	; 0x90
 8009204:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
 8009208:	f004 fc5c 	bl	800dac4 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800920c:	f8d4 3270 	ldr.w	r3, [r4, #624]	; 0x270
 8009210:	4283      	cmp	r3, r0
        nvmData->RegionGroup1.Crc32 = crc;
 8009212:	bf1c      	itt	ne
 8009214:	f8c4 0270 	strne.w	r0, [r4, #624]	; 0x270
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8009218:	f045 0510 	orrne.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800921c:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8009220:	f504 701d 	add.w	r0, r4, #628	; 0x274
 8009224:	f004 fc4e 	bl	800dac4 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 8009228:	f8d4 370c 	ldr.w	r3, [r4, #1804]	; 0x70c
 800922c:	4283      	cmp	r3, r0
        nvmData->RegionGroup2.Crc32 = crc;
 800922e:	bf1c      	itt	ne
 8009230:	f8c4 070c 	strne.w	r0, [r4, #1804]	; 0x70c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8009234:	f045 0520 	orrne.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8009238:	2114      	movs	r1, #20
 800923a:	f504 60e2 	add.w	r0, r4, #1808	; 0x710
 800923e:	f004 fc41 	bl	800dac4 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 8009242:	f8d4 3724 	ldr.w	r3, [r4, #1828]	; 0x724
 8009246:	4283      	cmp	r3, r0
        nvmData->ClassB.Crc32 = crc;
 8009248:	bf1c      	itt	ne
 800924a:	f8c4 0724 	strne.w	r0, [r4, #1828]	; 0x724
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800924e:	f045 0540 	orrne.w	r5, r5, #64	; 0x40

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8009252:	4b05      	ldr	r3, [pc, #20]	; (8009268 <LoRaMacHandleNvm+0xd0>)
 8009254:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009258:	2b00      	cmp	r3, #0
 800925a:	d0a2      	beq.n	80091a2 <LoRaMacHandleNvm+0xa>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800925c:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800925e:	2b00      	cmp	r3, #0
 8009260:	d09f      	beq.n	80091a2 <LoRaMacHandleNvm+0xa>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8009262:	4628      	mov	r0, r5
 8009264:	4798      	blx	r3
 8009266:	e79c      	b.n	80091a2 <LoRaMacHandleNvm+0xa>
 8009268:	200019fc 	.word	0x200019fc

0800926c <OnRadioRxTimeout>:
{
 800926c:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800926e:	4a09      	ldr	r2, [pc, #36]	; (8009294 <OnRadioRxTimeout+0x28>)
 8009270:	7813      	ldrb	r3, [r2, #0]
 8009272:	f043 0301 	orr.w	r3, r3, #1
 8009276:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009278:	4b07      	ldr	r3, [pc, #28]	; (8009298 <OnRadioRxTimeout+0x2c>)
 800927a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800927e:	b113      	cbz	r3, 8009286 <OnRadioRxTimeout+0x1a>
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	b103      	cbz	r3, 8009286 <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009284:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8009286:	4b05      	ldr	r3, [pc, #20]	; (800929c <OnRadioRxTimeout+0x30>)
 8009288:	2201      	movs	r2, #1
 800928a:	2100      	movs	r1, #0
 800928c:	2002      	movs	r0, #2
 800928e:	f007 fb51 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
}
 8009292:	bd08      	pop	{r3, pc}
 8009294:	200019f8 	.word	0x200019f8
 8009298:	200019fc 	.word	0x200019fc
 800929c:	080113fc 	.word	0x080113fc

080092a0 <OnRadioTxTimeout>:
{
 80092a0:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 80092a2:	4a09      	ldr	r2, [pc, #36]	; (80092c8 <OnRadioTxTimeout+0x28>)
 80092a4:	7813      	ldrb	r3, [r2, #0]
 80092a6:	f043 0304 	orr.w	r3, r3, #4
 80092aa:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80092ac:	4b07      	ldr	r3, [pc, #28]	; (80092cc <OnRadioTxTimeout+0x2c>)
 80092ae:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80092b2:	b113      	cbz	r3, 80092ba <OnRadioTxTimeout+0x1a>
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	b103      	cbz	r3, 80092ba <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80092b8:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 80092ba:	4b05      	ldr	r3, [pc, #20]	; (80092d0 <OnRadioTxTimeout+0x30>)
 80092bc:	2201      	movs	r2, #1
 80092be:	2100      	movs	r1, #0
 80092c0:	2002      	movs	r0, #2
 80092c2:	f007 fb37 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
}
 80092c6:	bd08      	pop	{r3, pc}
 80092c8:	200019f8 	.word	0x200019f8
 80092cc:	200019fc 	.word	0x200019fc
 80092d0:	0801140c 	.word	0x0801140c

080092d4 <OnRadioRxDone>:
{
 80092d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092d8:	4680      	mov	r8, r0
 80092da:	460f      	mov	r7, r1
 80092dc:	4616      	mov	r6, r2
 80092de:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80092e0:	f007 f90c 	bl	80104fc <UTIL_TIMER_GetCurrentTime>
 80092e4:	4c0d      	ldr	r4, [pc, #52]	; (800931c <OnRadioRxDone+0x48>)
 80092e6:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 80092e8:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 80092ec:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 80092ee:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 80092f0:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 80092f2:	4a0b      	ldr	r2, [pc, #44]	; (8009320 <OnRadioRxDone+0x4c>)
 80092f4:	7813      	ldrb	r3, [r2, #0]
 80092f6:	f043 0308 	orr.w	r3, r3, #8
 80092fa:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80092fc:	4b09      	ldr	r3, [pc, #36]	; (8009324 <OnRadioRxDone+0x50>)
 80092fe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009302:	b113      	cbz	r3, 800930a <OnRadioRxDone+0x36>
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	b103      	cbz	r3, 800930a <OnRadioRxDone+0x36>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009308:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800930a:	4b07      	ldr	r3, [pc, #28]	; (8009328 <OnRadioRxDone+0x54>)
 800930c:	2201      	movs	r2, #1
 800930e:	2100      	movs	r1, #0
 8009310:	2002      	movs	r0, #2
 8009312:	f007 fb0f 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
}
 8009316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800931a:	bf00      	nop
 800931c:	20001f08 	.word	0x20001f08
 8009320:	200019f8 	.word	0x200019f8
 8009324:	200019fc 	.word	0x200019fc
 8009328:	0801141c 	.word	0x0801141c

0800932c <OnRadioTxDone>:
{
 800932c:	b530      	push	{r4, r5, lr}
 800932e:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8009330:	f007 f8e4 	bl	80104fc <UTIL_TIMER_GetCurrentTime>
 8009334:	4b0f      	ldr	r3, [pc, #60]	; (8009374 <OnRadioTxDone+0x48>)
 8009336:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8009338:	4d0f      	ldr	r5, [pc, #60]	; (8009378 <OnRadioTxDone+0x4c>)
 800933a:	466c      	mov	r4, sp
 800933c:	4620      	mov	r0, r4
 800933e:	f006 fd93 	bl	800fe68 <SysTimeGet>
 8009342:	f505 734e 	add.w	r3, r5, #824	; 0x338
 8009346:	e894 0003 	ldmia.w	r4, {r0, r1}
 800934a:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800934e:	4a0b      	ldr	r2, [pc, #44]	; (800937c <OnRadioTxDone+0x50>)
 8009350:	7813      	ldrb	r3, [r2, #0]
 8009352:	f043 0310 	orr.w	r3, r3, #16
 8009356:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009358:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800935c:	b113      	cbz	r3, 8009364 <OnRadioTxDone+0x38>
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	b103      	cbz	r3, 8009364 <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009362:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8009364:	4b06      	ldr	r3, [pc, #24]	; (8009380 <OnRadioTxDone+0x54>)
 8009366:	2201      	movs	r2, #1
 8009368:	2100      	movs	r1, #0
 800936a:	2002      	movs	r0, #2
 800936c:	f007 fae2 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
}
 8009370:	b003      	add	sp, #12
 8009372:	bd30      	pop	{r4, r5, pc}
 8009374:	20001f18 	.word	0x20001f18
 8009378:	200019fc 	.word	0x200019fc
 800937c:	200019f8 	.word	0x200019f8
 8009380:	0801142c 	.word	0x0801142c

08009384 <ResetMacParameters>:
{
 8009384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009386:	b08f      	sub	sp, #60	; 0x3c
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8009388:	4c4d      	ldr	r4, [pc, #308]	; (80094c0 <ResetMacParameters+0x13c>)
 800938a:	2600      	movs	r6, #0
 800938c:	f884 6118 	strb.w	r6, [r4, #280]	; 0x118
    Nvm.MacGroup1.AdrAckCounter = 0;
 8009390:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 8009392:	4d4c      	ldr	r5, [pc, #304]	; (80094c4 <ResetMacParameters+0x140>)
 8009394:	f885 6410 	strb.w	r6, [r5, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 8009398:	2701      	movs	r7, #1
 800939a:	f885 7411 	strb.w	r7, [r5, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 800939e:	f885 7412 	strb.w	r7, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 80093a2:	f885 6413 	strb.w	r6, [r5, #1043]	; 0x413
    Nvm.MacGroup2.MaxDCycle = 0;
 80093a6:	f884 6107 	strb.w	r6, [r4, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80093aa:	f8a4 710a 	strh.w	r7, [r4, #266]	; 0x10a
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80093ae:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
 80093b2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80093b6:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
 80093ba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80093be:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 80093c2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80093c6:	f104 0364 	add.w	r3, r4, #100	; 0x64
 80093ca:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 80093ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80093d2:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80093d6:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 80093da:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 80093de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80093e2:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80093e6:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 80093ea:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 80093ee:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 80093f2:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80093f6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80093fa:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80093fc:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8009400:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.NodeAckRequested = false;
 8009402:	f885 6414 	strb.w	r6, [r5, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 8009406:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800940a:	f88d 700c 	strb.w	r7, [sp, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800940e:	f504 73f0 	add.w	r3, r4, #480	; 0x1e0
 8009412:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8009414:	f504 731d 	add.w	r3, r4, #628	; 0x274
 8009418:	9302      	str	r3, [sp, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800941a:	a901      	add	r1, sp, #4
 800941c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009420:	f003 f840 	bl	800c4a4 <RegionInitDefaults>
    MacCtx.Channel = 0;
 8009424:	f885 6415 	strb.w	r6, [r5, #1045]	; 0x415
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009428:	f885 63cc 	strb.w	r6, [r5, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800942c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800942e:	f8c5 33d0 	str.w	r3, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009432:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8009436:	f885 33dc 	strb.w	r3, [r5, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800943a:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800943e:	f885 33dd 	strb.w	r3, [r5, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009442:	f885 63de 	strb.w	r6, [r5, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8009446:	f885 73df 	strb.w	r7, [r5, #991]	; 0x3df
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800944a:	f505 7478 	add.w	r4, r5, #992	; 0x3e0
 800944e:	f505 7c73 	add.w	ip, r5, #972	; 0x3cc
 8009452:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009458:	f8dc 3000 	ldr.w	r3, [ip]
 800945c:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800945e:	f885 73f2 	strb.w	r7, [r5, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009462:	2302      	movs	r3, #2
 8009464:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    classBCallbacks.GetTemperatureLevel = NULL;
 8009468:	960c      	str	r6, [sp, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800946a:	960d      	str	r6, [sp, #52]	; 0x34
    if( MacCtx.MacCallbacks != NULL )
 800946c:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 8009470:	b11b      	cbz	r3, 800947a <ResetMacParameters+0xf6>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8009472:	685a      	ldr	r2, [r3, #4]
 8009474:	920c      	str	r2, [sp, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800947a:	4b12      	ldr	r3, [pc, #72]	; (80094c4 <ResetMacParameters+0x140>)
 800947c:	f503 628c 	add.w	r2, r3, #1120	; 0x460
 8009480:	9204      	str	r2, [sp, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8009482:	f203 421c 	addw	r2, r3, #1052	; 0x41c
 8009486:	9205      	str	r2, [sp, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8009488:	f203 424c 	addw	r2, r3, #1100	; 0x44c
 800948c:	9206      	str	r2, [sp, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800948e:	f203 4385 	addw	r3, r3, #1157	; 0x485
 8009492:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8009494:	4a0a      	ldr	r2, [pc, #40]	; (80094c0 <ResetMacParameters+0x13c>)
 8009496:	f102 03d4 	add.w	r3, r2, #212	; 0xd4
 800949a:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800949c:	f102 0340 	add.w	r3, r2, #64	; 0x40
 80094a0:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80094a2:	f102 0344 	add.w	r3, r2, #68	; 0x44
 80094a6:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80094a8:	f102 03d8 	add.w	r3, r2, #216	; 0xd8
 80094ac:	930b      	str	r3, [sp, #44]	; 0x2c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80094ae:	f502 62e2 	add.w	r2, r2, #1808	; 0x710
 80094b2:	a90c      	add	r1, sp, #48	; 0x30
 80094b4:	a804      	add	r0, sp, #16
 80094b6:	f002 f881 	bl	800b5bc <LoRaMacClassBInit>
}
 80094ba:	b00f      	add	sp, #60	; 0x3c
 80094bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094be:	bf00      	nop
 80094c0:	200012d0 	.word	0x200012d0
 80094c4:	200019fc 	.word	0x200019fc

080094c8 <SwitchClass>:
{
 80094c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ca:	4605      	mov	r5, r0
    switch( Nvm.MacGroup2.DeviceClass )
 80094cc:	4b3a      	ldr	r3, [pc, #232]	; (80095b8 <SwitchClass+0xf0>)
 80094ce:	f893 4104 	ldrb.w	r4, [r3, #260]	; 0x104
 80094d2:	2c01      	cmp	r4, #1
 80094d4:	d059      	beq.n	800958a <SwitchClass+0xc2>
 80094d6:	2c02      	cmp	r4, #2
 80094d8:	d060      	beq.n	800959c <SwitchClass+0xd4>
 80094da:	b114      	cbz	r4, 80094e2 <SwitchClass+0x1a>
 80094dc:	2403      	movs	r4, #3
}
 80094de:	4620      	mov	r0, r4
 80094e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_A )
 80094e2:	b940      	cbnz	r0, 80094f6 <SwitchClass+0x2e>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80094e4:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80094e8:	3364      	adds	r3, #100	; 0x64
 80094ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80094ee:	e882 0003 	stmia.w	r2, {r0, r1}
 80094f2:	2403      	movs	r4, #3
 80094f4:	e7f3      	b.n	80094de <SwitchClass+0x16>
            if( deviceClass == CLASS_B )
 80094f6:	2801      	cmp	r0, #1
 80094f8:	d020      	beq.n	800953c <SwitchClass+0x74>
            if( deviceClass == CLASS_C )
 80094fa:	2802      	cmp	r0, #2
 80094fc:	d158      	bne.n	80095b0 <SwitchClass+0xe8>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80094fe:	4f2e      	ldr	r7, [pc, #184]	; (80095b8 <SwitchClass+0xf0>)
 8009500:	f04f 0e02 	mov.w	lr, #2
 8009504:	f887 e104 	strb.w	lr, [r7, #260]	; 0x104
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8009508:	4e2c      	ldr	r6, [pc, #176]	; (80095bc <SwitchClass+0xf4>)
 800950a:	f506 7578 	add.w	r5, r6, #992	; 0x3e0
 800950e:	f506 7c73 	add.w	ip, r6, #972	; 0x3cc
 8009512:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009516:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009518:	f8dc 3000 	ldr.w	r3, [ip]
 800951c:	602b      	str	r3, [r5, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800951e:	f886 e3f3 	strb.w	lr, [r6, #1011]	; 0x3f3
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8009522:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8009526:	b9a3      	cbnz	r3, 8009552 <SwitchClass+0x8a>
                MacCtx.NodeAckRequested = false;
 8009528:	4b24      	ldr	r3, [pc, #144]	; (80095bc <SwitchClass+0xf4>)
 800952a:	2200      	movs	r2, #0
 800952c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                Radio.Sleep( );
 8009530:	4b23      	ldr	r3, [pc, #140]	; (80095c0 <SwitchClass+0xf8>)
 8009532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009534:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8009536:	f7ff fd8b 	bl	8009050 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800953a:	e7d0      	b.n	80094de <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800953c:	2001      	movs	r0, #1
 800953e:	f002 f853 	bl	800b5e8 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 8009542:	4604      	mov	r4, r0
 8009544:	2800      	cmp	r0, #0
 8009546:	d1ca      	bne.n	80094de <SwitchClass+0x16>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8009548:	4b1b      	ldr	r3, [pc, #108]	; (80095b8 <SwitchClass+0xf0>)
 800954a:	2201      	movs	r2, #1
 800954c:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 8009550:	e7c5      	b.n	80094de <SwitchClass+0x16>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8009552:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8009556:	66f9      	str	r1, [r7, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8009558:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 800955c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009560:	f896 0415 	ldrb.w	r0, [r6, #1045]	; 0x415
 8009564:	f886 03e0 	strb.w	r0, [r6, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009568:	f8c6 13e4 	str.w	r1, [r6, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800956c:	f897 1075 	ldrb.w	r1, [r7, #117]	; 0x75
 8009570:	f886 13f0 	strb.w	r1, [r6, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009574:	f897 2080 	ldrb.w	r2, [r7, #128]	; 0x80
 8009578:	f886 23f1 	strb.w	r2, [r6, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800957c:	2203      	movs	r2, #3
 800957e:	f886 23f3 	strb.w	r2, [r6, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8009582:	2201      	movs	r2, #1
 8009584:	f886 23f2 	strb.w	r2, [r6, #1010]	; 0x3f2
                        break;
 8009588:	e7ce      	b.n	8009528 <SwitchClass+0x60>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800958a:	f002 f82d 	bl	800b5e8 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800958e:	4604      	mov	r4, r0
 8009590:	2800      	cmp	r0, #0
 8009592:	d1a4      	bne.n	80094de <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009594:	4b08      	ldr	r3, [pc, #32]	; (80095b8 <SwitchClass+0xf0>)
 8009596:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
 800959a:	e7a0      	b.n	80094de <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800959c:	b950      	cbnz	r0, 80095b4 <SwitchClass+0xec>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800959e:	4b06      	ldr	r3, [pc, #24]	; (80095b8 <SwitchClass+0xf0>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
                Radio.Sleep( );
 80095a6:	4b06      	ldr	r3, [pc, #24]	; (80095c0 <SwitchClass+0xf8>)
 80095a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095aa:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 80095ac:	462c      	mov	r4, r5
 80095ae:	e796      	b.n	80094de <SwitchClass+0x16>
 80095b0:	2403      	movs	r4, #3
 80095b2:	e794      	b.n	80094de <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80095b4:	2403      	movs	r4, #3
 80095b6:	e792      	b.n	80094de <SwitchClass+0x16>
 80095b8:	200012d0 	.word	0x200012d0
 80095bc:	200019fc 	.word	0x200019fc
 80095c0:	08011584 	.word	0x08011584

080095c4 <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80095c4:	4b06      	ldr	r3, [pc, #24]	; (80095e0 <LoRaMacIsBusy+0x1c>)
 80095c6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80095ca:	b933      	cbnz	r3, 80095da <LoRaMacIsBusy+0x16>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80095cc:	4b04      	ldr	r3, [pc, #16]	; (80095e0 <LoRaMacIsBusy+0x1c>)
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80095ce:	f893 0486 	ldrb.w	r0, [r3, #1158]	; 0x486
 80095d2:	3801      	subs	r0, #1
 80095d4:	bf18      	it	ne
 80095d6:	2001      	movne	r0, #1
 80095d8:	4770      	bx	lr
    return true;
 80095da:	2001      	movs	r0, #1
}
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	200019fc 	.word	0x200019fc

080095e4 <LoRaMacProcess>:
{
 80095e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e8:	b0a5      	sub	sp, #148	; 0x94
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095ea:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80095ee:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 80095f0:	4aa2      	ldr	r2, [pc, #648]	; (800987c <LoRaMacProcess+0x298>)
 80095f2:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 80095f4:	2000      	movs	r0, #0
 80095f6:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095f8:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 80095fc:	b19b      	cbz	r3, 8009626 <LoRaMacProcess+0x42>
        if( events.Events.TxDone == 1 )
 80095fe:	b2dc      	uxtb	r4, r3
 8009600:	f013 0f10 	tst.w	r3, #16
 8009604:	d152      	bne.n	80096ac <LoRaMacProcess+0xc8>
        if( events.Events.RxDone == 1 )
 8009606:	f014 0f08 	tst.w	r4, #8
 800960a:	f040 80c5 	bne.w	8009798 <LoRaMacProcess+0x1b4>
        if( events.Events.TxTimeout == 1 )
 800960e:	f014 0f04 	tst.w	r4, #4
 8009612:	f040 83b7 	bne.w	8009d84 <LoRaMacProcess+0x7a0>
        if( events.Events.RxError == 1 )
 8009616:	f014 0f02 	tst.w	r4, #2
 800961a:	f040 83d1 	bne.w	8009dc0 <LoRaMacProcess+0x7dc>
        if( events.Events.RxTimeout == 1 )
 800961e:	f014 0f01 	tst.w	r4, #1
 8009622:	f040 83d2 	bne.w	8009dca <LoRaMacProcess+0x7e6>
    LoRaMacClassBProcess( );
 8009626:	f001 ffef 	bl	800b608 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800962a:	4b95      	ldr	r3, [pc, #596]	; (8009880 <LoRaMacProcess+0x29c>)
 800962c:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8009630:	f013 0f20 	tst.w	r3, #32
 8009634:	f040 83ce 	bne.w	8009dd4 <LoRaMacProcess+0x7f0>
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8009638:	4b91      	ldr	r3, [pc, #580]	; (8009880 <LoRaMacProcess+0x29c>)
 800963a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800963e:	f013 0f08 	tst.w	r3, #8
 8009642:	d00e      	beq.n	8009662 <LoRaMacProcess+0x7e>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8009644:	488e      	ldr	r0, [pc, #568]	; (8009880 <LoRaMacProcess+0x29c>)
 8009646:	f890 3485 	ldrb.w	r3, [r0, #1157]	; 0x485
 800964a:	f36f 03c3 	bfc	r3, #3, #1
 800964e:	f880 3485 	strb.w	r3, [r0, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8009652:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	f500 6190 	add.w	r1, r0, #1152	; 0x480
 800965c:	f500 608c 	add.w	r0, r0, #1120	; 0x460
 8009660:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009662:	4b87      	ldr	r3, [pc, #540]	; (8009880 <LoRaMacProcess+0x29c>)
 8009664:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8009668:	f013 0f02 	tst.w	r3, #2
 800966c:	d00e      	beq.n	800968c <LoRaMacProcess+0xa8>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800966e:	4884      	ldr	r0, [pc, #528]	; (8009880 <LoRaMacProcess+0x29c>)
 8009670:	f890 3485 	ldrb.w	r3, [r0, #1157]	; 0x485
 8009674:	f36f 0341 	bfc	r3, #1, #1
 8009678:	f880 3485 	strb.w	r3, [r0, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800967c:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	f500 6190 	add.w	r1, r0, #1152	; 0x480
 8009686:	f200 401c 	addw	r0, r0, #1052	; 0x41c
 800968a:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800968c:	4b7c      	ldr	r3, [pc, #496]	; (8009880 <LoRaMacProcess+0x29c>)
 800968e:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8009692:	2b02      	cmp	r3, #2
 8009694:	f000 846e 	beq.w	8009f74 <LoRaMacProcess+0x990>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8009698:	4b79      	ldr	r3, [pc, #484]	; (8009880 <LoRaMacProcess+0x29c>)
 800969a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800969e:	f013 0f40 	tst.w	r3, #64	; 0x40
 80096a2:	f040 846b 	bne.w	8009f7c <LoRaMacProcess+0x998>
}
 80096a6:	b025      	add	sp, #148	; 0x94
 80096a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80096ac:	4b75      	ldr	r3, [pc, #468]	; (8009884 <LoRaMacProcess+0x2a0>)
 80096ae:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80096b2:	2b02      	cmp	r3, #2
 80096b4:	d002      	beq.n	80096bc <LoRaMacProcess+0xd8>
        Radio.Sleep( );
 80096b6:	4b74      	ldr	r3, [pc, #464]	; (8009888 <LoRaMacProcess+0x2a4>)
 80096b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ba:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 80096bc:	4d70      	ldr	r5, [pc, #448]	; (8009880 <LoRaMacProcess+0x29c>)
 80096be:	f505 7660 	add.w	r6, r5, #896	; 0x380
 80096c2:	f8d5 13b0 	ldr.w	r1, [r5, #944]	; 0x3b0
 80096c6:	4630      	mov	r0, r6
 80096c8:	f007 f804 	bl	80106d4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80096cc:	4630      	mov	r0, r6
 80096ce:	f006 ffbb 	bl	8010648 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 80096d2:	f505 7666 	add.w	r6, r5, #920	; 0x398
 80096d6:	f8d5 13b4 	ldr.w	r1, [r5, #948]	; 0x3b4
 80096da:	4630      	mov	r0, r6
 80096dc:	f006 fffa 	bl	80106d4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 80096e0:	4630      	mov	r0, r6
 80096e2:	f006 ffb1 	bl	8010648 <UTIL_TIMER_Start>
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 80096e6:	4b67      	ldr	r3, [pc, #412]	; (8009884 <LoRaMacProcess+0x2a0>)
 80096e8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	d002      	beq.n	80096f6 <LoRaMacProcess+0x112>
 80096f0:	f895 3414 	ldrb.w	r3, [r5, #1044]	; 0x414
 80096f4:	b1ab      	cbz	r3, 8009722 <LoRaMacProcess+0x13e>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 80096f6:	2316      	movs	r3, #22
 80096f8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80096fc:	a90c      	add	r1, sp, #48	; 0x30
 80096fe:	4b61      	ldr	r3, [pc, #388]	; (8009884 <LoRaMacProcess+0x2a0>)
 8009700:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009704:	f002 feb7 	bl	800c476 <RegionGetPhyParam>
 8009708:	900a      	str	r0, [sp, #40]	; 0x28
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800970a:	4d5d      	ldr	r5, [pc, #372]	; (8009880 <LoRaMacProcess+0x29c>)
 800970c:	f8d5 13b4 	ldr.w	r1, [r5, #948]	; 0x3b4
 8009710:	f505 757e 	add.w	r5, r5, #1016	; 0x3f8
 8009714:	4401      	add	r1, r0
 8009716:	4628      	mov	r0, r5
 8009718:	f006 ffdc 	bl	80106d4 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800971c:	4628      	mov	r0, r5
 800971e:	f006 ff93 	bl	8010648 <UTIL_TIMER_Start>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8009722:	4b5a      	ldr	r3, [pc, #360]	; (800988c <LoRaMacProcess+0x2a8>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4d57      	ldr	r5, [pc, #348]	; (8009884 <LoRaMacProcess+0x2a0>)
 8009728:	62eb      	str	r3, [r5, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 800972a:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8009880 <LoRaMacProcess+0x29c>
 800972e:	f898 2415 	ldrb.w	r2, [r8, #1045]	; 0x415
 8009732:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8009736:	9317      	str	r3, [sp, #92]	; 0x5c
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8009738:	af22      	add	r7, sp, #136	; 0x88
 800973a:	4638      	mov	r0, r7
 800973c:	f006 fbba 	bl	800feb4 <SysTimeGetMcuTime>
 8009740:	ae04      	add	r6, sp, #16
 8009742:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 800974c:	e897 0006 	ldmia.w	r7, {r1, r2}
 8009750:	4630      	mov	r0, r6
 8009752:	f006 fb45 	bl	800fde0 <SysTimeSub>
 8009756:	ab19      	add	r3, sp, #100	; 0x64
 8009758:	e896 0003 	ldmia.w	r6, {r0, r1}
 800975c:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8009760:	f8d8 3418 	ldr.w	r3, [r8, #1048]	; 0x418
 8009764:	9318      	str	r3, [sp, #96]	; 0x60
    txDone.Joined  = true;
 8009766:	2301      	movs	r3, #1
 8009768:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800976c:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
 8009770:	b90b      	cbnz	r3, 8009776 <LoRaMacProcess+0x192>
        txDone.Joined  = false;
 8009772:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8009776:	a916      	add	r1, sp, #88	; 0x58
 8009778:	4b42      	ldr	r3, [pc, #264]	; (8009884 <LoRaMacProcess+0x2a0>)
 800977a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800977e:	f002 fe89 	bl	800c494 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 8009782:	4b3f      	ldr	r3, [pc, #252]	; (8009880 <LoRaMacProcess+0x29c>)
 8009784:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8009788:	2b00      	cmp	r3, #0
 800978a:	f47f af3c 	bne.w	8009606 <LoRaMacProcess+0x22>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800978e:	4b3c      	ldr	r3, [pc, #240]	; (8009880 <LoRaMacProcess+0x29c>)
 8009790:	2200      	movs	r2, #0
 8009792:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 8009796:	e736      	b.n	8009606 <LoRaMacProcess+0x22>
    uint8_t *payload = RxDoneParams.Payload;
 8009798:	4b3d      	ldr	r3, [pc, #244]	; (8009890 <LoRaMacProcess+0x2ac>)
 800979a:	f8d3 9004 	ldr.w	r9, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 800979e:	f8b3 8008 	ldrh.w	r8, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 80097a2:	f9b3 a00a 	ldrsh.w	sl, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 80097a6:	f993 500c 	ldrsb.w	r5, [r3, #12]
    uint32_t downLinkCounter = 0;
 80097aa:	2300      	movs	r3, #0
 80097ac:	9307      	str	r3, [sp, #28]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80097ae:	4a35      	ldr	r2, [pc, #212]	; (8009884 <LoRaMacProcess+0x2a0>)
 80097b0:	f8d2 70d4 	ldr.w	r7, [r2, #212]	; 0xd4
    MacCtx.McpsConfirm.AckReceived = false;
 80097b4:	4e32      	ldr	r6, [pc, #200]	; (8009880 <LoRaMacProcess+0x29c>)
 80097b6:	f886 343c 	strb.w	r3, [r6, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 80097ba:	f8a6 a480 	strh.w	sl, [r6, #1152]	; 0x480
    MacCtx.RxStatus.Snr = snr;
 80097be:	f886 5482 	strb.w	r5, [r6, #1154]	; 0x482
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 80097c2:	f896 2484 	ldrb.w	r2, [r6, #1156]	; 0x484
 80097c6:	f886 2483 	strb.w	r2, [r6, #1155]	; 0x483
    MacCtx.McpsIndication.Port = 0;
 80097ca:	f886 341f 	strb.w	r3, [r6, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 80097ce:	f886 341e 	strb.w	r3, [r6, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 80097d2:	f886 3421 	strb.w	r3, [r6, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 80097d6:	f8c6 3424 	str.w	r3, [r6, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 80097da:	f886 3428 	strb.w	r3, [r6, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 80097de:	f886 3429 	strb.w	r3, [r6, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 80097e2:	f886 342a 	strb.w	r3, [r6, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 80097e6:	f8c6 342c 	str.w	r3, [r6, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80097ea:	f886 341c 	strb.w	r3, [r6, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 80097ee:	f8c6 3430 	str.w	r3, [r6, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80097f2:	f886 3434 	strb.w	r3, [r6, #1076]	; 0x434
    Radio.Sleep( );
 80097f6:	4b24      	ldr	r3, [pc, #144]	; (8009888 <LoRaMacProcess+0x2a4>)
 80097f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fa:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 80097fc:	f506 7066 	add.w	r0, r6, #920	; 0x398
 8009800:	f006 fec2 	bl	8010588 <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8009804:	4641      	mov	r1, r8
 8009806:	4648      	mov	r0, r9
 8009808:	f001 fee1 	bl	800b5ce <LoRaMacClassBRxBeacon>
 800980c:	b9a0      	cbnz	r0, 8009838 <LoRaMacProcess+0x254>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800980e:	4b1d      	ldr	r3, [pc, #116]	; (8009884 <LoRaMacProcess+0x2a0>)
 8009810:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009814:	2b01      	cmp	r3, #1
 8009816:	d014      	beq.n	8009842 <LoRaMacProcess+0x25e>
    macHdr.Value = payload[pktHeaderLen++];
 8009818:	f899 6000 	ldrb.w	r6, [r9]
    switch( macHdr.Bits.MType )
 800981c:	0973      	lsrs	r3, r6, #5
 800981e:	3b01      	subs	r3, #1
 8009820:	2b06      	cmp	r3, #6
 8009822:	f200 8295 	bhi.w	8009d50 <LoRaMacProcess+0x76c>
 8009826:	e8df f013 	tbh	[pc, r3, lsl #1]
 800982a:	0035      	.short	0x0035
 800982c:	00b80293 	.word	0x00b80293
 8009830:	00b40293 	.word	0x00b40293
 8009834:	026a0293 	.word	0x026a0293
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8009838:	f8a6 a476 	strh.w	sl, [r6, #1142]	; 0x476
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800983c:	f886 5478 	strb.w	r5, [r6, #1144]	; 0x478
        return;
 8009840:	e6e5      	b.n	800960e <LoRaMacProcess+0x2a>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009842:	f001 fec8 	bl	800b5d6 <LoRaMacClassBIsPingExpected>
 8009846:	b150      	cbz	r0, 800985e <LoRaMacProcess+0x27a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009848:	2000      	movs	r0, #0
 800984a:	f001 feb9 	bl	800b5c0 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800984e:	2000      	movs	r0, #0
 8009850:	f001 febb 	bl	800b5ca <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8009854:	4b0a      	ldr	r3, [pc, #40]	; (8009880 <LoRaMacProcess+0x29c>)
 8009856:	2204      	movs	r2, #4
 8009858:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 800985c:	e7dc      	b.n	8009818 <LoRaMacProcess+0x234>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800985e:	f001 febc 	bl	800b5da <LoRaMacClassBIsMulticastExpected>
 8009862:	2800      	cmp	r0, #0
 8009864:	d0d8      	beq.n	8009818 <LoRaMacProcess+0x234>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009866:	2000      	movs	r0, #0
 8009868:	f001 feab 	bl	800b5c2 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800986c:	2000      	movs	r0, #0
 800986e:	f001 fead 	bl	800b5cc <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8009872:	4b03      	ldr	r3, [pc, #12]	; (8009880 <LoRaMacProcess+0x29c>)
 8009874:	2205      	movs	r2, #5
 8009876:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 800987a:	e7cd      	b.n	8009818 <LoRaMacProcess+0x234>
 800987c:	200019f8 	.word	0x200019f8
 8009880:	200019fc 	.word	0x200019fc
 8009884:	200012d0 	.word	0x200012d0
 8009888:	08011584 	.word	0x08011584
 800988c:	20001f18 	.word	0x20001f18
 8009890:	20001f08 	.word	0x20001f08
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8009894:	f1b8 0f10 	cmp.w	r8, #16
 8009898:	d95a      	bls.n	8009950 <LoRaMacProcess+0x36c>
            macMsgJoinAccept.Buffer = payload;
 800989a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
            macMsgJoinAccept.BufSize = size;
 800989e:	fa5f f888 	uxtb.w	r8, r8
 80098a2:	f88d 8034 	strb.w	r8, [sp, #52]	; 0x34
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80098a6:	4bbe      	ldr	r3, [pc, #760]	; (8009ba0 <LoRaMacProcess+0x5bc>)
 80098a8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d156      	bne.n	800995e <LoRaMacProcess+0x37a>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 80098b0:	f7fd ff2a 	bl	8007708 <SecureElementGetJoinEui>
 80098b4:	4601      	mov	r1, r0
 80098b6:	aa0c      	add	r2, sp, #48	; 0x30
 80098b8:	20ff      	movs	r0, #255	; 0xff
 80098ba:	f002 fc11 	bl	800c0e0 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 80098be:	2800      	cmp	r0, #0
 80098c0:	d15d      	bne.n	800997e <LoRaMacProcess+0x39a>
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80098c2:	4ab7      	ldr	r2, [pc, #732]	; (8009ba0 <LoRaMacProcess+0x5bc>)
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80098c4:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80098c8:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 80098cc:	041b      	lsls	r3, r3, #16
 80098ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80098d2:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80098d6:	430b      	orrs	r3, r1
 80098d8:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80098dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098de:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80098e2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80098e6:	f3c3 1102 	ubfx	r1, r3, #4, #3
 80098ea:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80098ee:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80098f2:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80098f6:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 80098fa:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 80098fe:	b3ab      	cbz	r3, 800996c <LoRaMacProcess+0x388>
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8009900:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8009902:	4da7      	ldr	r5, [pc, #668]	; (8009ba0 <LoRaMacProcess+0x5bc>)
 8009904:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009906:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800990a:	fb02 f303 	mul.w	r3, r2, r3
 800990e:	652b      	str	r3, [r5, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8009910:	4413      	add	r3, r2
 8009912:	656b      	str	r3, [r5, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8009914:	2300      	movs	r3, #0
 8009916:	f885 3116 	strb.w	r3, [r5, #278]	; 0x116
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800991a:	f10d 0342 	add.w	r3, sp, #66	; 0x42
 800991e:	930a      	str	r3, [sp, #40]	; 0x28
                applyCFList.Size = size - 17;
 8009920:	f1a8 0811 	sub.w	r8, r8, #17
 8009924:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8009928:	a90a      	add	r1, sp, #40	; 0x28
 800992a:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 800992e:	f002 fdcc 	bl	800c4ca <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8009932:	2302      	movs	r3, #2
 8009934:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009938:	2001      	movs	r0, #1
 800993a:	f002 f873 	bl	800ba24 <LoRaMacConfirmQueueIsCmdActive>
 800993e:	b9c8      	cbnz	r0, 8009974 <LoRaMacProcess+0x390>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 8009940:	4a98      	ldr	r2, [pc, #608]	; (8009ba4 <LoRaMacProcess+0x5c0>)
 8009942:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8009946:	f043 0308 	orr.w	r3, r3, #8
 800994a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 800994e:	e1f3      	b.n	8009d38 <LoRaMacProcess+0x754>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009950:	4b94      	ldr	r3, [pc, #592]	; (8009ba4 <LoRaMacProcess+0x5c0>)
 8009952:	2201      	movs	r2, #1
 8009954:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8009958:	f7fe fe38 	bl	80085cc <PrepareRxDoneAbort>
                return;
 800995c:	e657      	b.n	800960e <LoRaMacProcess+0x2a>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800995e:	4b91      	ldr	r3, [pc, #580]	; (8009ba4 <LoRaMacProcess+0x5c0>)
 8009960:	2201      	movs	r2, #1
 8009962:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8009966:	f7fe fe31 	bl	80085cc <PrepareRxDoneAbort>
                return;
 800996a:	e650      	b.n	800960e <LoRaMacProcess+0x2a>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800996c:	4b8c      	ldr	r3, [pc, #560]	; (8009ba0 <LoRaMacProcess+0x5bc>)
 800996e:	2201      	movs	r2, #1
 8009970:	651a      	str	r2, [r3, #80]	; 0x50
 8009972:	e7c6      	b.n	8009902 <LoRaMacProcess+0x31e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8009974:	2101      	movs	r1, #1
 8009976:	2000      	movs	r0, #0
 8009978:	f002 f80a 	bl	800b990 <LoRaMacConfirmQueueSetStatus>
 800997c:	e7e0      	b.n	8009940 <LoRaMacProcess+0x35c>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800997e:	2001      	movs	r0, #1
 8009980:	f002 f850 	bl	800ba24 <LoRaMacConfirmQueueIsCmdActive>
 8009984:	2800      	cmp	r0, #0
 8009986:	d0db      	beq.n	8009940 <LoRaMacProcess+0x35c>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8009988:	2101      	movs	r1, #1
 800998a:	2007      	movs	r0, #7
 800998c:	f002 f800 	bl	800b990 <LoRaMacConfirmQueueSetStatus>
 8009990:	e7d6      	b.n	8009940 <LoRaMacProcess+0x35c>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8009992:	4b84      	ldr	r3, [pc, #528]	; (8009ba4 <LoRaMacProcess+0x5c0>)
 8009994:	2201      	movs	r2, #1
 8009996:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800999a:	4b81      	ldr	r3, [pc, #516]	; (8009ba0 <LoRaMacProcess+0x5bc>)
 800999c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80099a0:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80099a4:	4a7f      	ldr	r2, [pc, #508]	; (8009ba4 <LoRaMacProcess+0x5c0>)
 80099a6:	f892 2420 	ldrb.w	r2, [r2, #1056]	; 0x420
 80099aa:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 80099ae:	220d      	movs	r2, #13
 80099b0:	f88d 2020 	strb.w	r2, [sp, #32]
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80099b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80099b8:	b113      	cbz	r3, 80099c0 <LoRaMacProcess+0x3dc>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80099ba:	230e      	movs	r3, #14
 80099bc:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80099c0:	a908      	add	r1, sp, #32
 80099c2:	4b77      	ldr	r3, [pc, #476]	; (8009ba0 <LoRaMacProcess+0x5bc>)
 80099c4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80099c8:	f002 fd55 	bl	800c476 <RegionGetPhyParam>
 80099cc:	9006      	str	r0, [sp, #24]
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 80099ce:	f1a8 030d 	sub.w	r3, r8, #13
 80099d2:	b21b      	sxth	r3, r3
 80099d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80099d8:	b200      	sxth	r0, r0
 80099da:	4283      	cmp	r3, r0
 80099dc:	dc02      	bgt.n	80099e4 <LoRaMacProcess+0x400>
 80099de:	f1b8 0f0b 	cmp.w	r8, #11
 80099e2:	d806      	bhi.n	80099f2 <LoRaMacProcess+0x40e>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80099e4:	4b6f      	ldr	r3, [pc, #444]	; (8009ba4 <LoRaMacProcess+0x5c0>)
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 80099ec:	f7fe fdee 	bl	80085cc <PrepareRxDoneAbort>
                return;
 80099f0:	e60d      	b.n	800960e <LoRaMacProcess+0x2a>
            macMsgData.Buffer = payload;
 80099f2:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
            macMsgData.BufSize = size;
 80099f6:	f88d 805c 	strb.w	r8, [sp, #92]	; 0x5c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 80099fa:	4b6b      	ldr	r3, [pc, #428]	; (8009ba8 <LoRaMacProcess+0x5c4>)
 80099fc:	931f      	str	r3, [sp, #124]	; 0x7c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 80099fe:	23ff      	movs	r3, #255	; 0xff
 8009a00:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8009a04:	a816      	add	r0, sp, #88	; 0x58
 8009a06:	f002 fc2f 	bl	800c268 <LoRaMacParserData>
 8009a0a:	9003      	str	r0, [sp, #12]
 8009a0c:	b9d0      	cbnz	r0, 8009a44 <LoRaMacProcess+0x460>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8009a0e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009a10:	4a64      	ldr	r2, [pc, #400]	; (8009ba4 <LoRaMacProcess+0x5c0>)
 8009a12:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8009a16:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8009a1a:	f012 0f0f 	tst.w	r2, #15
 8009a1e:	f000 8392 	beq.w	800a146 <LoRaMacProcess+0xb62>
 8009a22:	f89d 1078 	ldrb.w	r1, [sp, #120]	; 0x78
 8009a26:	2900      	cmp	r1, #0
 8009a28:	f040 8305 	bne.w	800a036 <LoRaMacProcess+0xa52>
    else if( macMsg->FRMPayloadSize == 0 )
 8009a2c:	f89d 1080 	ldrb.w	r1, [sp, #128]	; 0x80
 8009a30:	2900      	cmp	r1, #0
 8009a32:	f000 8303 	beq.w	800a03c <LoRaMacProcess+0xa58>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009a36:	4b5b      	ldr	r3, [pc, #364]	; (8009ba4 <LoRaMacProcess+0x5c0>)
 8009a38:	2201      	movs	r2, #1
 8009a3a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8009a3e:	f7fe fdc5 	bl	80085cc <PrepareRxDoneAbort>
                return;
 8009a42:	e5e4      	b.n	800960e <LoRaMacProcess+0x2a>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009a44:	4b57      	ldr	r3, [pc, #348]	; (8009ba4 <LoRaMacProcess+0x5c0>)
 8009a46:	2201      	movs	r2, #1
 8009a48:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8009a4c:	f7fe fdbe 	bl	80085cc <PrepareRxDoneAbort>
                return;
 8009a50:	e5dd      	b.n	800960e <LoRaMacProcess+0x2a>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8009a52:	f89d 1078 	ldrb.w	r1, [sp, #120]	; 0x78
        *fType = FRAME_TYPE_C;
 8009a56:	2900      	cmp	r1, #0
 8009a58:	bf14      	ite	ne
 8009a5a:	f04f 0a03 	movne.w	sl, #3
 8009a5e:	f04f 0a02 	moveq.w	sl, #2
 8009a62:	e377      	b.n	800a154 <LoRaMacProcess+0xb70>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8009a64:	4b4e      	ldr	r3, [pc, #312]	; (8009ba0 <LoRaMacProcess+0x5bc>)
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8009a66:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	f000 837a 	beq.w	800a164 <LoRaMacProcess+0xb80>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8009a70:	4b4b      	ldr	r3, [pc, #300]	; (8009ba0 <LoRaMacProcess+0x5bc>)
 8009a72:	f893 b0db 	ldrb.w	fp, [r3, #219]	; 0xdb
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8009a76:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
 8009a7a:	6809      	ldr	r1, [r1, #0]
 8009a7c:	9107      	str	r1, [sp, #28]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8009a7e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009a82:	2b02      	cmp	r3, #2
 8009a84:	d06e      	beq.n	8009b64 <LoRaMacProcess+0x580>
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8009a86:	f1ba 0f03 	cmp.w	sl, #3
 8009a8a:	d170      	bne.n	8009b6e <LoRaMacProcess+0x58a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8009a8c:	f012 0f60 	tst.w	r2, #96	; 0x60
 8009a90:	d16d      	bne.n	8009b6e <LoRaMacProcess+0x58a>
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8009a92:	2315      	movs	r3, #21
 8009a94:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009a98:	4f41      	ldr	r7, [pc, #260]	; (8009ba0 <LoRaMacProcess+0x5bc>)
 8009a9a:	a908      	add	r1, sp, #32
 8009a9c:	f897 0040 	ldrb.w	r0, [r7, #64]	; 0x40
 8009aa0:	f002 fce9 	bl	800c476 <RegionGetPhyParam>
 8009aa4:	9006      	str	r0, [sp, #24]
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 8009aa6:	b281      	uxth	r1, r0
 8009aa8:	f897 9116 	ldrb.w	r9, [r7, #278]	; 0x116
    switch( addrID )
 8009aac:	f1bb 0f00 	cmp.w	fp, #0
 8009ab0:	f040 82af 	bne.w	800a012 <LoRaMacProcess+0xa2e>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	9303      	str	r3, [sp, #12]
 8009ab8:	f04f 0904 	mov.w	r9, #4
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8009abc:	ab07      	add	r3, sp, #28
 8009abe:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
 8009ac2:	4648      	mov	r0, r9
 8009ac4:	f002 f94e 	bl	800bd64 <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	d16f      	bne.n	8009bac <LoRaMacProcess+0x5c8>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8009acc:	ab16      	add	r3, sp, #88	; 0x58
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	9b07      	ldr	r3, [sp, #28]
 8009ad2:	464a      	mov	r2, r9
 8009ad4:	4641      	mov	r1, r8
 8009ad6:	4658      	mov	r0, fp
 8009ad8:	f002 fa30 	bl	800bf3c <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8009adc:	2800      	cmp	r0, #0
 8009ade:	f040 8089 	bne.w	8009bf4 <LoRaMacProcess+0x610>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009ae2:	4b30      	ldr	r3, [pc, #192]	; (8009ba4 <LoRaMacProcess+0x5c0>)
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	f883 141d 	strb.w	r1, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 8009aea:	9a03      	ldr	r2, [sp, #12]
 8009aec:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8009af0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8009af4:	f3c2 1000 	ubfx	r0, r2, #4, #1
 8009af8:	f883 0421 	strb.w	r0, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 8009afc:	f8c3 1424 	str.w	r1, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 8009b00:	f883 1428 	strb.w	r1, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8009b04:	9807      	ldr	r0, [sp, #28]
 8009b06:	f8c3 042c 	str.w	r0, [r3, #1068]	; 0x42c
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8009b0a:	f8c3 0464 	str.w	r0, [r3, #1124]	; 0x464
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8009b0e:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8009b12:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009b16:	f883 1439 	strb.w	r1, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8009b1a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8009b1e:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8009b22:	2b01      	cmp	r3, #1
                Nvm.MacGroup1.AdrAckCounter = 0;
 8009b24:	bf9c      	itt	ls
 8009b26:	4a1e      	ldrls	r2, [pc, #120]	; (8009ba0 <LoRaMacProcess+0x5bc>)
 8009b28:	6291      	strls	r1, [r2, #40]	; 0x28
            if( multicast == 1 )
 8009b2a:	9a03      	ldr	r2, [sp, #12]
 8009b2c:	2a01      	cmp	r2, #1
 8009b2e:	d06b      	beq.n	8009c08 <LoRaMacProcess+0x624>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8009b30:	f006 06e0 	and.w	r6, r6, #224	; 0xe0
 8009b34:	2ea0      	cmp	r6, #160	; 0xa0
 8009b36:	d06c      	beq.n	8009c12 <LoRaMacProcess+0x62e>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8009b38:	2200      	movs	r2, #0
 8009b3a:	4919      	ldr	r1, [pc, #100]	; (8009ba0 <LoRaMacProcess+0x5bc>)
 8009b3c:	f881 203a 	strb.w	r2, [r1, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8009b40:	4918      	ldr	r1, [pc, #96]	; (8009ba4 <LoRaMacProcess+0x5c0>)
 8009b42:	f881 241c 	strb.w	r2, [r1, #1052]	; 0x41c
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8009b46:	4a17      	ldr	r2, [pc, #92]	; (8009ba4 <LoRaMacProcess+0x5c0>)
 8009b48:	f892 1438 	ldrb.w	r1, [r2, #1080]	; 0x438
 8009b4c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d96d      	bls.n	8009c30 <LoRaMacProcess+0x64c>
            switch( fType )
 8009b54:	f1ba 0f03 	cmp.w	sl, #3
 8009b58:	f200 80ca 	bhi.w	8009cf0 <LoRaMacProcess+0x70c>
 8009b5c:	e8df f00a 	tbb	[pc, sl]
 8009b60:	b8a89673 	.word	0xb8a89673
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8009b64:	4b0f      	ldr	r3, [pc, #60]	; (8009ba4 <LoRaMacProcess+0x5c0>)
 8009b66:	2103      	movs	r1, #3
 8009b68:	f883 1483 	strb.w	r1, [r3, #1155]	; 0x483
 8009b6c:	e78b      	b.n	8009a86 <LoRaMacProcess+0x4a2>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009b6e:	4b0d      	ldr	r3, [pc, #52]	; (8009ba4 <LoRaMacProcess+0x5c0>)
 8009b70:	2201      	movs	r2, #1
 8009b72:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8009b76:	f7fe fd29 	bl	80085cc <PrepareRxDoneAbort>
                return;
 8009b7a:	e548      	b.n	800960e <LoRaMacProcess+0x2a>
    switch( addrID )
 8009b7c:	4647      	mov	r7, r8
 8009b7e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009b82:	e2ff      	b.n	800a184 <LoRaMacProcess+0xba0>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8009b84:	f1ba 0f00 	cmp.w	sl, #0
 8009b88:	d006      	beq.n	8009b98 <LoRaMacProcess+0x5b4>
 8009b8a:	46b8      	mov	r8, r7
 8009b8c:	f1ba 0f03 	cmp.w	sl, #3
 8009b90:	bf08      	it	eq
 8009b92:	f04f 0902 	moveq.w	r9, #2
 8009b96:	e791      	b.n	8009abc <LoRaMacProcess+0x4d8>
 8009b98:	46b8      	mov	r8, r7
                    *fCntID = A_FCNT_DOWN;
 8009b9a:	f04f 0902 	mov.w	r9, #2
 8009b9e:	e78d      	b.n	8009abc <LoRaMacProcess+0x4d8>
 8009ba0:	200012d0 	.word	0x200012d0
 8009ba4:	200019fc 	.word	0x200019fc
 8009ba8:	20001c34 	.word	0x20001c34
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8009bac:	2807      	cmp	r0, #7
 8009bae:	d119      	bne.n	8009be4 <LoRaMacProcess+0x600>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8009bb0:	4bbb      	ldr	r3, [pc, #748]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009bb2:	2208      	movs	r2, #8
 8009bb4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 8009bb8:	4bba      	ldr	r3, [pc, #744]	; (8009ea4 <LoRaMacProcess+0x8c0>)
 8009bba:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	f040 822f 	bne.w	800a022 <LoRaMacProcess+0xa3e>
 8009bc4:	f006 06e0 	and.w	r6, r6, #224	; 0xe0
 8009bc8:	2ea0      	cmp	r6, #160	; 0xa0
 8009bca:	f040 822a 	bne.w	800a022 <LoRaMacProcess+0xa3e>
 8009bce:	4bb5      	ldr	r3, [pc, #724]	; (8009ea4 <LoRaMacProcess+0x8c0>)
 8009bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	f040 8224 	bne.w	800a022 <LoRaMacProcess+0xa3e>
                        Nvm.MacGroup1.SrvAckRequested = true;
 8009bda:	4bb2      	ldr	r3, [pc, #712]	; (8009ea4 <LoRaMacProcess+0x8c0>)
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8009be2:	e21e      	b.n	800a022 <LoRaMacProcess+0xa3e>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8009be4:	2808      	cmp	r0, #8
 8009be6:	f040 8218 	bne.w	800a01a <LoRaMacProcess+0xa36>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8009bea:	4bad      	ldr	r3, [pc, #692]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009bec:	220a      	movs	r2, #10
 8009bee:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8009bf2:	e216      	b.n	800a022 <LoRaMacProcess+0xa3e>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8009bf4:	2802      	cmp	r0, #2
 8009bf6:	bf0c      	ite	eq
 8009bf8:	220b      	moveq	r2, #11
 8009bfa:	220c      	movne	r2, #12
 8009bfc:	4ba8      	ldr	r3, [pc, #672]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009bfe:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8009c02:	f7fe fce3 	bl	80085cc <PrepareRxDoneAbort>
                return;
 8009c06:	e502      	b.n	800960e <LoRaMacProcess+0x2a>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8009c08:	4aa5      	ldr	r2, [pc, #660]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009c0a:	2102      	movs	r1, #2
 8009c0c:	f882 141c 	strb.w	r1, [r2, #1052]	; 0x41c
 8009c10:	e799      	b.n	8009b46 <LoRaMacProcess+0x562>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8009c12:	4aa4      	ldr	r2, [pc, #656]	; (8009ea4 <LoRaMacProcess+0x8c0>)
 8009c14:	2101      	movs	r1, #1
 8009c16:	f882 103a 	strb.w	r1, [r2, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8009c1a:	f892 2116 	ldrb.w	r2, [r2, #278]	; 0x116
 8009c1e:	b912      	cbnz	r2, 8009c26 <LoRaMacProcess+0x642>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8009c20:	4aa0      	ldr	r2, [pc, #640]	; (8009ea4 <LoRaMacProcess+0x8c0>)
 8009c22:	9921      	ldr	r1, [sp, #132]	; 0x84
 8009c24:	6351      	str	r1, [r2, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8009c26:	4a9e      	ldr	r2, [pc, #632]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009c28:	2101      	movs	r1, #1
 8009c2a:	f882 141c 	strb.w	r1, [r2, #1052]	; 0x41c
 8009c2e:	e78a      	b.n	8009b46 <LoRaMacProcess+0x562>
        if( request == MCPS_CONFIRMED )
 8009c30:	2901      	cmp	r1, #1
 8009c32:	d105      	bne.n	8009c40 <LoRaMacProcess+0x65c>
            if( fCtrl.Bits.Ack == 1 )
 8009c34:	f012 0f20 	tst.w	r2, #32
 8009c38:	d08c      	beq.n	8009b54 <LoRaMacProcess+0x570>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8009c3a:	f001 fda1 	bl	800b780 <LoRaMacCommandsRemoveStickyAnsCmds>
 8009c3e:	e789      	b.n	8009b54 <LoRaMacProcess+0x570>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8009c40:	f001 fd9e 	bl	800b780 <LoRaMacCommandsRemoveStickyAnsCmds>
 8009c44:	e786      	b.n	8009b54 <LoRaMacProcess+0x570>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8009c46:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8009c4a:	4e95      	ldr	r6, [pc, #596]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009c4c:	f896 3483 	ldrb.w	r3, [r6, #1155]	; 0x483
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	462b      	mov	r3, r5
 8009c54:	f002 020f 	and.w	r2, r2, #15
 8009c58:	2100      	movs	r1, #0
 8009c5a:	a81a      	add	r0, sp, #104	; 0x68
 8009c5c:	f7fe fcd2 	bl	8008604 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009c60:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8009c64:	f886 341f 	strb.w	r3, [r6, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009c68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009c6a:	f8c6 3424 	str.w	r3, [r6, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009c6e:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 8009c72:	f886 3428 	strb.w	r3, [r6, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8009c76:	2301      	movs	r3, #1
 8009c78:	f886 3429 	strb.w	r3, [r6, #1065]	; 0x429
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8009c7c:	4a88      	ldr	r2, [pc, #544]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009c7e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8009c82:	f043 0302 	orr.w	r3, r3, #2
 8009c86:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 8009c8a:	e055      	b.n	8009d38 <LoRaMacProcess+0x754>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8009c8c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8009c90:	4e83      	ldr	r6, [pc, #524]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009c92:	f896 3483 	ldrb.w	r3, [r6, #1155]	; 0x483
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	462b      	mov	r3, r5
 8009c9a:	f002 020f 	and.w	r2, r2, #15
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	a81a      	add	r0, sp, #104	; 0x68
 8009ca2:	f7fe fcaf 	bl	8008604 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009ca6:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8009caa:	f886 341f 	strb.w	r3, [r6, #1055]	; 0x41f
                    break;
 8009cae:	e7e5      	b.n	8009c7c <LoRaMacProcess+0x698>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8009cb0:	4e7b      	ldr	r6, [pc, #492]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009cb2:	f896 3483 	ldrb.w	r3, [r6, #1155]	; 0x483
 8009cb6:	9300      	str	r3, [sp, #0]
 8009cb8:	462b      	mov	r3, r5
 8009cba:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8009cc2:	f7fe fc9f 	bl	8008604 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009cc6:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8009cca:	f886 341f 	strb.w	r3, [r6, #1055]	; 0x41f
                    break;
 8009cce:	e7d5      	b.n	8009c7c <LoRaMacProcess+0x698>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009cd0:	4b73      	ldr	r3, [pc, #460]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009cd2:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 8009cd6:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009cda:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009cdc:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009ce0:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8009ce4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8009ce8:	2201      	movs	r2, #1
 8009cea:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 8009cee:	e7c5      	b.n	8009c7c <LoRaMacProcess+0x698>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009cf0:	4b6b      	ldr	r3, [pc, #428]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 8009cf8:	f7fe fc68 	bl	80085cc <PrepareRxDoneAbort>
                    break;
 8009cfc:	e7be      	b.n	8009c7c <LoRaMacProcess+0x698>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8009cfe:	f108 32ff 	add.w	r2, r8, #4294967295
 8009d02:	4d67      	ldr	r5, [pc, #412]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009d04:	f505 760e 	add.w	r6, r5, #568	; 0x238
 8009d08:	b292      	uxth	r2, r2
 8009d0a:	f109 0101 	add.w	r1, r9, #1
 8009d0e:	4630      	mov	r0, r6
 8009d10:	f003 feb4 	bl	800da7c <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8009d14:	2303      	movs	r3, #3
 8009d16:	f885 341c 	strb.w	r3, [r5, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f885 341d 	strb.w	r3, [r5, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8009d20:	f8c5 6424 	str.w	r6, [r5, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8009d24:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d28:	f885 8428 	strb.w	r8, [r5, #1064]	; 0x428
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8009d2c:	f895 3485 	ldrb.w	r3, [r5, #1157]	; 0x485
 8009d30:	f043 0302 	orr.w	r3, r3, #2
 8009d34:	f885 3485 	strb.w	r3, [r5, #1157]	; 0x485
    if( MacCtx.NodeAckRequested == true )
 8009d38:	4b59      	ldr	r3, [pc, #356]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009d3a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8009d3e:	b173      	cbz	r3, 8009d5e <LoRaMacProcess+0x77a>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8009d40:	4b57      	ldr	r3, [pc, #348]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009d42:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8009d46:	b17b      	cbz	r3, 8009d68 <LoRaMacProcess+0x784>
            OnAckTimeoutTimerEvent( NULL );
 8009d48:	2000      	movs	r0, #0
 8009d4a:	f7fe fc19 	bl	8008580 <OnAckTimeoutTimerEvent>
 8009d4e:	e00b      	b.n	8009d68 <LoRaMacProcess+0x784>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009d50:	4b53      	ldr	r3, [pc, #332]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009d52:	2201      	movs	r2, #1
 8009d54:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 8009d58:	f7fe fc38 	bl	80085cc <PrepareRxDoneAbort>
            break;
 8009d5c:	e7ec      	b.n	8009d38 <LoRaMacProcess+0x754>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8009d5e:	4b51      	ldr	r3, [pc, #324]	; (8009ea4 <LoRaMacProcess+0x8c0>)
 8009d60:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009d64:	2b02      	cmp	r3, #2
 8009d66:	d009      	beq.n	8009d7c <LoRaMacProcess+0x798>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009d68:	4a4d      	ldr	r2, [pc, #308]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009d6a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8009d6e:	f043 0320 	orr.w	r3, r3, #32
 8009d72:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    UpdateRxSlotIdleState( );
 8009d76:	f7fe fbaf 	bl	80084d8 <UpdateRxSlotIdleState>
 8009d7a:	e448      	b.n	800960e <LoRaMacProcess+0x2a>
            OnAckTimeoutTimerEvent( NULL );
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	f7fe fbff 	bl	8008580 <OnAckTimeoutTimerEvent>
 8009d82:	e7f1      	b.n	8009d68 <LoRaMacProcess+0x784>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009d84:	4b47      	ldr	r3, [pc, #284]	; (8009ea4 <LoRaMacProcess+0x8c0>)
 8009d86:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d002      	beq.n	8009d94 <LoRaMacProcess+0x7b0>
        Radio.Sleep( );
 8009d8e:	4b46      	ldr	r3, [pc, #280]	; (8009ea8 <LoRaMacProcess+0x8c4>)
 8009d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d92:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8009d94:	f7fe fba0 	bl	80084d8 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8009d98:	4d41      	ldr	r5, [pc, #260]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009d9a:	2002      	movs	r0, #2
 8009d9c:	f885 0439 	strb.w	r0, [r5, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8009da0:	f001 fe1e 	bl	800b9e0 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8009da4:	f895 3414 	ldrb.w	r3, [r5, #1044]	; 0x414
 8009da8:	b113      	cbz	r3, 8009db0 <LoRaMacProcess+0x7cc>
        MacCtx.AckTimeoutRetry = true;
 8009daa:	2201      	movs	r2, #1
 8009dac:	f885 2413 	strb.w	r2, [r5, #1043]	; 0x413
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009db0:	4a3b      	ldr	r2, [pc, #236]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009db2:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8009db6:	f043 0320 	orr.w	r3, r3, #32
 8009dba:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
}
 8009dbe:	e42a      	b.n	8009616 <LoRaMacProcess+0x32>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8009dc0:	2106      	movs	r1, #6
 8009dc2:	2005      	movs	r0, #5
 8009dc4:	f7fe fef6 	bl	8008bb4 <HandleRadioRxErrorTimeout>
}
 8009dc8:	e429      	b.n	800961e <LoRaMacProcess+0x3a>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8009dca:	2104      	movs	r1, #4
 8009dcc:	2003      	movs	r0, #3
 8009dce:	f7fe fef1 	bl	8008bb4 <HandleRadioRxErrorTimeout>
}
 8009dd2:	e428      	b.n	8009626 <LoRaMacProcess+0x42>
    MacCtx.AllowRequests = requestState;
 8009dd4:	4a32      	ldr	r2, [pc, #200]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	f882 1486 	strb.w	r1, [r2, #1158]	; 0x486
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8009ddc:	f8d2 2340 	ldr.w	r2, [r2, #832]	; 0x340
 8009de0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009de4:	d004      	beq.n	8009df0 <LoRaMacProcess+0x80c>
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009de6:	f022 0282 	bic.w	r2, r2, #130	; 0x82
 8009dea:	492d      	ldr	r1, [pc, #180]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009dec:	f8c1 2340 	str.w	r2, [r1, #832]	; 0x340
        if( IsRequestPending( ) > 0 )
 8009df0:	f013 0f05 	tst.w	r3, #5
 8009df4:	d015      	beq.n	8009e22 <LoRaMacProcess+0x83e>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009df6:	200c      	movs	r0, #12
 8009df8:	f001 fe14 	bl	800ba24 <LoRaMacConfirmQueueIsCmdActive>
 8009dfc:	b188      	cbz	r0, 8009e22 <LoRaMacProcess+0x83e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8009dfe:	4b28      	ldr	r3, [pc, #160]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009e00:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009e04:	f013 0f01 	tst.w	r3, #1
 8009e08:	f040 813a 	bne.w	800a080 <LoRaMacProcess+0xa9c>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009e0c:	f013 0f04 	tst.w	r3, #4
 8009e10:	d00d      	beq.n	8009e2e <LoRaMacProcess+0x84a>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009e12:	4a23      	ldr	r2, [pc, #140]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009e14:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8009e18:	f023 0302 	bic.w	r3, r3, #2
 8009e1c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        if( noTx == 0x00 )
 8009e20:	e00c      	b.n	8009e3c <LoRaMacProcess+0x858>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009e22:	4b1f      	ldr	r3, [pc, #124]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009e24:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8009e28:	f013 0f04 	tst.w	r3, #4
 8009e2c:	d118      	bne.n	8009e60 <LoRaMacProcess+0x87c>
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009e2e:	4b1c      	ldr	r3, [pc, #112]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009e30:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8009e34:	f013 0f01 	tst.w	r3, #1
 8009e38:	f040 812c 	bne.w	800a094 <LoRaMacProcess+0xab0>
    if( MacCtx.MacState == LORAMAC_IDLE )
 8009e3c:	4b18      	ldr	r3, [pc, #96]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009e3e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	f040 8173 	bne.w	800a12e <LoRaMacProcess+0xb4a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009e48:	4b15      	ldr	r3, [pc, #84]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009e4a:	f893 4485 	ldrb.w	r4, [r3, #1157]	; 0x485
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009e4e:	f014 0f04 	tst.w	r4, #4
 8009e52:	f040 8101 	bne.w	800a058 <LoRaMacProcess+0xa74>
    MacCtx.AllowRequests = requestState;
 8009e56:	4b12      	ldr	r3, [pc, #72]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f883 2486 	strb.w	r2, [r3, #1158]	; 0x486
        if( reqEvents.Bits.MlmeReq == 1 )
 8009e5e:	e155      	b.n	800a10c <LoRaMacProcess+0xb28>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009e60:	2001      	movs	r0, #1
 8009e62:	f001 fddf 	bl	800ba24 <LoRaMacConfirmQueueIsCmdActive>
 8009e66:	b178      	cbz	r0, 8009e88 <LoRaMacProcess+0x8a4>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8009e68:	2001      	movs	r0, #1
 8009e6a:	f001 fda5 	bl	800b9b8 <LoRaMacConfirmQueueGetStatus>
 8009e6e:	b918      	cbnz	r0, 8009e78 <LoRaMacProcess+0x894>
                MacCtx.ChannelsNbTransCounter = 0;
 8009e70:	4b0b      	ldr	r3, [pc, #44]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009e72:	2200      	movs	r2, #0
 8009e74:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009e78:	4a09      	ldr	r2, [pc, #36]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009e7a:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8009e7e:	f023 0302 	bic.w	r3, r3, #2
 8009e82:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 8009e86:	e7d2      	b.n	8009e2e <LoRaMacProcess+0x84a>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8009e88:	2005      	movs	r0, #5
 8009e8a:	f001 fdcb 	bl	800ba24 <LoRaMacConfirmQueueIsCmdActive>
 8009e8e:	b168      	cbz	r0, 8009eac <LoRaMacProcess+0x8c8>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009e90:	4a03      	ldr	r2, [pc, #12]	; (8009ea0 <LoRaMacProcess+0x8bc>)
 8009e92:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8009e96:	f023 0302 	bic.w	r3, r3, #2
 8009e9a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 8009e9e:	e7c6      	b.n	8009e2e <LoRaMacProcess+0x84a>
 8009ea0:	200019fc 	.word	0x200019fc
 8009ea4:	200012d0 	.word	0x200012d0
 8009ea8:	08011584 	.word	0x08011584
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8009eac:	2006      	movs	r0, #6
 8009eae:	f001 fdb9 	bl	800ba24 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d0bb      	beq.n	8009e2e <LoRaMacProcess+0x84a>
 8009eb6:	e7eb      	b.n	8009e90 <LoRaMacProcess+0x8ac>
    if( MacCtx.ChannelsNbTransCounter >=
 8009eb8:	4ab6      	ldr	r2, [pc, #728]	; (800a194 <LoRaMacProcess+0xbb0>)
 8009eba:	f892 1410 	ldrb.w	r1, [r2, #1040]	; 0x410
 8009ebe:	4ab6      	ldr	r2, [pc, #728]	; (800a198 <LoRaMacProcess+0xbb4>)
 8009ec0:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8009ec4:	4291      	cmp	r1, r2
 8009ec6:	f080 8096 	bcs.w	8009ff6 <LoRaMacProcess+0xa12>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009eca:	f013 0f02 	tst.w	r3, #2
 8009ece:	f000 80ed 	beq.w	800a0ac <LoRaMacProcess+0xac8>
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8009ed2:	4bb1      	ldr	r3, [pc, #708]	; (800a198 <LoRaMacProcess+0xbb4>)
 8009ed4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f000 808c 	beq.w	8009ff6 <LoRaMacProcess+0xa12>
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8009ede:	4bad      	ldr	r3, [pc, #692]	; (800a194 <LoRaMacProcess+0xbb0>)
        if( stopRetransmission == true )
 8009ee0:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f040 80e1 	bne.w	800a0ac <LoRaMacProcess+0xac8>
 8009eea:	e084      	b.n	8009ff6 <LoRaMacProcess+0xa12>
            if( MacCtx.AckTimeoutRetry == true )
 8009eec:	4aa9      	ldr	r2, [pc, #676]	; (800a194 <LoRaMacProcess+0xbb0>)
 8009eee:	f892 2413 	ldrb.w	r2, [r2, #1043]	; 0x413
 8009ef2:	2a00      	cmp	r2, #0
 8009ef4:	f000 80bb 	beq.w	800a06e <LoRaMacProcess+0xa8a>
    if( MacCtx.AckTimeoutRetriesCounter >=
 8009ef8:	49a6      	ldr	r1, [pc, #664]	; (800a194 <LoRaMacProcess+0xbb0>)
 8009efa:	f891 2412 	ldrb.w	r2, [r1, #1042]	; 0x412
 8009efe:	f891 1411 	ldrb.w	r1, [r1, #1041]	; 0x411
 8009f02:	4291      	cmp	r1, r2
 8009f04:	d969      	bls.n	8009fda <LoRaMacProcess+0x9f6>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009f06:	f013 0f02 	tst.w	r3, #2
 8009f0a:	d043      	beq.n	8009f94 <LoRaMacProcess+0x9b0>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8009f0c:	4ba1      	ldr	r3, [pc, #644]	; (800a194 <LoRaMacProcess+0xbb0>)
 8009f0e:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8009f12:	49a1      	ldr	r1, [pc, #644]	; (800a198 <LoRaMacProcess+0xbb4>)
 8009f14:	f891 1116 	ldrb.w	r1, [r1, #278]	; 0x116
 8009f18:	b9c1      	cbnz	r1, 8009f4c <LoRaMacProcess+0x968>
                    if( stopRetransmission == false )
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d040      	beq.n	8009fa0 <LoRaMacProcess+0x9bc>
 8009f1e:	e065      	b.n	8009fec <LoRaMacProcess+0xa08>
static void AckTimeoutRetriesFinalize( void )
{
    if( MacCtx.McpsConfirm.AckReceived == false )
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8009f20:	2302      	movs	r3, #2
 8009f22:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8009f26:	4b9c      	ldr	r3, [pc, #624]	; (800a198 <LoRaMacProcess+0xbb4>)
 8009f28:	f503 72f0 	add.w	r2, r3, #480	; 0x1e0
 8009f2c:	9216      	str	r2, [sp, #88]	; 0x58
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8009f2e:	f503 721d 	add.w	r2, r3, #628	; 0x274
 8009f32:	9217      	str	r2, [sp, #92]	; 0x5c
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8009f34:	a916      	add	r1, sp, #88	; 0x58
 8009f36:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009f3a:	f002 fab3 	bl	800c4a4 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8009f3e:	4b95      	ldr	r3, [pc, #596]	; (800a194 <LoRaMacProcess+0xbb0>)
 8009f40:	2200      	movs	r2, #0
 8009f42:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 8009f46:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8009f4a:	e04f      	b.n	8009fec <LoRaMacProcess+0xa08>
        if( stopRetransmission == true )
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f000 80ad 	beq.w	800a0ac <LoRaMacProcess+0xac8>
 8009f52:	e050      	b.n	8009ff6 <LoRaMacProcess+0xa12>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8009f54:	4891      	ldr	r0, [pc, #580]	; (800a19c <LoRaMacProcess+0xbb8>)
 8009f56:	f001 fd71 	bl	800ba3c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8009f5a:	f001 fda1 	bl	800baa0 <LoRaMacConfirmQueueGetCnt>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	f000 80d4 	beq.w	800a10c <LoRaMacProcess+0xb28>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009f64:	4a8b      	ldr	r2, [pc, #556]	; (800a194 <LoRaMacProcess+0xbb0>)
 8009f66:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8009f6a:	f043 0304 	orr.w	r3, r3, #4
 8009f6e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8009f72:	e0cb      	b.n	800a10c <LoRaMacProcess+0xb28>
        OpenContinuousRxCWindow( );
 8009f74:	f7ff f86c 	bl	8009050 <OpenContinuousRxCWindow>
 8009f78:	f7ff bb8e 	b.w	8009698 <LoRaMacProcess+0xb4>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8009f7c:	4b85      	ldr	r3, [pc, #532]	; (800a194 <LoRaMacProcess+0xbb0>)
 8009f7e:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 8009f82:	f36f 1286 	bfc	r2, #6, #1
 8009f86:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
        LoRaMacHandleNvm( &Nvm );
 8009f8a:	4883      	ldr	r0, [pc, #524]	; (800a198 <LoRaMacProcess+0xbb4>)
 8009f8c:	f7ff f904 	bl	8009198 <LoRaMacHandleNvm>
}
 8009f90:	f7ff bb89 	b.w	80096a6 <LoRaMacProcess+0xc2>
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8009f94:	4b80      	ldr	r3, [pc, #512]	; (800a198 <LoRaMacProcess+0xbb4>)
 8009f96:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f040 8086 	bne.w	800a0ac <LoRaMacProcess+0xac8>
        MacCtx.AckTimeoutRetriesCounter++;
 8009fa0:	1c53      	adds	r3, r2, #1
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	4a7b      	ldr	r2, [pc, #492]	; (800a194 <LoRaMacProcess+0xbb0>)
 8009fa6:	f882 3412 	strb.w	r3, [r2, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8009faa:	f013 0f01 	tst.w	r3, #1
 8009fae:	d07d      	beq.n	800a0ac <LoRaMacProcess+0xac8>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8009fb0:	2322      	movs	r3, #34	; 0x22
 8009fb2:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009fb6:	4c78      	ldr	r4, [pc, #480]	; (800a198 <LoRaMacProcess+0xbb4>)
 8009fb8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8009fbc:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009fc0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8009fc4:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009fc8:	a916      	add	r1, sp, #88	; 0x58
 8009fca:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009fce:	f002 fa52 	bl	800c476 <RegionGetPhyParam>
 8009fd2:	900c      	str	r0, [sp, #48]	; 0x30
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8009fd4:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 8009fd8:	e068      	b.n	800a0ac <LoRaMacProcess+0xac8>
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8009fda:	4b6f      	ldr	r3, [pc, #444]	; (800a198 <LoRaMacProcess+0xbb4>)
 8009fdc:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8009fe0:	b94b      	cbnz	r3, 8009ff6 <LoRaMacProcess+0xa12>
    if( MacCtx.McpsConfirm.AckReceived == false )
 8009fe2:	4b6c      	ldr	r3, [pc, #432]	; (800a194 <LoRaMacProcess+0xbb0>)
 8009fe4:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d099      	beq.n	8009f20 <LoRaMacProcess+0x93c>
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8009fec:	4b69      	ldr	r3, [pc, #420]	; (800a194 <LoRaMacProcess+0xbb0>)
 8009fee:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8009ff2:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            TimerStop( &MacCtx.TxDelayedTimer );
 8009ff6:	4c67      	ldr	r4, [pc, #412]	; (800a194 <LoRaMacProcess+0xbb0>)
 8009ff8:	f504 705a 	add.w	r0, r4, #872	; 0x368
 8009ffc:	f006 fac4 	bl	8010588 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800a000:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800a004:	f023 0320 	bic.w	r3, r3, #32
 800a008:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800a00c:	f7fe fa72 	bl	80084f4 <StopRetransmission>
 800a010:	e058      	b.n	800a0c4 <LoRaMacProcess+0xae0>
    switch( addrID )
 800a012:	f1bb 0f01 	cmp.w	fp, #1
 800a016:	f43f adb1 	beq.w	8009b7c <LoRaMacProcess+0x598>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a01a:	4b5e      	ldr	r3, [pc, #376]	; (800a194 <LoRaMacProcess+0xbb0>)
 800a01c:	2201      	movs	r2, #1
 800a01e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a022:	9a07      	ldr	r2, [sp, #28]
 800a024:	4b5b      	ldr	r3, [pc, #364]	; (800a194 <LoRaMacProcess+0xbb0>)
 800a026:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800a02a:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
                PrepareRxDoneAbort( );
 800a02e:	f7fe facd 	bl	80085cc <PrepareRxDoneAbort>
                return;
 800a032:	f7ff baec 	b.w	800960e <LoRaMacProcess+0x2a>
        *fType = FRAME_TYPE_A;
 800a036:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800a03a:	e08b      	b.n	800a154 <LoRaMacProcess+0xb70>
        *fType = FRAME_TYPE_B;
 800a03c:	f04f 0a01 	mov.w	sl, #1
 800a040:	e088      	b.n	800a154 <LoRaMacProcess+0xb70>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a042:	4b54      	ldr	r3, [pc, #336]	; (800a194 <LoRaMacProcess+0xbb0>)
 800a044:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800a048:	f36f 0282 	bfc	r2, #2, #1
 800a04c:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    MacCtx.AllowRequests = requestState;
 800a050:	2201      	movs	r2, #1
 800a052:	f883 2486 	strb.w	r2, [r3, #1158]	; 0x486
        if( reqEvents.Bits.McpsReq == 1 )
 800a056:	e04e      	b.n	800a0f6 <LoRaMacProcess+0xb12>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a058:	4b4e      	ldr	r3, [pc, #312]	; (800a194 <LoRaMacProcess+0xbb0>)
 800a05a:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800a05e:	f36f 0282 	bfc	r2, #2, #1
 800a062:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    MacCtx.AllowRequests = requestState;
 800a066:	2201      	movs	r2, #1
 800a068:	f883 2486 	strb.w	r2, [r3, #1158]	; 0x486
        if( reqEvents.Bits.McpsReq == 1 )
 800a06c:	e04a      	b.n	800a104 <LoRaMacProcess+0xb20>
    if( MacCtx.MacState == LORAMAC_IDLE )
 800a06e:	4b49      	ldr	r3, [pc, #292]	; (800a194 <LoRaMacProcess+0xbb0>)
 800a070:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a074:	2b00      	cmp	r3, #0
 800a076:	d15a      	bne.n	800a12e <LoRaMacProcess+0xb4a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a078:	4b46      	ldr	r3, [pc, #280]	; (800a194 <LoRaMacProcess+0xbb0>)
 800a07a:	f893 4485 	ldrb.w	r4, [r3, #1157]	; 0x485
 800a07e:	e02c      	b.n	800a0da <LoRaMacProcess+0xaf6>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a080:	4b44      	ldr	r3, [pc, #272]	; (800a194 <LoRaMacProcess+0xbb0>)
 800a082:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800a086:	f013 0f04 	tst.w	r3, #4
 800a08a:	f47f aee9 	bne.w	8009e60 <LoRaMacProcess+0x87c>
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a08e:	4b41      	ldr	r3, [pc, #260]	; (800a194 <LoRaMacProcess+0xbb0>)
 800a090:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800a094:	4a3f      	ldr	r2, [pc, #252]	; (800a194 <LoRaMacProcess+0xbb0>)
 800a096:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800a09a:	2a00      	cmp	r2, #0
 800a09c:	f43f af0c 	beq.w	8009eb8 <LoRaMacProcess+0x8d4>
 800a0a0:	2a03      	cmp	r2, #3
 800a0a2:	f43f af09 	beq.w	8009eb8 <LoRaMacProcess+0x8d4>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800a0a6:	2a01      	cmp	r2, #1
 800a0a8:	f43f af20 	beq.w	8009eec <LoRaMacProcess+0x908>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800a0ac:	4b39      	ldr	r3, [pc, #228]	; (800a194 <LoRaMacProcess+0xbb0>)
 800a0ae:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800a0b2:	f36f 1245 	bfc	r2, #5, #1
 800a0b6:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	f883 0413 	strb.w	r0, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800a0c0:	f7fe ff9e 	bl	8009000 <OnTxDelayedTimerEvent>
    if( MacCtx.MacState == LORAMAC_IDLE )
 800a0c4:	4b33      	ldr	r3, [pc, #204]	; (800a194 <LoRaMacProcess+0xbb0>)
 800a0c6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a0ca:	bb83      	cbnz	r3, 800a12e <LoRaMacProcess+0xb4a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a0cc:	4b31      	ldr	r3, [pc, #196]	; (800a194 <LoRaMacProcess+0xbb0>)
 800a0ce:	f893 4485 	ldrb.w	r4, [r3, #1157]	; 0x485
 800a0d2:	f014 0f01 	tst.w	r4, #1
 800a0d6:	f43f aeba 	beq.w	8009e4e <LoRaMacProcess+0x86a>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800a0da:	4a2e      	ldr	r2, [pc, #184]	; (800a194 <LoRaMacProcess+0xbb0>)
 800a0dc:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800a0e0:	f36f 0300 	bfc	r3, #0, #1
 800a0e4:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a0e8:	f013 0f04 	tst.w	r3, #4
 800a0ec:	d1a9      	bne.n	800a042 <LoRaMacProcess+0xa5e>
    MacCtx.AllowRequests = requestState;
 800a0ee:	4b29      	ldr	r3, [pc, #164]	; (800a194 <LoRaMacProcess+0xbb0>)
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 2486 	strb.w	r2, [r3, #1158]	; 0x486
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800a0f6:	4827      	ldr	r0, [pc, #156]	; (800a194 <LoRaMacProcess+0xbb0>)
 800a0f8:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f500 6087 	add.w	r0, r0, #1080	; 0x438
 800a102:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800a104:	f014 0f04 	tst.w	r4, #4
 800a108:	f47f af24 	bne.w	8009f54 <LoRaMacProcess+0x970>
        LoRaMacClassBResumeBeaconing( );
 800a10c:	f001 fa6b 	bl	800b5e6 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800a110:	4b20      	ldr	r3, [pc, #128]	; (800a194 <LoRaMacProcess+0xbb0>)
 800a112:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800a116:	f36f 1245 	bfc	r2, #5, #1
 800a11a:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    if( MacCtx.MacState == LORAMAC_IDLE )
 800a11e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a122:	b923      	cbnz	r3, 800a12e <LoRaMacProcess+0xb4a>
        bool isStickyMacCommandPending = false;
 800a124:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800a128:	a816      	add	r0, sp, #88	; 0x58
 800a12a:	f001 fb7d 	bl	800b828 <LoRaMacCommandsStickyCmdsPending>
    MacCtx.AllowRequests = requestState;
 800a12e:	4b19      	ldr	r3, [pc, #100]	; (800a194 <LoRaMacProcess+0xbb0>)
 800a130:	2201      	movs	r2, #1
 800a132:	f883 2486 	strb.w	r2, [r3, #1158]	; 0x486
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800a136:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800a13a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a13e:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
 800a142:	f7ff ba79 	b.w	8009638 <LoRaMacProcess+0x54>
    else if( macMsg->FRMPayloadSize == 0 )
 800a146:	f89d 1080 	ldrb.w	r1, [sp, #128]	; 0x80
 800a14a:	2900      	cmp	r1, #0
 800a14c:	f47f ac81 	bne.w	8009a52 <LoRaMacProcess+0x46e>
        *fType = FRAME_TYPE_B;
 800a150:	f04f 0a01 	mov.w	sl, #1
            downLinkCounter = 0;
 800a154:	2100      	movs	r1, #0
 800a156:	9107      	str	r1, [sp, #28]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a158:	490f      	ldr	r1, [pc, #60]	; (800a198 <LoRaMacProcess+0xbb4>)
 800a15a:	f8d1 80dc 	ldr.w	r8, [r1, #220]	; 0xdc
 800a15e:	4543      	cmp	r3, r8
 800a160:	f43f ac80 	beq.w	8009a64 <LoRaMacProcess+0x480>
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800a164:	2315      	movs	r3, #21
 800a166:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a16a:	f8df 802c 	ldr.w	r8, [pc, #44]	; 800a198 <LoRaMacProcess+0xbb4>
 800a16e:	a908      	add	r1, sp, #32
 800a170:	f898 0040 	ldrb.w	r0, [r8, #64]	; 0x40
 800a174:	f002 f97f 	bl	800c476 <RegionGetPhyParam>
 800a178:	9006      	str	r0, [sp, #24]
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800a17a:	b281      	uxth	r1, r0
 800a17c:	f898 9116 	ldrb.w	r9, [r8, #278]	; 0x116
 800a180:	f04f 0b01 	mov.w	fp, #1
            if( lrWanVersion.Fields.Minor == 1 )
 800a184:	f1b9 0f01 	cmp.w	r9, #1
 800a188:	f43f acfc 	beq.w	8009b84 <LoRaMacProcess+0x5a0>
 800a18c:	46b8      	mov	r8, r7
                *fCntID = FCNT_DOWN;
 800a18e:	f04f 0903 	mov.w	r9, #3
 800a192:	e493      	b.n	8009abc <LoRaMacProcess+0x4d8>
 800a194:	200019fc 	.word	0x200019fc
 800a198:	200012d0 	.word	0x200012d0
 800a19c:	20001e48 	.word	0x20001e48

0800a1a0 <LoRaMacInitialization>:
    }
    return 0;
}

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800a1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a4:	b08b      	sub	sp, #44	; 0x2c
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	f000 818c 	beq.w	800a4c4 <LoRaMacInitialization+0x324>
 800a1ac:	460e      	mov	r6, r1
 800a1ae:	4691      	mov	r9, r2
 800a1b0:	4680      	mov	r8, r0
 800a1b2:	2900      	cmp	r1, #0
 800a1b4:	f000 8188 	beq.w	800a4c8 <LoRaMacInitialization+0x328>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a1b8:	6803      	ldr	r3, [r0, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 8186 	beq.w	800a4cc <LoRaMacInitialization+0x32c>
 800a1c0:	6843      	ldr	r3, [r0, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f000 8184 	beq.w	800a4d0 <LoRaMacInitialization+0x330>
        ( primitives->MacMcpsIndication == NULL ) ||
 800a1c8:	6883      	ldr	r3, [r0, #8]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	f000 8182 	beq.w	800a4d4 <LoRaMacInitialization+0x334>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a1d0:	68c3      	ldr	r3, [r0, #12]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	f000 8180 	beq.w	800a4d8 <LoRaMacInitialization+0x338>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800a1d8:	4610      	mov	r0, r2
 800a1da:	f002 f947 	bl	800c46c <RegionIsActive>
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	f000 817c 	beq.w	800a4dc <LoRaMacInitialization+0x33c>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800a1e4:	4640      	mov	r0, r8
 800a1e6:	f001 fb7f 	bl	800b8e8 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800a1ea:	4cc3      	ldr	r4, [pc, #780]	; (800a4f8 <LoRaMacInitialization+0x358>)
 800a1ec:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	f003 fc5c 	bl	800dab0 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800a1f8:	4dc0      	ldr	r5, [pc, #768]	; (800a4fc <LoRaMacInitialization+0x35c>)
 800a1fa:	f240 520c 	movw	r2, #1292	; 0x50c
 800a1fe:	2100      	movs	r1, #0
 800a200:	4628      	mov	r0, r5
 800a202:	f003 fc55 	bl	800dab0 <memset1>

    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 800a206:	f04f 0a01 	mov.w	sl, #1
 800a20a:	f885 a412 	strb.w	sl, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 800a20e:	f885 a411 	strb.w	sl, [r5, #1041]	; 0x411
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800a212:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800a216:	2700      	movs	r7, #0
 800a218:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800a21c:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800a220:	4bb7      	ldr	r3, [pc, #732]	; (800a500 <LoRaMacInitialization+0x360>)
 800a222:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a226:	230f      	movs	r3, #15
 800a228:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a22c:	a908      	add	r1, sp, #32
 800a22e:	4648      	mov	r0, r9
 800a230:	f002 f921 	bl	800c476 <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800a234:	1bc0      	subs	r0, r0, r7
 800a236:	bf18      	it	ne
 800a238:	2001      	movne	r0, #1
 800a23a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800a23e:	f04f 0b0a 	mov.w	fp, #10
 800a242:	f88d b020 	strb.w	fp, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a246:	a908      	add	r1, sp, #32
 800a248:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a24c:	f002 f913 	bl	800c476 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800a250:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800a254:	f04f 0906 	mov.w	r9, #6
 800a258:	f88d 9020 	strb.w	r9, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a25c:	a908      	add	r1, sp, #32
 800a25e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a262:	f002 f908 	bl	800c476 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800a266:	f884 00cd 	strb.w	r0, [r4, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800a26a:	2310      	movs	r3, #16
 800a26c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a270:	a908      	add	r1, sp, #32
 800a272:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a276:	f002 f8fe 	bl	800c476 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800a27a:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800a27e:	2311      	movs	r3, #17
 800a280:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a284:	a908      	add	r1, sp, #32
 800a286:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a28a:	f002 f8f4 	bl	800c476 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800a28e:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800a292:	2312      	movs	r3, #18
 800a294:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a298:	a908      	add	r1, sp, #32
 800a29a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a29e:	f002 f8ea 	bl	800c476 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800a2a2:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800a2a6:	2313      	movs	r3, #19
 800a2a8:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a2ac:	a908      	add	r1, sp, #32
 800a2ae:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a2b2:	f002 f8e0 	bl	800c476 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800a2b6:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800a2ba:	2314      	movs	r3, #20
 800a2bc:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a2c0:	a908      	add	r1, sp, #32
 800a2c2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a2c6:	f002 f8d6 	bl	800c476 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800a2ca:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800a2ce:	2317      	movs	r3, #23
 800a2d0:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a2d4:	a908      	add	r1, sp, #32
 800a2d6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a2da:	f002 f8cc 	bl	800c476 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800a2de:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800a2e2:	2318      	movs	r3, #24
 800a2e4:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a2e8:	a908      	add	r1, sp, #32
 800a2ea:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a2ee:	f002 f8c2 	bl	800c476 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800a2f2:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800a2f6:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800a2fa:	2319      	movs	r3, #25
 800a2fc:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a300:	a908      	add	r1, sp, #32
 800a302:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a306:	f002 f8b6 	bl	800c476 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800a30a:	b2c0      	uxtb	r0, r0
 800a30c:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800a310:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800a314:	231e      	movs	r3, #30
 800a316:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a31a:	a908      	add	r1, sp, #32
 800a31c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a320:	f002 f8a9 	bl	800c476 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800a324:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800a328:	231f      	movs	r3, #31
 800a32a:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a32e:	a908      	add	r1, sp, #32
 800a330:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a334:	f002 f89f 	bl	800c476 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800a338:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800a33c:	2320      	movs	r3, #32
 800a33e:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a342:	eb0d 0103 	add.w	r1, sp, r3
 800a346:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a34a:	f002 f894 	bl	800c476 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800a34e:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800a352:	2321      	movs	r3, #33	; 0x21
 800a354:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a358:	a908      	add	r1, sp, #32
 800a35a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a35e:	f002 f88a 	bl	800c476 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800a362:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800a366:	230b      	movs	r3, #11
 800a368:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a36c:	a908      	add	r1, sp, #32
 800a36e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a372:	f002 f880 	bl	800c476 <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 800a376:	f8a5 03f4 	strh.w	r0, [r5, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800a37a:	230c      	movs	r3, #12
 800a37c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a380:	a908      	add	r1, sp, #32
 800a382:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a386:	f002 f876 	bl	800c476 <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;
 800a38a:	f8a5 03f6 	strh.w	r0, [r5, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800a38e:	f884 a0a4 	strb.w	sl, [r4, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800a392:	f8c4 b088 	str.w	fp, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800a396:	f884 908c 	strb.w	r9, [r4, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800a39a:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800a39e:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800a3a2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a3a6:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800a3a8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a3ac:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800a3ae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a3b2:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800a3b4:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800a3b8:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800a3ba:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800a3be:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800a3c0:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800a3c4:	f88d 7018 	strb.w	r7, [sp, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800a3c8:	f504 73f0 	add.w	r3, r4, #480	; 0x1e0
 800a3cc:	9304      	str	r3, [sp, #16]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800a3ce:	f504 731d 	add.w	r3, r4, #628	; 0x274
 800a3d2:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a3d4:	a904      	add	r1, sp, #16
 800a3d6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a3da:	f002 f863 	bl	800c4a4 <RegionInitDefaults>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800a3de:	f8c5 6348 	str.w	r6, [r5, #840]	; 0x348
    ResetMacParameters( );
 800a3e2:	f7fe ffcf 	bl	8009384 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800a3e6:	f884 a105 	strb.w	sl, [r4, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 800a3ea:	f8c5 8344 	str.w	r8, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800a3ee:	f885 7485 	strb.w	r7, [r5, #1157]	; 0x485
    MacCtx.MacState = LORAMAC_STOPPED;
 800a3f2:	f8c5 a340 	str.w	sl, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800a3f6:	62e7      	str	r7, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800a3f8:	6327      	str	r7, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800a3fa:	9700      	str	r7, [sp, #0]
 800a3fc:	4b41      	ldr	r3, [pc, #260]	; (800a504 <LoRaMacInitialization+0x364>)
 800a3fe:	463a      	mov	r2, r7
 800a400:	f04f 31ff 	mov.w	r1, #4294967295
 800a404:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800a408:	f006 f85a 	bl	80104c0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800a40c:	9700      	str	r7, [sp, #0]
 800a40e:	4b3e      	ldr	r3, [pc, #248]	; (800a508 <LoRaMacInitialization+0x368>)
 800a410:	463a      	mov	r2, r7
 800a412:	f04f 31ff 	mov.w	r1, #4294967295
 800a416:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800a41a:	f006 f851 	bl	80104c0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800a41e:	9700      	str	r7, [sp, #0]
 800a420:	4b3a      	ldr	r3, [pc, #232]	; (800a50c <LoRaMacInitialization+0x36c>)
 800a422:	463a      	mov	r2, r7
 800a424:	f04f 31ff 	mov.w	r1, #4294967295
 800a428:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800a42c:	f006 f848 	bl	80104c0 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800a430:	9700      	str	r7, [sp, #0]
 800a432:	4b37      	ldr	r3, [pc, #220]	; (800a510 <LoRaMacInitialization+0x370>)
 800a434:	463a      	mov	r2, r7
 800a436:	f04f 31ff 	mov.w	r1, #4294967295
 800a43a:	f505 707e 	add.w	r0, r5, #1016	; 0x3f8
 800a43e:	f006 f83f 	bl	80104c0 <UTIL_TIMER_Create>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800a442:	af02      	add	r7, sp, #8
 800a444:	4638      	mov	r0, r7
 800a446:	f005 fd35 	bl	800feb4 <SysTimeGetMcuTime>
 800a44a:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 800a44e:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a452:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800a456:	4b2f      	ldr	r3, [pc, #188]	; (800a514 <LoRaMacInitialization+0x374>)
 800a458:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800a45c:	4b2e      	ldr	r3, [pc, #184]	; (800a518 <LoRaMacInitialization+0x378>)
 800a45e:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800a462:	4b2e      	ldr	r3, [pc, #184]	; (800a51c <LoRaMacInitialization+0x37c>)
 800a464:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800a468:	4b2d      	ldr	r3, [pc, #180]	; (800a520 <LoRaMacInitialization+0x380>)
 800a46a:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800a46e:	4b2d      	ldr	r3, [pc, #180]	; (800a524 <LoRaMacInitialization+0x384>)
 800a470:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800a474:	4b2c      	ldr	r3, [pc, #176]	; (800a528 <LoRaMacInitialization+0x388>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 800a47c:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800a47e:	68b1      	ldr	r1, [r6, #8]
 800a480:	f504 7090 	add.w	r0, r4, #288	; 0x120
 800a484:	f7fc fed8 	bl	8007238 <SecureElementInit>
 800a488:	bb68      	cbnz	r0, 800a4e6 <LoRaMacInitialization+0x346>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800a48a:	4620      	mov	r0, r4
 800a48c:	f001 fc3a 	bl	800bd04 <LoRaMacCryptoInit>
 800a490:	bb58      	cbnz	r0, 800a4ea <LoRaMacInitialization+0x34a>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800a492:	f001 f8bb 	bl	800b60c <LoRaMacCommandsInit>
 800a496:	bb50      	cbnz	r0, 800a4ee <LoRaMacInitialization+0x34e>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800a498:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 800a49c:	f001 fc9a 	bl	800bdd4 <LoRaMacCryptoSetMulticastReference>
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	bb30      	cbnz	r0, 800a4f2 <LoRaMacInitialization+0x352>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800a4a4:	4d20      	ldr	r5, [pc, #128]	; (800a528 <LoRaMacInitialization+0x388>)
 800a4a6:	696b      	ldr	r3, [r5, #20]
 800a4a8:	4798      	blx	r3
 800a4aa:	f003 fabf 	bl	800da2c <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800a4ae:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a4b0:	4a11      	ldr	r2, [pc, #68]	; (800a4f8 <LoRaMacInitialization+0x358>)
 800a4b2:	f892 0105 	ldrb.w	r0, [r2, #261]	; 0x105
 800a4b6:	4798      	blx	r3
    Radio.Sleep( );
 800a4b8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a4ba:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 800a4bc:	4b0f      	ldr	r3, [pc, #60]	; (800a4fc <LoRaMacInitialization+0x35c>)
 800a4be:	f883 a486 	strb.w	sl, [r3, #1158]	; 0x486
}
 800a4c2:	e00c      	b.n	800a4de <LoRaMacInitialization+0x33e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a4c4:	2403      	movs	r4, #3
 800a4c6:	e00a      	b.n	800a4de <LoRaMacInitialization+0x33e>
 800a4c8:	2403      	movs	r4, #3
 800a4ca:	e008      	b.n	800a4de <LoRaMacInitialization+0x33e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a4cc:	2403      	movs	r4, #3
 800a4ce:	e006      	b.n	800a4de <LoRaMacInitialization+0x33e>
 800a4d0:	2403      	movs	r4, #3
 800a4d2:	e004      	b.n	800a4de <LoRaMacInitialization+0x33e>
 800a4d4:	2403      	movs	r4, #3
 800a4d6:	e002      	b.n	800a4de <LoRaMacInitialization+0x33e>
 800a4d8:	2403      	movs	r4, #3
 800a4da:	e000      	b.n	800a4de <LoRaMacInitialization+0x33e>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800a4dc:	2409      	movs	r4, #9

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 800a4de:	4620      	mov	r0, r4
 800a4e0:	b00b      	add	sp, #44	; 0x2c
 800a4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a4e6:	2411      	movs	r4, #17
 800a4e8:	e7f9      	b.n	800a4de <LoRaMacInitialization+0x33e>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a4ea:	2411      	movs	r4, #17
 800a4ec:	e7f7      	b.n	800a4de <LoRaMacInitialization+0x33e>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a4ee:	2413      	movs	r4, #19
 800a4f0:	e7f5      	b.n	800a4de <LoRaMacInitialization+0x33e>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a4f2:	2411      	movs	r4, #17
 800a4f4:	e7f3      	b.n	800a4de <LoRaMacInitialization+0x33e>
 800a4f6:	bf00      	nop
 800a4f8:	200012d0 	.word	0x200012d0
 800a4fc:	200019fc 	.word	0x200019fc
 800a500:	01000300 	.word	0x01000300
 800a504:	08009001 	.word	0x08009001
 800a508:	08009151 	.word	0x08009151
 800a50c:	08009101 	.word	0x08009101
 800a510:	08008581 	.word	0x08008581
 800a514:	0800932d 	.word	0x0800932d
 800a518:	080092d5 	.word	0x080092d5
 800a51c:	080084b5 	.word	0x080084b5
 800a520:	080092a1 	.word	0x080092a1
 800a524:	0800926d 	.word	0x0800926d
 800a528:	08011584 	.word	0x08011584

0800a52c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800a52c:	2000      	movs	r0, #0
 800a52e:	4b02      	ldr	r3, [pc, #8]	; (800a538 <LoRaMacStart+0xc>)
 800a530:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop
 800a538:	200019fc 	.word	0x200019fc

0800a53c <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800a53c:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800a53e:	f7ff f841 	bl	80095c4 <LoRaMacIsBusy>
 800a542:	b130      	cbz	r0, 800a552 <LoRaMacStop+0x16>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800a544:	4b05      	ldr	r3, [pc, #20]	; (800a55c <LoRaMacStop+0x20>)
 800a546:	f8d3 0340 	ldr.w	r0, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800a54a:	3801      	subs	r0, #1
 800a54c:	bf18      	it	ne
 800a54e:	2001      	movne	r0, #1
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
}
 800a550:	bd08      	pop	{r3, pc}
        MacCtx.MacState = LORAMAC_STOPPED;
 800a552:	4b02      	ldr	r3, [pc, #8]	; (800a55c <LoRaMacStop+0x20>)
 800a554:	2201      	movs	r2, #1
 800a556:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800a55a:	e7f9      	b.n	800a550 <LoRaMacStop+0x14>
 800a55c:	200019fc 	.word	0x200019fc

0800a560 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800a560:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800a562:	4c14      	ldr	r4, [pc, #80]	; (800a5b4 <LoRaMacHalt+0x54>)
 800a564:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800a568:	f006 f80e 	bl	8010588 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800a56c:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800a570:	f006 f80a 	bl	8010588 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800a574:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800a578:	f006 f806 	bl	8010588 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 800a57c:	f504 707e 	add.w	r0, r4, #1016	; 0x3f8
 800a580:	f006 f802 	bl	8010588 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800a584:	f001 f82e 	bl	800b5e4 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800a588:	4b0b      	ldr	r3, [pc, #44]	; (800a5b8 <LoRaMacHalt+0x58>)
 800a58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a58c:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800a58e:	2500      	movs	r5, #0
 800a590:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 800a594:	4e09      	ldr	r6, [pc, #36]	; (800a5bc <LoRaMacHalt+0x5c>)
 800a596:	4630      	mov	r0, r6
 800a598:	f7fe fdfe 	bl	8009198 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800a59c:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800a5a0:	4631      	mov	r1, r6
 800a5a2:	4807      	ldr	r0, [pc, #28]	; (800a5c0 <LoRaMacHalt+0x60>)
 800a5a4:	f003 fa6a 	bl	800da7c <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	bd70      	pop	{r4, r5, r6, pc}
 800a5b2:	bf00      	nop
 800a5b4:	200019fc 	.word	0x200019fc
 800a5b8:	08011584 	.word	0x08011584
 800a5bc:	200012d0 	.word	0x200012d0
 800a5c0:	20000ba8 	.word	0x20000ba8

0800a5c4 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800a5c4:	b530      	push	{r4, r5, lr}
 800a5c6:	b089      	sub	sp, #36	; 0x24
 800a5c8:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a5ca:	4b2e      	ldr	r3, [pc, #184]	; (800a684 <LoRaMacQueryTxPossible+0xc0>)
 800a5cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5ce:	9202      	str	r2, [sp, #8]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a5d0:	f893 00cd 	ldrb.w	r0, [r3, #205]	; 0xcd
 800a5d4:	f88d 0007 	strb.w	r0, [sp, #7]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a5d8:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800a5dc:	f88d 3006 	strb.w	r3, [sp, #6]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	9300      	str	r3, [sp, #0]

    if( txInfo == NULL )
 800a5e4:	2900      	cmp	r1, #0
 800a5e6:	d048      	beq.n	800a67a <LoRaMacQueryTxPossible+0xb6>
 800a5e8:	460d      	mov	r5, r1
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 800a5ea:	4b26      	ldr	r3, [pc, #152]	; (800a684 <LoRaMacQueryTxPossible+0xc0>)
 800a5ec:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 800a5f0:	9103      	str	r1, [sp, #12]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	f88d 1010 	strb.w	r1, [sp, #16]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800a5f8:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
 800a5fc:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a600:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800a602:	4a21      	ldr	r2, [pc, #132]	; (800a688 <LoRaMacQueryTxPossible+0xc4>)
 800a604:	f8b2 13f4 	ldrh.w	r1, [r2, #1012]	; 0x3f4
 800a608:	f8ad 1018 	strh.w	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800a60c:	f8b2 23f6 	ldrh.w	r2, [r2, #1014]	; 0x3f6
 800a610:	f8ad 201a 	strh.w	r2, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a614:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800a618:	f88d 201c 	strb.w	r2, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a61c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800a620:	f88d 201d 	strb.w	r2, [sp, #29]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a624:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800a628:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 800a62c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a630:	f88d 301f 	strb.w	r3, [sp, #31]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800a634:	ab02      	add	r3, sp, #8
 800a636:	f10d 0206 	add.w	r2, sp, #6
 800a63a:	f10d 0107 	add.w	r1, sp, #7
 800a63e:	a803      	add	r0, sp, #12
 800a640:	f000 ff42 	bl	800b4c8 <LoRaMacAdrCalcNext>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800a644:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800a648:	f7fd ff7c 	bl	8008544 <GetMaxAppPayloadWithoutFOptsLength>
 800a64c:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a64e:	4668      	mov	r0, sp
 800a650:	f001 f8ac 	bl	800b7ac <LoRaMacCommandsGetSizeSerializedCmds>
 800a654:	b998      	cbnz	r0, 800a67e <LoRaMacQueryTxPossible+0xba>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800a656:	9b00      	ldr	r3, [sp, #0]
 800a658:	2b0f      	cmp	r3, #15
 800a65a:	d80a      	bhi.n	800a672 <LoRaMacQueryTxPossible+0xae>
 800a65c:	786a      	ldrb	r2, [r5, #1]
 800a65e:	4293      	cmp	r3, r2
 800a660:	d807      	bhi.n	800a672 <LoRaMacQueryTxPossible+0xae>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800a662:	1ad1      	subs	r1, r2, r3
 800a664:	7029      	strb	r1, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800a666:	4423      	add	r3, r4
        {
            return LORAMAC_STATUS_OK;
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800a668:	429a      	cmp	r2, r3
 800a66a:	bf38      	it	cc
 800a66c:	2008      	movcc	r0, #8
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800a66e:	b009      	add	sp, #36	; 0x24
 800a670:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800a672:	2300      	movs	r3, #0
 800a674:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800a676:	2008      	movs	r0, #8
 800a678:	e7f9      	b.n	800a66e <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a67a:	2003      	movs	r0, #3
 800a67c:	e7f7      	b.n	800a66e <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a67e:	2013      	movs	r0, #19
 800a680:	e7f5      	b.n	800a66e <LoRaMacQueryTxPossible+0xaa>
 800a682:	bf00      	nop
 800a684:	200012d0 	.word	0x200012d0
 800a688:	200019fc 	.word	0x200019fc

0800a68c <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800a68c:	2800      	cmp	r0, #0
 800a68e:	f000 8121 	beq.w	800a8d4 <LoRaMacMibGetRequestConfirm+0x248>
{
 800a692:	b510      	push	{r4, lr}
 800a694:	b084      	sub	sp, #16
 800a696:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800a698:	7800      	ldrb	r0, [r0, #0]
 800a69a:	2837      	cmp	r0, #55	; 0x37
 800a69c:	f200 8116 	bhi.w	800a8cc <LoRaMacMibGetRequestConfirm+0x240>
 800a6a0:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a6a4:	003e0038 	.word	0x003e0038
 800a6a8:	00490044 	.word	0x00490044
 800a6ac:	0054004e 	.word	0x0054004e
 800a6b0:	0114005a 	.word	0x0114005a
 800a6b4:	01140114 	.word	0x01140114
 800a6b8:	01140114 	.word	0x01140114
 800a6bc:	01140114 	.word	0x01140114
 800a6c0:	00600114 	.word	0x00600114
 800a6c4:	006c0066 	.word	0x006c0066
 800a6c8:	00800078 	.word	0x00800078
 800a6cc:	00900088 	.word	0x00900088
 800a6d0:	009800a4 	.word	0x009800a4
 800a6d4:	00b600b0 	.word	0x00b600b0
 800a6d8:	00c000bb 	.word	0x00c000bb
 800a6dc:	00ca00c5 	.word	0x00ca00c5
 800a6e0:	00d500cf 	.word	0x00d500cf
 800a6e4:	00db00e1 	.word	0x00db00e1
 800a6e8:	00ec00e7 	.word	0x00ec00e7
 800a6ec:	00ff00f2 	.word	0x00ff00f2
 800a6f0:	00fb00f7 	.word	0x00fb00f7
 800a6f4:	01050114 	.word	0x01050114
 800a6f8:	01140114 	.word	0x01140114
 800a6fc:	01140114 	.word	0x01140114
 800a700:	01140114 	.word	0x01140114
 800a704:	01140114 	.word	0x01140114
 800a708:	01140114 	.word	0x01140114
 800a70c:	01140114 	.word	0x01140114
 800a710:	010e0114 	.word	0x010e0114
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800a714:	4b70      	ldr	r3, [pc, #448]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a716:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a71a:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800a71c:	b004      	add	sp, #16
 800a71e:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a720:	4b6d      	ldr	r3, [pc, #436]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a722:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a726:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a728:	2000      	movs	r0, #0
            break;
 800a72a:	e7f7      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800a72c:	f7fc ffd6 	bl	80076dc <SecureElementGetDevEui>
 800a730:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a732:	2000      	movs	r0, #0
            break;
 800a734:	e7f2      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800a736:	f7fc ffe7 	bl	8007708 <SecureElementGetJoinEui>
 800a73a:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a73c:	2000      	movs	r0, #0
            break;
 800a73e:	e7ed      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800a740:	4b65      	ldr	r3, [pc, #404]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a742:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800a746:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a748:	2000      	movs	r0, #0
            break;
 800a74a:	e7e7      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800a74c:	4b62      	ldr	r3, [pc, #392]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a74e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800a752:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a754:	2000      	movs	r0, #0
            break;
 800a756:	e7e1      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800a758:	4b5f      	ldr	r3, [pc, #380]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a75a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a75e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a760:	2000      	movs	r0, #0
            break;
 800a762:	e7db      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800a764:	4b5c      	ldr	r3, [pc, #368]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a766:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800a76a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a76c:	2000      	movs	r0, #0
            break;
 800a76e:	e7d5      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800a770:	4b59      	ldr	r3, [pc, #356]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a772:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a776:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a778:	2000      	movs	r0, #0
            break;
 800a77a:	e7cf      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            getPhy.Attribute = PHY_CHANNELS;
 800a77c:	231d      	movs	r3, #29
 800a77e:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a782:	a902      	add	r1, sp, #8
 800a784:	4b54      	ldr	r3, [pc, #336]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a786:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a78a:	f001 fe74 	bl	800c476 <RegionGetPhyParam>
            mibGet->Param.ChannelList = phyParam.Channels;
 800a78e:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a790:	2000      	movs	r0, #0
            break;
 800a792:	e7c3      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800a794:	3404      	adds	r4, #4
 800a796:	4b51      	ldr	r3, [pc, #324]	; (800a8dc <LoRaMacMibGetRequestConfirm+0x250>)
 800a798:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a79c:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7a0:	2000      	movs	r0, #0
            break;
 800a7a2:	e7bb      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800a7a4:	3404      	adds	r4, #4
 800a7a6:	4b4e      	ldr	r3, [pc, #312]	; (800a8e0 <LoRaMacMibGetRequestConfirm+0x254>)
 800a7a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a7ac:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7b0:	2000      	movs	r0, #0
            break;
 800a7b2:	e7b3      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800a7b4:	3404      	adds	r4, #4
 800a7b6:	4b4b      	ldr	r3, [pc, #300]	; (800a8e4 <LoRaMacMibGetRequestConfirm+0x258>)
 800a7b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a7bc:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7c0:	2000      	movs	r0, #0
            break;
 800a7c2:	e7ab      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800a7c4:	3404      	adds	r4, #4
 800a7c6:	4b48      	ldr	r3, [pc, #288]	; (800a8e8 <LoRaMacMibGetRequestConfirm+0x25c>)
 800a7c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a7cc:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7d0:	2000      	movs	r0, #0
            break;
 800a7d2:	e7a3      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800a7d4:	231b      	movs	r3, #27
 800a7d6:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a7da:	a902      	add	r1, sp, #8
 800a7dc:	4b3e      	ldr	r3, [pc, #248]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a7de:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a7e2:	f001 fe48 	bl	800c476 <RegionGetPhyParam>
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800a7e6:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7e8:	2000      	movs	r0, #0
            break;
 800a7ea:	e797      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800a7ec:	231a      	movs	r3, #26
 800a7ee:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a7f2:	a902      	add	r1, sp, #8
 800a7f4:	4b38      	ldr	r3, [pc, #224]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a7f6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a7fa:	f001 fe3c 	bl	800c476 <RegionGetPhyParam>
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800a7fe:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a800:	2000      	movs	r0, #0
            break;
 800a802:	e78b      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800a804:	4b34      	ldr	r3, [pc, #208]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a806:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a80a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a80c:	2000      	movs	r0, #0
            break;
 800a80e:	e785      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800a810:	4b31      	ldr	r3, [pc, #196]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a814:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a816:	2000      	movs	r0, #0
            break;
 800a818:	e780      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800a81a:	4b2f      	ldr	r3, [pc, #188]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a81c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a81e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a820:	2000      	movs	r0, #0
            break;
 800a822:	e77b      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800a824:	4b2c      	ldr	r3, [pc, #176]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a828:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a82a:	2000      	movs	r0, #0
            break;
 800a82c:	e776      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800a82e:	4b2a      	ldr	r3, [pc, #168]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a832:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a834:	2000      	movs	r0, #0
            break;
 800a836:	e771      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800a838:	4b27      	ldr	r3, [pc, #156]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a83a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a83c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a83e:	2000      	movs	r0, #0
            break;
 800a840:	e76c      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a842:	4b25      	ldr	r3, [pc, #148]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a844:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 800a848:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a84a:	2000      	movs	r0, #0
            break;
 800a84c:	e766      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800a84e:	4b22      	ldr	r3, [pc, #136]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a850:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800a854:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a856:	2000      	movs	r0, #0
            break;
 800a858:	e760      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a85a:	4b1f      	ldr	r3, [pc, #124]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a85c:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800a860:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a862:	2000      	movs	r0, #0
            break;
 800a864:	e75a      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a866:	4b1c      	ldr	r3, [pc, #112]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a868:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800a86c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a86e:	2000      	movs	r0, #0
            break;
 800a870:	e754      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800a872:	4b19      	ldr	r3, [pc, #100]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a876:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a878:	2000      	movs	r0, #0
            break;
 800a87a:	e74f      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800a87c:	4b16      	ldr	r3, [pc, #88]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a87e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a882:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a884:	2000      	movs	r0, #0
            break;
 800a886:	e749      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800a888:	4b13      	ldr	r3, [pc, #76]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a88a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a88c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a88e:	2000      	movs	r0, #0
            break;
 800a890:	e744      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.Contexts = &Nvm;
 800a892:	4b11      	ldr	r3, [pc, #68]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a894:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a896:	2000      	movs	r0, #0
            break;
 800a898:	e740      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.BackupContexts = &NvmBackup;
 800a89a:	4b14      	ldr	r3, [pc, #80]	; (800a8ec <LoRaMacMibGetRequestConfirm+0x260>)
 800a89c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a89e:	2000      	movs	r0, #0
            break;
 800a8a0:	e73c      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800a8a2:	4b0d      	ldr	r3, [pc, #52]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a8a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a8a8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a8aa:	2000      	movs	r0, #0
            break;
 800a8ac:	e736      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800a8ae:	4b0a      	ldr	r3, [pc, #40]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a8b0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a8b4:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800a8b6:	f001 fe9f 	bl	800c5f8 <RegionGetVersion>
 800a8ba:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a8bc:	2000      	movs	r0, #0
            break;
 800a8be:	e72d      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800a8c0:	4b05      	ldr	r3, [pc, #20]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x24c>)
 800a8c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8c6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a8c8:	2000      	movs	r0, #0
            break;
 800a8ca:	e727      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f000 fe8d 	bl	800b5ec <LoRaMacClassBMibGetRequestConfirm>
            break;
 800a8d2:	e723      	b.n	800a71c <LoRaMacMibGetRequestConfirm+0x90>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a8d4:	2003      	movs	r0, #3
}
 800a8d6:	4770      	bx	lr
 800a8d8:	200012d0 	.word	0x200012d0
 800a8dc:	20001334 	.word	0x20001334
 800a8e0:	20001378 	.word	0x20001378
 800a8e4:	2000133c 	.word	0x2000133c
 800a8e8:	20001380 	.word	0x20001380
 800a8ec:	20000ba8 	.word	0x20000ba8

0800a8f0 <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	f000 829d 	beq.w	800ae30 <LoRaMacMibSetRequestConfirm+0x540>
{
 800a8f6:	b530      	push	{r4, r5, lr}
 800a8f8:	b085      	sub	sp, #20
 800a8fa:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800a8fc:	4ba2      	ldr	r3, [pc, #648]	; (800ab88 <LoRaMacMibSetRequestConfirm+0x298>)
 800a8fe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a902:	f013 0f02 	tst.w	r3, #2
 800a906:	f040 8295 	bne.w	800ae34 <LoRaMacMibSetRequestConfirm+0x544>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800a90a:	7805      	ldrb	r5, [r0, #0]
 800a90c:	2d37      	cmp	r5, #55	; 0x37
 800a90e:	f200 828c 	bhi.w	800ae2a <LoRaMacMibSetRequestConfirm+0x53a>
 800a912:	e8df f015 	tbh	[pc, r5, lsl #1]
 800a916:	0038      	.short	0x0038
 800a918:	0045003c 	.word	0x0045003c
 800a91c:	0053004c 	.word	0x0053004c
 800a920:	005f0059 	.word	0x005f0059
 800a924:	00700065 	.word	0x00700065
 800a928:	0086007b 	.word	0x0086007b
 800a92c:	009c0091 	.word	0x009c0091
 800a930:	00b200a7 	.word	0x00b200a7
 800a934:	00c800bd 	.word	0x00c800bd
 800a938:	00ce028a 	.word	0x00ce028a
 800a93c:	010c00f3 	.word	0x010c00f3
 800a940:	016c0143 	.word	0x016c0143
 800a944:	017c015c 	.word	0x017c015c
 800a948:	018c0187 	.word	0x018c0187
 800a94c:	01960191 	.word	0x01960191
 800a950:	01a0019b 	.word	0x01a0019b
 800a954:	01e001b4 	.word	0x01e001b4
 800a958:	01f401cc 	.word	0x01f401cc
 800a95c:	020301fb 	.word	0x020301fb
 800a960:	020e0208 	.word	0x020e0208
 800a964:	0274028a 	.word	0x0274028a
 800a968:	028a028a 	.word	0x028a028a
 800a96c:	028a028a 	.word	0x028a028a
 800a970:	028a028a 	.word	0x028a028a
 800a974:	028a028a 	.word	0x028a028a
 800a978:	028a028a 	.word	0x028a028a
 800a97c:	028a028a 	.word	0x028a028a
 800a980:	028a028a 	.word	0x028a028a
 800a984:	0284      	.short	0x0284
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800a986:	7900      	ldrb	r0, [r0, #4]
 800a988:	f7fe fd9e 	bl	80094c8 <SwitchClass>
            break;
 800a98c:	e253      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800a98e:	7903      	ldrb	r3, [r0, #4]
 800a990:	2b02      	cmp	r3, #2
 800a992:	f000 8252 	beq.w	800ae3a <LoRaMacMibSetRequestConfirm+0x54a>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800a996:	4a7d      	ldr	r2, [pc, #500]	; (800ab8c <LoRaMacMibSetRequestConfirm+0x29c>)
 800a998:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a99c:	2000      	movs	r0, #0
 800a99e:	e24a      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            }
            break;
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800a9a0:	6840      	ldr	r0, [r0, #4]
 800a9a2:	f7fc fe8d 	bl	80076c0 <SecureElementSetDevEui>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	bf18      	it	ne
 800a9aa:	2003      	movne	r0, #3
 800a9ac:	e243      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            }
            break;
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800a9ae:	6840      	ldr	r0, [r0, #4]
 800a9b0:	f7fc fe9a 	bl	80076e8 <SecureElementSetJoinEui>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	bf18      	it	ne
 800a9b8:	4628      	movne	r0, r5
 800a9ba:	e23c      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            }
            break;
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800a9bc:	7902      	ldrb	r2, [r0, #4]
 800a9be:	4b73      	ldr	r3, [pc, #460]	; (800ab8c <LoRaMacMibSetRequestConfirm+0x29c>)
 800a9c0:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9c4:	2000      	movs	r0, #0
            break;
 800a9c6:	e236      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800a9c8:	6842      	ldr	r2, [r0, #4]
 800a9ca:	4b70      	ldr	r3, [pc, #448]	; (800ab8c <LoRaMacMibSetRequestConfirm+0x29c>)
 800a9cc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9d0:	2000      	movs	r0, #0
            break;
 800a9d2:	e230      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800a9d4:	6842      	ldr	r2, [r0, #4]
 800a9d6:	4b6d      	ldr	r3, [pc, #436]	; (800ab8c <LoRaMacMibSetRequestConfirm+0x29c>)
 800a9d8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9dc:	2000      	movs	r0, #0
            break;
 800a9de:	e22a      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800a9e0:	6841      	ldr	r1, [r0, #4]
 800a9e2:	2900      	cmp	r1, #0
 800a9e4:	f000 822b 	beq.w	800ae3e <LoRaMacMibSetRequestConfirm+0x54e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	f001 fb5d 	bl	800c0a8 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	bf18      	it	ne
 800a9f2:	2011      	movne	r0, #17
 800a9f4:	e21f      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            }
            break;
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800a9f6:	6841      	ldr	r1, [r0, #4]
 800a9f8:	2900      	cmp	r1, #0
 800a9fa:	f000 8222 	beq.w	800ae42 <LoRaMacMibSetRequestConfirm+0x552>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800a9fe:	2001      	movs	r0, #1
 800aa00:	f001 fb52 	bl	800c0a8 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa04:	2800      	cmp	r0, #0
 800aa06:	bf18      	it	ne
 800aa08:	2011      	movne	r0, #17
 800aa0a:	e214      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800aa0c:	6841      	ldr	r1, [r0, #4]
 800aa0e:	2900      	cmp	r1, #0
 800aa10:	f000 8219 	beq.w	800ae46 <LoRaMacMibSetRequestConfirm+0x556>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800aa14:	2002      	movs	r0, #2
 800aa16:	f001 fb47 	bl	800c0a8 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa1a:	2800      	cmp	r0, #0
 800aa1c:	bf18      	it	ne
 800aa1e:	2011      	movne	r0, #17
 800aa20:	e209      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            break;
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800aa22:	6841      	ldr	r1, [r0, #4]
 800aa24:	2900      	cmp	r1, #0
 800aa26:	f000 8210 	beq.w	800ae4a <LoRaMacMibSetRequestConfirm+0x55a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800aa2a:	2003      	movs	r0, #3
 800aa2c:	f001 fb3c 	bl	800c0a8 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa30:	2800      	cmp	r0, #0
 800aa32:	bf18      	it	ne
 800aa34:	2011      	movne	r0, #17
 800aa36:	e1fe      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            }
            break;
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800aa38:	6841      	ldr	r1, [r0, #4]
 800aa3a:	2900      	cmp	r1, #0
 800aa3c:	f000 8207 	beq.w	800ae4e <LoRaMacMibSetRequestConfirm+0x55e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800aa40:	207f      	movs	r0, #127	; 0x7f
 800aa42:	f001 fb31 	bl	800c0a8 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa46:	2800      	cmp	r0, #0
 800aa48:	bf18      	it	ne
 800aa4a:	2011      	movne	r0, #17
 800aa4c:	e1f3      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            break;
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800aa4e:	6841      	ldr	r1, [r0, #4]
 800aa50:	2900      	cmp	r1, #0
 800aa52:	f000 81fe 	beq.w	800ae52 <LoRaMacMibSetRequestConfirm+0x562>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800aa56:	2080      	movs	r0, #128	; 0x80
 800aa58:	f001 fb26 	bl	800c0a8 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	bf18      	it	ne
 800aa60:	2011      	movne	r0, #17
 800aa62:	e1e8      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            }
            break;
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800aa64:	6841      	ldr	r1, [r0, #4]
 800aa66:	2900      	cmp	r1, #0
 800aa68:	f000 81f5 	beq.w	800ae56 <LoRaMacMibSetRequestConfirm+0x566>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800aa6c:	2081      	movs	r0, #129	; 0x81
 800aa6e:	f001 fb1b 	bl	800c0a8 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa72:	2800      	cmp	r0, #0
 800aa74:	bf18      	it	ne
 800aa76:	2011      	movne	r0, #17
 800aa78:	e1dd      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            }
            break;
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800aa7a:	6841      	ldr	r1, [r0, #4]
 800aa7c:	2900      	cmp	r1, #0
 800aa7e:	f000 81ec 	beq.w	800ae5a <LoRaMacMibSetRequestConfirm+0x56a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800aa82:	2082      	movs	r0, #130	; 0x82
 800aa84:	f001 fb10 	bl	800c0a8 <LoRaMacCryptoSetKey>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	bf18      	it	ne
 800aa8c:	2011      	movne	r0, #17
 800aa8e:	e1d2      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800aa90:	7900      	ldrb	r0, [r0, #4]
 800aa92:	4b3e      	ldr	r3, [pc, #248]	; (800ab8c <LoRaMacMibSetRequestConfirm+0x29c>)
 800aa94:	f883 0105 	strb.w	r0, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800aa98:	4c3d      	ldr	r4, [pc, #244]	; (800ab90 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800aa9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa9c:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 800aa9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aaa0:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aaa2:	2000      	movs	r0, #0
            /* ST_WORKAROUND_END */
            break;
 800aaa4:	e1c7      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800aaa6:	7902      	ldrb	r2, [r0, #4]
 800aaa8:	4b38      	ldr	r3, [pc, #224]	; (800ab8c <LoRaMacMibSetRequestConfirm+0x29c>)
 800aaaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aaae:	2000      	movs	r0, #0
            break;
 800aab0:	e1c1      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800aab2:	7a03      	ldrb	r3, [r0, #8]
 800aab4:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800aab8:	4b34      	ldr	r3, [pc, #208]	; (800ab8c <LoRaMacMibSetRequestConfirm+0x29c>)
 800aaba:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800aabe:	f88d 2005 	strb.w	r2, [sp, #5]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800aac2:	2207      	movs	r2, #7
 800aac4:	a901      	add	r1, sp, #4
 800aac6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800aaca:	f001 fcf3 	bl	800c4b4 <RegionVerify>
 800aace:	b908      	cbnz	r0, 800aad4 <LoRaMacMibSetRequestConfirm+0x1e4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aad0:	2003      	movs	r0, #3
 800aad2:	e1b0      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            }
            else
            {
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800aad4:	6863      	ldr	r3, [r4, #4]
 800aad6:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800aad8:	2200      	movs	r2, #0
 800aada:	a901      	add	r1, sp, #4
 800aadc:	4b2b      	ldr	r3, [pc, #172]	; (800ab8c <LoRaMacMibSetRequestConfirm+0x29c>)
 800aade:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800aae2:	f001 fce7 	bl	800c4b4 <RegionVerify>
 800aae6:	2800      	cmp	r0, #0
 800aae8:	f000 81b9 	beq.w	800ae5e <LoRaMacMibSetRequestConfirm+0x56e>
                {
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
                }
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800aaec:	4b29      	ldr	r3, [pc, #164]	; (800ab94 <LoRaMacMibSetRequestConfirm+0x2a4>)
 800aaee:	3404      	adds	r4, #4
 800aaf0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aaf4:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aaf8:	2000      	movs	r0, #0
 800aafa:	e19c      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            /* ST_WORKAROUND_END */
            break;
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800aafc:	7a03      	ldrb	r3, [r0, #8]
 800aafe:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ab02:	4b22      	ldr	r3, [pc, #136]	; (800ab8c <LoRaMacMibSetRequestConfirm+0x29c>)
 800ab04:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ab08:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ab0c:	2207      	movs	r2, #7
 800ab0e:	a901      	add	r1, sp, #4
 800ab10:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ab14:	f001 fcce 	bl	800c4b4 <RegionVerify>
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	f000 81a2 	beq.w	800ae62 <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800ab1e:	4b1e      	ldr	r3, [pc, #120]	; (800ab98 <LoRaMacMibSetRequestConfirm+0x2a8>)
 800ab20:	3404      	adds	r4, #4
 800ab22:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ab26:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab2a:	2000      	movs	r0, #0
 800ab2c:	e183      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            }
            break;
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800ab2e:	7a03      	ldrb	r3, [r0, #8]
 800ab30:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ab34:	4b15      	ldr	r3, [pc, #84]	; (800ab8c <LoRaMacMibSetRequestConfirm+0x29c>)
 800ab36:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ab3a:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ab3e:	2207      	movs	r2, #7
 800ab40:	a901      	add	r1, sp, #4
 800ab42:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ab46:	f001 fcb5 	bl	800c4b4 <RegionVerify>
 800ab4a:	2800      	cmp	r0, #0
 800ab4c:	f000 818b 	beq.w	800ae66 <LoRaMacMibSetRequestConfirm+0x576>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800ab50:	4b0e      	ldr	r3, [pc, #56]	; (800ab8c <LoRaMacMibSetRequestConfirm+0x29c>)
 800ab52:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800ab56:	3404      	adds	r4, #4
 800ab58:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ab5c:	e882 0003 	stmia.w	r2, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800ab60:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	d001      	beq.n	800ab6c <LoRaMacMibSetRequestConfirm+0x27c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab68:	2000      	movs	r0, #0
 800ab6a:	e164      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800ab6c:	f1a2 036c 	sub.w	r3, r2, #108	; 0x6c
 800ab70:	f893 0118 	ldrb.w	r0, [r3, #280]	; 0x118
 800ab74:	2800      	cmp	r0, #0
 800ab76:	f000 815e 	beq.w	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800ab7a:	4b05      	ldr	r3, [pc, #20]	; (800ab90 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800ab7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7e:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800ab80:	f7fe fa66 	bl	8009050 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab84:	2000      	movs	r0, #0
 800ab86:	e156      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
 800ab88:	200019fc 	.word	0x200019fc
 800ab8c:	200012d0 	.word	0x200012d0
 800ab90:	08011584 	.word	0x08011584
 800ab94:	20001334 	.word	0x20001334
 800ab98:	20001378 	.word	0x20001378
            }
            break;
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800ab9c:	7a03      	ldrb	r3, [r0, #8]
 800ab9e:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800aba2:	4bb6      	ldr	r3, [pc, #728]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800aba4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800aba8:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800abac:	2207      	movs	r2, #7
 800abae:	a901      	add	r1, sp, #4
 800abb0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800abb4:	f001 fc7e 	bl	800c4b4 <RegionVerify>
 800abb8:	2800      	cmp	r0, #0
 800abba:	f000 8156 	beq.w	800ae6a <LoRaMacMibSetRequestConfirm+0x57a>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800abbe:	4bb0      	ldr	r3, [pc, #704]	; (800ae80 <LoRaMacMibSetRequestConfirm+0x590>)
 800abc0:	3404      	adds	r4, #4
 800abc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800abc6:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abca:	2000      	movs	r0, #0
 800abcc:	e133      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800abce:	6843      	ldr	r3, [r0, #4]
 800abd0:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800abd2:	2301      	movs	r3, #1
 800abd4:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800abd8:	a902      	add	r1, sp, #8
 800abda:	4ba8      	ldr	r3, [pc, #672]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800abdc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800abe0:	f001 fc7b 	bl	800c4da <RegionChanMaskSet>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800abe4:	2800      	cmp	r0, #0
 800abe6:	bf14      	ite	ne
 800abe8:	2000      	movne	r0, #0
 800abea:	2003      	moveq	r0, #3
 800abec:	e123      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            }
            break;
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800abee:	6843      	ldr	r3, [r0, #4]
 800abf0:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800abf2:	2300      	movs	r3, #0
 800abf4:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800abf8:	a902      	add	r1, sp, #8
 800abfa:	4ba0      	ldr	r3, [pc, #640]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800abfc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ac00:	f001 fc6b 	bl	800c4da <RegionChanMaskSet>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac04:	2800      	cmp	r0, #0
 800ac06:	bf14      	ite	ne
 800ac08:	2000      	movne	r0, #0
 800ac0a:	2003      	moveq	r0, #3
 800ac0c:	e113      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            }
            break;
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800ac0e:	7902      	ldrb	r2, [r0, #4]
 800ac10:	1e53      	subs	r3, r2, #1
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	2b0e      	cmp	r3, #14
 800ac16:	f200 812a 	bhi.w	800ae6e <LoRaMacMibSetRequestConfirm+0x57e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800ac1a:	4b98      	ldr	r3, [pc, #608]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800ac1c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac20:	2000      	movs	r0, #0
 800ac22:	e108      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            }
            break;
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800ac24:	6842      	ldr	r2, [r0, #4]
 800ac26:	4b95      	ldr	r3, [pc, #596]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800ac28:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac2a:	2000      	movs	r0, #0
            break;
 800ac2c:	e103      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800ac2e:	6842      	ldr	r2, [r0, #4]
 800ac30:	4b92      	ldr	r3, [pc, #584]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800ac32:	651a      	str	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac34:	2000      	movs	r0, #0
            break;
 800ac36:	e0fe      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800ac38:	6842      	ldr	r2, [r0, #4]
 800ac3a:	4b90      	ldr	r3, [pc, #576]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800ac3c:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac3e:	2000      	movs	r0, #0
            break;
 800ac40:	e0f9      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800ac42:	6842      	ldr	r2, [r0, #4]
 800ac44:	4b8d      	ldr	r3, [pc, #564]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800ac46:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac48:	2000      	movs	r0, #0
            break;
 800ac4a:	e0f4      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800ac4c:	6842      	ldr	r2, [r0, #4]
 800ac4e:	4b8b      	ldr	r3, [pc, #556]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800ac50:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac52:	2000      	movs	r0, #0
            break;
 800ac54:	e0ef      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800ac56:	7903      	ldrb	r3, [r0, #4]
 800ac58:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800ac5c:	2206      	movs	r2, #6
 800ac5e:	a901      	add	r1, sp, #4
 800ac60:	4b86      	ldr	r3, [pc, #536]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800ac62:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ac66:	f001 fc25 	bl	800c4b4 <RegionVerify>
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	f000 8101 	beq.w	800ae72 <LoRaMacMibSetRequestConfirm+0x582>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800ac70:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ac74:	4b81      	ldr	r3, [pc, #516]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800ac76:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac7a:	2000      	movs	r0, #0
 800ac7c:	e0db      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            }
            break;
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800ac7e:	7903      	ldrb	r3, [r0, #4]
 800ac80:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ac84:	4b7d      	ldr	r3, [pc, #500]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800ac86:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800ac8a:	f88d 2006 	strb.w	r2, [sp, #6]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800ac8e:	2205      	movs	r2, #5
 800ac90:	a901      	add	r1, sp, #4
 800ac92:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ac96:	f001 fc0d 	bl	800c4b4 <RegionVerify>
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	f000 80eb 	beq.w	800ae76 <LoRaMacMibSetRequestConfirm+0x586>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800aca0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800aca4:	4b75      	ldr	r3, [pc, #468]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800aca6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acaa:	2000      	movs	r0, #0
 800acac:	e0c3      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800acae:	7903      	ldrb	r3, [r0, #4]
 800acb0:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800acb4:	220a      	movs	r2, #10
 800acb6:	a901      	add	r1, sp, #4
 800acb8:	4b70      	ldr	r3, [pc, #448]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800acba:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800acbe:	f001 fbf9 	bl	800c4b4 <RegionVerify>
 800acc2:	2800      	cmp	r0, #0
 800acc4:	f000 80e2 	beq.w	800ae8c <LoRaMacMibSetRequestConfirm+0x59c>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800acc8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800accc:	4b6b      	ldr	r3, [pc, #428]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800acce:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acd2:	2000      	movs	r0, #0
 800acd4:	e0af      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            }
            break;
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800acd6:	7903      	ldrb	r3, [r0, #4]
 800acd8:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800acdc:	2209      	movs	r2, #9
 800acde:	a901      	add	r1, sp, #4
 800ace0:	4b66      	ldr	r3, [pc, #408]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800ace2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ace6:	f001 fbe5 	bl	800c4b4 <RegionVerify>
 800acea:	2800      	cmp	r0, #0
 800acec:	f000 80d0 	beq.w	800ae90 <LoRaMacMibSetRequestConfirm+0x5a0>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800acf0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800acf4:	4b61      	ldr	r3, [pc, #388]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800acf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acfa:	2000      	movs	r0, #0
 800acfc:	e09b      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            }
            break;
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800acfe:	6842      	ldr	r2, [r0, #4]
 800ad00:	4b5e      	ldr	r3, [pc, #376]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800ad02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800ad06:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad08:	2000      	movs	r0, #0
            break;
 800ad0a:	e094      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800ad0c:	7902      	ldrb	r2, [r0, #4]
 800ad0e:	4b5b      	ldr	r3, [pc, #364]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800ad10:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800ad14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad18:	2000      	movs	r0, #0
            break;
 800ad1a:	e08c      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800ad1c:	6842      	ldr	r2, [r0, #4]
 800ad1e:	4b57      	ldr	r3, [pc, #348]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800ad20:	67da      	str	r2, [r3, #124]	; 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad22:	2000      	movs	r0, #0
            break;
 800ad24:	e087      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800ad26:	6842      	ldr	r2, [r0, #4]
 800ad28:	4b54      	ldr	r3, [pc, #336]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800ad2a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad2e:	2000      	movs	r0, #0
            break;
 800ad30:	e081      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d001      	beq.n	800ad3a <LoRaMacMibSetRequestConfirm+0x44a>
        return LORAMAC_STATUS_BUSY;
 800ad36:	2001      	movs	r0, #1
 800ad38:	e07d      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800ad3a:	4c52      	ldr	r4, [pc, #328]	; (800ae84 <LoRaMacMibSetRequestConfirm+0x594>)
 800ad3c:	2124      	movs	r1, #36	; 0x24
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f002 fec0 	bl	800dac4 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 800ad44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad46:	4298      	cmp	r0, r3
 800ad48:	d001      	beq.n	800ad4e <LoRaMacMibSetRequestConfirm+0x45e>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800ad4a:	2017      	movs	r0, #23
 800ad4c:	e073      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800ad4e:	2114      	movs	r1, #20
 800ad50:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ad54:	f002 feb6 	bl	800dac4 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800ad58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ad5a:	4298      	cmp	r0, r3
 800ad5c:	d001      	beq.n	800ad62 <LoRaMacMibSetRequestConfirm+0x472>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800ad5e:	2017      	movs	r0, #23
 800ad60:	e069      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800ad62:	21dc      	movs	r1, #220	; 0xdc
 800ad64:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800ad68:	f002 feac 	bl	800dac4 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800ad6c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 800ad70:	4298      	cmp	r0, r3
 800ad72:	d001      	beq.n	800ad78 <LoRaMacMibSetRequestConfirm+0x488>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800ad74:	2017      	movs	r0, #23
 800ad76:	e05e      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800ad78:	21bc      	movs	r1, #188	; 0xbc
 800ad7a:	f504 7090 	add.w	r0, r4, #288	; 0x120
 800ad7e:	f002 fea1 	bl	800dac4 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 800ad82:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 800ad86:	4298      	cmp	r0, r3
 800ad88:	d001      	beq.n	800ad8e <LoRaMacMibSetRequestConfirm+0x49e>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800ad8a:	2017      	movs	r0, #23
 800ad8c:	e053      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800ad8e:	2190      	movs	r1, #144	; 0x90
 800ad90:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
 800ad94:	f002 fe96 	bl	800dac4 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800ad98:	f8d4 3270 	ldr.w	r3, [r4, #624]	; 0x270
 800ad9c:	4298      	cmp	r0, r3
 800ad9e:	d001      	beq.n	800ada4 <LoRaMacMibSetRequestConfirm+0x4b4>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800ada0:	2017      	movs	r0, #23
 800ada2:	e048      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800ada4:	2114      	movs	r1, #20
 800ada6:	f504 60e2 	add.w	r0, r4, #1808	; 0x710
 800adaa:	f002 fe8b 	bl	800dac4 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800adae:	f8d4 3724 	ldr.w	r3, [r4, #1828]	; 0x724
 800adb2:	4298      	cmp	r0, r3
 800adb4:	d001      	beq.n	800adba <LoRaMacMibSetRequestConfirm+0x4ca>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800adb6:	2017      	movs	r0, #23
 800adb8:	e03d      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800adba:	4625      	mov	r5, r4
 800adbc:	4c2f      	ldr	r4, [pc, #188]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800adbe:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800adc2:	4629      	mov	r1, r5
 800adc4:	4620      	mov	r0, r4
 800adc6:	f002 fe59 	bl	800da7c <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800adca:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800adce:	2100      	movs	r1, #0
 800add0:	4628      	mov	r0, r5
 800add2:	f002 fe6d 	bl	800dab0 <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800add6:	4b2c      	ldr	r3, [pc, #176]	; (800ae88 <LoRaMacMibSetRequestConfirm+0x598>)
 800add8:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800addc:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800ade0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800ade2:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ade6:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 800adea:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800adee:	2201      	movs	r2, #1
 800adf0:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800adf4:	2202      	movs	r2, #2
 800adf6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    return LORAMAC_STATUS_OK;
 800adfa:	2000      	movs	r0, #0
 800adfc:	e01b      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            status = RestoreNvmData( );
            break;
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800adfe:	7983      	ldrb	r3, [r0, #6]
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d901      	bls.n	800ae08 <LoRaMacMibSetRequestConfirm+0x518>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae04:	2003      	movs	r0, #3
 800ae06:	e016      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800ae08:	6842      	ldr	r2, [r0, #4]
 800ae0a:	4b1c      	ldr	r3, [pc, #112]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800ae0c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800ae10:	6840      	ldr	r0, [r0, #4]
 800ae12:	f000 ff93 	bl	800bd3c <LoRaMacCryptoSetLrWanVersion>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ae16:	2800      	cmp	r0, #0
 800ae18:	bf18      	it	ne
 800ae1a:	2011      	movne	r0, #17
 800ae1c:	e00b      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            }
            break;
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800ae1e:	6842      	ldr	r2, [r0, #4]
 800ae20:	4b16      	ldr	r3, [pc, #88]	; (800ae7c <LoRaMacMibSetRequestConfirm+0x58c>)
 800ae22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae26:	2000      	movs	r0, #0
            break;
 800ae28:	e005      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800ae2a:	f000 fbe1 	bl	800b5f0 <LoRaMacMibClassBSetRequestConfirm>
            break;
 800ae2e:	e002      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ae30:	2003      	movs	r0, #3
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800ae32:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 800ae34:	2001      	movs	r0, #1
}
 800ae36:	b005      	add	sp, #20
 800ae38:	bd30      	pop	{r4, r5, pc}
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae3a:	2003      	movs	r0, #3
 800ae3c:	e7fb      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae3e:	2003      	movs	r0, #3
 800ae40:	e7f9      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae42:	2003      	movs	r0, #3
 800ae44:	e7f7      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae46:	2003      	movs	r0, #3
 800ae48:	e7f5      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae4a:	2003      	movs	r0, #3
 800ae4c:	e7f3      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae4e:	2003      	movs	r0, #3
 800ae50:	e7f1      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae52:	2003      	movs	r0, #3
 800ae54:	e7ef      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae56:	2003      	movs	r0, #3
 800ae58:	e7ed      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae5a:	2003      	movs	r0, #3
 800ae5c:	e7eb      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae5e:	2003      	movs	r0, #3
 800ae60:	e7e9      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae62:	2003      	movs	r0, #3
 800ae64:	e7e7      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae66:	2003      	movs	r0, #3
 800ae68:	e7e5      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae6a:	2003      	movs	r0, #3
 800ae6c:	e7e3      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae6e:	2003      	movs	r0, #3
 800ae70:	e7e1      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae72:	2003      	movs	r0, #3
 800ae74:	e7df      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae76:	2003      	movs	r0, #3
 800ae78:	e7dd      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
 800ae7a:	bf00      	nop
 800ae7c:	200012d0 	.word	0x200012d0
 800ae80:	20001380 	.word	0x20001380
 800ae84:	20000ba8 	.word	0x20000ba8
 800ae88:	200019fc 	.word	0x200019fc
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae8c:	2003      	movs	r0, #3
 800ae8e:	e7d2      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae90:	2003      	movs	r0, #3
 800ae92:	e7d0      	b.n	800ae36 <LoRaMacMibSetRequestConfirm+0x546>

0800ae94 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800ae94:	b570      	push	{r4, r5, r6, lr}
 800ae96:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ae98:	2300      	movs	r3, #0
 800ae9a:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	f000 8109 	beq.w	800b0b6 <LoRaMacMlmeRequest+0x222>
 800aea4:	4605      	mov	r5, r0
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800aea6:	f7fe fb8d 	bl	80095c4 <LoRaMacIsBusy>
 800aeaa:	b118      	cbz	r0, 800aeb4 <LoRaMacMlmeRequest+0x20>
    {
        return LORAMAC_STATUS_BUSY;
 800aeac:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800aeae:	4620      	mov	r0, r4
 800aeb0:	b006      	add	sp, #24
 800aeb2:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800aeb4:	f000 fdfa 	bl	800baac <LoRaMacConfirmQueueIsFull>
 800aeb8:	b108      	cbz	r0, 800aebe <LoRaMacMlmeRequest+0x2a>
        return LORAMAC_STATUS_BUSY;
 800aeba:	2401      	movs	r4, #1
 800aebc:	e7f7      	b.n	800aeae <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800aebe:	f000 fdef 	bl	800baa0 <LoRaMacConfirmQueueGetCnt>
 800aec2:	b328      	cbz	r0, 800af10 <LoRaMacMlmeRequest+0x7c>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800aec4:	4b80      	ldr	r3, [pc, #512]	; (800b0c8 <LoRaMacMlmeRequest+0x234>)
 800aec6:	2101      	movs	r1, #1
 800aec8:	f883 144d 	strb.w	r1, [r3, #1101]	; 0x44d
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800aecc:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800aed0:	f042 0204 	orr.w	r2, r2, #4
 800aed4:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    queueElement.Request = mlmeRequest->Type;
 800aed8:	782c      	ldrb	r4, [r5, #0]
 800aeda:	f88d 4014 	strb.w	r4, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800aede:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800aee2:	2300      	movs	r3, #0
 800aee4:	f88d 3017 	strb.w	r3, [sp, #23]
    switch( mlmeRequest->Type )
 800aee8:	1e63      	subs	r3, r4, #1
 800aeea:	2b0d      	cmp	r3, #13
 800aeec:	f200 80e5 	bhi.w	800b0ba <LoRaMacMlmeRequest+0x226>
 800aef0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800aef4:	00e30014 	.word	0x00e30014
 800aef8:	005800e3 	.word	0x005800e3
 800aefc:	00890060 	.word	0x00890060
 800af00:	00e300e3 	.word	0x00e300e3
 800af04:	009800e3 	.word	0x009800e3
 800af08:	00d300e3 	.word	0x00d300e3
 800af0c:	00ca00a1 	.word	0x00ca00a1
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800af10:	2214      	movs	r2, #20
 800af12:	2100      	movs	r1, #0
 800af14:	486d      	ldr	r0, [pc, #436]	; (800b0cc <LoRaMacMlmeRequest+0x238>)
 800af16:	f002 fdcb 	bl	800dab0 <memset1>
 800af1a:	e7d3      	b.n	800aec4 <LoRaMacMlmeRequest+0x30>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800af1c:	4b6a      	ldr	r3, [pc, #424]	; (800b0c8 <LoRaMacMlmeRequest+0x234>)
 800af1e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800af22:	f013 0f20 	tst.w	r3, #32
 800af26:	d1c2      	bne.n	800aeae <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 800af28:	f7fe fa2c 	bl	8009384 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800af2c:	4c68      	ldr	r4, [pc, #416]	; (800b0d0 <LoRaMacMlmeRequest+0x23c>)
 800af2e:	2200      	movs	r2, #0
 800af30:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800af34:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800af38:	f001 fb31 	bl	800c59e <RegionAlternateDr>
 800af3c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800af40:	2307      	movs	r3, #7
 800af42:	f88d 3015 	strb.w	r3, [sp, #21]
            SwitchClass( CLASS_A );
 800af46:	2000      	movs	r0, #0
 800af48:	f7fe fabe 	bl	80094c8 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800af4c:	4c5e      	ldr	r4, [pc, #376]	; (800b0c8 <LoRaMacMlmeRequest+0x234>)
 800af4e:	2600      	movs	r6, #0
 800af50:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800af54:	1ca3      	adds	r3, r4, #2
 800af56:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800af5a:	23ff      	movs	r3, #255	; 0xff
 800af5c:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800af60:	f884 610d 	strb.w	r6, [r4, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800af64:	f7fc fbd0 	bl	8007708 <SecureElementGetJoinEui>
 800af68:	4601      	mov	r1, r0
 800af6a:	2208      	movs	r2, #8
 800af6c:	f504 7087 	add.w	r0, r4, #270	; 0x10e
 800af70:	f002 fd84 	bl	800da7c <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800af74:	f7fc fbb2 	bl	80076dc <SecureElementGetDevEui>
 800af78:	4601      	mov	r1, r0
 800af7a:	2208      	movs	r2, #8
 800af7c:	f504 708b 	add.w	r0, r4, #278	; 0x116
 800af80:	f002 fd7c 	bl	800da7c <memcpy1>
    status = ScheduleTx( allowDelayedTx );
 800af84:	4630      	mov	r0, r6
 800af86:	f7fd fe93 	bl	8008cb0 <ScheduleTx>
            if( status != LORAMAC_STATUS_OK )
 800af8a:	4604      	mov	r4, r0
 800af8c:	b390      	cbz	r0, 800aff4 <LoRaMacMlmeRequest+0x160>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800af8e:	4e50      	ldr	r6, [pc, #320]	; (800b0d0 <LoRaMacMlmeRequest+0x23c>)
 800af90:	2201      	movs	r2, #1
 800af92:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800af96:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800af9a:	f001 fb00 	bl	800c59e <RegionAlternateDr>
 800af9e:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800afa2:	e04d      	b.n	800b040 <LoRaMacMlmeRequest+0x1ac>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800afa4:	2200      	movs	r2, #0
 800afa6:	a904      	add	r1, sp, #16
 800afa8:	2002      	movs	r0, #2
 800afaa:	f000 fb3d 	bl	800b628 <LoRaMacCommandsAddCmd>
 800afae:	b308      	cbz	r0, 800aff4 <LoRaMacMlmeRequest+0x160>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800afb0:	2413      	movs	r4, #19
 800afb2:	e045      	b.n	800b040 <LoRaMacMlmeRequest+0x1ac>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800afb4:	88aa      	ldrh	r2, [r5, #4]
    continuousWave.Channel = MacCtx.Channel;
 800afb6:	4c44      	ldr	r4, [pc, #272]	; (800b0c8 <LoRaMacMlmeRequest+0x234>)
 800afb8:	f894 3415 	ldrb.w	r3, [r4, #1045]	; 0x415
 800afbc:	f88d 3000 	strb.w	r3, [sp]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800afc0:	4b43      	ldr	r3, [pc, #268]	; (800b0d0 <LoRaMacMlmeRequest+0x23c>)
 800afc2:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
 800afc6:	f88d 1001 	strb.w	r1, [sp, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800afca:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800afce:	f88d 1002 	strb.w	r1, [sp, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800afd2:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800afd4:	9101      	str	r1, [sp, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800afd6:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800afd8:	9102      	str	r1, [sp, #8]
    continuousWave.Timeout = timeout;
 800afda:	f8ad 200c 	strh.w	r2, [sp, #12]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800afde:	4669      	mov	r1, sp
 800afe0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800afe4:	f001 faf3 	bl	800c5ce <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800afe8:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800afec:	f043 0302 	orr.w	r3, r3, #2
 800aff0:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800aff4:	4b34      	ldr	r3, [pc, #208]	; (800b0c8 <LoRaMacMlmeRequest+0x234>)
 800aff6:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800affa:	612b      	str	r3, [r5, #16]
        LoRaMacConfirmQueueAdd( &queueElement );
 800affc:	a805      	add	r0, sp, #20
 800affe:	f000 fc87 	bl	800b910 <LoRaMacConfirmQueueAdd>
    return status;
 800b002:	2400      	movs	r4, #0
 800b004:	e753      	b.n	800aeae <LoRaMacMlmeRequest+0x1a>
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800b006:	4b33      	ldr	r3, [pc, #204]	; (800b0d4 <LoRaMacMlmeRequest+0x240>)
 800b008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b00a:	88aa      	ldrh	r2, [r5, #4]
 800b00c:	f995 100c 	ldrsb.w	r1, [r5, #12]
 800b010:	68a8      	ldr	r0, [r5, #8]
 800b012:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b014:	4a2c      	ldr	r2, [pc, #176]	; (800b0c8 <LoRaMacMlmeRequest+0x234>)
 800b016:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800b01a:	f043 0302 	orr.w	r3, r3, #2
 800b01e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            break;
 800b022:	e7e7      	b.n	800aff4 <LoRaMacMlmeRequest+0x160>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b024:	2200      	movs	r2, #0
 800b026:	a904      	add	r1, sp, #16
 800b028:	200d      	movs	r0, #13
 800b02a:	f000 fafd 	bl	800b628 <LoRaMacCommandsAddCmd>
 800b02e:	2800      	cmp	r0, #0
 800b030:	d0e0      	beq.n	800aff4 <LoRaMacMlmeRequest+0x160>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b032:	2413      	movs	r4, #19
 800b034:	e004      	b.n	800b040 <LoRaMacMlmeRequest+0x1ac>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800b036:	4b26      	ldr	r3, [pc, #152]	; (800b0d0 <LoRaMacMlmeRequest+0x23c>)
 800b038:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800b03c:	b1a3      	cbz	r3, 800b068 <LoRaMacMlmeRequest+0x1d4>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b03e:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b040:	4b21      	ldr	r3, [pc, #132]	; (800b0c8 <LoRaMacMlmeRequest+0x234>)
 800b042:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800b046:	612b      	str	r3, [r5, #16]
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b048:	f000 fd2a 	bl	800baa0 <LoRaMacConfirmQueueGetCnt>
 800b04c:	2800      	cmp	r0, #0
 800b04e:	f47f af2e 	bne.w	800aeae <LoRaMacMlmeRequest+0x1a>
            MacCtx.NodeAckRequested = false;
 800b052:	4b1d      	ldr	r3, [pc, #116]	; (800b0c8 <LoRaMacMlmeRequest+0x234>)
 800b054:	2100      	movs	r1, #0
 800b056:	f883 1414 	strb.w	r1, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b05a:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800b05e:	f361 0282 	bfi	r2, r1, #2, #1
 800b062:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
 800b066:	e722      	b.n	800aeae <LoRaMacMlmeRequest+0x1a>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800b068:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800b06a:	f004 0007 	and.w	r0, r4, #7
 800b06e:	f000 fab8 	bl	800b5e2 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800b072:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800b076:	2201      	movs	r2, #1
 800b078:	a904      	add	r1, sp, #16
 800b07a:	2010      	movs	r0, #16
 800b07c:	f000 fad4 	bl	800b628 <LoRaMacCommandsAddCmd>
 800b080:	2800      	cmp	r0, #0
 800b082:	d0b7      	beq.n	800aff4 <LoRaMacMlmeRequest+0x160>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b084:	2413      	movs	r4, #19
 800b086:	e7db      	b.n	800b040 <LoRaMacMlmeRequest+0x1ac>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b088:	2200      	movs	r2, #0
 800b08a:	a904      	add	r1, sp, #16
 800b08c:	2012      	movs	r0, #18
 800b08e:	f000 facb 	bl	800b628 <LoRaMacCommandsAddCmd>
 800b092:	2800      	cmp	r0, #0
 800b094:	d0ae      	beq.n	800aff4 <LoRaMacMlmeRequest+0x160>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b096:	2413      	movs	r4, #19
 800b098:	e7d2      	b.n	800b040 <LoRaMacMlmeRequest+0x1ac>
            queueElement.RestrictCommonReadyToHandle = true;
 800b09a:	2301      	movs	r3, #1
 800b09c:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800b0a0:	f000 fa90 	bl	800b5c4 <LoRaMacClassBIsAcquisitionInProgress>
 800b0a4:	b108      	cbz	r0, 800b0aa <LoRaMacMlmeRequest+0x216>
                status = LORAMAC_STATUS_BUSY;
 800b0a6:	2401      	movs	r4, #1
 800b0a8:	e7ca      	b.n	800b040 <LoRaMacMlmeRequest+0x1ac>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800b0aa:	f000 fa88 	bl	800b5be <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800b0ae:	2000      	movs	r0, #0
 800b0b0:	f000 fa8a 	bl	800b5c8 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800b0b4:	e79e      	b.n	800aff4 <LoRaMacMlmeRequest+0x160>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b0b6:	2403      	movs	r4, #3
 800b0b8:	e6f9      	b.n	800aeae <LoRaMacMlmeRequest+0x1a>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b0ba:	4b03      	ldr	r3, [pc, #12]	; (800b0c8 <LoRaMacMlmeRequest+0x234>)
 800b0bc:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800b0c0:	612b      	str	r3, [r5, #16]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b0c2:	2402      	movs	r4, #2
 800b0c4:	e7c0      	b.n	800b048 <LoRaMacMlmeRequest+0x1b4>
 800b0c6:	bf00      	nop
 800b0c8:	200019fc 	.word	0x200019fc
 800b0cc:	20001e48 	.word	0x20001e48
 800b0d0:	200012d0 	.word	0x200012d0
 800b0d4:	08011584 	.word	0x08011584

0800b0d8 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800b0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0dc:	b08f      	sub	sp, #60	; 0x3c
 800b0de:	9100      	str	r1, [sp, #0]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	f000 81a2 	beq.w	800b42a <LoRaMacMcpsRequest+0x352>
 800b0e6:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 800b0e8:	f7fe fa6c 	bl	80095c4 <LoRaMacIsBusy>
 800b0ec:	b118      	cbz	r0, 800b0f6 <LoRaMacMcpsRequest+0x1e>
    {
        return LORAMAC_STATUS_BUSY;
 800b0ee:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800b0f0:	b00f      	add	sp, #60	; 0x3c
 800b0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    macHdr.Value = 0;
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	460d      	mov	r5, r1
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800b0fa:	4eb7      	ldr	r6, [pc, #732]	; (800b3d8 <LoRaMacMcpsRequest+0x300>)
 800b0fc:	2214      	movs	r2, #20
 800b0fe:	f506 6087 	add.w	r0, r6, #1080	; 0x438
 800b102:	f002 fcd5 	bl	800dab0 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b106:	2301      	movs	r3, #1
 800b108:	f886 3439 	strb.w	r3, [r6, #1081]	; 0x439
    MacCtx.AckTimeoutRetriesCounter = 1;
 800b10c:	f886 3412 	strb.w	r3, [r6, #1042]	; 0x412
    switch( mcpsRequest->Type )
 800b110:	7823      	ldrb	r3, [r4, #0]
 800b112:	2b01      	cmp	r3, #1
 800b114:	f000 80cd 	beq.w	800b2b2 <LoRaMacMcpsRequest+0x1da>
 800b118:	2b03      	cmp	r3, #3
 800b11a:	f000 80dc 	beq.w	800b2d6 <LoRaMacMcpsRequest+0x1fe>
 800b11e:	b193      	cbz	r3, 800b146 <LoRaMacMcpsRequest+0x6e>
    getPhy.Attribute = PHY_MIN_TX_DR;
 800b120:	2502      	movs	r5, #2
 800b122:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b126:	4bad      	ldr	r3, [pc, #692]	; (800b3dc <LoRaMacMcpsRequest+0x304>)
 800b128:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800b12c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b130:	a90c      	add	r1, sp, #48	; 0x30
 800b132:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b136:	f001 f99e 	bl	800c476 <RegionGetPhyParam>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b13a:	4628      	mov	r0, r5
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b13c:	4ba6      	ldr	r3, [pc, #664]	; (800b3d8 <LoRaMacMcpsRequest+0x300>)
 800b13e:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800b142:	6123      	str	r3, [r4, #16]
    return status;
 800b144:	e7d4      	b.n	800b0f0 <LoRaMacMcpsRequest+0x18>
            MacCtx.AckTimeoutRetries = 1;
 800b146:	2201      	movs	r2, #1
 800b148:	f886 2411 	strb.w	r2, [r6, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800b14c:	2302      	movs	r3, #2
 800b14e:	f363 1547 	bfi	r5, r3, #5, #3
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800b152:	7923      	ldrb	r3, [r4, #4]
 800b154:	9301      	str	r3, [sp, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800b156:	f8d4 9008 	ldr.w	r9, [r4, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800b15a:	89a7      	ldrh	r7, [r4, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800b15c:	f994 800e 	ldrsb.w	r8, [r4, #14]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800b160:	2302      	movs	r3, #2
 800b162:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b166:	4e9d      	ldr	r6, [pc, #628]	; (800b3dc <LoRaMacMcpsRequest+0x304>)
 800b168:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
 800b16c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b170:	a90c      	add	r1, sp, #48	; 0x30
 800b172:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800b176:	f001 f97e 	bl	800c476 <RegionGetPhyParam>
 800b17a:	900b      	str	r0, [sp, #44]	; 0x2c
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 800b17c:	f896 3106 	ldrb.w	r3, [r6, #262]	; 0x106
 800b180:	b9cb      	cbnz	r3, 800b1b6 <LoRaMacMcpsRequest+0xde>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b182:	f99d 302c 	ldrsb.w	r3, [sp, #44]	; 0x2c
 800b186:	4598      	cmp	r8, r3
 800b188:	bfb8      	it	lt
 800b18a:	4698      	movlt	r8, r3
            verify.DatarateParams.Datarate = datarate;
 800b18c:	f88d 8028 	strb.w	r8, [sp, #40]	; 0x28
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b190:	4b92      	ldr	r3, [pc, #584]	; (800b3dc <LoRaMacMcpsRequest+0x304>)
 800b192:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800b196:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800b19a:	2205      	movs	r2, #5
 800b19c:	a90a      	add	r1, sp, #40	; 0x28
 800b19e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b1a2:	f001 f987 	bl	800c4b4 <RegionVerify>
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	f000 8141 	beq.w	800b42e <LoRaMacMcpsRequest+0x356>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b1ac:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 800b1b0:	4b8a      	ldr	r3, [pc, #552]	; (800b3dc <LoRaMacMcpsRequest+0x304>)
 800b1b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b1b6:	4b89      	ldr	r3, [pc, #548]	; (800b3dc <LoRaMacMcpsRequest+0x304>)
 800b1b8:	f993 a039 	ldrsb.w	sl, [r3, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800b1bc:	f993 b038 	ldrsb.w	fp, [r3, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b1c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b1c2:	9202      	str	r2, [sp, #8]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b1c4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f000 8132 	beq.w	800b432 <LoRaMacMcpsRequest+0x35a>
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800b1ce:	4b83      	ldr	r3, [pc, #524]	; (800b3dc <LoRaMacMcpsRequest+0x304>)
 800b1d0:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800b1d4:	b913      	cbnz	r3, 800b1dc <LoRaMacMcpsRequest+0x104>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800b1d6:	4b81      	ldr	r3, [pc, #516]	; (800b3dc <LoRaMacMcpsRequest+0x304>)
 800b1d8:	2100      	movs	r1, #0
 800b1da:	6319      	str	r1, [r3, #48]	; 0x30
    fCtrl.Value = 0;
 800b1dc:	f04f 0600 	mov.w	r6, #0
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800b1e0:	4b7e      	ldr	r3, [pc, #504]	; (800b3dc <LoRaMacMcpsRequest+0x304>)
 800b1e2:	f893 0106 	ldrb.w	r0, [r3, #262]	; 0x106
 800b1e6:	f360 16c7 	bfi	r6, r0, #7, #1
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b1ea:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800b1ee:	2b01      	cmp	r3, #1
        fCtrl.Bits.FPending      = 1;
 800b1f0:	bf14      	ite	ne
 800b1f2:	f3c6 1300 	ubfxne	r3, r6, #4, #1
 800b1f6:	2301      	moveq	r3, #1
 800b1f8:	f363 1604 	bfi	r6, r3, #4, #1
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800b1fc:	4b77      	ldr	r3, [pc, #476]	; (800b3dc <LoRaMacMcpsRequest+0x304>)
 800b1fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b202:	b90b      	cbnz	r3, 800b208 <LoRaMacMcpsRequest+0x130>
        fCtrl.Bits.Ack = 1;
 800b204:	f3c6 1340 	ubfx	r3, r6, #5, #1
 800b208:	f363 1645 	bfi	r6, r3, #5, #1
    adrNext.Version = Nvm.MacGroup2.Version;
 800b20c:	4973      	ldr	r1, [pc, #460]	; (800b3dc <LoRaMacMcpsRequest+0x304>)
 800b20e:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
 800b212:	9305      	str	r3, [sp, #20]
    adrNext.UpdateChanMask = true;
 800b214:	2301      	movs	r3, #1
 800b216:	f88d 3018 	strb.w	r3, [sp, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800b21a:	f88d 0019 	strb.w	r0, [sp, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b21e:	9207      	str	r2, [sp, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b220:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 800b3d8 <LoRaMacMcpsRequest+0x300>
 800b224:	f8b8 33f4 	ldrh.w	r3, [r8, #1012]	; 0x3f4
 800b228:	f8ad 3020 	strh.w	r3, [sp, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800b22c:	f8b8 33f6 	ldrh.w	r3, [r8, #1014]	; 0x3f6
 800b230:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b234:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b238:	f88d b025 	strb.w	fp, [sp, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b23c:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 800b240:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800b244:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 800b248:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800b24c:	ab02      	add	r3, sp, #8
 800b24e:	f101 0238 	add.w	r2, r1, #56	; 0x38
 800b252:	3139      	adds	r1, #57	; 0x39
 800b254:	a805      	add	r0, sp, #20
 800b256:	f000 f937 	bl	800b4c8 <LoRaMacAdrCalcNext>
 800b25a:	f360 1686 	bfi	r6, r0, #6, #1
    MacCtx.PktBufferLen = 0;
 800b25e:	2300      	movs	r3, #0
 800b260:	f8a8 3000 	strh.w	r3, [r8]
    MacCtx.NodeAckRequested = false;
 800b264:	f888 3414 	strb.w	r3, [r8, #1044]	; 0x414
    uint32_t fCntUp = 0;
 800b268:	9303      	str	r3, [sp, #12]
    size_t macCmdsSize = 0;
 800b26a:	9304      	str	r3, [sp, #16]
        fBufferSize = 0;
 800b26c:	4599      	cmp	r9, r3
 800b26e:	bf08      	it	eq
 800b270:	461f      	moveq	r7, r3
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800b272:	463a      	mov	r2, r7
 800b274:	4649      	mov	r1, r9
 800b276:	f508 709c 	add.w	r0, r8, #312	; 0x138
 800b27a:	f002 fbff 	bl	800da7c <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800b27e:	b2fa      	uxtb	r2, r7
 800b280:	f888 2237 	strb.w	r2, [r8, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800b284:	b2e9      	uxtb	r1, r5
 800b286:	f888 5002 	strb.w	r5, [r8, #2]
    switch( macHdr->Bits.MType )
 800b28a:	f3c5 1542 	ubfx	r5, r5, #5, #3
 800b28e:	2d04      	cmp	r5, #4
 800b290:	d02f      	beq.n	800b2f2 <LoRaMacMcpsRequest+0x21a>
 800b292:	2d07      	cmp	r5, #7
 800b294:	f000 80b9 	beq.w	800b40a <LoRaMacMcpsRequest+0x332>
 800b298:	2d02      	cmp	r5, #2
 800b29a:	d02e      	beq.n	800b2fa <LoRaMacMcpsRequest+0x222>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b29c:	2002      	movs	r0, #2
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800b29e:	4b4f      	ldr	r3, [pc, #316]	; (800b3dc <LoRaMacMcpsRequest+0x304>)
 800b2a0:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800b2a4:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
            MacCtx.NodeAckRequested = false;
 800b2a8:	4b4b      	ldr	r3, [pc, #300]	; (800b3d8 <LoRaMacMcpsRequest+0x300>)
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800b2b0:	e744      	b.n	800b13c <LoRaMacMcpsRequest+0x64>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800b2b2:	7be3      	ldrb	r3, [r4, #15]
 800b2b4:	2b08      	cmp	r3, #8
 800b2b6:	bf28      	it	cs
 800b2b8:	2308      	movcs	r3, #8
 800b2ba:	4a47      	ldr	r2, [pc, #284]	; (800b3d8 <LoRaMacMcpsRequest+0x300>)
 800b2bc:	f882 3411 	strb.w	r3, [r2, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b2c0:	2304      	movs	r3, #4
 800b2c2:	f363 1547 	bfi	r5, r3, #5, #3
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800b2c6:	7923      	ldrb	r3, [r4, #4]
 800b2c8:	9301      	str	r3, [sp, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800b2ca:	f8d4 9008 	ldr.w	r9, [r4, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800b2ce:	89a7      	ldrh	r7, [r4, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800b2d0:	f994 800e 	ldrsb.w	r8, [r4, #14]
            break;
 800b2d4:	e744      	b.n	800b160 <LoRaMacMcpsRequest+0x88>
            MacCtx.AckTimeoutRetries = 1;
 800b2d6:	4b40      	ldr	r3, [pc, #256]	; (800b3d8 <LoRaMacMcpsRequest+0x300>)
 800b2d8:	2201      	movs	r2, #1
 800b2da:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800b2de:	f06f 051f 	mvn.w	r5, #31
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800b2e2:	f8d4 9004 	ldr.w	r9, [r4, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800b2e6:	8927      	ldrh	r7, [r4, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800b2e8:	f994 800a 	ldrsb.w	r8, [r4, #10]
    uint8_t fPort = 0;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	9301      	str	r3, [sp, #4]
            break;
 800b2f0:	e736      	b.n	800b160 <LoRaMacMcpsRequest+0x88>
            MacCtx.NodeAckRequested = true;
 800b2f2:	4b39      	ldr	r3, [pc, #228]	; (800b3d8 <LoRaMacMcpsRequest+0x300>)
 800b2f4:	2001      	movs	r0, #1
 800b2f6:	f883 0414 	strb.w	r0, [r3, #1044]	; 0x414
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800b2fa:	4b37      	ldr	r3, [pc, #220]	; (800b3d8 <LoRaMacMcpsRequest+0x300>)
 800b2fc:	2004      	movs	r0, #4
 800b2fe:	f883 0104 	strb.w	r0, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800b302:	1c98      	adds	r0, r3, #2
 800b304:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b308:	20ff      	movs	r0, #255	; 0xff
 800b30a:	f883 010c 	strb.w	r0, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800b30e:	f883 110d 	strb.w	r1, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800b312:	9901      	ldr	r1, [sp, #4]
 800b314:	f883 1128 	strb.w	r1, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800b318:	4930      	ldr	r1, [pc, #192]	; (800b3dc <LoRaMacMcpsRequest+0x304>)
 800b31a:	f8d1 10d4 	ldr.w	r1, [r1, #212]	; 0xd4
 800b31e:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b322:	f883 6114 	strb.w	r6, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800b326:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800b32a:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800b32e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800b332:	a803      	add	r0, sp, #12
 800b334:	f000 fd0a 	bl	800bd4c <LoRaMacCryptoGetFCntUp>
 800b338:	2800      	cmp	r0, #0
 800b33a:	d17e      	bne.n	800b43a <LoRaMacMcpsRequest+0x362>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800b33c:	9a03      	ldr	r2, [sp, #12]
 800b33e:	4b26      	ldr	r3, [pc, #152]	; (800b3d8 <LoRaMacMcpsRequest+0x300>)
 800b340:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbRetries = 0;
 800b344:	2100      	movs	r1, #0
 800b346:	f883 143d 	strb.w	r1, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 800b34a:	f883 143c 	strb.w	r1, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800b34e:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b352:	a804      	add	r0, sp, #16
 800b354:	f000 fa2a 	bl	800b7ac <LoRaMacCommandsGetSizeSerializedCmds>
 800b358:	2800      	cmp	r0, #0
 800b35a:	d170      	bne.n	800b43e <LoRaMacMcpsRequest+0x366>
            if( macCmdsSize > 0 )
 800b35c:	9b04      	ldr	r3, [sp, #16]
 800b35e:	b9cb      	cbnz	r3, 800b394 <LoRaMacMcpsRequest+0x2bc>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800b360:	9800      	ldr	r0, [sp, #0]
 800b362:	f7fd fca5 	bl	8008cb0 <ScheduleTx>
    if( status != LORAMAC_STATUS_OK )
 800b366:	2800      	cmp	r0, #0
 800b368:	d199      	bne.n	800b29e <LoRaMacMcpsRequest+0x1c6>
        Nvm.MacGroup1.SrvAckRequested = false;
 800b36a:	4b1c      	ldr	r3, [pc, #112]	; (800b3dc <LoRaMacMcpsRequest+0x304>)
 800b36c:	2200      	movs	r2, #0
 800b36e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800b372:	9a02      	ldr	r2, [sp, #8]
 800b374:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800b376:	f000 f9e9 	bl	800b74c <LoRaMacCommandsRemoveNoneStickyCmds>
 800b37a:	2800      	cmp	r0, #0
 800b37c:	d15b      	bne.n	800b436 <LoRaMacMcpsRequest+0x35e>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800b37e:	7822      	ldrb	r2, [r4, #0]
 800b380:	4b15      	ldr	r3, [pc, #84]	; (800b3d8 <LoRaMacMcpsRequest+0x300>)
 800b382:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800b386:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800b38a:	f042 0201 	orr.w	r2, r2, #1
 800b38e:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
 800b392:	e6d3      	b.n	800b13c <LoRaMacMcpsRequest+0x64>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800b394:	4b11      	ldr	r3, [pc, #68]	; (800b3dc <LoRaMacMcpsRequest+0x304>)
 800b396:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800b39a:	f7fd f8d3 	bl	8008544 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800b39e:	4b0e      	ldr	r3, [pc, #56]	; (800b3d8 <LoRaMacMcpsRequest+0x300>)
 800b3a0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800b3a4:	b303      	cbz	r3, 800b3e8 <LoRaMacMcpsRequest+0x310>
 800b3a6:	9b04      	ldr	r3, [sp, #16]
 800b3a8:	2b0f      	cmp	r3, #15
 800b3aa:	d907      	bls.n	800b3bc <LoRaMacMcpsRequest+0x2e4>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800b3ac:	4a0c      	ldr	r2, [pc, #48]	; (800b3e0 <LoRaMacMcpsRequest+0x308>)
 800b3ae:	a904      	add	r1, sp, #16
 800b3b0:	f000 fa08 	bl	800b7c4 <LoRaMacCommandsSerializeCmds>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	d0d3      	beq.n	800b360 <LoRaMacMcpsRequest+0x288>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b3b8:	2013      	movs	r0, #19
 800b3ba:	e770      	b.n	800b29e <LoRaMacMcpsRequest+0x1c6>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800b3bc:	4a09      	ldr	r2, [pc, #36]	; (800b3e4 <LoRaMacMcpsRequest+0x30c>)
 800b3be:	a904      	add	r1, sp, #16
 800b3c0:	200f      	movs	r0, #15
 800b3c2:	f000 f9ff 	bl	800b7c4 <LoRaMacCommandsSerializeCmds>
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	d13b      	bne.n	800b442 <LoRaMacMcpsRequest+0x36a>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800b3ca:	9b04      	ldr	r3, [sp, #16]
 800b3cc:	f363 0603 	bfi	r6, r3, #0, #4
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b3d0:	4b01      	ldr	r3, [pc, #4]	; (800b3d8 <LoRaMacMcpsRequest+0x300>)
 800b3d2:	f883 6114 	strb.w	r6, [r3, #276]	; 0x114
 800b3d6:	e7c3      	b.n	800b360 <LoRaMacMcpsRequest+0x288>
 800b3d8:	200019fc 	.word	0x200019fc
 800b3dc:	200012d0 	.word	0x200012d0
 800b3e0:	20001e88 	.word	0x20001e88
 800b3e4:	20001b14 	.word	0x20001b14
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800b3e8:	4a18      	ldr	r2, [pc, #96]	; (800b44c <LoRaMacMcpsRequest+0x374>)
 800b3ea:	a904      	add	r1, sp, #16
 800b3ec:	f000 f9ea 	bl	800b7c4 <LoRaMacCommandsSerializeCmds>
 800b3f0:	bb48      	cbnz	r0, 800b446 <LoRaMacMcpsRequest+0x36e>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800b3f2:	4b17      	ldr	r3, [pc, #92]	; (800b450 <LoRaMacMcpsRequest+0x378>)
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800b3fa:	f203 428c 	addw	r2, r3, #1164	; 0x48c
 800b3fe:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800b402:	9a04      	ldr	r2, [sp, #16]
 800b404:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800b408:	e7aa      	b.n	800b360 <LoRaMacMcpsRequest+0x288>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800b40a:	f1b9 0f00 	cmp.w	r9, #0
 800b40e:	d0a7      	beq.n	800b360 <LoRaMacMcpsRequest+0x288>
 800b410:	2a00      	cmp	r2, #0
 800b412:	d0a5      	beq.n	800b360 <LoRaMacMcpsRequest+0x288>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800b414:	4d0e      	ldr	r5, [pc, #56]	; (800b450 <LoRaMacMcpsRequest+0x378>)
 800b416:	b2fa      	uxtb	r2, r7
 800b418:	4649      	mov	r1, r9
 800b41a:	1ce8      	adds	r0, r5, #3
 800b41c:	f002 fb2e 	bl	800da7c <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800b420:	f895 3237 	ldrb.w	r3, [r5, #567]	; 0x237
 800b424:	3301      	adds	r3, #1
 800b426:	802b      	strh	r3, [r5, #0]
 800b428:	e79a      	b.n	800b360 <LoRaMacMcpsRequest+0x288>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b42a:	2003      	movs	r0, #3
 800b42c:	e660      	b.n	800b0f0 <LoRaMacMcpsRequest+0x18>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800b42e:	2003      	movs	r0, #3
 800b430:	e65e      	b.n	800b0f0 <LoRaMacMcpsRequest+0x18>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800b432:	2007      	movs	r0, #7
 800b434:	e738      	b.n	800b2a8 <LoRaMacMcpsRequest+0x1d0>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b436:	2013      	movs	r0, #19
 800b438:	e736      	b.n	800b2a8 <LoRaMacMcpsRequest+0x1d0>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800b43a:	2012      	movs	r0, #18
 800b43c:	e72f      	b.n	800b29e <LoRaMacMcpsRequest+0x1c6>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b43e:	2013      	movs	r0, #19
 800b440:	e72d      	b.n	800b29e <LoRaMacMcpsRequest+0x1c6>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b442:	2013      	movs	r0, #19
 800b444:	e72b      	b.n	800b29e <LoRaMacMcpsRequest+0x1c6>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b446:	2013      	movs	r0, #19
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800b448:	e729      	b.n	800b29e <LoRaMacMcpsRequest+0x1c6>
 800b44a:	bf00      	nop
 800b44c:	20001e88 	.word	0x20001e88
 800b450:	200019fc 	.word	0x200019fc

0800b454 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800b454:	b510      	push	{r4, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800b45a:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800b45e:	220f      	movs	r2, #15
 800b460:	a901      	add	r1, sp, #4
 800b462:	4b05      	ldr	r3, [pc, #20]	; (800b478 <LoRaMacTestSetDutyCycleOn+0x24>)
 800b464:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b468:	f001 f824 	bl	800c4b4 <RegionVerify>
 800b46c:	b110      	cbz	r0, 800b474 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800b46e:	4b02      	ldr	r3, [pc, #8]	; (800b478 <LoRaMacTestSetDutyCycleOn+0x24>)
 800b470:	f883 4108 	strb.w	r4, [r3, #264]	; 0x108
    }
}
 800b474:	b002      	add	sp, #8
 800b476:	bd10      	pop	{r4, pc}
 800b478:	200012d0 	.word	0x200012d0

0800b47c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800b47c:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800b47e:	f7ff f85d 	bl	800a53c <LoRaMacStop>
 800b482:	b110      	cbz	r0, 800b48a <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800b484:	2401      	movs	r4, #1
    }
}
 800b486:	4620      	mov	r0, r4
 800b488:	bd38      	pop	{r3, r4, r5, pc}
 800b48a:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800b48c:	4d0c      	ldr	r5, [pc, #48]	; (800b4c0 <LoRaMacDeInitialization+0x44>)
 800b48e:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800b492:	f005 f879 	bl	8010588 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800b496:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800b49a:	f005 f875 	bl	8010588 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800b49e:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800b4a2:	f005 f871 	bl	8010588 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.AckTimeoutTimer );
 800b4a6:	f505 707e 	add.w	r0, r5, #1016	; 0x3f8
 800b4aa:	f005 f86d 	bl	8010588 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800b4ae:	f000 f899 	bl	800b5e4 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( );
 800b4b2:	f7fd ff67 	bl	8009384 <ResetMacParameters>
        Radio.Sleep( );
 800b4b6:	4b03      	ldr	r3, [pc, #12]	; (800b4c4 <LoRaMacDeInitialization+0x48>)
 800b4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ba:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800b4bc:	e7e3      	b.n	800b486 <LoRaMacDeInitialization+0xa>
 800b4be:	bf00      	nop
 800b4c0:	200019fc 	.word	0x200019fc
 800b4c4:	08011584 	.word	0x08011584

0800b4c8 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800b4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4cc:	b089      	sub	sp, #36	; 0x24
 800b4ce:	461d      	mov	r5, r3
    if( adrNext->Version.Fields.Minor == 0 )
 800b4d0:	7883      	ldrb	r3, [r0, #2]
 800b4d2:	b12b      	cbz	r3, 800b4e0 <LoRaMacAdrCalcNext+0x18>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800b4d4:	f04f 0800 	mov.w	r8, #0
}
 800b4d8:	4640      	mov	r0, r8
 800b4da:	b009      	add	sp, #36	; 0x24
 800b4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e0:	4604      	mov	r4, r0
 800b4e2:	460f      	mov	r7, r1
 800b4e4:	4616      	mov	r6, r2
    int8_t datarate = adrNext->Datarate;
 800b4e6:	f990 9010 	ldrsb.w	r9, [r0, #16]
    int8_t txPower = adrNext->TxPower;
 800b4ea:	f990 a011 	ldrsb.w	sl, [r0, #17]
    *adrAckCounter = adrNext->AdrAckCounter;
 800b4ee:	6883      	ldr	r3, [r0, #8]
 800b4f0:	602b      	str	r3, [r5, #0]
    if( adrNext->AdrEnabled == true )
 800b4f2:	f890 8005 	ldrb.w	r8, [r0, #5]
 800b4f6:	f1b8 0f00 	cmp.w	r8, #0
 800b4fa:	d104      	bne.n	800b506 <LoRaMacAdrCalcNext+0x3e>
    *drOut = datarate;
 800b4fc:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800b500:	f886 a000 	strb.w	sl, [r6]
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800b504:	e7e8      	b.n	800b4d8 <LoRaMacAdrCalcNext+0x10>
        getPhy.Attribute = PHY_MIN_TX_DR;
 800b506:	2302      	movs	r3, #2
 800b508:	f88d 300c 	strb.w	r3, [sp, #12]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b50c:	7c83      	ldrb	r3, [r0, #18]
 800b50e:	f88d 300e 	strb.w	r3, [sp, #14]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b512:	a903      	add	r1, sp, #12
 800b514:	7cc0      	ldrb	r0, [r0, #19]
 800b516:	f000 ffae 	bl	800c476 <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 800b51a:	fa4f fb80 	sxtb.w	fp, r0
        datarate = MAX( datarate, minTxDatarate );
 800b51e:	464a      	mov	r2, r9
 800b520:	45d9      	cmp	r9, fp
 800b522:	bfb8      	it	lt
 800b524:	465a      	movlt	r2, fp
 800b526:	9201      	str	r2, [sp, #4]
        if( datarate == minTxDatarate )
 800b528:	45d9      	cmp	r9, fp
 800b52a:	dc04      	bgt.n	800b536 <LoRaMacAdrCalcNext+0x6e>
            *adrAckCounter = 0;
 800b52c:	2300      	movs	r3, #0
 800b52e:	602b      	str	r3, [r5, #0]
        datarate = MAX( datarate, minTxDatarate );
 800b530:	4691      	mov	r9, r2
            adrAckReq = false;
 800b532:	4698      	mov	r8, r3
 800b534:	e7e2      	b.n	800b4fc <LoRaMacAdrCalcNext+0x34>
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800b536:	68a2      	ldr	r2, [r4, #8]
 800b538:	89a1      	ldrh	r1, [r4, #12]
 800b53a:	428a      	cmp	r2, r1
 800b53c:	bf34      	ite	cc
 800b53e:	f04f 0800 	movcc.w	r8, #0
 800b542:	f04f 0801 	movcs.w	r8, #1
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b546:	89e3      	ldrh	r3, [r4, #14]
 800b548:	440b      	add	r3, r1
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d202      	bcs.n	800b554 <LoRaMacAdrCalcNext+0x8c>
        datarate = MAX( datarate, minTxDatarate );
 800b54e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b552:	e7d3      	b.n	800b4fc <LoRaMacAdrCalcNext+0x34>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800b554:	2308      	movs	r3, #8
 800b556:	f88d 300c 	strb.w	r3, [sp, #12]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b55a:	a903      	add	r1, sp, #12
 800b55c:	7ce0      	ldrb	r0, [r4, #19]
 800b55e:	f000 ff8a 	bl	800c476 <RegionGetPhyParam>
                txPower = phyParam.Value;
 800b562:	fa4f fa80 	sxtb.w	sl, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800b566:	89e2      	ldrh	r2, [r4, #14]
 800b568:	68a3      	ldr	r3, [r4, #8]
 800b56a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b56e:	fb02 3311 	mls	r3, r2, r1, r3
 800b572:	2b01      	cmp	r3, #1
 800b574:	d002      	beq.n	800b57c <LoRaMacAdrCalcNext+0xb4>
        datarate = MAX( datarate, minTxDatarate );
 800b576:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b57a:	e7bf      	b.n	800b4fc <LoRaMacAdrCalcNext+0x34>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800b57c:	2322      	movs	r3, #34	; 0x22
 800b57e:	f88d 300c 	strb.w	r3, [sp, #12]
                    getPhy.Datarate = datarate;
 800b582:	9b01      	ldr	r3, [sp, #4]
 800b584:	f88d 300d 	strb.w	r3, [sp, #13]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b588:	7ca3      	ldrb	r3, [r4, #18]
 800b58a:	f88d 300e 	strb.w	r3, [sp, #14]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b58e:	a903      	add	r1, sp, #12
 800b590:	7ce0      	ldrb	r0, [r4, #19]
 800b592:	f000 ff70 	bl	800c476 <RegionGetPhyParam>
                    datarate = phyParam.Value;
 800b596:	fa4f f980 	sxtb.w	r9, r0
                    if( datarate == minTxDatarate )
 800b59a:	45cb      	cmp	fp, r9
 800b59c:	d1ae      	bne.n	800b4fc <LoRaMacAdrCalcNext+0x34>
                        if( adrNext->UpdateChanMask == true )
 800b59e:	f894 8004 	ldrb.w	r8, [r4, #4]
 800b5a2:	f1b8 0f00 	cmp.w	r8, #0
 800b5a6:	d0a9      	beq.n	800b4fc <LoRaMacAdrCalcNext+0x34>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800b5a8:	2302      	movs	r3, #2
 800b5aa:	f88d 301c 	strb.w	r3, [sp, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 800b5ae:	a905      	add	r1, sp, #20
 800b5b0:	7ce0      	ldrb	r0, [r4, #19]
 800b5b2:	f000 ff77 	bl	800c4a4 <RegionInitDefaults>
                        adrAckReq = false;
 800b5b6:	f04f 0800 	mov.w	r8, #0
 800b5ba:	e79f      	b.n	800b4fc <LoRaMacAdrCalcNext+0x34>

0800b5bc <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5bc:	4770      	bx	lr

0800b5be <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5be:	4770      	bx	lr

0800b5c0 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5c0:	4770      	bx	lr

0800b5c2 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5c2:	4770      	bx	lr

0800b5c4 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5c4:	2000      	movs	r0, #0
 800b5c6:	4770      	bx	lr

0800b5c8 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5c8:	4770      	bx	lr

0800b5ca <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5ca:	4770      	bx	lr

0800b5cc <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5cc:	4770      	bx	lr

0800b5ce <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5ce:	2000      	movs	r0, #0
 800b5d0:	4770      	bx	lr

0800b5d2 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5d2:	2000      	movs	r0, #0
 800b5d4:	4770      	bx	lr

0800b5d6 <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	4770      	bx	lr

0800b5da <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5da:	2000      	movs	r0, #0
 800b5dc:	4770      	bx	lr

0800b5de <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5de:	2000      	movs	r0, #0
 800b5e0:	4770      	bx	lr

0800b5e2 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5e2:	4770      	bx	lr

0800b5e4 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5e4:	4770      	bx	lr

0800b5e6 <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5e6:	4770      	bx	lr

0800b5e8 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5e8:	2002      	movs	r0, #2
 800b5ea:	4770      	bx	lr

0800b5ec <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5ec:	2002      	movs	r0, #2
 800b5ee:	4770      	bx	lr

0800b5f0 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5f0:	2002      	movs	r0, #2
 800b5f2:	4770      	bx	lr

0800b5f4 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5f4:	4770      	bx	lr

0800b5f6 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5f6:	2000      	movs	r0, #0
 800b5f8:	4770      	bx	lr

0800b5fa <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5fa:	4770      	bx	lr

0800b5fc <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5fc:	4770      	bx	lr

0800b5fe <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b5fe:	2000      	movs	r0, #0
 800b600:	4770      	bx	lr

0800b602 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b602:	2000      	movs	r0, #0
 800b604:	4770      	bx	lr

0800b606 <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b606:	4770      	bx	lr

0800b608 <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b608:	4770      	bx	lr
	...

0800b60c <LoRaMacCommandsInit>:
            return false;
    }
}

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800b60c:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800b60e:	4c05      	ldr	r4, [pc, #20]	; (800b624 <LoRaMacCommandsInit+0x18>)
 800b610:	22fc      	movs	r2, #252	; 0xfc
 800b612:	2100      	movs	r1, #0
 800b614:	4620      	mov	r0, r4
 800b616:	f002 fa4b 	bl	800dab0 <memset1>
    list->First = NULL;
 800b61a:	2000      	movs	r0, #0
 800b61c:	6020      	str	r0, [r4, #0]
    list->Last = NULL;
 800b61e:	6060      	str	r0, [r4, #4]

    LinkedListInit( &CommandsCtx.MacCommandList );

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b620:	bd10      	pop	{r4, pc}
 800b622:	bf00      	nop
 800b624:	20001f1c 	.word	0x20001f1c

0800b628 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800b628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( payload == NULL )
 800b62a:	b159      	cbz	r1, 800b644 <LoRaMacCommandsAddCmd+0x1c>
 800b62c:	4606      	mov	r6, r0
 800b62e:	4617      	mov	r7, r2
 800b630:	468e      	mov	lr, r1
 800b632:	4a25      	ldr	r2, [pc, #148]	; (800b6c8 <LoRaMacCommandsAddCmd+0xa0>)
 800b634:	f04f 0c00 	mov.w	ip, #0
 800b638:	e00f      	b.n	800b65a <LoRaMacCommandsAddCmd+0x32>
        list->First = element;
 800b63a:	4b24      	ldr	r3, [pc, #144]	; (800b6cc <LoRaMacCommandsAddCmd+0xa4>)
 800b63c:	6018      	str	r0, [r3, #0]
 800b63e:	e01b      	b.n	800b678 <LoRaMacCommandsAddCmd+0x50>
            return true;
 800b640:	2301      	movs	r3, #1
 800b642:	e036      	b.n	800b6b2 <LoRaMacCommandsAddCmd+0x8a>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b644:	2401      	movs	r4, #1
 800b646:	e000      	b.n	800b64a <LoRaMacCommandsAddCmd+0x22>
    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );

    if( newCmd == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800b648:	2402      	movs	r4, #2
    newCmd->IsSticky = IsSticky( cid );

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b64a:	4620      	mov	r0, r4
 800b64c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
 800b64e:	f10c 0c01 	add.w	ip, ip, #1
 800b652:	3210      	adds	r2, #16
 800b654:	f1bc 0f0f 	cmp.w	ip, #15
 800b658:	d0f6      	beq.n	800b648 <LoRaMacCommandsAddCmd+0x20>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800b65a:	4665      	mov	r5, ip
 800b65c:	f1a2 000f 	sub.w	r0, r2, #15
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b660:	f1a2 0310 	sub.w	r3, r2, #16
        if( mem[size] != 0x00 )
 800b664:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800b668:	2c00      	cmp	r4, #0
 800b66a:	d1f0      	bne.n	800b64e <LoRaMacCommandsAddCmd+0x26>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d1f9      	bne.n	800b664 <LoRaMacCommandsAddCmd+0x3c>
    if( list->First == NULL )
 800b670:	4b16      	ldr	r3, [pc, #88]	; (800b6cc <LoRaMacCommandsAddCmd+0xa4>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d0e0      	beq.n	800b63a <LoRaMacCommandsAddCmd+0x12>
    if( list->Last )
 800b678:	4b14      	ldr	r3, [pc, #80]	; (800b6cc <LoRaMacCommandsAddCmd+0xa4>)
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	b103      	cbz	r3, 800b680 <LoRaMacCommandsAddCmd+0x58>
        list->Last->Next = element;
 800b67e:	6018      	str	r0, [r3, #0]
    element->Next = NULL;
 800b680:	4b12      	ldr	r3, [pc, #72]	; (800b6cc <LoRaMacCommandsAddCmd+0xa4>)
 800b682:	eb03 1205 	add.w	r2, r3, r5, lsl #4
 800b686:	2100      	movs	r1, #0
 800b688:	6091      	str	r1, [r2, #8]
    list->Last = element;
 800b68a:	6058      	str	r0, [r3, #4]
    newCmd->CID = cid;
 800b68c:	7316      	strb	r6, [r2, #12]
    newCmd->PayloadSize = payloadSize;
 800b68e:	6117      	str	r7, [r2, #16]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800b690:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 800b694:	b2ba      	uxth	r2, r7
 800b696:	4671      	mov	r1, lr
 800b698:	f103 000d 	add.w	r0, r3, #13
 800b69c:	f002 f9ee 	bl	800da7c <memcpy1>
    switch( cid )
 800b6a0:	2e05      	cmp	r6, #5
 800b6a2:	d0cd      	beq.n	800b640 <LoRaMacCommandsAddCmd+0x18>
 800b6a4:	f1a6 0308 	sub.w	r3, r6, #8
 800b6a8:	b2db      	uxtb	r3, r3
 800b6aa:	2b02      	cmp	r3, #2
 800b6ac:	bf8c      	ite	hi
 800b6ae:	2300      	movhi	r3, #0
 800b6b0:	2301      	movls	r3, #1
    newCmd->IsSticky = IsSticky( cid );
 800b6b2:	4a06      	ldr	r2, [pc, #24]	; (800b6cc <LoRaMacCommandsAddCmd+0xa4>)
 800b6b4:	eb02 1505 	add.w	r5, r2, r5, lsl #4
 800b6b8:	752b      	strb	r3, [r5, #20]
    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800b6ba:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 800b6be:	3301      	adds	r3, #1
 800b6c0:	441f      	add	r7, r3
 800b6c2:	f8c2 70f8 	str.w	r7, [r2, #248]	; 0xf8
    return LORAMAC_COMMANDS_SUCCESS;
 800b6c6:	e7c0      	b.n	800b64a <LoRaMacCommandsAddCmd+0x22>
 800b6c8:	20001f33 	.word	0x20001f33
 800b6cc:	20001f1c 	.word	0x20001f1c

0800b6d0 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800b6d0:	b1d8      	cbz	r0, 800b70a <LoRaMacCommandsRemoveCmd+0x3a>
{
 800b6d2:	b510      	push	{r4, lr}
 800b6d4:	4684      	mov	ip, r0
    curElement = list->First;
 800b6d6:	4b1c      	ldr	r3, [pc, #112]	; (800b748 <LoRaMacCommandsRemoveCmd+0x78>)
 800b6d8:	6819      	ldr	r1, [r3, #0]
    if( element != curElement )
 800b6da:	4288      	cmp	r0, r1
 800b6dc:	d00d      	beq.n	800b6fa <LoRaMacCommandsRemoveCmd+0x2a>
    curElement = list->First;
 800b6de:	460b      	mov	r3, r1
 800b6e0:	e000      	b.n	800b6e4 <LoRaMacCommandsRemoveCmd+0x14>
            curElement = curElement->Next;
 800b6e2:	4613      	mov	r3, r2
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800b6e4:	b19b      	cbz	r3, 800b70e <LoRaMacCommandsRemoveCmd+0x3e>
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	4594      	cmp	ip, r2
 800b6ea:	d1fa      	bne.n	800b6e2 <LoRaMacCommandsRemoveCmd+0x12>
    if( list->First == element )
 800b6ec:	4291      	cmp	r1, r2
 800b6ee:	d005      	beq.n	800b6fc <LoRaMacCommandsRemoveCmd+0x2c>
    if( list->Last == element )
 800b6f0:	4a15      	ldr	r2, [pc, #84]	; (800b748 <LoRaMacCommandsRemoveCmd+0x78>)
 800b6f2:	6852      	ldr	r2, [r2, #4]
 800b6f4:	4594      	cmp	ip, r2
 800b6f6:	d111      	bne.n	800b71c <LoRaMacCommandsRemoveCmd+0x4c>
 800b6f8:	e00d      	b.n	800b716 <LoRaMacCommandsRemoveCmd+0x46>
        curElement = NULL;
 800b6fa:	2300      	movs	r3, #0
        list->First = element->Next;
 800b6fc:	6809      	ldr	r1, [r1, #0]
 800b6fe:	4a12      	ldr	r2, [pc, #72]	; (800b748 <LoRaMacCommandsRemoveCmd+0x78>)
 800b700:	6011      	str	r1, [r2, #0]
    if( list->Last == element )
 800b702:	6852      	ldr	r2, [r2, #4]
 800b704:	4594      	cmp	ip, r2
 800b706:	d108      	bne.n	800b71a <LoRaMacCommandsRemoveCmd+0x4a>
 800b708:	e005      	b.n	800b716 <LoRaMacCommandsRemoveCmd+0x46>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b70a:	2001      	movs	r0, #1
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b70c:	4770      	bx	lr
    if( list->Last == element )
 800b70e:	4a0e      	ldr	r2, [pc, #56]	; (800b748 <LoRaMacCommandsRemoveCmd+0x78>)
 800b710:	6852      	ldr	r2, [r2, #4]
 800b712:	4562      	cmp	r2, ip
 800b714:	d105      	bne.n	800b722 <LoRaMacCommandsRemoveCmd+0x52>
        list->Last = PrevElement;
 800b716:	4a0c      	ldr	r2, [pc, #48]	; (800b748 <LoRaMacCommandsRemoveCmd+0x78>)
 800b718:	6053      	str	r3, [r2, #4]
    if( PrevElement != NULL )
 800b71a:	b113      	cbz	r3, 800b722 <LoRaMacCommandsRemoveCmd+0x52>
        PrevElement->Next = element->Next;
 800b71c:	f8dc 2000 	ldr.w	r2, [ip]
 800b720:	601a      	str	r2, [r3, #0]
    element->Next = NULL;
 800b722:	2400      	movs	r4, #0
 800b724:	f8cc 4000 	str.w	r4, [ip]
    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800b728:	4a07      	ldr	r2, [pc, #28]	; (800b748 <LoRaMacCommandsRemoveCmd+0x78>)
 800b72a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 800b72e:	3b01      	subs	r3, #1
 800b730:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800b734:	1a5b      	subs	r3, r3, r1
 800b736:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800b73a:	2210      	movs	r2, #16
 800b73c:	4621      	mov	r1, r4
 800b73e:	4660      	mov	r0, ip
 800b740:	f002 f9b6 	bl	800dab0 <memset1>
    return LORAMAC_COMMANDS_SUCCESS;
 800b744:	4620      	mov	r0, r4
}
 800b746:	bd10      	pop	{r4, pc}
 800b748:	20001f1c 	.word	0x20001f1c

0800b74c <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b74c:	4b0b      	ldr	r3, [pc, #44]	; (800b77c <LoRaMacCommandsRemoveNoneStickyCmds+0x30>)
 800b74e:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b750:	b120      	cbz	r0, 800b75c <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800b752:	7b03      	ldrb	r3, [r0, #12]
 800b754:	b133      	cbz	r3, 800b764 <LoRaMacCommandsRemoveNoneStickyCmds+0x18>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800b756:	6800      	ldr	r0, [r0, #0]
    while( curElement != NULL )
 800b758:	2800      	cmp	r0, #0
 800b75a:	d1fa      	bne.n	800b752 <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b75c:	2000      	movs	r0, #0
 800b75e:	4770      	bx	lr
 800b760:	2000      	movs	r0, #0
 800b762:	bd10      	pop	{r4, pc}
{
 800b764:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800b766:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800b768:	f7ff ffb2 	bl	800b6d0 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800b76c:	4620      	mov	r0, r4
    while( curElement != NULL )
 800b76e:	2800      	cmp	r0, #0
 800b770:	d0f6      	beq.n	800b760 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
        if( curElement->IsSticky == false )
 800b772:	7b03      	ldrb	r3, [r0, #12]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d0f6      	beq.n	800b766 <LoRaMacCommandsRemoveNoneStickyCmds+0x1a>
            curElement = curElement->Next;
 800b778:	6800      	ldr	r0, [r0, #0]
 800b77a:	e7f8      	b.n	800b76e <LoRaMacCommandsRemoveNoneStickyCmds+0x22>
 800b77c:	20001f1c 	.word	0x20001f1c

0800b780 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800b780:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b782:	4b09      	ldr	r3, [pc, #36]	; (800b7a8 <LoRaMacCommandsRemoveStickyAnsCmds+0x28>)
 800b784:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b786:	b91c      	cbnz	r4, 800b790 <LoRaMacCommandsRemoveStickyAnsCmds+0x10>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b788:	2000      	movs	r0, #0
 800b78a:	bd10      	pop	{r4, pc}
    while( curElement != NULL )
 800b78c:	2c00      	cmp	r4, #0
 800b78e:	d0fb      	beq.n	800b788 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        nexElement = curElement->Next;
 800b790:	4620      	mov	r0, r4
 800b792:	6824      	ldr	r4, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 800b794:	7903      	ldrb	r3, [r0, #4]
    switch( cid )
 800b796:	2b05      	cmp	r3, #5
 800b798:	d003      	beq.n	800b7a2 <LoRaMacCommandsRemoveStickyAnsCmds+0x22>
 800b79a:	3b08      	subs	r3, #8
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	2b02      	cmp	r3, #2
 800b7a0:	d8f4      	bhi.n	800b78c <LoRaMacCommandsRemoveStickyAnsCmds+0xc>
            LoRaMacCommandsRemoveCmd( curElement );
 800b7a2:	f7ff ff95 	bl	800b6d0 <LoRaMacCommandsRemoveCmd>
 800b7a6:	e7f1      	b.n	800b78c <LoRaMacCommandsRemoveStickyAnsCmds+0xc>
 800b7a8:	20001f1c 	.word	0x20001f1c

0800b7ac <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800b7ac:	b128      	cbz	r0, 800b7ba <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800b7ae:	4a04      	ldr	r2, [pc, #16]	; (800b7c0 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800b7b0:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 800b7b4:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800b7b6:	2000      	movs	r0, #0
 800b7b8:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b7ba:	2001      	movs	r0, #1
}
 800b7bc:	4770      	bx	lr
 800b7be:	bf00      	nop
 800b7c0:	20001f1c 	.word	0x20001f1c

0800b7c4 <LoRaMacCommandsSerializeCmds>:
{
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800b7c4:	b352      	cbz	r2, 800b81c <LoRaMacCommandsSerializeCmds+0x58>
{
 800b7c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ca:	4607      	mov	r7, r0
 800b7cc:	4688      	mov	r8, r1
 800b7ce:	4616      	mov	r6, r2
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800b7d0:	b331      	cbz	r1, 800b820 <LoRaMacCommandsSerializeCmds+0x5c>
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800b7d2:	4b14      	ldr	r3, [pc, #80]	; (800b824 <LoRaMacCommandsSerializeCmds+0x60>)
 800b7d4:	681c      	ldr	r4, [r3, #0]
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800b7d6:	b1dc      	cbz	r4, 800b810 <LoRaMacCommandsSerializeCmds+0x4c>
    uint8_t itr = 0;
 800b7d8:	2100      	movs	r1, #0
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800b7da:	1a7a      	subs	r2, r7, r1
 800b7dc:	68a3      	ldr	r3, [r4, #8]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d30f      	bcc.n	800b804 <LoRaMacCommandsSerializeCmds+0x40>
        {
            buffer[itr++] = curElement->CID;
 800b7e4:	1c4d      	adds	r5, r1, #1
 800b7e6:	b2ed      	uxtb	r5, r5
 800b7e8:	7923      	ldrb	r3, [r4, #4]
 800b7ea:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800b7ec:	8922      	ldrh	r2, [r4, #8]
 800b7ee:	1d61      	adds	r1, r4, #5
 800b7f0:	1970      	adds	r0, r6, r5
 800b7f2:	f002 f943 	bl	800da7c <memcpy1>
            itr += curElement->PayloadSize;
 800b7f6:	68a3      	ldr	r3, [r4, #8]
 800b7f8:	441d      	add	r5, r3
 800b7fa:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800b7fc:	6824      	ldr	r4, [r4, #0]
    while( curElement != NULL )
 800b7fe:	2c00      	cmp	r4, #0
 800b800:	d1eb      	bne.n	800b7da <LoRaMacCommandsSerializeCmds+0x16>
 800b802:	e005      	b.n	800b810 <LoRaMacCommandsSerializeCmds+0x4c>

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800b804:	4620      	mov	r0, r4
 800b806:	6824      	ldr	r4, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800b808:	f7ff ff62 	bl	800b6d0 <LoRaMacCommandsRemoveCmd>
    while( curElement != NULL )
 800b80c:	2c00      	cmp	r4, #0
 800b80e:	d1f9      	bne.n	800b804 <LoRaMacCommandsSerializeCmds+0x40>
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800b810:	4640      	mov	r0, r8
 800b812:	f7ff ffcb 	bl	800b7ac <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800b816:	2000      	movs	r0, #0
}
 800b818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b81c:	2001      	movs	r0, #1
}
 800b81e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b820:	2001      	movs	r0, #1
 800b822:	e7f9      	b.n	800b818 <LoRaMacCommandsSerializeCmds+0x54>
 800b824:	20001f1c 	.word	0x20001f1c

0800b828 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800b828:	4601      	mov	r1, r0
 800b82a:	b178      	cbz	r0, 800b84c <LoRaMacCommandsStickyCmdsPending+0x24>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800b82c:	4b09      	ldr	r3, [pc, #36]	; (800b854 <LoRaMacCommandsStickyCmdsPending+0x2c>)
 800b82e:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 800b830:	2200      	movs	r2, #0
 800b832:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b834:	b163      	cbz	r3, 800b850 <LoRaMacCommandsStickyCmdsPending+0x28>
    {
        if( curElement->IsSticky == true )
 800b836:	7b1a      	ldrb	r2, [r3, #12]
 800b838:	b922      	cbnz	r2, 800b844 <LoRaMacCommandsStickyCmdsPending+0x1c>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 800b83a:	681b      	ldr	r3, [r3, #0]
    while( curElement != NULL )
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d1fa      	bne.n	800b836 <LoRaMacCommandsStickyCmdsPending+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800b840:	2000      	movs	r0, #0
 800b842:	4770      	bx	lr
            *cmdsPending = true;
 800b844:	2301      	movs	r3, #1
 800b846:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800b848:	2000      	movs	r0, #0
 800b84a:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b84c:	2001      	movs	r0, #1
 800b84e:	4770      	bx	lr
    return LORAMAC_COMMANDS_SUCCESS;
 800b850:	2000      	movs	r0, #0
}
 800b852:	4770      	bx	lr
 800b854:	20001f1c 	.word	0x20001f1c

0800b858 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800b858:	1e83      	subs	r3, r0, #2
 800b85a:	2b11      	cmp	r3, #17
 800b85c:	d824      	bhi.n	800b8a8 <LoRaMacCommandsGetCmdSize+0x50>
 800b85e:	e8df f003 	tbb	[pc, r3]
 800b862:	0b09      	.short	0x0b09
 800b864:	110f240d 	.word	0x110f240d
 800b868:	23171513 	.word	0x23171513
 800b86c:	23231923 	.word	0x23231923
 800b870:	211f1d1b 	.word	0x211f1d1b
 800b874:	2003      	movs	r0, #3
 800b876:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800b878:	2005      	movs	r0, #5
            break;
 800b87a:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800b87c:	2002      	movs	r0, #2
            break;
 800b87e:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800b880:	2001      	movs	r0, #1
            break;
 800b882:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800b884:	2006      	movs	r0, #6
            break;
 800b886:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800b888:	2002      	movs	r0, #2
            break;
 800b88a:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800b88c:	2002      	movs	r0, #2
            break;
 800b88e:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800b890:	2005      	movs	r0, #5
            break;
 800b892:	4770      	bx	lr
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800b894:	2006      	movs	r0, #6
            break;
 800b896:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800b898:	2001      	movs	r0, #1
            break;
 800b89a:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800b89c:	2005      	movs	r0, #5
            break;
 800b89e:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800b8a0:	2004      	movs	r0, #4
            break;
 800b8a2:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800b8a4:	2004      	movs	r0, #4
            break;
 800b8a6:	4770      	bx	lr
    uint8_t cidSize = 0;
 800b8a8:	2000      	movs	r0, #0
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800b8aa:	4770      	bx	lr

0800b8ac <GetElement>:
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800b8ac:	b430      	push	{r4, r5}
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b8ae:	4b0d      	ldr	r3, [pc, #52]	; (800b8e4 <GetElement+0x38>)
 800b8b0:	f893 4020 	ldrb.w	r4, [r3, #32]
 800b8b4:	b18c      	cbz	r4, 800b8da <GetElement+0x2e>
 800b8b6:	2300      	movs	r3, #0
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b8b8:	4d0a      	ldr	r5, [pc, #40]	; (800b8e4 <GetElement+0x38>)
 800b8ba:	f105 0c1c 	add.w	ip, r5, #28
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
    {
        if( element->Request == request )
 800b8be:	780a      	ldrb	r2, [r1, #0]
 800b8c0:	4282      	cmp	r2, r0
 800b8c2:	d00c      	beq.n	800b8de <GetElement+0x32>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b8c4:	4561      	cmp	r1, ip
        bufferPointer++;
 800b8c6:	bf14      	ite	ne
 800b8c8:	3104      	addne	r1, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b8ca:	f105 010c 	addeq.w	r1, r5, #12
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	b2da      	uxtb	r2, r3
 800b8d2:	4294      	cmp	r4, r2
 800b8d4:	d8f3      	bhi.n	800b8be <GetElement+0x12>
            return element;
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
 800b8d6:	2000      	movs	r0, #0
 800b8d8:	e002      	b.n	800b8e0 <GetElement+0x34>
        return NULL;
 800b8da:	2000      	movs	r0, #0
 800b8dc:	e000      	b.n	800b8e0 <GetElement+0x34>
 800b8de:	4608      	mov	r0, r1
}
 800b8e0:	bc30      	pop	{r4, r5}
 800b8e2:	4770      	bx	lr
 800b8e4:	20002018 	.word	0x20002018

0800b8e8 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800b8e8:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800b8ea:	4c08      	ldr	r4, [pc, #32]	; (800b90c <LoRaMacConfirmQueueInit+0x24>)
 800b8ec:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b8f4:	f104 000c 	add.w	r0, r4, #12
 800b8f8:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b8fa:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800b8fc:	2214      	movs	r2, #20
 800b8fe:	21ff      	movs	r1, #255	; 0xff
 800b900:	f002 f8d6 	bl	800dab0 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b904:	2301      	movs	r3, #1
 800b906:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800b90a:	bd10      	pop	{r4, pc}
 800b90c:	20002018 	.word	0x20002018

0800b910 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b910:	4b11      	ldr	r3, [pc, #68]	; (800b958 <LoRaMacConfirmQueueAdd+0x48>)
 800b912:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b916:	2b04      	cmp	r3, #4
 800b918:	d81b      	bhi.n	800b952 <LoRaMacConfirmQueueAdd+0x42>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800b91a:	4b0f      	ldr	r3, [pc, #60]	; (800b958 <LoRaMacConfirmQueueAdd+0x48>)
 800b91c:	689a      	ldr	r2, [r3, #8]
 800b91e:	7801      	ldrb	r1, [r0, #0]
 800b920:	7011      	strb	r1, [r2, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800b922:	689a      	ldr	r2, [r3, #8]
 800b924:	7841      	ldrb	r1, [r0, #1]
 800b926:	7051      	strb	r1, [r2, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800b928:	689a      	ldr	r2, [r3, #8]
 800b92a:	78c1      	ldrb	r1, [r0, #3]
 800b92c:	70d1      	strb	r1, [r2, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800b92e:	689a      	ldr	r2, [r3, #8]
 800b930:	2100      	movs	r1, #0
 800b932:	7091      	strb	r1, [r2, #2]
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800b934:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b938:	3201      	adds	r2, #1
 800b93a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800b93e:	689a      	ldr	r2, [r3, #8]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b940:	331c      	adds	r3, #28
 800b942:	429a      	cmp	r2, r3
        bufferPointer++;
 800b944:	bf14      	ite	ne
 800b946:	3204      	addne	r2, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b948:	4a04      	ldreq	r2, [pc, #16]	; (800b95c <LoRaMacConfirmQueueAdd+0x4c>)
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800b94a:	4b03      	ldr	r3, [pc, #12]	; (800b958 <LoRaMacConfirmQueueAdd+0x48>)
 800b94c:	609a      	str	r2, [r3, #8]

    return true;
 800b94e:	2001      	movs	r0, #1
 800b950:	4770      	bx	lr
        return false;
 800b952:	2000      	movs	r0, #0
}
 800b954:	4770      	bx	lr
 800b956:	bf00      	nop
 800b958:	20002018 	.word	0x20002018
 800b95c:	20002024 	.word	0x20002024

0800b960 <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b960:	4b09      	ldr	r3, [pc, #36]	; (800b988 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800b962:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b966:	b16b      	cbz	r3, 800b984 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800b968:	4a07      	ldr	r2, [pc, #28]	; (800b988 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800b96a:	3b01      	subs	r3, #1
 800b96c:	f882 3020 	strb.w	r3, [r2, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800b970:	6853      	ldr	r3, [r2, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b972:	321c      	adds	r2, #28
 800b974:	4293      	cmp	r3, r2
        bufferPointer++;
 800b976:	bf14      	ite	ne
 800b978:	3304      	addne	r3, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b97a:	4b04      	ldreq	r3, [pc, #16]	; (800b98c <LoRaMacConfirmQueueRemoveFirst+0x2c>)
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800b97c:	4a02      	ldr	r2, [pc, #8]	; (800b988 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800b97e:	6053      	str	r3, [r2, #4]

    return true;
 800b980:	2001      	movs	r0, #1
 800b982:	4770      	bx	lr
        return false;
 800b984:	2000      	movs	r0, #0
}
 800b986:	4770      	bx	lr
 800b988:	20002018 	.word	0x20002018
 800b98c:	20002024 	.word	0x20002024

0800b990 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b990:	4b08      	ldr	r3, [pc, #32]	; (800b9b4 <LoRaMacConfirmQueueSetStatus+0x24>)
 800b992:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b996:	b163      	cbz	r3, 800b9b2 <LoRaMacConfirmQueueSetStatus+0x22>
{
 800b998:	b510      	push	{r4, lr}
 800b99a:	4604      	mov	r4, r0
 800b99c:	4608      	mov	r0, r1
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800b99e:	4b05      	ldr	r3, [pc, #20]	; (800b9b4 <LoRaMacConfirmQueueSetStatus+0x24>)
 800b9a0:	689a      	ldr	r2, [r3, #8]
 800b9a2:	6859      	ldr	r1, [r3, #4]
 800b9a4:	f7ff ff82 	bl	800b8ac <GetElement>
        if( element != NULL )
 800b9a8:	b110      	cbz	r0, 800b9b0 <LoRaMacConfirmQueueSetStatus+0x20>
        {
            element->Status = status;
 800b9aa:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800b9b0:	bd10      	pop	{r4, pc}
 800b9b2:	4770      	bx	lr
 800b9b4:	20002018 	.word	0x20002018

0800b9b8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800b9b8:	b508      	push	{r3, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b9ba:	4b08      	ldr	r3, [pc, #32]	; (800b9dc <LoRaMacConfirmQueueGetStatus+0x24>)
 800b9bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b9c0:	b13b      	cbz	r3, 800b9d2 <LoRaMacConfirmQueueGetStatus+0x1a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800b9c2:	4b06      	ldr	r3, [pc, #24]	; (800b9dc <LoRaMacConfirmQueueGetStatus+0x24>)
 800b9c4:	689a      	ldr	r2, [r3, #8]
 800b9c6:	6859      	ldr	r1, [r3, #4]
 800b9c8:	f7ff ff70 	bl	800b8ac <GetElement>
        if( element != NULL )
 800b9cc:	b118      	cbz	r0, 800b9d6 <LoRaMacConfirmQueueGetStatus+0x1e>
        {
            return element->Status;
 800b9ce:	7840      	ldrb	r0, [r0, #1]
 800b9d0:	e000      	b.n	800b9d4 <LoRaMacConfirmQueueGetStatus+0x1c>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b9d2:	2001      	movs	r0, #1
}
 800b9d4:	bd08      	pop	{r3, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b9d6:	2001      	movs	r0, #1
 800b9d8:	e7fc      	b.n	800b9d4 <LoRaMacConfirmQueueGetStatus+0x1c>
 800b9da:	bf00      	nop
 800b9dc:	20002018 	.word	0x20002018

0800b9e0 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800b9e0:	4a0f      	ldr	r2, [pc, #60]	; (800ba20 <LoRaMacConfirmQueueSetStatusCmn+0x40>)
 800b9e2:	6853      	ldr	r3, [r2, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800b9e4:	f882 0021 	strb.w	r0, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b9e8:	f892 2020 	ldrb.w	r2, [r2, #32]
 800b9ec:	b1ba      	cbz	r2, 800ba1e <LoRaMacConfirmQueueSetStatusCmn+0x3e>
{
 800b9ee:	b500      	push	{lr}
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
 800b9f0:	f04f 0e01 	mov.w	lr, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b9f4:	490a      	ldr	r1, [pc, #40]	; (800ba20 <LoRaMacConfirmQueueSetStatusCmn+0x40>)
 800b9f6:	f101 0c1c 	add.w	ip, r1, #28
 800b9fa:	e007      	b.n	800ba0c <LoRaMacConfirmQueueSetStatusCmn+0x2c>
 800b9fc:	4563      	cmp	r3, ip
        bufferPointer++;
 800b9fe:	bf14      	ite	ne
 800ba00:	3304      	addne	r3, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800ba02:	f101 030c 	addeq.w	r3, r1, #12
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 800ba06:	688a      	ldr	r2, [r1, #8]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d006      	beq.n	800ba1a <LoRaMacConfirmQueueSetStatusCmn+0x3a>
            element->Status = status;
 800ba0c:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800ba0e:	78da      	ldrb	r2, [r3, #3]
 800ba10:	2a00      	cmp	r2, #0
 800ba12:	d1f3      	bne.n	800b9fc <LoRaMacConfirmQueueSetStatusCmn+0x1c>
                element->ReadyToHandle = true;
 800ba14:	f883 e002 	strb.w	lr, [r3, #2]
 800ba18:	e7f0      	b.n	800b9fc <LoRaMacConfirmQueueSetStatusCmn+0x1c>
    }
}
 800ba1a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ba1e:	4770      	bx	lr
 800ba20:	20002018 	.word	0x20002018

0800ba24 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800ba24:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800ba26:	4b04      	ldr	r3, [pc, #16]	; (800ba38 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800ba28:	689a      	ldr	r2, [r3, #8]
 800ba2a:	6859      	ldr	r1, [r3, #4]
 800ba2c:	f7ff ff3e 	bl	800b8ac <GetElement>
    {
        return true;
    }
    return false;
}
 800ba30:	3800      	subs	r0, #0
 800ba32:	bf18      	it	ne
 800ba34:	2001      	movne	r0, #1
 800ba36:	bd08      	pop	{r3, pc}
 800ba38:	20002018 	.word	0x20002018

0800ba3c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800ba3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba3e:	b083      	sub	sp, #12
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800ba40:	4b16      	ldr	r3, [pc, #88]	; (800ba9c <LoRaMacConfirmQueueHandleCb+0x60>)
 800ba42:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800ba46:	b337      	cbz	r7, 800ba96 <LoRaMacConfirmQueueHandleCb+0x5a>
 800ba48:	4606      	mov	r6, r0
 800ba4a:	2500      	movs	r5, #0
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800ba4c:	461c      	mov	r4, r3
 800ba4e:	e011      	b.n	800ba74 <LoRaMacConfirmQueueHandleCb+0x38>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800ba50:	781a      	ldrb	r2, [r3, #0]
 800ba52:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800ba56:	785a      	ldrb	r2, [r3, #1]
 800ba58:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800ba5c:	78db      	ldrb	r3, [r3, #3]
 800ba5e:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800ba62:	f7ff ff7d 	bl	800b960 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800ba66:	a801      	add	r0, sp, #4
 800ba68:	f7ff ff52 	bl	800b910 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800ba6c:	3501      	adds	r5, #1
 800ba6e:	b2eb      	uxtb	r3, r5
 800ba70:	429f      	cmp	r7, r3
 800ba72:	d910      	bls.n	800ba96 <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800ba74:	6863      	ldr	r3, [r4, #4]
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	7033      	strb	r3, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800ba7a:	6863      	ldr	r3, [r4, #4]
 800ba7c:	785b      	ldrb	r3, [r3, #1]
 800ba7e:	7073      	strb	r3, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800ba80:	6863      	ldr	r3, [r4, #4]
        if( readyToHandle == true )
 800ba82:	789a      	ldrb	r2, [r3, #2]
 800ba84:	2a00      	cmp	r2, #0
 800ba86:	d0e3      	beq.n	800ba50 <LoRaMacConfirmQueueHandleCb+0x14>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800ba88:	6823      	ldr	r3, [r4, #0]
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	4630      	mov	r0, r6
 800ba8e:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 800ba90:	f7ff ff66 	bl	800b960 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 800ba94:	e7ea      	b.n	800ba6c <LoRaMacConfirmQueueHandleCb+0x30>
        }
    }
}
 800ba96:	b003      	add	sp, #12
 800ba98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	20002018 	.word	0x20002018

0800baa0 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800baa0:	4b01      	ldr	r3, [pc, #4]	; (800baa8 <LoRaMacConfirmQueueGetCnt+0x8>)
 800baa2:	f893 0020 	ldrb.w	r0, [r3, #32]
 800baa6:	4770      	bx	lr
 800baa8:	20002018 	.word	0x20002018

0800baac <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800baac:	4b03      	ldr	r3, [pc, #12]	; (800babc <LoRaMacConfirmQueueIsFull+0x10>)
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800baae:	f893 0020 	ldrb.w	r0, [r3, #32]
    }
    else
    {
        return false;
    }
}
 800bab2:	2804      	cmp	r0, #4
 800bab4:	bf94      	ite	ls
 800bab6:	2000      	movls	r0, #0
 800bab8:	2001      	movhi	r0, #1
 800baba:	4770      	bx	lr
 800babc:	20002018 	.word	0x20002018

0800bac0 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800bac0:	460b      	mov	r3, r1
 800bac2:	2900      	cmp	r1, #0
 800bac4:	d024      	beq.n	800bb10 <GetLastFcntDown+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800bac6:	3801      	subs	r0, #1
 800bac8:	2803      	cmp	r0, #3
 800baca:	d823      	bhi.n	800bb14 <GetLastFcntDown+0x54>
 800bacc:	e8df f000 	tbb	[pc, r0]
 800bad0:	1a120a02 	.word	0x1a120a02
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800bad4:	4a10      	ldr	r2, [pc, #64]	; (800bb18 <GetLastFcntDown+0x58>)
 800bad6:	6812      	ldr	r2, [r2, #0]
 800bad8:	6911      	ldr	r1, [r2, #16]
 800bada:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800badc:	6913      	ldr	r3, [r2, #16]
 800bade:	6213      	str	r3, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800bae0:	2000      	movs	r0, #0
            break;
 800bae2:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800bae4:	4a0c      	ldr	r2, [pc, #48]	; (800bb18 <GetLastFcntDown+0x58>)
 800bae6:	6812      	ldr	r2, [r2, #0]
 800bae8:	6951      	ldr	r1, [r2, #20]
 800baea:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800baec:	6953      	ldr	r3, [r2, #20]
 800baee:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800baf0:	2000      	movs	r0, #0
            break;
 800baf2:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800baf4:	4a08      	ldr	r2, [pc, #32]	; (800bb18 <GetLastFcntDown+0x58>)
 800baf6:	6812      	ldr	r2, [r2, #0]
 800baf8:	6991      	ldr	r1, [r2, #24]
 800bafa:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800bafc:	6993      	ldr	r3, [r2, #24]
 800bafe:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800bb00:	2000      	movs	r0, #0
            break;
 800bb02:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800bb04:	4a04      	ldr	r2, [pc, #16]	; (800bb18 <GetLastFcntDown+0x58>)
 800bb06:	6812      	ldr	r2, [r2, #0]
 800bb08:	69d2      	ldr	r2, [r2, #28]
 800bb0a:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800bb0c:	2000      	movs	r0, #0
            break;
 800bb0e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bb10:	200a      	movs	r0, #10
 800bb12:	4770      	bx	lr
    switch( fCntID )
 800bb14:	2005      	movs	r0, #5
}
 800bb16:	4770      	bx	lr
 800bb18:	2000203c 	.word	0x2000203c

0800bb1c <DeriveSessionKey10x>:
{
 800bb1c:	b510      	push	{r4, lr}
 800bb1e:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800bb20:	2400      	movs	r4, #0
 800bb22:	9402      	str	r4, [sp, #8]
 800bb24:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800bb26:	2802      	cmp	r0, #2
 800bb28:	d003      	beq.n	800bb32 <DeriveSessionKey10x+0x16>
 800bb2a:	2803      	cmp	r0, #3
 800bb2c:	d023      	beq.n	800bb76 <DeriveSessionKey10x+0x5a>
 800bb2e:	200b      	movs	r0, #11
 800bb30:	e01f      	b.n	800bb72 <DeriveSessionKey10x+0x56>
            compBase[0] = 0x01;
 800bb32:	2401      	movs	r4, #1
 800bb34:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800bb38:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800bb3c:	0a0c      	lsrs	r4, r1, #8
 800bb3e:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800bb42:	0c09      	lsrs	r1, r1, #16
 800bb44:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800bb48:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800bb4c:	0a11      	lsrs	r1, r2, #8
 800bb4e:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800bb52:	0c12      	lsrs	r2, r2, #16
 800bb54:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800bb58:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800bb5c:	0a1b      	lsrs	r3, r3, #8
 800bb5e:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800bb62:	4602      	mov	r2, r0
 800bb64:	2101      	movs	r1, #1
 800bb66:	4668      	mov	r0, sp
 800bb68:	f7fb fd36 	bl	80075d8 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	bf18      	it	ne
 800bb70:	200f      	movne	r0, #15
}
 800bb72:	b004      	add	sp, #16
 800bb74:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800bb76:	2402      	movs	r4, #2
 800bb78:	f88d 4000 	strb.w	r4, [sp]
            break;
 800bb7c:	e7dc      	b.n	800bb38 <DeriveSessionKey10x+0x1c>

0800bb7e <PayloadEncrypt>:
{
 800bb7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb82:	b089      	sub	sp, #36	; 0x24
 800bb84:	460e      	mov	r6, r1
 800bb86:	9911      	ldr	r1, [sp, #68]	; 0x44
    if( buffer == 0 )
 800bb88:	2800      	cmp	r0, #0
 800bb8a:	d05a      	beq.n	800bc42 <PayloadEncrypt+0xc4>
 800bb8c:	4690      	mov	r8, r2
 800bb8e:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800bb90:	2200      	movs	r2, #0
 800bb92:	9204      	str	r2, [sp, #16]
 800bb94:	9205      	str	r2, [sp, #20]
 800bb96:	9206      	str	r2, [sp, #24]
 800bb98:	9207      	str	r2, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800bb9a:	9200      	str	r2, [sp, #0]
 800bb9c:	9201      	str	r2, [sp, #4]
 800bb9e:	9203      	str	r2, [sp, #12]
    aBlock[0] = 0x01;
 800bba0:	2201      	movs	r2, #1
 800bba2:	f88d 2000 	strb.w	r2, [sp]
    aBlock[5] = dir;
 800bba6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800bbaa:	f88d 2005 	strb.w	r2, [sp, #5]
    aBlock[6] = address & 0xFF;
 800bbae:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800bbb2:	0a1a      	lsrs	r2, r3, #8
 800bbb4:	f88d 2007 	strb.w	r2, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800bbb8:	0c1a      	lsrs	r2, r3, #16
 800bbba:	f88d 2008 	strb.w	r2, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800bbbe:	0e1b      	lsrs	r3, r3, #24
 800bbc0:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800bbc4:	f88d 100a 	strb.w	r1, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800bbc8:	0a0b      	lsrs	r3, r1, #8
 800bbca:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800bbce:	0c0b      	lsrs	r3, r1, #16
 800bbd0:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800bbd4:	0e09      	lsrs	r1, r1, #24
 800bbd6:	f88d 100d 	strb.w	r1, [sp, #13]
    while( size > 0 )
 800bbda:	2e00      	cmp	r6, #0
 800bbdc:	dd34      	ble.n	800bc48 <PayloadEncrypt+0xca>
 800bbde:	2700      	movs	r7, #0
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800bbe0:	f04f 0910 	mov.w	r9, #16
 800bbe4:	e004      	b.n	800bbf0 <PayloadEncrypt+0x72>
        size -= 16;
 800bbe6:	3e10      	subs	r6, #16
 800bbe8:	b236      	sxth	r6, r6
    while( size > 0 )
 800bbea:	3701      	adds	r7, #1
 800bbec:	2e00      	cmp	r6, #0
 800bbee:	dd30      	ble.n	800bc52 <PayloadEncrypt+0xd4>
 800bbf0:	b2fb      	uxtb	r3, r7
 800bbf2:	011d      	lsls	r5, r3, #4
 800bbf4:	b2ed      	uxtb	r5, r5
        aBlock[15] = ctr & 0xFF;
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	f88d 300f 	strb.w	r3, [sp, #15]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800bbfc:	ab04      	add	r3, sp, #16
 800bbfe:	4642      	mov	r2, r8
 800bc00:	4649      	mov	r1, r9
 800bc02:	4668      	mov	r0, sp
 800bc04:	f7fb fc68 	bl	80074d8 <SecureElementAesEncrypt>
 800bc08:	4686      	mov	lr, r0
 800bc0a:	bb00      	cbnz	r0, 800bc4e <PayloadEncrypt+0xd0>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800bc0c:	4631      	mov	r1, r6
 800bc0e:	2e10      	cmp	r6, #16
 800bc10:	bfa8      	it	ge
 800bc12:	2110      	movge	r1, #16
 800bc14:	2900      	cmp	r1, #0
 800bc16:	dde6      	ble.n	800bbe6 <PayloadEncrypt+0x68>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	f04f 0c00 	mov.w	ip, #0
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800bc1e:	eb05 000c 	add.w	r0, r5, ip
 800bc22:	f10c 0220 	add.w	r2, ip, #32
 800bc26:	eb0d 0c02 	add.w	ip, sp, r2
 800bc2a:	5c22      	ldrb	r2, [r4, r0]
 800bc2c:	f81c cc10 	ldrb.w	ip, [ip, #-16]
 800bc30:	ea82 020c 	eor.w	r2, r2, ip
 800bc34:	5422      	strb	r2, [r4, r0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800bc36:	3301      	adds	r3, #1
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	469c      	mov	ip, r3
 800bc3c:	428b      	cmp	r3, r1
 800bc3e:	dbee      	blt.n	800bc1e <PayloadEncrypt+0xa0>
 800bc40:	e7d1      	b.n	800bbe6 <PayloadEncrypt+0x68>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bc42:	f04f 0e0a 	mov.w	lr, #10
 800bc46:	e004      	b.n	800bc52 <PayloadEncrypt+0xd4>
    return LORAMAC_CRYPTO_SUCCESS;
 800bc48:	f04f 0e00 	mov.w	lr, #0
 800bc4c:	e001      	b.n	800bc52 <PayloadEncrypt+0xd4>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bc4e:	f04f 0e0f 	mov.w	lr, #15
}
 800bc52:	4670      	mov	r0, lr
 800bc54:	b009      	add	sp, #36	; 0x24
 800bc56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bc5a <VerifyCmacB0>:
{
 800bc5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc5e:	b0c4      	sub	sp, #272	; 0x110
 800bc60:	9e4b      	ldr	r6, [sp, #300]	; 0x12c
 800bc62:	9d4c      	ldr	r5, [sp, #304]	; 0x130
    if( msg == 0 )
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d049      	beq.n	800bcfc <VerifyCmacB0+0xa2>
 800bc68:	460c      	mov	r4, r1
 800bc6a:	4617      	mov	r7, r2
 800bc6c:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800bc6e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800bc72:	d845      	bhi.n	800bd00 <VerifyCmacB0+0xa6>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800bc74:	f44f 7288 	mov.w	r2, #272	; 0x110
 800bc78:	2100      	movs	r1, #0
 800bc7a:	4668      	mov	r0, sp
 800bc7c:	f001 ff18 	bl	800dab0 <memset1>
    b0[0] = 0x49;
 800bc80:	2349      	movs	r3, #73	; 0x49
 800bc82:	f88d 3000 	strb.w	r3, [sp]
        b0[1] = 0x00;
 800bc86:	2300      	movs	r3, #0
 800bc88:	f88d 3001 	strb.w	r3, [sp, #1]
        b0[2] = 0x00;
 800bc8c:	f88d 3002 	strb.w	r3, [sp, #2]
    b0[3] = 0x00;
 800bc90:	f88d 3003 	strb.w	r3, [sp, #3]
    b0[4] = 0x00;
 800bc94:	f88d 3004 	strb.w	r3, [sp, #4]
    b0[5] = dir;
 800bc98:	f89d 2128 	ldrb.w	r2, [sp, #296]	; 0x128
 800bc9c:	f88d 2005 	strb.w	r2, [sp, #5]
    b0[6] = devAddr & 0xFF;
 800bca0:	f88d 6006 	strb.w	r6, [sp, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800bca4:	0a32      	lsrs	r2, r6, #8
 800bca6:	f88d 2007 	strb.w	r2, [sp, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800bcaa:	0c32      	lsrs	r2, r6, #16
 800bcac:	f88d 2008 	strb.w	r2, [sp, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800bcb0:	0e36      	lsrs	r6, r6, #24
 800bcb2:	f88d 6009 	strb.w	r6, [sp, #9]
    b0[10] = fCnt & 0xFF;
 800bcb6:	f88d 500a 	strb.w	r5, [sp, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800bcba:	0a2a      	lsrs	r2, r5, #8
 800bcbc:	f88d 200b 	strb.w	r2, [sp, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800bcc0:	0c2a      	lsrs	r2, r5, #16
 800bcc2:	f88d 200c 	strb.w	r2, [sp, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800bcc6:	0e2d      	lsrs	r5, r5, #24
 800bcc8:	f88d 500d 	strb.w	r5, [sp, #13]
    b0[14] = 0x00;
 800bccc:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[15] = msgLen & 0xFF;
 800bcd0:	f88d 400f 	strb.w	r4, [sp, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800bcd4:	4622      	mov	r2, r4
 800bcd6:	4641      	mov	r1, r8
 800bcd8:	a804      	add	r0, sp, #16
 800bcda:	f001 fecf 	bl	800da7c <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800bcde:	f104 0110 	add.w	r1, r4, #16
 800bce2:	463b      	mov	r3, r7
 800bce4:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 800bce6:	b289      	uxth	r1, r1
 800bce8:	4668      	mov	r0, sp
 800bcea:	f7fb fbdf 	bl	80074ac <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800bcee:	b110      	cbz	r0, 800bcf6 <VerifyCmacB0+0x9c>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bcf0:	2801      	cmp	r0, #1
 800bcf2:	bf18      	it	ne
 800bcf4:	200f      	movne	r0, #15
}
 800bcf6:	b044      	add	sp, #272	; 0x110
 800bcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bcfc:	200a      	movs	r0, #10
 800bcfe:	e7fa      	b.n	800bcf6 <VerifyCmacB0+0x9c>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800bd00:	200e      	movs	r0, #14
 800bd02:	e7f8      	b.n	800bcf6 <VerifyCmacB0+0x9c>

0800bd04 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800bd04:	b1b0      	cbz	r0, 800bd34 <LoRaMacCryptoInit+0x30>
{
 800bd06:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800bd08:	4c0b      	ldr	r4, [pc, #44]	; (800bd38 <LoRaMacCryptoInit+0x34>)
 800bd0a:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800bd0c:	2228      	movs	r2, #40	; 0x28
 800bd0e:	2100      	movs	r1, #0
 800bd10:	f001 fece 	bl	800dab0 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800bd14:	6823      	ldr	r3, [r4, #0]
 800bd16:	2201      	movs	r2, #1
 800bd18:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800bd1a:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800bd1c:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800bd1e:	2000      	movs	r0, #0
 800bd20:	7018      	strb	r0, [r3, #0]
    CryptoNvm->FCntList.FCntUp = 0;
 800bd22:	60d8      	str	r0, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800bd24:	f04f 32ff 	mov.w	r2, #4294967295
 800bd28:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800bd2a:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800bd2c:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800bd2e:	621a      	str	r2, [r3, #32]
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800bd30:	61da      	str	r2, [r3, #28]

    // Reset frame counters
    ResetFCnts( );

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bd32:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800bd34:	2009      	movs	r0, #9
}
 800bd36:	4770      	bx	lr
 800bd38:	2000203c 	.word	0x2000203c

0800bd3c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800bd3c:	4b02      	ldr	r3, [pc, #8]	; (800bd48 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800bd42:	2000      	movs	r0, #0
 800bd44:	4770      	bx	lr
 800bd46:	bf00      	nop
 800bd48:	2000203c 	.word	0x2000203c

0800bd4c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800bd4c:	b130      	cbz	r0, 800bd5c <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800bd4e:	4b04      	ldr	r3, [pc, #16]	; (800bd60 <LoRaMacCryptoGetFCntUp+0x14>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	3301      	adds	r3, #1
 800bd56:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800bd58:	2000      	movs	r0, #0
 800bd5a:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bd5c:	200a      	movs	r0, #10
}
 800bd5e:	4770      	bx	lr
 800bd60:	2000203c 	.word	0x2000203c

0800bd64 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 800bd64:	b570      	push	{r4, r5, r6, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	4614      	mov	r4, r2
    uint32_t lastDown = 0;
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	9201      	str	r2, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800bd6e:	b36b      	cbz	r3, 800bdcc <LoRaMacCryptoGetFCntDown+0x68>
 800bd70:	460d      	mov	r5, r1
 800bd72:	461e      	mov	r6, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800bd74:	a901      	add	r1, sp, #4
 800bd76:	f7ff fea3 	bl	800bac0 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800bd7a:	b9b0      	cbnz	r0, 800bdaa <LoRaMacCryptoGetFCntDown+0x46>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800bd7c:	9b01      	ldr	r3, [sp, #4]
 800bd7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd82:	d014      	beq.n	800bdae <LoRaMacCryptoGetFCntDown+0x4a>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800bd84:	b29a      	uxth	r2, r3
 800bd86:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800bd88:	2a00      	cmp	r2, #0
 800bd8a:	dd12      	ble.n	800bdb2 <LoRaMacCryptoGetFCntDown+0x4e>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800bd8c:	441a      	add	r2, r3
 800bd8e:	6032      	str	r2, [r6, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800bd90:	4a0f      	ldr	r2, [pc, #60]	; (800bdd0 <LoRaMacCryptoGetFCntDown+0x6c>)
 800bd92:	6812      	ldr	r2, [r2, #0]
 800bd94:	7891      	ldrb	r1, [r2, #2]
 800bd96:	b941      	cbnz	r1, 800bdaa <LoRaMacCryptoGetFCntDown+0x46>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800bd98:	6832      	ldr	r2, [r6, #0]
 800bd9a:	1ad3      	subs	r3, r2, r3
 800bd9c:	eb62 0202 	sbc.w	r2, r2, r2
 800bda0:	42ab      	cmp	r3, r5
 800bda2:	f172 0300 	sbcs.w	r3, r2, #0
 800bda6:	da0f      	bge.n	800bdc8 <LoRaMacCryptoGetFCntDown+0x64>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800bda8:	4608      	mov	r0, r1
}
 800bdaa:	b002      	add	sp, #8
 800bdac:	bd70      	pop	{r4, r5, r6, pc}
        *currentDown = frameFcnt;
 800bdae:	6034      	str	r4, [r6, #0]
 800bdb0:	e7ee      	b.n	800bd90 <LoRaMacCryptoGetFCntDown+0x2c>
        else if( fCntDiff == 0 )
 800bdb2:	b132      	cbz	r2, 800bdc2 <LoRaMacCryptoGetFCntDown+0x5e>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800bdb4:	0c1a      	lsrs	r2, r3, #16
 800bdb6:	0412      	lsls	r2, r2, #16
 800bdb8:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800bdbc:	4414      	add	r4, r2
 800bdbe:	6034      	str	r4, [r6, #0]
 800bdc0:	e7e6      	b.n	800bd90 <LoRaMacCryptoGetFCntDown+0x2c>
            *currentDown = lastDown;
 800bdc2:	6033      	str	r3, [r6, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800bdc4:	2007      	movs	r0, #7
 800bdc6:	e7f0      	b.n	800bdaa <LoRaMacCryptoGetFCntDown+0x46>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800bdc8:	2008      	movs	r0, #8
 800bdca:	e7ee      	b.n	800bdaa <LoRaMacCryptoGetFCntDown+0x46>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bdcc:	200a      	movs	r0, #10
 800bdce:	e7ec      	b.n	800bdaa <LoRaMacCryptoGetFCntDown+0x46>
 800bdd0:	2000203c 	.word	0x2000203c

0800bdd4 <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800bdd4:	b908      	cbnz	r0, 800bdda <LoRaMacCryptoSetMulticastReference+0x6>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bdd6:	200a      	movs	r0, #10
 800bdd8:	4770      	bx	lr
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800bdda:	4a03      	ldr	r2, [pc, #12]	; (800bde8 <LoRaMacCryptoSetMulticastReference+0x14>)
 800bddc:	6812      	ldr	r2, [r2, #0]
 800bdde:	321c      	adds	r2, #28
 800bde0:	6202      	str	r2, [r0, #32]
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800bde2:	2000      	movs	r0, #0
}
 800bde4:	4770      	bx	lr
 800bde6:	bf00      	nop
 800bde8:	2000203c 	.word	0x2000203c

0800bdec <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800bdec:	b310      	cbz	r0, 800be34 <LoRaMacCryptoPrepareJoinRequest+0x48>
{
 800bdee:	b510      	push	{r4, lr}
 800bdf0:	b084      	sub	sp, #16
 800bdf2:	4604      	mov	r4, r0
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800bdf8:	a803      	add	r0, sp, #12
 800bdfa:	f7fb fc53 	bl	80076a4 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800bdfe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800be02:	4a0f      	ldr	r2, [pc, #60]	; (800be40 <LoRaMacCryptoPrepareJoinRequest+0x54>)
 800be04:	6812      	ldr	r2, [r2, #0]
 800be06:	8093      	strh	r3, [r2, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800be08:	82e3      	strh	r3, [r4, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800be0a:	4620      	mov	r0, r4
 800be0c:	f000 fa8a 	bl	800c324 <LoRaMacSerializerJoinRequest>
 800be10:	b990      	cbnz	r0, 800be38 <LoRaMacCryptoPrepareJoinRequest+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800be12:	4623      	mov	r3, r4
 800be14:	f853 1b18 	ldr.w	r1, [r3], #24
 800be18:	9300      	str	r3, [sp, #0]
 800be1a:	2301      	movs	r3, #1
 800be1c:	2213      	movs	r2, #19
 800be1e:	f7fb fb36 	bl	800748e <SecureElementComputeAesCmac>
 800be22:	b958      	cbnz	r0, 800be3c <LoRaMacCryptoPrepareJoinRequest+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800be24:	4620      	mov	r0, r4
 800be26:	f000 fa7d 	bl	800c324 <LoRaMacSerializerJoinRequest>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800be2a:	2800      	cmp	r0, #0
 800be2c:	bf18      	it	ne
 800be2e:	2011      	movne	r0, #17
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800be30:	b004      	add	sp, #16
 800be32:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800be34:	200a      	movs	r0, #10
}
 800be36:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800be38:	2011      	movs	r0, #17
 800be3a:	e7f9      	b.n	800be30 <LoRaMacCryptoPrepareJoinRequest+0x44>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800be3c:	200f      	movs	r0, #15
 800be3e:	e7f7      	b.n	800be30 <LoRaMacCryptoPrepareJoinRequest+0x44>
 800be40:	2000203c 	.word	0x2000203c

0800be44 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800be44:	2b00      	cmp	r3, #0
 800be46:	d068      	beq.n	800bf1a <LoRaMacCryptoSecureMessage+0xd6>
{
 800be48:	b530      	push	{r4, r5, lr}
 800be4a:	b087      	sub	sp, #28
 800be4c:	4604      	mov	r4, r0
 800be4e:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800be50:	4b39      	ldr	r3, [pc, #228]	; (800bf38 <LoRaMacCryptoSecureMessage+0xf4>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	68db      	ldr	r3, [r3, #12]
 800be56:	4283      	cmp	r3, r0
 800be58:	d861      	bhi.n	800bf1e <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800be5a:	f895 2020 	ldrb.w	r2, [r5, #32]
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800be5e:	2a00      	cmp	r2, #0
 800be60:	bf14      	ite	ne
 800be62:	2203      	movne	r2, #3
 800be64:	2202      	moveq	r2, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800be66:	4283      	cmp	r3, r0
 800be68:	d20a      	bcs.n	800be80 <LoRaMacCryptoSecureMessage+0x3c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800be6a:	9001      	str	r0, [sp, #4]
 800be6c:	2300      	movs	r3, #0
 800be6e:	9300      	str	r3, [sp, #0]
 800be70:	68ab      	ldr	r3, [r5, #8]
 800be72:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800be76:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800be78:	f7ff fe81 	bl	800bb7e <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800be7c:	2800      	cmp	r0, #0
 800be7e:	d151      	bne.n	800bf24 <LoRaMacCryptoSecureMessage+0xe0>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800be80:	4628      	mov	r0, r5
 800be82:	f000 fa85 	bl	800c390 <LoRaMacSerializerData>
 800be86:	2800      	cmp	r0, #0
 800be88:	d14b      	bne.n	800bf22 <LoRaMacCryptoSecureMessage+0xde>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800be8a:	6829      	ldr	r1, [r5, #0]
 800be8c:	f895 c004 	ldrb.w	ip, [r5, #4]
 800be90:	f1ac 0204 	sub.w	r2, ip, #4
 800be94:	b292      	uxth	r2, r2
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800be96:	2900      	cmp	r1, #0
 800be98:	d048      	beq.n	800bf2c <LoRaMacCryptoSecureMessage+0xe8>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800be9a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800be9e:	d847      	bhi.n	800bf30 <LoRaMacCryptoSecureMessage+0xec>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800bea0:	68a8      	ldr	r0, [r5, #8]
    b0[0] = 0x49;
 800bea2:	2349      	movs	r3, #73	; 0x49
 800bea4:	f88d 3008 	strb.w	r3, [sp, #8]
        b0[1] = 0x00;
 800bea8:	2300      	movs	r3, #0
 800beaa:	f88d 3009 	strb.w	r3, [sp, #9]
        b0[2] = 0x00;
 800beae:	f88d 300a 	strb.w	r3, [sp, #10]
    b0[3] = 0x00;
 800beb2:	f88d 300b 	strb.w	r3, [sp, #11]
    b0[4] = 0x00;
 800beb6:	f88d 300c 	strb.w	r3, [sp, #12]
    b0[5] = dir;
 800beba:	f88d 300d 	strb.w	r3, [sp, #13]
    b0[6] = devAddr & 0xFF;
 800bebe:	f88d 000e 	strb.w	r0, [sp, #14]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800bec2:	ea4f 2e10 	mov.w	lr, r0, lsr #8
 800bec6:	f88d e00f 	strb.w	lr, [sp, #15]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800beca:	ea4f 4e10 	mov.w	lr, r0, lsr #16
 800bece:	f88d e010 	strb.w	lr, [sp, #16]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800bed2:	0e00      	lsrs	r0, r0, #24
 800bed4:	f88d 0011 	strb.w	r0, [sp, #17]
    b0[10] = fCnt & 0xFF;
 800bed8:	f88d 4012 	strb.w	r4, [sp, #18]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800bedc:	0a20      	lsrs	r0, r4, #8
 800bede:	f88d 0013 	strb.w	r0, [sp, #19]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800bee2:	0c20      	lsrs	r0, r4, #16
 800bee4:	f88d 0014 	strb.w	r0, [sp, #20]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800bee8:	0e20      	lsrs	r0, r4, #24
 800beea:	f88d 0015 	strb.w	r0, [sp, #21]
    b0[14] = 0x00;
 800beee:	f88d 3016 	strb.w	r3, [sp, #22]
    b0[15] = msgLen & 0xFF;
 800bef2:	f1ac 0c04 	sub.w	ip, ip, #4
 800bef6:	f88d c017 	strb.w	ip, [sp, #23]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800befa:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800befe:	9300      	str	r3, [sp, #0]
 800bf00:	2302      	movs	r3, #2
 800bf02:	a802      	add	r0, sp, #8
 800bf04:	f7fb fac3 	bl	800748e <SecureElementComputeAesCmac>
 800bf08:	b9a0      	cbnz	r0, 800bf34 <LoRaMacCryptoSecureMessage+0xf0>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bf0a:	4628      	mov	r0, r5
 800bf0c:	f000 fa40 	bl	800c390 <LoRaMacSerializerData>
 800bf10:	b950      	cbnz	r0, 800bf28 <LoRaMacCryptoSecureMessage+0xe4>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800bf12:	4b09      	ldr	r3, [pc, #36]	; (800bf38 <LoRaMacCryptoSecureMessage+0xf4>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800bf18:	e004      	b.n	800bf24 <LoRaMacCryptoSecureMessage+0xe0>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bf1a:	200a      	movs	r0, #10
}
 800bf1c:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800bf1e:	2006      	movs	r0, #6
 800bf20:	e000      	b.n	800bf24 <LoRaMacCryptoSecureMessage+0xe0>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bf22:	2011      	movs	r0, #17
}
 800bf24:	b007      	add	sp, #28
 800bf26:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bf28:	2011      	movs	r0, #17
 800bf2a:	e7fb      	b.n	800bf24 <LoRaMacCryptoSecureMessage+0xe0>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bf2c:	200a      	movs	r0, #10
 800bf2e:	e7f9      	b.n	800bf24 <LoRaMacCryptoSecureMessage+0xe0>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800bf30:	200e      	movs	r0, #14
 800bf32:	e7f7      	b.n	800bf24 <LoRaMacCryptoSecureMessage+0xe0>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bf34:	200f      	movs	r0, #15
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bf36:	e7f5      	b.n	800bf24 <LoRaMacCryptoSecureMessage+0xe0>
 800bf38:	2000203c 	.word	0x2000203c

0800bf3c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800bf3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf40:	b086      	sub	sp, #24
 800bf42:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if( macMsg == 0 )
 800bf44:	2c00      	cmp	r4, #0
 800bf46:	d070      	beq.n	800c02a <LoRaMacCryptoUnsecureMessage+0xee>
 800bf48:	4607      	mov	r7, r0
 800bf4a:	4688      	mov	r8, r1
 800bf4c:	4616      	mov	r6, r2
 800bf4e:	461d      	mov	r5, r3
    uint32_t lastDown = 0;
 800bf50:	2300      	movs	r3, #0
 800bf52:	9305      	str	r3, [sp, #20]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800bf54:	a905      	add	r1, sp, #20
 800bf56:	4610      	mov	r0, r2
 800bf58:	f7ff fdb2 	bl	800bac0 <GetLastFcntDown>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d16c      	bne.n	800c03a <LoRaMacCryptoUnsecureMessage+0xfe>
    if( ( currentDown > lastDown ) ||
 800bf60:	9b05      	ldr	r3, [sp, #20]
 800bf62:	429d      	cmp	r5, r3
 800bf64:	d802      	bhi.n	800bf6c <LoRaMacCryptoUnsecureMessage+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800bf66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf6a:	d160      	bne.n	800c02e <LoRaMacCryptoUnsecureMessage+0xf2>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	f000 f97b 	bl	800c268 <LoRaMacParserData>
 800bf72:	2800      	cmp	r0, #0
 800bf74:	d15d      	bne.n	800c032 <LoRaMacCryptoUnsecureMessage+0xf6>
        if( KeyAddrList[i].AddrID == addrID )
 800bf76:	4b32      	ldr	r3, [pc, #200]	; (800c040 <LoRaMacCryptoUnsecureMessage+0x104>)
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	42bb      	cmp	r3, r7
 800bf7c:	d009      	beq.n	800bf92 <LoRaMacCryptoUnsecureMessage+0x56>
 800bf7e:	4b30      	ldr	r3, [pc, #192]	; (800c040 <LoRaMacCryptoUnsecureMessage+0x104>)
 800bf80:	791b      	ldrb	r3, [r3, #4]
 800bf82:	42bb      	cmp	r3, r7
 800bf84:	bf08      	it	eq
 800bf86:	2001      	moveq	r0, #1
 800bf88:	d004      	beq.n	800bf94 <LoRaMacCryptoUnsecureMessage+0x58>
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800bf8a:	200c      	movs	r0, #12
#endif

    UpdateFCntDown( fCntID, fCntDown );

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bf8c:	b006      	add	sp, #24
 800bf8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( KeyAddrList[i].AddrID == addrID )
 800bf92:	2000      	movs	r0, #0
    if( address != macMsg->FHDR.DevAddr )
 800bf94:	68a3      	ldr	r3, [r4, #8]
 800bf96:	4543      	cmp	r3, r8
 800bf98:	d14d      	bne.n	800c036 <LoRaMacCryptoUnsecureMessage+0xfa>
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800bf9a:	7b23      	ldrb	r3, [r4, #12]
 800bf9c:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800bfa0:	4928      	ldr	r1, [pc, #160]	; (800c044 <LoRaMacCryptoUnsecureMessage+0x108>)
 800bfa2:	6809      	ldr	r1, [r1, #0]
 800bfa4:	7889      	ldrb	r1, [r1, #2]
        isAck = false;
 800bfa6:	2900      	cmp	r1, #0
    payloadDecryptionKeyID = curItem->AppSkey;
 800bfa8:	4a25      	ldr	r2, [pc, #148]	; (800c040 <LoRaMacCryptoUnsecureMessage+0x104>)
 800bfaa:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800bfae:	7857      	ldrb	r7, [r2, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800bfb0:	7921      	ldrb	r1, [r4, #4]
 800bfb2:	f1a1 0104 	sub.w	r1, r1, #4
 800bfb6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800bfb8:	9003      	str	r0, [sp, #12]
 800bfba:	9502      	str	r5, [sp, #8]
 800bfbc:	f8cd 8004 	str.w	r8, [sp, #4]
 800bfc0:	f04f 0001 	mov.w	r0, #1
 800bfc4:	9000      	str	r0, [sp, #0]
 800bfc6:	bf08      	it	eq
 800bfc8:	2300      	moveq	r3, #0
 800bfca:	7892      	ldrb	r2, [r2, #2]
 800bfcc:	b289      	uxth	r1, r1
 800bfce:	6820      	ldr	r0, [r4, #0]
 800bfd0:	f7ff fe43 	bl	800bc5a <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d1d9      	bne.n	800bf8c <LoRaMacCryptoUnsecureMessage+0x50>
    if( macMsg->FPort == 0 )
 800bfd8:	f894 3020 	ldrb.w	r3, [r4, #32]
        payloadDecryptionKeyID = NWK_S_KEY;
 800bfdc:	2b00      	cmp	r3, #0
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800bfde:	9501      	str	r5, [sp, #4]
 800bfe0:	f04f 0301 	mov.w	r3, #1
 800bfe4:	9300      	str	r3, [sp, #0]
 800bfe6:	4643      	mov	r3, r8
 800bfe8:	bf14      	ite	ne
 800bfea:	463a      	movne	r2, r7
 800bfec:	2202      	moveq	r2, #2
 800bfee:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800bff2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bff4:	f7ff fdc3 	bl	800bb7e <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bff8:	2800      	cmp	r0, #0
 800bffa:	d1c7      	bne.n	800bf8c <LoRaMacCryptoUnsecureMessage+0x50>
    switch( fCntID )
 800bffc:	1e72      	subs	r2, r6, #1
 800bffe:	2a03      	cmp	r2, #3
 800c000:	d8c4      	bhi.n	800bf8c <LoRaMacCryptoUnsecureMessage+0x50>
 800c002:	e8df f002 	tbb	[pc, r2]
 800c006:	0602      	.short	0x0602
 800c008:	0e0a      	.short	0x0e0a
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800c00a:	4b0e      	ldr	r3, [pc, #56]	; (800c044 <LoRaMacCryptoUnsecureMessage+0x108>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	611d      	str	r5, [r3, #16]
            break;
 800c010:	e7bc      	b.n	800bf8c <LoRaMacCryptoUnsecureMessage+0x50>
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800c012:	4b0c      	ldr	r3, [pc, #48]	; (800c044 <LoRaMacCryptoUnsecureMessage+0x108>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	615d      	str	r5, [r3, #20]
            break;
 800c018:	e7b8      	b.n	800bf8c <LoRaMacCryptoUnsecureMessage+0x50>
            CryptoNvm->FCntList.FCntDown = currentDown;
 800c01a:	4b0a      	ldr	r3, [pc, #40]	; (800c044 <LoRaMacCryptoUnsecureMessage+0x108>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	619d      	str	r5, [r3, #24]
            break;
 800c020:	e7b4      	b.n	800bf8c <LoRaMacCryptoUnsecureMessage+0x50>
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800c022:	4b08      	ldr	r3, [pc, #32]	; (800c044 <LoRaMacCryptoUnsecureMessage+0x108>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	61dd      	str	r5, [r3, #28]
            break;
 800c028:	e7b0      	b.n	800bf8c <LoRaMacCryptoUnsecureMessage+0x50>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c02a:	200a      	movs	r0, #10
 800c02c:	e7ae      	b.n	800bf8c <LoRaMacCryptoUnsecureMessage+0x50>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800c02e:	2006      	movs	r0, #6
 800c030:	e7ac      	b.n	800bf8c <LoRaMacCryptoUnsecureMessage+0x50>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800c032:	2010      	movs	r0, #16
 800c034:	e7aa      	b.n	800bf8c <LoRaMacCryptoUnsecureMessage+0x50>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800c036:	2002      	movs	r0, #2
 800c038:	e7a8      	b.n	800bf8c <LoRaMacCryptoUnsecureMessage+0x50>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800c03a:	2006      	movs	r0, #6
 800c03c:	e7a6      	b.n	800bf8c <LoRaMacCryptoUnsecureMessage+0x50>
 800c03e:	bf00      	nop
 800c040:	20000110 	.word	0x20000110
 800c044:	2000203c 	.word	0x2000203c

0800c048 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 800c048:	b9b1      	cbnz	r1, 800c078 <LoRaMacCryptoDeriveMcRootKey+0x30>
{
 800c04a:	b500      	push	{lr}
 800c04c:	b085      	sub	sp, #20
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800c04e:	2300      	movs	r3, #0
 800c050:	9300      	str	r3, [sp, #0]
 800c052:	9301      	str	r3, [sp, #4]
 800c054:	9302      	str	r3, [sp, #8]
 800c056:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 800c058:	2801      	cmp	r0, #1
    {
        compBase[0] = 0x20;
 800c05a:	bf04      	itt	eq
 800c05c:	2320      	moveq	r3, #32
 800c05e:	f88d 3000 	strbeq.w	r3, [sp]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800c062:	2204      	movs	r2, #4
 800c064:	2100      	movs	r1, #0
 800c066:	4668      	mov	r0, sp
 800c068:	f7fb fab6 	bl	80075d8 <SecureElementDeriveAndStoreKey>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c06c:	2800      	cmp	r0, #0
 800c06e:	bf18      	it	ne
 800c070:	200f      	movne	r0, #15
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c072:	b005      	add	sp, #20
 800c074:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800c078:	200b      	movs	r0, #11
}
 800c07a:	4770      	bx	lr

0800c07c <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800c07c:	2804      	cmp	r0, #4
 800c07e:	d001      	beq.n	800c084 <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800c080:	200b      	movs	r0, #11
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c082:	4770      	bx	lr
{
 800c084:	b500      	push	{lr}
 800c086:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 800c088:	2300      	movs	r3, #0
 800c08a:	9300      	str	r3, [sp, #0]
 800c08c:	9301      	str	r3, [sp, #4]
 800c08e:	9302      	str	r3, [sp, #8]
 800c090:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800c092:	227f      	movs	r2, #127	; 0x7f
 800c094:	2104      	movs	r1, #4
 800c096:	4668      	mov	r0, sp
 800c098:	f7fb fa9e 	bl	80075d8 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c09c:	2800      	cmp	r0, #0
 800c09e:	bf18      	it	ne
 800c0a0:	200f      	movne	r0, #15
}
 800c0a2:	b005      	add	sp, #20
 800c0a4:	f85d fb04 	ldr.w	pc, [sp], #4

0800c0a8 <LoRaMacCryptoSetKey>:
{
 800c0a8:	b510      	push	{r4, lr}
 800c0aa:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800c0ac:	f7fb fa5a 	bl	8007564 <SecureElementSetKey>
 800c0b0:	b978      	cbnz	r0, 800c0d2 <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 800c0b2:	b104      	cbz	r4, 800c0b6 <LoRaMacCryptoSetKey+0xe>
}
 800c0b4:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800c0b6:	4b09      	ldr	r3, [pc, #36]	; (800c0dc <LoRaMacCryptoSetKey+0x34>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	2100      	movs	r1, #0
 800c0bc:	7898      	ldrb	r0, [r3, #2]
 800c0be:	f7ff ffc3 	bl	800c048 <LoRaMacCryptoDeriveMcRootKey>
 800c0c2:	b940      	cbnz	r0, 800c0d6 <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800c0c4:	2004      	movs	r0, #4
 800c0c6:	f7ff ffd9 	bl	800c07c <LoRaMacCryptoDeriveMcKEKey>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c0ca:	2800      	cmp	r0, #0
 800c0cc:	bf18      	it	ne
 800c0ce:	200f      	movne	r0, #15
 800c0d0:	e7f0      	b.n	800c0b4 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c0d2:	200f      	movs	r0, #15
 800c0d4:	e7ee      	b.n	800c0b4 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c0d6:	200f      	movs	r0, #15
 800c0d8:	e7ec      	b.n	800c0b4 <LoRaMacCryptoSetKey+0xc>
 800c0da:	bf00      	nop
 800c0dc:	2000203c 	.word	0x2000203c

0800c0e0 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800c0e0:	2a00      	cmp	r2, #0
 800c0e2:	d064      	beq.n	800c1ae <LoRaMacCryptoHandleJoinAccept+0xce>
{
 800c0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0e6:	b08f      	sub	sp, #60	; 0x3c
 800c0e8:	4607      	mov	r7, r0
 800c0ea:	460d      	mov	r5, r1
 800c0ec:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800c0ee:	2900      	cmp	r1, #0
 800c0f0:	d05f      	beq.n	800c1b2 <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800c0f2:	2600      	movs	r6, #0
 800c0f4:	9605      	str	r6, [sp, #20]
 800c0f6:	221d      	movs	r2, #29
 800c0f8:	4631      	mov	r1, r6
 800c0fa:	a806      	add	r0, sp, #24
 800c0fc:	f004 fd02 	bl	8010b04 <memset>
    uint8_t versionMinor         = 0;
 800c100:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800c104:	4b2f      	ldr	r3, [pc, #188]	; (800c1c4 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800c10a:	f10d 0313 	add.w	r3, sp, #19
 800c10e:	9302      	str	r3, [sp, #8]
 800c110:	ab05      	add	r3, sp, #20
 800c112:	9301      	str	r3, [sp, #4]
 800c114:	7923      	ldrb	r3, [r4, #4]
 800c116:	9300      	str	r3, [sp, #0]
 800c118:	6823      	ldr	r3, [r4, #0]
 800c11a:	4632      	mov	r2, r6
 800c11c:	4629      	mov	r1, r5
 800c11e:	4638      	mov	r0, r7
 800c120:	f7fb fa7a 	bl	8007618 <SecureElementProcessJoinAccept>
 800c124:	2800      	cmp	r0, #0
 800c126:	d146      	bne.n	800c1b6 <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800c128:	7922      	ldrb	r2, [r4, #4]
 800c12a:	a905      	add	r1, sp, #20
 800c12c:	6820      	ldr	r0, [r4, #0]
 800c12e:	f001 fca5 	bl	800da7c <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800c132:	4620      	mov	r0, r4
 800c134:	f000 f848 	bl	800c1c8 <LoRaMacParserJoinAccept>
 800c138:	2800      	cmp	r0, #0
 800c13a:	d13f      	bne.n	800c1bc <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800c13c:	79a3      	ldrb	r3, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800c13e:	79e2      	ldrb	r2, [r4, #7]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800c140:	7a25      	ldrb	r5, [r4, #8]
 800c142:	042d      	lsls	r5, r5, #16
 800c144:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 800c148:	431d      	orrs	r5, r3
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800c14a:	4b1e      	ldr	r3, [pc, #120]	; (800c1c4 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	689a      	ldr	r2, [r3, #8]
 800c150:	42aa      	cmp	r2, r5
 800c152:	d035      	beq.n	800c1c0 <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800c154:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800c156:	2100      	movs	r1, #0
 800c158:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800c15c:	f7ff ff74 	bl	800c048 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c160:	bb50      	cbnz	r0, 800c1b8 <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 800c162:	2004      	movs	r0, #4
 800c164:	f7ff ff8a 	bl	800c07c <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c168:	bb30      	cbnz	r0, 800c1b8 <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 800c16a:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800c16c:	7aa2      	ldrb	r2, [r4, #10]
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800c16e:	7ae4      	ldrb	r4, [r4, #11]
 800c170:	0424      	lsls	r4, r4, #16
 800c172:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800c176:	431c      	orrs	r4, r3
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800c178:	4633      	mov	r3, r6
 800c17a:	4622      	mov	r2, r4
 800c17c:	4629      	mov	r1, r5
 800c17e:	2003      	movs	r0, #3
 800c180:	f7ff fccc 	bl	800bb1c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c184:	b9c0      	cbnz	r0, 800c1b8 <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800c186:	4633      	mov	r3, r6
 800c188:	4622      	mov	r2, r4
 800c18a:	4629      	mov	r1, r5
 800c18c:	2002      	movs	r0, #2
 800c18e:	f7ff fcc5 	bl	800bb1c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c192:	b988      	cbnz	r0, 800c1b8 <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800c194:	4b0b      	ldr	r3, [pc, #44]	; (800c1c4 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800c19c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800c19e:	2200      	movs	r2, #0
 800c1a0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800c1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c1a6:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c1a8:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c1aa:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800c1ac:	e004      	b.n	800c1b8 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c1ae:	200a      	movs	r0, #10
}
 800c1b0:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c1b2:	200a      	movs	r0, #10
 800c1b4:	e000      	b.n	800c1b8 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c1b6:	200f      	movs	r0, #15
}
 800c1b8:	b00f      	add	sp, #60	; 0x3c
 800c1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800c1bc:	2010      	movs	r0, #16
 800c1be:	e7fb      	b.n	800c1b8 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800c1c0:	2003      	movs	r0, #3
 800c1c2:	e7f9      	b.n	800c1b8 <LoRaMacCryptoHandleJoinAccept+0xd8>
 800c1c4:	2000203c 	.word	0x2000203c

0800c1c8 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	d047      	beq.n	800c25c <LoRaMacParserJoinAccept+0x94>
{
 800c1cc:	b510      	push	{r4, lr}
 800c1ce:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c1d0:	6801      	ldr	r1, [r0, #0]
 800c1d2:	2900      	cmp	r1, #0
 800c1d4:	d044      	beq.n	800c260 <LoRaMacParserJoinAccept+0x98>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c1d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1da:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800c1dc:	2203      	movs	r2, #3
 800c1de:	3006      	adds	r0, #6
 800c1e0:	f001 fc4c 	bl	800da7c <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	f850 1b09 	ldr.w	r1, [r0], #9
 800c1ea:	2203      	movs	r2, #3
 800c1ec:	3104      	adds	r1, #4
 800c1ee:	f001 fc45 	bl	800da7c <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c1f2:	6821      	ldr	r1, [r4, #0]
 800c1f4:	79cb      	ldrb	r3, [r1, #7]
 800c1f6:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c1f8:	7a0a      	ldrb	r2, [r1, #8]
 800c1fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c1fe:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c200:	7a4a      	ldrb	r2, [r1, #9]
 800c202:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c206:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c208:	7a8a      	ldrb	r2, [r1, #10]
 800c20a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c20e:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800c210:	7acb      	ldrb	r3, [r1, #11]
 800c212:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800c214:	7b0b      	ldrb	r3, [r1, #12]
 800c216:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800c218:	7923      	ldrb	r3, [r4, #4]
 800c21a:	2b21      	cmp	r3, #33	; 0x21
 800c21c:	d016      	beq.n	800c24c <LoRaMacParserJoinAccept+0x84>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800c21e:	2b11      	cmp	r3, #17
 800c220:	dc20      	bgt.n	800c264 <LoRaMacParserJoinAccept+0x9c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800c222:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c224:	6821      	ldr	r1, [r4, #0]
 800c226:	5c8b      	ldrb	r3, [r1, r2]
 800c228:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c22a:	1c50      	adds	r0, r2, #1
 800c22c:	5c08      	ldrb	r0, [r1, r0]
 800c22e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800c232:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c234:	1c90      	adds	r0, r2, #2
 800c236:	5c08      	ldrb	r0, [r1, r0]
 800c238:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c23c:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c23e:	3203      	adds	r2, #3
 800c240:	5c8a      	ldrb	r2, [r1, r2]
 800c242:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c246:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800c248:	2000      	movs	r0, #0
}
 800c24a:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800c24c:	2210      	movs	r2, #16
 800c24e:	310d      	adds	r1, #13
 800c250:	f104 0012 	add.w	r0, r4, #18
 800c254:	f001 fc12 	bl	800da7c <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800c258:	221d      	movs	r2, #29
 800c25a:	e7e3      	b.n	800c224 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800c25c:	2002      	movs	r0, #2
}
 800c25e:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800c260:	2002      	movs	r0, #2
 800c262:	e7f2      	b.n	800c24a <LoRaMacParserJoinAccept+0x82>
        return LORAMAC_PARSER_FAIL;
 800c264:	2001      	movs	r0, #1
 800c266:	e7f0      	b.n	800c24a <LoRaMacParserJoinAccept+0x82>

0800c268 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c268:	2800      	cmp	r0, #0
 800c26a:	d057      	beq.n	800c31c <LoRaMacParserData+0xb4>
{
 800c26c:	b510      	push	{r4, lr}
 800c26e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c270:	6801      	ldr	r1, [r0, #0]
 800c272:	2900      	cmp	r1, #0
 800c274:	d054      	beq.n	800c320 <LoRaMacParserData+0xb8>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c276:	780b      	ldrb	r3, [r1, #0]
 800c278:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800c27a:	784b      	ldrb	r3, [r1, #1]
 800c27c:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c27e:	788a      	ldrb	r2, [r1, #2]
 800c280:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c284:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c286:	78ca      	ldrb	r2, [r1, #3]
 800c288:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c28c:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c28e:	790a      	ldrb	r2, [r1, #4]
 800c290:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c294:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800c296:	794b      	ldrb	r3, [r1, #5]
 800c298:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800c29a:	798b      	ldrb	r3, [r1, #6]
 800c29c:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800c29e:	79ca      	ldrb	r2, [r1, #7]
 800c2a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c2a4:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c2a6:	7b02      	ldrb	r2, [r0, #12]
 800c2a8:	f002 020f 	and.w	r2, r2, #15
 800c2ac:	3108      	adds	r1, #8
 800c2ae:	3010      	adds	r0, #16
 800c2b0:	f001 fbe4 	bl	800da7c <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c2b4:	7b23      	ldrb	r3, [r4, #12]
 800c2b6:	f003 030f 	and.w	r3, r3, #15
 800c2ba:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800c2c4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800c2c8:	7922      	ldrb	r2, [r4, #4]
 800c2ca:	1a11      	subs	r1, r2, r0
 800c2cc:	2904      	cmp	r1, #4
 800c2ce:	dc16      	bgt.n	800c2fe <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800c2d0:	6822      	ldr	r2, [r4, #0]
 800c2d2:	7923      	ldrb	r3, [r4, #4]
 800c2d4:	441a      	add	r2, r3
 800c2d6:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800c2da:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800c2dc:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800c2e0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c2e4:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800c2e6:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800c2ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c2ee:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800c2f0:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800c2f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c2f8:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800c2fa:	2000      	movs	r0, #0
}
 800c2fc:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800c2fe:	6821      	ldr	r1, [r4, #0]
 800c300:	3309      	adds	r3, #9
 800c302:	5c08      	ldrb	r0, [r1, r0]
 800c304:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800c308:	3a04      	subs	r2, #4
 800c30a:	1ad2      	subs	r2, r2, r3
 800c30c:	b2d2      	uxtb	r2, r2
 800c30e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800c312:	4419      	add	r1, r3
 800c314:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c316:	f001 fbb1 	bl	800da7c <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800c31a:	e7d9      	b.n	800c2d0 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800c31c:	2002      	movs	r0, #2
}
 800c31e:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800c320:	2002      	movs	r0, #2
 800c322:	e7eb      	b.n	800c2fc <LoRaMacParserData+0x94>

0800c324 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c324:	b370      	cbz	r0, 800c384 <LoRaMacSerializerJoinRequest+0x60>
{
 800c326:	b510      	push	{r4, lr}
 800c328:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c32a:	6803      	ldr	r3, [r0, #0]
 800c32c:	b363      	cbz	r3, 800c388 <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800c32e:	7902      	ldrb	r2, [r0, #4]
 800c330:	2a16      	cmp	r2, #22
 800c332:	d92b      	bls.n	800c38c <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c334:	7942      	ldrb	r2, [r0, #5]
 800c336:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c338:	4601      	mov	r1, r0
 800c33a:	f851 0b06 	ldr.w	r0, [r1], #6
 800c33e:	2208      	movs	r2, #8
 800c340:	3001      	adds	r0, #1
 800c342:	f001 fba8 	bl	800da96 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800c346:	4621      	mov	r1, r4
 800c348:	f851 0b0e 	ldr.w	r0, [r1], #14
 800c34c:	2208      	movs	r2, #8
 800c34e:	3009      	adds	r0, #9
 800c350:	f001 fba1 	bl	800da96 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800c354:	6823      	ldr	r3, [r4, #0]
 800c356:	8ae2      	ldrh	r2, [r4, #22]
 800c358:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800c35a:	6822      	ldr	r2, [r4, #0]
 800c35c:	8ae3      	ldrh	r3, [r4, #22]
 800c35e:	0a1b      	lsrs	r3, r3, #8
 800c360:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c362:	6823      	ldr	r3, [r4, #0]
 800c364:	69a2      	ldr	r2, [r4, #24]
 800c366:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c368:	6822      	ldr	r2, [r4, #0]
 800c36a:	69a3      	ldr	r3, [r4, #24]
 800c36c:	0a1b      	lsrs	r3, r3, #8
 800c36e:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c370:	6823      	ldr	r3, [r4, #0]
 800c372:	8b62      	ldrh	r2, [r4, #26]
 800c374:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c376:	6823      	ldr	r3, [r4, #0]
 800c378:	7ee2      	ldrb	r2, [r4, #27]
 800c37a:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800c37c:	2317      	movs	r3, #23
 800c37e:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800c380:	2000      	movs	r0, #0
}
 800c382:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c384:	2001      	movs	r0, #1
}
 800c386:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c388:	2001      	movs	r0, #1
 800c38a:	e7fa      	b.n	800c382 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c38c:	2002      	movs	r0, #2
 800c38e:	e7f8      	b.n	800c382 <LoRaMacSerializerJoinRequest+0x5e>

0800c390 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c390:	2800      	cmp	r0, #0
 800c392:	d065      	beq.n	800c460 <LoRaMacSerializerData+0xd0>
{
 800c394:	b538      	push	{r3, r4, r5, lr}
 800c396:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c398:	6801      	ldr	r1, [r0, #0]
 800c39a:	2900      	cmp	r1, #0
 800c39c:	d062      	beq.n	800c464 <LoRaMacSerializerData+0xd4>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c39e:	7b03      	ldrb	r3, [r0, #12]
 800c3a0:	f003 030f 	and.w	r3, r3, #15

    if( macMsg->FRMPayloadSize > 0 )
 800c3a4:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 800c3a8:	2a00      	cmp	r2, #0
 800c3aa:	d157      	bne.n	800c45c <LoRaMacSerializerData+0xcc>
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c3ac:	3308      	adds	r3, #8
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800c3ae:	3204      	adds	r2, #4

    if( macMsg->BufSize < computedBufSize )
 800c3b0:	7920      	ldrb	r0, [r4, #4]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	4298      	cmp	r0, r3
 800c3b6:	d357      	bcc.n	800c468 <LoRaMacSerializerData+0xd8>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c3b8:	7963      	ldrb	r3, [r4, #5]
 800c3ba:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800c3bc:	6823      	ldr	r3, [r4, #0]
 800c3be:	68a2      	ldr	r2, [r4, #8]
 800c3c0:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800c3c2:	6822      	ldr	r2, [r4, #0]
 800c3c4:	68a3      	ldr	r3, [r4, #8]
 800c3c6:	0a1b      	lsrs	r3, r3, #8
 800c3c8:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800c3ca:	6823      	ldr	r3, [r4, #0]
 800c3cc:	8962      	ldrh	r2, [r4, #10]
 800c3ce:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800c3d0:	6823      	ldr	r3, [r4, #0]
 800c3d2:	7ae2      	ldrb	r2, [r4, #11]
 800c3d4:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800c3d6:	6823      	ldr	r3, [r4, #0]
 800c3d8:	7b22      	ldrb	r2, [r4, #12]
 800c3da:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800c3dc:	6823      	ldr	r3, [r4, #0]
 800c3de:	89e2      	ldrh	r2, [r4, #14]
 800c3e0:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800c3e2:	6822      	ldr	r2, [r4, #0]
 800c3e4:	89e3      	ldrh	r3, [r4, #14]
 800c3e6:	0a1b      	lsrs	r3, r3, #8
 800c3e8:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c3ea:	7b22      	ldrb	r2, [r4, #12]
 800c3ec:	4621      	mov	r1, r4
 800c3ee:	f851 0b10 	ldr.w	r0, [r1], #16
 800c3f2:	f002 020f 	and.w	r2, r2, #15
 800c3f6:	3008      	adds	r0, #8
 800c3f8:	f001 fb40 	bl	800da7c <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c3fc:	7b23      	ldrb	r3, [r4, #12]
 800c3fe:	f003 030f 	and.w	r3, r3, #15
 800c402:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800c406:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800c40a:	b12a      	cbz	r2, 800c418 <LoRaMacSerializerData+0x88>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800c40c:	f894 1020 	ldrb.w	r1, [r4, #32]
 800c410:	6822      	ldr	r2, [r4, #0]
 800c412:	5551      	strb	r1, [r2, r5]
 800c414:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800c418:	6820      	ldr	r0, [r4, #0]
 800c41a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800c41e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c420:	4428      	add	r0, r5
 800c422:	f001 fb2b 	bl	800da7c <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800c426:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c42a:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c42c:	6822      	ldr	r2, [r4, #0]
 800c42e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c430:	54d1      	strb	r1, [r2, r3]
 800c432:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c434:	b292      	uxth	r2, r2
 800c436:	6820      	ldr	r0, [r4, #0]
 800c438:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c43a:	0a09      	lsrs	r1, r1, #8
 800c43c:	5481      	strb	r1, [r0, r2]
 800c43e:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c440:	b292      	uxth	r2, r2
 800c442:	6821      	ldr	r1, [r4, #0]
 800c444:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 800c446:	5488      	strb	r0, [r1, r2]
 800c448:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c44a:	b292      	uxth	r2, r2
 800c44c:	6821      	ldr	r1, [r4, #0]
 800c44e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800c452:	5488      	strb	r0, [r1, r2]
 800c454:	3304      	adds	r3, #4

    macMsg->BufSize = bufItr;
 800c456:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800c458:	2000      	movs	r0, #0
}
 800c45a:	bd38      	pop	{r3, r4, r5, pc}
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800c45c:	3309      	adds	r3, #9
 800c45e:	e7a6      	b.n	800c3ae <LoRaMacSerializerData+0x1e>
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c460:	2001      	movs	r0, #1
}
 800c462:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c464:	2001      	movs	r0, #1
 800c466:	e7f8      	b.n	800c45a <LoRaMacSerializerData+0xca>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c468:	2002      	movs	r0, #2
 800c46a:	e7f6      	b.n	800c45a <LoRaMacSerializerData+0xca>

0800c46c <RegionIsActive>:
        default:
        {
            return false;
        }
    }
}
 800c46c:	2805      	cmp	r0, #5
 800c46e:	bf14      	ite	ne
 800c470:	2000      	movne	r0, #0
 800c472:	2001      	moveq	r0, #1
 800c474:	4770      	bx	lr

0800c476 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800c476:	b500      	push	{lr}
 800c478:	b083      	sub	sp, #12
    PhyParam_t phyParam = { 0 };
    switch( region )
 800c47a:	2805      	cmp	r0, #5
 800c47c:	d005      	beq.n	800c48a <RegionGetPhyParam+0x14>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800c47e:	2300      	movs	r3, #0
 800c480:	9301      	str	r3, [sp, #4]
        }
    }
}
 800c482:	9801      	ldr	r0, [sp, #4]
 800c484:	b003      	add	sp, #12
 800c486:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_GET_PHY_PARAM( );
 800c48a:	4608      	mov	r0, r1
 800c48c:	f000 fd14 	bl	800ceb8 <RegionEU868GetPhyParam>
 800c490:	9001      	str	r0, [sp, #4]
 800c492:	e7f6      	b.n	800c482 <RegionGetPhyParam+0xc>

0800c494 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    switch( region )
 800c494:	2805      	cmp	r0, #5
 800c496:	d000      	beq.n	800c49a <RegionSetBandTxDone+0x6>
 800c498:	4770      	bx	lr
{
 800c49a:	b508      	push	{r3, lr}
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 800c49c:	4608      	mov	r0, r1
 800c49e:	f000 fdcb 	bl	800d038 <RegionEU868SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800c4a2:	bd08      	pop	{r3, pc}

0800c4a4 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    switch( region )
 800c4a4:	2805      	cmp	r0, #5
 800c4a6:	d000      	beq.n	800c4aa <RegionInitDefaults+0x6>
 800c4a8:	4770      	bx	lr
{
 800c4aa:	b508      	push	{r3, lr}
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 800c4ac:	4608      	mov	r0, r1
 800c4ae:	f000 fde1 	bl	800d074 <RegionEU868InitDefaults>
        default:
        {
            break;
        }
    }
}
 800c4b2:	bd08      	pop	{r3, pc}

0800c4b4 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
    switch( region )
 800c4b4:	2805      	cmp	r0, #5
 800c4b6:	d001      	beq.n	800c4bc <RegionVerify+0x8>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800c4b8:	2000      	movs	r0, #0
        }
    }
}
 800c4ba:	4770      	bx	lr
{
 800c4bc:	b508      	push	{r3, lr}
 800c4be:	460b      	mov	r3, r1
        EU868_VERIFY( );
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f000 fe42 	bl	800d14c <RegionEU868Verify>
}
 800c4c8:	bd08      	pop	{r3, pc}

0800c4ca <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    switch( region )
 800c4ca:	2805      	cmp	r0, #5
 800c4cc:	d000      	beq.n	800c4d0 <RegionApplyCFList+0x6>
 800c4ce:	4770      	bx	lr
{
 800c4d0:	b508      	push	{r3, lr}
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 800c4d2:	4608      	mov	r0, r1
 800c4d4:	f001 fa0a 	bl	800d8ec <RegionEU868ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800c4d8:	bd08      	pop	{r3, pc}

0800c4da <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    switch( region )
 800c4da:	2805      	cmp	r0, #5
 800c4dc:	d001      	beq.n	800c4e2 <RegionChanMaskSet+0x8>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800c4de:	2000      	movs	r0, #0
        }
    }
}
 800c4e0:	4770      	bx	lr
{
 800c4e2:	b508      	push	{r3, lr}
        EU868_CHAN_MASK_SET( );
 800c4e4:	4608      	mov	r0, r1
 800c4e6:	f000 fe77 	bl	800d1d8 <RegionEU868ChanMaskSet>
}
 800c4ea:	bd08      	pop	{r3, pc}

0800c4ec <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
    switch( region )
 800c4ec:	2805      	cmp	r0, #5
 800c4ee:	d000      	beq.n	800c4f2 <RegionComputeRxWindowParameters+0x6>
 800c4f0:	4770      	bx	lr
{
 800c4f2:	b508      	push	{r3, lr}
 800c4f4:	468c      	mov	ip, r1
 800c4f6:	4611      	mov	r1, r2
 800c4f8:	461a      	mov	r2, r3
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c4fa:	9b02      	ldr	r3, [sp, #8]
 800c4fc:	4660      	mov	r0, ip
 800c4fe:	f000 fe89 	bl	800d214 <RegionEU868ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800c502:	bd08      	pop	{r3, pc}

0800c504 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
    switch( region )
 800c504:	2805      	cmp	r0, #5
 800c506:	d001      	beq.n	800c50c <RegionRxConfig+0x8>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800c508:	2000      	movs	r0, #0
        }
    }
}
 800c50a:	4770      	bx	lr
{
 800c50c:	b508      	push	{r3, lr}
 800c50e:	460b      	mov	r3, r1
        EU868_RX_CONFIG( );
 800c510:	4611      	mov	r1, r2
 800c512:	4618      	mov	r0, r3
 800c514:	f000 feb2 	bl	800d27c <RegionEU868RxConfig>
}
 800c518:	bd08      	pop	{r3, pc}

0800c51a <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    switch( region )
 800c51a:	2805      	cmp	r0, #5
 800c51c:	d001      	beq.n	800c522 <RegionTxConfig+0x8>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800c51e:	2000      	movs	r0, #0
        }
    }
}
 800c520:	4770      	bx	lr
{
 800c522:	b508      	push	{r3, lr}
 800c524:	468c      	mov	ip, r1
 800c526:	4611      	mov	r1, r2
        EU868_TX_CONFIG( );
 800c528:	461a      	mov	r2, r3
 800c52a:	4660      	mov	r0, ip
 800c52c:	f000 ff28 	bl	800d380 <RegionEU868TxConfig>
}
 800c530:	bd08      	pop	{r3, pc}

0800c532 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
    switch( region )
 800c532:	2805      	cmp	r0, #5
 800c534:	d001      	beq.n	800c53a <RegionLinkAdrReq+0x8>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800c536:	2000      	movs	r0, #0
        }
    }
}
 800c538:	4770      	bx	lr
{
 800c53a:	b500      	push	{lr}
 800c53c:	b083      	sub	sp, #12
 800c53e:	468c      	mov	ip, r1
 800c540:	4611      	mov	r1, r2
 800c542:	461a      	mov	r2, r3
        EU868_LINK_ADR_REQ( );
 800c544:	9b05      	ldr	r3, [sp, #20]
 800c546:	9300      	str	r3, [sp, #0]
 800c548:	9b04      	ldr	r3, [sp, #16]
 800c54a:	4660      	mov	r0, ip
 800c54c:	f000 ffaa 	bl	800d4a4 <RegionEU868LinkAdrReq>
}
 800c550:	b003      	add	sp, #12
 800c552:	f85d fb04 	ldr.w	pc, [sp], #4

0800c556 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    switch( region )
 800c556:	2805      	cmp	r0, #5
 800c558:	d001      	beq.n	800c55e <RegionRxParamSetupReq+0x8>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800c55a:	2000      	movs	r0, #0
        }
    }
}
 800c55c:	4770      	bx	lr
{
 800c55e:	b508      	push	{r3, lr}
        EU868_RX_PARAM_SETUP_REQ( );
 800c560:	4608      	mov	r0, r1
 800c562:	f001 f855 	bl	800d610 <RegionEU868RxParamSetupReq>
}
 800c566:	bd08      	pop	{r3, pc}

0800c568 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    switch( region )
 800c568:	2805      	cmp	r0, #5
 800c56a:	d001      	beq.n	800c570 <RegionNewChannelReq+0x8>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800c56c:	2000      	movs	r0, #0
        }
    }
}
 800c56e:	4770      	bx	lr
{
 800c570:	b508      	push	{r3, lr}
        EU868_NEW_CHANNEL_REQ( );
 800c572:	4608      	mov	r0, r1
 800c574:	f001 f9fa 	bl	800d96c <RegionEU868NewChannelReq>
}
 800c578:	bd08      	pop	{r3, pc}

0800c57a <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    switch( region )
 800c57a:	2805      	cmp	r0, #5
 800c57c:	d001      	beq.n	800c582 <RegionTxParamSetupReq+0x8>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800c57e:	2000      	movs	r0, #0
        }
    }
}
 800c580:	4770      	bx	lr
{
 800c582:	b508      	push	{r3, lr}
        EU868_TX_PARAM_SETUP_REQ( );
 800c584:	4608      	mov	r0, r1
 800c586:	f001 f867 	bl	800d658 <RegionEU868TxParamSetupReq>
}
 800c58a:	bd08      	pop	{r3, pc}

0800c58c <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    switch( region )
 800c58c:	2805      	cmp	r0, #5
 800c58e:	d001      	beq.n	800c594 <RegionDlChannelReq+0x8>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800c590:	2000      	movs	r0, #0
        }
    }
}
 800c592:	4770      	bx	lr
{
 800c594:	b508      	push	{r3, lr}
        EU868_DL_CHANNEL_REQ( );
 800c596:	4608      	mov	r0, r1
 800c598:	f001 f862 	bl	800d660 <RegionEU868DlChannelReq>
}
 800c59c:	bd08      	pop	{r3, pc}

0800c59e <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
    switch( region )
 800c59e:	2805      	cmp	r0, #5
 800c5a0:	d001      	beq.n	800c5a6 <RegionAlternateDr+0x8>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800c5a2:	2000      	movs	r0, #0
        }
    }
}
 800c5a4:	4770      	bx	lr
{
 800c5a6:	b508      	push	{r3, lr}
 800c5a8:	460b      	mov	r3, r1
        EU868_ALTERNATE_DR( );
 800c5aa:	4611      	mov	r1, r2
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f001 f887 	bl	800d6c0 <RegionEU868AlternateDr>
}
 800c5b2:	bd08      	pop	{r3, pc}

0800c5b4 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
    switch( region )
 800c5b4:	2805      	cmp	r0, #5
 800c5b6:	d001      	beq.n	800c5bc <RegionNextChannel+0x8>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800c5b8:	2009      	movs	r0, #9
        }
    }
}
 800c5ba:	4770      	bx	lr
{
 800c5bc:	b508      	push	{r3, lr}
 800c5be:	468c      	mov	ip, r1
 800c5c0:	4611      	mov	r1, r2
 800c5c2:	461a      	mov	r2, r3
        EU868_NEXT_CHANNEL( );
 800c5c4:	9b02      	ldr	r3, [sp, #8]
 800c5c6:	4660      	mov	r0, ip
 800c5c8:	f001 f87c 	bl	800d6c4 <RegionEU868NextChannel>
}
 800c5cc:	bd08      	pop	{r3, pc}

0800c5ce <RegionSetContinuousWave>:
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
    switch( region )
 800c5ce:	2805      	cmp	r0, #5
 800c5d0:	d000      	beq.n	800c5d4 <RegionSetContinuousWave+0x6>
 800c5d2:	4770      	bx	lr
{
 800c5d4:	b508      	push	{r3, lr}
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 800c5d6:	4608      	mov	r0, r1
 800c5d8:	f001 f9f4 	bl	800d9c4 <RegionEU868SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 800c5dc:	bd08      	pop	{r3, pc}

0800c5de <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800c5de:	468c      	mov	ip, r1
 800c5e0:	4611      	mov	r1, r2
    switch( region )
 800c5e2:	2805      	cmp	r0, #5
 800c5e4:	d001      	beq.n	800c5ea <RegionApplyDrOffset+0xc>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800c5e6:	b2d0      	uxtb	r0, r2
        }
    }
}
 800c5e8:	4770      	bx	lr
{
 800c5ea:	b508      	push	{r3, lr}
        EU868_APPLY_DR_OFFSET( );
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	4660      	mov	r0, ip
 800c5f0:	f001 fa16 	bl	800da20 <RegionEU868ApplyDrOffset>
}
 800c5f4:	bd08      	pop	{r3, pc}
	...

0800c5f8 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800c5f8:	4800      	ldr	r0, [pc, #0]	; (800c5fc <RegionGetVersion+0x4>)
 800c5fa:	4770      	bx	lr
 800c5fc:	01010003 	.word	0x01010003

0800c600 <RegionCommonChanVerifyDr>:
    }
    return nbActiveBits;
}

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800c600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c602:	9f06      	ldr	r7, [sp, #24]
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800c604:	429a      	cmp	r2, r3
 800c606:	db2c      	blt.n	800c662 <RegionCommonChanVerifyDr+0x62>
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800c608:	f99d 3014 	ldrsb.w	r3, [sp, #20]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	dc2a      	bgt.n	800c666 <RegionCommonChanVerifyDr+0x66>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800c610:	b1c0      	cbz	r0, 800c644 <RegionCommonChanVerifyDr+0x44>
 800c612:	2600      	movs	r6, #0
 800c614:	4635      	mov	r5, r6
 800c616:	e01b      	b.n	800c650 <RegionCommonChanVerifyDr+0x50>
        for( uint8_t j = 0; j < 16; j++ )
 800c618:	3301      	adds	r3, #1
 800c61a:	f10c 0c0c 	add.w	ip, ip, #12
 800c61e:	2b10      	cmp	r3, #16
 800c620:	d011      	beq.n	800c646 <RegionCommonChanVerifyDr+0x46>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800c622:	fa44 fe03 	asr.w	lr, r4, r3
 800c626:	f01e 0f01 	tst.w	lr, #1
 800c62a:	d0f5      	beq.n	800c618 <RegionCommonChanVerifyDr+0x18>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800c62c:	f89c e008 	ldrb.w	lr, [ip, #8]
    if( ( value >= min ) && ( value <= max ) )
 800c630:	f00e 0e0f 	and.w	lr, lr, #15
 800c634:	4596      	cmp	lr, r2
 800c636:	dcef      	bgt.n	800c618 <RegionCommonChanVerifyDr+0x18>
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800c638:	f89c e008 	ldrb.w	lr, [ip, #8]
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800c63c:	ebb2 1f1e 	cmp.w	r2, lr, lsr #4
 800c640:	dcea      	bgt.n	800c618 <RegionCommonChanVerifyDr+0x18>
                    return true;
 800c642:	2001      	movs	r0, #1
}
 800c644:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800c646:	3510      	adds	r5, #16
 800c648:	b2ed      	uxtb	r5, r5
 800c64a:	3601      	adds	r6, #1
 800c64c:	42a8      	cmp	r0, r5
 800c64e:	d90c      	bls.n	800c66a <RegionCommonChanVerifyDr+0x6a>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800c650:	b2f3      	uxtb	r3, r6
 800c652:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 800c656:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800c65a:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 800c65e:	2300      	movs	r3, #0
 800c660:	e7df      	b.n	800c622 <RegionCommonChanVerifyDr+0x22>
        return false;
 800c662:	2000      	movs	r0, #0
 800c664:	e7ee      	b.n	800c644 <RegionCommonChanVerifyDr+0x44>
 800c666:	2000      	movs	r0, #0
 800c668:	e7ec      	b.n	800c644 <RegionCommonChanVerifyDr+0x44>
    return false;
 800c66a:	2000      	movs	r0, #0
 800c66c:	e7ea      	b.n	800c644 <RegionCommonChanVerifyDr+0x44>

0800c66e <RegionCommonValueInRange>:
    if( ( value >= min ) && ( value <= max ) )
 800c66e:	4288      	cmp	r0, r1
 800c670:	db04      	blt.n	800c67c <RegionCommonValueInRange+0xe>
    {
        return 1;
 800c672:	4290      	cmp	r0, r2
 800c674:	bfcc      	ite	gt
 800c676:	2000      	movgt	r0, #0
 800c678:	2001      	movle	r0, #1
 800c67a:	4770      	bx	lr
    }
    return 0;
 800c67c:	2000      	movs	r0, #0
}
 800c67e:	4770      	bx	lr

0800c680 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 800c680:	ea4f 1c11 	mov.w	ip, r1, lsr #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800c684:	0913      	lsrs	r3, r2, #4
 800c686:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800c68a:	d30e      	bcc.n	800c6aa <RegionCommonChanDisable+0x2a>
 800c68c:	4291      	cmp	r1, r2
 800c68e:	d20e      	bcs.n	800c6ae <RegionCommonChanDisable+0x2e>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800c690:	f001 010f 	and.w	r1, r1, #15
 800c694:	2301      	movs	r3, #1
 800c696:	fa03 f101 	lsl.w	r1, r3, r1
 800c69a:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 800c69e:	ea22 0101 	bic.w	r1, r2, r1
 800c6a2:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]

    return true;
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	4770      	bx	lr
        return false;
 800c6aa:	2000      	movs	r0, #0
 800c6ac:	4770      	bx	lr
 800c6ae:	2000      	movs	r0, #0
}
 800c6b0:	4770      	bx	lr

0800c6b2 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800c6b2:	b318      	cbz	r0, 800c6fc <RegionCommonCountChannels+0x4a>
 800c6b4:	4603      	mov	r3, r0
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800c6b6:	4291      	cmp	r1, r2
 800c6b8:	d222      	bcs.n	800c700 <RegionCommonCountChannels+0x4e>
{
 800c6ba:	b530      	push	{r4, r5, lr}
 800c6bc:	eb00 0441 	add.w	r4, r0, r1, lsl #1
 800c6c0:	3a01      	subs	r2, #1
 800c6c2:	1a55      	subs	r5, r2, r1
 800c6c4:	fa51 f585 	uxtab	r5, r1, r5
 800c6c8:	3302      	adds	r3, #2
 800c6ca:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    uint8_t nbChannels = 0;
 800c6ce:	2000      	movs	r0, #0
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800c6d0:	f04f 0e01 	mov.w	lr, #1
 800c6d4:	e003      	b.n	800c6de <RegionCommonCountChannels+0x2c>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800c6d6:	4408      	add	r0, r1
 800c6d8:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800c6da:	42ac      	cmp	r4, r5
 800c6dc:	d012      	beq.n	800c704 <RegionCommonCountChannels+0x52>
        nbChannels += CountChannels( channelsMask[i], 16 );
 800c6de:	f834 cb02 	ldrh.w	ip, [r4], #2
 800c6e2:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800c6e4:	4619      	mov	r1, r3
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800c6e6:	fa0e f203 	lsl.w	r2, lr, r3
 800c6ea:	ea32 020c 	bics.w	r2, r2, ip
            nbActiveBits++;
 800c6ee:	bf04      	itt	eq
 800c6f0:	3101      	addeq	r1, #1
 800c6f2:	b2c9      	uxtbeq	r1, r1
    for( uint8_t j = 0; j < nbBits; j++ )
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	2b10      	cmp	r3, #16
 800c6f8:	d1f5      	bne.n	800c6e6 <RegionCommonCountChannels+0x34>
 800c6fa:	e7ec      	b.n	800c6d6 <RegionCommonCountChannels+0x24>
        return 0;
 800c6fc:	2000      	movs	r0, #0
 800c6fe:	4770      	bx	lr
    uint8_t nbChannels = 0;
 800c700:	2000      	movs	r0, #0
    }

    return nbChannels;
}
 800c702:	4770      	bx	lr
 800c704:	bd30      	pop	{r4, r5, pc}

0800c706 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800c706:	b168      	cbz	r0, 800c724 <RegionCommonChanMaskCopy+0x1e>
 800c708:	b161      	cbz	r1, 800c724 <RegionCommonChanMaskCopy+0x1e>
    {
        for( uint8_t i = 0; i < len; i++ )
 800c70a:	b15a      	cbz	r2, 800c724 <RegionCommonChanMaskCopy+0x1e>
 800c70c:	1e8b      	subs	r3, r1, #2
 800c70e:	3802      	subs	r0, #2
 800c710:	3a01      	subs	r2, #1
 800c712:	b2d2      	uxtb	r2, r2
 800c714:	eb01 0142 	add.w	r1, r1, r2, lsl #1
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800c718:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800c71c:	f820 2f02 	strh.w	r2, [r0, #2]!
        for( uint8_t i = 0; i < len; i++ )
 800c720:	428b      	cmp	r3, r1
 800c722:	d1f9      	bne.n	800c718 <RegionCommonChanMaskCopy+0x12>
        }
    }
}
 800c724:	4770      	bx	lr

0800c726 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800c726:	b082      	sub	sp, #8
 800c728:	b500      	push	{lr}
 800c72a:	9302      	str	r3, [sp, #8]
    uint16_t dutyCycle = band->DCycle;
 800c72c:	f8b0 c000 	ldrh.w	ip, [r0]
    if( joined == false )
 800c730:	b97a      	cbnz	r2, 800c752 <RegionCommonSetBandTxDone+0x2c>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800c732:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800c736:	d308      	bcc.n	800c74a <RegionCommonSetBandTxDone+0x24>
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800c738:	f649 2eaf 	movw	lr, #39599	; 0x9aaf
 800c73c:	f242 7210 	movw	r2, #10000	; 0x2710
 800c740:	4573      	cmp	r3, lr
 800c742:	bf98      	it	ls
 800c744:	f44f 727a 	movls.w	r2, #1000	; 0x3e8
 800c748:	e000      	b.n	800c74c <RegionCommonSetBandTxDone+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800c74a:	2264      	movs	r2, #100	; 0x64
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800c74c:	4594      	cmp	ip, r2
 800c74e:	bf38      	it	cc
 800c750:	4694      	movcc	ip, r2
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800c752:	68c3      	ldr	r3, [r0, #12]
 800c754:	f1bc 0f01 	cmp.w	ip, #1
 800c758:	bf38      	it	cc
 800c75a:	f04f 0c01 	movcc.w	ip, #1
 800c75e:	fb01 fc0c 	mul.w	ip, r1, ip
 800c762:	4563      	cmp	r3, ip
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800c764:	bf8c      	ite	hi
 800c766:	eba3 030c 	subhi.w	r3, r3, ip
    }
    else
    {
        band->TimeCredits = 0;
 800c76a:	2300      	movls	r3, #0
 800c76c:	60c3      	str	r3, [r0, #12]
    }
}
 800c76e:	f85d eb04 	ldr.w	lr, [sp], #4
 800c772:	b002      	add	sp, #8
 800c774:	4770      	bx	lr
	...

0800c778 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800c778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c77c:	b091      	sub	sp, #68	; 0x44
 800c77e:	4683      	mov	fp, r0
 800c780:	460d      	mov	r5, r1
 800c782:	4614      	mov	r4, r2
 800c784:	9303      	str	r3, [sp, #12]
 800c786:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800c78a:	9307      	str	r3, [sp, #28]
 800c78c:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800c790:	f003 feb4 	bl	80104fc <UTIL_TIMER_GetCurrentTime>
 800c794:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800c796:	2c00      	cmp	r4, #0
 800c798:	f000 8081 	beq.w	800c89e <RegionCommonUpdateBandTimeOff+0x126>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800c79c:	f5a9 33f6 	sub.w	r3, r9, #125952	; 0x1ec00
 800c7a0:	3b30      	subs	r3, #48	; 0x30
 800c7a2:	4a88      	ldr	r2, [pc, #544]	; (800c9c4 <RegionCommonUpdateBandTimeOff+0x24c>)
 800c7a4:	fba2 2303 	umull	r2, r3, r2, r3
 800c7a8:	0c1b      	lsrs	r3, r3, #16
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800c7aa:	4a87      	ldr	r2, [pc, #540]	; (800c9c8 <RegionCommonUpdateBandTimeOff+0x250>)
 800c7ac:	fb02 f103 	mul.w	r1, r2, r3
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800c7b0:	f501 31f6 	add.w	r1, r1, #125952	; 0x1ec00
 800c7b4:	3130      	adds	r1, #48	; 0x30
 800c7b6:	9108      	str	r1, [sp, #32]
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800c7b8:	fb03 2302 	mla	r3, r3, r2, r2
 800c7bc:	9309      	str	r3, [sp, #36]	; 0x24
 800c7be:	462f      	mov	r7, r5
 800c7c0:	3c01      	subs	r4, #1
 800c7c2:	b2e4      	uxtb	r4, r4
 800c7c4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800c7c8:	3518      	adds	r5, #24
 800c7ca:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800c7ce:	9305      	str	r3, [sp, #20]
    uint8_t validBands = 0;
 800c7d0:	f04f 0a00 	mov.w	sl, #0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800c7d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c7d8:	9306      	str	r3, [sp, #24]
 800c7da:	e097      	b.n	800c90c <RegionCommonUpdateBandTimeOff+0x194>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800c7dc:	4643      	mov	r3, r8
 800c7de:	2b64      	cmp	r3, #100	; 0x64
 800c7e0:	bf38      	it	cc
 800c7e2:	2364      	movcc	r3, #100	; 0x64
    if( dutyCycle == 0 )
 800c7e4:	461d      	mov	r5, r3
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800c7e6:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 800c7ea:	d803      	bhi.n	800c7f4 <RegionCommonUpdateBandTimeOff+0x7c>
            band->LastMaxCreditAssignTime = elapsedTime;
 800c7ec:	60b8      	str	r0, [r7, #8]
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800c7ee:	4698      	mov	r8, r3
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800c7f0:	4e76      	ldr	r6, [pc, #472]	; (800c9cc <RegionCommonUpdateBandTimeOff+0x254>)
 800c7f2:	e0c9      	b.n	800c988 <RegionCommonUpdateBandTimeOff+0x210>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800c7f4:	4698      	mov	r8, r3
 800c7f6:	e0c1      	b.n	800c97c <RegionCommonUpdateBandTimeOff+0x204>
            ( band->MaxTimeCredits != maxCredits ) ||
 800c7f8:	4b75      	ldr	r3, [pc, #468]	; (800c9d0 <RegionCommonUpdateBandTimeOff+0x258>)
 800c7fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	f240 80dc 	bls.w	800c9ba <RegionCommonUpdateBandTimeOff+0x242>
 800c802:	e0d5      	b.n	800c9b0 <RegionCommonUpdateBandTimeOff+0x238>
                timeDiff.SubSeconds = 0;
 800c804:	2300      	movs	r3, #0
 800c806:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800c80a:	9b08      	ldr	r3, [sp, #32]
 800c80c:	930c      	str	r3, [sp, #48]	; 0x30
 800c80e:	ab0c      	add	r3, sp, #48	; 0x30
 800c810:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c814:	f003 fb64 	bl	800fee0 <SysTimeToMs>
 800c818:	60a0      	str	r0, [r4, #8]
 800c81a:	e0ce      	b.n	800c9ba <RegionCommonUpdateBandTimeOff+0x242>
            bands[i].ReadyForTransmission = false;
 800c81c:	2200      	movs	r2, #0
 800c81e:	7522      	strb	r2, [r4, #20]
            if( bands[i].MaxTimeCredits > creditCosts )
 800c820:	42b5      	cmp	r5, r6
 800c822:	d209      	bcs.n	800c838 <RegionCommonUpdateBandTimeOff+0xc0>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800c824:	1aed      	subs	r5, r5, r3
 800c826:	9b06      	ldr	r3, [sp, #24]
 800c828:	42ab      	cmp	r3, r5
 800c82a:	bf28      	it	cs
 800c82c:	462b      	movcs	r3, r5
 800c82e:	9306      	str	r3, [sp, #24]
                validBands++;
 800c830:	f10a 0a01 	add.w	sl, sl, #1
 800c834:	fa5f fa8a 	uxtb.w	sl, sl
            if( joined == false )
 800c838:	f1bb 0f00 	cmp.w	fp, #0
 800c83c:	d162      	bne.n	800c904 <RegionCommonUpdateBandTimeOff+0x18c>
                SysTime_t backoffTimeRange = {
 800c83e:	2300      	movs	r3, #0
 800c840:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800c844:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 800c848:	d01b      	beq.n	800c882 <RegionCommonUpdateBandTimeOff+0x10a>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800c84a:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800c84e:	4a61      	ldr	r2, [pc, #388]	; (800c9d4 <RegionCommonUpdateBandTimeOff+0x25c>)
 800c850:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
 800c854:	bf18      	it	ne
 800c856:	4613      	movne	r3, r2
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800c858:	4a5e      	ldr	r2, [pc, #376]	; (800c9d4 <RegionCommonUpdateBandTimeOff+0x25c>)
 800c85a:	4591      	cmp	r9, r2
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800c85c:	bf84      	itt	hi
 800c85e:	9a09      	ldrhi	r2, [sp, #36]	; 0x24
 800c860:	189b      	addhi	r3, r3, r2
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800c862:	930c      	str	r3, [sp, #48]	; 0x30
 800c864:	ac0c      	add	r4, sp, #48	; 0x30
 800c866:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c868:	9300      	str	r3, [sp, #0]
 800c86a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c86c:	e894 0006 	ldmia.w	r4, {r1, r2}
 800c870:	4620      	mov	r0, r4
 800c872:	f003 fab5 	bl	800fde0 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800c876:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c87a:	f003 fb31 	bl	800fee0 <SysTimeToMs>
 800c87e:	9006      	str	r0, [sp, #24]
 800c880:	e040      	b.n	800c904 <RegionCommonUpdateBandTimeOff+0x18c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800c882:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800c886:	e7e7      	b.n	800c858 <RegionCommonUpdateBandTimeOff+0xe0>

    if( validBands == 0 )
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 800c888:	f1ba 0f00 	cmp.w	sl, #0
 800c88c:	9b06      	ldr	r3, [sp, #24]
 800c88e:	bf08      	it	eq
 800c890:	f04f 33ff 	moveq.w	r3, #4294967295
 800c894:	9306      	str	r3, [sp, #24]
    }
    return minTimeToWait;
}
 800c896:	9806      	ldr	r0, [sp, #24]
 800c898:	b011      	add	sp, #68	; 0x44
 800c89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800c89e:	f04f 33ff 	mov.w	r3, #4294967295
 800c8a2:	9306      	str	r3, [sp, #24]
 800c8a4:	e7f7      	b.n	800c896 <RegionCommonUpdateBandTimeOff+0x11e>
            bands[i].ReadyForTransmission = false;
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	7522      	strb	r2, [r4, #20]
            if( bands[i].MaxTimeCredits > creditCosts )
 800c8aa:	42b5      	cmp	r5, r6
 800c8ac:	d2c7      	bcs.n	800c83e <RegionCommonUpdateBandTimeOff+0xc6>
 800c8ae:	e7b9      	b.n	800c824 <RegionCommonUpdateBandTimeOff+0xac>
    if( dutyCycle == 0 )
 800c8b0:	4645      	mov	r5, r8
 800c8b2:	2d01      	cmp	r5, #1
 800c8b4:	bf38      	it	cc
 800c8b6:	2501      	movcc	r5, #1
        if( dutyCycleEnabled == false )
 800c8b8:	9b03      	ldr	r3, [sp, #12]
 800c8ba:	b90b      	cbnz	r3, 800c8c0 <RegionCommonUpdateBandTimeOff+0x148>
            band->TimeCredits = maxCredits;
 800c8bc:	4b43      	ldr	r3, [pc, #268]	; (800c9cc <RegionCommonUpdateBandTimeOff+0x254>)
 800c8be:	60e3      	str	r3, [r4, #12]
    if( band->LastBandUpdateTime == 0 )
 800c8c0:	6860      	ldr	r0, [r4, #4]
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	d04c      	beq.n	800c960 <RegionCommonUpdateBandTimeOff+0x1e8>
    band->MaxTimeCredits = maxCredits;
 800c8c6:	4b41      	ldr	r3, [pc, #260]	; (800c9cc <RegionCommonUpdateBandTimeOff+0x254>)
 800c8c8:	6123      	str	r3, [r4, #16]
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800c8ca:	f003 fe21 	bl	8010510 <UTIL_TIMER_GetElapsedTime>
 800c8ce:	68e3      	ldr	r3, [r4, #12]
 800c8d0:	4403      	add	r3, r0
 800c8d2:	60e3      	str	r3, [r4, #12]
    if( band->TimeCredits > band->MaxTimeCredits )
 800c8d4:	6926      	ldr	r6, [r4, #16]
 800c8d6:	68e3      	ldr	r3, [r4, #12]
 800c8d8:	42b3      	cmp	r3, r6
        band->TimeCredits = band->MaxTimeCredits;
 800c8da:	bf88      	it	hi
 800c8dc:	60e6      	strhi	r6, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800c8de:	9b04      	ldr	r3, [sp, #16]
 800c8e0:	6063      	str	r3, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800c8e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c8e4:	fb03 f505 	mul.w	r5, r3, r5
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800c8e8:	68e3      	ldr	r3, [r4, #12]
 800c8ea:	42ab      	cmp	r3, r5
 800c8ec:	d805      	bhi.n	800c8fa <RegionCommonUpdateBandTimeOff+0x182>
 800c8ee:	9a03      	ldr	r2, [sp, #12]
 800c8f0:	2a00      	cmp	r2, #0
 800c8f2:	d193      	bne.n	800c81c <RegionCommonUpdateBandTimeOff+0xa4>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800c8f4:	f1bb 0f00 	cmp.w	fp, #0
 800c8f8:	d0d5      	beq.n	800c8a6 <RegionCommonUpdateBandTimeOff+0x12e>
            bands[i].ReadyForTransmission = true;
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	7523      	strb	r3, [r4, #20]
            validBands++;
 800c8fe:	449a      	add	sl, r3
 800c900:	fa5f fa8a 	uxtb.w	sl, sl
    for( uint8_t i = 0; i < nbBands; i++ )
 800c904:	3718      	adds	r7, #24
 800c906:	9b05      	ldr	r3, [sp, #20]
 800c908:	429f      	cmp	r7, r3
 800c90a:	d0bd      	beq.n	800c888 <RegionCommonUpdateBandTimeOff+0x110>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800c90c:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 800c910:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800c914:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800c918:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800c91c:	ab0a      	add	r3, sp, #40	; 0x28
 800c91e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c922:	f003 fadd 	bl	800fee0 <SysTimeToMs>
    uint16_t dutyCycle = band->DCycle;
 800c926:	463c      	mov	r4, r7
 800c928:	f8b7 8000 	ldrh.w	r8, [r7]
    if( joined == false )
 800c92c:	f1bb 0f00 	cmp.w	fp, #0
 800c930:	d1be      	bne.n	800c8b0 <RegionCommonUpdateBandTimeOff+0x138>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800c932:	f5b9 6f61 	cmp.w	r9, #3600	; 0xe10
 800c936:	f4ff af51 	bcc.w	800c7dc <RegionCommonUpdateBandTimeOff+0x64>
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800c93a:	f649 23af 	movw	r3, #39599	; 0x9aaf
 800c93e:	4599      	cmp	r9, r3
 800c940:	d912      	bls.n	800c968 <RegionCommonUpdateBandTimeOff+0x1f0>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800c942:	f242 7310 	movw	r3, #10000	; 0x2710
 800c946:	4598      	cmp	r8, r3
 800c948:	bf38      	it	cc
 800c94a:	4698      	movcc	r8, r3
    if( dutyCycle == 0 )
 800c94c:	4645      	mov	r5, r8
 800c94e:	2d01      	cmp	r5, #1
 800c950:	bf38      	it	cc
 800c952:	2501      	movcc	r5, #1
 800c954:	b2ad      	uxth	r5, r5
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800c956:	4e20      	ldr	r6, [pc, #128]	; (800c9d8 <RegionCommonUpdateBandTimeOff+0x260>)
 800c958:	e016      	b.n	800c988 <RegionCommonUpdateBandTimeOff+0x210>
        band->TimeCredits = maxCredits;
 800c95a:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800c95c:	6126      	str	r6, [r4, #16]
    if( band->TimeCredits > band->MaxTimeCredits )
 800c95e:	e7be      	b.n	800c8de <RegionCommonUpdateBandTimeOff+0x166>
        band->TimeCredits = maxCredits;
 800c960:	4b1a      	ldr	r3, [pc, #104]	; (800c9cc <RegionCommonUpdateBandTimeOff+0x254>)
 800c962:	60e3      	str	r3, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800c964:	6123      	str	r3, [r4, #16]
    if( joined == true )
 800c966:	e7b0      	b.n	800c8ca <RegionCommonUpdateBandTimeOff+0x152>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800c968:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
 800c96c:	bf38      	it	cc
 800c96e:	f44f 787a 	movcc.w	r8, #1000	; 0x3e8
    if( dutyCycle == 0 )
 800c972:	4645      	mov	r5, r8
 800c974:	2d01      	cmp	r5, #1
 800c976:	bf38      	it	cc
 800c978:	2501      	movcc	r5, #1
 800c97a:	b2ad      	uxth	r5, r5
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800c97c:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
            band->LastMaxCreditAssignTime = elapsedTime;
 800c980:	bf06      	itte	eq
 800c982:	60a0      	streq	r0, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800c984:	4e15      	ldreq	r6, [pc, #84]	; (800c9dc <RegionCommonUpdateBandTimeOff+0x264>)
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800c986:	4e14      	ldrne	r6, [pc, #80]	; (800c9d8 <RegionCommonUpdateBandTimeOff+0x260>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800c988:	68a1      	ldr	r1, [r4, #8]
 800c98a:	a80e      	add	r0, sp, #56	; 0x38
 800c98c:	f003 faca 	bl	800ff24 <SysTimeFromMs>
 800c990:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c992:	9300      	str	r3, [sp, #0]
 800c994:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c996:	aa0a      	add	r2, sp, #40	; 0x28
 800c998:	ca06      	ldmia	r2, {r1, r2}
 800c99a:	a80c      	add	r0, sp, #48	; 0x30
 800c99c:	f003 fa20 	bl	800fde0 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800c9a0:	9b03      	ldr	r3, [sp, #12]
 800c9a2:	b90b      	cbnz	r3, 800c9a8 <RegionCommonUpdateBandTimeOff+0x230>
 800c9a4:	9b07      	ldr	r3, [sp, #28]
 800c9a6:	b11b      	cbz	r3, 800c9b0 <RegionCommonUpdateBandTimeOff+0x238>
 800c9a8:	6923      	ldr	r3, [r4, #16]
 800c9aa:	42b3      	cmp	r3, r6
 800c9ac:	f43f af24 	beq.w	800c7f8 <RegionCommonUpdateBandTimeOff+0x80>
            band->TimeCredits = maxCredits;
 800c9b0:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800c9b2:	4b0b      	ldr	r3, [pc, #44]	; (800c9e0 <RegionCommonUpdateBandTimeOff+0x268>)
 800c9b4:	4599      	cmp	r9, r3
 800c9b6:	f63f af25 	bhi.w	800c804 <RegionCommonUpdateBandTimeOff+0x8c>
    if( band->LastBandUpdateTime == 0 )
 800c9ba:	6863      	ldr	r3, [r4, #4]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d0cc      	beq.n	800c95a <RegionCommonUpdateBandTimeOff+0x1e2>
    band->MaxTimeCredits = maxCredits;
 800c9c0:	6126      	str	r6, [r4, #16]
    if( joined == true )
 800c9c2:	e787      	b.n	800c8d4 <RegionCommonUpdateBandTimeOff+0x15c>
 800c9c4:	c22e4507 	.word	0xc22e4507
 800c9c8:	00015180 	.word	0x00015180
 800c9cc:	001b7740 	.word	0x001b7740
 800c9d0:	0001517f 	.word	0x0001517f
 800c9d4:	0001ec30 	.word	0x0001ec30
 800c9d8:	02932e00 	.word	0x02932e00
 800c9dc:	0112a880 	.word	0x0112a880
 800c9e0:	0001ec2f 	.word	0x0001ec2f

0800c9e4 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800c9e4:	7803      	ldrb	r3, [r0, #0]
 800c9e6:	2b03      	cmp	r3, #3
 800c9e8:	d001      	beq.n	800c9ee <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800c9ea:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800c9ec:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800c9ee:	7843      	ldrb	r3, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800c9f0:	f003 020f 	and.w	r2, r3, #15
 800c9f4:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800c9f6:	091b      	lsrs	r3, r3, #4
 800c9f8:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800c9fa:	7883      	ldrb	r3, [r0, #2]
 800c9fc:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800c9fe:	78c2      	ldrb	r2, [r0, #3]
 800ca00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ca04:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800ca06:	7903      	ldrb	r3, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800ca08:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800ca0c:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800ca0e:	f003 030f 	and.w	r3, r3, #15
 800ca12:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800ca14:	2005      	movs	r0, #5
 800ca16:	4770      	bx	lr

0800ca18 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800ca18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca1c:	b083      	sub	sp, #12
 800ca1e:	4604      	mov	r4, r0
 800ca20:	4688      	mov	r8, r1
 800ca22:	4617      	mov	r7, r2
 800ca24:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800ca26:	f890 a004 	ldrb.w	sl, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800ca2a:	f990 b006 	ldrsb.w	fp, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800ca2e:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800ca32:	7a05      	ldrb	r5, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800ca34:	7943      	ldrb	r3, [r0, #5]
 800ca36:	b10b      	cbz	r3, 800ca3c <RegionCommonLinkAdrReqVerifyParams+0x24>
    int8_t nbRepetitions = verifyParams->NbRep;
 800ca38:	b26d      	sxtb	r5, r5
 800ca3a:	e005      	b.n	800ca48 <RegionCommonLinkAdrReqVerifyParams+0x30>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800ca3c:	f990 500b 	ldrsb.w	r5, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800ca40:	f990 b009 	ldrsb.w	fp, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800ca44:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800ca48:	f1ba 0f00 	cmp.w	sl, #0
 800ca4c:	d02b      	beq.n	800caa6 <RegionCommonLinkAdrReqVerifyParams+0x8e>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800ca4e:	f1bb 0f0f 	cmp.w	fp, #15
 800ca52:	d10f      	bne.n	800ca74 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800ca54:	f994 b009 	ldrsb.w	fp, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800ca58:	f1b9 0f0f 	cmp.w	r9, #15
 800ca5c:	d01b      	beq.n	800ca96 <RegionCommonLinkAdrReqVerifyParams+0x7e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800ca5e:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800ca62:	f994 201c 	ldrsb.w	r2, [r4, #28]
    if( ( value >= min ) && ( value <= max ) )
 800ca66:	454b      	cmp	r3, r9
 800ca68:	dc26      	bgt.n	800cab8 <RegionCommonLinkAdrReqVerifyParams+0xa0>
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800ca6a:	454a      	cmp	r2, r9
 800ca6c:	da15      	bge.n	800ca9a <RegionCommonLinkAdrReqVerifyParams+0x82>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800ca6e:	f00a 0afb 	and.w	sl, sl, #251	; 0xfb
 800ca72:	e018      	b.n	800caa6 <RegionCommonLinkAdrReqVerifyParams+0x8e>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800ca74:	69a3      	ldr	r3, [r4, #24]
 800ca76:	9301      	str	r3, [sp, #4]
 800ca78:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800ca7c:	9300      	str	r3, [sp, #0]
 800ca7e:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800ca82:	465a      	mov	r2, fp
 800ca84:	6921      	ldr	r1, [r4, #16]
 800ca86:	7b20      	ldrb	r0, [r4, #12]
 800ca88:	f7ff fdba 	bl	800c600 <RegionCommonChanVerifyDr>
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d1e3      	bne.n	800ca58 <RegionCommonLinkAdrReqVerifyParams+0x40>
            status &= 0xFD; // Datarate KO
 800ca90:	f00a 0afd 	and.w	sl, sl, #253	; 0xfd
 800ca94:	e7e0      	b.n	800ca58 <RegionCommonLinkAdrReqVerifyParams+0x40>
            txPower =  verifyParams->CurrentTxPower;
 800ca96:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800ca9a:	f1ba 0f07 	cmp.w	sl, #7
 800ca9e:	d102      	bne.n	800caa6 <RegionCommonLinkAdrReqVerifyParams+0x8e>
    {
        if( nbRepetitions == 0 )
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 800caa0:	2d00      	cmp	r5, #0
 800caa2:	bf08      	it	eq
 800caa4:	2501      	moveq	r5, #1
        }
    }

    // Apply changes
    *dr = datarate;
 800caa6:	f888 b000 	strb.w	fp, [r8]
    *txPow = txPower;
 800caaa:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800caae:	7035      	strb	r5, [r6, #0]

    return status;
}
 800cab0:	4650      	mov	r0, sl
 800cab2:	b003      	add	sp, #12
 800cab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800cab8:	4699      	mov	r9, r3
 800caba:	e7ee      	b.n	800ca9a <RegionCommonLinkAdrReqVerifyParams+0x82>

0800cabc <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800cabc:	4b02      	ldr	r3, [pc, #8]	; (800cac8 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800cabe:	fa03 f000 	lsl.w	r0, r3, r0
}
 800cac2:	fbb0 f0f1 	udiv	r0, r0, r1
 800cac6:	4770      	bx	lr
 800cac8:	000f4240 	.word	0x000f4240

0800cacc <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800cacc:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800cad0:	fbb3 f0f0 	udiv	r0, r3, r0
 800cad4:	4770      	bx	lr
	...

0800cad8 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800cad8:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800cada:	f1a1 0c04 	sub.w	ip, r1, #4
 800cade:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800cae2:	fb0e f202 	mul.w	r2, lr, r2
 800cae6:	fb00 220c 	mla	r2, r0, ip, r2
 800caea:	0052      	lsls	r2, r2, #1
 800caec:	d004      	beq.n	800caf8 <RegionCommonComputeRxWindowParameters+0x20>
 800caee:	f100 3cff 	add.w	ip, r0, #4294967295
 800caf2:	4462      	add	r2, ip
 800caf4:	fbb2 f2f0 	udiv	r2, r2, r0
 800caf8:	4291      	cmp	r1, r2
 800cafa:	bf38      	it	cc
 800cafc:	4611      	movcc	r1, r2
 800cafe:	9a01      	ldr	r2, [sp, #4]
 800cb00:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800cb02:	0082      	lsls	r2, r0, #2
 800cb04:	fb00 f101 	mul.w	r1, r0, r1
 800cb08:	b1a1      	cbz	r1, 800cb34 <RegionCommonComputeRxWindowParameters+0x5c>
 800cb0a:	3101      	adds	r1, #1
 800cb0c:	0849      	lsrs	r1, r1, #1
 800cb0e:	1a51      	subs	r1, r2, r1
 800cb10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cb14:	fb02 1113 	mls	r1, r2, r3, r1
 800cb18:	2900      	cmp	r1, #0
 800cb1a:	bfc8      	it	gt
 800cb1c:	f201 31e7 	addwgt	r1, r1, #999	; 0x3e7
 800cb20:	4b05      	ldr	r3, [pc, #20]	; (800cb38 <RegionCommonComputeRxWindowParameters+0x60>)
 800cb22:	fb83 2301 	smull	r2, r3, r3, r1
 800cb26:	17c9      	asrs	r1, r1, #31
 800cb28:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 800cb2c:	9b02      	ldr	r3, [sp, #8]
 800cb2e:	6019      	str	r1, [r3, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800cb30:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800cb34:	2100      	movs	r1, #0
 800cb36:	e7ea      	b.n	800cb0e <RegionCommonComputeRxWindowParameters+0x36>
 800cb38:	10624dd3 	.word	0x10624dd3

0800cb3c <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800cb3c:	b538      	push	{r3, r4, r5, lr}
 800cb3e:	460d      	mov	r5, r1
 800cb40:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800cb42:	0040      	lsls	r0, r0, #1
 800cb44:	f7f3 fe42 	bl	80007cc <__aeabi_ui2f>
 800cb48:	4601      	mov	r1, r0
 800cb4a:	4628      	mov	r0, r5
 800cb4c:	f7f3 fd8c 	bl	8000668 <__aeabi_fsub>
 800cb50:	4621      	mov	r1, r4
 800cb52:	f7f3 fd89 	bl	8000668 <__aeabi_fsub>
 800cb56:	f7f3 fc7b 	bl	8000450 <__aeabi_f2d>
 800cb5a:	f004 f845 	bl	8010be8 <floor>
 800cb5e:	f7f3 fd57 	bl	8000610 <__aeabi_d2iz>

    return phyTxPower;
}
 800cb62:	b240      	sxtb	r0, r0
 800cb64:	bd38      	pop	{r3, r4, r5, pc}

0800cb66 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800cb66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	9101      	str	r1, [sp, #4]
 800cb6e:	4690      	mov	r8, r2
 800cb70:	4699      	mov	r9, r3
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800cb72:	8a03      	ldrh	r3, [r0, #16]
 800cb74:	b123      	cbz	r3, 800cb80 <RegionCommonCountNbOfEnabledChannels+0x1a>
 800cb76:	2600      	movs	r6, #0
 800cb78:	4634      	mov	r4, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800cb7a:	4635      	mov	r5, r6
    uint8_t nbChannelCount = 0;
 800cb7c:	4631      	mov	r1, r6
 800cb7e:	e05f      	b.n	800cc40 <RegionCommonCountNbOfEnabledChannels+0xda>
    uint8_t nbRestrictedChannelsCount = 0;
 800cb80:	2500      	movs	r5, #0
    uint8_t nbChannelCount = 0;
 800cb82:	4629      	mov	r1, r5
                }
                enabledChannels[nbChannelCount++] = i + j;
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800cb84:	f888 1000 	strb.w	r1, [r8]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800cb88:	f889 5000 	strb.w	r5, [r9]
}
 800cb8c:	b003      	add	sp, #12
 800cb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800cb92:	f990 a001 	ldrsb.w	sl, [r0, #1]
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800cb96:	f89b e008 	ldrb.w	lr, [fp, #8]
 800cb9a:	f34e 0e03 	sbfx	lr, lr, #0, #4
    if( ( value >= min ) && ( value <= max ) )
 800cb9e:	fa4f fe8e 	sxtb.w	lr, lr
 800cba2:	45d6      	cmp	lr, sl
 800cba4:	dc1c      	bgt.n	800cbe0 <RegionCommonCountNbOfEnabledChannels+0x7a>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800cba6:	f89b e008 	ldrb.w	lr, [fp, #8]
 800cbaa:	f34e 1e03 	sbfx	lr, lr, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800cbae:	fa4f fe8e 	sxtb.w	lr, lr
 800cbb2:	45d6      	cmp	lr, sl
 800cbb4:	db14      	blt.n	800cbe0 <RegionCommonCountNbOfEnabledChannels+0x7a>
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800cbb6:	f89b e009 	ldrb.w	lr, [fp, #9]
 800cbba:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 800cbbe:	68c7      	ldr	r7, [r0, #12]
 800cbc0:	eb07 0ece 	add.w	lr, r7, lr, lsl #3
 800cbc4:	f89e e014 	ldrb.w	lr, [lr, #20]
 800cbc8:	f1be 0f00 	cmp.w	lr, #0
 800cbcc:	d02e      	beq.n	800cc2c <RegionCommonCountNbOfEnabledChannels+0xc6>
                enabledChannels[nbChannelCount++] = i + j;
 800cbce:	f101 0e01 	add.w	lr, r1, #1
 800cbd2:	eb04 0a0c 	add.w	sl, r4, ip
 800cbd6:	9f01      	ldr	r7, [sp, #4]
 800cbd8:	f807 a001 	strb.w	sl, [r7, r1]
 800cbdc:	fa5f f18e 	uxtb.w	r1, lr
        for( uint8_t j = 0; j < 16; j++ )
 800cbe0:	f10c 0c01 	add.w	ip, ip, #1
 800cbe4:	330c      	adds	r3, #12
 800cbe6:	f1bc 0f10 	cmp.w	ip, #16
 800cbea:	d022      	beq.n	800cc32 <RegionCommonCountNbOfEnabledChannels+0xcc>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800cbec:	6847      	ldr	r7, [r0, #4]
 800cbee:	f837 e002 	ldrh.w	lr, [r7, r2]
 800cbf2:	fa4e fe0c 	asr.w	lr, lr, ip
 800cbf6:	f01e 0f01 	tst.w	lr, #1
 800cbfa:	d0f1      	beq.n	800cbe0 <RegionCommonCountNbOfEnabledChannels+0x7a>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800cbfc:	6887      	ldr	r7, [r0, #8]
 800cbfe:	eb07 0b03 	add.w	fp, r7, r3
 800cc02:	58ff      	ldr	r7, [r7, r3]
 800cc04:	2f00      	cmp	r7, #0
 800cc06:	d0eb      	beq.n	800cbe0 <RegionCommonCountNbOfEnabledChannels+0x7a>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800cc08:	f890 e000 	ldrb.w	lr, [r0]
 800cc0c:	f1be 0f00 	cmp.w	lr, #0
 800cc10:	d1bf      	bne.n	800cb92 <RegionCommonCountNbOfEnabledChannels+0x2c>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800cc12:	f8d0 e014 	ldr.w	lr, [r0, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800cc16:	f1be 0f00 	cmp.w	lr, #0
 800cc1a:	d0ba      	beq.n	800cb92 <RegionCommonCountNbOfEnabledChannels+0x2c>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800cc1c:	f83e e002 	ldrh.w	lr, [lr, r2]
 800cc20:	fa4e fa0c 	asr.w	sl, lr, ip
 800cc24:	f01a 0f01 	tst.w	sl, #1
 800cc28:	d1b3      	bne.n	800cb92 <RegionCommonCountNbOfEnabledChannels+0x2c>
 800cc2a:	e7d9      	b.n	800cbe0 <RegionCommonCountNbOfEnabledChannels+0x7a>
                    nbRestrictedChannelsCount++;
 800cc2c:	3501      	adds	r5, #1
 800cc2e:	b2ed      	uxtb	r5, r5
                    continue;
 800cc30:	e7d6      	b.n	800cbe0 <RegionCommonCountNbOfEnabledChannels+0x7a>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800cc32:	f104 0310 	add.w	r3, r4, #16
 800cc36:	b2dc      	uxtb	r4, r3
 800cc38:	3601      	adds	r6, #1
 800cc3a:	8a02      	ldrh	r2, [r0, #16]
 800cc3c:	42a2      	cmp	r2, r4
 800cc3e:	d9a1      	bls.n	800cb84 <RegionCommonCountNbOfEnabledChannels+0x1e>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800cc40:	b2f2      	uxtb	r2, r6
 800cc42:	0052      	lsls	r2, r2, #1
 800cc44:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800cc48:	009b      	lsls	r3, r3, #2
 800cc4a:	f04f 0c00 	mov.w	ip, #0
 800cc4e:	e7cd      	b.n	800cbec <RegionCommonCountNbOfEnabledChannels+0x86>

0800cc50 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800cc50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc54:	b085      	sub	sp, #20
 800cc56:	4604      	mov	r4, r0
 800cc58:	460f      	mov	r7, r1
 800cc5a:	4616      	mov	r6, r2
 800cc5c:	461d      	mov	r5, r3
 800cc5e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800cc62:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800cc66:	6840      	ldr	r0, [r0, #4]
 800cc68:	f003 fc52 	bl	8010510 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800cc6c:	6823      	ldr	r3, [r4, #0]
 800cc6e:	1a1b      	subs	r3, r3, r0
 800cc70:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800cc74:	2301      	movs	r3, #1
 800cc76:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800cc7e:	6863      	ldr	r3, [r4, #4]
 800cc80:	b113      	cbz	r3, 800cc88 <RegionCommonIdentifyChannels+0x38>
 800cc82:	6823      	ldr	r3, [r4, #0]
 800cc84:	4283      	cmp	r3, r0
 800cc86:	d824      	bhi.n	800ccd2 <RegionCommonIdentifyChannels+0x82>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800cc8c:	69e3      	ldr	r3, [r4, #28]
 800cc8e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800cc92:	781f      	ldrb	r7, [r3, #0]
 800cc94:	69a3      	ldr	r3, [r4, #24]
 800cc96:	9303      	str	r3, [sp, #12]
 800cc98:	ab01      	add	r3, sp, #4
 800cc9a:	f104 020c 	add.w	r2, r4, #12
 800cc9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cca2:	e883 0003 	stmia.w	r3, {r0, r1}
 800cca6:	7d23      	ldrb	r3, [r4, #20]
 800cca8:	9300      	str	r3, [sp, #0]
 800ccaa:	7a23      	ldrb	r3, [r4, #8]
 800ccac:	7a62      	ldrb	r2, [r4, #9]
 800ccae:	4661      	mov	r1, ip
 800ccb0:	4638      	mov	r0, r7
 800ccb2:	f7ff fd61 	bl	800c778 <RegionCommonUpdateBandTimeOff>
 800ccb6:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800ccba:	4643      	mov	r3, r8
 800ccbc:	462a      	mov	r2, r5
 800ccbe:	4631      	mov	r1, r6
 800ccc0:	69e0      	ldr	r0, [r4, #28]
 800ccc2:	f7ff ff50 	bl	800cb66 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800ccc6:	782b      	ldrb	r3, [r5, #0]
 800ccc8:	b11b      	cbz	r3, 800ccd2 <RegionCommonIdentifyChannels+0x82>
    {
        *nextTxDelay = 0;
 800ccca:	2000      	movs	r0, #0
 800cccc:	f8c9 0000 	str.w	r0, [r9]
        return LORAMAC_STATUS_OK;
 800ccd0:	e005      	b.n	800ccde <RegionCommonIdentifyChannels+0x8e>
    }
    else if( *nbRestrictedChannels > 0 )
 800ccd2:	f898 3000 	ldrb.w	r3, [r8]
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	bf14      	ite	ne
 800ccda:	200b      	movne	r0, #11
 800ccdc:	200c      	moveq	r0, #12
    }
}
 800ccde:	b005      	add	sp, #20
 800cce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cce4 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800cce4:	b570      	push	{r4, r5, r6, lr}
 800cce6:	b082      	sub	sp, #8
 800cce8:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800ccea:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800ccee:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800ccf2:	42a6      	cmp	r6, r4
 800ccf4:	d010      	beq.n	800cd18 <RegionCommonGetNextLowerTxDr+0x34>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800ccf6:	3c01      	subs	r4, #1
 800ccf8:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800ccfa:	42a6      	cmp	r6, r4
 800ccfc:	d00c      	beq.n	800cd18 <RegionCommonGetNextLowerTxDr+0x34>
 800ccfe:	68ab      	ldr	r3, [r5, #8]
 800cd00:	9301      	str	r3, [sp, #4]
 800cd02:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800cd06:	9300      	str	r3, [sp, #0]
 800cd08:	4633      	mov	r3, r6
 800cd0a:	4622      	mov	r2, r4
 800cd0c:	6869      	ldr	r1, [r5, #4]
 800cd0e:	78e8      	ldrb	r0, [r5, #3]
 800cd10:	f7ff fc76 	bl	800c600 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800cd14:	2800      	cmp	r0, #0
 800cd16:	d0ee      	beq.n	800ccf6 <RegionCommonGetNextLowerTxDr+0x12>

        return drLocal;
    }
}
 800cd18:	4620      	mov	r0, r4
 800cd1a:	b002      	add	sp, #8
 800cd1c:	bd70      	pop	{r4, r5, r6, pc}

0800cd1e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800cd1e:	4288      	cmp	r0, r1
 800cd20:	bfb8      	it	lt
 800cd22:	4608      	movlt	r0, r1
 800cd24:	4770      	bx	lr
	...

0800cd28 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800cd28:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800cd2c:	4b05      	ldr	r3, [pc, #20]	; (800cd44 <RegionCommonGetBandwidth+0x1c>)
 800cd2e:	4298      	cmp	r0, r3
 800cd30:	d005      	beq.n	800cd3e <RegionCommonGetBandwidth+0x16>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800cd32:	4b05      	ldr	r3, [pc, #20]	; (800cd48 <RegionCommonGetBandwidth+0x20>)
 800cd34:	4298      	cmp	r0, r3
 800cd36:	bf0c      	ite	eq
 800cd38:	2002      	moveq	r0, #2
 800cd3a:	2000      	movne	r0, #0
 800cd3c:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800cd3e:	2001      	movs	r0, #1
    }
}
 800cd40:	4770      	bx	lr
 800cd42:	bf00      	nop
 800cd44:	0003d090 	.word	0x0003d090
 800cd48:	0007a120 	.word	0x0007a120

0800cd4c <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800cd4c:	b500      	push	{lr}
 800cd4e:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800cd50:	2805      	cmp	r0, #5
 800cd52:	d80e      	bhi.n	800cd72 <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800cd54:	9202      	str	r2, [sp, #8]
 800cd56:	9101      	str	r1, [sp, #4]
 800cd58:	4b0a      	ldr	r3, [pc, #40]	; (800cd84 <RegionCommonRxConfigPrint+0x38>)
 800cd5a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800cd5e:	9300      	str	r3, [sp, #0]
 800cd60:	4b09      	ldr	r3, [pc, #36]	; (800cd88 <RegionCommonRxConfigPrint+0x3c>)
 800cd62:	2201      	movs	r2, #1
 800cd64:	2100      	movs	r1, #0
 800cd66:	2002      	movs	r0, #2
 800cd68:	f003 fde4 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800cd6c:	b005      	add	sp, #20
 800cd6e:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800cd72:	9201      	str	r2, [sp, #4]
 800cd74:	9100      	str	r1, [sp, #0]
 800cd76:	4b05      	ldr	r3, [pc, #20]	; (800cd8c <RegionCommonRxConfigPrint+0x40>)
 800cd78:	2201      	movs	r2, #1
 800cd7a:	2100      	movs	r1, #0
 800cd7c:	2002      	movs	r0, #2
 800cd7e:	f003 fdd9 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
}
 800cd82:	e7f3      	b.n	800cd6c <RegionCommonRxConfigPrint+0x20>
 800cd84:	080114c4 	.word	0x080114c4
 800cd88:	0801144c 	.word	0x0801144c
 800cd8c:	0801146c 	.word	0x0801146c

0800cd90 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800cd90:	b500      	push	{lr}
 800cd92:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800cd94:	9101      	str	r1, [sp, #4]
 800cd96:	9000      	str	r0, [sp, #0]
 800cd98:	4b04      	ldr	r3, [pc, #16]	; (800cdac <RegionCommonTxConfigPrint+0x1c>)
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	2100      	movs	r1, #0
 800cd9e:	2002      	movs	r0, #2
 800cda0:	f003 fdc8 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
}
 800cda4:	b003      	add	sp, #12
 800cda6:	f85d fb04 	ldr.w	pc, [sp], #4
 800cdaa:	bf00      	nop
 800cdac:	08011488 	.word	0x08011488

0800cdb0 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800cdb0:	b538      	push	{r3, r4, r5, lr}
 800cdb2:	4604      	mov	r4, r0
 800cdb4:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800cdb6:	4b1a      	ldr	r3, [pc, #104]	; (800ce20 <VerifyRfFreq+0x70>)
 800cdb8:	6a1b      	ldr	r3, [r3, #32]
 800cdba:	4798      	blx	r3
 800cdbc:	b130      	cbz	r0, 800cdcc <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800cdbe:	4b19      	ldr	r3, [pc, #100]	; (800ce24 <VerifyRfFreq+0x74>)
 800cdc0:	4423      	add	r3, r4
 800cdc2:	4a19      	ldr	r2, [pc, #100]	; (800ce28 <VerifyRfFreq+0x78>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d802      	bhi.n	800cdce <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800cdc8:	2302      	movs	r3, #2
 800cdca:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800cdcc:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800cdce:	4b17      	ldr	r3, [pc, #92]	; (800ce2c <VerifyRfFreq+0x7c>)
 800cdd0:	4423      	add	r3, r4
 800cdd2:	4a17      	ldr	r2, [pc, #92]	; (800ce30 <VerifyRfFreq+0x80>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d802      	bhi.n	800cdde <VerifyRfFreq+0x2e>
        *band = 0;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	702b      	strb	r3, [r5, #0]
 800cddc:	e7f6      	b.n	800cdcc <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800cdde:	4b15      	ldr	r3, [pc, #84]	; (800ce34 <VerifyRfFreq+0x84>)
 800cde0:	4423      	add	r3, r4
 800cde2:	4a15      	ldr	r2, [pc, #84]	; (800ce38 <VerifyRfFreq+0x88>)
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d802      	bhi.n	800cdee <VerifyRfFreq+0x3e>
        *band = 1;
 800cde8:	2301      	movs	r3, #1
 800cdea:	702b      	strb	r3, [r5, #0]
 800cdec:	e7ee      	b.n	800cdcc <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800cdee:	4b13      	ldr	r3, [pc, #76]	; (800ce3c <VerifyRfFreq+0x8c>)
 800cdf0:	4423      	add	r3, r4
 800cdf2:	4a13      	ldr	r2, [pc, #76]	; (800ce40 <VerifyRfFreq+0x90>)
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d802      	bhi.n	800cdfe <VerifyRfFreq+0x4e>
        *band = 5;
 800cdf8:	2305      	movs	r3, #5
 800cdfa:	702b      	strb	r3, [r5, #0]
 800cdfc:	e7e6      	b.n	800cdcc <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800cdfe:	4b11      	ldr	r3, [pc, #68]	; (800ce44 <VerifyRfFreq+0x94>)
 800ce00:	4423      	add	r3, r4
 800ce02:	4a11      	ldr	r2, [pc, #68]	; (800ce48 <VerifyRfFreq+0x98>)
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d802      	bhi.n	800ce0e <VerifyRfFreq+0x5e>
        *band = 3;
 800ce08:	2303      	movs	r3, #3
 800ce0a:	702b      	strb	r3, [r5, #0]
 800ce0c:	e7de      	b.n	800cdcc <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800ce0e:	4b0f      	ldr	r3, [pc, #60]	; (800ce4c <VerifyRfFreq+0x9c>)
 800ce10:	4423      	add	r3, r4
 800ce12:	4a0f      	ldr	r2, [pc, #60]	; (800ce50 <VerifyRfFreq+0xa0>)
 800ce14:	4293      	cmp	r3, r2
        *band = 4;
 800ce16:	bf9a      	itte	ls
 800ce18:	2304      	movls	r3, #4
 800ce1a:	702b      	strbls	r3, [r5, #0]
        return false;
 800ce1c:	2000      	movhi	r0, #0
 800ce1e:	e7d5      	b.n	800cdcc <VerifyRfFreq+0x1c>
 800ce20:	08011584 	.word	0x08011584
 800ce24:	cc8faa40 	.word	0xcc8faa40
 800ce28:	001e847f 	.word	0x001e847f
 800ce2c:	cc7125c0 	.word	0xcc7125c0
 800ce30:	002dc6c0 	.word	0x002dc6c0
 800ce34:	cc435eff 	.word	0xcc435eff
 800ce38:	000927bf 	.word	0x000927bf
 800ce3c:	cc38b0a0 	.word	0xcc38b0a0
 800ce40:	0007a120 	.word	0x0007a120
 800ce44:	cc2e0240 	.word	0xcc2e0240
 800ce48:	0003d090 	.word	0x0003d090
 800ce4c:	cc296e60 	.word	0xcc296e60
 800ce50:	000493e0 	.word	0x000493e0

0800ce54 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800ce54:	b570      	push	{r4, r5, r6, lr}
 800ce56:	b084      	sub	sp, #16
 800ce58:	4605      	mov	r5, r0
 800ce5a:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800ce5c:	4b13      	ldr	r3, [pc, #76]	; (800ceac <GetTimeOnAir+0x58>)
 800ce5e:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800ce60:	4913      	ldr	r1, [pc, #76]	; (800ceb0 <GetTimeOnAir+0x5c>)
 800ce62:	f7ff ff61 	bl	800cd28 <RegionCommonGetBandwidth>
 800ce66:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800ce68:	2d07      	cmp	r5, #7
 800ce6a:	d00e      	beq.n	800ce8a <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800ce6c:	2001      	movs	r0, #1
 800ce6e:	9003      	str	r0, [sp, #12]
 800ce70:	b2e4      	uxtb	r4, r4
 800ce72:	9402      	str	r4, [sp, #8]
 800ce74:	2300      	movs	r3, #0
 800ce76:	9301      	str	r3, [sp, #4]
 800ce78:	2308      	movs	r3, #8
 800ce7a:	9300      	str	r3, [sp, #0]
 800ce7c:	4b0d      	ldr	r3, [pc, #52]	; (800ceb4 <GetTimeOnAir+0x60>)
 800ce7e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ce80:	4603      	mov	r3, r0
 800ce82:	4632      	mov	r2, r6
 800ce84:	47a0      	blx	r4
    }
    return timeOnAir;
}
 800ce86:	b004      	add	sp, #16
 800ce88:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	9303      	str	r3, [sp, #12]
 800ce8e:	b2e4      	uxtb	r4, r4
 800ce90:	9402      	str	r4, [sp, #8]
 800ce92:	2000      	movs	r0, #0
 800ce94:	9001      	str	r0, [sp, #4]
 800ce96:	2305      	movs	r3, #5
 800ce98:	9300      	str	r3, [sp, #0]
 800ce9a:	4b06      	ldr	r3, [pc, #24]	; (800ceb4 <GetTimeOnAir+0x60>)
 800ce9c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ce9e:	4603      	mov	r3, r0
 800cea0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cea4:	fb06 f202 	mul.w	r2, r6, r2
 800cea8:	47a0      	blx	r4
 800ceaa:	e7ec      	b.n	800ce86 <GetTimeOnAir+0x32>
 800ceac:	080114fc 	.word	0x080114fc
 800ceb0:	080114dc 	.word	0x080114dc
 800ceb4:	08011584 	.word	0x08011584

0800ceb8 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800ceb8:	b500      	push	{lr}
 800ceba:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800cebc:	2300      	movs	r3, #0
 800cebe:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800cec0:	7803      	ldrb	r3, [r0, #0]
 800cec2:	3b0b      	subs	r3, #11
 800cec4:	2b2e      	cmp	r3, #46	; 0x2e
 800cec6:	d82f      	bhi.n	800cf28 <RegionEU868GetPhyParam+0x70>
 800cec8:	e8df f003 	tbb	[pc, r3]
 800cecc:	3e383532 	.word	0x3e383532
 800ced0:	4f4b4744 	.word	0x4f4b4744
 800ced4:	5f5b5753 	.word	0x5f5b5753
 800ced8:	6b2e682e 	.word	0x6b2e682e
 800cedc:	2e7a7771 	.word	0x2e7a7771
 800cee0:	18827e2e 	.word	0x18827e2e
 800cee4:	2e2e2e2e 	.word	0x2e2e2e2e
 800cee8:	2e2e2e2e 	.word	0x2e2e2e2e
 800ceec:	2e2e2e2e 	.word	0x2e2e2e2e
 800cef0:	8f88852e 	.word	0x8f88852e
 800cef4:	95922e2e 	.word	0x95922e2e
 800cef8:	982e      	.short	0x982e
 800cefa:	9e          	.byte	0x9e
 800cefb:	00          	.byte	0x00
            phyParam.Value = EU868_DEFAULT_DATARATE;
            break;
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800cefc:	7843      	ldrb	r3, [r0, #1]
 800cefe:	f88d 3004 	strb.w	r3, [sp, #4]
 800cf02:	2307      	movs	r3, #7
 800cf04:	f88d 3005 	strb.w	r3, [sp, #5]
 800cf08:	2300      	movs	r3, #0
 800cf0a:	f88d 3006 	strb.w	r3, [sp, #6]
 800cf0e:	2310      	movs	r3, #16
 800cf10:	f88d 3007 	strb.w	r3, [sp, #7]
            {
                .CurrentDr = getPhy->Datarate,
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800cf14:	4b40      	ldr	r3, [pc, #256]	; (800d018 <RegionEU868GetPhyParam+0x160>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800cf1c:	9202      	str	r2, [sp, #8]
 800cf1e:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800cf20:	a801      	add	r0, sp, #4
 800cf22:	f7ff fedf 	bl	800cce4 <RegionCommonGetNextLowerTxDr>
 800cf26:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
}
 800cf28:	9804      	ldr	r0, [sp, #16]
 800cf2a:	b007      	add	sp, #28
 800cf2c:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800cf30:	2340      	movs	r3, #64	; 0x40
 800cf32:	9304      	str	r3, [sp, #16]
            break;
 800cf34:	e7f8      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800cf36:	2320      	movs	r3, #32
 800cf38:	9304      	str	r3, [sp, #16]
            break;
 800cf3a:	e7f5      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800cf3c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cf40:	4a36      	ldr	r2, [pc, #216]	; (800d01c <RegionEU868GetPhyParam+0x164>)
 800cf42:	5cd3      	ldrb	r3, [r2, r3]
 800cf44:	9304      	str	r3, [sp, #16]
            break;
 800cf46:	e7ef      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800cf48:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cf4c:	4a34      	ldr	r2, [pc, #208]	; (800d020 <RegionEU868GetPhyParam+0x168>)
 800cf4e:	5cd3      	ldrb	r3, [r2, r3]
 800cf50:	9304      	str	r3, [sp, #16]
            break;
 800cf52:	e7e9      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800cf54:	2301      	movs	r3, #1
 800cf56:	9304      	str	r3, [sp, #16]
            break;
 800cf58:	e7e6      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800cf5a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800cf5e:	9304      	str	r3, [sp, #16]
            break;
 800cf60:	e7e2      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800cf62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cf66:	9304      	str	r3, [sp, #16]
            break;
 800cf68:	e7de      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800cf6a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800cf6e:	9304      	str	r3, [sp, #16]
            break;
 800cf70:	e7da      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800cf72:	f241 3388 	movw	r3, #5000	; 0x1388
 800cf76:	9304      	str	r3, [sp, #16]
            break;
 800cf78:	e7d6      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800cf7a:	f241 7370 	movw	r3, #6000	; 0x1770
 800cf7e:	9304      	str	r3, [sp, #16]
            break;
 800cf80:	e7d2      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800cf82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cf86:	9304      	str	r3, [sp, #16]
            break;
 800cf88:	e7ce      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800cf8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800cf8e:	4825      	ldr	r0, [pc, #148]	; (800d024 <RegionEU868GetPhyParam+0x16c>)
 800cf90:	f000 fd52 	bl	800da38 <randr>
 800cf94:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800cf98:	9004      	str	r0, [sp, #16]
            break;
 800cf9a:	e7c5      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800cf9c:	4b22      	ldr	r3, [pc, #136]	; (800d028 <RegionEU868GetPhyParam+0x170>)
 800cf9e:	9304      	str	r3, [sp, #16]
            break;
 800cfa0:	e7c2      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800cfa2:	4b1d      	ldr	r3, [pc, #116]	; (800d018 <RegionEU868GetPhyParam+0x160>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800cfaa:	9304      	str	r3, [sp, #16]
            break;
 800cfac:	e7bc      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800cfae:	4b1a      	ldr	r3, [pc, #104]	; (800d018 <RegionEU868GetPhyParam+0x160>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800cfb6:	9304      	str	r3, [sp, #16]
            break;
 800cfb8:	e7b6      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800cfba:	2310      	movs	r3, #16
 800cfbc:	9304      	str	r3, [sp, #16]
            break;
 800cfbe:	e7b3      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800cfc0:	4b15      	ldr	r3, [pc, #84]	; (800d018 <RegionEU868GetPhyParam+0x160>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	9304      	str	r3, [sp, #16]
            break;
 800cfc6:	e7af      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800cfc8:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800cfcc:	9304      	str	r3, [sp, #16]
            break;
 800cfce:	e7ab      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800cfd0:	4b16      	ldr	r3, [pc, #88]	; (800d02c <RegionEU868GetPhyParam+0x174>)
 800cfd2:	9304      	str	r3, [sp, #16]
            break;
 800cfd4:	e7a8      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800cfd6:	4b14      	ldr	r3, [pc, #80]	; (800d028 <RegionEU868GetPhyParam+0x170>)
 800cfd8:	9304      	str	r3, [sp, #16]
            break;
 800cfda:	e7a5      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800cfdc:	2311      	movs	r3, #17
 800cfde:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800cfe2:	2302      	movs	r3, #2
 800cfe4:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800cfe8:	e79e      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800cfea:	2303      	movs	r3, #3
 800cfec:	9304      	str	r3, [sp, #16]
            break;
 800cfee:	e79b      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800cff0:	4b0d      	ldr	r3, [pc, #52]	; (800d028 <RegionEU868GetPhyParam+0x170>)
 800cff2:	9304      	str	r3, [sp, #16]
            break;
 800cff4:	e798      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800cff6:	2303      	movs	r3, #3
 800cff8:	9304      	str	r3, [sp, #16]
            break;
 800cffa:	e795      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800cffc:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d000:	4a0b      	ldr	r2, [pc, #44]	; (800d030 <RegionEU868GetPhyParam+0x178>)
 800d002:	5cd3      	ldrb	r3, [r2, r3]
 800d004:	9304      	str	r3, [sp, #16]
            break;
 800d006:	e78f      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800d008:	490a      	ldr	r1, [pc, #40]	; (800d034 <RegionEU868GetPhyParam+0x17c>)
 800d00a:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800d00e:	f7ff fe8b 	bl	800cd28 <RegionCommonGetBandwidth>
 800d012:	9004      	str	r0, [sp, #16]
            break;
 800d014:	e788      	b.n	800cf28 <RegionEU868GetPhyParam+0x70>
 800d016:	bf00      	nop
 800d018:	20002044 	.word	0x20002044
 800d01c:	08011504 	.word	0x08011504
 800d020:	0801150c 	.word	0x0801150c
 800d024:	fffffc18 	.word	0xfffffc18
 800d028:	33d3e608 	.word	0x33d3e608
 800d02c:	4009999a 	.word	0x4009999a
 800d030:	080114fc 	.word	0x080114fc
 800d034:	080114dc 	.word	0x080114dc

0800d038 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800d038:	b510      	push	{r4, lr}
 800d03a:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800d03c:	4b0b      	ldr	r3, [pc, #44]	; (800d06c <RegionEU868SetBandTxDone+0x34>)
 800d03e:	681a      	ldr	r2, [r3, #0]
 800d040:	7803      	ldrb	r3, [r0, #0]
 800d042:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d046:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d04a:	7a5b      	ldrb	r3, [r3, #9]
 800d04c:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800d050:	4b07      	ldr	r3, [pc, #28]	; (800d070 <RegionEU868SetBandTxDone+0x38>)
 800d052:	681c      	ldr	r4, [r3, #0]
 800d054:	6903      	ldr	r3, [r0, #16]
 800d056:	9300      	str	r3, [sp, #0]
 800d058:	68c3      	ldr	r3, [r0, #12]
 800d05a:	7842      	ldrb	r2, [r0, #1]
 800d05c:	6881      	ldr	r1, [r0, #8]
 800d05e:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800d062:	f7ff fb60 	bl	800c726 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 800d066:	b002      	add	sp, #8
 800d068:	bd10      	pop	{r4, pc}
 800d06a:	bf00      	nop
 800d06c:	20002044 	.word	0x20002044
 800d070:	20002040 	.word	0x20002040

0800d074 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800d074:	b510      	push	{r4, lr}
 800d076:	b0a4      	sub	sp, #144	; 0x90
 800d078:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800d07a:	2290      	movs	r2, #144	; 0x90
 800d07c:	2100      	movs	r1, #0
 800d07e:	4668      	mov	r0, sp
 800d080:	f003 fd40 	bl	8010b04 <memset>
 800d084:	2364      	movs	r3, #100	; 0x64
 800d086:	f8ad 3000 	strh.w	r3, [sp]
 800d08a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d08e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d092:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800d096:	210a      	movs	r1, #10
 800d098:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 800d09c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800d0a0:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800d0a4:	7a23      	ldrb	r3, [r4, #8]
 800d0a6:	2b01      	cmp	r3, #1
 800d0a8:	d031      	beq.n	800d10e <RegionEU868InitDefaults+0x9a>
 800d0aa:	2b02      	cmp	r3, #2
 800d0ac:	d03d      	beq.n	800d12a <RegionEU868InitDefaults+0xb6>
 800d0ae:	b10b      	cbz	r3, 800d0b4 <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800d0b0:	b024      	add	sp, #144	; 0x90
 800d0b2:	bd10      	pop	{r4, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800d0b4:	6820      	ldr	r0, [r4, #0]
 800d0b6:	2800      	cmp	r0, #0
 800d0b8:	d0fa      	beq.n	800d0b0 <RegionEU868InitDefaults+0x3c>
 800d0ba:	6863      	ldr	r3, [r4, #4]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d0f7      	beq.n	800d0b0 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800d0c0:	4a1f      	ldr	r2, [pc, #124]	; (800d140 <RegionEU868InitDefaults+0xcc>)
 800d0c2:	6010      	str	r0, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800d0c4:	4c1f      	ldr	r4, [pc, #124]	; (800d144 <RegionEU868InitDefaults+0xd0>)
 800d0c6:	6023      	str	r3, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800d0c8:	2290      	movs	r2, #144	; 0x90
 800d0ca:	4669      	mov	r1, sp
 800d0cc:	f000 fcd6 	bl	800da7c <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800d0d0:	6824      	ldr	r4, [r4, #0]
 800d0d2:	4b1d      	ldr	r3, [pc, #116]	; (800d148 <RegionEU868InitDefaults+0xd4>)
 800d0d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d0d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800d0dc:	f104 0c0c 	add.w	ip, r4, #12
 800d0e0:	f103 020c 	add.w	r2, r3, #12
 800d0e4:	ca07      	ldmia	r2, {r0, r1, r2}
 800d0e6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800d0ea:	f104 0c18 	add.w	ip, r4, #24
 800d0ee:	3318      	adds	r3, #24
 800d0f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d0f4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800d0f8:	2307      	movs	r3, #7
 800d0fa:	f8a4 348c 	strh.w	r3, [r4, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d0fe:	2201      	movs	r2, #1
 800d100:	f204 418c 	addw	r1, r4, #1164	; 0x48c
 800d104:	f504 6090 	add.w	r0, r4, #1152	; 0x480
 800d108:	f7ff fafd 	bl	800c706 <RegionCommonChanMaskCopy>
            break;
 800d10c:	e7d0      	b.n	800d0b0 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800d10e:	4b0d      	ldr	r3, [pc, #52]	; (800d144 <RegionEU868InitDefaults+0xd0>)
 800d110:	6818      	ldr	r0, [r3, #0]
 800d112:	2300      	movs	r3, #0
 800d114:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800d116:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800d118:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d11a:	2201      	movs	r2, #1
 800d11c:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800d120:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800d124:	f7ff faef 	bl	800c706 <RegionCommonChanMaskCopy>
            break;
 800d128:	e7c2      	b.n	800d0b0 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800d12a:	4b06      	ldr	r3, [pc, #24]	; (800d144 <RegionEU868InitDefaults+0xd0>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 800d132:	f8b3 148c 	ldrh.w	r1, [r3, #1164]	; 0x48c
 800d136:	430a      	orrs	r2, r1
 800d138:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 800d13c:	e7b8      	b.n	800d0b0 <RegionEU868InitDefaults+0x3c>
 800d13e:	bf00      	nop
 800d140:	20002040 	.word	0x20002040
 800d144:	20002044 	.word	0x20002044
 800d148:	08010d0c 	.word	0x08010d0c

0800d14c <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800d14c:	b500      	push	{lr}
 800d14e:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800d150:	290f      	cmp	r1, #15
 800d152:	d809      	bhi.n	800d168 <RegionEU868Verify+0x1c>
 800d154:	e8df f001 	tbb	[pc, r1]
 800d158:	0808080c 	.word	0x0808080c
 800d15c:	291f1508 	.word	0x291f1508
 800d160:	08333308 	.word	0x08333308
 800d164:	3d080808 	.word	0x3d080808
 800d168:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800d16a:	b003      	add	sp, #12
 800d16c:	f85d fb04 	ldr.w	pc, [sp], #4
            uint8_t band = 0;
 800d170:	2300      	movs	r3, #0
 800d172:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800d176:	f10d 0107 	add.w	r1, sp, #7
 800d17a:	6800      	ldr	r0, [r0, #0]
 800d17c:	f7ff fe18 	bl	800cdb0 <VerifyRfFreq>
 800d180:	e7f3      	b.n	800d16a <RegionEU868Verify+0x1e>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800d182:	2207      	movs	r2, #7
 800d184:	2100      	movs	r1, #0
 800d186:	f990 0000 	ldrsb.w	r0, [r0]
 800d18a:	f7ff fa70 	bl	800c66e <RegionCommonValueInRange>
 800d18e:	3800      	subs	r0, #0
 800d190:	bf18      	it	ne
 800d192:	2001      	movne	r0, #1
 800d194:	e7e9      	b.n	800d16a <RegionEU868Verify+0x1e>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800d196:	2205      	movs	r2, #5
 800d198:	2100      	movs	r1, #0
 800d19a:	f990 0000 	ldrsb.w	r0, [r0]
 800d19e:	f7ff fa66 	bl	800c66e <RegionCommonValueInRange>
 800d1a2:	3800      	subs	r0, #0
 800d1a4:	bf18      	it	ne
 800d1a6:	2001      	movne	r0, #1
 800d1a8:	e7df      	b.n	800d16a <RegionEU868Verify+0x1e>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800d1aa:	2207      	movs	r2, #7
 800d1ac:	2100      	movs	r1, #0
 800d1ae:	f990 0000 	ldrsb.w	r0, [r0]
 800d1b2:	f7ff fa5c 	bl	800c66e <RegionCommonValueInRange>
 800d1b6:	3800      	subs	r0, #0
 800d1b8:	bf18      	it	ne
 800d1ba:	2001      	movne	r0, #1
 800d1bc:	e7d5      	b.n	800d16a <RegionEU868Verify+0x1e>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800d1be:	2207      	movs	r2, #7
 800d1c0:	2100      	movs	r1, #0
 800d1c2:	f990 0000 	ldrsb.w	r0, [r0]
 800d1c6:	f7ff fa52 	bl	800c66e <RegionCommonValueInRange>
 800d1ca:	3800      	subs	r0, #0
 800d1cc:	bf18      	it	ne
 800d1ce:	2001      	movne	r0, #1
 800d1d0:	e7cb      	b.n	800d16a <RegionEU868Verify+0x1e>
            return EU868_DUTY_CYCLE_ENABLED;
 800d1d2:	2001      	movs	r0, #1
 800d1d4:	e7c9      	b.n	800d16a <RegionEU868Verify+0x1e>
	...

0800d1d8 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800d1d8:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800d1da:	7903      	ldrb	r3, [r0, #4]
 800d1dc:	b11b      	cbz	r3, 800d1e6 <RegionEU868ChanMaskSet+0xe>
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	d00b      	beq.n	800d1fa <RegionEU868ChanMaskSet+0x22>
 800d1e2:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800d1e4:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800d1e6:	4b0a      	ldr	r3, [pc, #40]	; (800d210 <RegionEU868ChanMaskSet+0x38>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	6801      	ldr	r1, [r0, #0]
 800d1ee:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800d1f2:	f7ff fa88 	bl	800c706 <RegionCommonChanMaskCopy>
    return true;
 800d1f6:	2001      	movs	r0, #1
            break;
 800d1f8:	e7f4      	b.n	800d1e4 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800d1fa:	4b05      	ldr	r3, [pc, #20]	; (800d210 <RegionEU868ChanMaskSet+0x38>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	2201      	movs	r2, #1
 800d200:	6801      	ldr	r1, [r0, #0]
 800d202:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 800d206:	f7ff fa7e 	bl	800c706 <RegionCommonChanMaskCopy>
    return true;
 800d20a:	2001      	movs	r0, #1
            break;
 800d20c:	e7ea      	b.n	800d1e4 <RegionEU868ChanMaskSet+0xc>
 800d20e:	bf00      	nop
 800d210:	20002044 	.word	0x20002044

0800d214 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800d214:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d216:	b083      	sub	sp, #12
 800d218:	460e      	mov	r6, r1
 800d21a:	4617      	mov	r7, r2
 800d21c:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800d21e:	2807      	cmp	r0, #7
 800d220:	bfa8      	it	ge
 800d222:	2007      	movge	r0, #7
 800d224:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800d226:	4912      	ldr	r1, [pc, #72]	; (800d270 <RegionEU868ComputeRxWindowParameters+0x5c>)
 800d228:	f7ff fd7e 	bl	800cd28 <RegionCommonGetBandwidth>
 800d22c:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800d22e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d232:	2b07      	cmp	r3, #7
 800d234:	d017      	beq.n	800d266 <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800d236:	4a0e      	ldr	r2, [pc, #56]	; (800d270 <RegionEU868ComputeRxWindowParameters+0x5c>)
 800d238:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d23c:	4a0d      	ldr	r2, [pc, #52]	; (800d274 <RegionEU868ComputeRxWindowParameters+0x60>)
 800d23e:	5cd0      	ldrb	r0, [r2, r3]
 800d240:	f7ff fc3c 	bl	800cabc <RegionCommonComputeSymbolTimeLoRa>
 800d244:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800d246:	4b0c      	ldr	r3, [pc, #48]	; (800d278 <RegionEU868ComputeRxWindowParameters+0x64>)
 800d248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d24a:	4798      	blx	r3
 800d24c:	4603      	mov	r3, r0
 800d24e:	f104 020c 	add.w	r2, r4, #12
 800d252:	9201      	str	r2, [sp, #4]
 800d254:	3408      	adds	r4, #8
 800d256:	9400      	str	r4, [sp, #0]
 800d258:	463a      	mov	r2, r7
 800d25a:	4631      	mov	r1, r6
 800d25c:	4628      	mov	r0, r5
 800d25e:	f7ff fc3b 	bl	800cad8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800d262:	b003      	add	sp, #12
 800d264:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800d266:	2032      	movs	r0, #50	; 0x32
 800d268:	f7ff fc30 	bl	800cacc <RegionCommonComputeSymbolTimeFsk>
 800d26c:	4605      	mov	r5, r0
 800d26e:	e7ea      	b.n	800d246 <RegionEU868ComputeRxWindowParameters+0x32>
 800d270:	080114dc 	.word	0x080114dc
 800d274:	080114fc 	.word	0x080114fc
 800d278:	08011584 	.word	0x08011584

0800d27c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800d27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d280:	b08a      	sub	sp, #40	; 0x28
 800d282:	4604      	mov	r4, r0
 800d284:	460e      	mov	r6, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800d286:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800d28a:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800d28c:	4b36      	ldr	r3, [pc, #216]	; (800d368 <RegionEU868RxConfig+0xec>)
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	4798      	blx	r3
 800d292:	2800      	cmp	r0, #0
 800d294:	d165      	bne.n	800d362 <RegionEU868RxConfig+0xe6>
 800d296:	4680      	mov	r8, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800d298:	7ce3      	ldrb	r3, [r4, #19]
 800d29a:	b963      	cbnz	r3, 800d2b6 <RegionEU868RxConfig+0x3a>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800d29c:	7823      	ldrb	r3, [r4, #0]
 800d29e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d2a2:	4a32      	ldr	r2, [pc, #200]	; (800d36c <RegionEU868RxConfig+0xf0>)
 800d2a4:	6812      	ldr	r2, [r2, #0]
 800d2a6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800d2aa:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800d2ae:	684b      	ldr	r3, [r1, #4]
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	bf18      	it	ne
 800d2b4:	461f      	movne	r7, r3
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800d2b6:	4b2e      	ldr	r3, [pc, #184]	; (800d370 <RegionEU868RxConfig+0xf4>)
 800d2b8:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800d2bc:	4b2a      	ldr	r3, [pc, #168]	; (800d368 <RegionEU868RxConfig+0xec>)
 800d2be:	68db      	ldr	r3, [r3, #12]
 800d2c0:	4638      	mov	r0, r7
 800d2c2:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800d2c4:	2d07      	cmp	r5, #7
 800d2c6:	d02d      	beq.n	800d324 <RegionEU868RxConfig+0xa8>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800d2c8:	7ca3      	ldrb	r3, [r4, #18]
 800d2ca:	9309      	str	r3, [sp, #36]	; 0x24
 800d2cc:	f04f 0801 	mov.w	r8, #1
 800d2d0:	f8cd 8020 	str.w	r8, [sp, #32]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	9207      	str	r2, [sp, #28]
 800d2d8:	9206      	str	r2, [sp, #24]
 800d2da:	9205      	str	r2, [sp, #20]
 800d2dc:	9204      	str	r2, [sp, #16]
 800d2de:	9203      	str	r2, [sp, #12]
 800d2e0:	8923      	ldrh	r3, [r4, #8]
 800d2e2:	9302      	str	r3, [sp, #8]
 800d2e4:	2308      	movs	r3, #8
 800d2e6:	9301      	str	r3, [sp, #4]
 800d2e8:	9200      	str	r2, [sp, #0]
 800d2ea:	4b1f      	ldr	r3, [pc, #124]	; (800d368 <RegionEU868RxConfig+0xec>)
 800d2ec:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800d2f0:	4643      	mov	r3, r8
 800d2f2:	464a      	mov	r2, r9
 800d2f4:	78a1      	ldrb	r1, [r4, #2]
 800d2f6:	4640      	mov	r0, r8
 800d2f8:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800d2fa:	7c63      	ldrb	r3, [r4, #17]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d02d      	beq.n	800d35c <RegionEU868RxConfig+0xe0>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800d300:	4b1c      	ldr	r3, [pc, #112]	; (800d374 <RegionEU868RxConfig+0xf8>)
 800d302:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800d304:	310d      	adds	r1, #13
 800d306:	4b18      	ldr	r3, [pc, #96]	; (800d368 <RegionEU868RxConfig+0xec>)
 800d308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d30a:	b2c9      	uxtb	r1, r1
 800d30c:	4640      	mov	r0, r8
 800d30e:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800d310:	462a      	mov	r2, r5
 800d312:	4639      	mov	r1, r7
 800d314:	7ce0      	ldrb	r0, [r4, #19]
 800d316:	f7ff fd19 	bl	800cd4c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800d31a:	7035      	strb	r5, [r6, #0]
    return true;
 800d31c:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800d31e:	b00a      	add	sp, #40	; 0x28
 800d320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800d324:	7ca3      	ldrb	r3, [r4, #18]
 800d326:	9309      	str	r3, [sp, #36]	; 0x24
 800d328:	2000      	movs	r0, #0
 800d32a:	9008      	str	r0, [sp, #32]
 800d32c:	9007      	str	r0, [sp, #28]
 800d32e:	9006      	str	r0, [sp, #24]
 800d330:	2301      	movs	r3, #1
 800d332:	9305      	str	r3, [sp, #20]
 800d334:	9004      	str	r0, [sp, #16]
 800d336:	9003      	str	r0, [sp, #12]
 800d338:	8923      	ldrh	r3, [r4, #8]
 800d33a:	9302      	str	r3, [sp, #8]
 800d33c:	2305      	movs	r3, #5
 800d33e:	9301      	str	r3, [sp, #4]
 800d340:	4b0d      	ldr	r3, [pc, #52]	; (800d378 <RegionEU868RxConfig+0xfc>)
 800d342:	9300      	str	r3, [sp, #0]
 800d344:	4b08      	ldr	r3, [pc, #32]	; (800d368 <RegionEU868RxConfig+0xec>)
 800d346:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800d34a:	4603      	mov	r3, r0
 800d34c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d350:	fb02 f209 	mul.w	r2, r2, r9
 800d354:	f24c 3150 	movw	r1, #50000	; 0xc350
 800d358:	47d0      	blx	sl
 800d35a:	e7ce      	b.n	800d2fa <RegionEU868RxConfig+0x7e>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800d35c:	4b07      	ldr	r3, [pc, #28]	; (800d37c <RegionEU868RxConfig+0x100>)
 800d35e:	5d59      	ldrb	r1, [r3, r5]
 800d360:	e7d0      	b.n	800d304 <RegionEU868RxConfig+0x88>
        return false;
 800d362:	2000      	movs	r0, #0
 800d364:	e7db      	b.n	800d31e <RegionEU868RxConfig+0xa2>
 800d366:	bf00      	nop
 800d368:	08011584 	.word	0x08011584
 800d36c:	20002044 	.word	0x20002044
 800d370:	080114fc 	.word	0x080114fc
 800d374:	0801150c 	.word	0x0801150c
 800d378:	00014585 	.word	0x00014585
 800d37c:	08011504 	.word	0x08011504

0800d380 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800d380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d384:	b08b      	sub	sp, #44	; 0x2c
 800d386:	4604      	mov	r4, r0
 800d388:	460f      	mov	r7, r1
 800d38a:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800d38c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d390:	4a3f      	ldr	r2, [pc, #252]	; (800d490 <RegionEU868TxConfig+0x110>)
 800d392:	f912 b003 	ldrsb.w	fp, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800d396:	4b3f      	ldr	r3, [pc, #252]	; (800d494 <RegionEU868TxConfig+0x114>)
 800d398:	6819      	ldr	r1, [r3, #0]
 800d39a:	4d3f      	ldr	r5, [pc, #252]	; (800d498 <RegionEU868TxConfig+0x118>)
 800d39c:	682b      	ldr	r3, [r5, #0]
 800d39e:	7802      	ldrb	r2, [r0, #0]
 800d3a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d3a4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d3a8:	7a53      	ldrb	r3, [r2, #9]
 800d3aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d3ae:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800d3b2:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800d3b6:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800d3ba:	f7ff fcb0 	bl	800cd1e <RegionCommonLimitTxPower>
 800d3be:	4606      	mov	r6, r0
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800d3c0:	4936      	ldr	r1, [pc, #216]	; (800d49c <RegionEU868TxConfig+0x11c>)
 800d3c2:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d3c6:	f7ff fcaf 	bl	800cd28 <RegionCommonGetBandwidth>
 800d3ca:	4682      	mov	sl, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800d3cc:	68a2      	ldr	r2, [r4, #8]
 800d3ce:	6861      	ldr	r1, [r4, #4]
 800d3d0:	4630      	mov	r0, r6
 800d3d2:	f7ff fbb3 	bl	800cb3c <RegionCommonComputeTxPower>
 800d3d6:	4681      	mov	r9, r0

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800d3d8:	6829      	ldr	r1, [r5, #0]
 800d3da:	7823      	ldrb	r3, [r4, #0]
 800d3dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d3e0:	4a2f      	ldr	r2, [pc, #188]	; (800d4a0 <RegionEU868TxConfig+0x120>)
 800d3e2:	68d2      	ldr	r2, [r2, #12]
 800d3e4:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800d3e8:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800d3ea:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d3ee:	2b07      	cmp	r3, #7
 800d3f0:	d031      	beq.n	800d456 <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800d3f2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800d3f6:	9308      	str	r3, [sp, #32]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	9207      	str	r2, [sp, #28]
 800d3fc:	9206      	str	r2, [sp, #24]
 800d3fe:	9205      	str	r2, [sp, #20]
 800d400:	2501      	movs	r5, #1
 800d402:	9504      	str	r5, [sp, #16]
 800d404:	9203      	str	r2, [sp, #12]
 800d406:	2308      	movs	r3, #8
 800d408:	9302      	str	r3, [sp, #8]
 800d40a:	9501      	str	r5, [sp, #4]
 800d40c:	f8cd b000 	str.w	fp, [sp]
 800d410:	4b23      	ldr	r3, [pc, #140]	; (800d4a0 <RegionEU868TxConfig+0x120>)
 800d412:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800d416:	4653      	mov	r3, sl
 800d418:	4649      	mov	r1, r9
 800d41a:	4628      	mov	r0, r5
 800d41c:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800d41e:	4b1e      	ldr	r3, [pc, #120]	; (800d498 <RegionEU868TxConfig+0x118>)
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	7823      	ldrb	r3, [r4, #0]
 800d424:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d428:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800d42c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d430:	f7ff fcae 	bl	800cd90 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800d434:	89a1      	ldrh	r1, [r4, #12]
 800d436:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d43a:	f7ff fd0b 	bl	800ce54 <GetTimeOnAir>
 800d43e:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800d442:	4b17      	ldr	r3, [pc, #92]	; (800d4a0 <RegionEU868TxConfig+0x120>)
 800d444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d446:	7b21      	ldrb	r1, [r4, #12]
 800d448:	4628      	mov	r0, r5
 800d44a:	4798      	blx	r3

    *txPower = txPowerLimited;
 800d44c:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800d44e:	2001      	movs	r0, #1
 800d450:	b00b      	add	sp, #44	; 0x2c
 800d452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800d456:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800d45a:	9308      	str	r3, [sp, #32]
 800d45c:	2500      	movs	r5, #0
 800d45e:	9507      	str	r5, [sp, #28]
 800d460:	9506      	str	r5, [sp, #24]
 800d462:	9505      	str	r5, [sp, #20]
 800d464:	2301      	movs	r3, #1
 800d466:	9304      	str	r3, [sp, #16]
 800d468:	9503      	str	r5, [sp, #12]
 800d46a:	2305      	movs	r3, #5
 800d46c:	9302      	str	r3, [sp, #8]
 800d46e:	9501      	str	r5, [sp, #4]
 800d470:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d474:	fb03 f30b 	mul.w	r3, r3, fp
 800d478:	9300      	str	r3, [sp, #0]
 800d47a:	4b09      	ldr	r3, [pc, #36]	; (800d4a0 <RegionEU868TxConfig+0x120>)
 800d47c:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800d480:	4653      	mov	r3, sl
 800d482:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800d486:	4649      	mov	r1, r9
 800d488:	4628      	mov	r0, r5
 800d48a:	47d8      	blx	fp
 800d48c:	e7c7      	b.n	800d41e <RegionEU868TxConfig+0x9e>
 800d48e:	bf00      	nop
 800d490:	080114fc 	.word	0x080114fc
 800d494:	20002040 	.word	0x20002040
 800d498:	20002044 	.word	0x20002044
 800d49c:	080114dc 	.word	0x080114dc
 800d4a0:	08011584 	.word	0x08011584

0800d4a4 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800d4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a8:	b08d      	sub	sp, #52	; 0x34
 800d4aa:	4605      	mov	r5, r0
 800d4ac:	4689      	mov	r9, r1
 800d4ae:	4690      	mov	r8, r2
 800d4b0:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	930a      	str	r3, [sp, #40]	; 0x28
 800d4b6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800d4ba:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d4be:	7a04      	ldrb	r4, [r0, #8]
 800d4c0:	2c00      	cmp	r4, #0
 800d4c2:	d049      	beq.n	800d558 <RegionEU868LinkAdrReq+0xb4>
    uint8_t bytesProcessed = 0;
 800d4c4:	461c      	mov	r4, r3
    uint8_t status = 0x07;
 800d4c6:	2607      	movs	r6, #7
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800d4c8:	f8df b140 	ldr.w	fp, [pc, #320]	; 800d60c <RegionEU868LinkAdrReq+0x168>
                        chMask |= 1 << i;
 800d4cc:	f04f 0a01 	mov.w	sl, #1
 800d4d0:	e007      	b.n	800d4e2 <RegionEU868LinkAdrReq+0x3e>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800d4d2:	1e53      	subs	r3, r2, #1
 800d4d4:	b2db      	uxtb	r3, r3
 800d4d6:	2b04      	cmp	r3, #4
 800d4d8:	d81a      	bhi.n	800d510 <RegionEU868LinkAdrReq+0x6c>
            status &= 0xFE; // Channel mask KO
 800d4da:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d4dc:	7a2b      	ldrb	r3, [r5, #8]
 800d4de:	42a3      	cmp	r3, r4
 800d4e0:	d93b      	bls.n	800d55a <RegionEU868LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800d4e2:	6868      	ldr	r0, [r5, #4]
 800d4e4:	a90a      	add	r1, sp, #40	; 0x28
 800d4e6:	4420      	add	r0, r4
 800d4e8:	f7ff fa7c 	bl	800c9e4 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800d4ec:	b3a8      	cbz	r0, 800d55a <RegionEU868LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 800d4ee:	4404      	add	r4, r0
 800d4f0:	b2e4      	uxtb	r4, r4
        chMask = linkAdrParams.ChMask;
 800d4f2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800d4f6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800d4fa:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 800d4fe:	2a00      	cmp	r2, #0
 800d500:	d1e7      	bne.n	800d4d2 <RegionEU868LinkAdrReq+0x2e>
 800d502:	b33b      	cbz	r3, 800d554 <RegionEU868LinkAdrReq+0xb0>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800d504:	f8db c000 	ldr.w	ip, [fp]
 800d508:	2100      	movs	r1, #0
 800d50a:	460b      	mov	r3, r1
 800d50c:	2607      	movs	r6, #7
 800d50e:	e013      	b.n	800d538 <RegionEU868LinkAdrReq+0x94>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800d510:	2a06      	cmp	r2, #6
            status &= 0xFE; // Channel mask KO
 800d512:	bf88      	it	hi
 800d514:	2606      	movhi	r6, #6
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800d516:	d8e1      	bhi.n	800d4dc <RegionEU868LinkAdrReq+0x38>
 800d518:	e7f4      	b.n	800d504 <RegionEU868LinkAdrReq+0x60>
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800d51a:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
 800d51e:	b138      	cbz	r0, 800d530 <RegionEU868LinkAdrReq+0x8c>
                        chMask |= 1 << i;
 800d520:	fa0a f003 	lsl.w	r0, sl, r3
 800d524:	f8bd e026 	ldrh.w	lr, [sp, #38]	; 0x26
 800d528:	ea40 000e 	orr.w	r0, r0, lr
 800d52c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800d530:	3301      	adds	r3, #1
 800d532:	3103      	adds	r1, #3
 800d534:	2b10      	cmp	r3, #16
 800d536:	d0d1      	beq.n	800d4dc <RegionEU868LinkAdrReq+0x38>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800d538:	2a06      	cmp	r2, #6
 800d53a:	d0ee      	beq.n	800d51a <RegionEU868LinkAdrReq+0x76>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800d53c:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 800d540:	4118      	asrs	r0, r3
 800d542:	f010 0f01 	tst.w	r0, #1
 800d546:	d0f3      	beq.n	800d530 <RegionEU868LinkAdrReq+0x8c>
 800d548:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800d54c:	2800      	cmp	r0, #0
 800d54e:	bf08      	it	eq
 800d550:	2606      	moveq	r6, #6
 800d552:	e7ed      	b.n	800d530 <RegionEU868LinkAdrReq+0x8c>
            status &= 0xFE; // Channel mask KO
 800d554:	2606      	movs	r6, #6
 800d556:	e7c1      	b.n	800d4dc <RegionEU868LinkAdrReq+0x38>
    uint8_t status = 0x07;
 800d558:	2607      	movs	r6, #7
    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionEU868GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 800d55a:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800d55e:	7aab      	ldrb	r3, [r5, #10]
 800d560:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800d564:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 800d568:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800d56c:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 800d570:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800d574:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800d578:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800d57c:	7aeb      	ldrb	r3, [r5, #11]
 800d57e:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800d582:	7b2b      	ldrb	r3, [r5, #12]
 800d584:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800d588:	7b6b      	ldrb	r3, [r5, #13]
 800d58a:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800d58e:	2310      	movs	r3, #16
 800d590:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800d594:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800d598:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800d59a:	2300      	movs	r3, #0
 800d59c:	f88d 3018 	strb.w	r3, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800d5a0:	2207      	movs	r2, #7
 800d5a2:	f88d 2019 	strb.w	r2, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800d5a6:	4919      	ldr	r1, [pc, #100]	; (800d60c <RegionEU868LinkAdrReq+0x168>)
 800d5a8:	6809      	ldr	r1, [r1, #0]
 800d5aa:	9107      	str	r1, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800d5ac:	f88d 2020 	strb.w	r2, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800d5b0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800d5b4:	682b      	ldr	r3, [r5, #0]
 800d5b6:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d5b8:	ab0a      	add	r3, sp, #40	; 0x28
 800d5ba:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 800d5be:	f10d 0129 	add.w	r1, sp, #41	; 0x29
 800d5c2:	a801      	add	r0, sp, #4
 800d5c4:	f7ff fa28 	bl	800ca18 <RegionCommonLinkAdrReqVerifyParams>
 800d5c8:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800d5ca:	2807      	cmp	r0, #7
 800d5cc:	d010      	beq.n	800d5f0 <RegionEU868LinkAdrReq+0x14c>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800d5ce:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 800d5d2:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800d5d6:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 800d5da:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800d5de:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800d5e2:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800d5e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d5e6:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800d5e8:	4628      	mov	r0, r5
 800d5ea:	b00d      	add	sp, #52	; 0x34
 800d5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800d5f0:	4e06      	ldr	r6, [pc, #24]	; (800d60c <RegionEU868LinkAdrReq+0x168>)
 800d5f2:	6830      	ldr	r0, [r6, #0]
 800d5f4:	220c      	movs	r2, #12
 800d5f6:	2100      	movs	r1, #0
 800d5f8:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800d5fc:	f000 fa58 	bl	800dab0 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800d600:	6833      	ldr	r3, [r6, #0]
 800d602:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800d606:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
 800d60a:	e7e0      	b.n	800d5ce <RegionEU868LinkAdrReq+0x12a>
 800d60c:	20002044 	.word	0x20002044

0800d610 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800d610:	b530      	push	{r4, r5, lr}
 800d612:	b083      	sub	sp, #12
 800d614:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800d616:	2300      	movs	r3, #0
 800d618:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800d61c:	f10d 0107 	add.w	r1, sp, #7
 800d620:	6840      	ldr	r0, [r0, #4]
 800d622:	f7ff fbc5 	bl	800cdb0 <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
 800d626:	2800      	cmp	r0, #0
 800d628:	bf14      	ite	ne
 800d62a:	2507      	movne	r5, #7
 800d62c:	2506      	moveq	r5, #6
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800d62e:	2207      	movs	r2, #7
 800d630:	2100      	movs	r1, #0
 800d632:	f994 0000 	ldrsb.w	r0, [r4]
 800d636:	f7ff f81a 	bl	800c66e <RegionCommonValueInRange>
 800d63a:	b908      	cbnz	r0, 800d640 <RegionEU868RxParamSetupReq+0x30>
    {
        status &= 0xFD; // Datarate KO
 800d63c:	f005 0505 	and.w	r5, r5, #5
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800d640:	2205      	movs	r2, #5
 800d642:	2100      	movs	r1, #0
 800d644:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d648:	f7ff f811 	bl	800c66e <RegionCommonValueInRange>
 800d64c:	b908      	cbnz	r0, 800d652 <RegionEU868RxParamSetupReq+0x42>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800d64e:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800d652:	4628      	mov	r0, r5
 800d654:	b003      	add	sp, #12
 800d656:	bd30      	pop	{r4, r5, pc}

0800d658 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800d658:	f04f 30ff 	mov.w	r0, #4294967295
 800d65c:	4770      	bx	lr
	...

0800d660 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800d660:	b510      	push	{r4, lr}
 800d662:	b082      	sub	sp, #8
 800d664:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800d666:	2300      	movs	r3, #0
 800d668:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800d66c:	f10d 0107 	add.w	r1, sp, #7
 800d670:	6840      	ldr	r0, [r0, #4]
 800d672:	f7ff fb9d 	bl	800cdb0 <VerifyRfFreq>
 800d676:	b978      	cbnz	r0, 800d698 <RegionEU868DlChannelReq+0x38>
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800d678:	4b10      	ldr	r3, [pc, #64]	; (800d6bc <RegionEU868DlChannelReq+0x5c>)
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	7823      	ldrb	r3, [r4, #0]
 800d67e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d686:	b9b3      	cbnz	r3, 800d6b6 <RegionEU868DlChannelReq+0x56>
        status &= 0xFE;
 800d688:	2002      	movs	r0, #2
    {
        status &= 0xFD;
 800d68a:	f000 0001 	and.w	r0, r0, #1
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
 800d68e:	b240      	sxtb	r0, r0
}
 800d690:	b002      	add	sp, #8
 800d692:	bd10      	pop	{r4, pc}
    uint8_t status = 0x03;
 800d694:	2003      	movs	r0, #3
 800d696:	e7f8      	b.n	800d68a <RegionEU868DlChannelReq+0x2a>
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800d698:	7823      	ldrb	r3, [r4, #0]
 800d69a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d69e:	4a07      	ldr	r2, [pc, #28]	; (800d6bc <RegionEU868DlChannelReq+0x5c>)
 800d6a0:	6812      	ldr	r2, [r2, #0]
 800d6a2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800d6a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d0f2      	beq.n	800d694 <RegionEU868DlChannelReq+0x34>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800d6ae:	6863      	ldr	r3, [r4, #4]
 800d6b0:	604b      	str	r3, [r1, #4]
    uint8_t status = 0x03;
 800d6b2:	2003      	movs	r0, #3
 800d6b4:	e7eb      	b.n	800d68e <RegionEU868DlChannelReq+0x2e>
        status &= 0xFE;
 800d6b6:	2002      	movs	r0, #2
 800d6b8:	e7e9      	b.n	800d68e <RegionEU868DlChannelReq+0x2e>
 800d6ba:	bf00      	nop
 800d6bc:	20002044 	.word	0x20002044

0800d6c0 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800d6c0:	4770      	bx	lr
	...

0800d6c4 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800d6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6c6:	b097      	sub	sp, #92	; 0x5c
 800d6c8:	4604      	mov	r4, r0
 800d6ca:	460f      	mov	r7, r1
 800d6cc:	4616      	mov	r6, r2
 800d6ce:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800d6d0:	2100      	movs	r1, #0
 800d6d2:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800d6d6:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800d6da:	9111      	str	r1, [sp, #68]	; 0x44
 800d6dc:	9112      	str	r1, [sp, #72]	; 0x48
 800d6de:	9113      	str	r1, [sp, #76]	; 0x4c
 800d6e0:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800d6e2:	2307      	movs	r3, #7
 800d6e4:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800d6e8:	4b33      	ldr	r3, [pc, #204]	; (800d7b8 <RegionEU868NextChannel+0xf4>)
 800d6ea:	6818      	ldr	r0, [r3, #0]
 800d6ec:	2201      	movs	r2, #1
 800d6ee:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800d6f2:	f7fe ffde 	bl	800c6b2 <RegionCommonCountChannels>
 800d6f6:	b938      	cbnz	r0, 800d708 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800d6f8:	4b2f      	ldr	r3, [pc, #188]	; (800d7b8 <RegionEU868NextChannel+0xf4>)
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800d700:	f043 0307 	orr.w	r3, r3, #7
 800d704:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800d708:	7a63      	ldrb	r3, [r4, #9]
 800d70a:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800d70e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800d712:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800d716:	4a28      	ldr	r2, [pc, #160]	; (800d7b8 <RegionEU868NextChannel+0xf4>)
 800d718:	6812      	ldr	r2, [r2, #0]
 800d71a:	f502 6190 	add.w	r1, r2, #1152	; 0x480
 800d71e:	9104      	str	r1, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800d720:	9205      	str	r2, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800d722:	4a26      	ldr	r2, [pc, #152]	; (800d7bc <RegionEU868NextChannel+0xf8>)
 800d724:	6812      	ldr	r2, [r2, #0]
 800d726:	9206      	str	r2, [sp, #24]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800d728:	2210      	movs	r2, #16
 800d72a:	f8ad 201c 	strh.w	r2, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800d72e:	f10d 020a 	add.w	r2, sp, #10
 800d732:	9208      	str	r2, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800d734:	6822      	ldr	r2, [r4, #0]
 800d736:	9209      	str	r2, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800d738:	6862      	ldr	r2, [r4, #4]
 800d73a:	920a      	str	r2, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800d73c:	7aa2      	ldrb	r2, [r4, #10]
 800d73e:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800d742:	2206      	movs	r2, #6
 800d744:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800d748:	aa0c      	add	r2, sp, #48	; 0x30
 800d74a:	f104 010c 	add.w	r1, r4, #12
 800d74e:	c903      	ldmia	r1, {r0, r1}
 800d750:	e882 0003 	stmia.w	r2, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800d754:	7d22      	ldrb	r2, [r4, #20]
 800d756:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800d75a:	8ae1      	ldrh	r1, [r4, #22]
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7ff fb79 	bl	800ce54 <GetTimeOnAir>
 800d762:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800d764:	ab03      	add	r3, sp, #12
 800d766:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800d768:	9601      	str	r6, [sp, #4]
 800d76a:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800d76e:	9300      	str	r3, [sp, #0]
 800d770:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800d774:	aa11      	add	r2, sp, #68	; 0x44
 800d776:	4629      	mov	r1, r5
 800d778:	a809      	add	r0, sp, #36	; 0x24
 800d77a:	f7ff fa69 	bl	800cc50 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800d77e:	4604      	mov	r4, r0
 800d780:	b120      	cbz	r0, 800d78c <RegionEU868NextChannel+0xc8>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800d782:	280c      	cmp	r0, #12
 800d784:	d00f      	beq.n	800d7a6 <RegionEU868NextChannel+0xe2>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800d786:	4620      	mov	r0, r4
 800d788:	b017      	add	sp, #92	; 0x5c
 800d78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800d78c:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800d790:	3901      	subs	r1, #1
 800d792:	f000 f951 	bl	800da38 <randr>
 800d796:	f100 0358 	add.w	r3, r0, #88	; 0x58
 800d79a:	eb0d 0003 	add.w	r0, sp, r3
 800d79e:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800d7a2:	703b      	strb	r3, [r7, #0]
 800d7a4:	e7ef      	b.n	800d786 <RegionEU868NextChannel+0xc2>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800d7a6:	4b04      	ldr	r3, [pc, #16]	; (800d7b8 <RegionEU868NextChannel+0xf4>)
 800d7a8:	681a      	ldr	r2, [r3, #0]
 800d7aa:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800d7ae:	f043 0307 	orr.w	r3, r3, #7
 800d7b2:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
 800d7b6:	e7e6      	b.n	800d786 <RegionEU868NextChannel+0xc2>
 800d7b8:	20002044 	.word	0x20002044
 800d7bc:	20002040 	.word	0x20002040

0800d7c0 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800d7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7c2:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800d7ca:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800d7cc:	2d02      	cmp	r5, #2
 800d7ce:	d948      	bls.n	800d862 <RegionEU868ChannelAdd+0xa2>
 800d7d0:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800d7d2:	2d0f      	cmp	r5, #15
 800d7d4:	d847      	bhi.n	800d866 <RegionEU868ChannelAdd+0xa6>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800d7d6:	6803      	ldr	r3, [r0, #0]
 800d7d8:	7a18      	ldrb	r0, [r3, #8]
 800d7da:	f340 0003 	sbfx	r0, r0, #0, #4
 800d7de:	2207      	movs	r2, #7
 800d7e0:	2100      	movs	r1, #0
 800d7e2:	b240      	sxtb	r0, r0
 800d7e4:	f7fe ff43 	bl	800c66e <RegionCommonValueInRange>
 800d7e8:	4606      	mov	r6, r0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800d7ea:	6823      	ldr	r3, [r4, #0]
 800d7ec:	7a1b      	ldrb	r3, [r3, #8]
 800d7ee:	f343 1303 	sbfx	r3, r3, #4, #4
 800d7f2:	2207      	movs	r2, #7
 800d7f4:	2100      	movs	r1, #0
 800d7f6:	b258      	sxtb	r0, r3
 800d7f8:	f7fe ff39 	bl	800c66e <RegionCommonValueInRange>
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	d040      	beq.n	800d882 <RegionEU868ChannelAdd+0xc2>
    {
        drInvalid = true;
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800d800:	6822      	ldr	r2, [r4, #0]
 800d802:	7a13      	ldrb	r3, [r2, #8]
 800d804:	f343 0103 	sbfx	r1, r3, #0, #4
 800d808:	f343 1303 	sbfx	r3, r3, #4, #4
 800d80c:	b249      	sxtb	r1, r1
 800d80e:	b25b      	sxtb	r3, r3
 800d810:	4299      	cmp	r1, r3
 800d812:	dc40      	bgt.n	800d896 <RegionEU868ChannelAdd+0xd6>
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800d814:	f10d 0107 	add.w	r1, sp, #7
 800d818:	6810      	ldr	r0, [r2, #0]
 800d81a:	f7ff fac9 	bl	800cdb0 <VerifyRfFreq>
 800d81e:	f080 0301 	eor.w	r3, r0, #1
 800d822:	b2db      	uxtb	r3, r3
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800d824:	2e00      	cmp	r6, #0
 800d826:	d03e      	beq.n	800d8a6 <RegionEU868ChannelAdd+0xe6>
    }
    if( drInvalid == true )
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800d828:	bb03      	cbnz	r3, 800d86c <RegionEU868ChannelAdd+0xac>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800d82a:	4f21      	ldr	r7, [pc, #132]	; (800d8b0 <RegionEU868ChannelAdd+0xf0>)
 800d82c:	006e      	lsls	r6, r5, #1
 800d82e:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	220c      	movs	r2, #12
 800d836:	6821      	ldr	r1, [r4, #0]
 800d838:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d83c:	f000 f91e 	bl	800da7c <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800d840:	683a      	ldr	r2, [r7, #0]
 800d842:	442e      	add	r6, r5
 800d844:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d848:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d84c:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800d84e:	2301      	movs	r3, #1
 800d850:	fa03 f505 	lsl.w	r5, r3, r5
 800d854:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800d858:	431d      	orrs	r5, r3
 800d85a:	f8a2 5480 	strh.w	r5, [r2, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 800d85e:	2000      	movs	r0, #0
 800d860:	e002      	b.n	800d868 <RegionEU868ChannelAdd+0xa8>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800d862:	2006      	movs	r0, #6
 800d864:	e000      	b.n	800d868 <RegionEU868ChannelAdd+0xa8>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d866:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800d868:	b003      	add	sp, #12
 800d86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800d86c:	2004      	movs	r0, #4
 800d86e:	e7fb      	b.n	800d868 <RegionEU868ChannelAdd+0xa8>
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800d870:	f10d 0107 	add.w	r1, sp, #7
 800d874:	6810      	ldr	r0, [r2, #0]
 800d876:	f7ff fa9b 	bl	800cdb0 <VerifyRfFreq>
 800d87a:	f080 0301 	eor.w	r3, r0, #1
 800d87e:	b2db      	uxtb	r3, r3
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800d880:	e011      	b.n	800d8a6 <RegionEU868ChannelAdd+0xe6>
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800d882:	6822      	ldr	r2, [r4, #0]
 800d884:	7a13      	ldrb	r3, [r2, #8]
 800d886:	f343 0103 	sbfx	r1, r3, #0, #4
 800d88a:	f343 1303 	sbfx	r3, r3, #4, #4
 800d88e:	b249      	sxtb	r1, r1
 800d890:	b25b      	sxtb	r3, r3
 800d892:	4299      	cmp	r1, r3
 800d894:	ddec      	ble.n	800d870 <RegionEU868ChannelAdd+0xb0>
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800d896:	f10d 0107 	add.w	r1, sp, #7
 800d89a:	6810      	ldr	r0, [r2, #0]
 800d89c:	f7ff fa88 	bl	800cdb0 <VerifyRfFreq>
 800d8a0:	f080 0301 	eor.w	r3, r0, #1
 800d8a4:	b2db      	uxtb	r3, r3
        return LORAMAC_STATUS_DATARATE_INVALID;
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	bf14      	ite	ne
 800d8aa:	2006      	movne	r0, #6
 800d8ac:	2005      	moveq	r0, #5
 800d8ae:	e7db      	b.n	800d868 <RegionEU868ChannelAdd+0xa8>
 800d8b0:	20002044 	.word	0x20002044

0800d8b4 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800d8b4:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800d8b6:	2902      	cmp	r1, #2
 800d8b8:	d801      	bhi.n	800d8be <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800d8ba:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800d8bc:	4770      	bx	lr
{
 800d8be:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800d8c0:	4b09      	ldr	r3, [pc, #36]	; (800d8e8 <RegionEU868ChannelsRemove+0x34>)
 800d8c2:	6818      	ldr	r0, [r3, #0]
 800d8c4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800d8c8:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800d8cc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	f840 200c 	str.w	r2, [r0, ip]
 800d8d6:	605a      	str	r2, [r3, #4]
 800d8d8:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800d8da:	2210      	movs	r2, #16
 800d8dc:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800d8e0:	f7fe fece 	bl	800c680 <RegionCommonChanDisable>
}
 800d8e4:	bd08      	pop	{r3, pc}
 800d8e6:	bf00      	nop
 800d8e8:	20002044 	.word	0x20002044

0800d8ec <RegionEU868ApplyCFList>:
{
 800d8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8f0:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800d8f2:	2350      	movs	r3, #80	; 0x50
 800d8f4:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800d8f8:	7903      	ldrb	r3, [r0, #4]
 800d8fa:	2b10      	cmp	r3, #16
 800d8fc:	d133      	bne.n	800d966 <RegionEU868ApplyCFList+0x7a>
 800d8fe:	4607      	mov	r7, r0
    if( applyCFList->Payload[15] != 0 )
 800d900:	6803      	ldr	r3, [r0, #0]
 800d902:	7bdb      	ldrb	r3, [r3, #15]
 800d904:	bb7b      	cbnz	r3, 800d966 <RegionEU868ApplyCFList+0x7a>
 800d906:	2500      	movs	r5, #0
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800d908:	2403      	movs	r4, #3
            newChannel.Frequency = 0;
 800d90a:	462e      	mov	r6, r5
            newChannel.Frequency *= 100;
 800d90c:	f04f 0864 	mov.w	r8, #100	; 0x64
 800d910:	e019      	b.n	800d946 <RegionEU868ApplyCFList+0x5a>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800d912:	683a      	ldr	r2, [r7, #0]
 800d914:	5d53      	ldrb	r3, [r2, r5]
 800d916:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800d918:	442a      	add	r2, r5
 800d91a:	7851      	ldrb	r1, [r2, #1]
 800d91c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d920:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800d922:	7892      	ldrb	r2, [r2, #2]
 800d924:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 800d928:	fb08 f303 	mul.w	r3, r8, r3
 800d92c:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800d92e:	9604      	str	r6, [sp, #16]
        if( newChannel.Frequency != 0 )
 800d930:	b17b      	cbz	r3, 800d952 <RegionEU868ApplyCFList+0x66>
            channelAdd.NewChannel = &newChannel;
 800d932:	ab03      	add	r3, sp, #12
 800d934:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800d936:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800d93a:	a801      	add	r0, sp, #4
 800d93c:	f7ff ff40 	bl	800d7c0 <RegionEU868ChannelAdd>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800d940:	3401      	adds	r4, #1
 800d942:	b2e4      	uxtb	r4, r4
 800d944:	3503      	adds	r5, #3
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800d946:	2c07      	cmp	r4, #7
 800d948:	d9e3      	bls.n	800d912 <RegionEU868ApplyCFList+0x26>
            newChannel.Frequency = 0;
 800d94a:	9603      	str	r6, [sp, #12]
            newChannel.DrRange.Value = 0;
 800d94c:	f88d 6014 	strb.w	r6, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800d950:	9604      	str	r6, [sp, #16]
            channelRemove.ChannelId = chanIdx;
 800d952:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800d956:	4668      	mov	r0, sp
 800d958:	f7ff ffac 	bl	800d8b4 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800d95c:	3401      	adds	r4, #1
 800d95e:	b2e4      	uxtb	r4, r4
 800d960:	3503      	adds	r5, #3
 800d962:	2c10      	cmp	r4, #16
 800d964:	d1ef      	bne.n	800d946 <RegionEU868ApplyCFList+0x5a>
}
 800d966:	b006      	add	sp, #24
 800d968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d96c <RegionEU868NewChannelReq>:
{
 800d96c:	b500      	push	{lr}
 800d96e:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800d970:	6803      	ldr	r3, [r0, #0]
 800d972:	681a      	ldr	r2, [r3, #0]
 800d974:	b962      	cbnz	r2, 800d990 <RegionEU868NewChannelReq+0x24>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800d976:	7903      	ldrb	r3, [r0, #4]
 800d978:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800d97c:	a801      	add	r0, sp, #4
 800d97e:	f7ff ff99 	bl	800d8b4 <RegionEU868ChannelsRemove>
            status &= 0xFC;
 800d982:	2800      	cmp	r0, #0
 800d984:	bf14      	ite	ne
 800d986:	2003      	movne	r0, #3
 800d988:	2000      	moveq	r0, #0
}
 800d98a:	b005      	add	sp, #20
 800d98c:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800d990:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800d992:	7903      	ldrb	r3, [r0, #4]
 800d994:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800d998:	a802      	add	r0, sp, #8
 800d99a:	f7ff ff11 	bl	800d7c0 <RegionEU868ChannelAdd>
 800d99e:	2806      	cmp	r0, #6
 800d9a0:	d80b      	bhi.n	800d9ba <RegionEU868NewChannelReq+0x4e>
 800d9a2:	e8df f000 	tbb	[pc, r0]
 800d9a6:	0a0c      	.short	0x0a0c
 800d9a8:	06040a0a 	.word	0x06040a0a
 800d9ac:	08          	.byte	0x08
 800d9ad:	00          	.byte	0x00
 800d9ae:	2002      	movs	r0, #2
 800d9b0:	e7eb      	b.n	800d98a <RegionEU868NewChannelReq+0x1e>
                status &= 0xFD;
 800d9b2:	2001      	movs	r0, #1
                break;
 800d9b4:	e7e9      	b.n	800d98a <RegionEU868NewChannelReq+0x1e>
                status &= 0xFC;
 800d9b6:	2000      	movs	r0, #0
                break;
 800d9b8:	e7e7      	b.n	800d98a <RegionEU868NewChannelReq+0x1e>
                status &= 0xFC;
 800d9ba:	2000      	movs	r0, #0
                break;
 800d9bc:	e7e5      	b.n	800d98a <RegionEU868NewChannelReq+0x1e>
    uint8_t status = 0x03;
 800d9be:	2003      	movs	r0, #3
 800d9c0:	e7e3      	b.n	800d98a <RegionEU868NewChannelReq+0x1e>
	...

0800d9c4 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800d9c4:	b538      	push	{r3, r4, r5, lr}
 800d9c6:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800d9c8:	4b12      	ldr	r3, [pc, #72]	; (800da14 <RegionEU868SetContinuousWave+0x50>)
 800d9ca:	6819      	ldr	r1, [r3, #0]
 800d9cc:	4d12      	ldr	r5, [pc, #72]	; (800da18 <RegionEU868SetContinuousWave+0x54>)
 800d9ce:	682b      	ldr	r3, [r5, #0]
 800d9d0:	7802      	ldrb	r2, [r0, #0]
 800d9d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d9d6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d9da:	7a53      	ldrb	r3, [r2, #9]
 800d9dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d9e0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800d9e4:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800d9e8:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800d9ec:	f7ff f997 	bl	800cd1e <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800d9f0:	682a      	ldr	r2, [r5, #0]
 800d9f2:	7823      	ldrb	r3, [r4, #0]
 800d9f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d9f8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800d9fc:	68a2      	ldr	r2, [r4, #8]
 800d9fe:	6861      	ldr	r1, [r4, #4]
 800da00:	f7ff f89c 	bl	800cb3c <RegionCommonComputeTxPower>
 800da04:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800da06:	4b05      	ldr	r3, [pc, #20]	; (800da1c <RegionEU868SetContinuousWave+0x58>)
 800da08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da0a:	89a2      	ldrh	r2, [r4, #12]
 800da0c:	4628      	mov	r0, r5
 800da0e:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 800da10:	bd38      	pop	{r3, r4, r5, pc}
 800da12:	bf00      	nop
 800da14:	20002040 	.word	0x20002040
 800da18:	20002044 	.word	0x20002044
 800da1c:	08011584 	.word	0x08011584

0800da20 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800da20:	1a88      	subs	r0, r1, r2
 800da22:	b240      	sxtb	r0, r0

    if( datarate < 0 )
    {
        datarate = DR_0;
    }
    return datarate;
 800da24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
#else
    return 0;
#endif /* REGION_EU868 */
}
 800da28:	b2c0      	uxtb	r0, r0
 800da2a:	4770      	bx	lr

0800da2c <srand1>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
}

void srand1( uint32_t seed )
{
    next = seed;
 800da2c:	4b01      	ldr	r3, [pc, #4]	; (800da34 <srand1+0x8>)
 800da2e:	6018      	str	r0, [r3, #0]
}
 800da30:	4770      	bx	lr
 800da32:	bf00      	nop
 800da34:	20000118 	.word	0x20000118

0800da38 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800da38:	b410      	push	{r4}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800da3a:	4a0e      	ldr	r2, [pc, #56]	; (800da74 <randr+0x3c>)
 800da3c:	4c0e      	ldr	r4, [pc, #56]	; (800da78 <randr+0x40>)
 800da3e:	f243 0339 	movw	r3, #12345	; 0x3039
 800da42:	f8d2 c000 	ldr.w	ip, [r2]
 800da46:	fb04 330c 	mla	r3, r4, ip, r3
 800da4a:	6013      	str	r3, [r2, #0]
 800da4c:	2203      	movs	r2, #3
 800da4e:	fba2 4203 	umull	r4, r2, r2, r3
 800da52:	eba3 0c02 	sub.w	ip, r3, r2
 800da56:	eb02 025c 	add.w	r2, r2, ip, lsr #1
 800da5a:	0f92      	lsrs	r2, r2, #30
 800da5c:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
 800da60:	1a9b      	subs	r3, r3, r2
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800da62:	1a09      	subs	r1, r1, r0
 800da64:	3101      	adds	r1, #1
 800da66:	fb93 f2f1 	sdiv	r2, r3, r1
 800da6a:	fb01 3312 	mls	r3, r1, r2, r3
}
 800da6e:	4418      	add	r0, r3
 800da70:	bc10      	pop	{r4}
 800da72:	4770      	bx	lr
 800da74:	20000118 	.word	0x20000118
 800da78:	41c64e6d 	.word	0x41c64e6d

0800da7c <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800da7c:	1e53      	subs	r3, r2, #1
 800da7e:	b29b      	uxth	r3, r3
 800da80:	b142      	cbz	r2, 800da94 <memcpy1+0x18>
 800da82:	3801      	subs	r0, #1
 800da84:	3301      	adds	r3, #1
 800da86:	18ca      	adds	r2, r1, r3
    {
        *dst++ = *src++;
 800da88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da8c:	f800 3f01 	strb.w	r3, [r0, #1]!
    while( size-- )
 800da90:	4291      	cmp	r1, r2
 800da92:	d1f9      	bne.n	800da88 <memcpy1+0xc>
    }
}
 800da94:	4770      	bx	lr

0800da96 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
    while( size-- )
 800da96:	1e53      	subs	r3, r2, #1
 800da98:	b29b      	uxth	r3, r3
 800da9a:	b142      	cbz	r2, 800daae <memcpyr+0x18>
 800da9c:	4402      	add	r2, r0
 800da9e:	3301      	adds	r3, #1
 800daa0:	18c8      	adds	r0, r1, r3
    {
        *dst-- = *src++;
 800daa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800daa6:	f802 3d01 	strb.w	r3, [r2, #-1]!
    while( size-- )
 800daaa:	4281      	cmp	r1, r0
 800daac:	d1f9      	bne.n	800daa2 <memcpyr+0xc>
    }
}
 800daae:	4770      	bx	lr

0800dab0 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800dab0:	1e53      	subs	r3, r2, #1
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	b12a      	cbz	r2, 800dac2 <memset1+0x12>
 800dab6:	3301      	adds	r3, #1
 800dab8:	4403      	add	r3, r0
    {
        *dst++ = value;
 800daba:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 800dabe:	4298      	cmp	r0, r3
 800dac0:	d1fb      	bne.n	800daba <memset1+0xa>
    }
}
 800dac2:	4770      	bx	lr

0800dac4 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800dac4:	b300      	cbz	r0, 800db08 <Crc32+0x44>
{
 800dac6:	b510      	push	{r4, lr}
 800dac8:	4686      	mov	lr, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 800daca:	b1c9      	cbz	r1, 800db00 <Crc32+0x3c>
 800dacc:	f100 3cff 	add.w	ip, r0, #4294967295
 800dad0:	3901      	subs	r1, #1
 800dad2:	fa10 fe81 	uxtah	lr, r0, r1
    uint32_t crc = 0xFFFFFFFF;
 800dad6:	f04f 31ff 	mov.w	r1, #4294967295
    {
        crc ^= ( uint32_t )buffer[i];
 800dada:	2408      	movs	r4, #8
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800dadc:	480b      	ldr	r0, [pc, #44]	; (800db0c <Crc32+0x48>)
 800dade:	e001      	b.n	800dae4 <Crc32+0x20>
    for( uint16_t i = 0; i < length; ++i )
 800dae0:	45f4      	cmp	ip, lr
 800dae2:	d00f      	beq.n	800db04 <Crc32+0x40>
        crc ^= ( uint32_t )buffer[i];
 800dae4:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800dae8:	4059      	eors	r1, r3
 800daea:	4623      	mov	r3, r4
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800daec:	f341 0200 	sbfx	r2, r1, #0, #1
 800daf0:	4002      	ands	r2, r0
 800daf2:	ea82 0151 	eor.w	r1, r2, r1, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 800daf6:	3b01      	subs	r3, #1
 800daf8:	b29b      	uxth	r3, r3
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d1f6      	bne.n	800daec <Crc32+0x28>
 800dafe:	e7ef      	b.n	800dae0 <Crc32+0x1c>
    uint32_t crc = 0xFFFFFFFF;
 800db00:	f04f 31ff 	mov.w	r1, #4294967295
        }
    }

    return ~crc;
 800db04:	43c8      	mvns	r0, r1
}
 800db06:	bd10      	pop	{r4, pc}
        return 0;
 800db08:	2000      	movs	r0, #0
}
 800db0a:	4770      	bx	lr
 800db0c:	edb88320 	.word	0xedb88320

0800db10 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800db10:	2001      	movs	r0, #1
 800db12:	4770      	bx	lr

0800db14 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800db14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db16:	f8bd e014 	ldrh.w	lr, [sp, #20]
 800db1a:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800db1e:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800db22:	f89d 6020 	ldrb.w	r6, [sp, #32]
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 800db26:	b140      	cbz	r0, 800db3a <RadioTimeOnAir+0x26>
 800db28:	2801      	cmp	r0, #1
 800db2a:	d019      	beq.n	800db60 <RadioTimeOnAir+0x4c>
 800db2c:	2201      	movs	r2, #1
 800db2e:	2300      	movs	r3, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 800db30:	1898      	adds	r0, r3, r2
 800db32:	3801      	subs	r0, #1
 800db34:	fbb0 f0f2 	udiv	r0, r0, r2
}
 800db38:	bdf0      	pop	{r4, r5, r6, r7, pc}
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800db3a:	2c00      	cmp	r4, #0
 800db3c:	bf0c      	ite	eq
 800db3e:	2308      	moveq	r3, #8
 800db40:	2300      	movne	r3, #0
    return ( preambleLen << 3 ) +
 800db42:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800db46:	3318      	adds	r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800db48:	2e00      	cmp	r6, #0
 800db4a:	bf14      	ite	ne
 800db4c:	2002      	movne	r0, #2
 800db4e:	2000      	moveq	r0, #0
 800db50:	4428      	add	r0, r5
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800db52:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800db56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800db5a:	fb00 f303 	mul.w	r3, r0, r3
        break;
 800db5e:	e7e7      	b.n	800db30 <RadioTimeOnAir+0x1c>
    int32_t crDenom           = coderate + 4;
 800db60:	3304      	adds	r3, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800db62:	1f50      	subs	r0, r2, #5
 800db64:	2801      	cmp	r0, #1
 800db66:	d938      	bls.n	800dbda <RadioTimeOnAir+0xc6>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800db68:	2900      	cmp	r1, #0
 800db6a:	d13c      	bne.n	800dbe6 <RadioTimeOnAir+0xd2>
 800db6c:	f1a2 070b 	sub.w	r7, r2, #11
 800db70:	2f01      	cmp	r7, #1
 800db72:	bf8c      	ite	hi
 800db74:	2700      	movhi	r7, #0
 800db76:	2701      	movls	r7, #1
                            ( crcOn ? 16 : 0 ) -
 800db78:	2e00      	cmp	r6, #0
 800db7a:	bf14      	ite	ne
 800db7c:	2010      	movne	r0, #16
 800db7e:	2000      	moveq	r0, #0
                            ( 4 * datarate ) +
 800db80:	0096      	lsls	r6, r2, #2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800db82:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800db86:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
                            ( fixLen ? 0 : 20 );
 800db8a:	2c00      	cmp	r4, #0
 800db8c:	bf14      	ite	ne
 800db8e:	2400      	movne	r4, #0
 800db90:	2414      	moveq	r4, #20
                            ( 4 * datarate ) +
 800db92:	4420      	add	r0, r4
    if( datarate <= 6 )
 800db94:	2a06      	cmp	r2, #6
 800db96:	d831      	bhi.n	800dbfc <RadioTimeOnAir+0xe8>
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800db98:	2800      	cmp	r0, #0
 800db9a:	bfac      	ite	ge
 800db9c:	eb06 0c00 	addge.w	ip, r6, r0
 800dba0:	f106 0c00 	addlt.w	ip, r6, #0
 800dba4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800dba8:	fb9c fcf6 	sdiv	ip, ip, r6
 800dbac:	fb03 e30c 	mla	r3, r3, ip, lr
        intermediate += 2;
 800dbb0:	330e      	adds	r3, #14
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800dbb2:	009b      	lsls	r3, r3, #2
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	1e90      	subs	r0, r2, #2
 800dbb8:	4083      	lsls	r3, r0
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800dbba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800dbbe:	fb00 f303 	mul.w	r3, r0, r3
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800dbc2:	4a27      	ldr	r2, [pc, #156]	; (800dc60 <RadioTimeOnAir+0x14c>)
    switch( bw )
 800dbc4:	5c52      	ldrb	r2, [r2, r1]
 800dbc6:	2a0a      	cmp	r2, #10
 800dbc8:	d848      	bhi.n	800dc5c <RadioTimeOnAir+0x148>
 800dbca:	e8df f002 	tbb	[pc, r2]
 800dbce:	322c      	.short	0x322c
 800dbd0:	43413e38 	.word	0x43413e38
 800dbd4:	352f4745 	.word	0x352f4745
 800dbd8:	3b          	.byte	0x3b
 800dbd9:	00          	.byte	0x00
        if( preambleLen < 12 )
 800dbda:	f1be 0f0c 	cmp.w	lr, #12
 800dbde:	bf38      	it	cc
 800dbe0:	f04f 0e0c 	movcc.w	lr, #12
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800dbe4:	b131      	cbz	r1, 800dbf4 <RadioTimeOnAir+0xe0>
 800dbe6:	2901      	cmp	r1, #1
 800dbe8:	d106      	bne.n	800dbf8 <RadioTimeOnAir+0xe4>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800dbea:	2a0c      	cmp	r2, #12
 800dbec:	bf14      	ite	ne
 800dbee:	2700      	movne	r7, #0
 800dbf0:	2701      	moveq	r7, #1
 800dbf2:	e7c1      	b.n	800db78 <RadioTimeOnAir+0x64>
    bool    lowDatareOptimize = false;
 800dbf4:	2700      	movs	r7, #0
 800dbf6:	e7bf      	b.n	800db78 <RadioTimeOnAir+0x64>
 800dbf8:	2700      	movs	r7, #0
 800dbfa:	e7bd      	b.n	800db78 <RadioTimeOnAir+0x64>
        ceilNumerator += 8;
 800dbfc:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
 800dbfe:	b187      	cbz	r7, 800dc22 <RadioTimeOnAir+0x10e>
            ceilDenominator = 4 * ( datarate - 2 );
 800dc00:	f1a2 0c02 	sub.w	ip, r2, #2
 800dc04:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800dc08:	2800      	cmp	r0, #0
 800dc0a:	bfac      	ite	ge
 800dc0c:	eb0c 0600 	addge.w	r6, ip, r0
 800dc10:	f10c 0600 	addlt.w	r6, ip, #0
 800dc14:	3e01      	subs	r6, #1
 800dc16:	fb96 fcfc 	sdiv	ip, r6, ip
 800dc1a:	fb03 e30c 	mla	r3, r3, ip, lr
    int32_t intermediate =
 800dc1e:	330c      	adds	r3, #12
    if( datarate <= 6 )
 800dc20:	e7c7      	b.n	800dbb2 <RadioTimeOnAir+0x9e>
            ceilDenominator = 4 * datarate;
 800dc22:	46b4      	mov	ip, r6
 800dc24:	e7f0      	b.n	800dc08 <RadioTimeOnAir+0xf4>
    switch( bw )
 800dc26:	f641 6284 	movw	r2, #7812	; 0x1e84
 800dc2a:	e781      	b.n	800db30 <RadioTimeOnAir+0x1c>
        bandwidthInHz = 10417UL;
 800dc2c:	f642 02b1 	movw	r2, #10417	; 0x28b1
        break;
 800dc30:	e77e      	b.n	800db30 <RadioTimeOnAir+0x1c>
        bandwidthInHz = 15625UL;
 800dc32:	f643 5209 	movw	r2, #15625	; 0x3d09
        break;
 800dc36:	e77b      	b.n	800db30 <RadioTimeOnAir+0x1c>
        bandwidthInHz = 20833UL;
 800dc38:	f245 1261 	movw	r2, #20833	; 0x5161
        break;
 800dc3c:	e778      	b.n	800db30 <RadioTimeOnAir+0x1c>
        bandwidthInHz = 31250UL;
 800dc3e:	f647 2212 	movw	r2, #31250	; 0x7a12
        break;
 800dc42:	e775      	b.n	800db30 <RadioTimeOnAir+0x1c>
        bandwidthInHz = 41667UL;
 800dc44:	f24a 22c3 	movw	r2, #41667	; 0xa2c3
        break;
 800dc48:	e772      	b.n	800db30 <RadioTimeOnAir+0x1c>
        bandwidthInHz = 62500UL;
 800dc4a:	f24f 4224 	movw	r2, #62500	; 0xf424
        break;
 800dc4e:	e76f      	b.n	800db30 <RadioTimeOnAir+0x1c>
        bandwidthInHz = 125000UL;
 800dc50:	4a04      	ldr	r2, [pc, #16]	; (800dc64 <RadioTimeOnAir+0x150>)
        break;
 800dc52:	e76d      	b.n	800db30 <RadioTimeOnAir+0x1c>
        bandwidthInHz = 250000UL;
 800dc54:	4a04      	ldr	r2, [pc, #16]	; (800dc68 <RadioTimeOnAir+0x154>)
        break;
 800dc56:	e76b      	b.n	800db30 <RadioTimeOnAir+0x1c>
        bandwidthInHz = 500000UL;
 800dc58:	4a04      	ldr	r2, [pc, #16]	; (800dc6c <RadioTimeOnAir+0x158>)
        break;
 800dc5a:	e769      	b.n	800db30 <RadioTimeOnAir+0x1c>
    uint32_t bandwidthInHz = 0;
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	e767      	b.n	800db30 <RadioTimeOnAir+0x1c>
 800dc60:	08011580 	.word	0x08011580
 800dc64:	0001e848 	.word	0x0001e848
 800dc68:	0003d090 	.word	0x0003d090
 800dc6c:	0007a120 	.word	0x0007a120

0800dc70 <RadioOnTxTimeoutIrq>:
{
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
}

static void RadioOnTxTimeoutIrq( void *context )
{
 800dc70:	b508      	push	{r3, lr}
{
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800dc72:	4b03      	ldr	r3, [pc, #12]	; (800dc80 <RadioOnTxTimeoutIrq+0x10>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	b113      	cbz	r3, 800dc7e <RadioOnTxTimeoutIrq+0xe>
 800dc78:	685b      	ldr	r3, [r3, #4]
 800dc7a:	b103      	cbz	r3, 800dc7e <RadioOnTxTimeoutIrq+0xe>
    {
        RadioEvents->TxTimeout( );
 800dc7c:	4798      	blx	r3
}
 800dc7e:	bd08      	pop	{r3, pc}
 800dc80:	20002148 	.word	0x20002148

0800dc84 <RadioOnRxTimeoutIrq>:
{
 800dc84:	b508      	push	{r3, lr}
{
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800dc86:	4b03      	ldr	r3, [pc, #12]	; (800dc94 <RadioOnRxTimeoutIrq+0x10>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	b113      	cbz	r3, 800dc92 <RadioOnRxTimeoutIrq+0xe>
 800dc8c:	68db      	ldr	r3, [r3, #12]
 800dc8e:	b103      	cbz	r3, 800dc92 <RadioOnRxTimeoutIrq+0xe>
    {
        RadioEvents->RxTimeout( );
 800dc90:	4798      	blx	r3
}
 800dc92:	bd08      	pop	{r3, pc}
 800dc94:	20002148 	.word	0x20002148

0800dc98 <RadioSetMaxPayloadLength>:
{
 800dc98:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 800dc9a:	2801      	cmp	r0, #1
 800dc9c:	d004      	beq.n	800dca8 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800dc9e:	4b0a      	ldr	r3, [pc, #40]	; (800dcc8 <RadioSetMaxPayloadLength+0x30>)
 800dca0:	7d5b      	ldrb	r3, [r3, #21]
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	d008      	beq.n	800dcb8 <RadioSetMaxPayloadLength+0x20>
}
 800dca6:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800dca8:	4b08      	ldr	r3, [pc, #32]	; (800dccc <RadioSetMaxPayloadLength+0x34>)
 800dcaa:	7019      	strb	r1, [r3, #0]
 800dcac:	4806      	ldr	r0, [pc, #24]	; (800dcc8 <RadioSetMaxPayloadLength+0x30>)
 800dcae:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800dcb0:	300e      	adds	r0, #14
 800dcb2:	f001 fe13 	bl	800f8dc <SUBGRF_SetPacketParams>
 800dcb6:	e7f6      	b.n	800dca6 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800dcb8:	4b04      	ldr	r3, [pc, #16]	; (800dccc <RadioSetMaxPayloadLength+0x34>)
 800dcba:	7019      	strb	r1, [r3, #0]
 800dcbc:	4802      	ldr	r0, [pc, #8]	; (800dcc8 <RadioSetMaxPayloadLength+0x30>)
 800dcbe:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800dcc0:	300e      	adds	r0, #14
 800dcc2:	f001 fe0b 	bl	800f8dc <SUBGRF_SetPacketParams>
}
 800dcc6:	e7ee      	b.n	800dca6 <RadioSetMaxPayloadLength+0xe>
 800dcc8:	20002164 	.word	0x20002164
 800dccc:	2000011c 	.word	0x2000011c

0800dcd0 <RadioRead>:
{
 800dcd0:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 800dcd2:	f001 fc83 	bl	800f5dc <SUBGRF_ReadRegister>
}
 800dcd6:	bd08      	pop	{r3, pc}

0800dcd8 <RadioWrite>:
{
 800dcd8:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 800dcda:	f001 fb99 	bl	800f410 <SUBGRF_WriteRegister>
}
 800dcde:	bd08      	pop	{r3, pc}

0800dce0 <RadioTxCw>:
    SUBGRF_SetTxInfinitePreamble( );
    SUBGRF_SetTx( 0x0fffff );
}

static void RadioTxCw( int8_t power )
{
 800dce0:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800dce2:	f001 ff12 	bl	800fb0a <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800dce6:	2101      	movs	r1, #1
 800dce8:	f001 fefa 	bl	800fae0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800dcec:	f001 fa3e 	bl	800f16c <SUBGRF_SetTxContinuousWave>
}
 800dcf0:	bd08      	pop	{r3, pc}
	...

0800dcf4 <RadioSetRxDutyCycle>:
{
 800dcf4:	b570      	push	{r4, r5, r6, lr}
 800dcf6:	4604      	mov	r4, r0
 800dcf8:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800dcfa:	4e0a      	ldr	r6, [pc, #40]	; (800dd24 <RadioSetRxDutyCycle+0x30>)
 800dcfc:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 800dd00:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800dd02:	2300      	movs	r3, #0
 800dd04:	461a      	mov	r2, r3
 800dd06:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800dd0a:	4608      	mov	r0, r1
 800dd0c:	f001 fac5 	bl	800f29a <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800dd10:	2100      	movs	r1, #0
 800dd12:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800dd16:	f001 fee3 	bl	800fae0 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800dd1a:	4629      	mov	r1, r5
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	f001 f9f9 	bl	800f114 <SUBGRF_SetRxDutyCycle>
}
 800dd22:	bd70      	pop	{r4, r5, r6, pc}
 800dd24:	20002164 	.word	0x20002164

0800dd28 <RadioRxBoosted>:
{
 800dd28:	b538      	push	{r3, r4, r5, lr}
 800dd2a:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 800dd2c:	f001 ffbe 	bl	800fcac <RFW_Is_Init>
 800dd30:	2801      	cmp	r0, #1
 800dd32:	d015      	beq.n	800dd60 <RadioRxBoosted+0x38>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800dd34:	2300      	movs	r3, #0
 800dd36:	461a      	mov	r2, r3
 800dd38:	f240 2162 	movw	r1, #610	; 0x262
 800dd3c:	4608      	mov	r0, r1
 800dd3e:	f001 faac 	bl	800f29a <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800dd42:	b984      	cbnz	r4, 800dd66 <RadioRxBoosted+0x3e>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800dd44:	4c0f      	ldr	r4, [pc, #60]	; (800dd84 <RadioRxBoosted+0x5c>)
 800dd46:	2100      	movs	r1, #0
 800dd48:	65a1      	str	r1, [r4, #88]	; 0x58
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800dd4a:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800dd4e:	f001 fec7 	bl	800fae0 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800dd52:	7863      	ldrb	r3, [r4, #1]
 800dd54:	b183      	cbz	r3, 800dd78 <RadioRxBoosted+0x50>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800dd56:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800dd5a:	f001 fb69 	bl	800f430 <SUBGRF_SetRxBoosted>
}
 800dd5e:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 800dd60:	f001 ffac 	bl	800fcbc <RFW_ReceiveInit>
 800dd64:	e7ed      	b.n	800dd42 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800dd66:	4d08      	ldr	r5, [pc, #32]	; (800dd88 <RadioRxBoosted+0x60>)
 800dd68:	4621      	mov	r1, r4
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	f002 fcb2 	bl	80106d4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800dd70:	4628      	mov	r0, r5
 800dd72:	f002 fc69 	bl	8010648 <UTIL_TIMER_Start>
 800dd76:	e7e5      	b.n	800dd44 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800dd78:	4b02      	ldr	r3, [pc, #8]	; (800dd84 <RadioRxBoosted+0x5c>)
 800dd7a:	6898      	ldr	r0, [r3, #8]
 800dd7c:	0180      	lsls	r0, r0, #6
 800dd7e:	f001 fb57 	bl	800f430 <SUBGRF_SetRxBoosted>
}
 800dd82:	e7ec      	b.n	800dd5e <RadioRxBoosted+0x36>
 800dd84:	20002164 	.word	0x20002164
 800dd88:	2000214c 	.word	0x2000214c

0800dd8c <RadioStandby>:
{
 800dd8c:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 800dd8e:	2000      	movs	r0, #0
 800dd90:	f001 f978 	bl	800f084 <SUBGRF_SetStandby>
}
 800dd94:	bd08      	pop	{r3, pc}

0800dd96 <RadioGetStatus>:
{
 800dd96:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 800dd98:	f001 f96e 	bl	800f078 <SUBGRF_GetOperatingMode>
 800dd9c:	2805      	cmp	r0, #5
 800dd9e:	d006      	beq.n	800ddae <RadioGetStatus+0x18>
 800dda0:	2807      	cmp	r0, #7
 800dda2:	d006      	beq.n	800ddb2 <RadioGetStatus+0x1c>
            return RF_TX_RUNNING;
 800dda4:	2804      	cmp	r0, #4
 800dda6:	bf14      	ite	ne
 800dda8:	2000      	movne	r0, #0
 800ddaa:	2002      	moveq	r0, #2
}
 800ddac:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 800ddae:	2001      	movs	r0, #1
 800ddb0:	e7fc      	b.n	800ddac <RadioGetStatus+0x16>
            return RF_CAD;
 800ddb2:	2003      	movs	r0, #3
 800ddb4:	e7fa      	b.n	800ddac <RadioGetStatus+0x16>

0800ddb6 <RadioGetWakeupTime>:
{
 800ddb6:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800ddb8:	f001 febc 	bl	800fb34 <SUBGRF_GetRadioWakeUpTime>
}
 800ddbc:	3003      	adds	r0, #3
 800ddbe:	bd08      	pop	{r3, pc}

0800ddc0 <RadioReadRegisters>:
{
 800ddc0:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 800ddc2:	f001 fdfd 	bl	800f9c0 <SUBGRF_ReadRegisters>
}
 800ddc6:	bd08      	pop	{r3, pc}

0800ddc8 <RadioWriteRegisters>:
{
 800ddc8:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 800ddca:	f001 fd41 	bl	800f850 <SUBGRF_WriteRegisters>
}
 800ddce:	bd08      	pop	{r3, pc}

0800ddd0 <RadioRssi>:
{
 800ddd0:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 800ddd2:	f001 fad1 	bl	800f378 <SUBGRF_GetRssiInst>
}
 800ddd6:	b200      	sxth	r0, r0
 800ddd8:	bd08      	pop	{r3, pc}
	...

0800dddc <RadioSetTxContinuousWave>:
{
 800dddc:	b538      	push	{r3, r4, r5, lr}
 800ddde:	460d      	mov	r5, r1
 800dde0:	4614      	mov	r4, r2
    SUBGRF_SetRfFrequency( freq );
 800dde2:	f001 fa91 	bl	800f308 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 800dde6:	4628      	mov	r0, r5
 800dde8:	f001 fe8f 	bl	800fb0a <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800ddec:	2101      	movs	r1, #1
 800ddee:	f001 fe77 	bl	800fae0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800ddf2:	f001 f9bb 	bl	800f16c <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800ddf6:	4d06      	ldr	r5, [pc, #24]	; (800de10 <RadioSetTxContinuousWave+0x34>)
 800ddf8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ddfc:	fb04 f101 	mul.w	r1, r4, r1
 800de00:	4628      	mov	r0, r5
 800de02:	f002 fc67 	bl	80106d4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800de06:	4628      	mov	r0, r5
 800de08:	f002 fc1e 	bl	8010648 <UTIL_TIMER_Start>
}
 800de0c:	bd38      	pop	{r3, r4, r5, pc}
 800de0e:	bf00      	nop
 800de10:	200021c0 	.word	0x200021c0

0800de14 <RadioSetChannel>:
{
 800de14:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 800de16:	f001 fa77 	bl	800f308 <SUBGRF_SetRfFrequency>
}
 800de1a:	bd08      	pop	{r3, pc}

0800de1c <RadioStartCad>:
{
 800de1c:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800de1e:	2100      	movs	r1, #0
 800de20:	4b07      	ldr	r3, [pc, #28]	; (800de40 <RadioStartCad+0x24>)
 800de22:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800de26:	f001 fe5b 	bl	800fae0 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800de2a:	2300      	movs	r3, #0
 800de2c:	461a      	mov	r2, r3
 800de2e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800de32:	4608      	mov	r0, r1
 800de34:	f001 fa31 	bl	800f29a <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 800de38:	f001 f98c 	bl	800f154 <SUBGRF_SetCad>
}
 800de3c:	bd08      	pop	{r3, pc}
 800de3e:	bf00      	nop
 800de40:	20002164 	.word	0x20002164

0800de44 <RadioRx>:
{
 800de44:	b538      	push	{r3, r4, r5, lr}
 800de46:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 800de48:	f001 ff30 	bl	800fcac <RFW_Is_Init>
 800de4c:	2801      	cmp	r0, #1
 800de4e:	d015      	beq.n	800de7c <RadioRx+0x38>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800de50:	2300      	movs	r3, #0
 800de52:	461a      	mov	r2, r3
 800de54:	f240 2162 	movw	r1, #610	; 0x262
 800de58:	4608      	mov	r0, r1
 800de5a:	f001 fa1e 	bl	800f29a <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800de5e:	b984      	cbnz	r4, 800de82 <RadioRx+0x3e>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800de60:	4c0f      	ldr	r4, [pc, #60]	; (800dea0 <RadioRx+0x5c>)
 800de62:	2100      	movs	r1, #0
 800de64:	65a1      	str	r1, [r4, #88]	; 0x58
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800de66:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800de6a:	f001 fe39 	bl	800fae0 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800de6e:	7863      	ldrb	r3, [r4, #1]
 800de70:	b183      	cbz	r3, 800de94 <RadioRx+0x50>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800de72:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800de76:	f001 f935 	bl	800f0e4 <SUBGRF_SetRx>
}
 800de7a:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 800de7c:	f001 ff1e 	bl	800fcbc <RFW_ReceiveInit>
 800de80:	e7ed      	b.n	800de5e <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800de82:	4d08      	ldr	r5, [pc, #32]	; (800dea4 <RadioRx+0x60>)
 800de84:	4621      	mov	r1, r4
 800de86:	4628      	mov	r0, r5
 800de88:	f002 fc24 	bl	80106d4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800de8c:	4628      	mov	r0, r5
 800de8e:	f002 fbdb 	bl	8010648 <UTIL_TIMER_Start>
 800de92:	e7e5      	b.n	800de60 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800de94:	4b02      	ldr	r3, [pc, #8]	; (800dea0 <RadioRx+0x5c>)
 800de96:	6898      	ldr	r0, [r3, #8]
 800de98:	0180      	lsls	r0, r0, #6
 800de9a:	f001 f923 	bl	800f0e4 <SUBGRF_SetRx>
}
 800de9e:	e7ec      	b.n	800de7a <RadioRx+0x36>
 800dea0:	20002164 	.word	0x20002164
 800dea4:	2000214c 	.word	0x2000214c

0800dea8 <RadioSleep>:
{
 800dea8:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 800deaa:	f04f 0004 	mov.w	r0, #4
 800deae:	f001 fbef 	bl	800f690 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 800deb2:	2002      	movs	r0, #2
 800deb4:	f7f3 fba4 	bl	8001600 <HAL_Delay>
}
 800deb8:	bd08      	pop	{r3, pc}

0800deba <RadioRandom>:
{
 800deba:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800debc:	2300      	movs	r3, #0
 800debe:	461a      	mov	r2, r3
 800dec0:	4619      	mov	r1, r3
 800dec2:	4618      	mov	r0, r3
 800dec4:	f001 f9e9 	bl	800f29a <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 800dec8:	f001 fd8a 	bl	800f9e0 <SUBGRF_GetRandom>
}
 800decc:	bd08      	pop	{r3, pc}
	...

0800ded0 <RadioSetModem>:
{
 800ded0:	b510      	push	{r4, lr}
 800ded2:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 800ded4:	4b1d      	ldr	r3, [pc, #116]	; (800df4c <RadioSetModem+0x7c>)
 800ded6:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 800ded8:	f001 fef5 	bl	800fcc6 <RFW_SetRadioModem>
    switch( modem )
 800dedc:	2c05      	cmp	r4, #5
 800dede:	d804      	bhi.n	800deea <RadioSetModem+0x1a>
 800dee0:	e8df f004 	tbb	[pc, r4]
 800dee4:	1e03110a 	.word	0x1e03110a
 800dee8:	2c25      	.short	0x2c25
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 800deea:	2003      	movs	r0, #3
 800deec:	f001 fad6 	bl	800f49c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800def0:	4b16      	ldr	r3, [pc, #88]	; (800df4c <RadioSetModem+0x7c>)
 800def2:	2200      	movs	r2, #0
 800def4:	735a      	strb	r2, [r3, #13]
}
 800def6:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800def8:	2000      	movs	r0, #0
 800defa:	f001 facf 	bl	800f49c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800defe:	4b13      	ldr	r3, [pc, #76]	; (800df4c <RadioSetModem+0x7c>)
 800df00:	2200      	movs	r2, #0
 800df02:	735a      	strb	r2, [r3, #13]
        break;
 800df04:	e7f7      	b.n	800def6 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800df06:	2001      	movs	r0, #1
 800df08:	f001 fac8 	bl	800f49c <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800df0c:	4b0f      	ldr	r3, [pc, #60]	; (800df4c <RadioSetModem+0x7c>)
 800df0e:	7b18      	ldrb	r0, [r3, #12]
 800df10:	7b5b      	ldrb	r3, [r3, #13]
 800df12:	4283      	cmp	r3, r0
 800df14:	d0ef      	beq.n	800def6 <RadioSetModem+0x26>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800df16:	4b0d      	ldr	r3, [pc, #52]	; (800df4c <RadioSetModem+0x7c>)
 800df18:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800df1a:	f000 facf 	bl	800e4bc <RadioSetPublicNetwork>
 800df1e:	e7ea      	b.n	800def6 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800df20:	2002      	movs	r0, #2
 800df22:	f001 fabb 	bl	800f49c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800df26:	4b09      	ldr	r3, [pc, #36]	; (800df4c <RadioSetModem+0x7c>)
 800df28:	2200      	movs	r2, #0
 800df2a:	735a      	strb	r2, [r3, #13]
        break;
 800df2c:	e7e3      	b.n	800def6 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800df2e:	2002      	movs	r0, #2
 800df30:	f001 fab4 	bl	800f49c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800df34:	4b05      	ldr	r3, [pc, #20]	; (800df4c <RadioSetModem+0x7c>)
 800df36:	2200      	movs	r2, #0
 800df38:	735a      	strb	r2, [r3, #13]
        break;
 800df3a:	e7dc      	b.n	800def6 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800df3c:	2000      	movs	r0, #0
 800df3e:	f001 faad 	bl	800f49c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800df42:	4b02      	ldr	r3, [pc, #8]	; (800df4c <RadioSetModem+0x7c>)
 800df44:	2200      	movs	r2, #0
 800df46:	735a      	strb	r2, [r3, #13]
}
 800df48:	e7d5      	b.n	800def6 <RadioSetModem+0x26>
 800df4a:	bf00      	nop
 800df4c:	20002164 	.word	0x20002164

0800df50 <RadioSetTxGenericConfig>:
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 800df50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df54:	b086      	sub	sp, #24
 800df56:	4605      	mov	r5, r0
 800df58:	460c      	mov	r4, r1
 800df5a:	4617      	mov	r7, r2
 800df5c:	461e      	mov	r6, r3
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 800df5e:	2100      	movs	r1, #0
 800df60:	9104      	str	r1, [sp, #16]
 800df62:	9105      	str	r1, [sp, #20]
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800df64:	f001 fea1 	bl	800fcaa <RFW_DeInit>
    switch( modem )
 800df68:	2d03      	cmp	r5, #3
 800df6a:	f200 8152 	bhi.w	800e212 <RadioSetTxGenericConfig+0x2c2>
 800df6e:	e8df f015 	tbh	[pc, r5, lsl #1]
 800df72:	007a      	.short	0x007a
 800df74:	013c00dd 	.word	0x013c00dd
 800df78:	0004      	.short	0x0004
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 800df7a:	7ca2      	ldrb	r2, [r4, #18]
 800df7c:	2a08      	cmp	r2, #8
 800df7e:	f200 8155 	bhi.w	800e22c <RadioSetTxGenericConfig+0x2dc>
        {
            return -1;
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 800df82:	68a1      	ldr	r1, [r4, #8]
 800df84:	a804      	add	r0, sp, #16
 800df86:	f001 fef9 	bl	800fd7c <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 800df8a:	6823      	ldr	r3, [r4, #0]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	f000 8150 	beq.w	800e232 <RadioSetTxGenericConfig+0x2e2>
        {
            return -1;
        }
        else if (config->msk.BitRate<= 10000)
 800df92:	f242 7210 	movw	r2, #10000	; 0x2710
 800df96:	4293      	cmp	r3, r2
 800df98:	d823      	bhi.n	800dfe2 <RadioSetTxGenericConfig+0x92>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800df9a:	4bac      	ldr	r3, [pc, #688]	; (800e24c <RadioSetTxGenericConfig+0x2fc>)
 800df9c:	2203      	movs	r2, #3
 800df9e:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 800dfa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800dfa4:	6822      	ldr	r2, [r4, #0]
 800dfa6:	63da      	str	r2, [r3, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800dfa8:	7ce2      	ldrb	r2, [r4, #19]
 800dfaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          radio_modem= MODEM_MSK;
 800dfae:	2502      	movs	r5, #2
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 800dfb0:	4ba6      	ldr	r3, [pc, #664]	; (800e24c <RadioSetTxGenericConfig+0x2fc>)
 800dfb2:	6862      	ldr	r2, [r4, #4]
 800dfb4:	00d2      	lsls	r2, r2, #3
 800dfb6:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800dfb8:	2204      	movs	r2, #4
 800dfba:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 800dfbc:	7ca2      	ldrb	r2, [r4, #18]
 800dfbe:	00d2      	lsls	r2, r2, #3
 800dfc0:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800dfc6:	7da3      	ldrb	r3, [r4, #22]
 800dfc8:	2b02      	cmp	r3, #2
 800dfca:	d018      	beq.n	800dffe <RadioSetTxGenericConfig+0xae>
 800dfcc:	7d23      	ldrb	r3, [r4, #20]
 800dfce:	2b02      	cmp	r3, #2
 800dfd0:	d015      	beq.n	800dffe <RadioSetTxGenericConfig+0xae>
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800dfd2:	7d62      	ldrb	r2, [r4, #21]
 800dfd4:	4b9d      	ldr	r3, [pc, #628]	; (800e24c <RadioSetTxGenericConfig+0x2fc>)
 800dfd6:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800dfd8:	7da2      	ldrb	r2, [r4, #22]
 800dfda:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800dfdc:	7d22      	ldrb	r2, [r4, #20]
 800dfde:	755a      	strb	r2, [r3, #21]
 800dfe0:	e026      	b.n	800e030 <RadioSetTxGenericConfig+0xe0>
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800dfe2:	4b9a      	ldr	r3, [pc, #616]	; (800e24c <RadioSetTxGenericConfig+0x2fc>)
 800dfe4:	2500      	movs	r5, #0
 800dfe6:	739d      	strb	r5, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800dfe8:	f883 5038 	strb.w	r5, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800dfec:	6822      	ldr	r2, [r4, #0]
 800dfee:	63da      	str	r2, [r3, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800dff0:	7ce2      	ldrb	r2, [r4, #19]
 800dff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 800dff6:	6822      	ldr	r2, [r4, #0]
 800dff8:	0892      	lsrs	r2, r2, #2
 800dffa:	641a      	str	r2, [r3, #64]	; 0x40
 800dffc:	e7d8      	b.n	800dfb0 <RadioSetTxGenericConfig+0x60>
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800dffe:	7d62      	ldrb	r2, [r4, #21]
 800e000:	f102 030f 	add.w	r3, r2, #15
 800e004:	b2db      	uxtb	r3, r3
 800e006:	2b01      	cmp	r3, #1
 800e008:	d901      	bls.n	800e00e <RadioSetTxGenericConfig+0xbe>
 800e00a:	2a01      	cmp	r2, #1
 800e00c:	d128      	bne.n	800e060 <RadioSetTxGenericConfig+0x110>
            ConfigGeneric.TxConfig= config;
 800e00e:	9401      	str	r4, [sp, #4]
            ConfigGeneric.rtx = CONFIG_TX;
 800e010:	2301      	movs	r3, #1
 800e012:	f88d 300c 	strb.w	r3, [sp, #12]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800e016:	4a8e      	ldr	r2, [pc, #568]	; (800e250 <RadioSetTxGenericConfig+0x300>)
 800e018:	4b8e      	ldr	r3, [pc, #568]	; (800e254 <RadioSetTxGenericConfig+0x304>)
 800e01a:	6819      	ldr	r1, [r3, #0]
 800e01c:	a801      	add	r0, sp, #4
 800e01e:	f001 fe41 	bl	800fca4 <RFW_Init>
 800e022:	b9e8      	cbnz	r0, 800e060 <RadioSetTxGenericConfig+0x110>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800e024:	4b89      	ldr	r3, [pc, #548]	; (800e24c <RadioSetTxGenericConfig+0x2fc>)
 800e026:	2200      	movs	r2, #0
 800e028:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800e02a:	2101      	movs	r1, #1
 800e02c:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800e02e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800e030:	f7ff feac 	bl	800dd8c <RadioStandby>
        RadioSetModem( radio_modem );
 800e034:	4628      	mov	r0, r5
 800e036:	f7ff ff4b 	bl	800ded0 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e03a:	4d84      	ldr	r5, [pc, #528]	; (800e24c <RadioSetTxGenericConfig+0x2fc>)
 800e03c:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800e040:	f001 fa44 	bl	800f4cc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e044:	f105 000e 	add.w	r0, r5, #14
 800e048:	f001 fc48 	bl	800f8dc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800e04c:	a804      	add	r0, sp, #16
 800e04e:	f001 fc0f 	bl	800f870 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800e052:	8a20      	ldrh	r0, [r4, #16]
 800e054:	f001 fb36 	bl	800f6c4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 800e058:	89a0      	ldrh	r0, [r4, #12]
 800e05a:	f001 fc29 	bl	800f8b0 <SUBGRF_SetCrcPolynomial>
        break;
 800e05e:	e0d8      	b.n	800e212 <RadioSetTxGenericConfig+0x2c2>
                return -1;
 800e060:	f04f 30ff 	mov.w	r0, #4294967295
 800e064:	e0df      	b.n	800e226 <RadioSetTxGenericConfig+0x2d6>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 800e066:	6823      	ldr	r3, [r4, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	f000 80e5 	beq.w	800e238 <RadioSetTxGenericConfig+0x2e8>
        {
            return -1;
        }
        if( config->fsk.SyncWordLength > 8 )
 800e06e:	7ca2      	ldrb	r2, [r4, #18]
 800e070:	2a08      	cmp	r2, #8
 800e072:	f200 80e4 	bhi.w	800e23e <RadioSetTxGenericConfig+0x2ee>
        {
            return -1;
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 800e076:	68a1      	ldr	r1, [r4, #8]
 800e078:	a804      	add	r0, sp, #16
 800e07a:	f001 fe7f 	bl	800fd7c <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800e07e:	4b73      	ldr	r3, [pc, #460]	; (800e24c <RadioSetTxGenericConfig+0x2fc>)
 800e080:	2200      	movs	r2, #0
 800e082:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800e086:	6821      	ldr	r1, [r4, #0]
 800e088:	63d9      	str	r1, [r3, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800e08a:	7ce1      	ldrb	r1, [r4, #19]
 800e08c:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800e090:	69a1      	ldr	r1, [r4, #24]
 800e092:	6419      	str	r1, [r3, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800e094:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800e096:	6861      	ldr	r1, [r4, #4]
 800e098:	00c9      	lsls	r1, r1, #3
 800e09a:	8219      	strh	r1, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800e09c:	2104      	movs	r1, #4
 800e09e:	7499      	strb	r1, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800e0a0:	7ca1      	ldrb	r1, [r4, #18]
 800e0a2:	00c9      	lsls	r1, r1, #3
 800e0a4:	74d9      	strb	r1, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800e0a6:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800e0a8:	7da3      	ldrb	r3, [r4, #22]
 800e0aa:	2b02      	cmp	r3, #2
 800e0ac:	d00a      	beq.n	800e0c4 <RadioSetTxGenericConfig+0x174>
 800e0ae:	7d23      	ldrb	r3, [r4, #20]
 800e0b0:	2b02      	cmp	r3, #2
 800e0b2:	d007      	beq.n	800e0c4 <RadioSetTxGenericConfig+0x174>
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800e0b4:	7d62      	ldrb	r2, [r4, #21]
 800e0b6:	4b65      	ldr	r3, [pc, #404]	; (800e24c <RadioSetTxGenericConfig+0x2fc>)
 800e0b8:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800e0ba:	7da2      	ldrb	r2, [r4, #22]
 800e0bc:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800e0be:	7d22      	ldrb	r2, [r4, #20]
 800e0c0:	755a      	strb	r2, [r3, #21]
 800e0c2:	e018      	b.n	800e0f6 <RadioSetTxGenericConfig+0x1a6>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800e0c4:	7d62      	ldrb	r2, [r4, #21]
 800e0c6:	f102 030f 	add.w	r3, r2, #15
 800e0ca:	b2db      	uxtb	r3, r3
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d901      	bls.n	800e0d4 <RadioSetTxGenericConfig+0x184>
 800e0d0:	2a01      	cmp	r2, #1
 800e0d2:	d128      	bne.n	800e126 <RadioSetTxGenericConfig+0x1d6>
            ConfigGeneric.rtx = CONFIG_TX;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 800e0da:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800e0dc:	4a5c      	ldr	r2, [pc, #368]	; (800e250 <RadioSetTxGenericConfig+0x300>)
 800e0de:	4b5d      	ldr	r3, [pc, #372]	; (800e254 <RadioSetTxGenericConfig+0x304>)
 800e0e0:	6819      	ldr	r1, [r3, #0]
 800e0e2:	a801      	add	r0, sp, #4
 800e0e4:	f001 fdde 	bl	800fca4 <RFW_Init>
 800e0e8:	b9e8      	cbnz	r0, 800e126 <RadioSetTxGenericConfig+0x1d6>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800e0ea:	4b58      	ldr	r3, [pc, #352]	; (800e24c <RadioSetTxGenericConfig+0x2fc>)
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800e0f0:	2101      	movs	r1, #1
 800e0f2:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800e0f4:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800e0f6:	f7ff fe49 	bl	800dd8c <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800e0fa:	2000      	movs	r0, #0
 800e0fc:	f7ff fee8 	bl	800ded0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e100:	4d52      	ldr	r5, [pc, #328]	; (800e24c <RadioSetTxGenericConfig+0x2fc>)
 800e102:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800e106:	f001 f9e1 	bl	800f4cc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e10a:	f105 000e 	add.w	r0, r5, #14
 800e10e:	f001 fbe5 	bl	800f8dc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800e112:	a804      	add	r0, sp, #16
 800e114:	f001 fbac 	bl	800f870 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800e118:	8a20      	ldrh	r0, [r4, #16]
 800e11a:	f001 fad3 	bl	800f6c4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 800e11e:	89a0      	ldrh	r0, [r4, #12]
 800e120:	f001 fbc6 	bl	800f8b0 <SUBGRF_SetCrcPolynomial>
        break;
 800e124:	e075      	b.n	800e212 <RadioSetTxGenericConfig+0x2c2>
                return -1;
 800e126:	f04f 30ff 	mov.w	r0, #4294967295
 800e12a:	e07c      	b.n	800e226 <RadioSetTxGenericConfig+0x2d6>
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800e12c:	4b47      	ldr	r3, [pc, #284]	; (800e24c <RadioSetTxGenericConfig+0x2fc>)
 800e12e:	2201      	movs	r2, #1
 800e130:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800e134:	7822      	ldrb	r2, [r4, #0]
 800e136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800e13a:	7862      	ldrb	r2, [r4, #1]
 800e13c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800e140:	78a2      	ldrb	r2, [r4, #2]
 800e142:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800e146:	78e3      	ldrb	r3, [r4, #3]
 800e148:	2b01      	cmp	r3, #1
 800e14a:	d033      	beq.n	800e1b4 <RadioSetTxGenericConfig+0x264>
 800e14c:	2b02      	cmp	r3, #2
 800e14e:	d036      	beq.n	800e1be <RadioSetTxGenericConfig+0x26e>
 800e150:	b35b      	cbz	r3, 800e1aa <RadioSetTxGenericConfig+0x25a>
            break;
          default:
            break;
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800e152:	4d3e      	ldr	r5, [pc, #248]	; (800e24c <RadioSetTxGenericConfig+0x2fc>)
 800e154:	f04f 0801 	mov.w	r8, #1
 800e158:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800e15c:	88a3      	ldrh	r3, [r4, #4]
 800e15e:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800e160:	79a3      	ldrb	r3, [r4, #6]
 800e162:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800e164:	79e3      	ldrb	r3, [r4, #7]
 800e166:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800e16a:	7a23      	ldrb	r3, [r4, #8]
 800e16c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21

        RadioStandby( );
 800e170:	f7ff fe0c 	bl	800dd8c <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800e174:	4640      	mov	r0, r8
 800e176:	f7ff feab 	bl	800ded0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e17a:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800e17e:	f001 f9a5 	bl	800f4cc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e182:	f105 000e 	add.w	r0, r5, #14
 800e186:	f001 fba9 	bl	800f8dc <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800e18a:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 800e18e:	2b06      	cmp	r3, #6
 800e190:	d020      	beq.n	800e1d4 <RadioSetTxGenericConfig+0x284>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
        }
        else
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800e192:	f640 0089 	movw	r0, #2185	; 0x889
 800e196:	f001 fa21 	bl	800f5dc <SUBGRF_ReadRegister>
 800e19a:	f040 0104 	orr.w	r1, r0, #4
 800e19e:	b2c9      	uxtb	r1, r1
 800e1a0:	f640 0089 	movw	r0, #2185	; 0x889
 800e1a4:	f001 f934 	bl	800f410 <SUBGRF_WriteRegister>
 800e1a8:	e033      	b.n	800e212 <RadioSetTxGenericConfig+0x2c2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800e1aa:	4b28      	ldr	r3, [pc, #160]	; (800e24c <RadioSetTxGenericConfig+0x2fc>)
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e1b2:	e7ce      	b.n	800e152 <RadioSetTxGenericConfig+0x202>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800e1b4:	4b25      	ldr	r3, [pc, #148]	; (800e24c <RadioSetTxGenericConfig+0x2fc>)
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e1bc:	e7c9      	b.n	800e152 <RadioSetTxGenericConfig+0x202>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800e1be:	7823      	ldrb	r3, [r4, #0]
 800e1c0:	3b0b      	subs	r3, #11
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	2b01      	cmp	r3, #1
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800e1c6:	4b21      	ldr	r3, [pc, #132]	; (800e24c <RadioSetTxGenericConfig+0x2fc>)
 800e1c8:	bf94      	ite	ls
 800e1ca:	2201      	movls	r2, #1
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800e1cc:	2200      	movhi	r2, #0
 800e1ce:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800e1d2:	e7be      	b.n	800e152 <RadioSetTxGenericConfig+0x202>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800e1d4:	f640 0089 	movw	r0, #2185	; 0x889
 800e1d8:	f001 fa00 	bl	800f5dc <SUBGRF_ReadRegister>
 800e1dc:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800e1e0:	f640 0089 	movw	r0, #2185	; 0x889
 800e1e4:	f001 f914 	bl	800f410 <SUBGRF_WriteRegister>
 800e1e8:	e013      	b.n	800e212 <RadioSetTxGenericConfig+0x2c2>
        }
        // WORKAROUND END
        break;
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800e1ea:	6823      	ldr	r3, [r4, #0]
 800e1ec:	3b01      	subs	r3, #1
 800e1ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e1f2:	d227      	bcs.n	800e244 <RadioSetTxGenericConfig+0x2f4>
        {
            return -1;
        }
        RadioSetModem( MODEM_BPSK );
 800e1f4:	2003      	movs	r0, #3
 800e1f6:	f7ff fe6b 	bl	800ded0 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800e1fa:	4814      	ldr	r0, [pc, #80]	; (800e24c <RadioSetTxGenericConfig+0x2fc>)
 800e1fc:	2302      	movs	r3, #2
 800e1fe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800e202:	6823      	ldr	r3, [r4, #0]
 800e204:	6483      	str	r3, [r0, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800e206:	2316      	movs	r3, #22
 800e208:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e20c:	3038      	adds	r0, #56	; 0x38
 800e20e:	f001 f95d 	bl	800f4cc <SUBGRF_SetModulationParams>
        break;
    default:
        break;
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800e212:	4638      	mov	r0, r7
 800e214:	f001 fc79 	bl	800fb0a <SUBGRF_SetRfTxPower>
 800e218:	4c0c      	ldr	r4, [pc, #48]	; (800e24c <RadioSetTxGenericConfig+0x2fc>)
 800e21a:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800e21e:	f001 fd49 	bl	800fcb4 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800e222:	6066      	str	r6, [r4, #4]
    return 0;
 800e224:	2000      	movs	r0, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800e226:	b006      	add	sp, #24
 800e228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return -1;
 800e22c:	f04f 30ff 	mov.w	r0, #4294967295
 800e230:	e7f9      	b.n	800e226 <RadioSetTxGenericConfig+0x2d6>
            return -1;
 800e232:	f04f 30ff 	mov.w	r0, #4294967295
 800e236:	e7f6      	b.n	800e226 <RadioSetTxGenericConfig+0x2d6>
            return -1;
 800e238:	f04f 30ff 	mov.w	r0, #4294967295
 800e23c:	e7f3      	b.n	800e226 <RadioSetTxGenericConfig+0x2d6>
            return -1;
 800e23e:	f04f 30ff 	mov.w	r0, #4294967295
 800e242:	e7f0      	b.n	800e226 <RadioSetTxGenericConfig+0x2d6>
            return -1;
 800e244:	f04f 30ff 	mov.w	r0, #4294967295
 800e248:	e7ed      	b.n	800e226 <RadioSetTxGenericConfig+0x2d6>
 800e24a:	bf00      	nop
 800e24c:	20002164 	.word	0x20002164
 800e250:	200021c0 	.word	0x200021c0
 800e254:	20002148 	.word	0x20002148

0800e258 <RadioSetRxGenericConfig>:
{
 800e258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e25a:	b087      	sub	sp, #28
 800e25c:	4607      	mov	r7, r0
 800e25e:	460c      	mov	r4, r1
 800e260:	4615      	mov	r5, r2
 800e262:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 800e264:	2300      	movs	r3, #0
 800e266:	9304      	str	r3, [sp, #16]
 800e268:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800e26a:	f001 fd1e 	bl	800fcaa <RFW_DeInit>
        symbTimeout = 0;
 800e26e:	2d00      	cmp	r5, #0
 800e270:	bf18      	it	ne
 800e272:	2600      	movne	r6, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800e274:	3d00      	subs	r5, #0
 800e276:	bf18      	it	ne
 800e278:	2501      	movne	r5, #1
 800e27a:	4b8d      	ldr	r3, [pc, #564]	; (800e4b0 <RadioSetRxGenericConfig+0x258>)
 800e27c:	705d      	strb	r5, [r3, #1]
    switch( modem )
 800e27e:	b12f      	cbz	r7, 800e28c <RadioSetRxGenericConfig+0x34>
 800e280:	2f01      	cmp	r7, #1
 800e282:	f000 808b 	beq.w	800e39c <RadioSetRxGenericConfig+0x144>
 800e286:	2000      	movs	r0, #0
}
 800e288:	b007      	add	sp, #28
 800e28a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800e28c:	68a3      	ldr	r3, [r4, #8]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	f000 8102 	beq.w	800e498 <RadioSetRxGenericConfig+0x240>
 800e294:	68e3      	ldr	r3, [r4, #12]
 800e296:	2b00      	cmp	r3, #0
 800e298:	f000 8101 	beq.w	800e49e <RadioSetRxGenericConfig+0x246>
        if( config->fsk.SyncWordLength > 8 )
 800e29c:	7fa2      	ldrb	r2, [r4, #30]
 800e29e:	2a08      	cmp	r2, #8
 800e2a0:	f200 8100 	bhi.w	800e4a4 <RadioSetRxGenericConfig+0x24c>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800e2a4:	6921      	ldr	r1, [r4, #16]
 800e2a6:	a804      	add	r0, sp, #16
 800e2a8:	f001 fd68 	bl	800fd7c <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800e2ac:	6820      	ldr	r0, [r4, #0]
 800e2ae:	3800      	subs	r0, #0
 800e2b0:	bf18      	it	ne
 800e2b2:	2001      	movne	r0, #1
 800e2b4:	f000 ff68 	bl	800f188 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800e2b8:	4d7d      	ldr	r5, [pc, #500]	; (800e4b0 <RadioSetRxGenericConfig+0x258>)
 800e2ba:	2700      	movs	r7, #0
 800e2bc:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800e2c0:	68a3      	ldr	r3, [r4, #8]
 800e2c2:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 800e2c4:	f894 3020 	ldrb.w	r3, [r4, #32]
 800e2c8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800e2cc:	6860      	ldr	r0, [r4, #4]
 800e2ce:	f001 fc87 	bl	800fbe0 <SUBGRF_GetFskBandwidthRegValue>
 800e2d2:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800e2d6:	73af      	strb	r7, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800e2d8:	68e3      	ldr	r3, [r4, #12]
 800e2da:	00db      	lsls	r3, r3, #3
 800e2dc:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800e2de:	7fe3      	ldrb	r3, [r4, #31]
 800e2e0:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800e2e2:	7fa3      	ldrb	r3, [r4, #30]
 800e2e4:	00db      	lsls	r3, r3, #3
 800e2e6:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800e2e8:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800e2ec:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800e2ee:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800e2f2:	b963      	cbnz	r3, 800e30e <RadioSetRxGenericConfig+0xb6>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800e2f4:	6961      	ldr	r1, [r4, #20]
 800e2f6:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800e2f8:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800e2fc:	2a02      	cmp	r2, #2
 800e2fe:	d00f      	beq.n	800e320 <RadioSetRxGenericConfig+0xc8>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800e300:	496b      	ldr	r1, [pc, #428]	; (800e4b0 <RadioSetRxGenericConfig+0x258>)
 800e302:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 800e306:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800e308:	760a      	strb	r2, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800e30a:	754b      	strb	r3, [r1, #21]
 800e30c:	e022      	b.n	800e354 <RadioSetRxGenericConfig+0xfc>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800e30e:	2b02      	cmp	r3, #2
 800e310:	d003      	beq.n	800e31a <RadioSetRxGenericConfig+0xc2>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800e312:	4a67      	ldr	r2, [pc, #412]	; (800e4b0 <RadioSetRxGenericConfig+0x258>)
 800e314:	21ff      	movs	r1, #255	; 0xff
 800e316:	7591      	strb	r1, [r2, #22]
 800e318:	e7ee      	b.n	800e2f8 <RadioSetRxGenericConfig+0xa0>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800e31a:	4b65      	ldr	r3, [pc, #404]	; (800e4b0 <RadioSetRxGenericConfig+0x258>)
 800e31c:	22ff      	movs	r2, #255	; 0xff
 800e31e:	759a      	strb	r2, [r3, #22]
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800e320:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800e324:	f102 030f 	add.w	r3, r2, #15
 800e328:	b2db      	uxtb	r3, r3
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d901      	bls.n	800e332 <RadioSetRxGenericConfig+0xda>
 800e32e:	2a01      	cmp	r2, #1
 800e330:	d131      	bne.n	800e396 <RadioSetRxGenericConfig+0x13e>
          ConfigGeneric.rtx = CONFIG_RX;
 800e332:	2300      	movs	r3, #0
 800e334:	f88d 300c 	strb.w	r3, [sp, #12]
          ConfigGeneric.RxConfig = config;
 800e338:	9402      	str	r4, [sp, #8]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800e33a:	4a5e      	ldr	r2, [pc, #376]	; (800e4b4 <RadioSetRxGenericConfig+0x25c>)
 800e33c:	4b5e      	ldr	r3, [pc, #376]	; (800e4b8 <RadioSetRxGenericConfig+0x260>)
 800e33e:	6819      	ldr	r1, [r3, #0]
 800e340:	a801      	add	r0, sp, #4
 800e342:	f001 fcaf 	bl	800fca4 <RFW_Init>
 800e346:	bb30      	cbnz	r0, 800e396 <RadioSetRxGenericConfig+0x13e>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800e348:	4b59      	ldr	r3, [pc, #356]	; (800e4b0 <RadioSetRxGenericConfig+0x258>)
 800e34a:	2200      	movs	r2, #0
 800e34c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800e34e:	2101      	movs	r1, #1
 800e350:	75d9      	strb	r1, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800e352:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800e354:	f7ff fd1a 	bl	800dd8c <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800e358:	2000      	movs	r0, #0
 800e35a:	f7ff fdb9 	bl	800ded0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e35e:	4d54      	ldr	r5, [pc, #336]	; (800e4b0 <RadioSetRxGenericConfig+0x258>)
 800e360:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800e364:	f001 f8b2 	bl	800f4cc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e368:	f105 000e 	add.w	r0, r5, #14
 800e36c:	f001 fab6 	bl	800f8dc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800e370:	a804      	add	r0, sp, #16
 800e372:	f001 fa7d 	bl	800f870 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800e376:	8ba0      	ldrh	r0, [r4, #28]
 800e378:	f001 f9a4 	bl	800f6c4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800e37c:	8b20      	ldrh	r0, [r4, #24]
 800e37e:	f001 fa97 	bl	800f8b0 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800e382:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800e386:	fb03 f606 	mul.w	r6, r3, r6
 800e38a:	68a3      	ldr	r3, [r4, #8]
 800e38c:	fbb6 f6f3 	udiv	r6, r6, r3
 800e390:	60ae      	str	r6, [r5, #8]
    return status;
 800e392:	2000      	movs	r0, #0
        break;
 800e394:	e778      	b.n	800e288 <RadioSetRxGenericConfig+0x30>
            return -1;
 800e396:	f04f 30ff 	mov.w	r0, #4294967295
 800e39a:	e775      	b.n	800e288 <RadioSetRxGenericConfig+0x30>
        if( config->lora.PreambleLen == 0 )
 800e39c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	f000 8083 	beq.w	800e4aa <RadioSetRxGenericConfig+0x252>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800e3a4:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800e3a8:	2b01      	cmp	r3, #1
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800e3aa:	bf0c      	ite	eq
 800e3ac:	7d27      	ldrbeq	r7, [r4, #20]
            MaxPayloadLength = 0xFF;
 800e3ae:	27ff      	movne	r7, #255	; 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800e3b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e3b2:	3800      	subs	r0, #0
 800e3b4:	bf18      	it	ne
 800e3b6:	2001      	movne	r0, #1
 800e3b8:	f000 fee6 	bl	800f188 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800e3bc:	b2f0      	uxtb	r0, r6
 800e3be:	f001 f853 	bl	800f468 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800e3c2:	4b3b      	ldr	r3, [pc, #236]	; (800e4b0 <RadioSetRxGenericConfig+0x258>)
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800e3ca:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800e3ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800e3d2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800e3d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800e3da:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 800e3de:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800e3e2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800e3e6:	2b01      	cmp	r3, #1
 800e3e8:	d03a      	beq.n	800e460 <RadioSetRxGenericConfig+0x208>
 800e3ea:	2b02      	cmp	r3, #2
 800e3ec:	d03d      	beq.n	800e46a <RadioSetRxGenericConfig+0x212>
 800e3ee:	b393      	cbz	r3, 800e456 <RadioSetRxGenericConfig+0x1fe>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800e3f0:	4d2f      	ldr	r5, [pc, #188]	; (800e4b0 <RadioSetRxGenericConfig+0x258>)
 800e3f2:	2601      	movs	r6, #1
 800e3f4:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800e3f6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800e3f8:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800e3fa:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800e3fe:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800e400:	77ef      	strb	r7, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800e402:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800e406:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800e40a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800e40e:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 800e412:	f7ff fcbb 	bl	800dd8c <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800e416:	4630      	mov	r0, r6
 800e418:	f7ff fd5a 	bl	800ded0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e41c:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800e420:	f001 f854 	bl	800f4cc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e424:	f105 000e 	add.w	r0, r5, #14
 800e428:	f001 fa58 	bl	800f8dc <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800e42c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800e430:	42b3      	cmp	r3, r6
 800e432:	d026      	beq.n	800e482 <RadioSetRxGenericConfig+0x22a>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800e434:	f240 7036 	movw	r0, #1846	; 0x736
 800e438:	f001 f8d0 	bl	800f5dc <SUBGRF_ReadRegister>
 800e43c:	f040 0104 	orr.w	r1, r0, #4
 800e440:	b2c9      	uxtb	r1, r1
 800e442:	f240 7036 	movw	r0, #1846	; 0x736
 800e446:	f000 ffe3 	bl	800f410 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800e44a:	4b19      	ldr	r3, [pc, #100]	; (800e4b0 <RadioSetRxGenericConfig+0x258>)
 800e44c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e450:	609a      	str	r2, [r3, #8]
    return status;
 800e452:	2000      	movs	r0, #0
        break;
 800e454:	e718      	b.n	800e288 <RadioSetRxGenericConfig+0x30>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800e456:	4b16      	ldr	r3, [pc, #88]	; (800e4b0 <RadioSetRxGenericConfig+0x258>)
 800e458:	2200      	movs	r2, #0
 800e45a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e45e:	e7c7      	b.n	800e3f0 <RadioSetRxGenericConfig+0x198>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800e460:	4b13      	ldr	r3, [pc, #76]	; (800e4b0 <RadioSetRxGenericConfig+0x258>)
 800e462:	2201      	movs	r2, #1
 800e464:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e468:	e7c2      	b.n	800e3f0 <RadioSetRxGenericConfig+0x198>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800e46a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800e46e:	3b0b      	subs	r3, #11
 800e470:	b2db      	uxtb	r3, r3
 800e472:	2b01      	cmp	r3, #1
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800e474:	4b0e      	ldr	r3, [pc, #56]	; (800e4b0 <RadioSetRxGenericConfig+0x258>)
 800e476:	bf94      	ite	ls
 800e478:	2201      	movls	r2, #1
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800e47a:	2200      	movhi	r2, #0
 800e47c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800e480:	e7b6      	b.n	800e3f0 <RadioSetRxGenericConfig+0x198>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800e482:	f240 7036 	movw	r0, #1846	; 0x736
 800e486:	f001 f8a9 	bl	800f5dc <SUBGRF_ReadRegister>
 800e48a:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800e48e:	f240 7036 	movw	r0, #1846	; 0x736
 800e492:	f000 ffbd 	bl	800f410 <SUBGRF_WriteRegister>
 800e496:	e7d8      	b.n	800e44a <RadioSetRxGenericConfig+0x1f2>
            return -1;
 800e498:	f04f 30ff 	mov.w	r0, #4294967295
 800e49c:	e6f4      	b.n	800e288 <RadioSetRxGenericConfig+0x30>
 800e49e:	f04f 30ff 	mov.w	r0, #4294967295
 800e4a2:	e6f1      	b.n	800e288 <RadioSetRxGenericConfig+0x30>
            return -1;
 800e4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e4a8:	e6ee      	b.n	800e288 <RadioSetRxGenericConfig+0x30>
            return -1;
 800e4aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ae:	e6eb      	b.n	800e288 <RadioSetRxGenericConfig+0x30>
 800e4b0:	20002164 	.word	0x20002164
 800e4b4:	2000214c 	.word	0x2000214c
 800e4b8:	20002148 	.word	0x20002148

0800e4bc <RadioSetPublicNetwork>:
{
 800e4bc:	b510      	push	{r4, lr}
 800e4be:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800e4c0:	4b0e      	ldr	r3, [pc, #56]	; (800e4fc <RadioSetPublicNetwork+0x40>)
 800e4c2:	7318      	strb	r0, [r3, #12]
 800e4c4:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 800e4c6:	2001      	movs	r0, #1
 800e4c8:	f7ff fd02 	bl	800ded0 <RadioSetModem>
    if( enable == true )
 800e4cc:	b154      	cbz	r4, 800e4e4 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800e4ce:	2134      	movs	r1, #52	; 0x34
 800e4d0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800e4d4:	f000 ff9c 	bl	800f410 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800e4d8:	2144      	movs	r1, #68	; 0x44
 800e4da:	f240 7041 	movw	r0, #1857	; 0x741
 800e4de:	f000 ff97 	bl	800f410 <SUBGRF_WriteRegister>
}
 800e4e2:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800e4e4:	2114      	movs	r1, #20
 800e4e6:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800e4ea:	f000 ff91 	bl	800f410 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800e4ee:	2124      	movs	r1, #36	; 0x24
 800e4f0:	f240 7041 	movw	r0, #1857	; 0x741
 800e4f4:	f000 ff8c 	bl	800f410 <SUBGRF_WriteRegister>
}
 800e4f8:	e7f3      	b.n	800e4e2 <RadioSetPublicNetwork+0x26>
 800e4fa:	bf00      	nop
 800e4fc:	20002164 	.word	0x20002164

0800e500 <RadioSetTxConfig>:
{
 800e500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e504:	b083      	sub	sp, #12
 800e506:	4604      	mov	r4, r0
 800e508:	460d      	mov	r5, r1
 800e50a:	4691      	mov	r9, r2
 800e50c:	461f      	mov	r7, r3
 800e50e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800e512:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 800e516:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800e51a:	f001 fbc6 	bl	800fcaa <RFW_DeInit>
    switch( modem )
 800e51e:	2c01      	cmp	r4, #1
 800e520:	d051      	beq.n	800e5c6 <RadioSetTxConfig+0xc6>
 800e522:	2c04      	cmp	r4, #4
 800e524:	f000 809c 	beq.w	800e660 <RadioSetTxConfig+0x160>
 800e528:	b164      	cbz	r4, 800e544 <RadioSetTxConfig+0x44>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800e52a:	4628      	mov	r0, r5
 800e52c:	f001 faed 	bl	800fb0a <SUBGRF_SetRfTxPower>
 800e530:	4c56      	ldr	r4, [pc, #344]	; (800e68c <RadioSetTxConfig+0x18c>)
 800e532:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 800e536:	f001 fbbd 	bl	800fcb4 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800e53a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e53c:	6063      	str	r3, [r4, #4]
}
 800e53e:	b003      	add	sp, #12
 800e540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800e544:	4c51      	ldr	r4, [pc, #324]	; (800e68c <RadioSetTxConfig+0x18c>)
 800e546:	f04f 0b00 	mov.w	fp, #0
 800e54a:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800e54e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e550:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800e552:	230b      	movs	r3, #11
 800e554:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800e558:	4638      	mov	r0, r7
 800e55a:	f001 fb41 	bl	800fbe0 <SUBGRF_GetFskBandwidthRegValue>
 800e55e:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800e562:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800e566:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800e56a:	00f6      	lsls	r6, r6, #3
 800e56c:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800e56e:	2304      	movs	r3, #4
 800e570:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800e572:	2318      	movs	r3, #24
 800e574:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800e576:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800e57a:	f088 0801 	eor.w	r8, r8, #1
 800e57e:	f884 8015 	strb.w	r8, [r4, #21]
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800e582:	45da      	cmp	sl, fp
 800e584:	bf14      	ite	ne
 800e586:	23f2      	movne	r3, #242	; 0xf2
 800e588:	2301      	moveq	r3, #1
 800e58a:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800e58c:	2301      	movs	r3, #1
 800e58e:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800e590:	f7ff fbfc 	bl	800dd8c <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 800e594:	4658      	mov	r0, fp
 800e596:	f7ff fc9b 	bl	800ded0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e59a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800e59e:	f000 ff95 	bl	800f4cc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e5a2:	f104 000e 	add.w	r0, r4, #14
 800e5a6:	f001 f999 	bl	800f8dc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800e5aa:	4a39      	ldr	r2, [pc, #228]	; (800e690 <RadioSetTxConfig+0x190>)
 800e5ac:	466b      	mov	r3, sp
 800e5ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e5b2:	e883 0003 	stmia.w	r3, {r0, r1}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f001 f95a 	bl	800f870 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800e5bc:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e5c0:	f001 f880 	bl	800f6c4 <SUBGRF_SetWhiteningSeed>
            break;
 800e5c4:	e7b1      	b.n	800e52a <RadioSetTxConfig+0x2a>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800e5c6:	4a31      	ldr	r2, [pc, #196]	; (800e68c <RadioSetTxConfig+0x18c>)
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800e5ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800e5d6:	492f      	ldr	r1, [pc, #188]	; (800e694 <RadioSetTxConfig+0x194>)
 800e5d8:	5dc9      	ldrb	r1, [r1, r7]
 800e5da:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800e5de:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 800e5e2:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e5e6:	bb57      	cbnz	r7, 800e63e <RadioSetTxConfig+0x13e>
 800e5e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e5ea:	3a0b      	subs	r2, #11
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800e5ec:	2a01      	cmp	r2, #1
 800e5ee:	bf8c      	ite	hi
 800e5f0:	2200      	movhi	r2, #0
 800e5f2:	2201      	movls	r2, #1
 800e5f4:	4925      	ldr	r1, [pc, #148]	; (800e68c <RadioSetTxConfig+0x18c>)
 800e5f6:	f881 2053 	strb.w	r2, [r1, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800e5fa:	2201      	movs	r2, #1
 800e5fc:	738a      	strb	r2, [r1, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800e5fe:	3b05      	subs	r3, #5
 800e600:	b2db      	uxtb	r3, r3
 800e602:	4293      	cmp	r3, r2
 800e604:	d924      	bls.n	800e650 <RadioSetTxConfig+0x150>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800e606:	4b21      	ldr	r3, [pc, #132]	; (800e68c <RadioSetTxConfig+0x18c>)
 800e608:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800e60a:	4c20      	ldr	r4, [pc, #128]	; (800e68c <RadioSetTxConfig+0x18c>)
 800e60c:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800e610:	4b21      	ldr	r3, [pc, #132]	; (800e698 <RadioSetTxConfig+0x198>)
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800e616:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800e61a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800e61e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 800e622:	f7ff fbb3 	bl	800dd8c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800e626:	2001      	movs	r0, #1
 800e628:	f7ff fc52 	bl	800ded0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e62c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800e630:	f000 ff4c 	bl	800f4cc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e634:	f104 000e 	add.w	r0, r4, #14
 800e638:	f001 f950 	bl	800f8dc <SUBGRF_SetPacketParams>
            break;
 800e63c:	e775      	b.n	800e52a <RadioSetTxConfig+0x2a>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e63e:	2f01      	cmp	r7, #1
 800e640:	d104      	bne.n	800e64c <RadioSetTxConfig+0x14c>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800e642:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e644:	2a0c      	cmp	r2, #12
 800e646:	d01b      	beq.n	800e680 <RadioSetTxConfig+0x180>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800e648:	2200      	movs	r2, #0
 800e64a:	e7d3      	b.n	800e5f4 <RadioSetTxConfig+0xf4>
 800e64c:	2200      	movs	r2, #0
 800e64e:	e7d1      	b.n	800e5f4 <RadioSetTxConfig+0xf4>
                if( preambleLen < 12 )
 800e650:	2e0b      	cmp	r6, #11
 800e652:	d802      	bhi.n	800e65a <RadioSetTxConfig+0x15a>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800e654:	220c      	movs	r2, #12
 800e656:	838a      	strh	r2, [r1, #28]
 800e658:	e7d7      	b.n	800e60a <RadioSetTxConfig+0x10a>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800e65a:	4b0c      	ldr	r3, [pc, #48]	; (800e68c <RadioSetTxConfig+0x18c>)
 800e65c:	839e      	strh	r6, [r3, #28]
 800e65e:	e7d4      	b.n	800e60a <RadioSetTxConfig+0x10a>
            RadioSetModem(MODEM_SIGFOX_TX);
 800e660:	2004      	movs	r0, #4
 800e662:	f7ff fc35 	bl	800ded0 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800e666:	4809      	ldr	r0, [pc, #36]	; (800e68c <RadioSetTxConfig+0x18c>)
 800e668:	2302      	movs	r3, #2
 800e66a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800e66e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e670:	6483      	str	r3, [r0, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800e672:	2316      	movs	r3, #22
 800e674:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e678:	3038      	adds	r0, #56	; 0x38
 800e67a:	f000 ff27 	bl	800f4cc <SUBGRF_SetModulationParams>
            break;
 800e67e:	e754      	b.n	800e52a <RadioSetTxConfig+0x2a>
 800e680:	4b02      	ldr	r3, [pc, #8]	; (800e68c <RadioSetTxConfig+0x18c>)
 800e682:	2201      	movs	r2, #1
 800e684:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800e688:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800e68a:	e7bc      	b.n	800e606 <RadioSetTxConfig+0x106>
 800e68c:	20002164 	.word	0x20002164
 800e690:	08010d30 	.word	0x08010d30
 800e694:	08011580 	.word	0x08011580
 800e698:	2000011c 	.word	0x2000011c

0800e69c <RadioInit>:
{
 800e69c:	b570      	push	{r4, r5, r6, lr}
 800e69e:	b082      	sub	sp, #8
    RadioEvents = events;
 800e6a0:	4b1d      	ldr	r3, [pc, #116]	; (800e718 <RadioInit+0x7c>)
 800e6a2:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 800e6a4:	4d1d      	ldr	r5, [pc, #116]	; (800e71c <RadioInit+0x80>)
 800e6a6:	2400      	movs	r4, #0
 800e6a8:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 800e6aa:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 800e6ac:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800e6ae:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 800e6b0:	481b      	ldr	r0, [pc, #108]	; (800e720 <RadioInit+0x84>)
 800e6b2:	f000 ffb7 	bl	800f624 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 800e6b6:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 800e6b8:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 800e6ba:	f000 fd72 	bl	800f1a2 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800e6be:	4621      	mov	r1, r4
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	f000 fe4b 	bl	800f35c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 800e6c6:	2204      	movs	r2, #4
 800e6c8:	4621      	mov	r1, r4
 800e6ca:	2001      	movs	r0, #1
 800e6cc:	f001 f816 	bl	800f6fc <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800e6d0:	4623      	mov	r3, r4
 800e6d2:	4622      	mov	r2, r4
 800e6d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e6d8:	4608      	mov	r0, r1
 800e6da:	f000 fdde 	bl	800f29a <SUBGRF_SetDioIrqParams>
    RadioSleep();
 800e6de:	f7ff fbe3 	bl	800dea8 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800e6e2:	4e10      	ldr	r6, [pc, #64]	; (800e724 <RadioInit+0x88>)
 800e6e4:	9400      	str	r4, [sp, #0]
 800e6e6:	4b10      	ldr	r3, [pc, #64]	; (800e728 <RadioInit+0x8c>)
 800e6e8:	4622      	mov	r2, r4
 800e6ea:	f04f 31ff 	mov.w	r1, #4294967295
 800e6ee:	4630      	mov	r0, r6
 800e6f0:	f001 fee6 	bl	80104c0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800e6f4:	4d0d      	ldr	r5, [pc, #52]	; (800e72c <RadioInit+0x90>)
 800e6f6:	9400      	str	r4, [sp, #0]
 800e6f8:	4b0d      	ldr	r3, [pc, #52]	; (800e730 <RadioInit+0x94>)
 800e6fa:	4622      	mov	r2, r4
 800e6fc:	f04f 31ff 	mov.w	r1, #4294967295
 800e700:	4628      	mov	r0, r5
 800e702:	f001 fedd 	bl	80104c0 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800e706:	4630      	mov	r0, r6
 800e708:	f001 ff3e 	bl	8010588 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800e70c:	4628      	mov	r0, r5
 800e70e:	f001 ff3b 	bl	8010588 <UTIL_TIMER_Stop>
}
 800e712:	b002      	add	sp, #8
 800e714:	bd70      	pop	{r4, r5, r6, pc}
 800e716:	bf00      	nop
 800e718:	20002148 	.word	0x20002148
 800e71c:	20002164 	.word	0x20002164
 800e720:	0800ef7d 	.word	0x0800ef7d
 800e724:	200021c0 	.word	0x200021c0
 800e728:	0800dc71 	.word	0x0800dc71
 800e72c:	2000214c 	.word	0x2000214c
 800e730:	0800dc85 	.word	0x0800dc85

0800e734 <RadioSetRxConfig>:
{
 800e734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e738:	b087      	sub	sp, #28
 800e73a:	4604      	mov	r4, r0
 800e73c:	9100      	str	r1, [sp, #0]
 800e73e:	4615      	mov	r5, r2
 800e740:	9301      	str	r3, [sp, #4]
 800e742:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 800e746:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 800e74a:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
 800e74e:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
 800e752:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
 800e756:	f89d 9064 	ldrb.w	r9, [sp, #100]	; 0x64
    SubgRf.RxContinuous = rxContinuous;
 800e75a:	4ba9      	ldr	r3, [pc, #676]	; (800ea00 <RadioSetRxConfig+0x2cc>)
 800e75c:	f883 9001 	strb.w	r9, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800e760:	f001 faa3 	bl	800fcaa <RFW_DeInit>
        symbTimeout = 0;
 800e764:	f1b9 0f00 	cmp.w	r9, #0
 800e768:	bf18      	it	ne
 800e76a:	2700      	movne	r7, #0
        MaxPayloadLength = 0xFF;
 800e76c:	f1b8 0f00 	cmp.w	r8, #0
 800e770:	bf08      	it	eq
 800e772:	26ff      	moveq	r6, #255	; 0xff
 800e774:	4ba3      	ldr	r3, [pc, #652]	; (800ea04 <RadioSetRxConfig+0x2d0>)
 800e776:	701e      	strb	r6, [r3, #0]
    switch( modem )
 800e778:	2c01      	cmp	r4, #1
 800e77a:	f000 80c6 	beq.w	800e90a <RadioSetRxConfig+0x1d6>
 800e77e:	2c05      	cmp	r4, #5
 800e780:	d004      	beq.n	800e78c <RadioSetRxConfig+0x58>
 800e782:	2c00      	cmp	r4, #0
 800e784:	d077      	beq.n	800e876 <RadioSetRxConfig+0x142>
}
 800e786:	b007      	add	sp, #28
 800e788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800e78c:	2001      	movs	r0, #1
 800e78e:	f000 fcfb 	bl	800f188 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800e792:	4c9b      	ldr	r4, [pc, #620]	; (800ea00 <RadioSetRxConfig+0x2cc>)
 800e794:	2600      	movs	r6, #0
 800e796:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800e79a:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800e79c:	2309      	movs	r3, #9
 800e79e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800e7a2:	f44f 7348 	mov.w	r3, #800	; 0x320
 800e7a6:	6423      	str	r3, [r4, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800e7a8:	9800      	ldr	r0, [sp, #0]
 800e7aa:	f001 fa19 	bl	800fbe0 <SUBGRF_GetFskBandwidthRegValue>
 800e7ae:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800e7b2:	73a6      	strb	r6, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800e7b4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800e7b8:	f8a4 a010 	strh.w	sl, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800e7bc:	74a6      	strb	r6, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800e7be:	2310      	movs	r3, #16
 800e7c0:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800e7c2:	7526      	strb	r6, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800e7c4:	7566      	strb	r6, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800e7c6:	4b8f      	ldr	r3, [pc, #572]	; (800ea04 <RadioSetRxConfig+0x2d0>)
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800e7d0:	7626      	strb	r6, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800e7d2:	2005      	movs	r0, #5
 800e7d4:	f7ff fb7c 	bl	800ded0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e7d8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800e7dc:	f000 fe76 	bl	800f4cc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e7e0:	f104 000e 	add.w	r0, r4, #14
 800e7e4:	f001 f87a 	bl	800f8dc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800e7e8:	ab02      	add	r3, sp, #8
 800e7ea:	4a87      	ldr	r2, [pc, #540]	; (800ea08 <RadioSetRxConfig+0x2d4>)
 800e7ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e7f0:	e883 0003 	stmia.w	r3, {r0, r1}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f001 f83b 	bl	800f870 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800e7fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e7fe:	f000 ff61 	bl	800f6c4 <SUBGRF_SetWhiteningSeed>
    return SUBGRF_ReadRegister( addr );
 800e802:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800e806:	f000 fee9 	bl	800f5dc <SUBGRF_ReadRegister>
    SUBGRF_WriteRegister( addr, data );
 800e80a:	f000 01ef 	and.w	r1, r0, #239	; 0xef
 800e80e:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800e812:	f000 fdfd 	bl	800f410 <SUBGRF_WriteRegister>
 800e816:	2104      	movs	r1, #4
 800e818:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800e81c:	f000 fdf8 	bl	800f410 <SUBGRF_WriteRegister>
    return SUBGRF_ReadRegister( addr );
 800e820:	f640 009b 	movw	r0, #2203	; 0x89b
 800e824:	f000 feda 	bl	800f5dc <SUBGRF_ReadRegister>
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 800e828:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
    SUBGRF_WriteRegister( addr, data );
 800e82c:	f041 0108 	orr.w	r1, r1, #8
 800e830:	f640 009b 	movw	r0, #2203	; 0x89b
 800e834:	f000 fdec 	bl	800f410 <SUBGRF_WriteRegister>
    return SUBGRF_ReadRegister( addr );
 800e838:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800e83c:	f000 fece 	bl	800f5dc <SUBGRF_ReadRegister>
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 800e840:	f040 0118 	orr.w	r1, r0, #24
    SUBGRF_WriteRegister( addr, data );
 800e844:	b2c9      	uxtb	r1, r1
 800e846:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800e84a:	f000 fde1 	bl	800f410 <SUBGRF_WriteRegister>
    return SUBGRF_ReadRegister( addr );
 800e84e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800e852:	f000 fec3 	bl	800f5dc <SUBGRF_ReadRegister>
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 800e856:	f000 018f 	and.w	r1, r0, #143	; 0x8f
    SUBGRF_WriteRegister( addr, data );
 800e85a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 800e85e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800e862:	f000 fdd5 	bl	800f410 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800e866:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800e86a:	fb02 f707 	mul.w	r7, r2, r7
 800e86e:	fbb7 f5f5 	udiv	r5, r7, r5
 800e872:	60a5      	str	r5, [r4, #8]
            break;
 800e874:	e787      	b.n	800e786 <RadioSetRxConfig+0x52>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800e876:	2000      	movs	r0, #0
 800e878:	f000 fc86 	bl	800f188 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800e87c:	4c60      	ldr	r4, [pc, #384]	; (800ea00 <RadioSetRxConfig+0x2cc>)
 800e87e:	2600      	movs	r6, #0
 800e880:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800e884:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800e886:	230b      	movs	r3, #11
 800e888:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800e88c:	9800      	ldr	r0, [sp, #0]
 800e88e:	f001 f9a7 	bl	800fbe0 <SUBGRF_GetFskBandwidthRegValue>
 800e892:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800e896:	73a6      	strb	r6, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800e898:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800e89c:	f8a4 a010 	strh.w	sl, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800e8a0:	2304      	movs	r3, #4
 800e8a2:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800e8a4:	2318      	movs	r3, #24
 800e8a6:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800e8a8:	7526      	strb	r6, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800e8aa:	f088 0801 	eor.w	r8, r8, #1
 800e8ae:	f884 8015 	strb.w	r8, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800e8b2:	4b54      	ldr	r3, [pc, #336]	; (800ea04 <RadioSetRxConfig+0x2d0>)
 800e8b4:	781b      	ldrb	r3, [r3, #0]
 800e8b6:	75a3      	strb	r3, [r4, #22]
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800e8b8:	45b3      	cmp	fp, r6
 800e8ba:	bf14      	ite	ne
 800e8bc:	23f2      	movne	r3, #242	; 0xf2
 800e8be:	2301      	moveq	r3, #1
 800e8c0:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800e8c6:	f7ff fa61 	bl	800dd8c <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800e8ca:	4630      	mov	r0, r6
 800e8cc:	f7ff fb00 	bl	800ded0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e8d0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800e8d4:	f000 fdfa 	bl	800f4cc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e8d8:	f104 000e 	add.w	r0, r4, #14
 800e8dc:	f000 fffe 	bl	800f8dc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800e8e0:	4a4a      	ldr	r2, [pc, #296]	; (800ea0c <RadioSetRxConfig+0x2d8>)
 800e8e2:	ab04      	add	r3, sp, #16
 800e8e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8e8:	e883 0003 	stmia.w	r3, {r0, r1}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f000 ffbf 	bl	800f870 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800e8f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e8f6:	f000 fee5 	bl	800f6c4 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800e8fa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800e8fe:	fb02 f707 	mul.w	r7, r2, r7
 800e902:	fbb7 f5f5 	udiv	r5, r7, r5
 800e906:	60a5      	str	r5, [r4, #8]
            break;
 800e908:	e73d      	b.n	800e786 <RadioSetRxConfig+0x52>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800e90a:	2000      	movs	r0, #0
 800e90c:	f000 fc3c 	bl	800f188 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800e910:	4a3b      	ldr	r2, [pc, #236]	; (800ea00 <RadioSetRxConfig+0x2cc>)
 800e912:	2301      	movs	r3, #1
 800e914:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800e918:	b2eb      	uxtb	r3, r5
 800e91a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800e91e:	493c      	ldr	r1, [pc, #240]	; (800ea10 <RadioSetRxConfig+0x2dc>)
 800e920:	9800      	ldr	r0, [sp, #0]
 800e922:	5c09      	ldrb	r1, [r1, r0]
 800e924:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800e928:	9901      	ldr	r1, [sp, #4]
 800e92a:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e92e:	2800      	cmp	r0, #0
 800e930:	d141      	bne.n	800e9b6 <RadioSetRxConfig+0x282>
 800e932:	f1a5 020b 	sub.w	r2, r5, #11
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800e936:	2a01      	cmp	r2, #1
 800e938:	bf8c      	ite	hi
 800e93a:	2200      	movhi	r2, #0
 800e93c:	2201      	movls	r2, #1
 800e93e:	4930      	ldr	r1, [pc, #192]	; (800ea00 <RadioSetRxConfig+0x2cc>)
 800e940:	f881 2053 	strb.w	r2, [r1, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800e944:	2201      	movs	r2, #1
 800e946:	738a      	strb	r2, [r1, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800e948:	3b05      	subs	r3, #5
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	4293      	cmp	r3, r2
 800e94e:	d93b      	bls.n	800e9c8 <RadioSetRxConfig+0x294>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800e950:	4b2b      	ldr	r3, [pc, #172]	; (800ea00 <RadioSetRxConfig+0x2cc>)
 800e952:	f8a3 a01c 	strh.w	sl, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800e956:	4c2a      	ldr	r4, [pc, #168]	; (800ea00 <RadioSetRxConfig+0x2cc>)
 800e958:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800e95c:	4b29      	ldr	r3, [pc, #164]	; (800ea04 <RadioSetRxConfig+0x2d0>)
 800e95e:	781b      	ldrb	r3, [r3, #0]
 800e960:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800e962:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800e966:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800e96a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 800e96e:	f7ff fa0d 	bl	800dd8c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800e972:	2001      	movs	r0, #1
 800e974:	f7ff faac 	bl	800ded0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e978:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800e97c:	f000 fda6 	bl	800f4cc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e980:	f104 000e 	add.w	r0, r4, #14
 800e984:	f000 ffaa 	bl	800f8dc <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800e988:	b2f8      	uxtb	r0, r7
 800e98a:	f000 fd6d 	bl	800f468 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800e98e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800e992:	2b01      	cmp	r3, #1
 800e994:	d022      	beq.n	800e9dc <RadioSetRxConfig+0x2a8>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800e996:	f240 7036 	movw	r0, #1846	; 0x736
 800e99a:	f000 fe1f 	bl	800f5dc <SUBGRF_ReadRegister>
 800e99e:	f040 0104 	orr.w	r1, r0, #4
 800e9a2:	b2c9      	uxtb	r1, r1
 800e9a4:	f240 7036 	movw	r0, #1846	; 0x736
 800e9a8:	f000 fd32 	bl	800f410 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800e9ac:	4b14      	ldr	r3, [pc, #80]	; (800ea00 <RadioSetRxConfig+0x2cc>)
 800e9ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e9b2:	609a      	str	r2, [r3, #8]
}
 800e9b4:	e6e7      	b.n	800e786 <RadioSetRxConfig+0x52>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e9b6:	9a00      	ldr	r2, [sp, #0]
 800e9b8:	2a01      	cmp	r2, #1
 800e9ba:	d103      	bne.n	800e9c4 <RadioSetRxConfig+0x290>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800e9bc:	2d0c      	cmp	r5, #12
 800e9be:	d018      	beq.n	800e9f2 <RadioSetRxConfig+0x2be>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	e7bc      	b.n	800e93e <RadioSetRxConfig+0x20a>
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	e7ba      	b.n	800e93e <RadioSetRxConfig+0x20a>
                if( preambleLen < 12 )
 800e9c8:	f1ba 0f0b 	cmp.w	sl, #11
 800e9cc:	d802      	bhi.n	800e9d4 <RadioSetRxConfig+0x2a0>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800e9ce:	220c      	movs	r2, #12
 800e9d0:	838a      	strh	r2, [r1, #28]
 800e9d2:	e7c0      	b.n	800e956 <RadioSetRxConfig+0x222>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800e9d4:	4b0a      	ldr	r3, [pc, #40]	; (800ea00 <RadioSetRxConfig+0x2cc>)
 800e9d6:	f8a3 a01c 	strh.w	sl, [r3, #28]
 800e9da:	e7bc      	b.n	800e956 <RadioSetRxConfig+0x222>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800e9dc:	f240 7036 	movw	r0, #1846	; 0x736
 800e9e0:	f000 fdfc 	bl	800f5dc <SUBGRF_ReadRegister>
 800e9e4:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800e9e8:	f240 7036 	movw	r0, #1846	; 0x736
 800e9ec:	f000 fd10 	bl	800f410 <SUBGRF_WriteRegister>
 800e9f0:	e7dc      	b.n	800e9ac <RadioSetRxConfig+0x278>
 800e9f2:	4b03      	ldr	r3, [pc, #12]	; (800ea00 <RadioSetRxConfig+0x2cc>)
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800e9fa:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800e9fc:	e7a8      	b.n	800e950 <RadioSetRxConfig+0x21c>
 800e9fe:	bf00      	nop
 800ea00:	20002164 	.word	0x20002164
 800ea04:	2000011c 	.word	0x2000011c
 800ea08:	08010d38 	.word	0x08010d38
 800ea0c:	08010d30 	.word	0x08010d30
 800ea10:	08011580 	.word	0x08011580

0800ea14 <RadioSend>:
{
 800ea14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea18:	b083      	sub	sp, #12
 800ea1a:	4605      	mov	r5, r0
 800ea1c:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800ea1e:	2300      	movs	r3, #0
 800ea20:	461a      	mov	r2, r3
 800ea22:	f240 2101 	movw	r1, #513	; 0x201
 800ea26:	4608      	mov	r0, r1
 800ea28:	f000 fc37 	bl	800f29a <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800ea2c:	4e88      	ldr	r6, [pc, #544]	; (800ec50 <RadioSend+0x23c>)
 800ea2e:	2101      	movs	r1, #1
 800ea30:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800ea34:	f001 f854 	bl	800fae0 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800ea38:	7833      	ldrb	r3, [r6, #0]
 800ea3a:	2b01      	cmp	r3, #1
 800ea3c:	d103      	bne.n	800ea46 <RadioSend+0x32>
 800ea3e:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 800ea42:	2b06      	cmp	r3, #6
 800ea44:	d014      	beq.n	800ea70 <RadioSend+0x5c>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800ea46:	f640 0089 	movw	r0, #2185	; 0x889
 800ea4a:	f000 fdc7 	bl	800f5dc <SUBGRF_ReadRegister>
 800ea4e:	f040 0104 	orr.w	r1, r0, #4
 800ea52:	b2c9      	uxtb	r1, r1
 800ea54:	f640 0089 	movw	r0, #2185	; 0x889
 800ea58:	f000 fcda 	bl	800f410 <SUBGRF_WriteRegister>
    switch( SubgRf.Modem )
 800ea5c:	4b7c      	ldr	r3, [pc, #496]	; (800ec50 <RadioSend+0x23c>)
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	2b04      	cmp	r3, #4
 800ea62:	f200 80a7 	bhi.w	800ebb4 <RadioSend+0x1a0>
 800ea66:	e8df f003 	tbb	[pc, r3]
 800ea6a:	9bb1      	.short	0x9bb1
 800ea6c:	dcb1      	.short	0xdcb1
 800ea6e:	0e          	.byte	0x0e
 800ea6f:	00          	.byte	0x00
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800ea70:	f640 0089 	movw	r0, #2185	; 0x889
 800ea74:	f000 fdb2 	bl	800f5dc <SUBGRF_ReadRegister>
 800ea78:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800ea7c:	f640 0089 	movw	r0, #2185	; 0x889
 800ea80:	f000 fcc6 	bl	800f410 <SUBGRF_WriteRegister>
 800ea84:	e7ea      	b.n	800ea5c <RadioSend+0x48>
    for( i = 0; i < size; i++ )
 800ea86:	2c00      	cmp	r4, #0
 800ea88:	f000 8085 	beq.w	800eb96 <RadioSend+0x182>
 800ea8c:	462b      	mov	r3, r5
 800ea8e:	4971      	ldr	r1, [pc, #452]	; (800ec54 <RadioSend+0x240>)
 800ea90:	1966      	adds	r6, r4, r5
        outBuffer[i] = 0;
 800ea92:	2000      	movs	r0, #0
        inBuffer[i] = ~inBuffer[i];
 800ea94:	781a      	ldrb	r2, [r3, #0]
 800ea96:	43d2      	mvns	r2, r2
 800ea98:	f803 2b01 	strb.w	r2, [r3], #1
        outBuffer[i] = 0;
 800ea9c:	f801 0b01 	strb.w	r0, [r1], #1
    for( i = 0; i < size; i++ )
 800eaa0:	42b3      	cmp	r3, r6
 800eaa2:	d1f7      	bne.n	800ea94 <RadioSend+0x80>
    for( i = 0; i < ( size * 8 ); i++ )
 800eaa4:	00e7      	lsls	r7, r4, #3
 800eaa6:	2000      	movs	r0, #0
 800eaa8:	4603      	mov	r3, r0
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800eaaa:	4e6a      	ldr	r6, [pc, #424]	; (800ec54 <RadioSend+0x240>)
        index_bit = 7 - ( i % 8 );
 800eaac:	425a      	negs	r2, r3
 800eaae:	f003 0c07 	and.w	ip, r3, #7
 800eab2:	f002 0207 	and.w	r2, r2, #7
 800eab6:	bf58      	it	pl
 800eab8:	f1c2 0c00 	rsbpl	ip, r2, #0
 800eabc:	f1cc 0c07 	rsb	ip, ip, #7
 800eac0:	fa5f fc8c 	uxtb.w	ip, ip
        index_byte = i / 8;
 800eac4:	461a      	mov	r2, r3
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	bfb8      	it	lt
 800eaca:	1dda      	addlt	r2, r3, #7
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800eacc:	3301      	adds	r3, #1
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800eace:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 800ead2:	5caa      	ldrb	r2, [r5, r2]
 800ead4:	fa42 fc0c 	asr.w	ip, r2, ip
 800ead8:	f00c 0c01 	and.w	ip, ip, #1
        prevInt ^= currBit;
 800eadc:	4680      	mov	r8, r0
 800eade:	ea8c 0000 	eor.w	r0, ip, r0
        index_byte_out = ( i + 1 ) / 8;
 800eae2:	4619      	mov	r1, r3
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	bfb8      	it	lt
 800eae8:	1dd9      	addlt	r1, r3, #7
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800eaea:	f3c1 01c7 	ubfx	r1, r1, #3, #8
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800eaee:	f1d3 0900 	rsbs	r9, r3, #0
 800eaf2:	f003 0207 	and.w	r2, r3, #7
 800eaf6:	f009 0907 	and.w	r9, r9, #7
 800eafa:	bf58      	it	pl
 800eafc:	f1c9 0200 	rsbpl	r2, r9, #0
 800eb00:	f1c2 0207 	rsb	r2, r2, #7
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800eb04:	b2d2      	uxtb	r2, r2
 800eb06:	fa00 f202 	lsl.w	r2, r0, r2
 800eb0a:	f816 9001 	ldrb.w	r9, [r6, r1]
 800eb0e:	ea42 0209 	orr.w	r2, r2, r9
 800eb12:	5472      	strb	r2, [r6, r1]
    for( i = 0; i < ( size * 8 ); i++ )
 800eb14:	42bb      	cmp	r3, r7
 800eb16:	dbc9      	blt.n	800eaac <RadioSend+0x98>
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800eb18:	0183      	lsls	r3, r0, #6
 800eb1a:	ea43 1ec0 	orr.w	lr, r3, r0, lsl #7
 800eb1e:	fa4f fe8e 	sxtb.w	lr, lr
 800eb22:	45c4      	cmp	ip, r8
 800eb24:	bf0c      	ite	eq
 800eb26:	f04f 0c20 	moveq.w	ip, #32
 800eb2a:	f04f 0c00 	movne.w	ip, #0
 800eb2e:	ea4c 0c0e 	orr.w	ip, ip, lr
 800eb32:	4b48      	ldr	r3, [pc, #288]	; (800ec54 <RadioSend+0x240>)
 800eb34:	f803 c004 	strb.w	ip, [r3, r4]
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800eb38:	4e45      	ldr	r6, [pc, #276]	; (800ec50 <RadioSend+0x23c>)
 800eb3a:	2302      	movs	r3, #2
 800eb3c:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800eb3e:	1c65      	adds	r5, r4, #1
 800eb40:	b2ed      	uxtb	r5, r5
 800eb42:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800eb44:	f106 000e 	add.w	r0, r6, #14
 800eb48:	f000 fec8 	bl	800f8dc <SUBGRF_SetPacketParams>
    SUBGRF_WriteRegister( addr, data );
 800eb4c:	2100      	movs	r1, #0
 800eb4e:	20f1      	movs	r0, #241	; 0xf1
 800eb50:	f000 fc5e 	bl	800f410 <SUBGRF_WriteRegister>
 800eb54:	2100      	movs	r1, #0
 800eb56:	20f0      	movs	r0, #240	; 0xf0
 800eb58:	f000 fc5a 	bl	800f410 <SUBGRF_WriteRegister>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800eb5c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800eb5e:	2b64      	cmp	r3, #100	; 0x64
 800eb60:	d06c      	beq.n	800ec3c <RadioSend+0x228>
    SUBGRF_WriteRegister( addr, data );
 800eb62:	21e1      	movs	r1, #225	; 0xe1
 800eb64:	20f3      	movs	r0, #243	; 0xf3
 800eb66:	f000 fc53 	bl	800f410 <SUBGRF_WriteRegister>
 800eb6a:	2104      	movs	r1, #4
 800eb6c:	20f2      	movs	r0, #242	; 0xf2
 800eb6e:	f000 fc4f 	bl	800f410 <SUBGRF_WriteRegister>
            uint16_t bitNum = ( size * 8 ) + 2;
 800eb72:	00e1      	lsls	r1, r4, #3
 800eb74:	1c8c      	adds	r4, r1, #2
    SUBGRF_WriteRegister( addr, data );
 800eb76:	0a09      	lsrs	r1, r1, #8
 800eb78:	20f4      	movs	r0, #244	; 0xf4
 800eb7a:	f000 fc49 	bl	800f410 <SUBGRF_WriteRegister>
 800eb7e:	f004 01fe 	and.w	r1, r4, #254	; 0xfe
 800eb82:	20f5      	movs	r0, #245	; 0xf5
 800eb84:	f000 fc44 	bl	800f410 <SUBGRF_WriteRegister>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 800eb88:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800eb8c:	4629      	mov	r1, r5
 800eb8e:	4831      	ldr	r0, [pc, #196]	; (800ec54 <RadioSend+0x240>)
 800eb90:	f000 ff73 	bl	800fa7a <SUBGRF_SendPayload>
            break;
 800eb94:	e00e      	b.n	800ebb4 <RadioSend+0x1a0>
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800eb96:	f04f 0e00 	mov.w	lr, #0
 800eb9a:	f04f 0c20 	mov.w	ip, #32
 800eb9e:	e7c6      	b.n	800eb2e <RadioSend+0x11a>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800eba0:	482b      	ldr	r0, [pc, #172]	; (800ec50 <RadioSend+0x23c>)
 800eba2:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800eba4:	300e      	adds	r0, #14
 800eba6:	f000 fe99 	bl	800f8dc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800ebaa:	2200      	movs	r2, #0
 800ebac:	4621      	mov	r1, r4
 800ebae:	4628      	mov	r0, r5
 800ebb0:	f000 ff63 	bl	800fa7a <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800ebb4:	4c28      	ldr	r4, [pc, #160]	; (800ec58 <RadioSend+0x244>)
 800ebb6:	4b26      	ldr	r3, [pc, #152]	; (800ec50 <RadioSend+0x23c>)
 800ebb8:	6859      	ldr	r1, [r3, #4]
 800ebba:	4620      	mov	r0, r4
 800ebbc:	f001 fd8a 	bl	80106d4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	f001 fd41 	bl	8010648 <UTIL_TIMER_Start>
}
 800ebc6:	b003      	add	sp, #12
 800ebc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if ( 1UL == RFW_Is_Init( ) )
 800ebcc:	f001 f86e 	bl	800fcac <RFW_Is_Init>
 800ebd0:	2801      	cmp	r0, #1
 800ebd2:	d00a      	beq.n	800ebea <RadioSend+0x1d6>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800ebd4:	481e      	ldr	r0, [pc, #120]	; (800ec50 <RadioSend+0x23c>)
 800ebd6:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ebd8:	300e      	adds	r0, #14
 800ebda:	f000 fe7f 	bl	800f8dc <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 800ebde:	2200      	movs	r2, #0
 800ebe0:	4621      	mov	r1, r4
 800ebe2:	4628      	mov	r0, r5
 800ebe4:	f000 ff49 	bl	800fa7a <SUBGRF_SendPayload>
 800ebe8:	e7e4      	b.n	800ebb4 <RadioSend+0x1a0>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800ebea:	f10d 0207 	add.w	r2, sp, #7
 800ebee:	4621      	mov	r1, r4
 800ebf0:	4628      	mov	r0, r5
 800ebf2:	f001 f860 	bl	800fcb6 <RFW_TransmitInit>
 800ebf6:	b968      	cbnz	r0, 800ec14 <RadioSend+0x200>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800ebf8:	4815      	ldr	r0, [pc, #84]	; (800ec50 <RadioSend+0x23c>)
 800ebfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ebfe:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ec00:	300e      	adds	r0, #14
 800ec02:	f000 fe6b 	bl	800f8dc <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 800ec06:	2200      	movs	r2, #0
 800ec08:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ec0c:	4628      	mov	r0, r5
 800ec0e:	f000 ff34 	bl	800fa7a <SUBGRF_SendPayload>
 800ec12:	e7cf      	b.n	800ebb4 <RadioSend+0x1a0>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 800ec14:	4b11      	ldr	r3, [pc, #68]	; (800ec5c <RadioSend+0x248>)
 800ec16:	2201      	movs	r2, #1
 800ec18:	2100      	movs	r1, #0
 800ec1a:	2002      	movs	r0, #2
 800ec1c:	f001 fe8a 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
                return;
 800ec20:	e7d1      	b.n	800ebc6 <RadioSend+0x1b2>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800ec22:	480b      	ldr	r0, [pc, #44]	; (800ec50 <RadioSend+0x23c>)
 800ec24:	2302      	movs	r3, #2
 800ec26:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800ec28:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ec2a:	300e      	adds	r0, #14
 800ec2c:	f000 fe56 	bl	800f8dc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800ec30:	2200      	movs	r2, #0
 800ec32:	4621      	mov	r1, r4
 800ec34:	4628      	mov	r0, r5
 800ec36:	f000 ff20 	bl	800fa7a <SUBGRF_SendPayload>
            break;
 800ec3a:	e7bb      	b.n	800ebb4 <RadioSend+0x1a0>
    SUBGRF_WriteRegister( addr, data );
 800ec3c:	2170      	movs	r1, #112	; 0x70
 800ec3e:	20f3      	movs	r0, #243	; 0xf3
 800ec40:	f000 fbe6 	bl	800f410 <SUBGRF_WriteRegister>
 800ec44:	211d      	movs	r1, #29
 800ec46:	20f2      	movs	r0, #242	; 0xf2
 800ec48:	f000 fbe2 	bl	800f410 <SUBGRF_WriteRegister>
}
 800ec4c:	e791      	b.n	800eb72 <RadioSend+0x15e>
 800ec4e:	bf00      	nop
 800ec50:	20002164 	.word	0x20002164
 800ec54:	20002048 	.word	0x20002048
 800ec58:	200021c0 	.word	0x200021c0
 800ec5c:	08011514 	.word	0x08011514

0800ec60 <RadioIrqProcess>:
{
 800ec60:	b530      	push	{r4, r5, lr}
 800ec62:	b083      	sub	sp, #12
    uint8_t size = 0;
 800ec64:	2300      	movs	r3, #0
 800ec66:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 800ec6a:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 800ec6c:	4ba9      	ldr	r3, [pc, #676]	; (800ef14 <RadioIrqProcess+0x2b4>)
 800ec6e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800ec72:	2b20      	cmp	r3, #32
 800ec74:	d828      	bhi.n	800ecc8 <RadioIrqProcess+0x68>
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	f000 8130 	beq.w	800eedc <RadioIrqProcess+0x27c>
 800ec7c:	3b01      	subs	r3, #1
 800ec7e:	2b1f      	cmp	r3, #31
 800ec80:	f200 812c 	bhi.w	800eedc <RadioIrqProcess+0x27c>
 800ec84:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ec88:	0077005f 	.word	0x0077005f
 800ec8c:	00e7012a 	.word	0x00e7012a
 800ec90:	012a012a 	.word	0x012a012a
 800ec94:	0117012a 	.word	0x0117012a
 800ec98:	012a012a 	.word	0x012a012a
 800ec9c:	012a012a 	.word	0x012a012a
 800eca0:	012a012a 	.word	0x012a012a
 800eca4:	0124012a 	.word	0x0124012a
 800eca8:	012a012a 	.word	0x012a012a
 800ecac:	012a012a 	.word	0x012a012a
 800ecb0:	012a012a 	.word	0x012a012a
 800ecb4:	012a012a 	.word	0x012a012a
 800ecb8:	012a012a 	.word	0x012a012a
 800ecbc:	012a012a 	.word	0x012a012a
 800ecc0:	012a012a 	.word	0x012a012a
 800ecc4:	012c012a 	.word	0x012c012a
 800ecc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eccc:	f000 80a7 	beq.w	800ee1e <RadioIrqProcess+0x1be>
 800ecd0:	d924      	bls.n	800ed1c <RadioIrqProcess+0xbc>
 800ecd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecd6:	f040 8101 	bne.w	800eedc <RadioIrqProcess+0x27c>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800ecda:	4b8f      	ldr	r3, [pc, #572]	; (800ef18 <RadioIrqProcess+0x2b8>)
 800ecdc:	2201      	movs	r2, #1
 800ecde:	2100      	movs	r1, #0
 800ece0:	2002      	movs	r0, #2
 800ece2:	f001 fe27 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800ece6:	f000 f9c7 	bl	800f078 <SUBGRF_GetOperatingMode>
 800ecea:	2804      	cmp	r0, #4
 800ecec:	f000 80a4 	beq.w	800ee38 <RadioIrqProcess+0x1d8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800ecf0:	f000 f9c2 	bl	800f078 <SUBGRF_GetOperatingMode>
 800ecf4:	2805      	cmp	r0, #5
 800ecf6:	f040 80f1 	bne.w	800eedc <RadioIrqProcess+0x27c>
            TimerStop( &RxTimeoutTimer );
 800ecfa:	4888      	ldr	r0, [pc, #544]	; (800ef1c <RadioIrqProcess+0x2bc>)
 800ecfc:	f001 fc44 	bl	8010588 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800ed00:	2000      	movs	r0, #0
 800ed02:	f000 f9bf 	bl	800f084 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800ed06:	4b86      	ldr	r3, [pc, #536]	; (800ef20 <RadioIrqProcess+0x2c0>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	f000 80e6 	beq.w	800eedc <RadioIrqProcess+0x27c>
 800ed10:	68db      	ldr	r3, [r3, #12]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	f000 80e2 	beq.w	800eedc <RadioIrqProcess+0x27c>
                RadioEvents->RxTimeout( );
 800ed18:	4798      	blx	r3
 800ed1a:	e0df      	b.n	800eedc <RadioIrqProcess+0x27c>
    switch( SubgRf.RadioIrq )
 800ed1c:	2b40      	cmp	r3, #64	; 0x40
 800ed1e:	f000 8111 	beq.w	800ef44 <RadioIrqProcess+0x2e4>
 800ed22:	2b80      	cmp	r3, #128	; 0x80
 800ed24:	f040 80da 	bne.w	800eedc <RadioIrqProcess+0x27c>
        SUBGRF_SetStandby( STDBY_RC );
 800ed28:	2000      	movs	r0, #0
 800ed2a:	f000 f9ab 	bl	800f084 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800ed2e:	4b7c      	ldr	r3, [pc, #496]	; (800ef20 <RadioIrqProcess+0x2c0>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	f000 80d2 	beq.w	800eedc <RadioIrqProcess+0x27c>
 800ed38:	699b      	ldr	r3, [r3, #24]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	f000 80ce 	beq.w	800eedc <RadioIrqProcess+0x27c>
            RadioEvents->CadDone( false );
 800ed40:	2000      	movs	r0, #0
 800ed42:	4798      	blx	r3
 800ed44:	e0ca      	b.n	800eedc <RadioIrqProcess+0x27c>
        TimerStop( &TxTimeoutTimer );
 800ed46:	4877      	ldr	r0, [pc, #476]	; (800ef24 <RadioIrqProcess+0x2c4>)
 800ed48:	f001 fc1e 	bl	8010588 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800ed4c:	2000      	movs	r0, #0
 800ed4e:	f000 f999 	bl	800f084 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800ed52:	f000 ffad 	bl	800fcb0 <RFW_Is_LongPacketModeEnabled>
 800ed56:	2801      	cmp	r0, #1
 800ed58:	d00a      	beq.n	800ed70 <RadioIrqProcess+0x110>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800ed5a:	4b71      	ldr	r3, [pc, #452]	; (800ef20 <RadioIrqProcess+0x2c0>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	f000 80bc 	beq.w	800eedc <RadioIrqProcess+0x27c>
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	f000 80b8 	beq.w	800eedc <RadioIrqProcess+0x27c>
            RadioEvents->TxDone( );
 800ed6c:	4798      	blx	r3
 800ed6e:	e0b5      	b.n	800eedc <RadioIrqProcess+0x27c>
            RFW_DeInit_TxLongPacket( );
 800ed70:	f000 ffa7 	bl	800fcc2 <RFW_DeInit_TxLongPacket>
 800ed74:	e7f1      	b.n	800ed5a <RadioIrqProcess+0xfa>
        TimerStop( &RxTimeoutTimer );
 800ed76:	4869      	ldr	r0, [pc, #420]	; (800ef1c <RadioIrqProcess+0x2bc>)
 800ed78:	f001 fc06 	bl	8010588 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800ed7c:	4b65      	ldr	r3, [pc, #404]	; (800ef14 <RadioIrqProcess+0x2b4>)
 800ed7e:	785b      	ldrb	r3, [r3, #1]
 800ed80:	b303      	cbz	r3, 800edc4 <RadioIrqProcess+0x164>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800ed82:	22ff      	movs	r2, #255	; 0xff
 800ed84:	f10d 0107 	add.w	r1, sp, #7
 800ed88:	4867      	ldr	r0, [pc, #412]	; (800ef28 <RadioIrqProcess+0x2c8>)
 800ed8a:	f000 fe8f 	bl	800faac <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800ed8e:	4867      	ldr	r0, [pc, #412]	; (800ef2c <RadioIrqProcess+0x2cc>)
 800ed90:	f000 fb00 	bl	800f394 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800ed94:	4b62      	ldr	r3, [pc, #392]	; (800ef20 <RadioIrqProcess+0x2c0>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	f000 809f 	beq.w	800eedc <RadioIrqProcess+0x27c>
 800ed9e:	689c      	ldr	r4, [r3, #8]
 800eda0:	2c00      	cmp	r4, #0
 800eda2:	f000 809b 	beq.w	800eedc <RadioIrqProcess+0x27c>
            switch( SubgRf.PacketStatus.packetType )
 800eda6:	4b5b      	ldr	r3, [pc, #364]	; (800ef14 <RadioIrqProcess+0x2b4>)
 800eda8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800edac:	2b01      	cmp	r3, #1
 800edae:	d11d      	bne.n	800edec <RadioIrqProcess+0x18c>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800edb0:	4a58      	ldr	r2, [pc, #352]	; (800ef14 <RadioIrqProcess+0x2b4>)
 800edb2:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 800edb6:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 800edba:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800edbe:	485a      	ldr	r0, [pc, #360]	; (800ef28 <RadioIrqProcess+0x2c8>)
 800edc0:	47a0      	blx	r4
                break;
 800edc2:	e08b      	b.n	800eedc <RadioIrqProcess+0x27c>
            SUBGRF_SetStandby( STDBY_RC );
 800edc4:	2000      	movs	r0, #0
 800edc6:	f000 f95d 	bl	800f084 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800edca:	2100      	movs	r1, #0
 800edcc:	f640 1002 	movw	r0, #2306	; 0x902
 800edd0:	f000 fb1e 	bl	800f410 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800edd4:	f640 1044 	movw	r0, #2372	; 0x944
 800edd8:	f000 fc00 	bl	800f5dc <SUBGRF_ReadRegister>
 800eddc:	f040 0102 	orr.w	r1, r0, #2
 800ede0:	b2c9      	uxtb	r1, r1
 800ede2:	f640 1044 	movw	r0, #2372	; 0x944
 800ede6:	f000 fb13 	bl	800f410 <SUBGRF_WriteRegister>
 800edea:	e7ca      	b.n	800ed82 <RadioIrqProcess+0x122>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800edec:	4c49      	ldr	r4, [pc, #292]	; (800ef14 <RadioIrqProcess+0x2b4>)
 800edee:	4669      	mov	r1, sp
 800edf0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800edf2:	f000 ff0d 	bl	800fc10 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 800edf6:	9b00      	ldr	r3, [sp, #0]
 800edf8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800edfc:	4a4c      	ldr	r2, [pc, #304]	; (800ef30 <RadioIrqProcess+0x2d0>)
 800edfe:	fb82 1203 	smull	r1, r2, r2, r3
 800ee02:	17db      	asrs	r3, r3, #31
 800ee04:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800ee08:	4a45      	ldr	r2, [pc, #276]	; (800ef20 <RadioIrqProcess+0x2c0>)
 800ee0a:	6812      	ldr	r2, [r2, #0]
 800ee0c:	6895      	ldr	r5, [r2, #8]
 800ee0e:	b25b      	sxtb	r3, r3
 800ee10:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 800ee14:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ee18:	4843      	ldr	r0, [pc, #268]	; (800ef28 <RadioIrqProcess+0x2c8>)
 800ee1a:	47a8      	blx	r5
                break;
 800ee1c:	e05e      	b.n	800eedc <RadioIrqProcess+0x27c>
        SUBGRF_SetStandby( STDBY_RC );
 800ee1e:	2000      	movs	r0, #0
 800ee20:	f000 f930 	bl	800f084 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800ee24:	4b3e      	ldr	r3, [pc, #248]	; (800ef20 <RadioIrqProcess+0x2c0>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d057      	beq.n	800eedc <RadioIrqProcess+0x27c>
 800ee2c:	699b      	ldr	r3, [r3, #24]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d054      	beq.n	800eedc <RadioIrqProcess+0x27c>
            RadioEvents->CadDone( true );
 800ee32:	2001      	movs	r0, #1
 800ee34:	4798      	blx	r3
 800ee36:	e051      	b.n	800eedc <RadioIrqProcess+0x27c>
            TimerStop( &TxTimeoutTimer );
 800ee38:	483a      	ldr	r0, [pc, #232]	; (800ef24 <RadioIrqProcess+0x2c4>)
 800ee3a:	f001 fba5 	bl	8010588 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800ee3e:	2000      	movs	r0, #0
 800ee40:	f000 f920 	bl	800f084 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800ee44:	4b36      	ldr	r3, [pc, #216]	; (800ef20 <RadioIrqProcess+0x2c0>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d047      	beq.n	800eedc <RadioIrqProcess+0x27c>
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d044      	beq.n	800eedc <RadioIrqProcess+0x27c>
                RadioEvents->TxTimeout( );
 800ee52:	4798      	blx	r3
 800ee54:	e042      	b.n	800eedc <RadioIrqProcess+0x27c>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800ee56:	4b37      	ldr	r3, [pc, #220]	; (800ef34 <RadioIrqProcess+0x2d4>)
 800ee58:	2201      	movs	r2, #1
 800ee5a:	2100      	movs	r1, #0
 800ee5c:	2002      	movs	r0, #2
 800ee5e:	f001 fd69 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800ee62:	4b2c      	ldr	r3, [pc, #176]	; (800ef14 <RadioIrqProcess+0x2b4>)
 800ee64:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800ee66:	b3c9      	cbz	r1, 800eedc <RadioIrqProcess+0x27c>
    SUBGRF_WriteRegister( addr, data );
 800ee68:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800ee6c:	f640 1003 	movw	r0, #2307	; 0x903
 800ee70:	f000 face 	bl	800f410 <SUBGRF_WriteRegister>
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 800ee74:	4c27      	ldr	r4, [pc, #156]	; (800ef14 <RadioIrqProcess+0x2b4>)
    SUBGRF_WriteRegister( addr, data );
 800ee76:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800ee7a:	f640 1004 	movw	r0, #2308	; 0x904
 800ee7e:	f000 fac7 	bl	800f410 <SUBGRF_WriteRegister>
 800ee82:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 800ee86:	f640 1005 	movw	r0, #2309	; 0x905
 800ee8a:	f000 fac1 	bl	800f410 <SUBGRF_WriteRegister>
    return SUBGRF_ReadRegister( addr );
 800ee8e:	f640 1002 	movw	r0, #2306	; 0x902
 800ee92:	f000 fba3 	bl	800f5dc <SUBGRF_ReadRegister>
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 800ee96:	f040 0101 	orr.w	r1, r0, #1
    SUBGRF_WriteRegister( addr, data );
 800ee9a:	b2c9      	uxtb	r1, r1
 800ee9c:	f640 1002 	movw	r0, #2306	; 0x902
 800eea0:	f000 fab6 	bl	800f410 <SUBGRF_WriteRegister>
          SubgRf.RxDcPreambleDetectTimeout = 0;
 800eea4:	2200      	movs	r2, #0
 800eea6:	65a2      	str	r2, [r4, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800eea8:	4613      	mov	r3, r2
 800eeaa:	f240 2162 	movw	r1, #610	; 0x262
 800eeae:	4608      	mov	r0, r1
 800eeb0:	f000 f9f3 	bl	800f29a <SUBGRF_SetDioIrqParams>
 800eeb4:	e012      	b.n	800eedc <RadioIrqProcess+0x27c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800eeb6:	4b20      	ldr	r3, [pc, #128]	; (800ef38 <RadioIrqProcess+0x2d8>)
 800eeb8:	2201      	movs	r2, #1
 800eeba:	2100      	movs	r1, #0
 800eebc:	2002      	movs	r0, #2
 800eebe:	f001 fd39 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 800eec2:	f000 fef3 	bl	800fcac <RFW_Is_Init>
 800eec6:	2801      	cmp	r0, #1
 800eec8:	d108      	bne.n	800eedc <RadioIrqProcess+0x27c>
            RFW_ReceivePayload( );
 800eeca:	f000 fefb 	bl	800fcc4 <RFW_ReceivePayload>
 800eece:	e005      	b.n	800eedc <RadioIrqProcess+0x27c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800eed0:	4b1a      	ldr	r3, [pc, #104]	; (800ef3c <RadioIrqProcess+0x2dc>)
 800eed2:	2201      	movs	r2, #1
 800eed4:	2100      	movs	r1, #0
 800eed6:	2002      	movs	r0, #2
 800eed8:	f001 fd2c 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
}
 800eedc:	b003      	add	sp, #12
 800eede:	bd30      	pop	{r4, r5, pc}
        TimerStop( &RxTimeoutTimer );
 800eee0:	480e      	ldr	r0, [pc, #56]	; (800ef1c <RadioIrqProcess+0x2bc>)
 800eee2:	f001 fb51 	bl	8010588 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800eee6:	4b0b      	ldr	r3, [pc, #44]	; (800ef14 <RadioIrqProcess+0x2b4>)
 800eee8:	785b      	ldrb	r3, [r3, #1]
 800eeea:	b173      	cbz	r3, 800ef0a <RadioIrqProcess+0x2aa>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800eeec:	4b0c      	ldr	r3, [pc, #48]	; (800ef20 <RadioIrqProcess+0x2c0>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d0f3      	beq.n	800eedc <RadioIrqProcess+0x27c>
 800eef4:	68db      	ldr	r3, [r3, #12]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d0f0      	beq.n	800eedc <RadioIrqProcess+0x27c>
            RadioEvents->RxTimeout( );
 800eefa:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800eefc:	4b10      	ldr	r3, [pc, #64]	; (800ef40 <RadioIrqProcess+0x2e0>)
 800eefe:	2201      	movs	r2, #1
 800ef00:	2100      	movs	r1, #0
 800ef02:	2002      	movs	r0, #2
 800ef04:	f001 fd16 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
 800ef08:	e7e8      	b.n	800eedc <RadioIrqProcess+0x27c>
            SUBGRF_SetStandby( STDBY_RC );
 800ef0a:	2000      	movs	r0, #0
 800ef0c:	f000 f8ba 	bl	800f084 <SUBGRF_SetStandby>
 800ef10:	e7ec      	b.n	800eeec <RadioIrqProcess+0x28c>
 800ef12:	bf00      	nop
 800ef14:	20002164 	.word	0x20002164
 800ef18:	0801152c 	.word	0x0801152c
 800ef1c:	2000214c 	.word	0x2000214c
 800ef20:	20002148 	.word	0x20002148
 800ef24:	200021c0 	.word	0x200021c0
 800ef28:	20002048 	.word	0x20002048
 800ef2c:	20002188 	.word	0x20002188
 800ef30:	10624dd3 	.word	0x10624dd3
 800ef34:	08011540 	.word	0x08011540
 800ef38:	0801154c 	.word	0x0801154c
 800ef3c:	08011558 	.word	0x08011558
 800ef40:	08011564 	.word	0x08011564
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800ef44:	4b0a      	ldr	r3, [pc, #40]	; (800ef70 <RadioIrqProcess+0x310>)
 800ef46:	2201      	movs	r2, #1
 800ef48:	2100      	movs	r1, #0
 800ef4a:	2002      	movs	r0, #2
 800ef4c:	f001 fcf2 	bl	8010934 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800ef50:	4b08      	ldr	r3, [pc, #32]	; (800ef74 <RadioIrqProcess+0x314>)
 800ef52:	785b      	ldrb	r3, [r3, #1]
 800ef54:	b143      	cbz	r3, 800ef68 <RadioIrqProcess+0x308>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800ef56:	4b08      	ldr	r3, [pc, #32]	; (800ef78 <RadioIrqProcess+0x318>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d0be      	beq.n	800eedc <RadioIrqProcess+0x27c>
 800ef5e:	691b      	ldr	r3, [r3, #16]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d0bb      	beq.n	800eedc <RadioIrqProcess+0x27c>
            RadioEvents->RxError( );
 800ef64:	4798      	blx	r3
}
 800ef66:	e7b9      	b.n	800eedc <RadioIrqProcess+0x27c>
            SUBGRF_SetStandby( STDBY_RC );
 800ef68:	2000      	movs	r0, #0
 800ef6a:	f000 f88b 	bl	800f084 <SUBGRF_SetStandby>
 800ef6e:	e7f2      	b.n	800ef56 <RadioIrqProcess+0x2f6>
 800ef70:	08011570 	.word	0x08011570
 800ef74:	20002164 	.word	0x20002164
 800ef78:	20002148 	.word	0x20002148

0800ef7c <RadioOnDioIrq>:
{
 800ef7c:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 800ef7e:	4b03      	ldr	r3, [pc, #12]	; (800ef8c <RadioOnDioIrq+0x10>)
 800ef80:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 800ef84:	f7ff fe6c 	bl	800ec60 <RadioIrqProcess>
}
 800ef88:	bd08      	pop	{r3, pc}
 800ef8a:	bf00      	nop
 800ef8c:	20002164 	.word	0x20002164

0800ef90 <RadioTxPrbs>:
{
 800ef90:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800ef92:	2101      	movs	r1, #1
 800ef94:	4b07      	ldr	r3, [pc, #28]	; (800efb4 <RadioTxPrbs+0x24>)
 800ef96:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800ef9a:	f000 fda1 	bl	800fae0 <SUBGRF_SetSwitch>
    SUBGRF_WriteRegister( addr, data );
 800ef9e:	212d      	movs	r1, #45	; 0x2d
 800efa0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800efa4:	f000 fa34 	bl	800f410 <SUBGRF_WriteRegister>
    SUBGRF_SetTxInfinitePreamble( );
 800efa8:	f000 f8e7 	bl	800f17a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800efac:	4802      	ldr	r0, [pc, #8]	; (800efb8 <RadioTxPrbs+0x28>)
 800efae:	f000 f881 	bl	800f0b4 <SUBGRF_SetTx>
}
 800efb2:	bd08      	pop	{r3, pc}
 800efb4:	20002164 	.word	0x20002164
 800efb8:	000fffff 	.word	0x000fffff

0800efbc <RadioIsChannelFree>:
{
 800efbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efbe:	b08b      	sub	sp, #44	; 0x2c
 800efc0:	4604      	mov	r4, r0
 800efc2:	460f      	mov	r7, r1
 800efc4:	4616      	mov	r6, r2
 800efc6:	461d      	mov	r5, r3
    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 800efc8:	f7fe fee0 	bl	800dd8c <RadioStandby>
    RadioSetModem( MODEM_FSK );
 800efcc:	2000      	movs	r0, #0
 800efce:	f7fe ff7f 	bl	800ded0 <RadioSetModem>
    SUBGRF_SetRfFrequency( freq );
 800efd2:	4620      	mov	r0, r4
 800efd4:	f000 f998 	bl	800f308 <SUBGRF_SetRfFrequency>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800efd8:	2301      	movs	r3, #1
 800efda:	9309      	str	r3, [sp, #36]	; 0x24
 800efdc:	2400      	movs	r4, #0
 800efde:	9408      	str	r4, [sp, #32]
 800efe0:	9407      	str	r4, [sp, #28]
 800efe2:	9406      	str	r4, [sp, #24]
 800efe4:	9405      	str	r4, [sp, #20]
 800efe6:	9404      	str	r4, [sp, #16]
 800efe8:	9403      	str	r4, [sp, #12]
 800efea:	9402      	str	r4, [sp, #8]
 800efec:	2303      	movs	r3, #3
 800efee:	9301      	str	r3, [sp, #4]
 800eff0:	9700      	str	r7, [sp, #0]
 800eff2:	4623      	mov	r3, r4
 800eff4:	f44f 7216 	mov.w	r2, #600	; 0x258
 800eff8:	4639      	mov	r1, r7
 800effa:	4620      	mov	r0, r4
 800effc:	f7ff fb9a 	bl	800e734 <RadioSetRxConfig>
    RadioRx( 0 );
 800f000:	4620      	mov	r0, r4
 800f002:	f7fe ff1f 	bl	800de44 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800f006:	f7fe fed6 	bl	800ddb6 <RadioGetWakeupTime>
 800f00a:	f7f2 faf9 	bl	8001600 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800f00e:	f001 fa75 	bl	80104fc <UTIL_TIMER_GetCurrentTime>
 800f012:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800f014:	4620      	mov	r0, r4
 800f016:	f001 fa7b 	bl	8010510 <UTIL_TIMER_GetElapsedTime>
 800f01a:	42a8      	cmp	r0, r5
 800f01c:	d206      	bcs.n	800f02c <RadioIsChannelFree+0x70>
    return SUBGRF_GetRssiInst( );
 800f01e:	f000 f9ab 	bl	800f378 <SUBGRF_GetRssiInst>
        if( rssi > rssiThresh )
 800f022:	b200      	sxth	r0, r0
 800f024:	4286      	cmp	r6, r0
 800f026:	daf5      	bge.n	800f014 <RadioIsChannelFree+0x58>
            status = false;
 800f028:	2400      	movs	r4, #0
 800f02a:	e000      	b.n	800f02e <RadioIsChannelFree+0x72>
    bool status = true;
 800f02c:	2401      	movs	r4, #1
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 800f02e:	f7fe fead 	bl	800dd8c <RadioStandby>
}
 800f032:	4620      	mov	r0, r4
 800f034:	b00b      	add	sp, #44	; 0x2c
 800f036:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f038 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800f038:	b510      	push	{r4, lr}
 800f03a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f03c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f040:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800f042:	460a      	mov	r2, r1
 800f044:	4601      	mov	r1, r0
 800f046:	4803      	ldr	r0, [pc, #12]	; (800f054 <SUBGRF_WriteCommand+0x1c>)
 800f048:	f7f5 fe52 	bl	8004cf0 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f04c:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 800f050:	bd10      	pop	{r4, pc}
 800f052:	bf00      	nop
 800f054:	20000638 	.word	0x20000638

0800f058 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800f058:	b510      	push	{r4, lr}
 800f05a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f05c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f060:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800f062:	460a      	mov	r2, r1
 800f064:	4601      	mov	r1, r0
 800f066:	4803      	ldr	r0, [pc, #12]	; (800f074 <SUBGRF_ReadCommand+0x1c>)
 800f068:	f7f5 fe90 	bl	8004d8c <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f06c:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 800f070:	bd10      	pop	{r4, pc}
 800f072:	bf00      	nop
 800f074:	20000638 	.word	0x20000638

0800f078 <SUBGRF_GetOperatingMode>:
}
 800f078:	4b01      	ldr	r3, [pc, #4]	; (800f080 <SUBGRF_GetOperatingMode+0x8>)
 800f07a:	7818      	ldrb	r0, [r3, #0]
 800f07c:	4770      	bx	lr
 800f07e:	bf00      	nop
 800f080:	200021de 	.word	0x200021de

0800f084 <SUBGRF_SetStandby>:
{
 800f084:	b500      	push	{lr}
 800f086:	b083      	sub	sp, #12
 800f088:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800f08c:	2201      	movs	r2, #1
 800f08e:	f10d 0107 	add.w	r1, sp, #7
 800f092:	2080      	movs	r0, #128	; 0x80
 800f094:	f7ff ffd0 	bl	800f038 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800f098:	f89d 3007 	ldrb.w	r3, [sp, #7]
        OperatingMode = MODE_STDBY_XOSC;
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	bf0c      	ite	eq
 800f0a0:	2201      	moveq	r2, #1
 800f0a2:	2202      	movne	r2, #2
 800f0a4:	4b02      	ldr	r3, [pc, #8]	; (800f0b0 <SUBGRF_SetStandby+0x2c>)
 800f0a6:	701a      	strb	r2, [r3, #0]
}
 800f0a8:	b003      	add	sp, #12
 800f0aa:	f85d fb04 	ldr.w	pc, [sp], #4
 800f0ae:	bf00      	nop
 800f0b0:	200021de 	.word	0x200021de

0800f0b4 <SUBGRF_SetTx>:
{
 800f0b4:	b500      	push	{lr}
 800f0b6:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 800f0b8:	4b09      	ldr	r3, [pc, #36]	; (800f0e0 <SUBGRF_SetTx+0x2c>)
 800f0ba:	2204      	movs	r2, #4
 800f0bc:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800f0be:	0c03      	lsrs	r3, r0, #16
 800f0c0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800f0c4:	0a03      	lsrs	r3, r0, #8
 800f0c6:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800f0ca:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800f0ce:	2203      	movs	r2, #3
 800f0d0:	a901      	add	r1, sp, #4
 800f0d2:	2083      	movs	r0, #131	; 0x83
 800f0d4:	f7ff ffb0 	bl	800f038 <SUBGRF_WriteCommand>
}
 800f0d8:	b003      	add	sp, #12
 800f0da:	f85d fb04 	ldr.w	pc, [sp], #4
 800f0de:	bf00      	nop
 800f0e0:	200021de 	.word	0x200021de

0800f0e4 <SUBGRF_SetRx>:
{
 800f0e4:	b500      	push	{lr}
 800f0e6:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 800f0e8:	4b09      	ldr	r3, [pc, #36]	; (800f110 <SUBGRF_SetRx+0x2c>)
 800f0ea:	2205      	movs	r2, #5
 800f0ec:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800f0ee:	0c03      	lsrs	r3, r0, #16
 800f0f0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800f0f4:	0a03      	lsrs	r3, r0, #8
 800f0f6:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800f0fa:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800f0fe:	2203      	movs	r2, #3
 800f100:	a901      	add	r1, sp, #4
 800f102:	2082      	movs	r0, #130	; 0x82
 800f104:	f7ff ff98 	bl	800f038 <SUBGRF_WriteCommand>
}
 800f108:	b003      	add	sp, #12
 800f10a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f10e:	bf00      	nop
 800f110:	200021de 	.word	0x200021de

0800f114 <SUBGRF_SetRxDutyCycle>:
{
 800f114:	b500      	push	{lr}
 800f116:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800f118:	0c03      	lsrs	r3, r0, #16
 800f11a:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800f11e:	0a03      	lsrs	r3, r0, #8
 800f120:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800f124:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800f128:	0c0b      	lsrs	r3, r1, #16
 800f12a:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800f12e:	0a0b      	lsrs	r3, r1, #8
 800f130:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800f134:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800f138:	2206      	movs	r2, #6
 800f13a:	4669      	mov	r1, sp
 800f13c:	2094      	movs	r0, #148	; 0x94
 800f13e:	f7ff ff7b 	bl	800f038 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800f142:	4b03      	ldr	r3, [pc, #12]	; (800f150 <SUBGRF_SetRxDutyCycle+0x3c>)
 800f144:	2206      	movs	r2, #6
 800f146:	701a      	strb	r2, [r3, #0]
}
 800f148:	b003      	add	sp, #12
 800f14a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f14e:	bf00      	nop
 800f150:	200021de 	.word	0x200021de

0800f154 <SUBGRF_SetCad>:
{
 800f154:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800f156:	2200      	movs	r2, #0
 800f158:	4611      	mov	r1, r2
 800f15a:	20c5      	movs	r0, #197	; 0xc5
 800f15c:	f7ff ff6c 	bl	800f038 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800f160:	4b01      	ldr	r3, [pc, #4]	; (800f168 <SUBGRF_SetCad+0x14>)
 800f162:	2207      	movs	r2, #7
 800f164:	701a      	strb	r2, [r3, #0]
}
 800f166:	bd08      	pop	{r3, pc}
 800f168:	200021de 	.word	0x200021de

0800f16c <SUBGRF_SetTxContinuousWave>:
{
 800f16c:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800f16e:	2200      	movs	r2, #0
 800f170:	4611      	mov	r1, r2
 800f172:	20d1      	movs	r0, #209	; 0xd1
 800f174:	f7ff ff60 	bl	800f038 <SUBGRF_WriteCommand>
}
 800f178:	bd08      	pop	{r3, pc}

0800f17a <SUBGRF_SetTxInfinitePreamble>:
{
 800f17a:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800f17c:	2200      	movs	r2, #0
 800f17e:	4611      	mov	r1, r2
 800f180:	20d2      	movs	r0, #210	; 0xd2
 800f182:	f7ff ff59 	bl	800f038 <SUBGRF_WriteCommand>
}
 800f186:	bd08      	pop	{r3, pc}

0800f188 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 800f188:	b500      	push	{lr}
 800f18a:	b083      	sub	sp, #12
 800f18c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800f190:	2201      	movs	r2, #1
 800f192:	f10d 0107 	add.w	r1, sp, #7
 800f196:	209f      	movs	r0, #159	; 0x9f
 800f198:	f7ff ff4e 	bl	800f038 <SUBGRF_WriteCommand>
}
 800f19c:	b003      	add	sp, #12
 800f19e:	f85d fb04 	ldr.w	pc, [sp], #4

0800f1a2 <SUBGRF_SetRegulatorMode>:
{
 800f1a2:	b500      	push	{lr}
 800f1a4:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800f1a6:	f7f7 fbef 	bl	8006988 <RBI_IsDCDC>
 800f1aa:	2801      	cmp	r0, #1
 800f1ac:	bf14      	ite	ne
 800f1ae:	2000      	movne	r0, #0
 800f1b0:	2001      	moveq	r0, #1
 800f1b2:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800f1b6:	2201      	movs	r2, #1
 800f1b8:	f10d 0107 	add.w	r1, sp, #7
 800f1bc:	2096      	movs	r0, #150	; 0x96
 800f1be:	f7ff ff3b 	bl	800f038 <SUBGRF_WriteCommand>
}
 800f1c2:	b003      	add	sp, #12
 800f1c4:	f85d fb04 	ldr.w	pc, [sp], #4

0800f1c8 <SUBGRF_Calibrate>:
{
 800f1c8:	b500      	push	{lr}
 800f1ca:	b083      	sub	sp, #12
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800f1cc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800f1d0:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800f1d4:	2201      	movs	r2, #1
 800f1d6:	f10d 0107 	add.w	r1, sp, #7
 800f1da:	2089      	movs	r0, #137	; 0x89
 800f1dc:	f7ff ff2c 	bl	800f038 <SUBGRF_WriteCommand>
}
 800f1e0:	b003      	add	sp, #12
 800f1e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f1e8 <SUBGRF_CalibrateImage>:
{
 800f1e8:	b500      	push	{lr}
 800f1ea:	b083      	sub	sp, #12
    if( freq > 900000000 )
 800f1ec:	4b1c      	ldr	r3, [pc, #112]	; (800f260 <SUBGRF_CalibrateImage+0x78>)
 800f1ee:	4298      	cmp	r0, r3
 800f1f0:	d90d      	bls.n	800f20e <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 800f1f2:	23e1      	movs	r3, #225	; 0xe1
 800f1f4:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 800f1f8:	23e9      	movs	r3, #233	; 0xe9
 800f1fa:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800f1fe:	2202      	movs	r2, #2
 800f200:	a901      	add	r1, sp, #4
 800f202:	2098      	movs	r0, #152	; 0x98
 800f204:	f7ff ff18 	bl	800f038 <SUBGRF_WriteCommand>
}
 800f208:	b003      	add	sp, #12
 800f20a:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 800f20e:	4b15      	ldr	r3, [pc, #84]	; (800f264 <SUBGRF_CalibrateImage+0x7c>)
 800f210:	4298      	cmp	r0, r3
 800f212:	d906      	bls.n	800f222 <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 800f214:	23d7      	movs	r3, #215	; 0xd7
 800f216:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 800f21a:	23db      	movs	r3, #219	; 0xdb
 800f21c:	f88d 3005 	strb.w	r3, [sp, #5]
 800f220:	e7ed      	b.n	800f1fe <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 800f222:	4b11      	ldr	r3, [pc, #68]	; (800f268 <SUBGRF_CalibrateImage+0x80>)
 800f224:	4298      	cmp	r0, r3
 800f226:	d906      	bls.n	800f236 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 800f228:	23c1      	movs	r3, #193	; 0xc1
 800f22a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 800f22e:	23c5      	movs	r3, #197	; 0xc5
 800f230:	f88d 3005 	strb.w	r3, [sp, #5]
 800f234:	e7e3      	b.n	800f1fe <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 800f236:	4b0d      	ldr	r3, [pc, #52]	; (800f26c <SUBGRF_CalibrateImage+0x84>)
 800f238:	4298      	cmp	r0, r3
 800f23a:	d906      	bls.n	800f24a <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 800f23c:	2375      	movs	r3, #117	; 0x75
 800f23e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 800f242:	2381      	movs	r3, #129	; 0x81
 800f244:	f88d 3005 	strb.w	r3, [sp, #5]
 800f248:	e7d9      	b.n	800f1fe <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 800f24a:	4b09      	ldr	r3, [pc, #36]	; (800f270 <SUBGRF_CalibrateImage+0x88>)
 800f24c:	4298      	cmp	r0, r3
 800f24e:	d9d6      	bls.n	800f1fe <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 800f250:	236b      	movs	r3, #107	; 0x6b
 800f252:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 800f256:	236f      	movs	r3, #111	; 0x6f
 800f258:	f88d 3005 	strb.w	r3, [sp, #5]
 800f25c:	e7cf      	b.n	800f1fe <SUBGRF_CalibrateImage+0x16>
 800f25e:	bf00      	nop
 800f260:	35a4e900 	.word	0x35a4e900
 800f264:	32a9f880 	.word	0x32a9f880
 800f268:	2de54480 	.word	0x2de54480
 800f26c:	1b6b0b00 	.word	0x1b6b0b00
 800f270:	1954fc40 	.word	0x1954fc40

0800f274 <SUBGRF_SetPaConfig>:
{
 800f274:	b500      	push	{lr}
 800f276:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 800f278:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 800f27c:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 800f280:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 800f284:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800f288:	2204      	movs	r2, #4
 800f28a:	eb0d 0102 	add.w	r1, sp, r2
 800f28e:	2095      	movs	r0, #149	; 0x95
 800f290:	f7ff fed2 	bl	800f038 <SUBGRF_WriteCommand>
}
 800f294:	b003      	add	sp, #12
 800f296:	f85d fb04 	ldr.w	pc, [sp], #4

0800f29a <SUBGRF_SetDioIrqParams>:
{
 800f29a:	b500      	push	{lr}
 800f29c:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800f29e:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 800f2a2:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800f2a6:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800f2aa:	0a08      	lsrs	r0, r1, #8
 800f2ac:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800f2b0:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800f2b4:	0a11      	lsrs	r1, r2, #8
 800f2b6:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800f2ba:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800f2be:	0a1a      	lsrs	r2, r3, #8
 800f2c0:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800f2c4:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800f2c8:	2208      	movs	r2, #8
 800f2ca:	4669      	mov	r1, sp
 800f2cc:	4610      	mov	r0, r2
 800f2ce:	f7ff feb3 	bl	800f038 <SUBGRF_WriteCommand>
}
 800f2d2:	b003      	add	sp, #12
 800f2d4:	f85d fb04 	ldr.w	pc, [sp], #4

0800f2d8 <SUBGRF_SetTcxoMode>:
{
 800f2d8:	b500      	push	{lr}
 800f2da:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 800f2dc:	f000 0007 	and.w	r0, r0, #7
 800f2e0:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800f2e4:	0c0b      	lsrs	r3, r1, #16
 800f2e6:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800f2ea:	0a0b      	lsrs	r3, r1, #8
 800f2ec:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800f2f0:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800f2f4:	2204      	movs	r2, #4
 800f2f6:	eb0d 0102 	add.w	r1, sp, r2
 800f2fa:	2097      	movs	r0, #151	; 0x97
 800f2fc:	f7ff fe9c 	bl	800f038 <SUBGRF_WriteCommand>
}
 800f300:	b003      	add	sp, #12
 800f302:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f308 <SUBGRF_SetRfFrequency>:
{
 800f308:	b510      	push	{r4, lr}
 800f30a:	b082      	sub	sp, #8
 800f30c:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 800f30e:	4b11      	ldr	r3, [pc, #68]	; (800f354 <SUBGRF_SetRfFrequency+0x4c>)
 800f310:	781b      	ldrb	r3, [r3, #0]
 800f312:	b1c3      	cbz	r3, 800f346 <SUBGRF_SetRfFrequency+0x3e>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800f314:	4a10      	ldr	r2, [pc, #64]	; (800f358 <SUBGRF_SetRfFrequency+0x50>)
 800f316:	2300      	movs	r3, #0
 800f318:	0660      	lsls	r0, r4, #25
 800f31a:	09e1      	lsrs	r1, r4, #7
 800f31c:	f7f1 fad4 	bl	80008c8 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800f320:	0e03      	lsrs	r3, r0, #24
 800f322:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800f326:	0c03      	lsrs	r3, r0, #16
 800f328:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800f32c:	0a03      	lsrs	r3, r0, #8
 800f32e:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800f332:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800f336:	2204      	movs	r2, #4
 800f338:	eb0d 0102 	add.w	r1, sp, r2
 800f33c:	2086      	movs	r0, #134	; 0x86
 800f33e:	f7ff fe7b 	bl	800f038 <SUBGRF_WriteCommand>
}
 800f342:	b002      	add	sp, #8
 800f344:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 800f346:	f7ff ff4f 	bl	800f1e8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800f34a:	4b02      	ldr	r3, [pc, #8]	; (800f354 <SUBGRF_SetRfFrequency+0x4c>)
 800f34c:	2201      	movs	r2, #1
 800f34e:	701a      	strb	r2, [r3, #0]
 800f350:	e7e0      	b.n	800f314 <SUBGRF_SetRfFrequency+0xc>
 800f352:	bf00      	nop
 800f354:	200021dc 	.word	0x200021dc
 800f358:	01e84800 	.word	0x01e84800

0800f35c <SUBGRF_SetBufferBaseAddress>:
{
 800f35c:	b500      	push	{lr}
 800f35e:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 800f360:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 800f364:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800f368:	2202      	movs	r2, #2
 800f36a:	a901      	add	r1, sp, #4
 800f36c:	208f      	movs	r0, #143	; 0x8f
 800f36e:	f7ff fe63 	bl	800f038 <SUBGRF_WriteCommand>
}
 800f372:	b003      	add	sp, #12
 800f374:	f85d fb04 	ldr.w	pc, [sp], #4

0800f378 <SUBGRF_GetRssiInst>:
{
 800f378:	b500      	push	{lr}
 800f37a:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800f37c:	2201      	movs	r2, #1
 800f37e:	a901      	add	r1, sp, #4
 800f380:	2015      	movs	r0, #21
 800f382:	f7ff fe69 	bl	800f058 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800f386:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800f38a:	4240      	negs	r0, r0
}
 800f38c:	1040      	asrs	r0, r0, #1
 800f38e:	b003      	add	sp, #12
 800f390:	f85d fb04 	ldr.w	pc, [sp], #4

0800f394 <SUBGRF_GetPacketStatus>:
{
 800f394:	b510      	push	{r4, lr}
 800f396:	b082      	sub	sp, #8
 800f398:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800f39a:	2203      	movs	r2, #3
 800f39c:	a901      	add	r1, sp, #4
 800f39e:	2014      	movs	r0, #20
 800f3a0:	f7ff fe5a 	bl	800f058 <SUBGRF_ReadCommand>
    return PacketType;
 800f3a4:	4b18      	ldr	r3, [pc, #96]	; (800f408 <SUBGRF_GetPacketStatus+0x74>)
 800f3a6:	781b      	ldrb	r3, [r3, #0]
    pktStatus->packetType = SUBGRF_GetPacketType( );
 800f3a8:	7023      	strb	r3, [r4, #0]
    switch( pktStatus->packetType )
 800f3aa:	b14b      	cbz	r3, 800f3c0 <SUBGRF_GetPacketStatus+0x2c>
 800f3ac:	2b01      	cmp	r3, #1
 800f3ae:	d018      	beq.n	800f3e2 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800f3b0:	2214      	movs	r2, #20
 800f3b2:	2100      	movs	r1, #0
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f000 fcee 	bl	800fd96 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800f3ba:	230f      	movs	r3, #15
 800f3bc:	7023      	strb	r3, [r4, #0]
}
 800f3be:	e00e      	b.n	800f3de <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800f3c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f3c4:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800f3c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f3ca:	425b      	negs	r3, r3
 800f3cc:	105b      	asrs	r3, r3, #1
 800f3ce:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800f3d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f3d4:	425b      	negs	r3, r3
 800f3d6:	105b      	asrs	r3, r3, #1
 800f3d8:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	60a3      	str	r3, [r4, #8]
}
 800f3de:	b002      	add	sp, #8
 800f3e0:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800f3e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f3e6:	425b      	negs	r3, r3
 800f3e8:	105b      	asrs	r3, r3, #1
 800f3ea:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800f3ec:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 800f3f0:	3302      	adds	r3, #2
 800f3f2:	109b      	asrs	r3, r3, #2
 800f3f4:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800f3f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f3fa:	425b      	negs	r3, r3
 800f3fc:	105b      	asrs	r3, r3, #1
 800f3fe:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800f400:	4b02      	ldr	r3, [pc, #8]	; (800f40c <SUBGRF_GetPacketStatus+0x78>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	6123      	str	r3, [r4, #16]
            break;
 800f406:	e7ea      	b.n	800f3de <SUBGRF_GetPacketStatus+0x4a>
 800f408:	200021df 	.word	0x200021df
 800f40c:	200021d8 	.word	0x200021d8

0800f410 <SUBGRF_WriteRegister>:
{
 800f410:	b500      	push	{lr}
 800f412:	b083      	sub	sp, #12
 800f414:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800f418:	2301      	movs	r3, #1
 800f41a:	f10d 0207 	add.w	r2, sp, #7
 800f41e:	4601      	mov	r1, r0
 800f420:	4802      	ldr	r0, [pc, #8]	; (800f42c <SUBGRF_WriteRegister+0x1c>)
 800f422:	f7f5 fbcf 	bl	8004bc4 <HAL_SUBGHZ_WriteRegisters>
}
 800f426:	b003      	add	sp, #12
 800f428:	f85d fb04 	ldr.w	pc, [sp], #4
 800f42c:	20000638 	.word	0x20000638

0800f430 <SUBGRF_SetRxBoosted>:
{
 800f430:	b510      	push	{r4, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 800f436:	4b0b      	ldr	r3, [pc, #44]	; (800f464 <SUBGRF_SetRxBoosted+0x34>)
 800f438:	2205      	movs	r2, #5
 800f43a:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800f43c:	2197      	movs	r1, #151	; 0x97
 800f43e:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800f442:	f7ff ffe5 	bl	800f410 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800f446:	0c23      	lsrs	r3, r4, #16
 800f448:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800f44c:	0a23      	lsrs	r3, r4, #8
 800f44e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800f452:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800f456:	2203      	movs	r2, #3
 800f458:	a901      	add	r1, sp, #4
 800f45a:	2082      	movs	r0, #130	; 0x82
 800f45c:	f7ff fdec 	bl	800f038 <SUBGRF_WriteCommand>
}
 800f460:	b002      	add	sp, #8
 800f462:	bd10      	pop	{r4, pc}
 800f464:	200021de 	.word	0x200021de

0800f468 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 800f468:	b500      	push	{lr}
 800f46a:	b083      	sub	sp, #12
 800f46c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800f470:	2201      	movs	r2, #1
 800f472:	f10d 0107 	add.w	r1, sp, #7
 800f476:	20a0      	movs	r0, #160	; 0xa0
 800f478:	f7ff fdde 	bl	800f038 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 800f47c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f480:	293f      	cmp	r1, #63	; 0x3f
 800f482:	d907      	bls.n	800f494 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        reg = exp + ( mant << 3 );
 800f484:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 800f488:	3101      	adds	r1, #1
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800f48a:	b2c9      	uxtb	r1, r1
 800f48c:	f240 7006 	movw	r0, #1798	; 0x706
 800f490:	f7ff ffbe 	bl	800f410 <SUBGRF_WriteRegister>
}
 800f494:	b003      	add	sp, #12
 800f496:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f49c <SUBGRF_SetPacketType>:
{
 800f49c:	b500      	push	{lr}
 800f49e:	b083      	sub	sp, #12
 800f4a0:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 800f4a4:	4b08      	ldr	r3, [pc, #32]	; (800f4c8 <SUBGRF_SetPacketType+0x2c>)
 800f4a6:	7018      	strb	r0, [r3, #0]
    if( packetType == PACKET_TYPE_GFSK )
 800f4a8:	b140      	cbz	r0, 800f4bc <SUBGRF_SetPacketType+0x20>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	f10d 0107 	add.w	r1, sp, #7
 800f4b0:	208a      	movs	r0, #138	; 0x8a
 800f4b2:	f7ff fdc1 	bl	800f038 <SUBGRF_WriteCommand>
}
 800f4b6:	b003      	add	sp, #12
 800f4b8:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800f4bc:	2100      	movs	r1, #0
 800f4be:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800f4c2:	f7ff ffa5 	bl	800f410 <SUBGRF_WriteRegister>
 800f4c6:	e7f0      	b.n	800f4aa <SUBGRF_SetPacketType+0xe>
 800f4c8:	200021df 	.word	0x200021df

0800f4cc <SUBGRF_SetModulationParams>:
{
 800f4cc:	b510      	push	{r4, lr}
 800f4ce:	b082      	sub	sp, #8
 800f4d0:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800f4d2:	4b3e      	ldr	r3, [pc, #248]	; (800f5cc <SUBGRF_SetModulationParams+0x100>)
 800f4d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f4d8:	ab02      	add	r3, sp, #8
 800f4da:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 800f4de:	7820      	ldrb	r0, [r4, #0]
 800f4e0:	4b3b      	ldr	r3, [pc, #236]	; (800f5d0 <SUBGRF_SetModulationParams+0x104>)
 800f4e2:	781b      	ldrb	r3, [r3, #0]
 800f4e4:	4283      	cmp	r3, r0
 800f4e6:	d106      	bne.n	800f4f6 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 800f4e8:	7823      	ldrb	r3, [r4, #0]
 800f4ea:	2b03      	cmp	r3, #3
 800f4ec:	d82c      	bhi.n	800f548 <SUBGRF_SetModulationParams+0x7c>
 800f4ee:	e8df f003 	tbb	[pc, r3]
 800f4f2:	4205      	.short	0x4205
 800f4f4:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800f4f6:	f7ff ffd1 	bl	800f49c <SUBGRF_SetPacketType>
 800f4fa:	e7f5      	b.n	800f4e8 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800f4fc:	6862      	ldr	r2, [r4, #4]
 800f4fe:	4b35      	ldr	r3, [pc, #212]	; (800f5d4 <SUBGRF_SetModulationParams+0x108>)
 800f500:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800f504:	0c1a      	lsrs	r2, r3, #16
 800f506:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800f50a:	0a1a      	lsrs	r2, r3, #8
 800f50c:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800f510:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800f514:	7b23      	ldrb	r3, [r4, #12]
 800f516:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800f51a:	7b63      	ldrb	r3, [r4, #13]
 800f51c:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800f520:	68a1      	ldr	r1, [r4, #8]
 800f522:	4a2d      	ldr	r2, [pc, #180]	; (800f5d8 <SUBGRF_SetModulationParams+0x10c>)
 800f524:	2300      	movs	r3, #0
 800f526:	0648      	lsls	r0, r1, #25
 800f528:	09c9      	lsrs	r1, r1, #7
 800f52a:	f7f1 f9cd 	bl	80008c8 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800f52e:	0c03      	lsrs	r3, r0, #16
 800f530:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800f534:	0a03      	lsrs	r3, r0, #8
 800f536:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 800f53a:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800f53e:	2208      	movs	r2, #8
 800f540:	4669      	mov	r1, sp
 800f542:	208b      	movs	r0, #139	; 0x8b
 800f544:	f7ff fd78 	bl	800f038 <SUBGRF_WriteCommand>
}
 800f548:	b002      	add	sp, #8
 800f54a:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800f54c:	6922      	ldr	r2, [r4, #16]
 800f54e:	4b21      	ldr	r3, [pc, #132]	; (800f5d4 <SUBGRF_SetModulationParams+0x108>)
 800f550:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800f554:	0c1a      	lsrs	r2, r3, #16
 800f556:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800f55a:	0a1a      	lsrs	r2, r3, #8
 800f55c:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800f560:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800f564:	7d23      	ldrb	r3, [r4, #20]
 800f566:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800f56a:	2204      	movs	r2, #4
 800f56c:	4669      	mov	r1, sp
 800f56e:	208b      	movs	r0, #139	; 0x8b
 800f570:	f7ff fd62 	bl	800f038 <SUBGRF_WriteCommand>
        break;
 800f574:	e7e8      	b.n	800f548 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800f576:	7e23      	ldrb	r3, [r4, #24]
 800f578:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800f57c:	7e63      	ldrb	r3, [r4, #25]
 800f57e:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800f582:	7ea3      	ldrb	r3, [r4, #26]
 800f584:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800f588:	7ee3      	ldrb	r3, [r4, #27]
 800f58a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800f58e:	2204      	movs	r2, #4
 800f590:	4669      	mov	r1, sp
 800f592:	208b      	movs	r0, #139	; 0x8b
 800f594:	f7ff fd50 	bl	800f038 <SUBGRF_WriteCommand>
        break;
 800f598:	e7d6      	b.n	800f548 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800f59a:	6862      	ldr	r2, [r4, #4]
 800f59c:	4b0d      	ldr	r3, [pc, #52]	; (800f5d4 <SUBGRF_SetModulationParams+0x108>)
 800f59e:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800f5a2:	0c1a      	lsrs	r2, r3, #16
 800f5a4:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800f5a8:	0a1a      	lsrs	r2, r3, #8
 800f5aa:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800f5ae:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800f5b2:	7b23      	ldrb	r3, [r4, #12]
 800f5b4:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800f5b8:	7b63      	ldrb	r3, [r4, #13]
 800f5ba:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800f5be:	2205      	movs	r2, #5
 800f5c0:	4669      	mov	r1, sp
 800f5c2:	208b      	movs	r0, #139	; 0x8b
 800f5c4:	f7ff fd38 	bl	800f038 <SUBGRF_WriteCommand>
}
 800f5c8:	e7be      	b.n	800f548 <SUBGRF_SetModulationParams+0x7c>
 800f5ca:	bf00      	nop
 800f5cc:	08010d40 	.word	0x08010d40
 800f5d0:	200021df 	.word	0x200021df
 800f5d4:	3d090000 	.word	0x3d090000
 800f5d8:	01e84800 	.word	0x01e84800

0800f5dc <SUBGRF_ReadRegister>:
{
 800f5dc:	b500      	push	{lr}
 800f5de:	b083      	sub	sp, #12
 800f5e0:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	f10d 0207 	add.w	r2, sp, #7
 800f5e8:	4803      	ldr	r0, [pc, #12]	; (800f5f8 <SUBGRF_ReadRegister+0x1c>)
 800f5ea:	f7f5 fb37 	bl	8004c5c <HAL_SUBGHZ_ReadRegisters>
}
 800f5ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f5f2:	b003      	add	sp, #12
 800f5f4:	f85d fb04 	ldr.w	pc, [sp], #4
 800f5f8:	20000638 	.word	0x20000638

0800f5fc <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 800f5fc:	b510      	push	{r4, lr}
 800f5fe:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 800f600:	f7f7 f9c2 	bl	8006988 <RBI_IsDCDC>
 800f604:	2801      	cmp	r0, #1
 800f606:	d000      	beq.n	800f60a <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 800f608:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800f60a:	f640 1023 	movw	r0, #2339	; 0x923
 800f60e:	f7ff ffe5 	bl	800f5dc <SUBGRF_ReadRegister>
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800f612:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
 800f616:	4321      	orrs	r1, r4
 800f618:	f640 1023 	movw	r0, #2339	; 0x923
 800f61c:	f7ff fef8 	bl	800f410 <SUBGRF_WriteRegister>
}
 800f620:	e7f2      	b.n	800f608 <Radio_SMPS_Set+0xc>
	...

0800f624 <SUBGRF_Init>:
{
 800f624:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 800f626:	b108      	cbz	r0, 800f62c <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 800f628:	4a16      	ldr	r2, [pc, #88]	; (800f684 <SUBGRF_Init+0x60>)
 800f62a:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 800f62c:	f7f1 fedc 	bl	80013e8 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800f630:	2002      	movs	r0, #2
 800f632:	f7ff ffe3 	bl	800f5fc <Radio_SMPS_Set>
    ImageCalibrated = false;
 800f636:	2000      	movs	r0, #0
 800f638:	4b13      	ldr	r3, [pc, #76]	; (800f688 <SUBGRF_Init+0x64>)
 800f63a:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 800f63c:	f7ff fd22 	bl	800f084 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 800f640:	f7f7 f99e 	bl	8006980 <RBI_IsTCXO>
 800f644:	2801      	cmp	r0, #1
 800f646:	d00f      	beq.n	800f668 <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800f648:	2120      	movs	r1, #32
 800f64a:	f640 1011 	movw	r0, #2321	; 0x911
 800f64e:	f7ff fedf 	bl	800f410 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800f652:	2120      	movs	r1, #32
 800f654:	f640 1012 	movw	r0, #2322	; 0x912
 800f658:	f7ff feda 	bl	800f410 <SUBGRF_WriteRegister>
    RBI_Init();
 800f65c:	f7f7 f984 	bl	8006968 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 800f660:	4b0a      	ldr	r3, [pc, #40]	; (800f68c <SUBGRF_Init+0x68>)
 800f662:	2201      	movs	r2, #1
 800f664:	701a      	strb	r2, [r3, #0]
}
 800f666:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800f668:	2140      	movs	r1, #64	; 0x40
 800f66a:	f7ff fe35 	bl	800f2d8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800f66e:	2100      	movs	r1, #0
 800f670:	f640 1011 	movw	r0, #2321	; 0x911
 800f674:	f7ff fecc 	bl	800f410 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 800f678:	f04f 007f 	mov.w	r0, #127	; 0x7f
 800f67c:	f7ff fda4 	bl	800f1c8 <SUBGRF_Calibrate>
 800f680:	e7ec      	b.n	800f65c <SUBGRF_Init+0x38>
 800f682:	bf00      	nop
 800f684:	200021e0 	.word	0x200021e0
 800f688:	200021dc 	.word	0x200021dc
 800f68c:	200021de 	.word	0x200021de

0800f690 <SUBGRF_SetSleep>:
{
 800f690:	b510      	push	{r4, lr}
 800f692:	b082      	sub	sp, #8
 800f694:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800f696:	2000      	movs	r0, #0
 800f698:	f7f7 f96a 	bl	8006970 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800f69c:	2002      	movs	r0, #2
 800f69e:	f7ff ffad 	bl	800f5fc <Radio_SMPS_Set>
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800f6a2:	f004 0407 	and.w	r4, r4, #7
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800f6a6:	f88d 4007 	strb.w	r4, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800f6aa:	2201      	movs	r2, #1
 800f6ac:	f10d 0107 	add.w	r1, sp, #7
 800f6b0:	2084      	movs	r0, #132	; 0x84
 800f6b2:	f7ff fcc1 	bl	800f038 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800f6b6:	4b02      	ldr	r3, [pc, #8]	; (800f6c0 <SUBGRF_SetSleep+0x30>)
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	701a      	strb	r2, [r3, #0]
}
 800f6bc:	b002      	add	sp, #8
 800f6be:	bd10      	pop	{r4, pc}
 800f6c0:	200021de 	.word	0x200021de

0800f6c4 <SUBGRF_SetWhiteningSeed>:
    return PacketType;
 800f6c4:	4b0c      	ldr	r3, [pc, #48]	; (800f6f8 <SUBGRF_SetWhiteningSeed+0x34>)
    switch( SUBGRF_GetPacketType( ) )
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	b103      	cbz	r3, 800f6cc <SUBGRF_SetWhiteningSeed+0x8>
 800f6ca:	4770      	bx	lr
{
 800f6cc:	b510      	push	{r4, lr}
 800f6ce:	4604      	mov	r4, r0
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800f6d0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800f6d4:	f7ff ff82 	bl	800f5dc <SUBGRF_ReadRegister>
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800f6d8:	f3c4 2100 	ubfx	r1, r4, #8, #1
 800f6dc:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800f6e0:	4301      	orrs	r1, r0
 800f6e2:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800f6e6:	f7ff fe93 	bl	800f410 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800f6ea:	b2e1      	uxtb	r1, r4
 800f6ec:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800f6f0:	f7ff fe8e 	bl	800f410 <SUBGRF_WriteRegister>
}
 800f6f4:	bd10      	pop	{r4, pc}
 800f6f6:	bf00      	nop
 800f6f8:	200021df 	.word	0x200021df

0800f6fc <SUBGRF_SetTxParams>:
{
 800f6fc:	b570      	push	{r4, r5, r6, lr}
 800f6fe:	b082      	sub	sp, #8
 800f700:	460c      	mov	r4, r1
 800f702:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 800f704:	2801      	cmp	r0, #1
 800f706:	d036      	beq.n	800f776 <SUBGRF_SetTxParams+0x7a>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800f708:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800f70c:	f7ff ff66 	bl	800f5dc <SUBGRF_ReadRegister>
 800f710:	f040 011e 	orr.w	r1, r0, #30
 800f714:	b2c9      	uxtb	r1, r1
 800f716:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800f71a:	f7ff fe79 	bl	800f410 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800f71e:	2001      	movs	r0, #1
 800f720:	f7f7 f936 	bl	8006990 <RBI_GetRFOMaxPowerConfig>
 800f724:	4605      	mov	r5, r0
        if (power > max_power)
 800f726:	4284      	cmp	r4, r0
            power = max_power;
 800f728:	bfc8      	it	gt
 800f72a:	b244      	sxtbgt	r4, r0
        if (max_power == 20)
 800f72c:	2814      	cmp	r0, #20
 800f72e:	d052      	beq.n	800f7d6 <SUBGRF_SetTxParams+0xda>
        else if (max_power == 17)
 800f730:	2811      	cmp	r0, #17
 800f732:	d059      	beq.n	800f7e8 <SUBGRF_SetTxParams+0xec>
        else if (max_power == 14)
 800f734:	280e      	cmp	r0, #14
 800f736:	d060      	beq.n	800f7fa <SUBGRF_SetTxParams+0xfe>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800f738:	2301      	movs	r3, #1
 800f73a:	2200      	movs	r2, #0
 800f73c:	2107      	movs	r1, #7
 800f73e:	2004      	movs	r0, #4
 800f740:	f7ff fd98 	bl	800f274 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800f744:	f1c5 0516 	rsb	r5, r5, #22
 800f748:	442c      	add	r4, r5
 800f74a:	b264      	sxtb	r4, r4
        if (power < -9)
 800f74c:	f06f 0108 	mvn.w	r1, #8
 800f750:	428c      	cmp	r4, r1
 800f752:	bfb8      	it	lt
 800f754:	460c      	movlt	r4, r1
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800f756:	2138      	movs	r1, #56	; 0x38
 800f758:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800f75c:	f7ff fe58 	bl	800f410 <SUBGRF_WriteRegister>
    buf[0] = power;
 800f760:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 800f764:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800f768:	2202      	movs	r2, #2
 800f76a:	a901      	add	r1, sp, #4
 800f76c:	208e      	movs	r0, #142	; 0x8e
 800f76e:	f7ff fc63 	bl	800f038 <SUBGRF_WriteCommand>
}
 800f772:	b002      	add	sp, #8
 800f774:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800f776:	2000      	movs	r0, #0
 800f778:	f7f7 f90a 	bl	8006990 <RBI_GetRFOMaxPowerConfig>
 800f77c:	4605      	mov	r5, r0
        if (power >  max_power)
 800f77e:	4284      	cmp	r4, r0
          power = max_power;
 800f780:	bfc8      	it	gt
 800f782:	b244      	sxtbgt	r4, r0
        if (max_power == 14)
 800f784:	280e      	cmp	r0, #14
 800f786:	d016      	beq.n	800f7b6 <SUBGRF_SetTxParams+0xba>
        else if (max_power == 10)
 800f788:	280a      	cmp	r0, #10
 800f78a:	d01b      	beq.n	800f7c4 <SUBGRF_SetTxParams+0xc8>
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 800f78c:	2301      	movs	r3, #1
 800f78e:	461a      	mov	r2, r3
 800f790:	2100      	movs	r1, #0
 800f792:	2006      	movs	r0, #6
 800f794:	f7ff fd6e 	bl	800f274 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800f798:	f1c5 050e 	rsb	r5, r5, #14
 800f79c:	442c      	add	r4, r5
 800f79e:	b264      	sxtb	r4, r4
        if (power < -17)
 800f7a0:	f06f 0110 	mvn.w	r1, #16
 800f7a4:	428c      	cmp	r4, r1
 800f7a6:	bfb8      	it	lt
 800f7a8:	460c      	movlt	r4, r1
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800f7aa:	2118      	movs	r1, #24
 800f7ac:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800f7b0:	f7ff fe2e 	bl	800f410 <SUBGRF_WriteRegister>
 800f7b4:	e7d4      	b.n	800f760 <SUBGRF_SetTxParams+0x64>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	461a      	mov	r2, r3
 800f7ba:	2100      	movs	r1, #0
 800f7bc:	2004      	movs	r0, #4
 800f7be:	f7ff fd59 	bl	800f274 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800f7c2:	e7ed      	b.n	800f7a0 <SUBGRF_SetTxParams+0xa4>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800f7c4:	2301      	movs	r3, #1
 800f7c6:	461a      	mov	r2, r3
 800f7c8:	2100      	movs	r1, #0
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f7ff fd52 	bl	800f274 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800f7d0:	3403      	adds	r4, #3
 800f7d2:	b264      	sxtb	r4, r4
 800f7d4:	e7e4      	b.n	800f7a0 <SUBGRF_SetTxParams+0xa4>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800f7d6:	2301      	movs	r3, #1
 800f7d8:	2200      	movs	r2, #0
 800f7da:	2105      	movs	r1, #5
 800f7dc:	2003      	movs	r0, #3
 800f7de:	f7ff fd49 	bl	800f274 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800f7e2:	3402      	adds	r4, #2
 800f7e4:	b264      	sxtb	r4, r4
 800f7e6:	e7b1      	b.n	800f74c <SUBGRF_SetTxParams+0x50>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	2103      	movs	r1, #3
 800f7ee:	2002      	movs	r0, #2
 800f7f0:	f7ff fd40 	bl	800f274 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800f7f4:	3405      	adds	r4, #5
 800f7f6:	b264      	sxtb	r4, r4
 800f7f8:	e7a8      	b.n	800f74c <SUBGRF_SetTxParams+0x50>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	2102      	movs	r1, #2
 800f800:	4608      	mov	r0, r1
 800f802:	f7ff fd37 	bl	800f274 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800f806:	e7a1      	b.n	800f74c <SUBGRF_SetTxParams+0x50>

0800f808 <SUBGRF_GetRxBufferStatus>:
{
 800f808:	b530      	push	{r4, r5, lr}
 800f80a:	b083      	sub	sp, #12
 800f80c:	4605      	mov	r5, r0
 800f80e:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800f810:	2202      	movs	r2, #2
 800f812:	a901      	add	r1, sp, #4
 800f814:	2013      	movs	r0, #19
 800f816:	f7ff fc1f 	bl	800f058 <SUBGRF_ReadCommand>
    return PacketType;
 800f81a:	4b0b      	ldr	r3, [pc, #44]	; (800f848 <SUBGRF_GetRxBufferStatus+0x40>)
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800f81c:	781b      	ldrb	r3, [r3, #0]
 800f81e:	2b01      	cmp	r3, #1
 800f820:	d007      	beq.n	800f832 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 800f822:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f826:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 800f828:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f82c:	7023      	strb	r3, [r4, #0]
}
 800f82e:	b003      	add	sp, #12
 800f830:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800f832:	4b06      	ldr	r3, [pc, #24]	; (800f84c <SUBGRF_GetRxBufferStatus+0x44>)
 800f834:	781b      	ldrb	r3, [r3, #0]
 800f836:	b2db      	uxtb	r3, r3
 800f838:	2b01      	cmp	r3, #1
 800f83a:	d1f2      	bne.n	800f822 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800f83c:	f240 7002 	movw	r0, #1794	; 0x702
 800f840:	f7ff fecc 	bl	800f5dc <SUBGRF_ReadRegister>
 800f844:	7028      	strb	r0, [r5, #0]
 800f846:	e7ef      	b.n	800f828 <SUBGRF_GetRxBufferStatus+0x20>
 800f848:	200021df 	.word	0x200021df
 800f84c:	200021dd 	.word	0x200021dd

0800f850 <SUBGRF_WriteRegisters>:
{
 800f850:	b510      	push	{r4, lr}
 800f852:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f854:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f858:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800f85a:	460a      	mov	r2, r1
 800f85c:	4601      	mov	r1, r0
 800f85e:	4803      	ldr	r0, [pc, #12]	; (800f86c <SUBGRF_WriteRegisters+0x1c>)
 800f860:	f7f5 f9b0 	bl	8004bc4 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f864:	f384 8810 	msr	PRIMASK, r4
}
 800f868:	bd10      	pop	{r4, pc}
 800f86a:	bf00      	nop
 800f86c:	20000638 	.word	0x20000638

0800f870 <SUBGRF_SetSyncWord>:
{
 800f870:	b508      	push	{r3, lr}
 800f872:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800f874:	2208      	movs	r2, #8
 800f876:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800f87a:	f7ff ffe9 	bl	800f850 <SUBGRF_WriteRegisters>
}
 800f87e:	2000      	movs	r0, #0
 800f880:	bd08      	pop	{r3, pc}
	...

0800f884 <SUBGRF_SetCrcSeed>:
{
 800f884:	b500      	push	{lr}
 800f886:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800f888:	0a03      	lsrs	r3, r0, #8
 800f88a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800f88e:	f88d 0005 	strb.w	r0, [sp, #5]
    return PacketType;
 800f892:	4b06      	ldr	r3, [pc, #24]	; (800f8ac <SUBGRF_SetCrcSeed+0x28>)
    switch( SUBGRF_GetPacketType( ) )
 800f894:	781b      	ldrb	r3, [r3, #0]
 800f896:	b113      	cbz	r3, 800f89e <SUBGRF_SetCrcSeed+0x1a>
}
 800f898:	b003      	add	sp, #12
 800f89a:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800f89e:	2202      	movs	r2, #2
 800f8a0:	a901      	add	r1, sp, #4
 800f8a2:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800f8a6:	f7ff ffd3 	bl	800f850 <SUBGRF_WriteRegisters>
}
 800f8aa:	e7f5      	b.n	800f898 <SUBGRF_SetCrcSeed+0x14>
 800f8ac:	200021df 	.word	0x200021df

0800f8b0 <SUBGRF_SetCrcPolynomial>:
{
 800f8b0:	b500      	push	{lr}
 800f8b2:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800f8b4:	0a03      	lsrs	r3, r0, #8
 800f8b6:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800f8ba:	f88d 0005 	strb.w	r0, [sp, #5]
    return PacketType;
 800f8be:	4b06      	ldr	r3, [pc, #24]	; (800f8d8 <SUBGRF_SetCrcPolynomial+0x28>)
    switch( SUBGRF_GetPacketType( ) )
 800f8c0:	781b      	ldrb	r3, [r3, #0]
 800f8c2:	b113      	cbz	r3, 800f8ca <SUBGRF_SetCrcPolynomial+0x1a>
}
 800f8c4:	b003      	add	sp, #12
 800f8c6:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800f8ca:	2202      	movs	r2, #2
 800f8cc:	a901      	add	r1, sp, #4
 800f8ce:	f240 60be 	movw	r0, #1726	; 0x6be
 800f8d2:	f7ff ffbd 	bl	800f850 <SUBGRF_WriteRegisters>
}
 800f8d6:	e7f5      	b.n	800f8c4 <SUBGRF_SetCrcPolynomial+0x14>
 800f8d8:	200021df 	.word	0x200021df

0800f8dc <SUBGRF_SetPacketParams>:
{
 800f8dc:	b510      	push	{r4, lr}
 800f8de:	b084      	sub	sp, #16
 800f8e0:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800f8e2:	ab01      	add	r3, sp, #4
 800f8e4:	4a33      	ldr	r2, [pc, #204]	; (800f9b4 <SUBGRF_SetPacketParams+0xd8>)
 800f8e6:	ca07      	ldmia	r2, {r0, r1, r2}
 800f8e8:	c303      	stmia	r3!, {r0, r1}
 800f8ea:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 800f8ec:	7820      	ldrb	r0, [r4, #0]
 800f8ee:	4b32      	ldr	r3, [pc, #200]	; (800f9b8 <SUBGRF_SetPacketParams+0xdc>)
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	4283      	cmp	r3, r0
 800f8f4:	d106      	bne.n	800f904 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 800f8f6:	7823      	ldrb	r3, [r4, #0]
 800f8f8:	2b03      	cmp	r3, #3
 800f8fa:	d82a      	bhi.n	800f952 <SUBGRF_SetPacketParams+0x76>
 800f8fc:	e8df f003 	tbb	[pc, r3]
 800f900:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 800f904:	f7ff fdca 	bl	800f49c <SUBGRF_SetPacketType>
 800f908:	e7f5      	b.n	800f8f6 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800f90a:	7a63      	ldrb	r3, [r4, #9]
 800f90c:	2bf1      	cmp	r3, #241	; 0xf1
 800f90e:	d022      	beq.n	800f956 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800f910:	2bf2      	cmp	r3, #242	; 0xf2
 800f912:	d02a      	beq.n	800f96a <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800f914:	8862      	ldrh	r2, [r4, #2]
 800f916:	0a11      	lsrs	r1, r2, #8
 800f918:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800f91c:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800f920:	7922      	ldrb	r2, [r4, #4]
 800f922:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800f926:	7962      	ldrb	r2, [r4, #5]
 800f928:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800f92c:	79a2      	ldrb	r2, [r4, #6]
 800f92e:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800f932:	79e2      	ldrb	r2, [r4, #7]
 800f934:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800f938:	7a22      	ldrb	r2, [r4, #8]
 800f93a:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 800f93e:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800f942:	7aa3      	ldrb	r3, [r4, #10]
 800f944:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 800f948:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800f94a:	a901      	add	r1, sp, #4
 800f94c:	208c      	movs	r0, #140	; 0x8c
 800f94e:	f7ff fb73 	bl	800f038 <SUBGRF_WriteCommand>
}
 800f952:	b004      	add	sp, #16
 800f954:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800f956:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f95a:	f7ff ff93 	bl	800f884 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800f95e:	f248 0005 	movw	r0, #32773	; 0x8005
 800f962:	f7ff ffa5 	bl	800f8b0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800f966:	2302      	movs	r3, #2
 800f968:	e7d4      	b.n	800f914 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800f96a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800f96e:	f7ff ff89 	bl	800f884 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800f972:	f241 0021 	movw	r0, #4129	; 0x1021
 800f976:	f7ff ff9b 	bl	800f8b0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800f97a:	2306      	movs	r3, #6
 800f97c:	e7ca      	b.n	800f914 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800f97e:	7b23      	ldrb	r3, [r4, #12]
 800f980:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 800f984:	2201      	movs	r2, #1
        break;
 800f986:	e7e0      	b.n	800f94a <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800f988:	89e3      	ldrh	r3, [r4, #14]
 800f98a:	0a1a      	lsrs	r2, r3, #8
 800f98c:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800f990:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800f994:	7c23      	ldrb	r3, [r4, #16]
 800f996:	4a09      	ldr	r2, [pc, #36]	; (800f9bc <SUBGRF_SetPacketParams+0xe0>)
 800f998:	7013      	strb	r3, [r2, #0]
 800f99a:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800f99e:	7c63      	ldrb	r3, [r4, #17]
 800f9a0:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800f9a4:	7ca3      	ldrb	r3, [r4, #18]
 800f9a6:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800f9aa:	7ce3      	ldrb	r3, [r4, #19]
 800f9ac:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 800f9b0:	2206      	movs	r2, #6
        break;
 800f9b2:	e7ca      	b.n	800f94a <SUBGRF_SetPacketParams+0x6e>
 800f9b4:	08010d48 	.word	0x08010d48
 800f9b8:	200021df 	.word	0x200021df
 800f9bc:	200021dd 	.word	0x200021dd

0800f9c0 <SUBGRF_ReadRegisters>:
{
 800f9c0:	b510      	push	{r4, lr}
 800f9c2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f9c4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f9c8:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800f9ca:	460a      	mov	r2, r1
 800f9cc:	4601      	mov	r1, r0
 800f9ce:	4803      	ldr	r0, [pc, #12]	; (800f9dc <SUBGRF_ReadRegisters+0x1c>)
 800f9d0:	f7f5 f944 	bl	8004c5c <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f9d4:	f384 8810 	msr	PRIMASK, r4
}
 800f9d8:	bd10      	pop	{r4, pc}
 800f9da:	bf00      	nop
 800f9dc:	20000638 	.word	0x20000638

0800f9e0 <SUBGRF_GetRandom>:
{
 800f9e0:	b570      	push	{r4, r5, r6, lr}
 800f9e2:	b082      	sub	sp, #8
    uint32_t number = 0;
 800f9e4:	2600      	movs	r6, #0
 800f9e6:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800f9e8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800f9ec:	f7ff fdf6 	bl	800f5dc <SUBGRF_ReadRegister>
 800f9f0:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800f9f2:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 800f9f6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800f9fa:	f7ff fd09 	bl	800f410 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800f9fe:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800fa02:	f7ff fdeb 	bl	800f5dc <SUBGRF_ReadRegister>
 800fa06:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800fa08:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 800fa0c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800fa10:	f7ff fcfe 	bl	800f410 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800fa14:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800fa18:	f7ff fb64 	bl	800f0e4 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800fa1c:	2204      	movs	r2, #4
 800fa1e:	eb0d 0102 	add.w	r1, sp, r2
 800fa22:	f640 0019 	movw	r0, #2073	; 0x819
 800fa26:	f7ff ffcb 	bl	800f9c0 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 800fa2a:	4630      	mov	r0, r6
 800fa2c:	f7ff fb2a 	bl	800f084 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800fa30:	4629      	mov	r1, r5
 800fa32:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800fa36:	f7ff fceb 	bl	800f410 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800fa3a:	4621      	mov	r1, r4
 800fa3c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800fa40:	f7ff fce6 	bl	800f410 <SUBGRF_WriteRegister>
}
 800fa44:	9801      	ldr	r0, [sp, #4]
 800fa46:	b002      	add	sp, #8
 800fa48:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fa4c <SUBGRF_WriteBuffer>:
{
 800fa4c:	b510      	push	{r4, lr}
 800fa4e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa50:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800fa54:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800fa56:	460a      	mov	r2, r1
 800fa58:	4601      	mov	r1, r0
 800fa5a:	4803      	ldr	r0, [pc, #12]	; (800fa68 <SUBGRF_WriteBuffer+0x1c>)
 800fa5c:	f7f5 fa34 	bl	8004ec8 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fa60:	f384 8810 	msr	PRIMASK, r4
}
 800fa64:	bd10      	pop	{r4, pc}
 800fa66:	bf00      	nop
 800fa68:	20000638 	.word	0x20000638

0800fa6c <SUBGRF_SetPayload>:
{
 800fa6c:	b508      	push	{r3, lr}
 800fa6e:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800fa70:	4601      	mov	r1, r0
 800fa72:	2000      	movs	r0, #0
 800fa74:	f7ff ffea 	bl	800fa4c <SUBGRF_WriteBuffer>
}
 800fa78:	bd08      	pop	{r3, pc}

0800fa7a <SUBGRF_SendPayload>:
{
 800fa7a:	b510      	push	{r4, lr}
 800fa7c:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 800fa7e:	f7ff fff5 	bl	800fa6c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800fa82:	4620      	mov	r0, r4
 800fa84:	f7ff fb16 	bl	800f0b4 <SUBGRF_SetTx>
}
 800fa88:	bd10      	pop	{r4, pc}
	...

0800fa8c <SUBGRF_ReadBuffer>:
{
 800fa8c:	b510      	push	{r4, lr}
 800fa8e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa90:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800fa94:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800fa96:	460a      	mov	r2, r1
 800fa98:	4601      	mov	r1, r0
 800fa9a:	4803      	ldr	r0, [pc, #12]	; (800faa8 <SUBGRF_ReadBuffer+0x1c>)
 800fa9c:	f7f5 fa5a 	bl	8004f54 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800faa0:	f384 8810 	msr	PRIMASK, r4
}
 800faa4:	bd10      	pop	{r4, pc}
 800faa6:	bf00      	nop
 800faa8:	20000638 	.word	0x20000638

0800faac <SUBGRF_GetPayload>:
{
 800faac:	b570      	push	{r4, r5, r6, lr}
 800faae:	b082      	sub	sp, #8
 800fab0:	4606      	mov	r6, r0
 800fab2:	460c      	mov	r4, r1
 800fab4:	4615      	mov	r5, r2
    uint8_t offset = 0;
 800fab6:	2300      	movs	r3, #0
 800fab8:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 800fabc:	f10d 0107 	add.w	r1, sp, #7
 800fac0:	4620      	mov	r0, r4
 800fac2:	f7ff fea1 	bl	800f808 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800fac6:	7822      	ldrb	r2, [r4, #0]
 800fac8:	42aa      	cmp	r2, r5
 800faca:	d902      	bls.n	800fad2 <SUBGRF_GetPayload+0x26>
        return 1;
 800facc:	2001      	movs	r0, #1
}
 800face:	b002      	add	sp, #8
 800fad0:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800fad2:	4631      	mov	r1, r6
 800fad4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fad8:	f7ff ffd8 	bl	800fa8c <SUBGRF_ReadBuffer>
    return 0;
 800fadc:	2000      	movs	r0, #0
 800fade:	e7f6      	b.n	800face <SUBGRF_GetPayload+0x22>

0800fae0 <SUBGRF_SetSwitch>:
{
 800fae0:	b508      	push	{r3, lr}
    if (rxtx == RFSWITCH_TX)
 800fae2:	2901      	cmp	r1, #1
 800fae4:	d003      	beq.n	800faee <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800fae6:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 800fae8:	f7f6 ff42 	bl	8006970 <RBI_ConfigRFSwitch>
}
 800faec:	bd08      	pop	{r3, pc}
 800faee:	4603      	mov	r3, r0
 800faf0:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 800faf2:	2b01      	cmp	r3, #1
 800faf4:	d004      	beq.n	800fb00 <SUBGRF_SetSwitch+0x20>
            state = RBI_SWITCH_RFO_HP;
 800faf6:	2b02      	cmp	r3, #2
 800faf8:	bf14      	ite	ne
 800fafa:	4608      	movne	r0, r1
 800fafc:	2003      	moveq	r0, #3
 800fafe:	e7f3      	b.n	800fae8 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800fb00:	2004      	movs	r0, #4
 800fb02:	f7ff fd7b 	bl	800f5fc <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 800fb06:	2002      	movs	r0, #2
 800fb08:	e7ee      	b.n	800fae8 <SUBGRF_SetSwitch+0x8>

0800fb0a <SUBGRF_SetRfTxPower>:
{
 800fb0a:	b538      	push	{r3, r4, r5, lr}
 800fb0c:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 800fb0e:	f7f6 ff33 	bl	8006978 <RBI_GetTxConfig>
    switch (TxConfig)
 800fb12:	b150      	cbz	r0, 800fb2a <SUBGRF_SetRfTxPower+0x20>
 800fb14:	2802      	cmp	r0, #2
 800fb16:	bf14      	ite	ne
 800fb18:	2501      	movne	r5, #1
 800fb1a:	2502      	moveq	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800fb1c:	2202      	movs	r2, #2
 800fb1e:	4621      	mov	r1, r4
 800fb20:	4628      	mov	r0, r5
 800fb22:	f7ff fdeb 	bl	800f6fc <SUBGRF_SetTxParams>
}
 800fb26:	4628      	mov	r0, r5
 800fb28:	bd38      	pop	{r3, r4, r5, pc}
                paSelect = RFO_LP;
 800fb2a:	2c0f      	cmp	r4, #15
 800fb2c:	bfcc      	ite	gt
 800fb2e:	2502      	movgt	r5, #2
 800fb30:	2501      	movle	r5, #1
 800fb32:	e7f3      	b.n	800fb1c <SUBGRF_SetRfTxPower+0x12>

0800fb34 <SUBGRF_GetRadioWakeUpTime>:
}
 800fb34:	2001      	movs	r0, #1
 800fb36:	4770      	bx	lr

0800fb38 <HAL_SUBGHZ_TxCpltCallback>:
{
 800fb38:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800fb3a:	4b02      	ldr	r3, [pc, #8]	; (800fb44 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	2001      	movs	r0, #1
 800fb40:	4798      	blx	r3
}
 800fb42:	bd08      	pop	{r3, pc}
 800fb44:	200021e0 	.word	0x200021e0

0800fb48 <HAL_SUBGHZ_RxCpltCallback>:
{
 800fb48:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800fb4a:	4b02      	ldr	r3, [pc, #8]	; (800fb54 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	2002      	movs	r0, #2
 800fb50:	4798      	blx	r3
}
 800fb52:	bd08      	pop	{r3, pc}
 800fb54:	200021e0 	.word	0x200021e0

0800fb58 <HAL_SUBGHZ_CRCErrorCallback>:
{
 800fb58:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800fb5a:	4b02      	ldr	r3, [pc, #8]	; (800fb64 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	2040      	movs	r0, #64	; 0x40
 800fb60:	4798      	blx	r3
}
 800fb62:	bd08      	pop	{r3, pc}
 800fb64:	200021e0 	.word	0x200021e0

0800fb68 <HAL_SUBGHZ_CADStatusCallback>:
{
 800fb68:	b508      	push	{r3, lr}
    switch (cadstatus)
 800fb6a:	b111      	cbz	r1, 800fb72 <HAL_SUBGHZ_CADStatusCallback+0xa>
 800fb6c:	2901      	cmp	r1, #1
 800fb6e:	d005      	beq.n	800fb7c <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 800fb70:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800fb72:	4b05      	ldr	r3, [pc, #20]	; (800fb88 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	2080      	movs	r0, #128	; 0x80
 800fb78:	4798      	blx	r3
            break;
 800fb7a:	e7f9      	b.n	800fb70 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800fb7c:	4b02      	ldr	r3, [pc, #8]	; (800fb88 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	f44f 7080 	mov.w	r0, #256	; 0x100
 800fb84:	4798      	blx	r3
}
 800fb86:	e7f3      	b.n	800fb70 <HAL_SUBGHZ_CADStatusCallback+0x8>
 800fb88:	200021e0 	.word	0x200021e0

0800fb8c <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 800fb8c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800fb8e:	4b03      	ldr	r3, [pc, #12]	; (800fb9c <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	f44f 7000 	mov.w	r0, #512	; 0x200
 800fb96:	4798      	blx	r3
}
 800fb98:	bd08      	pop	{r3, pc}
 800fb9a:	bf00      	nop
 800fb9c:	200021e0 	.word	0x200021e0

0800fba0 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 800fba0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800fba2:	4b02      	ldr	r3, [pc, #8]	; (800fbac <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	2020      	movs	r0, #32
 800fba8:	4798      	blx	r3
}
 800fbaa:	bd08      	pop	{r3, pc}
 800fbac:	200021e0 	.word	0x200021e0

0800fbb0 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 800fbb0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800fbb2:	4b02      	ldr	r3, [pc, #8]	; (800fbbc <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	2004      	movs	r0, #4
 800fbb8:	4798      	blx	r3
}
 800fbba:	bd08      	pop	{r3, pc}
 800fbbc:	200021e0 	.word	0x200021e0

0800fbc0 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 800fbc0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800fbc2:	4b02      	ldr	r3, [pc, #8]	; (800fbcc <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	2008      	movs	r0, #8
 800fbc8:	4798      	blx	r3
}
 800fbca:	bd08      	pop	{r3, pc}
 800fbcc:	200021e0 	.word	0x200021e0

0800fbd0 <HAL_SUBGHZ_HeaderValidCallback>:
{
 800fbd0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800fbd2:	4b02      	ldr	r3, [pc, #8]	; (800fbdc <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	2010      	movs	r0, #16
 800fbd8:	4798      	blx	r3
}
 800fbda:	bd08      	pop	{r3, pc}
 800fbdc:	200021e0 	.word	0x200021e0

0800fbe0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 800fbe0:	4601      	mov	r1, r0
 800fbe2:	b180      	cbz	r0, 800fc06 <SUBGRF_GetFskBandwidthRegValue+0x26>
 800fbe4:	2300      	movs	r3, #0
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800fbe6:	4809      	ldr	r0, [pc, #36]	; (800fc0c <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 800fbe8:	469c      	mov	ip, r3
 800fbea:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
 800fbee:	428a      	cmp	r2, r1
 800fbf0:	d803      	bhi.n	800fbfa <SUBGRF_GetFskBandwidthRegValue+0x1a>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800fbf2:	3301      	adds	r3, #1
 800fbf4:	2b16      	cmp	r3, #22
 800fbf6:	d1f7      	bne.n	800fbe8 <SUBGRF_GetFskBandwidthRegValue+0x8>
            return FskBandwidths[i].RegValue;
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 800fbf8:	e7fe      	b.n	800fbf8 <SUBGRF_GetFskBandwidthRegValue+0x18>
            return FskBandwidths[i].RegValue;
 800fbfa:	4b04      	ldr	r3, [pc, #16]	; (800fc0c <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 800fbfc:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
 800fc00:	f89c 0004 	ldrb.w	r0, [ip, #4]
 800fc04:	4770      	bx	lr
        return( 0x1F );
 800fc06:	201f      	movs	r0, #31
}
 800fc08:	4770      	bx	lr
 800fc0a:	bf00      	nop
 800fc0c:	08011608 	.word	0x08011608

0800fc10 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800fc10:	b570      	push	{r4, r5, r6, lr}
 800fc12:	b082      	sub	sp, #8
 800fc14:	4606      	mov	r6, r0
 800fc16:	460d      	mov	r5, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 800fc18:	4b1d      	ldr	r3, [pc, #116]	; (800fc90 <SUBGRF_GetCFO+0x80>)
 800fc1a:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800fc1c:	f640 0007 	movw	r0, #2055	; 0x807
 800fc20:	f7ff fcdc 	bl	800f5dc <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800fc24:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 800fc28:	3308      	adds	r3, #8
 800fc2a:	446b      	add	r3, sp
  uint8_t bandwidth_exp = reg & 0x7;
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 800fc2c:	f813 4c04 	ldrb.w	r4, [r3, #-4]
 800fc30:	f000 0307 	and.w	r3, r0, #7
 800fc34:	3b01      	subs	r3, #1
 800fc36:	fa04 f303 	lsl.w	r3, r4, r3
 800fc3a:	4c16      	ldr	r4, [pc, #88]	; (800fc94 <SUBGRF_GetCFO+0x84>)
 800fc3c:	fbb4 f3f3 	udiv	r3, r4, r3
  uint32_t cf_osr = cf_fs / bitRate;
 800fc40:	fbb3 f0f6 	udiv	r0, r3, r6
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800fc44:	2807      	cmp	r0, #7
 800fc46:	d820      	bhi.n	800fc8a <SUBGRF_GetCFO+0x7a>
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 800fc48:	0040      	lsls	r0, r0, #1
  {
    interp = 4;
 800fc4a:	2803      	cmp	r0, #3
 800fc4c:	bf8c      	ite	hi
 800fc4e:	2402      	movhi	r4, #2
 800fc50:	2404      	movls	r4, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800fc52:	fb03 f404 	mul.w	r4, r3, r4
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800fc56:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800fc5a:	f7ff fcbf 	bl	800f5dc <SUBGRF_ReadRegister>
 800fc5e:	0200      	lsls	r0, r0, #8
 800fc60:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800fc64:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800fc68:	f7ff fcb8 	bl	800f5dc <SUBGRF_ReadRegister>
 800fc6c:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800fc6e:	f410 6f00 	tst.w	r0, #2048	; 0x800
  {
    cfo_bin |= 0xFFFFF000;
 800fc72:	bf1c      	itt	ne
 800fc74:	ea6f 5000 	mvnne.w	r0, r0, lsl #20
 800fc78:	ea6f 5010 	mvnne.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800fc7c:	0964      	lsrs	r4, r4, #5
 800fc7e:	fb00 f404 	mul.w	r4, r0, r4
 800fc82:	11e4      	asrs	r4, r4, #7
 800fc84:	602c      	str	r4, [r5, #0]
}
 800fc86:	b002      	add	sp, #8
 800fc88:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t interp = 1;
 800fc8a:	2401      	movs	r4, #1
 800fc8c:	e7e1      	b.n	800fc52 <SUBGRF_GetCFO+0x42>
 800fc8e:	bf00      	nop
 800fc90:	0c0a0804 	.word	0x0c0a0804
 800fc94:	01e84800 	.word	0x01e84800

0800fc98 <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 800fc98:	f04f 30ff 	mov.w	r0, #4294967295
 800fc9c:	4770      	bx	lr

0800fc9e <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 800fc9e:	f04f 30ff 	mov.w	r0, #4294967295
 800fca2:	4770      	bx	lr

0800fca4 <RFW_Init>:
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
#endif
}
 800fca4:	f04f 30ff 	mov.w	r0, #4294967295
 800fca8:	4770      	bx	lr

0800fcaa <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 800fcaa:	4770      	bx	lr

0800fcac <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 800fcac:	2000      	movs	r0, #0
 800fcae:	4770      	bx	lr

0800fcb0 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 800fcb0:	2000      	movs	r0, #0
 800fcb2:	4770      	bx	lr

0800fcb4 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 800fcb4:	4770      	bx	lr

0800fcb6 <RFW_TransmitInit>:

    status= 0;
  }
#endif
  return status;
}
 800fcb6:	f04f 30ff 	mov.w	r0, #4294967295
 800fcba:	4770      	bx	lr

0800fcbc <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 800fcbc:	f04f 30ff 	mov.w	r0, #4294967295
 800fcc0:	4770      	bx	lr

0800fcc2 <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 800fcc2:	4770      	bx	lr

0800fcc4 <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 800fcc4:	4770      	bx	lr

0800fcc6 <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 800fcc6:	4770      	bx	lr

0800fcc8 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800fcc8:	2300      	movs	r3, #0
 800fcca:	4a02      	ldr	r2, [pc, #8]	; (800fcd4 <UTIL_LPM_Init+0xc>)
 800fccc:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800fcce:	4a02      	ldr	r2, [pc, #8]	; (800fcd8 <UTIL_LPM_Init+0x10>)
 800fcd0:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800fcd2:	4770      	bx	lr
 800fcd4:	200021e8 	.word	0x200021e8
 800fcd8:	200021e4 	.word	0x200021e4

0800fcdc <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fcdc:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800fce0:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 800fce2:	b141      	cbz	r1, 800fcf6 <UTIL_LPM_SetStopMode+0x1a>
 800fce4:	2901      	cmp	r1, #1
 800fce6:	d103      	bne.n	800fcf0 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800fce8:	4906      	ldr	r1, [pc, #24]	; (800fd04 <UTIL_LPM_SetStopMode+0x28>)
 800fcea:	680a      	ldr	r2, [r1, #0]
 800fcec:	4310      	orrs	r0, r2
 800fcee:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fcf0:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800fcf4:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 800fcf6:	4903      	ldr	r1, [pc, #12]	; (800fd04 <UTIL_LPM_SetStopMode+0x28>)
 800fcf8:	680a      	ldr	r2, [r1, #0]
 800fcfa:	ea22 0000 	bic.w	r0, r2, r0
 800fcfe:	6008      	str	r0, [r1, #0]
      break;
 800fd00:	e7f6      	b.n	800fcf0 <UTIL_LPM_SetStopMode+0x14>
 800fd02:	bf00      	nop
 800fd04:	200021e8 	.word	0x200021e8

0800fd08 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd08:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800fd0c:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800fd0e:	b141      	cbz	r1, 800fd22 <UTIL_LPM_SetOffMode+0x1a>
 800fd10:	2901      	cmp	r1, #1
 800fd12:	d103      	bne.n	800fd1c <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800fd14:	4906      	ldr	r1, [pc, #24]	; (800fd30 <UTIL_LPM_SetOffMode+0x28>)
 800fd16:	680a      	ldr	r2, [r1, #0]
 800fd18:	4310      	orrs	r0, r2
 800fd1a:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd1c:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800fd20:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 800fd22:	4903      	ldr	r1, [pc, #12]	; (800fd30 <UTIL_LPM_SetOffMode+0x28>)
 800fd24:	680a      	ldr	r2, [r1, #0]
 800fd26:	ea22 0000 	bic.w	r0, r2, r0
 800fd2a:	6008      	str	r0, [r1, #0]
      break;
 800fd2c:	e7f6      	b.n	800fd1c <UTIL_LPM_SetOffMode+0x14>
 800fd2e:	bf00      	nop
 800fd30:	200021e4 	.word	0x200021e4

0800fd34 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800fd34:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd36:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800fd3a:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800fd3c:	4b0c      	ldr	r3, [pc, #48]	; (800fd70 <UTIL_LPM_EnterLowPower+0x3c>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	b13b      	cbz	r3, 800fd52 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800fd42:	4d0c      	ldr	r5, [pc, #48]	; (800fd74 <UTIL_LPM_EnterLowPower+0x40>)
 800fd44:	682b      	ldr	r3, [r5, #0]
 800fd46:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800fd48:	686b      	ldr	r3, [r5, #4]
 800fd4a:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd4c:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800fd50:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800fd52:	4b09      	ldr	r3, [pc, #36]	; (800fd78 <UTIL_LPM_EnterLowPower+0x44>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	b12b      	cbz	r3, 800fd64 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 800fd58:	4d06      	ldr	r5, [pc, #24]	; (800fd74 <UTIL_LPM_EnterLowPower+0x40>)
 800fd5a:	68ab      	ldr	r3, [r5, #8]
 800fd5c:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800fd5e:	68eb      	ldr	r3, [r5, #12]
 800fd60:	4798      	blx	r3
 800fd62:	e7f3      	b.n	800fd4c <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 800fd64:	4d03      	ldr	r5, [pc, #12]	; (800fd74 <UTIL_LPM_EnterLowPower+0x40>)
 800fd66:	692b      	ldr	r3, [r5, #16]
 800fd68:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800fd6a:	696b      	ldr	r3, [r5, #20]
 800fd6c:	4798      	blx	r3
 800fd6e:	e7ed      	b.n	800fd4c <UTIL_LPM_EnterLowPower+0x18>
 800fd70:	200021e8 	.word	0x200021e8
 800fd74:	08010d54 	.word	0x08010d54
 800fd78:	200021e4 	.word	0x200021e4

0800fd7c <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 800fd7c:	1e53      	subs	r3, r2, #1
 800fd7e:	b29b      	uxth	r3, r3
 800fd80:	b142      	cbz	r2, 800fd94 <UTIL_MEM_cpy_8+0x18>
 800fd82:	3801      	subs	r0, #1
 800fd84:	3301      	adds	r3, #1
 800fd86:	18ca      	adds	r2, r1, r3
    {
        *dst8++ = *src8++;
 800fd88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd8c:	f800 3f01 	strb.w	r3, [r0, #1]!
  while( size-- )
 800fd90:	4291      	cmp	r1, r2
 800fd92:	d1f9      	bne.n	800fd88 <UTIL_MEM_cpy_8+0xc>
    }
}
 800fd94:	4770      	bx	lr

0800fd96 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 800fd96:	1e53      	subs	r3, r2, #1
 800fd98:	b29b      	uxth	r3, r3
 800fd9a:	b12a      	cbz	r2, 800fda8 <UTIL_MEM_set_8+0x12>
 800fd9c:	3301      	adds	r3, #1
 800fd9e:	4403      	add	r3, r0
  {
    *dst8++ = value;
 800fda0:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 800fda4:	4298      	cmp	r0, r3
 800fda6:	d1fb      	bne.n	800fda0 <UTIL_MEM_set_8+0xa>
  }
}
 800fda8:	4770      	bx	lr

0800fdaa <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800fdaa:	b082      	sub	sp, #8
 800fdac:	b082      	sub	sp, #8
 800fdae:	f10d 0c08 	add.w	ip, sp, #8
 800fdb2:	e90c 0006 	stmdb	ip, {r1, r2}
 800fdb6:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
 800fdb8:	440b      	add	r3, r1
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800fdba:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800fdbe:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800fdc2:	440a      	add	r2, r1
 800fdc4:	b291      	uxth	r1, r2
 800fdc6:	b212      	sxth	r2, r2
  if( c.SubSeconds >= 1000 )
 800fdc8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800fdcc:	db03      	blt.n	800fdd6 <SysTimeAdd+0x2c>
  {
    c.Seconds++;
 800fdce:	3301      	adds	r3, #1
    c.SubSeconds -= 1000;
 800fdd0:	f5a1 727a 	sub.w	r2, r1, #1000	; 0x3e8
 800fdd4:	b212      	sxth	r2, r2
  }
  return c;
 800fdd6:	6003      	str	r3, [r0, #0]
 800fdd8:	8082      	strh	r2, [r0, #4]
}
 800fdda:	b002      	add	sp, #8
 800fddc:	b002      	add	sp, #8
 800fdde:	4770      	bx	lr

0800fde0 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 800fde0:	b082      	sub	sp, #8
 800fde2:	b082      	sub	sp, #8
 800fde4:	f10d 0c08 	add.w	ip, sp, #8
 800fde8:	e90c 0006 	stmdb	ip, {r1, r2}
 800fdec:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds - b.Seconds;
 800fdee:	1acb      	subs	r3, r1, r3
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800fdf0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800fdf4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800fdf8:	1a52      	subs	r2, r2, r1
 800fdfa:	b291      	uxth	r1, r2
 800fdfc:	b212      	sxth	r2, r2
  if( c.SubSeconds < 0 )
 800fdfe:	2a00      	cmp	r2, #0
 800fe00:	db04      	blt.n	800fe0c <SysTimeSub+0x2c>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
 800fe02:	6003      	str	r3, [r0, #0]
 800fe04:	8082      	strh	r2, [r0, #4]
}
 800fe06:	b002      	add	sp, #8
 800fe08:	b002      	add	sp, #8
 800fe0a:	4770      	bx	lr
    c.Seconds--;
 800fe0c:	3b01      	subs	r3, #1
    c.SubSeconds += 1000;
 800fe0e:	f501 727a 	add.w	r2, r1, #1000	; 0x3e8
 800fe12:	b212      	sxth	r2, r2
 800fe14:	e7f5      	b.n	800fe02 <SysTimeSub+0x22>
	...

0800fe18 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 800fe18:	b530      	push	{r4, r5, lr}
 800fe1a:	b085      	sub	sp, #20
 800fe1c:	466b      	mov	r3, sp
 800fe1e:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800fe22:	2300      	movs	r3, #0
 800fe24:	9302      	str	r3, [sp, #8]
 800fe26:	f8ad 300c 	strh.w	r3, [sp, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800fe2a:	4b0e      	ldr	r3, [pc, #56]	; (800fe64 <SysTimeSet+0x4c>)
 800fe2c:	691b      	ldr	r3, [r3, #16]
 800fe2e:	a803      	add	r0, sp, #12
 800fe30:	4798      	blx	r3
 800fe32:	9002      	str	r0, [sp, #8]
  c.Seconds = a.Seconds - b.Seconds;
 800fe34:	9b00      	ldr	r3, [sp, #0]
 800fe36:	1a18      	subs	r0, r3, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800fe38:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 800fe3c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800fe40:	1ae4      	subs	r4, r4, r3
 800fe42:	b2a3      	uxth	r3, r4
 800fe44:	b224      	sxth	r4, r4
  if( c.SubSeconds < 0 )
 800fe46:	2c00      	cmp	r4, #0
 800fe48:	db07      	blt.n	800fe5a <SysTimeSet+0x42>

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 800fe4a:	4d06      	ldr	r5, [pc, #24]	; (800fe64 <SysTimeSet+0x4c>)
 800fe4c:	682b      	ldr	r3, [r5, #0]
 800fe4e:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 800fe50:	68ab      	ldr	r3, [r5, #8]
 800fe52:	4620      	mov	r0, r4
 800fe54:	4798      	blx	r3
}
 800fe56:	b005      	add	sp, #20
 800fe58:	bd30      	pop	{r4, r5, pc}
    c.Seconds--;
 800fe5a:	3801      	subs	r0, #1
    c.SubSeconds += 1000;
 800fe5c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800fe60:	b21c      	sxth	r4, r3
 800fe62:	e7f2      	b.n	800fe4a <SysTimeSet+0x32>
 800fe64:	08010e18 	.word	0x08010e18

0800fe68 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 800fe68:	b570      	push	{r4, r5, r6, lr}
 800fe6a:	b082      	sub	sp, #8
 800fe6c:	4605      	mov	r5, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800fe6e:	2300      	movs	r3, #0
 800fe70:	9300      	str	r3, [sp, #0]
 800fe72:	f8ad 3004 	strh.w	r3, [sp, #4]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800fe76:	4e0e      	ldr	r6, [pc, #56]	; (800feb0 <SysTimeGet+0x48>)
 800fe78:	6933      	ldr	r3, [r6, #16]
 800fe7a:	a801      	add	r0, sp, #4
 800fe7c:	4798      	blx	r3
 800fe7e:	9000      	str	r0, [sp, #0]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800fe80:	68f3      	ldr	r3, [r6, #12]
 800fe82:	4798      	blx	r3
 800fe84:	4604      	mov	r4, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800fe86:	6873      	ldr	r3, [r6, #4]
 800fe88:	4798      	blx	r3
  c.Seconds = a.Seconds + b.Seconds;
 800fe8a:	9b00      	ldr	r3, [sp, #0]
 800fe8c:	4418      	add	r0, r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800fe8e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800fe92:	4423      	add	r3, r4
 800fe94:	b29a      	uxth	r2, r3
 800fe96:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 800fe98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fe9c:	db03      	blt.n	800fea6 <SysTimeGet+0x3e>
    c.Seconds++;
 800fe9e:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 800fea0:	f5a2 737a 	sub.w	r3, r2, #1000	; 0x3e8
 800fea4:	b21b      	sxth	r3, r3

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 800fea6:	6028      	str	r0, [r5, #0]
 800fea8:	80ab      	strh	r3, [r5, #4]
}
 800feaa:	4628      	mov	r0, r5
 800feac:	b002      	add	sp, #8
 800feae:	bd70      	pop	{r4, r5, r6, pc}
 800feb0:	08010e18 	.word	0x08010e18

0800feb4 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 800feb4:	b530      	push	{r4, r5, lr}
 800feb6:	b083      	sub	sp, #12
 800feb8:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800feba:	2300      	movs	r3, #0
 800febc:	9300      	str	r3, [sp, #0]
 800febe:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800fec2:	466d      	mov	r5, sp
 800fec4:	4b05      	ldr	r3, [pc, #20]	; (800fedc <SysTimeGetMcuTime+0x28>)
 800fec6:	691b      	ldr	r3, [r3, #16]
 800fec8:	a801      	add	r0, sp, #4
 800feca:	4798      	blx	r3
 800fecc:	9000      	str	r0, [sp, #0]

  return calendarTime;
 800fece:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fed2:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800fed6:	4620      	mov	r0, r4
 800fed8:	b003      	add	sp, #12
 800feda:	bd30      	pop	{r4, r5, pc}
 800fedc:	08010e18 	.word	0x08010e18

0800fee0 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 800fee0:	b530      	push	{r4, r5, lr}
 800fee2:	b083      	sub	sp, #12
 800fee4:	ab02      	add	r3, sp, #8
 800fee6:	e903 0003 	stmdb	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800feea:	4d0d      	ldr	r5, [pc, #52]	; (800ff20 <SysTimeToMs+0x40>)
 800feec:	68eb      	ldr	r3, [r5, #12]
 800feee:	4798      	blx	r3
 800fef0:	4604      	mov	r4, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800fef2:	686b      	ldr	r3, [r5, #4]
 800fef4:	4798      	blx	r3
  c.Seconds = a.Seconds - b.Seconds;
 800fef6:	9a00      	ldr	r2, [sp, #0]
 800fef8:	1a12      	subs	r2, r2, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800fefa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800fefe:	1b1b      	subs	r3, r3, r4
 800ff00:	b299      	uxth	r1, r3
 800ff02:	b21b      	sxth	r3, r3
  if( c.SubSeconds < 0 )
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	db05      	blt.n	800ff14 <SysTimeToMs+0x34>

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
}
 800ff08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ff0c:	fb00 3002 	mla	r0, r0, r2, r3
 800ff10:	b003      	add	sp, #12
 800ff12:	bd30      	pop	{r4, r5, pc}
    c.Seconds--;
 800ff14:	3a01      	subs	r2, #1
    c.SubSeconds += 1000;
 800ff16:	f501 737a 	add.w	r3, r1, #1000	; 0x3e8
 800ff1a:	b21b      	sxth	r3, r3
 800ff1c:	e7f4      	b.n	800ff08 <SysTimeToMs+0x28>
 800ff1e:	bf00      	nop
 800ff20:	08010e18 	.word	0x08010e18

0800ff24 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 800ff24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff28:	4606      	mov	r6, r0
  uint32_t seconds = timeMs / 1000;
 800ff2a:	4d12      	ldr	r5, [pc, #72]	; (800ff74 <SysTimeFromMs+0x50>)
 800ff2c:	fba5 3501 	umull	r3, r5, r5, r1
 800ff30:	09ad      	lsrs	r5, r5, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800ff32:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
 800ff36:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ff3a:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 800ff3e:	b29c      	uxth	r4, r3
  SysTime_t DeltaTime = { 0 };

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800ff40:	f8df 8034 	ldr.w	r8, [pc, #52]	; 800ff78 <SysTimeFromMs+0x54>
 800ff44:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ff48:	4798      	blx	r3
 800ff4a:	4607      	mov	r7, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800ff4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ff50:	4798      	blx	r3
  c.Seconds = a.Seconds + b.Seconds;
 800ff52:	4405      	add	r5, r0
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800ff54:	19e3      	adds	r3, r4, r7
 800ff56:	b29a      	uxth	r2, r3
 800ff58:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 800ff5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ff5e:	db03      	blt.n	800ff68 <SysTimeFromMs+0x44>
    c.Seconds++;
 800ff60:	3501      	adds	r5, #1
    c.SubSeconds -= 1000;
 800ff62:	f5a2 737a 	sub.w	r3, r2, #1000	; 0x3e8
 800ff66:	b21b      	sxth	r3, r3
  return c;
 800ff68:	6035      	str	r5, [r6, #0]
 800ff6a:	80b3      	strh	r3, [r6, #4]
  return SysTimeAdd( sysTime, DeltaTime );
}
 800ff6c:	4630      	mov	r0, r6
 800ff6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff72:	bf00      	nop
 800ff74:	10624dd3 	.word	0x10624dd3
 800ff78:	08010e18 	.word	0x08010e18

0800ff7c <tiny_vsnprintf_like>:

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800ff7c:	2900      	cmp	r1, #0
 800ff7e:	f340 81a2 	ble.w	80102c6 <tiny_vsnprintf_like+0x34a>
{
 800ff82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff86:	b097      	sub	sp, #92	; 0x5c
 800ff88:	4682      	mov	sl, r0
 800ff8a:	4616      	mov	r6, r2
 800ff8c:	4699      	mov	r9, r3
 800ff8e:	9302      	str	r3, [sp, #8]
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800ff90:	4604      	mov	r4, r0
  {
    CHECK_STR_SIZE(buf, str, size);
 800ff92:	f101 3bff 	add.w	fp, r1, #4294967295
  while (size-- > 0) ASSIGN_STR(' ');
 800ff96:	2720      	movs	r7, #32
 800ff98:	e02d      	b.n	800fff6 <tiny_vsnprintf_like+0x7a>
    CHECK_STR_SIZE(buf, str, size);
 800ff9a:	eba4 020a 	sub.w	r2, r4, sl
 800ff9e:	455a      	cmp	r2, fp
 800ffa0:	da2c      	bge.n	800fffc <tiny_vsnprintf_like+0x80>

    if (*fmt != '%')
 800ffa2:	2b25      	cmp	r3, #37	; 0x25
 800ffa4:	d124      	bne.n	800fff0 <tiny_vsnprintf_like+0x74>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800ffa6:	1c72      	adds	r2, r6, #1
    if (*fmt == '0')
 800ffa8:	7871      	ldrb	r1, [r6, #1]
 800ffaa:	2930      	cmp	r1, #48	; 0x30
 800ffac:	bf14      	ite	ne
 800ffae:	f04f 0c00 	movne.w	ip, #0
 800ffb2:	f04f 0c01 	moveq.w	ip, #1
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 800ffb6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ffba:	b2db      	uxtb	r3, r3
 800ffbc:	2b09      	cmp	r3, #9
 800ffbe:	d924      	bls.n	801000a <tiny_vsnprintf_like+0x8e>
#endif

    // Default base
    base = 10;

    switch (*fmt)
 800ffc0:	f1a1 0358 	sub.w	r3, r1, #88	; 0x58
 800ffc4:	2b20      	cmp	r3, #32
 800ffc6:	f200 80bb 	bhi.w	8010140 <tiny_vsnprintf_like+0x1c4>
 800ffca:	e8df f003 	tbb	[pc, r3]
 800ffce:	b99c      	.short	0xb99c
 800ffd0:	b9b9b9b9 	.word	0xb9b9b9b9
 800ffd4:	b9b9b9b9 	.word	0xb9b9b9b9
 800ffd8:	b9a65fb9 	.word	0xb9a65fb9
 800ffdc:	a6b9b9b9 	.word	0xa6b9b9b9
 800ffe0:	b9b9b9b9 	.word	0xb9b9b9b9
 800ffe4:	b9b9b9b9 	.word	0xb9b9b9b9
 800ffe8:	deb963b9 	.word	0xdeb963b9
 800ffec:	b9b9      	.short	0xb9b9
 800ffee:	59          	.byte	0x59
 800ffef:	00          	.byte	0x00
      *str++ = *fmt;
 800fff0:	f804 3b01 	strb.w	r3, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800fff4:	3601      	adds	r6, #1
 800fff6:	7833      	ldrb	r3, [r6, #0]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d1ce      	bne.n	800ff9a <tiny_vsnprintf_like+0x1e>
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
 800fffc:	2300      	movs	r3, #0
 800fffe:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8010000:	eba4 000a 	sub.w	r0, r4, sl
}
 8010004:	b017      	add	sp, #92	; 0x5c
 8010006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int i = 0;
 801000a:	2500      	movs	r5, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801000c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010010:	eb01 0345 	add.w	r3, r1, r5, lsl #1
 8010014:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8010018:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 801001c:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8010020:	b2c0      	uxtb	r0, r0
 8010022:	2809      	cmp	r0, #9
 8010024:	d9f2      	bls.n	801000c <tiny_vsnprintf_like+0x90>
    switch (*fmt)
 8010026:	f1a1 0058 	sub.w	r0, r1, #88	; 0x58
 801002a:	2820      	cmp	r0, #32
 801002c:	f200 808a 	bhi.w	8010144 <tiny_vsnprintf_like+0x1c8>
 8010030:	e8df f000 	tbb	[pc, r0]
 8010034:	88888867 	.word	0x88888867
 8010038:	88888888 	.word	0x88888888
 801003c:	11888888 	.word	0x11888888
 8010040:	88888871 	.word	0x88888871
 8010044:	88887188 	.word	0x88887188
 8010048:	88888888 	.word	0x88888888
 801004c:	2e888888 	.word	0x2e888888
 8010050:	8888a988 	.word	0x8888a988
 8010054:	24          	.byte	0x24
 8010055:	00          	.byte	0x00
          while (--field_width > 0) *str++ = ' ';
 8010056:	2b31      	cmp	r3, #49	; 0x31
 8010058:	bfd8      	it	le
 801005a:	4623      	movle	r3, r4
 801005c:	dd05      	ble.n	801006a <tiny_vsnprintf_like+0xee>
 801005e:	3b31      	subs	r3, #49	; 0x31
 8010060:	4423      	add	r3, r4
 8010062:	f804 7b01 	strb.w	r7, [r4], #1
 8010066:	429c      	cmp	r4, r3
 8010068:	d1fb      	bne.n	8010062 <tiny_vsnprintf_like+0xe6>
        *str++ = (unsigned char) va_arg(args, int);
 801006a:	9902      	ldr	r1, [sp, #8]
 801006c:	461c      	mov	r4, r3
 801006e:	f851 3b04 	ldr.w	r3, [r1], #4
 8010072:	f804 3b01 	strb.w	r3, [r4], #1
 8010076:	9102      	str	r1, [sp, #8]
        continue;
 8010078:	4616      	mov	r6, r2
 801007a:	e7bb      	b.n	800fff4 <tiny_vsnprintf_like+0x78>
    switch (*fmt)
 801007c:	4616      	mov	r6, r2
 801007e:	e002      	b.n	8010086 <tiny_vsnprintf_like+0x10a>
 8010080:	4616      	mov	r6, r2
 8010082:	f04f 35ff 	mov.w	r5, #4294967295
    return 0;
 8010086:	9401      	str	r4, [sp, #4]
        base = 16;
 8010088:	2410      	movs	r4, #16
 801008a:	e083      	b.n	8010194 <tiny_vsnprintf_like+0x218>
    switch (*fmt)
 801008c:	4623      	mov	r3, r4
 801008e:	e7ec      	b.n	801006a <tiny_vsnprintf_like+0xee>
 8010090:	4616      	mov	r6, r2
 8010092:	e002      	b.n	801009a <tiny_vsnprintf_like+0x11e>
 8010094:	4616      	mov	r6, r2
 8010096:	f04f 35ff 	mov.w	r5, #4294967295
        s = va_arg(args, char *);
 801009a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801009e:	f859 8b04 	ldr.w	r8, [r9], #4
        if (!s) s = "<NULL>";
 80100a2:	f1b8 0f00 	cmp.w	r8, #0
 80100a6:	f000 8110 	beq.w	80102ca <tiny_vsnprintf_like+0x34e>
        len = strlen(s);
 80100aa:	4640      	mov	r0, r8
 80100ac:	f7f0 f864 	bl	8000178 <strlen>
 80100b0:	4602      	mov	r2, r0
          while (len < field_width--) *str++ = ' ';
 80100b2:	f105 3cff 	add.w	ip, r5, #4294967295
 80100b6:	42a8      	cmp	r0, r5
 80100b8:	da0f      	bge.n	80100da <tiny_vsnprintf_like+0x15e>
        if (!s) s = "<NULL>";
 80100ba:	4621      	mov	r1, r4
 80100bc:	4660      	mov	r0, ip
          while (len < field_width--) *str++ = ' ';
 80100be:	f801 7b01 	strb.w	r7, [r1], #1
 80100c2:	f1c1 0301 	rsb	r3, r1, #1
 80100c6:	4423      	add	r3, r4
 80100c8:	4463      	add	r3, ip
 80100ca:	429a      	cmp	r2, r3
 80100cc:	dbf7      	blt.n	80100be <tiny_vsnprintf_like+0x142>
 80100ce:	1c43      	adds	r3, r0, #1
 80100d0:	1a9b      	subs	r3, r3, r2
 80100d2:	4562      	cmp	r2, ip
 80100d4:	bfc8      	it	gt
 80100d6:	2301      	movgt	r3, #1
 80100d8:	441c      	add	r4, r3
        for (i = 0; i < len; ++i) *str++ = *s++;
 80100da:	2a00      	cmp	r2, #0
 80100dc:	f340 80f0 	ble.w	80102c0 <tiny_vsnprintf_like+0x344>
 80100e0:	1e61      	subs	r1, r4, #1
 80100e2:	f818 0b01 	ldrb.w	r0, [r8], #1
 80100e6:	460b      	mov	r3, r1
 80100e8:	f801 0f01 	strb.w	r0, [r1, #1]!
 80100ec:	3302      	adds	r3, #2
 80100ee:	1b1b      	subs	r3, r3, r4
 80100f0:	429a      	cmp	r2, r3
 80100f2:	dcf6      	bgt.n	80100e2 <tiny_vsnprintf_like+0x166>
 80100f4:	2a00      	cmp	r2, #0
 80100f6:	bfd8      	it	le
 80100f8:	2201      	movle	r2, #1
 80100fa:	4414      	add	r4, r2
        s = va_arg(args, char *);
 80100fc:	f8cd 9008 	str.w	r9, [sp, #8]
 8010100:	e778      	b.n	800fff4 <tiny_vsnprintf_like+0x78>
    switch (*fmt)
 8010102:	4616      	mov	r6, r2
 8010104:	e002      	b.n	801010c <tiny_vsnprintf_like+0x190>
 8010106:	4616      	mov	r6, r2
 8010108:	f04f 35ff 	mov.w	r5, #4294967295
        flags |= UPPERCASE;
 801010c:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 8010110:	9401      	str	r4, [sp, #4]
        base = 16;
 8010112:	2410      	movs	r4, #16
 8010114:	e03e      	b.n	8010194 <tiny_vsnprintf_like+0x218>
    switch (*fmt)
 8010116:	4616      	mov	r6, r2
 8010118:	e002      	b.n	8010120 <tiny_vsnprintf_like+0x1a4>
 801011a:	4616      	mov	r6, r2
 801011c:	f04f 35ff 	mov.w	r5, #4294967295
        flags |= SIGN;
 8010120:	f04c 0c02 	orr.w	ip, ip, #2
      num = va_arg(args, int);
 8010124:	9902      	ldr	r1, [sp, #8]
 8010126:	f851 2b04 	ldr.w	r2, [r1], #4
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801012a:	eba4 030a 	sub.w	r3, r4, sl
 801012e:	ebab 0303 	sub.w	r3, fp, r3
 8010132:	9401      	str	r4, [sp, #4]
      num = va_arg(args, int);
 8010134:	9102      	str	r1, [sp, #8]
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8010136:	240a      	movs	r4, #10
 8010138:	2102      	movs	r1, #2
  char *dig = lower_digits;
 801013a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80102e4 <tiny_vsnprintf_like+0x368>
 801013e:	e03a      	b.n	80101b6 <tiny_vsnprintf_like+0x23a>
    switch (*fmt)
 8010140:	f04f 35ff 	mov.w	r5, #4294967295
        if (*fmt != '%') *str++ = '%';
 8010144:	2925      	cmp	r1, #37	; 0x25
 8010146:	d00c      	beq.n	8010162 <tiny_vsnprintf_like+0x1e6>
 8010148:	4621      	mov	r1, r4
 801014a:	2325      	movs	r3, #37	; 0x25
 801014c:	f801 3b01 	strb.w	r3, [r1], #1
 8010150:	9101      	str	r1, [sp, #4]
        CHECK_STR_SIZE(buf, str, size);
 8010152:	eba1 030a 	sub.w	r3, r1, sl
 8010156:	459b      	cmp	fp, r3
 8010158:	dc02      	bgt.n	8010160 <tiny_vsnprintf_like+0x1e4>
    if (qualifier == 'l')
 801015a:	4616      	mov	r6, r2
    base = 10;
 801015c:	240a      	movs	r4, #10
 801015e:	e019      	b.n	8010194 <tiny_vsnprintf_like+0x218>
        if (*fmt != '%') *str++ = '%';
 8010160:	460c      	mov	r4, r1
        if (*fmt)
 8010162:	7813      	ldrb	r3, [r2, #0]
 8010164:	b16b      	cbz	r3, 8010182 <tiny_vsnprintf_like+0x206>
          *str++ = *fmt;
 8010166:	4621      	mov	r1, r4
 8010168:	f801 3b01 	strb.w	r3, [r1], #1
 801016c:	9101      	str	r1, [sp, #4]
        CHECK_STR_SIZE(buf, str, size);
 801016e:	eba1 030a 	sub.w	r3, r1, sl
 8010172:	459b      	cmp	fp, r3
 8010174:	dc02      	bgt.n	801017c <tiny_vsnprintf_like+0x200>
    if (qualifier == 'l')
 8010176:	4616      	mov	r6, r2
    base = 10;
 8010178:	240a      	movs	r4, #10
    else if (flags & SIGN)
 801017a:	e00b      	b.n	8010194 <tiny_vsnprintf_like+0x218>
 801017c:	4616      	mov	r6, r2
          *str++ = *fmt;
 801017e:	460c      	mov	r4, r1
 8010180:	e738      	b.n	800fff4 <tiny_vsnprintf_like+0x78>
          --fmt;
 8010182:	1e56      	subs	r6, r2, #1
        CHECK_STR_SIZE(buf, str, size);
 8010184:	e736      	b.n	800fff4 <tiny_vsnprintf_like+0x78>
    switch (*fmt)
 8010186:	4616      	mov	r6, r2
 8010188:	e002      	b.n	8010190 <tiny_vsnprintf_like+0x214>
 801018a:	4616      	mov	r6, r2
 801018c:	f04f 35ff 	mov.w	r5, #4294967295
    else if (flags & SIGN)
 8010190:	9401      	str	r4, [sp, #4]
 8010192:	240a      	movs	r4, #10
      num = va_arg(args, unsigned int);
 8010194:	9802      	ldr	r0, [sp, #8]
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8010196:	9b01      	ldr	r3, [sp, #4]
 8010198:	eba3 030a 	sub.w	r3, r3, sl
 801019c:	ebab 0303 	sub.w	r3, fp, r3
 80101a0:	f850 2b04 	ldr.w	r2, [r0], #4
  if (type & UPPERCASE)  dig = upper_digits;
 80101a4:	f01c 0140 	ands.w	r1, ip, #64	; 0x40
      num = va_arg(args, unsigned int);
 80101a8:	9002      	str	r0, [sp, #8]
  if (type & UPPERCASE)  dig = upper_digits;
 80101aa:	bf1a      	itte	ne
 80101ac:	2100      	movne	r1, #0
 80101ae:	f8df 8138 	ldrne.w	r8, [pc, #312]	; 80102e8 <tiny_vsnprintf_like+0x36c>
  char *dig = lower_digits;
 80101b2:	f8df 8130 	ldreq.w	r8, [pc, #304]	; 80102e4 <tiny_vsnprintf_like+0x368>
  c = (type & ZEROPAD) ? '0' : ' ';
 80101b6:	f01c 0c01 	ands.w	ip, ip, #1
 80101ba:	bf14      	ite	ne
 80101bc:	f04f 0930 	movne.w	r9, #48	; 0x30
 80101c0:	f04f 0920 	moveq.w	r9, #32
  if (type & SIGN)
 80101c4:	b109      	cbz	r1, 80101ca <tiny_vsnprintf_like+0x24e>
    if (num < 0)
 80101c6:	2a00      	cmp	r2, #0
 80101c8:	db29      	blt.n	801021e <tiny_vsnprintf_like+0x2a2>
  if (num == 0)
 80101ca:	bb6a      	cbnz	r2, 8010228 <tiny_vsnprintf_like+0x2ac>
    tmp[i++] = '0';
 80101cc:	f04f 0230 	mov.w	r2, #48	; 0x30
 80101d0:	f88d 2014 	strb.w	r2, [sp, #20]
 80101d4:	2200      	movs	r2, #0
 80101d6:	9203      	str	r2, [sp, #12]
 80101d8:	2001      	movs	r0, #1
  if (i > precision) precision = i;
 80101da:	ea40 71e0 	orr.w	r1, r0, r0, asr #31
  size -= precision;
 80101de:	1a6d      	subs	r5, r5, r1
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80101e0:	f1bc 0f00 	cmp.w	ip, #0
 80101e4:	d032      	beq.n	801024c <tiny_vsnprintf_like+0x2d0>
  if (sign) ASSIGN_STR(sign);
 80101e6:	9a03      	ldr	r2, [sp, #12]
 80101e8:	b132      	cbz	r2, 80101f8 <tiny_vsnprintf_like+0x27c>
 80101ea:	9c01      	ldr	r4, [sp, #4]
 80101ec:	f804 2b01 	strb.w	r2, [r4], #1
 80101f0:	3b01      	subs	r3, #1
 80101f2:	f43f aeff 	beq.w	800fff4 <tiny_vsnprintf_like+0x78>
 80101f6:	9401      	str	r4, [sp, #4]
 80101f8:	9a01      	ldr	r2, [sp, #4]
 80101fa:	4614      	mov	r4, r2
 80101fc:	f105 3cff 	add.w	ip, r5, #4294967295
 8010200:	4494      	add	ip, r2
  while (size-- > 0) ASSIGN_STR(c);
 8010202:	eb05 0802 	add.w	r8, r5, r2
 8010206:	46a6      	mov	lr, r4
 8010208:	ebac 0504 	sub.w	r5, ip, r4
 801020c:	eba8 0204 	sub.w	r2, r8, r4
 8010210:	2a00      	cmp	r2, #0
 8010212:	dd2f      	ble.n	8010274 <tiny_vsnprintf_like+0x2f8>
 8010214:	f804 9b01 	strb.w	r9, [r4], #1
 8010218:	3b01      	subs	r3, #1
 801021a:	d1f4      	bne.n	8010206 <tiny_vsnprintf_like+0x28a>
 801021c:	e6ea      	b.n	800fff4 <tiny_vsnprintf_like+0x78>
      num = -num;
 801021e:	4252      	negs	r2, r2
      size--;
 8010220:	3d01      	subs	r5, #1
      sign = '-';
 8010222:	212d      	movs	r1, #45	; 0x2d
 8010224:	9103      	str	r1, [sp, #12]
 8010226:	e001      	b.n	801022c <tiny_vsnprintf_like+0x2b0>
 8010228:	2100      	movs	r1, #0
 801022a:	9103      	str	r1, [sp, #12]
    while (num != 0)
 801022c:	f10d 0e14 	add.w	lr, sp, #20
  i = 0;
 8010230:	2000      	movs	r0, #0
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8010232:	3001      	adds	r0, #1
 8010234:	fbb2 f1f4 	udiv	r1, r2, r4
 8010238:	fb04 2211 	mls	r2, r4, r1, r2
 801023c:	f818 2002 	ldrb.w	r2, [r8, r2]
 8010240:	f80e 2b01 	strb.w	r2, [lr], #1
      num = ((unsigned long) num) / (unsigned) base;
 8010244:	460a      	mov	r2, r1
    while (num != 0)
 8010246:	2900      	cmp	r1, #0
 8010248:	d1f3      	bne.n	8010232 <tiny_vsnprintf_like+0x2b6>
 801024a:	e7c6      	b.n	80101da <tiny_vsnprintf_like+0x25e>
 801024c:	9a01      	ldr	r2, [sp, #4]
 801024e:	4614      	mov	r4, r2
 8010250:	f102 3cff 	add.w	ip, r2, #4294967295
 8010254:	44ac      	add	ip, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8010256:	eb05 0e02 	add.w	lr, r5, r2
 801025a:	ebac 0504 	sub.w	r5, ip, r4
 801025e:	ebae 0204 	sub.w	r2, lr, r4
 8010262:	2a00      	cmp	r2, #0
 8010264:	dd04      	ble.n	8010270 <tiny_vsnprintf_like+0x2f4>
 8010266:	f804 7b01 	strb.w	r7, [r4], #1
 801026a:	3b01      	subs	r3, #1
 801026c:	d1f5      	bne.n	801025a <tiny_vsnprintf_like+0x2de>
 801026e:	e6c1      	b.n	800fff4 <tiny_vsnprintf_like+0x78>
 8010270:	9401      	str	r4, [sp, #4]
 8010272:	e7b8      	b.n	80101e6 <tiny_vsnprintf_like+0x26a>
 8010274:	4421      	add	r1, r4
  while (i < precision--) ASSIGN_STR('0');
 8010276:	46a4      	mov	ip, r4
 8010278:	1b0a      	subs	r2, r1, r4
 801027a:	4282      	cmp	r2, r0
 801027c:	dd06      	ble.n	801028c <tiny_vsnprintf_like+0x310>
 801027e:	f04f 0230 	mov.w	r2, #48	; 0x30
 8010282:	f804 2b01 	strb.w	r2, [r4], #1
 8010286:	3b01      	subs	r3, #1
 8010288:	d1f5      	bne.n	8010276 <tiny_vsnprintf_like+0x2fa>
 801028a:	e6b3      	b.n	800fff4 <tiny_vsnprintf_like+0x78>
 801028c:	1e42      	subs	r2, r0, #1
 801028e:	a905      	add	r1, sp, #20
 8010290:	440a      	add	r2, r1
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8010292:	4420      	add	r0, r4
 8010294:	46a4      	mov	ip, r4
 8010296:	1b01      	subs	r1, r0, r4
 8010298:	2900      	cmp	r1, #0
 801029a:	dd06      	ble.n	80102aa <tiny_vsnprintf_like+0x32e>
 801029c:	f812 1901 	ldrb.w	r1, [r2], #-1
 80102a0:	f804 1b01 	strb.w	r1, [r4], #1
 80102a4:	3b01      	subs	r3, #1
 80102a6:	d1f5      	bne.n	8010294 <tiny_vsnprintf_like+0x318>
 80102a8:	e6a4      	b.n	800fff4 <tiny_vsnprintf_like+0x78>
  while (size-- > 0) ASSIGN_STR(' ');
 80102aa:	4425      	add	r5, r4
 80102ac:	4423      	add	r3, r4
 80102ae:	1b2a      	subs	r2, r5, r4
 80102b0:	2a00      	cmp	r2, #0
 80102b2:	f77f ae9f 	ble.w	800fff4 <tiny_vsnprintf_like+0x78>
 80102b6:	f804 7b01 	strb.w	r7, [r4], #1
 80102ba:	429c      	cmp	r4, r3
 80102bc:	d1f7      	bne.n	80102ae <tiny_vsnprintf_like+0x332>
 80102be:	e699      	b.n	800fff4 <tiny_vsnprintf_like+0x78>
        s = va_arg(args, char *);
 80102c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80102c4:	e696      	b.n	800fff4 <tiny_vsnprintf_like+0x78>
    return 0;
 80102c6:	2000      	movs	r0, #0
}
 80102c8:	4770      	bx	lr
          while (len < field_width--) *str++ = ' ';
 80102ca:	f105 3cff 	add.w	ip, r5, #4294967295
 80102ce:	2d06      	cmp	r5, #6
 80102d0:	dd03      	ble.n	80102da <tiny_vsnprintf_like+0x35e>
        len = strlen(s);
 80102d2:	2206      	movs	r2, #6
        if (!s) s = "<NULL>";
 80102d4:	f8df 8014 	ldr.w	r8, [pc, #20]	; 80102ec <tiny_vsnprintf_like+0x370>
 80102d8:	e6ef      	b.n	80100ba <tiny_vsnprintf_like+0x13e>
        len = strlen(s);
 80102da:	2206      	movs	r2, #6
        if (!s) s = "<NULL>";
 80102dc:	f8df 800c 	ldr.w	r8, [pc, #12]	; 80102ec <tiny_vsnprintf_like+0x370>
 80102e0:	e6fe      	b.n	80100e0 <tiny_vsnprintf_like+0x164>
 80102e2:	bf00      	nop
 80102e4:	080116c0 	.word	0x080116c0
 80102e8:	080116e8 	.word	0x080116e8
 80102ec:	080116b8 	.word	0x080116b8

080102f0 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102f0:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80102f4:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 80102f6:	4a06      	ldr	r2, [pc, #24]	; (8010310 <UTIL_SEQ_SetTask+0x20>)
 80102f8:	6813      	ldr	r3, [r2, #0]
 80102fa:	4303      	orrs	r3, r0
 80102fc:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80102fe:	4a05      	ldr	r2, [pc, #20]	; (8010314 <UTIL_SEQ_SetTask+0x24>)
 8010300:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8010304:	4318      	orrs	r0, r3
 8010306:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801030a:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 801030e:	4770      	bx	lr
 8010310:	20002210 	.word	0x20002210
 8010314:	20002208 	.word	0x20002208

08010318 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8010318:	4770      	bx	lr

0801031a <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 801031a:	4770      	bx	lr

0801031c <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801031c:	0c03      	lsrs	r3, r0, #16
 801031e:	041b      	lsls	r3, r3, #16
 8010320:	b9ab      	cbnz	r3, 801034e <SEQ_BitPosition+0x32>
 8010322:	0400      	lsls	r0, r0, #16
 8010324:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8010326:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801032a:	d102      	bne.n	8010332 <SEQ_BitPosition+0x16>
 801032c:	3308      	adds	r3, #8
 801032e:	b2db      	uxtb	r3, r3
 8010330:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8010332:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010336:	d102      	bne.n	801033e <SEQ_BitPosition+0x22>
 8010338:	3304      	adds	r3, #4
 801033a:	b2db      	uxtb	r3, r3
 801033c:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];

  return (uint8_t)(31U-n);
 801033e:	f1c3 031f 	rsb	r3, r3, #31
  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8010342:	0f00      	lsrs	r0, r0, #28
  return (uint8_t)(31U-n);
 8010344:	4a03      	ldr	r2, [pc, #12]	; (8010354 <SEQ_BitPosition+0x38>)
 8010346:	5c10      	ldrb	r0, [r2, r0]
 8010348:	1a18      	subs	r0, r3, r0
}
 801034a:	b2c0      	uxtb	r0, r0
 801034c:	4770      	bx	lr
uint8_t n = 0U;
 801034e:	2300      	movs	r3, #0
 8010350:	e7e9      	b.n	8010326 <SEQ_BitPosition+0xa>
 8010352:	bf00      	nop
 8010354:	08011710 	.word	0x08011710

08010358 <UTIL_SEQ_Run>:
{
 8010358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  super_mask_backup = SuperMask;
 801035c:	4b42      	ldr	r3, [pc, #264]	; (8010468 <UTIL_SEQ_Run+0x110>)
 801035e:	f8d3 9000 	ldr.w	r9, [r3]
  SuperMask &= Mask_bm;
 8010362:	ea09 0000 	and.w	r0, r9, r0
 8010366:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 8010368:	4b40      	ldr	r3, [pc, #256]	; (801046c <UTIL_SEQ_Run+0x114>)
 801036a:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 801036c:	4a40      	ldr	r2, [pc, #256]	; (8010470 <UTIL_SEQ_Run+0x118>)
 801036e:	6814      	ldr	r4, [r2, #0]
  local_taskmask = TaskMask;
 8010370:	4a40      	ldr	r2, [pc, #256]	; (8010474 <UTIL_SEQ_Run+0x11c>)
 8010372:	6812      	ldr	r2, [r2, #0]
  local_evtwaited =  EvtWaited;
 8010374:	4940      	ldr	r1, [pc, #256]	; (8010478 <UTIL_SEQ_Run+0x120>)
 8010376:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8010378:	4013      	ands	r3, r2
 801037a:	4203      	tst	r3, r0
 801037c:	d04f      	beq.n	801041e <UTIL_SEQ_Run+0xc6>
 801037e:	ea14 0801 	ands.w	r8, r4, r1
 8010382:	d14c      	bne.n	801041e <UTIL_SEQ_Run+0xc6>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8010384:	4d3d      	ldr	r5, [pc, #244]	; (801047c <UTIL_SEQ_Run+0x124>)
      counter++;
 8010386:	2701      	movs	r7, #1
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8010388:	4e3d      	ldr	r6, [pc, #244]	; (8010480 <UTIL_SEQ_Run+0x128>)
 801038a:	e035      	b.n	80103f8 <UTIL_SEQ_Run+0xa0>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801038c:	68ab      	ldr	r3, [r5, #8]
      counter++;
 801038e:	463b      	mov	r3, r7
 8010390:	e037      	b.n	8010402 <UTIL_SEQ_Run+0xaa>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8010392:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 8010396:	6863      	ldr	r3, [r4, #4]
 8010398:	4018      	ands	r0, r3
 801039a:	f7ff ffbf 	bl	801031c <SEQ_BitPosition>
 801039e:	6030      	str	r0, [r6, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80103a0:	6863      	ldr	r3, [r4, #4]
 80103a2:	fa07 f000 	lsl.w	r0, r7, r0
 80103a6:	ea23 0000 	bic.w	r0, r3, r0
 80103aa:	6060      	str	r0, [r4, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103ac:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80103b0:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 80103b2:	6833      	ldr	r3, [r6, #0]
 80103b4:	fa07 f303 	lsl.w	r3, r7, r3
 80103b8:	4c2c      	ldr	r4, [pc, #176]	; (801046c <UTIL_SEQ_Run+0x114>)
 80103ba:	6822      	ldr	r2, [r4, #0]
 80103bc:	ea22 0203 	bic.w	r2, r2, r3
 80103c0:	6022      	str	r2, [r4, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80103c2:	682a      	ldr	r2, [r5, #0]
 80103c4:	ea22 0303 	bic.w	r3, r2, r3
 80103c8:	602b      	str	r3, [r5, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80103ca:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 80103ce:	6832      	ldr	r2, [r6, #0]
 80103d0:	4b2c      	ldr	r3, [pc, #176]	; (8010484 <UTIL_SEQ_Run+0x12c>)
 80103d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103d6:	4798      	blx	r3
    local_taskset = TaskSet;
 80103d8:	6823      	ldr	r3, [r4, #0]
    local_evtset = EvtSet;
 80103da:	4a25      	ldr	r2, [pc, #148]	; (8010470 <UTIL_SEQ_Run+0x118>)
 80103dc:	f8d2 c000 	ldr.w	ip, [r2]
    local_taskmask = TaskMask;
 80103e0:	4a24      	ldr	r2, [pc, #144]	; (8010474 <UTIL_SEQ_Run+0x11c>)
 80103e2:	6812      	ldr	r2, [r2, #0]
    local_evtwaited = EvtWaited;
 80103e4:	4924      	ldr	r1, [pc, #144]	; (8010478 <UTIL_SEQ_Run+0x120>)
 80103e6:	680c      	ldr	r4, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80103e8:	491f      	ldr	r1, [pc, #124]	; (8010468 <UTIL_SEQ_Run+0x110>)
 80103ea:	6808      	ldr	r0, [r1, #0]
 80103ec:	4013      	ands	r3, r2
 80103ee:	4203      	tst	r3, r0
 80103f0:	d015      	beq.n	801041e <UTIL_SEQ_Run+0xc6>
 80103f2:	ea1c 0f04 	tst.w	ip, r4
 80103f6:	d112      	bne.n	801041e <UTIL_SEQ_Run+0xc6>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80103f8:	682b      	ldr	r3, [r5, #0]
 80103fa:	4010      	ands	r0, r2
 80103fc:	4218      	tst	r0, r3
 80103fe:	d0c5      	beq.n	801038c <UTIL_SEQ_Run+0x34>
    counter = 0U;
 8010400:	4643      	mov	r3, r8
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8010402:	f855 2033 	ldr.w	r2, [r5, r3, lsl #3]
 8010406:	4010      	ands	r0, r2
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8010408:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801040c:	6852      	ldr	r2, [r2, #4]
 801040e:	4202      	tst	r2, r0
 8010410:	d1bf      	bne.n	8010392 <UTIL_SEQ_Run+0x3a>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8010412:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8010416:	f04f 31ff 	mov.w	r1, #4294967295
 801041a:	6051      	str	r1, [r2, #4]
 801041c:	e7b9      	b.n	8010392 <UTIL_SEQ_Run+0x3a>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801041e:	4b18      	ldr	r3, [pc, #96]	; (8010480 <UTIL_SEQ_Run+0x128>)
 8010420:	f04f 32ff 	mov.w	r2, #4294967295
 8010424:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8010426:	f7ff ff77 	bl	8010318 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801042a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801042e:	b672      	cpsid	i
  local_taskset = TaskSet;
 8010430:	4b0e      	ldr	r3, [pc, #56]	; (801046c <UTIL_SEQ_Run+0x114>)
 8010432:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8010434:	4a0e      	ldr	r2, [pc, #56]	; (8010470 <UTIL_SEQ_Run+0x118>)
 8010436:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8010438:	4a0e      	ldr	r2, [pc, #56]	; (8010474 <UTIL_SEQ_Run+0x11c>)
 801043a:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801043c:	4013      	ands	r3, r2
 801043e:	4a0a      	ldr	r2, [pc, #40]	; (8010468 <UTIL_SEQ_Run+0x110>)
 8010440:	6812      	ldr	r2, [r2, #0]
 8010442:	4213      	tst	r3, r2
 8010444:	d103      	bne.n	801044e <UTIL_SEQ_Run+0xf6>
    if ((local_evtset & EvtWaited)== 0U)
 8010446:	4b0c      	ldr	r3, [pc, #48]	; (8010478 <UTIL_SEQ_Run+0x120>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	420b      	tst	r3, r1
 801044c:	d008      	beq.n	8010460 <UTIL_SEQ_Run+0x108>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801044e:	f384 8810 	msr	PRIMASK, r4
  UTIL_SEQ_PostIdle( );
 8010452:	f7ff ff62 	bl	801031a <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8010456:	4b04      	ldr	r3, [pc, #16]	; (8010468 <UTIL_SEQ_Run+0x110>)
 8010458:	f8c3 9000 	str.w	r9, [r3]
}
 801045c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      UTIL_SEQ_Idle( );
 8010460:	f7f1 f83e 	bl	80014e0 <UTIL_SEQ_Idle>
 8010464:	e7f3      	b.n	801044e <UTIL_SEQ_Run+0xf6>
 8010466:	bf00      	nop
 8010468:	20000120 	.word	0x20000120
 801046c:	20002210 	.word	0x20002210
 8010470:	200021f0 	.word	0x200021f0
 8010474:	20000124 	.word	0x20000124
 8010478:	200021f4 	.word	0x200021f4
 801047c:	20002208 	.word	0x20002208
 8010480:	200021ec 	.word	0x200021ec
 8010484:	200021f8 	.word	0x200021f8

08010488 <UTIL_SEQ_RegTask>:
{
 8010488:	b538      	push	{r3, r4, r5, lr}
 801048a:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801048c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010490:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8010492:	f7ff ff43 	bl	801031c <SEQ_BitPosition>
 8010496:	4b03      	ldr	r3, [pc, #12]	; (80104a4 <UTIL_SEQ_RegTask+0x1c>)
 8010498:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801049c:	f385 8810 	msr	PRIMASK, r5
}
 80104a0:	bd38      	pop	{r3, r4, r5, pc}
 80104a2:	bf00      	nop
 80104a4:	200021f8 	.word	0x200021f8

080104a8 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 80104a8:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 80104aa:	4b03      	ldr	r3, [pc, #12]	; (80104b8 <UTIL_TIMER_Init+0x10>)
 80104ac:	2200      	movs	r2, #0
 80104ae:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 80104b0:	4b02      	ldr	r3, [pc, #8]	; (80104bc <UTIL_TIMER_Init+0x14>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	4798      	blx	r3
}
 80104b6:	bd08      	pop	{r3, pc}
 80104b8:	20002214 	.word	0x20002214
 80104bc:	08010e2c 	.word	0x08010e2c

080104c0 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 80104c0:	b1a8      	cbz	r0, 80104ee <UTIL_TIMER_Create+0x2e>
{
 80104c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104c4:	4617      	mov	r7, r2
 80104c6:	461e      	mov	r6, r3
 80104c8:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 80104ca:	b193      	cbz	r3, 80104f2 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 80104cc:	2500      	movs	r5, #0
 80104ce:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80104d0:	4b09      	ldr	r3, [pc, #36]	; (80104f8 <UTIL_TIMER_Create+0x38>)
 80104d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104d4:	4608      	mov	r0, r1
 80104d6:	4798      	blx	r3
 80104d8:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 80104da:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 80104dc:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80104de:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 80104e0:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 80104e2:	9b06      	ldr	r3, [sp, #24]
 80104e4:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 80104e6:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 80104e8:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 80104ea:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 80104ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 80104ee:	2001      	movs	r0, #1
}
 80104f0:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 80104f2:	2001      	movs	r0, #1
 80104f4:	e7fa      	b.n	80104ec <UTIL_TIMER_Create+0x2c>
 80104f6:	bf00      	nop
 80104f8:	08010e2c 	.word	0x08010e2c

080104fc <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 80104fc:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 80104fe:	4c03      	ldr	r4, [pc, #12]	; (801050c <UTIL_TIMER_GetCurrentTime+0x10>)
 8010500:	69e3      	ldr	r3, [r4, #28]
 8010502:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8010504:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010506:	4798      	blx	r3
}
 8010508:	bd10      	pop	{r4, pc}
 801050a:	bf00      	nop
 801050c:	08010e2c 	.word	0x08010e2c

08010510 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8010510:	b570      	push	{r4, r5, r6, lr}
 8010512:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8010514:	4d05      	ldr	r5, [pc, #20]	; (801052c <UTIL_TIMER_GetElapsedTime+0x1c>)
 8010516:	69eb      	ldr	r3, [r5, #28]
 8010518:	4798      	blx	r3
 801051a:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801051c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801051e:	4630      	mov	r0, r6
 8010520:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8010522:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8010524:	1a20      	subs	r0, r4, r0
 8010526:	4798      	blx	r3
}
 8010528:	bd70      	pop	{r4, r5, r6, pc}
 801052a:	bf00      	nop
 801052c:	08010e2c 	.word	0x08010e2c

08010530 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010530:	4b08      	ldr	r3, [pc, #32]	; (8010554 <TimerExists+0x24>)
 8010532:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8010534:	b14b      	cbz	r3, 801054a <TimerExists+0x1a>
  {
    if( cur == TimerObject )
 8010536:	4283      	cmp	r3, r0
 8010538:	d009      	beq.n	801054e <TimerExists+0x1e>
    {
      return true;
    }
    cur = cur->Next;
 801053a:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 801053c:	b11b      	cbz	r3, 8010546 <TimerExists+0x16>
    if( cur == TimerObject )
 801053e:	4298      	cmp	r0, r3
 8010540:	d1fb      	bne.n	801053a <TimerExists+0xa>
      return true;
 8010542:	2001      	movs	r0, #1
  }
  return false;
}
 8010544:	4770      	bx	lr
  return false;
 8010546:	2000      	movs	r0, #0
 8010548:	4770      	bx	lr
 801054a:	2000      	movs	r0, #0
 801054c:	4770      	bx	lr
      return true;
 801054e:	2001      	movs	r0, #1
 8010550:	4770      	bx	lr
 8010552:	bf00      	nop
 8010554:	20002214 	.word	0x20002214

08010558 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8010558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801055a:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801055c:	4e09      	ldr	r6, [pc, #36]	; (8010584 <TimerSetTimeout+0x2c>)
 801055e:	6a33      	ldr	r3, [r6, #32]
 8010560:	4798      	blx	r3
 8010562:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8010564:	2301      	movs	r3, #1
 8010566:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8010568:	6827      	ldr	r7, [r4, #0]
 801056a:	69b6      	ldr	r6, [r6, #24]
 801056c:	47b0      	blx	r6
 801056e:	4428      	add	r0, r5
 8010570:	4287      	cmp	r7, r0
 8010572:	d202      	bcs.n	801057a <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8010574:	47b0      	blx	r6
 8010576:	4405      	add	r5, r0
 8010578:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801057a:	4b02      	ldr	r3, [pc, #8]	; (8010584 <TimerSetTimeout+0x2c>)
 801057c:	689b      	ldr	r3, [r3, #8]
 801057e:	6820      	ldr	r0, [r4, #0]
 8010580:	4798      	blx	r3
}
 8010582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010584:	08010e2c 	.word	0x08010e2c

08010588 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8010588:	b358      	cbz	r0, 80105e2 <UTIL_TIMER_Stop+0x5a>
{
 801058a:	b510      	push	{r4, lr}
 801058c:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801058e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010592:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8010594:	4b14      	ldr	r3, [pc, #80]	; (80105e8 <UTIL_TIMER_Stop+0x60>)
 8010596:	681b      	ldr	r3, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8010598:	2101      	movs	r1, #1
 801059a:	7281      	strb	r1, [r0, #10]
    if(NULL != TimerListHead)
 801059c:	b15b      	cbz	r3, 80105b6 <UTIL_TIMER_Stop+0x2e>
      TimerObject->IsRunning = 0U;
 801059e:	2100      	movs	r1, #0
 80105a0:	7241      	strb	r1, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 80105a2:	4298      	cmp	r0, r3
 80105a4:	d00b      	beq.n	80105be <UTIL_TIMER_Stop+0x36>
            cur = cur->Next;
 80105a6:	4619      	mov	r1, r3
 80105a8:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
 80105aa:	b123      	cbz	r3, 80105b6 <UTIL_TIMER_Stop+0x2e>
          if( cur == TimerObject )
 80105ac:	429a      	cmp	r2, r3
 80105ae:	d1fa      	bne.n	80105a6 <UTIL_TIMER_Stop+0x1e>
            if( cur->Next != NULL )
 80105b0:	695b      	ldr	r3, [r3, #20]
 80105b2:	b19b      	cbz	r3, 80105dc <UTIL_TIMER_Stop+0x54>
              prev->Next = cur;
 80105b4:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105b6:	f384 8810 	msr	PRIMASK, r4
}
 80105ba:	2000      	movs	r0, #0
}
 80105bc:	bd10      	pop	{r4, pc}
          TimerListHead->IsPending = 0;
 80105be:	7219      	strb	r1, [r3, #8]
          if( TimerListHead->Next != NULL )
 80105c0:	6958      	ldr	r0, [r3, #20]
 80105c2:	b120      	cbz	r0, 80105ce <UTIL_TIMER_Stop+0x46>
            TimerListHead = TimerListHead->Next;
 80105c4:	4b08      	ldr	r3, [pc, #32]	; (80105e8 <UTIL_TIMER_Stop+0x60>)
 80105c6:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 80105c8:	f7ff ffc6 	bl	8010558 <TimerSetTimeout>
 80105cc:	e7f3      	b.n	80105b6 <UTIL_TIMER_Stop+0x2e>
            UTIL_TimerDriver.StopTimerEvt( );
 80105ce:	4b07      	ldr	r3, [pc, #28]	; (80105ec <UTIL_TIMER_Stop+0x64>)
 80105d0:	68db      	ldr	r3, [r3, #12]
 80105d2:	4798      	blx	r3
            TimerListHead = NULL;
 80105d4:	4b04      	ldr	r3, [pc, #16]	; (80105e8 <UTIL_TIMER_Stop+0x60>)
 80105d6:	2200      	movs	r2, #0
 80105d8:	601a      	str	r2, [r3, #0]
 80105da:	e7ec      	b.n	80105b6 <UTIL_TIMER_Stop+0x2e>
              prev->Next = cur;
 80105dc:	2300      	movs	r3, #0
 80105de:	614b      	str	r3, [r1, #20]
 80105e0:	e7e9      	b.n	80105b6 <UTIL_TIMER_Stop+0x2e>
    ret = UTIL_TIMER_INVALID_PARAM;
 80105e2:	2001      	movs	r0, #1
}
 80105e4:	4770      	bx	lr
 80105e6:	bf00      	nop
 80105e8:	20002214 	.word	0x20002214
 80105ec:	08010e2c 	.word	0x08010e2c

080105f0 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80105f0:	4b0d      	ldr	r3, [pc, #52]	; (8010628 <TimerInsertTimer+0x38>)
 80105f2:	6819      	ldr	r1, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 80105f4:	694b      	ldr	r3, [r1, #20]

  while (cur->Next != NULL )
 80105f6:	b193      	cbz	r3, 801061e <TimerInsertTimer+0x2e>
{
 80105f8:	b410      	push	{r4}
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 80105fa:	6804      	ldr	r4, [r0, #0]
 80105fc:	e000      	b.n	8010600 <TimerInsertTimer+0x10>
    {
        cur = next;
        next = next->Next;
 80105fe:	4613      	mov	r3, r2
    if( TimerObject->Timestamp  > next->Timestamp )
 8010600:	681a      	ldr	r2, [r3, #0]
 8010602:	4294      	cmp	r4, r2
 8010604:	d907      	bls.n	8010616 <TimerInsertTimer+0x26>
        next = next->Next;
 8010606:	695a      	ldr	r2, [r3, #20]
  while (cur->Next != NULL )
 8010608:	4619      	mov	r1, r3
 801060a:	2a00      	cmp	r2, #0
 801060c:	d1f7      	bne.n	80105fe <TimerInsertTimer+0xe>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 801060e:	6158      	str	r0, [r3, #20]
  TimerObject->Next = NULL;
 8010610:	2300      	movs	r3, #0
 8010612:	6143      	str	r3, [r0, #20]
 8010614:	e001      	b.n	801061a <TimerInsertTimer+0x2a>
        cur->Next = TimerObject;
 8010616:	6148      	str	r0, [r1, #20]
        TimerObject->Next = next;
 8010618:	6143      	str	r3, [r0, #20]
}
 801061a:	bc10      	pop	{r4}
 801061c:	4770      	bx	lr
  cur->Next = TimerObject;
 801061e:	6148      	str	r0, [r1, #20]
  TimerObject->Next = NULL;
 8010620:	2300      	movs	r3, #0
 8010622:	6143      	str	r3, [r0, #20]
 8010624:	4770      	bx	lr
 8010626:	bf00      	nop
 8010628:	20002214 	.word	0x20002214

0801062c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801062c:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801062e:	4b05      	ldr	r3, [pc, #20]	; (8010644 <TimerInsertNewHeadTimer+0x18>)
 8010630:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8010632:	b10b      	cbz	r3, 8010638 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8010634:	2200      	movs	r2, #0
 8010636:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8010638:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 801063a:	4b02      	ldr	r3, [pc, #8]	; (8010644 <TimerInsertNewHeadTimer+0x18>)
 801063c:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801063e:	f7ff ff8b 	bl	8010558 <TimerSetTimeout>
}
 8010642:	bd08      	pop	{r3, pc}
 8010644:	20002214 	.word	0x20002214

08010648 <UTIL_TIMER_Start>:
{
 8010648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801064a:	2800      	cmp	r0, #0
 801064c:	d036      	beq.n	80106bc <UTIL_TIMER_Start+0x74>
 801064e:	4604      	mov	r4, r0
 8010650:	f7ff ff6e 	bl	8010530 <TimerExists>
 8010654:	2800      	cmp	r0, #0
 8010656:	d134      	bne.n	80106c2 <UTIL_TIMER_Start+0x7a>
 8010658:	7a65      	ldrb	r5, [r4, #9]
 801065a:	2d00      	cmp	r5, #0
 801065c:	d133      	bne.n	80106c6 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801065e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010662:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8010664:	6866      	ldr	r6, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8010666:	4b19      	ldr	r3, [pc, #100]	; (80106cc <UTIL_TIMER_Start+0x84>)
 8010668:	6a1b      	ldr	r3, [r3, #32]
 801066a:	4798      	blx	r3
    TimerObject->Timestamp = ticks;
 801066c:	4286      	cmp	r6, r0
 801066e:	bf38      	it	cc
 8010670:	4606      	movcc	r6, r0
 8010672:	6026      	str	r6, [r4, #0]
    TimerObject->IsPending = 0U;
 8010674:	2300      	movs	r3, #0
 8010676:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8010678:	2201      	movs	r2, #1
 801067a:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 801067c:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 801067e:	4b14      	ldr	r3, [pc, #80]	; (80106d0 <UTIL_TIMER_Start+0x88>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	b183      	cbz	r3, 80106a6 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8010684:	4b11      	ldr	r3, [pc, #68]	; (80106cc <UTIL_TIMER_Start+0x84>)
 8010686:	699b      	ldr	r3, [r3, #24]
 8010688:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 801068a:	6823      	ldr	r3, [r4, #0]
 801068c:	4418      	add	r0, r3
 801068e:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8010690:	4b0f      	ldr	r3, [pc, #60]	; (80106d0 <UTIL_TIMER_Start+0x88>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	4298      	cmp	r0, r3
 8010698:	d20c      	bcs.n	80106b4 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 801069a:	4620      	mov	r0, r4
 801069c:	f7ff ffc6 	bl	801062c <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106a0:	f387 8810 	msr	PRIMASK, r7
}
 80106a4:	e00b      	b.n	80106be <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 80106a6:	4b09      	ldr	r3, [pc, #36]	; (80106cc <UTIL_TIMER_Start+0x84>)
 80106a8:	691b      	ldr	r3, [r3, #16]
 80106aa:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80106ac:	4620      	mov	r0, r4
 80106ae:	f7ff ffbd 	bl	801062c <TimerInsertNewHeadTimer>
 80106b2:	e7f5      	b.n	80106a0 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 80106b4:	4620      	mov	r0, r4
 80106b6:	f7ff ff9b 	bl	80105f0 <TimerInsertTimer>
 80106ba:	e7f1      	b.n	80106a0 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 80106bc:	2501      	movs	r5, #1
}
 80106be:	4628      	mov	r0, r5
 80106c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 80106c2:	2501      	movs	r5, #1
 80106c4:	e7fb      	b.n	80106be <UTIL_TIMER_Start+0x76>
 80106c6:	2501      	movs	r5, #1
 80106c8:	e7f9      	b.n	80106be <UTIL_TIMER_Start+0x76>
 80106ca:	bf00      	nop
 80106cc:	08010e2c 	.word	0x08010e2c
 80106d0:	20002214 	.word	0x20002214

080106d4 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 80106d4:	b198      	cbz	r0, 80106fe <UTIL_TIMER_SetPeriod+0x2a>
{
 80106d6:	b510      	push	{r4, lr}
 80106d8:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 80106da:	4b0a      	ldr	r3, [pc, #40]	; (8010704 <UTIL_TIMER_SetPeriod+0x30>)
 80106dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106de:	4608      	mov	r0, r1
 80106e0:	4798      	blx	r3
 80106e2:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 80106e4:	4620      	mov	r0, r4
 80106e6:	f7ff ff23 	bl	8010530 <TimerExists>
 80106ea:	b908      	cbnz	r0, 80106f0 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80106ec:	2000      	movs	r0, #0
}
 80106ee:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 80106f0:	4620      	mov	r0, r4
 80106f2:	f7ff ff49 	bl	8010588 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 80106f6:	4620      	mov	r0, r4
 80106f8:	f7ff ffa6 	bl	8010648 <UTIL_TIMER_Start>
 80106fc:	e7f7      	b.n	80106ee <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 80106fe:	2001      	movs	r0, #1
}
 8010700:	4770      	bx	lr
 8010702:	bf00      	nop
 8010704:	08010e2c 	.word	0x08010e2c

08010708 <UTIL_TIMER_IRQ_Handler>:
{
 8010708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801070c:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010710:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8010712:	4d1f      	ldr	r5, [pc, #124]	; (8010790 <UTIL_TIMER_IRQ_Handler+0x88>)
 8010714:	696b      	ldr	r3, [r5, #20]
 8010716:	4798      	blx	r3
 8010718:	4604      	mov	r4, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801071a:	692b      	ldr	r3, [r5, #16]
 801071c:	4798      	blx	r3
  if ( TimerListHead != NULL )
 801071e:	4b1d      	ldr	r3, [pc, #116]	; (8010794 <UTIL_TIMER_IRQ_Handler+0x8c>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	b15b      	cbz	r3, 801073c <UTIL_TIMER_IRQ_Handler+0x34>
  DeltaContext = now  - old; /*intentional wrap around */
 8010724:	1b01      	subs	r1, r0, r4
        cur->Timestamp = 0;
 8010726:	2500      	movs	r5, #0
        cur->Timestamp -= DeltaContext;
 8010728:	1a20      	subs	r0, r4, r0
      if (cur->Timestamp > DeltaContext)
 801072a:	681a      	ldr	r2, [r3, #0]
 801072c:	428a      	cmp	r2, r1
        cur->Timestamp -= DeltaContext;
 801072e:	bf8c      	ite	hi
 8010730:	1812      	addhi	r2, r2, r0
        cur->Timestamp = 0;
 8010732:	462a      	movls	r2, r5
 8010734:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8010736:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8010738:	2b00      	cmp	r3, #0
 801073a:	d1f6      	bne.n	801072a <UTIL_TIMER_IRQ_Handler+0x22>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801073c:	4d15      	ldr	r5, [pc, #84]	; (8010794 <UTIL_TIMER_IRQ_Handler+0x8c>)
 801073e:	4f14      	ldr	r7, [pc, #80]	; (8010790 <UTIL_TIMER_IRQ_Handler+0x88>)
      cur->IsPending = 0;
 8010740:	2600      	movs	r6, #0
 8010742:	e00b      	b.n	801075c <UTIL_TIMER_IRQ_Handler+0x54>
      cur = TimerListHead;
 8010744:	682c      	ldr	r4, [r5, #0]
      TimerListHead = TimerListHead->Next;
 8010746:	6963      	ldr	r3, [r4, #20]
 8010748:	602b      	str	r3, [r5, #0]
      cur->IsPending = 0;
 801074a:	7226      	strb	r6, [r4, #8]
      cur->IsRunning = 0;
 801074c:	7266      	strb	r6, [r4, #9]
      cur->Callback(cur->argument);
 801074e:	68e3      	ldr	r3, [r4, #12]
 8010750:	6920      	ldr	r0, [r4, #16]
 8010752:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8010754:	8963      	ldrh	r3, [r4, #10]
 8010756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801075a:	d011      	beq.n	8010780 <UTIL_TIMER_IRQ_Handler+0x78>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801075c:	682b      	ldr	r3, [r5, #0]
 801075e:	b15b      	cbz	r3, 8010778 <UTIL_TIMER_IRQ_Handler+0x70>
 8010760:	681c      	ldr	r4, [r3, #0]
 8010762:	2c00      	cmp	r4, #0
 8010764:	d0ee      	beq.n	8010744 <UTIL_TIMER_IRQ_Handler+0x3c>
 8010766:	69bb      	ldr	r3, [r7, #24]
 8010768:	4798      	blx	r3
 801076a:	4284      	cmp	r4, r0
 801076c:	d3ea      	bcc.n	8010744 <UTIL_TIMER_IRQ_Handler+0x3c>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801076e:	4b09      	ldr	r3, [pc, #36]	; (8010794 <UTIL_TIMER_IRQ_Handler+0x8c>)
 8010770:	6818      	ldr	r0, [r3, #0]
 8010772:	b108      	cbz	r0, 8010778 <UTIL_TIMER_IRQ_Handler+0x70>
 8010774:	7a03      	ldrb	r3, [r0, #8]
 8010776:	b13b      	cbz	r3, 8010788 <UTIL_TIMER_IRQ_Handler+0x80>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010778:	f388 8810 	msr	PRIMASK, r8
}
 801077c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (void)UTIL_TIMER_Start(cur);
 8010780:	4620      	mov	r0, r4
 8010782:	f7ff ff61 	bl	8010648 <UTIL_TIMER_Start>
 8010786:	e7db      	b.n	8010740 <UTIL_TIMER_IRQ_Handler+0x38>
    TimerSetTimeout( TimerListHead );
 8010788:	f7ff fee6 	bl	8010558 <TimerSetTimeout>
 801078c:	e7f4      	b.n	8010778 <UTIL_TIMER_IRQ_Handler+0x70>
 801078e:	bf00      	nop
 8010790:	08010e2c 	.word	0x08010e2c
 8010794:	20002214 	.word	0x20002214

08010798 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8010798:	b500      	push	{lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801079a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801079e:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 80107a0:	4b20      	ldr	r3, [pc, #128]	; (8010824 <TRACE_AllocateBufer+0x8c>)
 80107a2:	8a5a      	ldrh	r2, [r3, #18]
 80107a4:	8a1b      	ldrh	r3, [r3, #16]
 80107a6:	429a      	cmp	r2, r3
 80107a8:	d012      	beq.n	80107d0 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80107aa:	429a      	cmp	r2, r3
 80107ac:	d921      	bls.n	80107f2 <TRACE_AllocateBufer+0x5a>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80107ae:	f5c2 6e80 	rsb	lr, r2, #1024	; 0x400
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 80107b2:	fa1f fe8e 	uxth.w	lr, lr
 80107b6:	4586      	cmp	lr, r0
 80107b8:	d81f      	bhi.n	80107fa <TRACE_AllocateBufer+0x62>
 80107ba:	4283      	cmp	r3, r0
 80107bc:	d92c      	bls.n	8010818 <TRACE_AllocateBufer+0x80>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80107be:	4b19      	ldr	r3, [pc, #100]	; (8010824 <TRACE_AllocateBufer+0x8c>)
 80107c0:	f04f 0e01 	mov.w	lr, #1
 80107c4:	f883 e002 	strb.w	lr, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80107c8:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 80107ca:	2200      	movs	r2, #0
 80107cc:	825a      	strh	r2, [r3, #18]
 80107ce:	e014      	b.n	80107fa <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80107d0:	f5c2 6e80 	rsb	lr, r2, #1024	; 0x400
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 80107d4:	fa1f fe8e 	uxth.w	lr, lr
 80107d8:	4570      	cmp	r0, lr
 80107da:	d30e      	bcc.n	80107fa <TRACE_AllocateBufer+0x62>
 80107dc:	4283      	cmp	r3, r0
 80107de:	d918      	bls.n	8010812 <TRACE_AllocateBufer+0x7a>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80107e0:	4b10      	ldr	r3, [pc, #64]	; (8010824 <TRACE_AllocateBufer+0x8c>)
 80107e2:	f04f 0e01 	mov.w	lr, #1
 80107e6:	f883 e002 	strb.w	lr, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80107ea:	801a      	strh	r2, [r3, #0]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 80107ec:	2200      	movs	r2, #0
 80107ee:	825a      	strh	r2, [r3, #18]
 80107f0:	e003      	b.n	80107fa <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 80107f2:	1a9b      	subs	r3, r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 80107f4:	b29b      	uxth	r3, r3
 80107f6:	4283      	cmp	r3, r0
 80107f8:	d911      	bls.n	801081e <TRACE_AllocateBufer+0x86>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80107fa:	4a0a      	ldr	r2, [pc, #40]	; (8010824 <TRACE_AllocateBufer+0x8c>)
 80107fc:	8a53      	ldrh	r3, [r2, #18]
 80107fe:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8010800:	4403      	add	r3, r0
 8010802:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010806:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8010808:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801080a:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 801080e:	f85d fb04 	ldr.w	pc, [sp], #4
  int16_t ret = -1;
 8010812:	f04f 30ff 	mov.w	r0, #4294967295
 8010816:	e7f8      	b.n	801080a <TRACE_AllocateBufer+0x72>
 8010818:	f04f 30ff 	mov.w	r0, #4294967295
 801081c:	e7f5      	b.n	801080a <TRACE_AllocateBufer+0x72>
 801081e:	f04f 30ff 	mov.w	r0, #4294967295
 8010822:	e7f2      	b.n	801080a <TRACE_AllocateBufer+0x72>
 8010824:	20002618 	.word	0x20002618

08010828 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010828:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801082c:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 801082e:	4a03      	ldr	r2, [pc, #12]	; (801083c <TRACE_Lock+0x14>)
 8010830:	8ad3      	ldrh	r3, [r2, #22]
 8010832:	3301      	adds	r3, #1
 8010834:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010836:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801083a:	4770      	bx	lr
 801083c:	20002618 	.word	0x20002618

08010840 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010840:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010844:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8010846:	4a03      	ldr	r2, [pc, #12]	; (8010854 <TRACE_UnLock+0x14>)
 8010848:	8ad3      	ldrh	r3, [r2, #22]
 801084a:	3b01      	subs	r3, #1
 801084c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801084e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8010852:	4770      	bx	lr
 8010854:	20002618 	.word	0x20002618

08010858 <UTIL_ADV_TRACE_Init>:
{
 8010858:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801085a:	2218      	movs	r2, #24
 801085c:	2100      	movs	r1, #0
 801085e:	4807      	ldr	r0, [pc, #28]	; (801087c <UTIL_ADV_TRACE_Init+0x24>)
 8010860:	f7ff fa99 	bl	800fd96 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8010864:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010868:	2100      	movs	r1, #0
 801086a:	4805      	ldr	r0, [pc, #20]	; (8010880 <UTIL_ADV_TRACE_Init+0x28>)
 801086c:	f7ff fa93 	bl	800fd96 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8010870:	4b04      	ldr	r3, [pc, #16]	; (8010884 <UTIL_ADV_TRACE_Init+0x2c>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	4804      	ldr	r0, [pc, #16]	; (8010888 <UTIL_ADV_TRACE_Init+0x30>)
 8010876:	4798      	blx	r3
}
 8010878:	bd08      	pop	{r3, pc}
 801087a:	bf00      	nop
 801087c:	20002618 	.word	0x20002618
 8010880:	20002218 	.word	0x20002218
 8010884:	08010e58 	.word	0x08010e58
 8010888:	080109fd 	.word	0x080109fd

0801088c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801088c:	4b01      	ldr	r3, [pc, #4]	; (8010894 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 801088e:	6058      	str	r0, [r3, #4]
}
 8010890:	4770      	bx	lr
 8010892:	bf00      	nop
 8010894:	20002618 	.word	0x20002618

08010898 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8010898:	4b01      	ldr	r3, [pc, #4]	; (80108a0 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 801089a:	7218      	strb	r0, [r3, #8]
}
 801089c:	4770      	bx	lr
 801089e:	bf00      	nop
 80108a0:	20002618 	.word	0x20002618

080108a4 <TRACE_Send>:
{
 80108a4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108a6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80108aa:	b672      	cpsid	i
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 80108ac:	4b1e      	ldr	r3, [pc, #120]	; (8010928 <TRACE_Send+0x84>)
  if(TRACE_IsLocked() == 0u)
 80108ae:	8adb      	ldrh	r3, [r3, #22]
 80108b0:	b11b      	cbz	r3, 80108ba <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80108b2:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80108b6:	2000      	movs	r0, #0
}
 80108b8:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 80108ba:	f7ff ffb5 	bl	8010828 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 80108be:	4b1a      	ldr	r3, [pc, #104]	; (8010928 <TRACE_Send+0x84>)
 80108c0:	8a1a      	ldrh	r2, [r3, #16]
 80108c2:	8a5b      	ldrh	r3, [r3, #18]
 80108c4:	429a      	cmp	r2, r3
 80108c6:	d029      	beq.n	801091c <TRACE_Send+0x78>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80108c8:	4917      	ldr	r1, [pc, #92]	; (8010928 <TRACE_Send+0x84>)
 80108ca:	7889      	ldrb	r1, [r1, #2]
 80108cc:	2901      	cmp	r1, #1
 80108ce:	d017      	beq.n	8010900 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80108d0:	b941      	cbnz	r1, 80108e4 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80108d2:	4a15      	ldr	r2, [pc, #84]	; (8010928 <TRACE_Send+0x84>)
 80108d4:	8a12      	ldrh	r2, [r2, #16]
 80108d6:	4293      	cmp	r3, r2
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80108d8:	bf8c      	ite	hi
 80108da:	1a9b      	subhi	r3, r3, r2
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80108dc:	f5c2 6380 	rsbls	r3, r2, #1024	; 0x400
 80108e0:	4a11      	ldr	r2, [pc, #68]	; (8010928 <TRACE_Send+0x84>)
 80108e2:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80108e4:	4e10      	ldr	r6, [pc, #64]	; (8010928 <TRACE_Send+0x84>)
 80108e6:	8a33      	ldrh	r3, [r6, #16]
 80108e8:	4d10      	ldr	r5, [pc, #64]	; (801092c <TRACE_Send+0x88>)
 80108ea:	441d      	add	r5, r3
 80108ec:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 80108f0:	f7f0 fe6c 	bl	80015cc <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80108f4:	4b0e      	ldr	r3, [pc, #56]	; (8010930 <TRACE_Send+0x8c>)
 80108f6:	68db      	ldr	r3, [r3, #12]
 80108f8:	8ab1      	ldrh	r1, [r6, #20]
 80108fa:	4628      	mov	r0, r5
 80108fc:	4798      	blx	r3
 80108fe:	e7db      	b.n	80108b8 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8010900:	4809      	ldr	r0, [pc, #36]	; (8010928 <TRACE_Send+0x84>)
 8010902:	8801      	ldrh	r1, [r0, #0]
 8010904:	1a8a      	subs	r2, r1, r2
 8010906:	b292      	uxth	r2, r2
 8010908:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801090a:	2102      	movs	r1, #2
 801090c:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801090e:	2100      	movs	r1, #0
 8010910:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8010912:	2a00      	cmp	r2, #0
 8010914:	d1e6      	bne.n	80108e4 <TRACE_Send+0x40>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8010916:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8010918:	8201      	strh	r1, [r0, #16]
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801091a:	e7da      	b.n	80108d2 <TRACE_Send+0x2e>
      TRACE_UnLock();
 801091c:	f7ff ff90 	bl	8010840 <TRACE_UnLock>
 8010920:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8010924:	2000      	movs	r0, #0
}
 8010926:	e7c7      	b.n	80108b8 <TRACE_Send+0x14>
 8010928:	20002618 	.word	0x20002618
 801092c:	20002218 	.word	0x20002218
 8010930:	08010e58 	.word	0x08010e58

08010934 <UTIL_ADV_TRACE_COND_FSend>:
{
 8010934:	b408      	push	{r3}
 8010936:	b530      	push	{r4, r5, lr}
 8010938:	b086      	sub	sp, #24
 801093a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 801093c:	2300      	movs	r3, #0
 801093e:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8010942:	4b2b      	ldr	r3, [pc, #172]	; (80109f0 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8010944:	7a1b      	ldrb	r3, [r3, #8]
 8010946:	4283      	cmp	r3, r0
 8010948:	d34b      	bcc.n	80109e2 <UTIL_ADV_TRACE_COND_FSend+0xae>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801094a:	4b29      	ldr	r3, [pc, #164]	; (80109f0 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 801094c:	68db      	ldr	r3, [r3, #12]
 801094e:	ea31 0303 	bics.w	r3, r1, r3
 8010952:	d149      	bne.n	80109e8 <UTIL_ADV_TRACE_COND_FSend+0xb4>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8010954:	4b26      	ldr	r3, [pc, #152]	; (80109f0 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8010956:	685b      	ldr	r3, [r3, #4]
 8010958:	b123      	cbz	r3, 8010964 <UTIL_ADV_TRACE_COND_FSend+0x30>
 801095a:	b11a      	cbz	r2, 8010964 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801095c:	f10d 0102 	add.w	r1, sp, #2
 8010960:	a801      	add	r0, sp, #4
 8010962:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8010964:	ab0a      	add	r3, sp, #40	; 0x28
 8010966:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8010968:	4622      	mov	r2, r4
 801096a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801096e:	4821      	ldr	r0, [pc, #132]	; (80109f4 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8010970:	f7ff fb04 	bl	800ff7c <tiny_vsnprintf_like>
 8010974:	4605      	mov	r5, r0
  TRACE_Lock();
 8010976:	f7ff ff57 	bl	8010828 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801097a:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 801097e:	4428      	add	r0, r5
 8010980:	4669      	mov	r1, sp
 8010982:	b280      	uxth	r0, r0
 8010984:	f7ff ff08 	bl	8010798 <TRACE_AllocateBufer>
 8010988:	f1b0 3fff 	cmp.w	r0, #4294967295
 801098c:	d024      	beq.n	80109d8 <UTIL_ADV_TRACE_COND_FSend+0xa4>
    for (idx = 0u; idx < timestamp_size; idx++)
 801098e:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8010992:	b170      	cbz	r0, 80109b2 <UTIL_ADV_TRACE_COND_FSend+0x7e>
 8010994:	f8bd 3000 	ldrh.w	r3, [sp]
 8010998:	aa01      	add	r2, sp, #4
 801099a:	4418      	add	r0, r3
 801099c:	b280      	uxth	r0, r0
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801099e:	4d16      	ldr	r5, [pc, #88]	; (80109f8 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 80109a0:	f812 1b01 	ldrb.w	r1, [r2], #1
 80109a4:	54e9      	strb	r1, [r5, r3]
      writepos = writepos + 1u;
 80109a6:	3301      	adds	r3, #1
 80109a8:	b29b      	uxth	r3, r3
    for (idx = 0u; idx < timestamp_size; idx++)
 80109aa:	4283      	cmp	r3, r0
 80109ac:	d1f8      	bne.n	80109a0 <UTIL_ADV_TRACE_COND_FSend+0x6c>
 80109ae:	f8ad 0000 	strh.w	r0, [sp]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80109b2:	f8bd 0000 	ldrh.w	r0, [sp]
 80109b6:	9b05      	ldr	r3, [sp, #20]
 80109b8:	4622      	mov	r2, r4
 80109ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80109be:	4c0e      	ldr	r4, [pc, #56]	; (80109f8 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 80109c0:	4420      	add	r0, r4
 80109c2:	f7ff fadb 	bl	800ff7c <tiny_vsnprintf_like>
    TRACE_UnLock();
 80109c6:	f7ff ff3b 	bl	8010840 <TRACE_UnLock>
    return TRACE_Send();
 80109ca:	f7ff ff6b 	bl	80108a4 <TRACE_Send>
}
 80109ce:	b006      	add	sp, #24
 80109d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80109d4:	b001      	add	sp, #4
 80109d6:	4770      	bx	lr
  TRACE_UnLock();
 80109d8:	f7ff ff32 	bl	8010840 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 80109dc:	f06f 0002 	mvn.w	r0, #2
 80109e0:	e7f5      	b.n	80109ce <UTIL_ADV_TRACE_COND_FSend+0x9a>
    return UTIL_ADV_TRACE_GIVEUP;
 80109e2:	f06f 0004 	mvn.w	r0, #4
 80109e6:	e7f2      	b.n	80109ce <UTIL_ADV_TRACE_COND_FSend+0x9a>
    return UTIL_ADV_TRACE_REGIONMASKED;
 80109e8:	f06f 0005 	mvn.w	r0, #5
 80109ec:	e7ef      	b.n	80109ce <UTIL_ADV_TRACE_COND_FSend+0x9a>
 80109ee:	bf00      	nop
 80109f0:	20002618 	.word	0x20002618
 80109f4:	20002630 	.word	0x20002630
 80109f8:	20002218 	.word	0x20002218

080109fc <TRACE_TxCpltCallback>:
{
 80109fc:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80109fe:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010a02:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8010a04:	4b23      	ldr	r3, [pc, #140]	; (8010a94 <TRACE_TxCpltCallback+0x98>)
 8010a06:	789b      	ldrb	r3, [r3, #2]
 8010a08:	2b02      	cmp	r3, #2
 8010a0a:	d016      	beq.n	8010a3a <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8010a0c:	4a21      	ldr	r2, [pc, #132]	; (8010a94 <TRACE_TxCpltCallback+0x98>)
 8010a0e:	8a13      	ldrh	r3, [r2, #16]
 8010a10:	8a90      	ldrh	r0, [r2, #20]
 8010a12:	4403      	add	r3, r0
 8010a14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010a18:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8010a1a:	4b1e      	ldr	r3, [pc, #120]	; (8010a94 <TRACE_TxCpltCallback+0x98>)
 8010a1c:	8a1a      	ldrh	r2, [r3, #16]
 8010a1e:	8a5b      	ldrh	r3, [r3, #18]
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d003      	beq.n	8010a2c <TRACE_TxCpltCallback+0x30>
 8010a24:	481b      	ldr	r0, [pc, #108]	; (8010a94 <TRACE_TxCpltCallback+0x98>)
 8010a26:	8ac0      	ldrh	r0, [r0, #22]
 8010a28:	2801      	cmp	r0, #1
 8010a2a:	d00b      	beq.n	8010a44 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010a2c:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8010a30:	f7f0 fdd2 	bl	80015d8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8010a34:	f7ff ff04 	bl	8010840 <TRACE_UnLock>
}
 8010a38:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8010a3a:	4b16      	ldr	r3, [pc, #88]	; (8010a94 <TRACE_TxCpltCallback+0x98>)
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8010a40:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8010a42:	e7ea      	b.n	8010a1a <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8010a44:	4813      	ldr	r0, [pc, #76]	; (8010a94 <TRACE_TxCpltCallback+0x98>)
 8010a46:	7880      	ldrb	r0, [r0, #2]
 8010a48:	2801      	cmp	r0, #1
 8010a4a:	d014      	beq.n	8010a76 <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8010a4c:	b940      	cbnz	r0, 8010a60 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8010a4e:	4a11      	ldr	r2, [pc, #68]	; (8010a94 <TRACE_TxCpltCallback+0x98>)
 8010a50:	8a12      	ldrh	r2, [r2, #16]
 8010a52:	4293      	cmp	r3, r2
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8010a54:	bf8c      	ite	hi
 8010a56:	1a9b      	subhi	r3, r3, r2
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8010a58:	f5c2 6380 	rsbls	r3, r2, #1024	; 0x400
 8010a5c:	4a0d      	ldr	r2, [pc, #52]	; (8010a94 <TRACE_TxCpltCallback+0x98>)
 8010a5e:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8010a60:	4b0c      	ldr	r3, [pc, #48]	; (8010a94 <TRACE_TxCpltCallback+0x98>)
 8010a62:	8a1a      	ldrh	r2, [r3, #16]
 8010a64:	480c      	ldr	r0, [pc, #48]	; (8010a98 <TRACE_TxCpltCallback+0x9c>)
 8010a66:	4410      	add	r0, r2
 8010a68:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8010a6c:	4a0b      	ldr	r2, [pc, #44]	; (8010a9c <TRACE_TxCpltCallback+0xa0>)
 8010a6e:	68d2      	ldr	r2, [r2, #12]
 8010a70:	8a99      	ldrh	r1, [r3, #20]
 8010a72:	4790      	blx	r2
 8010a74:	e7e0      	b.n	8010a38 <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8010a76:	4c07      	ldr	r4, [pc, #28]	; (8010a94 <TRACE_TxCpltCallback+0x98>)
 8010a78:	8820      	ldrh	r0, [r4, #0]
 8010a7a:	1a82      	subs	r2, r0, r2
 8010a7c:	b292      	uxth	r2, r2
 8010a7e:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8010a80:	2002      	movs	r0, #2
 8010a82:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8010a84:	2000      	movs	r0, #0
 8010a86:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8010a88:	2a00      	cmp	r2, #0
 8010a8a:	d1e9      	bne.n	8010a60 <TRACE_TxCpltCallback+0x64>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8010a8c:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8010a8e:	8220      	strh	r0, [r4, #16]
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8010a90:	e7dd      	b.n	8010a4e <TRACE_TxCpltCallback+0x52>
 8010a92:	bf00      	nop
 8010a94:	20002618 	.word	0x20002618
 8010a98:	20002218 	.word	0x20002218
 8010a9c:	08010e58 	.word	0x08010e58

08010aa0 <__libc_init_array>:
 8010aa0:	b570      	push	{r4, r5, r6, lr}
 8010aa2:	4d0d      	ldr	r5, [pc, #52]	; (8010ad8 <__libc_init_array+0x38>)
 8010aa4:	4c0d      	ldr	r4, [pc, #52]	; (8010adc <__libc_init_array+0x3c>)
 8010aa6:	1b64      	subs	r4, r4, r5
 8010aa8:	10a4      	asrs	r4, r4, #2
 8010aaa:	2600      	movs	r6, #0
 8010aac:	42a6      	cmp	r6, r4
 8010aae:	d109      	bne.n	8010ac4 <__libc_init_array+0x24>
 8010ab0:	4d0b      	ldr	r5, [pc, #44]	; (8010ae0 <__libc_init_array+0x40>)
 8010ab2:	4c0c      	ldr	r4, [pc, #48]	; (8010ae4 <__libc_init_array+0x44>)
 8010ab4:	f000 f918 	bl	8010ce8 <_init>
 8010ab8:	1b64      	subs	r4, r4, r5
 8010aba:	10a4      	asrs	r4, r4, #2
 8010abc:	2600      	movs	r6, #0
 8010abe:	42a6      	cmp	r6, r4
 8010ac0:	d105      	bne.n	8010ace <__libc_init_array+0x2e>
 8010ac2:	bd70      	pop	{r4, r5, r6, pc}
 8010ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ac8:	4798      	blx	r3
 8010aca:	3601      	adds	r6, #1
 8010acc:	e7ee      	b.n	8010aac <__libc_init_array+0xc>
 8010ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ad2:	4798      	blx	r3
 8010ad4:	3601      	adds	r6, #1
 8010ad6:	e7f2      	b.n	8010abe <__libc_init_array+0x1e>
 8010ad8:	080117ec 	.word	0x080117ec
 8010adc:	080117ec 	.word	0x080117ec
 8010ae0:	080117ec 	.word	0x080117ec
 8010ae4:	080117f4 	.word	0x080117f4

08010ae8 <memcpy>:
 8010ae8:	440a      	add	r2, r1
 8010aea:	4291      	cmp	r1, r2
 8010aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8010af0:	d100      	bne.n	8010af4 <memcpy+0xc>
 8010af2:	4770      	bx	lr
 8010af4:	b510      	push	{r4, lr}
 8010af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010afa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010afe:	4291      	cmp	r1, r2
 8010b00:	d1f9      	bne.n	8010af6 <memcpy+0xe>
 8010b02:	bd10      	pop	{r4, pc}

08010b04 <memset>:
 8010b04:	4402      	add	r2, r0
 8010b06:	4603      	mov	r3, r0
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	d100      	bne.n	8010b0e <memset+0xa>
 8010b0c:	4770      	bx	lr
 8010b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8010b12:	e7f9      	b.n	8010b08 <memset+0x4>

08010b14 <register_fini>:
 8010b14:	4b02      	ldr	r3, [pc, #8]	; (8010b20 <register_fini+0xc>)
 8010b16:	b113      	cbz	r3, 8010b1e <register_fini+0xa>
 8010b18:	4802      	ldr	r0, [pc, #8]	; (8010b24 <register_fini+0x10>)
 8010b1a:	f000 b805 	b.w	8010b28 <atexit>
 8010b1e:	4770      	bx	lr
 8010b20:	00000000 	.word	0x00000000
 8010b24:	08010b35 	.word	0x08010b35

08010b28 <atexit>:
 8010b28:	2300      	movs	r3, #0
 8010b2a:	4601      	mov	r1, r0
 8010b2c:	461a      	mov	r2, r3
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f000 b816 	b.w	8010b60 <__register_exitproc>

08010b34 <__libc_fini_array>:
 8010b34:	b538      	push	{r3, r4, r5, lr}
 8010b36:	4d07      	ldr	r5, [pc, #28]	; (8010b54 <__libc_fini_array+0x20>)
 8010b38:	4c07      	ldr	r4, [pc, #28]	; (8010b58 <__libc_fini_array+0x24>)
 8010b3a:	1b64      	subs	r4, r4, r5
 8010b3c:	10a4      	asrs	r4, r4, #2
 8010b3e:	b91c      	cbnz	r4, 8010b48 <__libc_fini_array+0x14>
 8010b40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b44:	f000 b8d6 	b.w	8010cf4 <_fini>
 8010b48:	3c01      	subs	r4, #1
 8010b4a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8010b4e:	4798      	blx	r3
 8010b50:	e7f5      	b.n	8010b3e <__libc_fini_array+0xa>
 8010b52:	bf00      	nop
 8010b54:	080117f4 	.word	0x080117f4
 8010b58:	080117f8 	.word	0x080117f8

08010b5c <__retarget_lock_acquire_recursive>:
 8010b5c:	4770      	bx	lr

08010b5e <__retarget_lock_release_recursive>:
 8010b5e:	4770      	bx	lr

08010b60 <__register_exitproc>:
 8010b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b64:	f8df a074 	ldr.w	sl, [pc, #116]	; 8010bdc <__register_exitproc+0x7c>
 8010b68:	4606      	mov	r6, r0
 8010b6a:	f8da 0000 	ldr.w	r0, [sl]
 8010b6e:	4698      	mov	r8, r3
 8010b70:	460f      	mov	r7, r1
 8010b72:	4691      	mov	r9, r2
 8010b74:	f7ff fff2 	bl	8010b5c <__retarget_lock_acquire_recursive>
 8010b78:	4b19      	ldr	r3, [pc, #100]	; (8010be0 <__register_exitproc+0x80>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8010b80:	b91c      	cbnz	r4, 8010b8a <__register_exitproc+0x2a>
 8010b82:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8010b86:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8010b8a:	6865      	ldr	r5, [r4, #4]
 8010b8c:	f8da 0000 	ldr.w	r0, [sl]
 8010b90:	2d1f      	cmp	r5, #31
 8010b92:	dd05      	ble.n	8010ba0 <__register_exitproc+0x40>
 8010b94:	f7ff ffe3 	bl	8010b5e <__retarget_lock_release_recursive>
 8010b98:	f04f 30ff 	mov.w	r0, #4294967295
 8010b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ba0:	b19e      	cbz	r6, 8010bca <__register_exitproc+0x6a>
 8010ba2:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8010ba6:	2201      	movs	r2, #1
 8010ba8:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8010bac:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8010bb0:	40aa      	lsls	r2, r5
 8010bb2:	4313      	orrs	r3, r2
 8010bb4:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8010bb8:	2e02      	cmp	r6, #2
 8010bba:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8010bbe:	bf02      	ittt	eq
 8010bc0:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8010bc4:	4313      	orreq	r3, r2
 8010bc6:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8010bca:	1c6b      	adds	r3, r5, #1
 8010bcc:	3502      	adds	r5, #2
 8010bce:	6063      	str	r3, [r4, #4]
 8010bd0:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8010bd4:	f7ff ffc3 	bl	8010b5e <__retarget_lock_release_recursive>
 8010bd8:	2000      	movs	r0, #0
 8010bda:	e7df      	b.n	8010b9c <__register_exitproc+0x3c>
 8010bdc:	20000550 	.word	0x20000550
 8010be0:	08011720 	.word	0x08011720
 8010be4:	00000000 	.word	0x00000000

08010be8 <floor>:
 8010be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bec:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8010bf0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8010bf4:	2e13      	cmp	r6, #19
 8010bf6:	4602      	mov	r2, r0
 8010bf8:	460b      	mov	r3, r1
 8010bfa:	4607      	mov	r7, r0
 8010bfc:	460c      	mov	r4, r1
 8010bfe:	4605      	mov	r5, r0
 8010c00:	dc33      	bgt.n	8010c6a <floor+0x82>
 8010c02:	2e00      	cmp	r6, #0
 8010c04:	da14      	bge.n	8010c30 <floor+0x48>
 8010c06:	a334      	add	r3, pc, #208	; (adr r3, 8010cd8 <floor+0xf0>)
 8010c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c0c:	f7ef fac2 	bl	8000194 <__adddf3>
 8010c10:	2200      	movs	r2, #0
 8010c12:	2300      	movs	r3, #0
 8010c14:	f7ef fcf2 	bl	80005fc <__aeabi_dcmpgt>
 8010c18:	b138      	cbz	r0, 8010c2a <floor+0x42>
 8010c1a:	2c00      	cmp	r4, #0
 8010c1c:	da58      	bge.n	8010cd0 <floor+0xe8>
 8010c1e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010c22:	431d      	orrs	r5, r3
 8010c24:	d001      	beq.n	8010c2a <floor+0x42>
 8010c26:	4c2e      	ldr	r4, [pc, #184]	; (8010ce0 <floor+0xf8>)
 8010c28:	2500      	movs	r5, #0
 8010c2a:	4623      	mov	r3, r4
 8010c2c:	462f      	mov	r7, r5
 8010c2e:	e025      	b.n	8010c7c <floor+0x94>
 8010c30:	4a2c      	ldr	r2, [pc, #176]	; (8010ce4 <floor+0xfc>)
 8010c32:	fa42 f806 	asr.w	r8, r2, r6
 8010c36:	ea01 0208 	and.w	r2, r1, r8
 8010c3a:	4302      	orrs	r2, r0
 8010c3c:	d01e      	beq.n	8010c7c <floor+0x94>
 8010c3e:	a326      	add	r3, pc, #152	; (adr r3, 8010cd8 <floor+0xf0>)
 8010c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c44:	f7ef faa6 	bl	8000194 <__adddf3>
 8010c48:	2200      	movs	r2, #0
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	f7ef fcd6 	bl	80005fc <__aeabi_dcmpgt>
 8010c50:	2800      	cmp	r0, #0
 8010c52:	d0ea      	beq.n	8010c2a <floor+0x42>
 8010c54:	2c00      	cmp	r4, #0
 8010c56:	bfbe      	ittt	lt
 8010c58:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010c5c:	fa43 f606 	asrlt.w	r6, r3, r6
 8010c60:	19a4      	addlt	r4, r4, r6
 8010c62:	ea24 0408 	bic.w	r4, r4, r8
 8010c66:	2500      	movs	r5, #0
 8010c68:	e7df      	b.n	8010c2a <floor+0x42>
 8010c6a:	2e33      	cmp	r6, #51	; 0x33
 8010c6c:	dd0a      	ble.n	8010c84 <floor+0x9c>
 8010c6e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010c72:	d103      	bne.n	8010c7c <floor+0x94>
 8010c74:	f7ef fa8e 	bl	8000194 <__adddf3>
 8010c78:	4607      	mov	r7, r0
 8010c7a:	460b      	mov	r3, r1
 8010c7c:	4638      	mov	r0, r7
 8010c7e:	4619      	mov	r1, r3
 8010c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c84:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8010c88:	f04f 32ff 	mov.w	r2, #4294967295
 8010c8c:	fa22 f808 	lsr.w	r8, r2, r8
 8010c90:	ea18 0f00 	tst.w	r8, r0
 8010c94:	d0f2      	beq.n	8010c7c <floor+0x94>
 8010c96:	a310      	add	r3, pc, #64	; (adr r3, 8010cd8 <floor+0xf0>)
 8010c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c9c:	f7ef fa7a 	bl	8000194 <__adddf3>
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	f7ef fcaa 	bl	80005fc <__aeabi_dcmpgt>
 8010ca8:	2800      	cmp	r0, #0
 8010caa:	d0be      	beq.n	8010c2a <floor+0x42>
 8010cac:	2c00      	cmp	r4, #0
 8010cae:	da02      	bge.n	8010cb6 <floor+0xce>
 8010cb0:	2e14      	cmp	r6, #20
 8010cb2:	d103      	bne.n	8010cbc <floor+0xd4>
 8010cb4:	3401      	adds	r4, #1
 8010cb6:	ea25 0508 	bic.w	r5, r5, r8
 8010cba:	e7b6      	b.n	8010c2a <floor+0x42>
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010cc2:	fa03 f606 	lsl.w	r6, r3, r6
 8010cc6:	4435      	add	r5, r6
 8010cc8:	42bd      	cmp	r5, r7
 8010cca:	bf38      	it	cc
 8010ccc:	18e4      	addcc	r4, r4, r3
 8010cce:	e7f2      	b.n	8010cb6 <floor+0xce>
 8010cd0:	2500      	movs	r5, #0
 8010cd2:	462c      	mov	r4, r5
 8010cd4:	e7a9      	b.n	8010c2a <floor+0x42>
 8010cd6:	bf00      	nop
 8010cd8:	8800759c 	.word	0x8800759c
 8010cdc:	7e37e43c 	.word	0x7e37e43c
 8010ce0:	bff00000 	.word	0xbff00000
 8010ce4:	000fffff 	.word	0x000fffff

08010ce8 <_init>:
 8010ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cea:	bf00      	nop
 8010cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cee:	bc08      	pop	{r3}
 8010cf0:	469e      	mov	lr, r3
 8010cf2:	4770      	bx	lr

08010cf4 <_fini>:
 8010cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cf6:	bf00      	nop
 8010cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cfa:	bc08      	pop	{r3}
 8010cfc:	469e      	mov	lr, r3
 8010cfe:	4770      	bx	lr
