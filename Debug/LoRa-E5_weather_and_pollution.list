
LoRa-E5_weather_and_pollution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001af80  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a88  0801b0b8  0801b0b8  0002b0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801bb40  0801bb40  0002bb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801bc00  0801bc00  0003014c  2**0
                  CONTENTS
  5 .ARM          00000008  0801bc00  0801bc00  0002bc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801bc08  0801bc08  0003014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801bc08  0801bc08  0002bc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801bc0c  0801bc0c  0002bc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000014c  20000000  0801bc10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000021c8  2000014c  0801bd5c  0003014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002314  0801bd5c  00032314  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0003014c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00041c74  00000000  00000000  00030176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009eba  00000000  00000000  00071dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003220  00000000  00000000  0007bca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002e28  00000000  00000000  0007eec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b72  00000000  00000000  00081cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003b6cb  00000000  00000000  000a9862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c981b  00000000  00000000  000e4f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ae748  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cd94  00000000  00000000  001ae798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000014c 	.word	0x2000014c
 8000154:	00000000 	.word	0x00000000
 8000158:	0801b0a0 	.word	0x0801b0a0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000150 	.word	0x20000150
 8000174:	0801b0a0 	.word	0x0801b0a0

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14d      	bne.n	8000c84 <__udivmoddi4+0xac>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d968      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b152      	cbz	r2, 8000c0a <__udivmoddi4+0x32>
 8000bf4:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf8:	f1c2 0120 	rsb	r1, r2, #32
 8000bfc:	fa20 f101 	lsr.w	r1, r0, r1
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	ea41 0803 	orr.w	r8, r1, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000c0e:	0c21      	lsrs	r1, r4, #16
 8000c10:	fbb8 fef5 	udiv	lr, r8, r5
 8000c14:	fa1f f78c 	uxth.w	r7, ip
 8000c18:	fb05 831e 	mls	r3, r5, lr, r8
 8000c1c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c20:	fb0e f107 	mul.w	r1, lr, r7
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d90b      	bls.n	8000c40 <__udivmoddi4+0x68>
 8000c28:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000c30:	f080 811e 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c34:	4299      	cmp	r1, r3
 8000c36:	f240 811b 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c3a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0f5 	udiv	r0, r3, r5
 8000c48:	fb05 3310 	mls	r3, r5, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 f707 	mul.w	r7, r0, r7
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x96>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c60:	f080 8108 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	f240 8105 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c74:	2100      	movs	r1, #0
 8000c76:	b11e      	cbz	r6, 8000c80 <__udivmoddi4+0xa8>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	f000 80ee 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8e:	2100      	movs	r1, #0
 8000c90:	e9c6 0500 	strd	r0, r5, [r6]
 8000c94:	4608      	mov	r0, r1
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f183 	clz	r1, r3
 8000c9e:	2900      	cmp	r1, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0303 	sbc.w	r3, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d0e2      	beq.n	8000c80 <__udivmoddi4+0xa8>
 8000cba:	e9c6 4800 	strd	r4, r8, [r6]
 8000cbe:	e7df      	b.n	8000c80 <__udivmoddi4+0xa8>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8091 	bne.w	8000df0 <__udivmoddi4+0x218>
 8000cce:	eba1 050c 	sub.w	r5, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2101      	movs	r1, #1
 8000cdc:	fbb5 f3f7 	udiv	r3, r5, r7
 8000ce0:	fb07 5013 	mls	r0, r7, r3, r5
 8000ce4:	0c25      	lsrs	r5, r4, #16
 8000ce6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	42a8      	cmp	r0, r5
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0505 	adds.w	r5, ip, r5
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	42a8      	cmp	r0, r5
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a2d      	subs	r5, r5, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d0c:	fb07 5510 	mls	r5, r7, r0, r5
 8000d10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79e      	b.n	8000c76 <__udivmoddi4+0x9e>
 8000d38:	f1c1 0720 	rsb	r7, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa05 f301 	lsl.w	r3, r5, r1
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40fd      	lsrs	r5, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f301 	lsl.w	r3, r0, r1
 8000d5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 5518 	mls	r5, r9, r8, r5
 8000d68:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	42a8      	cmp	r0, r5
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0505 	adds.w	r5, ip, r5
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	42a8      	cmp	r0, r5
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4465      	add	r5, ip
 8000d90:	1a2d      	subs	r5, r5, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb5 f0f9 	udiv	r0, r5, r9
 8000d98:	fb09 5510 	mls	r5, r9, r0, r5
 8000d9c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	45ae      	cmp	lr, r5
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0505 	adds.w	r5, ip, r5
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	45ae      	cmp	lr, r5
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4465      	add	r5, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba5 050e 	sub.w	r5, r5, lr
 8000dc6:	42a5      	cmp	r5, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15e      	cbz	r6, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb65 050e 	sbc.w	r5, r5, lr
 8000dda:	fa05 f707 	lsl.w	r7, r5, r7
 8000dde:	fa22 f301 	lsr.w	r3, r2, r1
 8000de2:	40cd      	lsrs	r5, r1
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c6 7500 	strd	r7, r5, [r6]
 8000dea:	2100      	movs	r1, #0
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f103 	lsr.w	r1, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa25 f303 	lsr.w	r3, r5, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	430d      	orrs	r5, r1
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e10:	fb07 3011 	mls	r0, r7, r1, r3
 8000e14:	0c2b      	lsrs	r3, r5, #16
 8000e16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000e1a:	fb01 f00e 	mul.w	r0, r1, lr
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	4298      	cmp	r0, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3902      	subs	r1, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a1b      	subs	r3, r3, r0
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3310 	mls	r3, r7, r0, r3
 8000e44:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e48:	fb00 f30e 	mul.w	r3, r0, lr
 8000e4c:	42ab      	cmp	r3, r5
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0505 	adds.w	r5, ip, r5
 8000e54:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	42ab      	cmp	r3, r5
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4465      	add	r5, ip
 8000e62:	1aed      	subs	r5, r5, r3
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	e707      	b.n	8000c80 <__udivmoddi4+0xa8>
 8000e70:	4686      	mov	lr, r0
 8000e72:	e6e5      	b.n	8000c40 <__udivmoddi4+0x68>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fa      	b.n	8000c6e <__udivmoddi4+0x96>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4641      	mov	r1, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4465      	add	r5, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
}
 8000ed2:	bf00      	nop
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000f04:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f06:	4a24      	ldr	r2, [pc, #144]	; (8000f98 <MX_ADC_Init+0x98>)
 8000f08:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f0a:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f0c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f10:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f18:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f26:	2204      	movs	r2, #4
 8000f28:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f30:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f64:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f68:	2207      	movs	r2, #7
 8000f6a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f6e:	2207      	movs	r2, #7
 8000f70:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f82:	f001 ff91 	bl	8002ea8 <HAL_ADC_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000f8c:	f000 fb90 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000168 	.word	0x20000168
 8000f98:	40012400 	.word	0x40012400

08000f9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <HAL_ADC_MspInit+0x24>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d103      	bne.n	8000fb6 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fb2:	f7ff ff7b 	bl	8000eac <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40012400 	.word	0x40012400

08000fc4 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <HAL_ADC_MspDeInit+0x24>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d103      	bne.n	8000fde <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000fd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fda:	f7ff ff7f 	bl	8000edc <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40012400 	.word	0x40012400

08000fec <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <SYS_InitMeasurement+0x14>)
 8000ff2:	4a04      	ldr	r2, [pc, #16]	; (8001004 <SYS_InitMeasurement+0x18>)
 8000ff4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000168 	.word	0x20000168
 8001004:	40012400 	.word	0x40012400

08001008 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001016:	4813      	ldr	r0, [pc, #76]	; (8001064 <SYS_GetBatteryLevel+0x5c>)
 8001018:	f000 f82a 	bl	8001070 <ADC_ReadChannels>
 800101c:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	80fb      	strh	r3, [r7, #6]
 8001028:	e016      	b.n	8001058 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <SYS_GetBatteryLevel+0x60>)
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001032:	4293      	cmp	r3, r2
 8001034:	d00b      	beq.n	800104e <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <SYS_GetBatteryLevel+0x60>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001040:	fb03 f202 	mul.w	r2, r3, r2
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	fbb2 f3f3 	udiv	r3, r2, r3
 800104a:	80fb      	strh	r3, [r7, #6]
 800104c:	e004      	b.n	8001058 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800104e:	4a07      	ldr	r2, [pc, #28]	; (800106c <SYS_GetBatteryLevel+0x64>)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001058:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	b4002000 	.word	0xb4002000
 8001068:	1fff75aa 	.word	0x1fff75aa
 800106c:	004c08d8 	.word	0x004c08d8

08001070 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001088:	f7ff ff3a 	bl	8000f00 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 800108c:	481a      	ldr	r0, [pc, #104]	; (80010f8 <ADC_ReadChannels+0x88>)
 800108e:	f002 fd3a 	bl	8003b06 <HAL_ADCEx_Calibration_Start>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001098:	f000 fb0a 	bl	80016b0 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	4619      	mov	r1, r3
 80010ae:	4812      	ldr	r0, [pc, #72]	; (80010f8 <ADC_ReadChannels+0x88>)
 80010b0:	f002 fa46 	bl	8003540 <HAL_ADC_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80010ba:	f000 faf9 	bl	80016b0 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80010be:	480e      	ldr	r0, [pc, #56]	; (80010f8 <ADC_ReadChannels+0x88>)
 80010c0:	f002 f922 	bl	8003308 <HAL_ADC_Start>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80010ca:	f000 faf1 	bl	80016b0 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80010ce:	f04f 31ff 	mov.w	r1, #4294967295
 80010d2:	4809      	ldr	r0, [pc, #36]	; (80010f8 <ADC_ReadChannels+0x88>)
 80010d4:	f002 f990 	bl	80033f8 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80010d8:	4807      	ldr	r0, [pc, #28]	; (80010f8 <ADC_ReadChannels+0x88>)
 80010da:	f002 f95b 	bl	8003394 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80010de:	4806      	ldr	r0, [pc, #24]	; (80010f8 <ADC_ReadChannels+0x88>)
 80010e0:	f002 fa21 	bl	8003526 <HAL_ADC_GetValue>
 80010e4:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80010e6:	4804      	ldr	r0, [pc, #16]	; (80010f8 <ADC_ReadChannels+0x88>)
 80010e8:	f002 f892 	bl	8003210 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80010ec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000168 	.word	0x20000168

080010fc <LL_AHB1_GRP1_EnableClock>:
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001108:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800110a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4313      	orrs	r3, r2
 8001112:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001118:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4013      	ands	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001120:	68fb      	ldr	r3, [r7, #12]
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001130:	2004      	movs	r0, #4
 8001132:	f7ff ffe3 	bl	80010fc <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001136:	2001      	movs	r0, #1
 8001138:	f7ff ffe0 	bl	80010fc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2102      	movs	r1, #2
 8001140:	200b      	movs	r0, #11
 8001142:	f002 fe86 	bl	8003e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001146:	200b      	movs	r0, #11
 8001148:	f002 fe9d 	bl	8003e86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	2100      	movs	r1, #0
 8001150:	200c      	movs	r0, #12
 8001152:	f002 fe7e 	bl	8003e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001156:	200c      	movs	r0, #12
 8001158:	f002 fe95 	bl	8003e86 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	203d      	movs	r0, #61	; 0x3d
 8001162:	f002 fe76 	bl	8003e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8001166:	203d      	movs	r0, #61	; 0x3d
 8001168:	f002 fe8d 	bl	8003e86 <HAL_NVIC_EnableIRQ>

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}

08001170 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800117c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001180:	d101      	bne.n	8001186 <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 8001182:	2301      	movs	r3, #1
 8001184:	e000      	b.n	8001188 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 8001186:	2300      	movs	r3, #0
#endif
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	58004000 	.word	0x58004000

08001194 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	; 0x30
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
 80011a0:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t page_start_index = PAGE(address);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 80011ac:	4b56      	ldr	r3, [pc, #344]	; (8001308 <FLASH_IF_Write+0x174>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	0299      	lsls	r1, r3, #10
 80011b2:	4b56      	ldr	r3, [pc, #344]	; (800130c <FLASH_IF_Write+0x178>)
 80011b4:	400b      	ands	r3, r1
 80011b6:	fbb2 f1f3 	udiv	r1, r2, r3
 80011ba:	fb01 f303 	mul.w	r3, r1, r3
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	0adb      	lsrs	r3, r3, #11
 80011c2:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80011ce:	3b01      	subs	r3, #1
 80011d0:	4a4d      	ldr	r2, [pc, #308]	; (8001308 <FLASH_IF_Write+0x174>)
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	0291      	lsls	r1, r2, #10
 80011d6:	4a4d      	ldr	r2, [pc, #308]	; (800130c <FLASH_IF_Write+0x178>)
 80011d8:	400a      	ands	r2, r1
 80011da:	fbb3 f1f2 	udiv	r1, r3, r2
 80011de:	fb01 f202 	mul.w	r2, r1, r2
 80011e2:	1a9b      	subs	r3, r3, r2
 80011e4:	0adb      	lsrs	r3, r3, #11
 80011e6:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t curr_dest_addr = address;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d009      	beq.n	800120e <FLASH_IF_Write+0x7a>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	2b00      	cmp	r3, #0
 8001202:	d104      	bne.n	800120e <FLASH_IF_Write+0x7a>
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	2b00      	cmp	r3, #0
 800120c:	d002      	beq.n	8001214 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 800120e:	f06f 0304 	mvn.w	r3, #4
 8001212:	e074      	b.n	80012fe <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001214:	4b3e      	ldr	r3, [pc, #248]	; (8001310 <FLASH_IF_Write+0x17c>)
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	2b00      	cmp	r3, #0
 800121a:	da02      	bge.n	8001222 <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 800121c:	f06f 0303 	mvn.w	r3, #3
 8001220:	e06d      	b.n	80012fe <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	429a      	cmp	r2, r3
 8001228:	d005      	beq.n	8001236 <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001230:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	61fb      	str	r3, [r7, #28]
 800123a:	e05b      	b.n	80012f4 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001240:	4618      	mov	r0, r3
 8001242:	f000 f8f8 	bl	8001436 <FLASH_IF_IsEmpty>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d037      	beq.n	80012bc <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d102      	bne.n	8001258 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 8001252:	f06f 0304 	mvn.w	r3, #4
 8001256:	e052      	b.n	80012fe <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800125e:	02db      	lsls	r3, r3, #11
 8001260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001264:	4619      	mov	r1, r3
 8001266:	6838      	ldr	r0, [r7, #0]
 8001268:	f018 fba6 	bl	80199b8 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	4413      	add	r3, r2
 8001276:	6a39      	ldr	r1, [r7, #32]
 8001278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800127a:	b292      	uxth	r2, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f018 fb9b 	bl	80199b8 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 8001282:	2200      	movs	r2, #0
 8001284:	2101      	movs	r1, #1
 8001286:	69f8      	ldr	r0, [r7, #28]
 8001288:	f000 f865 	bl	8001356 <FLASH_IF_EraseByPages>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 8001292:	f06f 0301 	mvn.w	r3, #1
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 8001298:	e030      	b.n	80012fc <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80012a0:	02db      	lsls	r3, r3, #11
 80012a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012a6:	6839      	ldr	r1, [r7, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f88a 	bl	80013c2 <FLASH_IF_Write_Buffer>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d010      	beq.n	80012d6 <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 80012b4:	f06f 0302 	mvn.w	r3, #2
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
          break; /* exit for loop */
 80012ba:	e01f      	b.n	80012fc <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012c0:	4619      	mov	r1, r3
 80012c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012c4:	f000 f87d 	bl	80013c2 <FLASH_IF_Write_Buffer>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 80012ce:	f06f 0302 	mvn.w	r3, #2
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 80012d4:	e012      	b.n	80012fc <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 80012d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012da:	4413      	add	r3, r2
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
    curr_src_addr += curr_size;
 80012de:	6a3a      	ldr	r2, [r7, #32]
 80012e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e2:	4413      	add	r3, r2
 80012e4:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3301      	adds	r3, #1
 80012f2:	61fb      	str	r3, [r7, #28]
 80012f4:	69fa      	ldr	r2, [r7, #28]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d99f      	bls.n	800123c <FLASH_IF_Write+0xa8>
  }

  return status;
 80012fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3730      	adds	r7, #48	; 0x30
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	1fff75e0 	.word	0x1fff75e0
 800130c:	03fffc00 	.word	0x03fffc00
 8001310:	58004000 	.word	0x58004000

08001314 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 8001320:	e00b      	b.n	800133a <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 8001322:	bf00      	nop
 8001324:	f7ff ff24 	bl	8001170 <LL_FLASH_IsActiveFlag_OperationSuspended>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1fa      	bne.n	8001324 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 800132e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001332:	68f9      	ldr	r1, [r7, #12]
 8001334:	2001      	movs	r0, #1
 8001336:	f003 fa3f 	bl	80047b8 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001344:	4299      	cmp	r1, r3
 8001346:	bf08      	it	eq
 8001348:	4290      	cmpeq	r0, r2
 800134a:	d1ea      	bne.n	8001322 <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 800134c:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b08a      	sub	sp, #40	; 0x28
 800135a:	af00      	add	r7, sp, #0
 800135c:	60f8      	str	r0, [r7, #12]
 800135e:	460b      	mov	r3, r1
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001364:	2302      	movs	r3, #2
 8001366:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 800136c:	897b      	ldrh	r3, [r7, #10]
 800136e:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d008      	beq.n	8001388 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 8001376:	f107 0318 	add.w	r3, r7, #24
 800137a:	4618      	mov	r0, r3
 800137c:	f003 fbba 	bl	8004af4 <HAL_FLASHEx_Erase_IT>
 8001380:	4603      	mov	r3, r0
 8001382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001386:	e00a      	b.n	800139e <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 8001388:	f107 0214 	add.w	r2, r7, #20
 800138c:	f107 0318 	add.w	r3, r7, #24
 8001390:	4611      	mov	r1, r2
 8001392:	4618      	mov	r0, r3
 8001394:	f003 fb56 	bl	8004a44 <HAL_FLASHEx_Erase>
 8001398:	4603      	mov	r3, r0
 800139a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 800139e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d008      	beq.n	80013b8 <FLASH_IF_EraseByPages+0x62>
 80013a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d101      	bne.n	80013b2 <FLASH_IF_EraseByPages+0x5c>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e003      	b.n	80013ba <FLASH_IF_EraseByPages+0x64>
 80013b2:	f06f 0301 	mvn.w	r3, #1
 80013b6:	e000      	b.n	80013ba <FLASH_IF_EraseByPages+0x64>
 80013b8:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b08a      	sub	sp, #40	; 0x28
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
 80013da:	e020      	b.n	800141e <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	2208      	movs	r2, #8
 80013e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013e4:	4618      	mov	r0, r3
 80013e6:	f018 fae7 	bl	80199b8 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 80013ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f2:	bf08      	it	eq
 80013f4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80013f8:	d005      	beq.n	8001406 <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 80013fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f7ff ff88 	bl	8001314 <FLASH_IF_Write64>
 8001404:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	3308      	adds	r3, #8
 800140a:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	3308      	adds	r3, #8
 8001410:	627b      	str	r3, [r7, #36]	; 0x24

    if (status != FLASH_OK)
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d108      	bne.n	800142a <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	3301      	adds	r3, #1
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	08db      	lsrs	r3, r3, #3
 8001422:	69fa      	ldr	r2, [r7, #28]
 8001424:	429a      	cmp	r2, r3
 8001426:	d3d9      	bcc.n	80013dc <FLASH_IF_Write_Buffer+0x1a>
 8001428:	e000      	b.n	800142c <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 800142a:	bf00      	nop
    }
  }

  return status;
 800142c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 800142e:	4618      	mov	r0, r3
 8001430:	3728      	adds	r7, #40	; 0x28
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 8001436:	b480      	push	{r7}
 8001438:	b085      	sub	sp, #20
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001440:	e00a      	b.n	8001458 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2bff      	cmp	r3, #255	; 0xff
 800144c:	d001      	beq.n	8001452 <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 800144e:	2301      	movs	r3, #1
 8001450:	e039      	b.n	80014c6 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	3b01      	subs	r3, #1
 8001456:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1ef      	bne.n	8001442 <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	e010      	b.n	800148e <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f103 0208 	add.w	r2, r3, #8
 8001472:	60fa      	str	r2, [r7, #12]
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147c:	bf08      	it	eq
 800147e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001482:	d001      	beq.n	8001488 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 8001484:	2301      	movs	r3, #1
 8001486:	e01e      	b.n	80014c6 <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	3301      	adds	r3, #1
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	08db      	lsrs	r3, r3, #3
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	429a      	cmp	r2, r3
 8001496:	d3e9      	bcc.n	800146c <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	607b      	str	r3, [r7, #4]
  while (size != 0)
 80014a6:	e00a      	b.n	80014be <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2bff      	cmp	r3, #255	; 0xff
 80014b2:	d001      	beq.n	80014b8 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e006      	b.n	80014c6 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	603b      	str	r3, [r7, #0]
  while (size != 0)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f1      	bne.n	80014a8 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 80014c4:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <LL_AHB2_GRP1_EnableClock>:
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4013      	ands	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014f4:	68fb      	ldr	r3, [r7, #12]
}
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	2001      	movs	r0, #1
 8001516:	f7ff ffdb 	bl	80014d0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151a:	2004      	movs	r0, #4
 800151c:	f7ff ffd8 	bl	80014d0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001520:	2002      	movs	r0, #2
 8001522:	f7ff ffd5 	bl	80014d0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 6183 	mov.w	r1, #1048	; 0x418
 800152c:	4821      	ldr	r0, [pc, #132]	; (80015b4 <MX_GPIO_Init+0xb4>)
 800152e:	f003 fdd3 	bl	80050d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001532:	2201      	movs	r2, #1
 8001534:	2120      	movs	r1, #32
 8001536:	481f      	ldr	r0, [pc, #124]	; (80015b4 <MX_GPIO_Init+0xb4>)
 8001538:	f003 fdce 	bl	80050d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	2131      	movs	r1, #49	; 0x31
 8001540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001544:	f003 fdc8 	bl	80050d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001548:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800154c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	4619      	mov	r1, r3
 800155e:	4815      	ldr	r0, [pc, #84]	; (80015b4 <MX_GPIO_Init+0xb4>)
 8001560:	f003 fb8c 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001564:	2331      	movs	r3, #49	; 0x31
 8001566:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	4619      	mov	r1, r3
 8001578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157c:	f003 fb7e 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001580:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001584:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001586:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800158a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800158c:	2301      	movs	r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	4619      	mov	r1, r3
 8001594:	4807      	ldr	r0, [pc, #28]	; (80015b4 <MX_GPIO_Init+0xb4>)
 8001596:	f003 fb71 	bl	8004c7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	2029      	movs	r0, #41	; 0x29
 80015a0:	f002 fc57 	bl	8003e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015a4:	2029      	movs	r0, #41	; 0x29
 80015a6:	f002 fc6e 	bl	8003e86 <HAL_NVIC_EnableIRQ>

}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	48000400 	.word	0x48000400

080015b8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80015c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c8:	f023 0218 	bic.w	r2, r3, #24
 80015cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e6:	f001 fa71 	bl	8002acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ea:	f000 f807 	bl	80015fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ee:	f7ff ff87 	bl	8001500 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80015f2:	f008 fb09 	bl	8009c08 <MX_LoRaWAN_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80015f6:	f008 fb0f 	bl	8009c18 <MX_LoRaWAN_Process>
 80015fa:	e7fc      	b.n	80015f6 <main+0x14>

080015fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b09a      	sub	sp, #104	; 0x68
 8001600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001602:	f107 0320 	add.w	r3, r7, #32
 8001606:	2248      	movs	r2, #72	; 0x48
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f019 fcc0 	bl	801af90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001610:	f107 0308 	add.w	r3, r7, #8
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
 8001620:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001622:	f003 fd89 	bl	8005138 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001626:	2000      	movs	r0, #0
 8001628:	f7ff ffc6 	bl	80015b8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <SystemClock_Config+0xb0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001634:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <SystemClock_Config+0xb0>)
 8001636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <SystemClock_Config+0xb0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001648:	2324      	movs	r3, #36	; 0x24
 800164a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800164c:	2381      	movs	r3, #129	; 0x81
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001650:	2301      	movs	r3, #1
 8001652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001654:	2300      	movs	r3, #0
 8001656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001658:	23b0      	movs	r3, #176	; 0xb0
 800165a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800165c:	2300      	movs	r3, #0
 800165e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001660:	f107 0320 	add.w	r3, r7, #32
 8001664:	4618      	mov	r0, r3
 8001666:	f004 f8b3 	bl	80057d0 <HAL_RCC_OscConfig>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001670:	f000 f81e 	bl	80016b0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001674:	234f      	movs	r3, #79	; 0x4f
 8001676:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167c:	2300      	movs	r3, #0
 800167e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800168c:	f107 0308 	add.w	r3, r7, #8
 8001690:	2102      	movs	r1, #2
 8001692:	4618      	mov	r0, r3
 8001694:	f004 fc38 	bl	8005f08 <HAL_RCC_ClockConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800169e:	f000 f807 	bl	80016b0 <Error_Handler>
  }
}
 80016a2:	bf00      	nop
 80016a4:	3768      	adds	r7, #104	; 0x68
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	58000400 	.word	0x58000400

080016b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b4:	b672      	cpsid	i
}
 80016b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <Error_Handler+0x8>

080016ba <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80016be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <LL_APB1_GRP1_EnableClock>:
{
 80016da:	b480      	push	{r7}
 80016dc:	b085      	sub	sp, #20
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80016e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80016f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4013      	ands	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016fe:	68fb      	ldr	r3, [r7, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
	...

0800170c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08c      	sub	sp, #48	; 0x30
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	222c      	movs	r2, #44	; 0x2c
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f019 fc39 	bl	801af90 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <MX_RTC_Init+0x9c>)
 8001720:	4a22      	ldr	r2, [pc, #136]	; (80017ac <MX_RTC_Init+0xa0>)
 8001722:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001724:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <MX_RTC_Init+0x9c>)
 8001726:	221f      	movs	r2, #31
 8001728:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800172a:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <MX_RTC_Init+0x9c>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001730:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <MX_RTC_Init+0x9c>)
 8001732:	2200      	movs	r2, #0
 8001734:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MX_RTC_Init+0x9c>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_RTC_Init+0x9c>)
 800173e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001742:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <MX_RTC_Init+0x9c>)
 8001746:	2200      	movs	r2, #0
 8001748:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_RTC_Init+0x9c>)
 800174c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001752:	4815      	ldr	r0, [pc, #84]	; (80017a8 <MX_RTC_Init+0x9c>)
 8001754:	f005 f894 	bl	8006880 <HAL_RTC_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800175e:	f7ff ffa7 	bl	80016b0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001762:	4811      	ldr	r0, [pc, #68]	; (80017a8 <MX_RTC_Init+0x9c>)
 8001764:	f005 fb82 	bl	8006e6c <HAL_RTCEx_SetSSRU_IT>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800176e:	f7ff ff9f 	bl	80016b0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800177e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001782:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2200      	movs	r2, #0
 800178e:	4619      	mov	r1, r3
 8001790:	4805      	ldr	r0, [pc, #20]	; (80017a8 <MX_RTC_Init+0x9c>)
 8001792:	f005 f8ef 	bl	8006974 <HAL_RTC_SetAlarm_IT>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800179c:	f7ff ff88 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	3730      	adds	r7, #48	; 0x30
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200001cc 	.word	0x200001cc
 80017ac:	40002800 	.word	0x40002800

080017b0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b090      	sub	sp, #64	; 0x40
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017b8:	f107 0308 	add.w	r3, r7, #8
 80017bc:	2238      	movs	r2, #56	; 0x38
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f019 fbe5 	bl	801af90 <memset>
  if(rtcHandle->Instance==RTC)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a16      	ldr	r2, [pc, #88]	; (8001824 <HAL_RTC_MspInit+0x74>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d125      	bne.n	800181c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017d4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80017d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017da:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017dc:	f107 0308 	add.w	r3, r7, #8
 80017e0:	4618      	mov	r0, r3
 80017e2:	f004 ff33 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80017ec:	f7ff ff60 	bl	80016b0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017f0:	f7ff ff63 	bl	80016ba <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80017f4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017f8:	f7ff ff6f 	bl	80016da <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2100      	movs	r1, #0
 8001800:	2002      	movs	r0, #2
 8001802:	f002 fb26 	bl	8003e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001806:	2002      	movs	r0, #2
 8001808:	f002 fb3d 	bl	8003e86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800180c:	2200      	movs	r2, #0
 800180e:	2100      	movs	r1, #0
 8001810:	202a      	movs	r0, #42	; 0x2a
 8001812:	f002 fb1e 	bl	8003e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001816:	202a      	movs	r0, #42	; 0x2a
 8001818:	f002 fb35 	bl	8003e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800181c:	bf00      	nop
 800181e:	3740      	adds	r7, #64	; 0x40
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40002800 	.word	0x40002800

08001828 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800182e:	2201      	movs	r2, #1
 8001830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	58000400 	.word	0x58000400

08001840 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 800185c:	f001 f956 	bl	8002b0c <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001860:	f7ff ffe2 	bl	8001828 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001864:	2001      	movs	r0, #1
 8001866:	f003 fcf9 	bl	800525c <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}

0800186e <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001872:	f001 f959 	bl	8002b28 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001876:	f000 ffd9 	bl	800282c <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}

0800187e <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001882:	f001 f943 	bl	8002b0c <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001886:	2101      	movs	r1, #1
 8001888:	2000      	movs	r0, #0
 800188a:	f003 fc63 	bl	8005154 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}

08001892 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001896:	f001 f947 	bl	8002b28 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <NMI_Handler+0x4>

080018b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <HardFault_Handler+0x4>

080018b6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <MemManage_Handler+0x4>

080018bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <BusFault_Handler+0x4>

080018c2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <UsageFault_Handler+0x4>

080018c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80018fe:	f005 faf1 	bl	8006ee4 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200001cc 	.word	0x200001cc

0800190c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <DMA1_Channel1_IRQHandler+0x10>)
 8001912:	f002 fd4f 	bl	80043b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200002a8 	.word	0x200002a8

08001920 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <DMA1_Channel2_IRQHandler+0x10>)
 8001926:	f002 fd45 	bl	80043b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000308 	.word	0x20000308

08001934 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <USART1_IRQHandler+0x10>)
 800193a:	f006 f933 	bl	8007ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000218 	.word	0x20000218

08001948 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 800194c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001950:	f003 fbda 	bl	8005108 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}

08001958 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <RTC_Alarm_IRQHandler+0x10>)
 800195e:	f005 f971 	bl	8006c44 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200001cc 	.word	0x200001cc

0800196c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <SUBGHZ_Radio_IRQHandler+0x10>)
 8001972:	f005 fe1f 	bl	80075b4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000204 	.word	0x20000204

08001980 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <DMAMUX1_OVR_IRQHandler+0x10>)
 8001986:	f002 fec5 	bl	8004714 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000308 	.word	0x20000308

08001994 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800199c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80019ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4013      	ands	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019b8:	68fb      	ldr	r3, [r7, #12]
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <MX_SUBGHZ_Init+0x20>)
 80019ca:	2208      	movs	r2, #8
 80019cc:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <MX_SUBGHZ_Init+0x20>)
 80019d0:	f005 fb74 	bl	80070bc <HAL_SUBGHZ_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80019da:	f7ff fe69 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000204 	.word	0x20000204

080019e8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80019f0:	2001      	movs	r0, #1
 80019f2:	f7ff ffcf 	bl	8001994 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2100      	movs	r1, #0
 80019fa:	2032      	movs	r0, #50	; 0x32
 80019fc:	f002 fa29 	bl	8003e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001a00:	2032      	movs	r0, #50	; 0x32
 8001a02:	f002 fa40 	bl	8003e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001a20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001a38:	4b02      	ldr	r3, [pc, #8]	; (8001a44 <LL_FLASH_GetUDN+0x10>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	1fff7580 	.word	0x1fff7580

08001a48 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <LL_FLASH_GetDeviceID+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	b2db      	uxtb	r3, r3
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	1fff7584 	.word	0x1fff7584

08001a60 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <LL_FLASH_GetSTCompanyID+0x14>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	0a1b      	lsrs	r3, r3, #8
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	1fff7584 	.word	0x1fff7584

08001a78 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff ffc6 	bl	8001a0e <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001a82:	f018 fd2b 	bl	801a4dc <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <SystemApp_Init+0x50>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001a8c:	f000 f9a0 	bl	8001dd0 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001a90:	f018 ffb4 	bl	801a9fc <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001a94:	480d      	ldr	r0, [pc, #52]	; (8001acc <SystemApp_Init+0x54>)
 8001a96:	f019 f85f 	bl	801ab58 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <SystemApp_Init+0x58>)
 8001a9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001aa0:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001aa2:	2002      	movs	r0, #2
 8001aa4:	f019 f866 	bl	801ab74 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001aa8:	f7ff faa0 	bl	8000fec <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001aac:	f000 fa1a 	bl	8001ee4 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001ab0:	f017 fedc 	bl	801986c <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f017 ff18 	bl	80198ec <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001abc:	2101      	movs	r1, #1
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f017 fee4 	bl	801988c <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000210 	.word	0x20000210
 8001acc:	08001c99 	.word	0x08001c99
 8001ad0:	58004000 	.word	0x58004000

08001ad4 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001ad8:	f017 ff38 	bl	801994c <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001aea:	f7ff fa8d 	bl	8001008 <SYS_GetBatteryLevel>
 8001aee:	4603      	mov	r3, r0
 8001af0:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001af2:	88bb      	ldrh	r3, [r7, #4]
 8001af4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d902      	bls.n	8001b02 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001afc:	23fe      	movs	r3, #254	; 0xfe
 8001afe:	71fb      	strb	r3, [r7, #7]
 8001b00:	e014      	b.n	8001b2c <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001b02:	88bb      	ldrh	r3, [r7, #4]
 8001b04:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001b08:	d202      	bcs.n	8001b10 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	71fb      	strb	r3, [r7, #7]
 8001b0e:	e00d      	b.n	8001b2c <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001b10:	88bb      	ldrh	r3, [r7, #4]
 8001b12:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001b16:	461a      	mov	r2, r3
 8001b18:	4613      	mov	r3, r2
 8001b1a:	01db      	lsls	r3, r3, #7
 8001b1c:	1a9b      	subs	r3, r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <GetBatteryLevel+0x58>)
 8001b24:	fba3 2302 	umull	r2, r3, r3, r2
 8001b28:	09db      	lsrs	r3, r3, #7
 8001b2a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	1b4e81b5 	.word	0x1b4e81b5

08001b3c <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 f9a1 	bl	8001e90 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe ffe3 	bl	8000b1c <__aeabi_f2iz>
 8001b56:	4603      	mov	r3, r0
 8001b58:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001b5a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3720      	adds	r7, #32
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001b66:	b590      	push	{r4, r7, lr}
 8001b68:	b087      	sub	sp, #28
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001b72:	f7ff ff5f 	bl	8001a34 <LL_FLASH_GetUDN>
 8001b76:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7e:	d138      	bne.n	8001bf2 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001b80:	f000 ffe0 	bl	8002b44 <HAL_GetUIDw0>
 8001b84:	4604      	mov	r4, r0
 8001b86:	f000 fff1 	bl	8002b6c <HAL_GetUIDw2>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4423      	add	r3, r4
 8001b8e:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001b90:	f000 ffe2 	bl	8002b58 <HAL_GetUIDw1>
 8001b94:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	0e1a      	lsrs	r2, r3, #24
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3307      	adds	r3, #7
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	0c1a      	lsrs	r2, r3, #16
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3306      	adds	r3, #6
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	0a1a      	lsrs	r2, r3, #8
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3305      	adds	r3, #5
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	0e1a      	lsrs	r2, r3, #24
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3303      	adds	r3, #3
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	0c1a      	lsrs	r2, r3, #16
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	0a1a      	lsrs	r2, r3, #8
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3301      	adds	r3, #1
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001bf0:	e031      	b.n	8001c56 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3307      	adds	r3, #7
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	0a1a      	lsrs	r2, r3, #8
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3306      	adds	r3, #6
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	0c1a      	lsrs	r2, r3, #16
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3305      	adds	r3, #5
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	0e1a      	lsrs	r2, r3, #24
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001c20:	f7ff ff12 	bl	8001a48 <LL_FLASH_GetDeviceID>
 8001c24:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3303      	adds	r3, #3
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001c30:	f7ff ff16 	bl	8001a60 <LL_FLASH_GetSTCompanyID>
 8001c34:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3302      	adds	r3, #2
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	0a1a      	lsrs	r2, r3, #8
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3301      	adds	r3, #1
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	0c1b      	lsrs	r3, r3, #16
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	701a      	strb	r2, [r3, #0]
}
 8001c56:	bf00      	nop
 8001c58:	371c      	adds	r7, #28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd90      	pop	{r4, r7, pc}

08001c5e <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001c5e:	b590      	push	{r4, r7, lr}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001c68:	f7ff fee4 	bl	8001a34 <LL_FLASH_GetUDN>
 8001c6c:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c74:	d10b      	bne.n	8001c8e <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001c76:	f000 ff65 	bl	8002b44 <HAL_GetUIDw0>
 8001c7a:	4604      	mov	r4, r0
 8001c7c:	f000 ff6c 	bl	8002b58 <HAL_GetUIDw1>
 8001c80:	4603      	mov	r3, r0
 8001c82:	405c      	eors	r4, r3
 8001c84:	f000 ff72 	bl	8002b6c <HAL_GetUIDw2>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4063      	eors	r3, r4
 8001c8c:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001c8e:	687b      	ldr	r3, [r7, #4]

}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd90      	pop	{r4, r7, pc}

08001c98 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af02      	add	r7, sp, #8
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001ca2:	f107 0308 	add.w	r3, r7, #8
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f017 ff60 	bl	8019b6c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001cb2:	9200      	str	r2, [sp, #0]
 8001cb4:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <TimestampNow+0x3c>)
 8001cb6:	2110      	movs	r1, #16
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f81d 	bl	8001cf8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7fe fa5a 	bl	8000178 <strlen>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001ccc:	bf00      	nop
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	0801b0b8 	.word	0x0801b0b8

08001cd8 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001cdc:	2101      	movs	r1, #1
 8001cde:	2002      	movs	r0, #2
 8001ce0:	f017 fdd4 	bl	801988c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001cec:	2100      	movs	r1, #0
 8001cee:	2002      	movs	r0, #2
 8001cf0:	f017 fdcc 	bl	801988c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001cf8:	b40c      	push	{r2, r3}
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001d04:	f107 031c 	add.w	r3, r7, #28
 8001d08:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001d0a:	6839      	ldr	r1, [r7, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f018 f8fd 	bl	8019f10 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d20:	b002      	add	sp, #8
 8001d22:	4770      	bx	lr

08001d24 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_GetTick+0x24>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001d4a:	f000 f997 	bl	800207c <TIMER_IF_GetTimerValue>
 8001d4e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001d50:	687b      	ldr	r3, [r7, #4]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000210 	.word	0x20000210

08001d60 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 fa0d 	bl	800218a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <LL_AHB2_GRP1_EnableClock>:
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
}
 8001d9e:	bf00      	nop
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <LL_EXTI_EnableIT_32_63+0x24>)
 8001db2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001db6:	4905      	ldr	r1, [pc, #20]	; (8001dcc <LL_EXTI_EnableIT_32_63+0x24>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	58000800 	.word	0x58000800

08001dd0 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8001dd6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001dda:	f7ff ffe5 	bl	8001da8 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001dde:	f000 fecf 	bl	8002b80 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001de2:	f000 fed3 	bl	8002b8c <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8001de6:	f000 fed7 	bl	8002b98 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e00:	2303      	movs	r3, #3
 8001e02:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8001e04:	2001      	movs	r0, #1
 8001e06:	f7ff ffb7 	bl	8001d78 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8001e0a:	2002      	movs	r0, #2
 8001e0c:	f7ff ffb4 	bl	8001d78 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8001e10:	2002      	movs	r0, #2
 8001e12:	f7ff ffb1 	bl	8001d78 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8001e16:	2002      	movs	r0, #2
 8001e18:	f7ff ffae 	bl	8001d78 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	4619      	mov	r1, r3
 8001e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e28:	f002 ff28 	bl	8004c7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e30:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	4619      	mov	r1, r3
 8001e36:	4815      	ldr	r0, [pc, #84]	; (8001e8c <DBG_Init+0xbc>)
 8001e38:	f002 ff20 	bl	8004c7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8001e3c:	2308      	movs	r3, #8
 8001e3e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	4619      	mov	r1, r3
 8001e44:	4811      	ldr	r0, [pc, #68]	; (8001e8c <DBG_Init+0xbc>)
 8001e46:	f002 ff19 	bl	8004c7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8001e4a:	2310      	movs	r3, #16
 8001e4c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	4619      	mov	r1, r3
 8001e52:	480e      	ldr	r0, [pc, #56]	; (8001e8c <DBG_Init+0xbc>)
 8001e54:	f002 ff12 	bl	8004c7c <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e60:	f003 f93a 	bl	80050d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001e64:	2200      	movs	r2, #0
 8001e66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e6a:	4808      	ldr	r0, [pc, #32]	; (8001e8c <DBG_Init+0xbc>)
 8001e6c:	f003 f934 	bl	80050d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2108      	movs	r1, #8
 8001e74:	4805      	ldr	r0, [pc, #20]	; (8001e8c <DBG_Init+0xbc>)
 8001e76:	f003 f92f 	bl	80050d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2110      	movs	r1, #16
 8001e7e:	4803      	ldr	r0, [pc, #12]	; (8001e8c <DBG_Init+0xbc>)
 8001e80:	f003 f92a 	bl	80050d8 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001e84:	bf00      	nop
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	48000400 	.word	0x48000400

08001e90 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001e98:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <EnvSensors_Read+0x40>)
 8001e9a:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <EnvSensors_Read+0x44>)
 8001e9e:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001ea0:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <EnvSensors_Read+0x48>)
 8001ea2:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a08      	ldr	r2, [pc, #32]	; (8001edc <EnvSensors_Read+0x4c>)
 8001eba:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <EnvSensors_Read+0x50>)
 8001ec0:	611a      	str	r2, [r3, #16]

  return 0;
 8001ec2:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	371c      	adds	r7, #28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	42480000 	.word	0x42480000
 8001ed4:	41900000 	.word	0x41900000
 8001ed8:	447a0000 	.word	0x447a0000
 8001edc:	003e090d 	.word	0x003e090d
 8001ee0:	000503ab 	.word	0x000503ab

08001ee4 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8001eee:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr

08001efa <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001efe:	bf00      	nop
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001f26:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <TIMER_IF_Init+0x5c>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	f083 0301 	eor.w	r3, r3, #1
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d01b      	beq.n	8001f6c <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <TIMER_IF_Init+0x60>)
 8001f36:	f04f 32ff 	mov.w	r2, #4294967295
 8001f3a:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001f3c:	f7ff fbe6 	bl	800170c <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001f40:	f000 f856 	bl	8001ff0 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001f44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f48:	480c      	ldr	r0, [pc, #48]	; (8001f7c <TIMER_IF_Init+0x60>)
 8001f4a:	f004 fe1f 	bl	8006b8c <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <TIMER_IF_Init+0x60>)
 8001f50:	f04f 32ff 	mov.w	r2, #4294967295
 8001f54:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001f56:	4809      	ldr	r0, [pc, #36]	; (8001f7c <TIMER_IF_Init+0x60>)
 8001f58:	f004 ff56 	bl	8006e08 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f000 f9d3 	bl	8002308 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001f62:	f000 f85f 	bl	8002024 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001f66:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <TIMER_IF_Init+0x5c>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000211 	.word	0x20000211
 8001f7c:	200001cc 	.word	0x200001cc

08001f80 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08e      	sub	sp, #56	; 0x38
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001f8e:	f107 0308 	add.w	r3, r7, #8
 8001f92:	222c      	movs	r2, #44	; 0x2c
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f018 fffa 	bl	801af90 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001f9c:	f000 f828 	bl	8001ff0 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <TIMER_IF_StartTimer+0x68>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001fb8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001fbc:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fc2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001fc4:	f107 0308 	add.w	r3, r7, #8
 8001fc8:	2201      	movs	r2, #1
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4807      	ldr	r0, [pc, #28]	; (8001fec <TIMER_IF_StartTimer+0x6c>)
 8001fce:	f004 fcd1 	bl	8006974 <HAL_RTC_SetAlarm_IT>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001fd8:	f7ff fb6a 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001fdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3738      	adds	r7, #56	; 0x38
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000214 	.word	0x20000214
 8001fec:	200001cc 	.word	0x200001cc

08001ff0 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <TIMER_IF_StopTimer+0x2c>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002000:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002004:	4806      	ldr	r0, [pc, #24]	; (8002020 <TIMER_IF_StopTimer+0x30>)
 8002006:	f004 fdc1 	bl	8006b8c <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <TIMER_IF_StopTimer+0x30>)
 800200c:	f04f 32ff 	mov.w	r2, #4294967295
 8002010:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002012:	79fb      	ldrb	r3, [r7, #7]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40002800 	.word	0x40002800
 8002020:	200001cc 	.word	0x200001cc

08002024 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002028:	f000 f98e 	bl	8002348 <GetTimerTicks>
 800202c:	4603      	mov	r3, r0
 800202e:	4a03      	ldr	r2, [pc, #12]	; (800203c <TIMER_IF_SetTimerContext+0x18>)
 8002030:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002032:	4b02      	ldr	r3, [pc, #8]	; (800203c <TIMER_IF_SetTimerContext+0x18>)
 8002034:	681b      	ldr	r3, [r3, #0]
}
 8002036:	4618      	mov	r0, r3
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000214 	.word	0x20000214

08002040 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002044:	4b02      	ldr	r3, [pc, #8]	; (8002050 <TIMER_IF_GetTimerContext+0x10>)
 8002046:	681b      	ldr	r3, [r3, #0]
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr
 8002050:	20000214 	.word	0x20000214

08002054 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800205e:	f000 f973 	bl	8002348 <GetTimerTicks>
 8002062:	4602      	mov	r2, r0
 8002064:	4b04      	ldr	r3, [pc, #16]	; (8002078 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 800206c:	687b      	ldr	r3, [r7, #4]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000214 	.word	0x20000214

0800207c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <TIMER_IF_GetTimerValue+0x24>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800208e:	f000 f95b 	bl	8002348 <GetTimerTicks>
 8002092:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002094:	687b      	ldr	r3, [r7, #4]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000211 	.word	0x20000211

080020a4 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80020ae:	2303      	movs	r3, #3
 80020b0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80020b2:	687b      	ldr	r3, [r7, #4]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr

080020be <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80020be:	b5b0      	push	{r4, r5, r7, lr}
 80020c0:	b084      	sub	sp, #16
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80020c6:	2100      	movs	r1, #0
 80020c8:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	2000      	movs	r0, #0
 80020ce:	460a      	mov	r2, r1
 80020d0:	4603      	mov	r3, r0
 80020d2:	0d95      	lsrs	r5, r2, #22
 80020d4:	0294      	lsls	r4, r2, #10
 80020d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	4620      	mov	r0, r4
 80020e0:	4629      	mov	r1, r5
 80020e2:	f7fe fd61 	bl	8000ba8 <__aeabi_uldivmod>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4613      	mov	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bdb0      	pop	{r4, r5, r7, pc}

080020f8 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80020f8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80020fc:	b085      	sub	sp, #20
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002102:	2100      	movs	r1, #0
 8002104:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	2000      	movs	r0, #0
 800210a:	460c      	mov	r4, r1
 800210c:	4605      	mov	r5, r0
 800210e:	4620      	mov	r0, r4
 8002110:	4629      	mov	r1, r5
 8002112:	f04f 0a00 	mov.w	sl, #0
 8002116:	f04f 0b00 	mov.w	fp, #0
 800211a:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800211e:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002122:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002126:	4650      	mov	r0, sl
 8002128:	4659      	mov	r1, fp
 800212a:	1b02      	subs	r2, r0, r4
 800212c:	eb61 0305 	sbc.w	r3, r1, r5
 8002130:	f04f 0000 	mov.w	r0, #0
 8002134:	f04f 0100 	mov.w	r1, #0
 8002138:	0099      	lsls	r1, r3, #2
 800213a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800213e:	0090      	lsls	r0, r2, #2
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	eb12 0804 	adds.w	r8, r2, r4
 8002148:	eb43 0905 	adc.w	r9, r3, r5
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002158:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800215c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002160:	4690      	mov	r8, r2
 8002162:	4699      	mov	r9, r3
 8002164:	4640      	mov	r0, r8
 8002166:	4649      	mov	r1, r9
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	0a82      	lsrs	r2, r0, #10
 8002172:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002176:	0a8b      	lsrs	r3, r1, #10
 8002178:	4613      	mov	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 800217c:	68fb      	ldr	r3, [r7, #12]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002188:	4770      	bx	lr

0800218a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ff93 	bl	80020be <TIMER_IF_Convert_ms2Tick>
 8002198:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 800219a:	f000 f8d5 	bl	8002348 <GetTimerTicks>
 800219e:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80021a0:	e000      	b.n	80021a4 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 80021a2:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80021a4:	f000 f8d0 	bl	8002348 <GetTimerTicks>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d8f6      	bhi.n	80021a2 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80021c6:	f018 fad7 	bl	801a778 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80021da:	f000 f8a5 	bl	8002328 <TIMER_IF_BkUp_Read_MSBticks>
 80021de:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3301      	adds	r3, #1
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 f88f 	bl	8002308 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80021ea:	bf00      	nop
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80021f2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021f6:	b08c      	sub	sp, #48	; 0x30
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002200:	f000 f8a2 	bl	8002348 <GetTimerTicks>
 8002204:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002206:	f000 f88f 	bl	8002328 <TIMER_IF_BkUp_Read_MSBticks>
 800220a:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	2200      	movs	r2, #0
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	60fa      	str	r2, [r7, #12]
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	000b      	movs	r3, r1
 8002220:	2200      	movs	r2, #0
 8002222:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002224:	2000      	movs	r0, #0
 8002226:	460c      	mov	r4, r1
 8002228:	4605      	mov	r5, r0
 800222a:	eb12 0804 	adds.w	r8, r2, r4
 800222e:	eb43 0905 	adc.w	r9, r3, r5
 8002232:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002236:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	0a82      	lsrs	r2, r0, #10
 8002244:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002248:	0a8b      	lsrs	r3, r1, #10
 800224a:	4613      	mov	r3, r2
 800224c:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2200      	movs	r2, #0
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	607a      	str	r2, [r7, #4]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800225c:	f04f 0b00 	mov.w	fp, #0
 8002260:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ff46 	bl	80020f8 <TIMER_IF_Convert_Tick2ms>
 800226c:	4603      	mov	r3, r0
 800226e:	b29a      	uxth	r2, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002276:	4618      	mov	r0, r3
 8002278:	3730      	adds	r7, #48	; 0x30
 800227a:	46bd      	mov	sp, r7
 800227c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002280 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	2100      	movs	r1, #0
 800228c:	4803      	ldr	r0, [pc, #12]	; (800229c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800228e:	f004 fe4d 	bl	8006f2c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200001cc 	.word	0x200001cc

080022a0 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	2101      	movs	r1, #1
 80022ac:	4803      	ldr	r0, [pc, #12]	; (80022bc <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80022ae:	f004 fe3d 	bl	8006f2c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200001cc 	.word	0x200001cc

080022c0 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80022ca:	2100      	movs	r1, #0
 80022cc:	4804      	ldr	r0, [pc, #16]	; (80022e0 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80022ce:	f004 fe45 	bl	8006f5c <HAL_RTCEx_BKUPRead>
 80022d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80022d4:	687b      	ldr	r3, [r7, #4]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200001cc 	.word	0x200001cc

080022e4 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80022ee:	2101      	movs	r1, #1
 80022f0:	4804      	ldr	r0, [pc, #16]	; (8002304 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80022f2:	f004 fe33 	bl	8006f5c <HAL_RTCEx_BKUPRead>
 80022f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80022f8:	687b      	ldr	r3, [r7, #4]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200001cc 	.word	0x200001cc

08002308 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	2102      	movs	r1, #2
 8002314:	4803      	ldr	r0, [pc, #12]	; (8002324 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002316:	f004 fe09 	bl	8006f2c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	200001cc 	.word	0x200001cc

08002328 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800232e:	2102      	movs	r1, #2
 8002330:	4804      	ldr	r0, [pc, #16]	; (8002344 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002332:	f004 fe13 	bl	8006f5c <HAL_RTCEx_BKUPRead>
 8002336:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002338:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	200001cc 	.word	0x200001cc

08002348 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800234e:	480b      	ldr	r0, [pc, #44]	; (800237c <GetTimerTicks+0x34>)
 8002350:	f7ff fdd9 	bl	8001f06 <LL_RTC_TIME_GetSubSecond>
 8002354:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002356:	e003      	b.n	8002360 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002358:	4808      	ldr	r0, [pc, #32]	; (800237c <GetTimerTicks+0x34>)
 800235a:	f7ff fdd4 	bl	8001f06 <LL_RTC_TIME_GetSubSecond>
 800235e:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002360:	4806      	ldr	r0, [pc, #24]	; (800237c <GetTimerTicks+0x34>)
 8002362:	f7ff fdd0 	bl	8001f06 <LL_RTC_TIME_GetSubSecond>
 8002366:	4602      	mov	r2, r0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4293      	cmp	r3, r2
 800236c:	d1f4      	bne.n	8002358 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40002800 	.word	0x40002800

08002380 <LL_AHB2_GRP1_EnableClock>:
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800238e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4313      	orrs	r3, r2
 8002396:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800239c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4013      	ands	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023a4:	68fb      	ldr	r3, [r7, #12]
}
 80023a6:	bf00      	nop
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <LL_APB2_GRP1_EnableClock>:
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80023b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80023c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4013      	ands	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023d4:	68fb      	ldr	r3, [r7, #12]
}
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <LL_APB2_GRP1_DisableClock>:
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80023e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023f6:	4013      	ands	r3, r2
 80023f8:	660b      	str	r3, [r1, #96]	; 0x60
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <LL_SYSCFG_EnableFastModePlus>:
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <LL_SYSCFG_EnableFastModePlus+0x20>)
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	4904      	ldr	r1, [pc, #16]	; (8002424 <LL_SYSCFG_EnableFastModePlus+0x20>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4313      	orrs	r3, r2
 8002416:	604b      	str	r3, [r1, #4]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40010000 	.word	0x40010000

08002428 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800242c:	4b26      	ldr	r3, [pc, #152]	; (80024c8 <MX_USART1_UART_Init+0xa0>)
 800242e:	4a27      	ldr	r2, [pc, #156]	; (80024cc <MX_USART1_UART_Init+0xa4>)
 8002430:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002432:	4b25      	ldr	r3, [pc, #148]	; (80024c8 <MX_USART1_UART_Init+0xa0>)
 8002434:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002438:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800243a:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <MX_USART1_UART_Init+0xa0>)
 800243c:	2200      	movs	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002440:	4b21      	ldr	r3, [pc, #132]	; (80024c8 <MX_USART1_UART_Init+0xa0>)
 8002442:	2200      	movs	r2, #0
 8002444:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002446:	4b20      	ldr	r3, [pc, #128]	; (80024c8 <MX_USART1_UART_Init+0xa0>)
 8002448:	2200      	movs	r2, #0
 800244a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800244c:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <MX_USART1_UART_Init+0xa0>)
 800244e:	220c      	movs	r2, #12
 8002450:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002452:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <MX_USART1_UART_Init+0xa0>)
 8002454:	2200      	movs	r2, #0
 8002456:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002458:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <MX_USART1_UART_Init+0xa0>)
 800245a:	2200      	movs	r2, #0
 800245c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800245e:	4b1a      	ldr	r3, [pc, #104]	; (80024c8 <MX_USART1_UART_Init+0xa0>)
 8002460:	2200      	movs	r2, #0
 8002462:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002464:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <MX_USART1_UART_Init+0xa0>)
 8002466:	2200      	movs	r2, #0
 8002468:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 800246a:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <MX_USART1_UART_Init+0xa0>)
 800246c:	2240      	movs	r2, #64	; 0x40
 800246e:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8002470:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <MX_USART1_UART_Init+0xa0>)
 8002472:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002476:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 8002478:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <MX_USART1_UART_Init+0xa0>)
 800247a:	2200      	movs	r2, #0
 800247c:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800247e:	4812      	ldr	r0, [pc, #72]	; (80024c8 <MX_USART1_UART_Init+0xa0>)
 8002480:	f005 fa57 	bl	8007932 <HAL_UART_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 800248a:	f7ff f911 	bl	80016b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800248e:	2100      	movs	r1, #0
 8002490:	480d      	ldr	r0, [pc, #52]	; (80024c8 <MX_USART1_UART_Init+0xa0>)
 8002492:	f007 face 	bl	8009a32 <HAL_UARTEx_SetTxFifoThreshold>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 800249c:	f7ff f908 	bl	80016b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024a0:	2100      	movs	r1, #0
 80024a2:	4809      	ldr	r0, [pc, #36]	; (80024c8 <MX_USART1_UART_Init+0xa0>)
 80024a4:	f007 fb03 	bl	8009aae <HAL_UARTEx_SetRxFifoThreshold>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80024ae:	f7ff f8ff 	bl	80016b0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80024b2:	4805      	ldr	r0, [pc, #20]	; (80024c8 <MX_USART1_UART_Init+0xa0>)
 80024b4:	f007 fa82 	bl	80099bc <HAL_UARTEx_EnableFifoMode>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 80024be:	f7ff f8f7 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000218 	.word	0x20000218
 80024cc:	40013800 	.word	0x40013800

080024d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b09a      	sub	sp, #104	; 0x68
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 80024e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	2238      	movs	r2, #56	; 0x38
 80024fc:	2100      	movs	r1, #0
 80024fe:	4618      	mov	r0, r3
 8002500:	f018 fd46 	bl	801af90 <memset>
  if(uartHandle->Instance==USART1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a54      	ldr	r2, [pc, #336]	; (800265c <HAL_UART_MspInit+0x18c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	f040 80a2 	bne.w	8002654 <HAL_UART_MspInit+0x184>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002510:	2301      	movs	r3, #1
 8002512:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002514:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002518:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800251a:	f107 030c 	add.w	r3, r7, #12
 800251e:	4618      	mov	r0, r3
 8002520:	f004 f894 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 800252a:	f7ff f8c1 	bl	80016b0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800252e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002532:	f7ff ff3d 	bl	80023b0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002536:	2002      	movs	r0, #2
 8002538:	f7ff ff22 	bl	8002380 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 800253c:	23c0      	movs	r3, #192	; 0xc0
 800253e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002540:	2302      	movs	r3, #2
 8002542:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002544:	2301      	movs	r3, #1
 8002546:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002548:	2303      	movs	r3, #3
 800254a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800254c:	2307      	movs	r3, #7
 800254e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002550:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002554:	4619      	mov	r1, r3
 8002556:	4842      	ldr	r0, [pc, #264]	; (8002660 <HAL_UART_MspInit+0x190>)
 8002558:	f002 fb90 	bl	8004c7c <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 800255c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002560:	f7ff ff50 	bl	8002404 <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8002564:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002568:	f7ff ff4c 	bl	8002404 <LL_SYSCFG_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 800256c:	4b3d      	ldr	r3, [pc, #244]	; (8002664 <HAL_UART_MspInit+0x194>)
 800256e:	4a3e      	ldr	r2, [pc, #248]	; (8002668 <HAL_UART_MspInit+0x198>)
 8002570:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002572:	4b3c      	ldr	r3, [pc, #240]	; (8002664 <HAL_UART_MspInit+0x194>)
 8002574:	2212      	movs	r2, #18
 8002576:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002578:	4b3a      	ldr	r3, [pc, #232]	; (8002664 <HAL_UART_MspInit+0x194>)
 800257a:	2210      	movs	r2, #16
 800257c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800257e:	4b39      	ldr	r3, [pc, #228]	; (8002664 <HAL_UART_MspInit+0x194>)
 8002580:	2200      	movs	r2, #0
 8002582:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002584:	4b37      	ldr	r3, [pc, #220]	; (8002664 <HAL_UART_MspInit+0x194>)
 8002586:	2280      	movs	r2, #128	; 0x80
 8002588:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800258a:	4b36      	ldr	r3, [pc, #216]	; (8002664 <HAL_UART_MspInit+0x194>)
 800258c:	2200      	movs	r2, #0
 800258e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002590:	4b34      	ldr	r3, [pc, #208]	; (8002664 <HAL_UART_MspInit+0x194>)
 8002592:	2200      	movs	r2, #0
 8002594:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002596:	4b33      	ldr	r3, [pc, #204]	; (8002664 <HAL_UART_MspInit+0x194>)
 8002598:	2200      	movs	r2, #0
 800259a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800259c:	4b31      	ldr	r3, [pc, #196]	; (8002664 <HAL_UART_MspInit+0x194>)
 800259e:	2200      	movs	r2, #0
 80025a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80025a2:	4830      	ldr	r0, [pc, #192]	; (8002664 <HAL_UART_MspInit+0x194>)
 80025a4:	f001 fc8c 	bl	8003ec0 <HAL_DMA_Init>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 80025ae:	f7ff f87f 	bl	80016b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a2b      	ldr	r2, [pc, #172]	; (8002664 <HAL_UART_MspInit+0x194>)
 80025b6:	679a      	str	r2, [r3, #120]	; 0x78
 80025b8:	4a2a      	ldr	r2, [pc, #168]	; (8002664 <HAL_UART_MspInit+0x194>)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80025be:	4b2b      	ldr	r3, [pc, #172]	; (800266c <HAL_UART_MspInit+0x19c>)
 80025c0:	4a2b      	ldr	r2, [pc, #172]	; (8002670 <HAL_UART_MspInit+0x1a0>)
 80025c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80025c4:	4b29      	ldr	r3, [pc, #164]	; (800266c <HAL_UART_MspInit+0x19c>)
 80025c6:	2211      	movs	r2, #17
 80025c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025ca:	4b28      	ldr	r3, [pc, #160]	; (800266c <HAL_UART_MspInit+0x19c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025d0:	4b26      	ldr	r3, [pc, #152]	; (800266c <HAL_UART_MspInit+0x19c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025d6:	4b25      	ldr	r3, [pc, #148]	; (800266c <HAL_UART_MspInit+0x19c>)
 80025d8:	2280      	movs	r2, #128	; 0x80
 80025da:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025dc:	4b23      	ldr	r3, [pc, #140]	; (800266c <HAL_UART_MspInit+0x19c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025e2:	4b22      	ldr	r3, [pc, #136]	; (800266c <HAL_UART_MspInit+0x19c>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80025e8:	4b20      	ldr	r3, [pc, #128]	; (800266c <HAL_UART_MspInit+0x19c>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025ee:	4b1f      	ldr	r3, [pc, #124]	; (800266c <HAL_UART_MspInit+0x19c>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80025f4:	481d      	ldr	r0, [pc, #116]	; (800266c <HAL_UART_MspInit+0x19c>)
 80025f6:	f001 fc63 	bl	8003ec0 <HAL_DMA_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 8002600:	f7ff f856 	bl	80016b0 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8002604:	2300      	movs	r3, #0
 8002606:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8002608:	2300      	movs	r3, #0
 800260a:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 800260c:	2300      	movs	r3, #0
 800260e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 8002612:	2301      	movs	r3, #1
 8002614:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 8002618:	2301      	movs	r3, #1
 800261a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 800261c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002620:	4619      	mov	r1, r3
 8002622:	4812      	ldr	r0, [pc, #72]	; (800266c <HAL_UART_MspInit+0x19c>)
 8002624:	f002 f836 	bl	8004694 <HAL_DMAEx_ConfigMuxSync>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 800262e:	f7ff f83f 	bl	80016b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a0d      	ldr	r2, [pc, #52]	; (800266c <HAL_UART_MspInit+0x19c>)
 8002636:	67da      	str	r2, [r3, #124]	; 0x7c
 8002638:	4a0c      	ldr	r2, [pc, #48]	; (800266c <HAL_UART_MspInit+0x19c>)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800263e:	2200      	movs	r2, #0
 8002640:	2102      	movs	r1, #2
 8002642:	2024      	movs	r0, #36	; 0x24
 8002644:	f001 fc05 	bl	8003e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002648:	2024      	movs	r0, #36	; 0x24
 800264a:	f001 fc1c 	bl	8003e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800264e:	200c      	movs	r0, #12
 8002650:	f001 fc19 	bl	8003e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002654:	bf00      	nop
 8002656:	3768      	adds	r7, #104	; 0x68
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40013800 	.word	0x40013800
 8002660:	48000400 	.word	0x48000400
 8002664:	200002a8 	.word	0x200002a8
 8002668:	40020008 	.word	0x40020008
 800266c:	20000308 	.word	0x20000308
 8002670:	4002001c 	.word	0x4002001c

08002674 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0d      	ldr	r2, [pc, #52]	; (80026b8 <HAL_UART_MspDeInit+0x44>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d114      	bne.n	80026b0 <HAL_UART_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002686:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800268a:	f7ff fea9 	bl	80023e0 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 800268e:	21c0      	movs	r1, #192	; 0xc0
 8002690:	480a      	ldr	r0, [pc, #40]	; (80026bc <HAL_UART_MspDeInit+0x48>)
 8002692:	f002 fc53 	bl	8004f3c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800269a:	4618      	mov	r0, r3
 800269c:	f001 fcb8 	bl	8004010 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026a4:	4618      	mov	r0, r3
 80026a6:	f001 fcb3 	bl	8004010 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80026aa:	2024      	movs	r0, #36	; 0x24
 80026ac:	f001 fbf9 	bl	8003ea2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40013800 	.word	0x40013800
 80026bc:	48000400 	.word	0x48000400

080026c0 <LL_APB2_GRP1_ForceReset>:
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80026c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	640b      	str	r3, [r1, #64]	; 0x40
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <LL_APB2_GRP1_ReleaseReset>:
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80026ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026f8:	4013      	ands	r3, r2
 80026fa:	640b      	str	r3, [r1, #64]	; 0x40
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
	...

08002708 <LL_EXTI_EnableIT_0_31>:
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <LL_EXTI_EnableIT_0_31+0x24>)
 8002712:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002716:	4905      	ldr	r1, [pc, #20]	; (800272c <LL_EXTI_EnableIT_0_31+0x24>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	58000800 	.word	0x58000800

08002730 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002738:	4a07      	ldr	r2, [pc, #28]	; (8002758 <vcom_Init+0x28>)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800273e:	f7fe fcf5 	bl	800112c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002742:	f7ff fe71 	bl	8002428 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8002746:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800274a:	f7ff ffdd 	bl	8002708 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800274e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	2000036c 	.word	0x2000036c

0800275c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002760:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002764:	f7ff ffac 	bl	80026c0 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002768:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800276c:	f7ff ffb9 	bl	80026e2 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002770:	4804      	ldr	r0, [pc, #16]	; (8002784 <vcom_DeInit+0x28>)
 8002772:	f7ff ff7f 	bl	8002674 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002776:	200f      	movs	r0, #15
 8002778:	f001 fb93 	bl	8003ea2 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 800277c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800277e:	4618      	mov	r0, r3
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000218 	.word	0x20000218

08002788 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002794:	887b      	ldrh	r3, [r7, #2]
 8002796:	461a      	mov	r2, r3
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4804      	ldr	r0, [pc, #16]	; (80027ac <vcom_Trace_DMA+0x24>)
 800279c:	f005 f970 	bl	8007a80 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80027a0:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000218 	.word	0x20000218

080027b0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80027b8:	4a19      	ldr	r2, [pc, #100]	; (8002820 <vcom_ReceiveInit+0x70>)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80027be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027c2:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 80027c4:	f107 0308 	add.w	r3, r7, #8
 80027c8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80027cc:	4815      	ldr	r0, [pc, #84]	; (8002824 <vcom_ReceiveInit+0x74>)
 80027ce:	f007 f868 	bl	80098a2 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80027d2:	bf00      	nop
 80027d4:	4b13      	ldr	r3, [pc, #76]	; (8002824 <vcom_ReceiveInit+0x74>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e2:	d0f7      	beq.n	80027d4 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80027e4:	bf00      	nop
 80027e6:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <vcom_ReceiveInit+0x74>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027f4:	d1f7      	bne.n	80027e6 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80027f6:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <vcom_ReceiveInit+0x74>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	4b09      	ldr	r3, [pc, #36]	; (8002824 <vcom_ReceiveInit+0x74>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002804:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002806:	4807      	ldr	r0, [pc, #28]	; (8002824 <vcom_ReceiveInit+0x74>)
 8002808:	f007 f8a6 	bl	8009958 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 800280c:	2201      	movs	r2, #1
 800280e:	4906      	ldr	r1, [pc, #24]	; (8002828 <vcom_ReceiveInit+0x78>)
 8002810:	4804      	ldr	r0, [pc, #16]	; (8002824 <vcom_ReceiveInit+0x74>)
 8002812:	f005 f8df 	bl	80079d4 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002816:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20000370 	.word	0x20000370
 8002824:	20000218 	.word	0x20000218
 8002828:	20000368 	.word	0x20000368

0800282c <vcom_Resume>:

void vcom_Resume(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002830:	4808      	ldr	r0, [pc, #32]	; (8002854 <vcom_Resume+0x28>)
 8002832:	f005 f87e 	bl	8007932 <HAL_UART_Init>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <vcom_Resume+0x14>
  {
    Error_Handler();
 800283c:	f7fe ff38 	bl	80016b0 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002840:	4805      	ldr	r0, [pc, #20]	; (8002858 <vcom_Resume+0x2c>)
 8002842:	f001 fb3d 	bl	8003ec0 <HAL_DMA_Init>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <vcom_Resume+0x24>
  {
    Error_Handler();
 800284c:	f7fe ff30 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20000218 	.word	0x20000218
 8002858:	200002a8 	.word	0x200002a8

0800285c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a05      	ldr	r2, [pc, #20]	; (8002880 <HAL_UART_TxCpltCallback+0x24>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d103      	bne.n	8002876 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800286e:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_UART_TxCpltCallback+0x28>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2000      	movs	r0, #0
 8002874:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40013800 	.word	0x40013800
 8002884:	2000036c 	.word	0x2000036c

08002888 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a0d      	ldr	r2, [pc, #52]	; (80028cc <HAL_UART_RxCpltCallback+0x44>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d113      	bne.n	80028c2 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800289a:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <HAL_UART_RxCpltCallback+0x48>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HAL_UART_RxCpltCallback+0x30>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d105      	bne.n	80028b8 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <HAL_UART_RxCpltCallback+0x48>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2200      	movs	r2, #0
 80028b2:	2101      	movs	r1, #1
 80028b4:	4807      	ldr	r0, [pc, #28]	; (80028d4 <HAL_UART_RxCpltCallback+0x4c>)
 80028b6:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80028b8:	2201      	movs	r2, #1
 80028ba:	4906      	ldr	r1, [pc, #24]	; (80028d4 <HAL_UART_RxCpltCallback+0x4c>)
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f005 f889 	bl	80079d4 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40013800 	.word	0x40013800
 80028d0:	20000370 	.word	0x20000370
 80028d4:	20000368 	.word	0x20000368

080028d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028d8:	480d      	ldr	r0, [pc, #52]	; (8002910 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028da:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80028dc:	f7ff fb0d 	bl	8001efa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028e0:	480c      	ldr	r0, [pc, #48]	; (8002914 <LoopForever+0x6>)
  ldr r1, =_edata
 80028e2:	490d      	ldr	r1, [pc, #52]	; (8002918 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028e4:	4a0d      	ldr	r2, [pc, #52]	; (800291c <LoopForever+0xe>)
  movs r3, #0
 80028e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e8:	e002      	b.n	80028f0 <LoopCopyDataInit>

080028ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ee:	3304      	adds	r3, #4

080028f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f4:	d3f9      	bcc.n	80028ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028f6:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028f8:	4c0a      	ldr	r4, [pc, #40]	; (8002924 <LoopForever+0x16>)
  movs r3, #0
 80028fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028fc:	e001      	b.n	8002902 <LoopFillZerobss>

080028fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002900:	3204      	adds	r2, #4

08002902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002904:	d3fb      	bcc.n	80028fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002906:	f018 fb1f 	bl	801af48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800290a:	f7fe fe6a 	bl	80015e2 <main>

0800290e <LoopForever>:

LoopForever:
    b LoopForever
 800290e:	e7fe      	b.n	800290e <LoopForever>
  ldr   r0, =_estack
 8002910:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002918:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 800291c:	0801bc10 	.word	0x0801bc10
  ldr r2, =_sbss
 8002920:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8002924:	20002314 	.word	0x20002314

08002928 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002928:	e7fe      	b.n	8002928 <ADC_IRQHandler>

0800292a <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	605a      	str	r2, [r3, #4]
 8002938:	609a      	str	r2, [r3, #8]
 800293a:	60da      	str	r2, [r3, #12]
 800293c:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800293e:	2310      	movs	r3, #16
 8002940:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002942:	2301      	movs	r3, #1
 8002944:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294a:	2303      	movs	r3, #3
 800294c:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800294e:	1d3b      	adds	r3, r7, #4
 8002950:	4619      	mov	r1, r3
 8002952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002956:	f002 f991 	bl	8004c7c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800295a:	2320      	movs	r3, #32
 800295c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800295e:	1d3b      	adds	r3, r7, #4
 8002960:	4619      	mov	r1, r3
 8002962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002966:	f002 f989 	bl	8004c7c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800296a:	2200      	movs	r2, #0
 800296c:	2120      	movs	r1, #32
 800296e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002972:	f002 fbb1 	bl	80050d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002976:	2200      	movs	r2, #0
 8002978:	2110      	movs	r1, #16
 800297a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800297e:	f002 fbab 	bl	80050d8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	2b03      	cmp	r3, #3
 800299a:	d83f      	bhi.n	8002a1c <BSP_RADIO_ConfigRFSwitch+0x90>
 800299c:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800299e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a2:	bf00      	nop
 80029a4:	080029b5 	.word	0x080029b5
 80029a8:	080029cf 	.word	0x080029cf
 80029ac:	080029e9 	.word	0x080029e9
 80029b0:	08002a03 	.word	0x08002a03
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80029b4:	2200      	movs	r2, #0
 80029b6:	2110      	movs	r1, #16
 80029b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029bc:	f002 fb8c 	bl	80050d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80029c0:	2200      	movs	r2, #0
 80029c2:	2120      	movs	r1, #32
 80029c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029c8:	f002 fb86 	bl	80050d8 <HAL_GPIO_WritePin>
      break;      
 80029cc:	e027      	b.n	8002a1e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80029ce:	2201      	movs	r2, #1
 80029d0:	2110      	movs	r1, #16
 80029d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029d6:	f002 fb7f 	bl	80050d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80029da:	2200      	movs	r2, #0
 80029dc:	2120      	movs	r1, #32
 80029de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e2:	f002 fb79 	bl	80050d8 <HAL_GPIO_WritePin>
      break;
 80029e6:	e01a      	b.n	8002a1e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80029e8:	2201      	movs	r2, #1
 80029ea:	2110      	movs	r1, #16
 80029ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029f0:	f002 fb72 	bl	80050d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80029f4:	2201      	movs	r2, #1
 80029f6:	2120      	movs	r1, #32
 80029f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029fc:	f002 fb6c 	bl	80050d8 <HAL_GPIO_WritePin>
      break;
 8002a00:	e00d      	b.n	8002a1e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002a02:	2200      	movs	r2, #0
 8002a04:	2110      	movs	r1, #16
 8002a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a0a:	f002 fb65 	bl	80050d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002a0e:	2201      	movs	r2, #1
 8002a10:	2120      	movs	r1, #32
 8002a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a16:	f002 fb5f 	bl	80050d8 <HAL_GPIO_WritePin>
      break;
 8002a1a:	e000      	b.n	8002a1e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002a1c:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002a2c:	2302      	movs	r3, #2
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002a3a:	2301      	movs	r3, #1
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002a48:	2301      	movs	r3, #1
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr

08002a52 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b085      	sub	sp, #20
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	4603      	mov	r3, r0
 8002a5a:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d102      	bne.n	8002a68 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002a62:	230f      	movs	r3, #15
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	e001      	b.n	8002a6c <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002a68:	2316      	movs	r3, #22
 8002a6a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	4a03      	ldr	r2, [pc, #12]	; (8002a90 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	6053      	str	r3, [r2, #4]
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr
 8002a90:	e0042000 	.word	0xe0042000

08002a94 <LL_DBGMCU_EnableDBGStopMode>:
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4a03      	ldr	r2, [pc, #12]	; (8002aac <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002a9e:	f043 0302 	orr.w	r3, r3, #2
 8002aa2:	6053      	str	r3, [r2, #4]
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	e0042000 	.word	0xe0042000

08002ab0 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002ab4:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4a03      	ldr	r2, [pc, #12]	; (8002ac8 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002aba:	f043 0304 	orr.w	r3, r3, #4
 8002abe:	6053      	str	r3, [r2, #4]
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	e0042000 	.word	0xe0042000

08002acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad6:	2003      	movs	r0, #3
 8002ad8:	f001 f9b0 	bl	8003e3c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002adc:	f003 fbd8 	bl	8006290 <HAL_RCC_GetHCLKFreq>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4a09      	ldr	r2, [pc, #36]	; (8002b08 <HAL_Init+0x3c>)
 8002ae4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ae6:	200f      	movs	r0, #15
 8002ae8:	f7ff f91c 	bl	8001d24 <HAL_InitTick>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d002      	beq.n	8002af8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	71fb      	strb	r3, [r7, #7]
 8002af6:	e001      	b.n	8002afc <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002af8:	f7fe fed1 	bl	800189e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002afc:	79fb      	ldrb	r3, [r7, #7]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000000 	.word	0x20000000

08002b0c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <HAL_SuspendTick+0x18>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a03      	ldr	r2, [pc, #12]	; (8002b24 <HAL_SuspendTick+0x18>)
 8002b16:	f023 0302 	bic.w	r3, r3, #2
 8002b1a:	6013      	str	r3, [r2, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	e000e010 	.word	0xe000e010

08002b28 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002b2c:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <HAL_ResumeTick+0x18>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a03      	ldr	r2, [pc, #12]	; (8002b40 <HAL_ResumeTick+0x18>)
 8002b32:	f043 0302 	orr.w	r3, r3, #2
 8002b36:	6013      	str	r3, [r2, #0]
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	e000e010 	.word	0xe000e010

08002b44 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002b48:	4b02      	ldr	r3, [pc, #8]	; (8002b54 <HAL_GetUIDw0+0x10>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	1fff7590 	.word	0x1fff7590

08002b58 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002b5c:	4b02      	ldr	r3, [pc, #8]	; (8002b68 <HAL_GetUIDw1+0x10>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr
 8002b68:	1fff7594 	.word	0x1fff7594

08002b6c <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002b70:	4b02      	ldr	r3, [pc, #8]	; (8002b7c <HAL_GetUIDw2+0x10>)
 8002b72:	681b      	ldr	r3, [r3, #0]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	1fff7598 	.word	0x1fff7598

08002b80 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002b84:	f7ff ff78 	bl	8002a78 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002b88:	bf00      	nop
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002b90:	f7ff ff80 	bl	8002a94 <LL_DBGMCU_EnableDBGStopMode>
}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8002b9c:	f7ff ff88 	bl	8002ab0 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8002ba0:	bf00      	nop
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	601a      	str	r2, [r3, #0]
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2107      	movs	r1, #7
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	401a      	ands	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr

08002c1e <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	695a      	ldr	r2, [r3, #20]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2107      	movs	r1, #7
 8002c34:	fa01 f303 	lsl.w	r3, r1, r3
 8002c38:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr

08002c4e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr

08002c72 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b085      	sub	sp, #20
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f003 031f 	and.w	r3, r3, #31
 8002c88:	210f      	movs	r1, #15
 8002c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	401a      	ands	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	0e9b      	lsrs	r3, r3, #26
 8002c96:	f003 010f 	and.w	r1, r3, #15
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002cec:	43db      	mvns	r3, r3
 8002cee:	401a      	ands	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b085      	sub	sp, #20
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	021b      	lsls	r3, r3, #8
 8002d12:	43db      	mvns	r3, r3
 8002d14:	401a      	ands	r2, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	0219      	lsls	r1, r3, #8
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	400b      	ands	r3, r1
 8002d1e:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002d22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d26:	431a      	orrs	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002d2c:	bf00      	nop
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr

08002d36 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d46:	f023 0317 	bic.w	r3, r3, #23
 8002d4a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d6c:	f023 0317 	bic.w	r3, r3, #23
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6093      	str	r3, [r2, #8]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr

08002d7e <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d92:	d101      	bne.n	8002d98 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002db4:	f023 0317 	bic.w	r3, r3, #23
 8002db8:	f043 0201 	orr.w	r2, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr

08002dca <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dda:	f023 0317 	bic.w	r3, r3, #23
 8002dde:	f043 0202 	orr.w	r2, r3, #2
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <LL_ADC_IsEnabled+0x18>
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <LL_ADC_IsEnabled+0x1a>
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr

08002e14 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d101      	bne.n	8002e2c <LL_ADC_IsDisableOngoing+0x18>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <LL_ADC_IsDisableOngoing+0x1a>
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e48:	f023 0317 	bic.w	r3, r3, #23
 8002e4c:	f043 0204 	orr.w	r2, r3, #4
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e6e:	f023 0317 	bic.w	r3, r3, #23
 8002e72:	f043 0210 	orr.w	r2, r3, #16
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d101      	bne.n	8002e9c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e19e      	b.n	8003208 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d109      	bne.n	8002eec <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7fe f85f 	bl	8000f9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff ff44 	bl	8002d7e <LL_ADC_IsInternalRegulatorEnabled>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d115      	bne.n	8002f28 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ff18 	bl	8002d36 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f06:	4b99      	ldr	r3, [pc, #612]	; (800316c <HAL_ADC_Init+0x2c4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	099b      	lsrs	r3, r3, #6
 8002f0c:	4a98      	ldr	r2, [pc, #608]	; (8003170 <HAL_ADC_Init+0x2c8>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	099b      	lsrs	r3, r3, #6
 8002f14:	3301      	adds	r3, #1
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f1a:	e002      	b.n	8002f22 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f9      	bne.n	8002f1c <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff ff26 	bl	8002d7e <LL_ADC_IsInternalRegulatorEnabled>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10d      	bne.n	8002f54 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3c:	f043 0210 	orr.w	r2, r3, #16
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f48:	f043 0201 	orr.w	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff ff93 	bl	8002e84 <LL_ADC_REG_IsConversionOngoing>
 8002f5e:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f040 8144 	bne.w	80031f6 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f040 8140 	bne.w	80031f6 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f7e:	f043 0202 	orr.w	r2, r3, #2
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff ff30 	bl	8002df0 <LL_ADC_IsEnabled>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f040 80a7 	bne.w	80030e6 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	7e1b      	ldrb	r3, [r3, #24]
 8002fa0:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002fa2:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	7e5b      	ldrb	r3, [r3, #25]
 8002fa8:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002faa:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	7e9b      	ldrb	r3, [r3, #26]
 8002fb0:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002fb2:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fb8:	2a00      	cmp	r2, #0
 8002fba:	d002      	beq.n	8002fc2 <HAL_ADC_Init+0x11a>
 8002fbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fc0:	e000      	b.n	8002fc4 <HAL_ADC_Init+0x11c>
 8002fc2:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002fc4:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002fca:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	da04      	bge.n	8002fde <HAL_ADC_Init+0x136>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fdc:	e001      	b.n	8002fe2 <HAL_ADC_Init+0x13a>
 8002fde:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8002fe2:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002fea:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002fec:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d114      	bne.n	8003028 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	7e9b      	ldrb	r3, [r3, #26]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d104      	bne.n	8003010 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	e00b      	b.n	8003028 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003014:	f043 0220 	orr.w	r2, r3, #32
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003020:	f043 0201 	orr.w	r2, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	2b00      	cmp	r3, #0
 800302e:	d009      	beq.n	8003044 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800303c:	4313      	orrs	r3, r2
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 800304e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6812      	ldr	r2, [r2, #0]
 8003056:	69b9      	ldr	r1, [r7, #24]
 8003058:	430b      	orrs	r3, r1
 800305a:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003068:	4313      	orrs	r3, r2
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003076:	2b01      	cmp	r3, #1
 8003078:	d111      	bne.n	800309e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003086:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800308c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003092:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	4313      	orrs	r3, r2
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	4b33      	ldr	r3, [pc, #204]	; (8003174 <HAL_ADC_Init+0x2cc>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	6979      	ldr	r1, [r7, #20]
 80030ae:	430b      	orrs	r3, r1
 80030b0:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80030ba:	d014      	beq.n	80030e6 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80030c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c4:	d00f      	beq.n	80030e6 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80030ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030ce:	d00a      	beq.n	80030e6 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80030d0:	4b29      	ldr	r3, [pc, #164]	; (8003178 <HAL_ADC_Init+0x2d0>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80030e0:	4925      	ldr	r1, [pc, #148]	; (8003178 <HAL_ADC_Init+0x2d0>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ee:	461a      	mov	r2, r3
 80030f0:	2100      	movs	r1, #0
 80030f2:	f7ff fd76 	bl	8002be2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fe:	461a      	mov	r2, r3
 8003100:	491e      	ldr	r1, [pc, #120]	; (800317c <HAL_ADC_Init+0x2d4>)
 8003102:	f7ff fd6e 	bl	8002be2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d108      	bne.n	8003120 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f062 020f 	orn	r2, r2, #15
 800311c:	629a      	str	r2, [r3, #40]	; 0x28
 800311e:	e042      	b.n	80031a6 <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003128:	d13d      	bne.n	80031a6 <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	e00c      	b.n	800314a <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	fa22 f303 	lsr.w	r3, r2, r3
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	2b0f      	cmp	r3, #15
 8003142:	d006      	beq.n	8003152 <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	3301      	adds	r3, #1
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b07      	cmp	r3, #7
 800314e:	d9ef      	bls.n	8003130 <HAL_ADC_Init+0x288>
 8003150:	e000      	b.n	8003154 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 8003152:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d112      	bne.n	8003180 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f062 020f 	orn	r2, r2, #15
 8003168:	629a      	str	r2, [r3, #40]	; 0x28
 800316a:	e01c      	b.n	80031a6 <HAL_ADC_Init+0x2fe>
 800316c:	20000000 	.word	0x20000000
 8003170:	053e2d63 	.word	0x053e2d63
 8003174:	1ffffc02 	.word	0x1ffffc02
 8003178:	40012708 	.word	0x40012708
 800317c:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	3b01      	subs	r3, #1
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	f003 031c 	and.w	r3, r3, #28
 8003192:	f06f 020f 	mvn.w	r2, #15
 8003196:	fa02 f103 	lsl.w	r1, r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2100      	movs	r1, #0
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fd36 	bl	8002c1e <LL_ADC_GetSamplingTimeCommonChannels>
 80031b2:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d10b      	bne.n	80031d4 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c6:	f023 0303 	bic.w	r3, r3, #3
 80031ca:	f043 0201 	orr.w	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80031d2:	e018      	b.n	8003206 <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d8:	f023 0312 	bic.w	r3, r3, #18
 80031dc:	f043 0210 	orr.w	r2, r3, #16
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e8:	f043 0201 	orr.w	r2, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80031f4:	e007      	b.n	8003206 <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	f043 0210 	orr.w	r2, r3, #16
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003206:	7ffb      	ldrb	r3, [r7, #31]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3720      	adds	r7, #32
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e06a      	b.n	80032f8 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003226:	f043 0202 	orr.w	r2, r3, #2
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fabe 	bl	80037b0 <ADC_ConversionStop>
 8003234:	4603      	mov	r3, r0
 8003236:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10f      	bne.n	800325e <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fb82 	bl	8003948 <ADC_Disable>
 8003244:	4603      	mov	r3, r0
 8003246:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d102      	bne.n	8003254 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fd7f 	bl	8002d5c <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 800326c:	f023 0303 	bic.w	r3, r3, #3
 8003270:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f240 329f 	movw	r2, #927	; 0x39f
 800327a:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68d9      	ldr	r1, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <HAL_ADC_DeInit+0xf0>)
 8003288:	400b      	ands	r3, r1
 800328a:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691a      	ldr	r2, [r3, #16]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800329a:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695a      	ldr	r2, [r3, #20]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0207 	bic.w	r2, r2, #7
 80032aa:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6a1a      	ldr	r2, [r3, #32]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80032ba:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2200      	movs	r2, #0
 80032c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80032ca:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <HAL_ADC_DeInit+0xf4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a0d      	ldr	r2, [pc, #52]	; (8003304 <HAL_ADC_DeInit+0xf4>)
 80032d0:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80032d4:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fd fe74 	bl	8000fc4 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	833e0200 	.word	0x833e0200
 8003304:	40012708 	.word	0x40012708

08003308 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fdb5 	bl	8002e84 <LL_ADC_REG_IsConversionOngoing>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d132      	bne.n	8003386 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003326:	2b01      	cmp	r3, #1
 8003328:	d101      	bne.n	800332e <HAL_ADC_Start+0x26>
 800332a:	2302      	movs	r3, #2
 800332c:	e02e      	b.n	800338c <HAL_ADC_Start+0x84>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fa80 	bl	800383c <ADC_Enable>
 800333c:	4603      	mov	r3, r0
 800333e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d11a      	bne.n	800337c <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800334e:	f023 0301 	bic.w	r3, r3, #1
 8003352:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	221c      	movs	r2, #28
 8003366:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fd5f 	bl	8002e38 <LL_ADC_REG_StartConversion>
 800337a:	e006      	b.n	800338a <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003384:	e001      	b.n	800338a <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003386:	2302      	movs	r3, #2
 8003388:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800338a:	7bfb      	ldrb	r3, [r7, #15]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_ADC_Stop+0x16>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e022      	b.n	80033f0 <HAL_ADC_Stop+0x5c>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f9fc 	bl	80037b0 <ADC_ConversionStop>
 80033b8:	4603      	mov	r3, r0
 80033ba:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d111      	bne.n	80033e6 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fac0 	bl	8003948 <ADC_Disable>
 80033c8:	4603      	mov	r3, r0
 80033ca:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d109      	bne.n	80033e6 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033da:	f023 0301 	bic.w	r3, r3, #1
 80033de:	f043 0201 	orr.w	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	2b08      	cmp	r3, #8
 8003408:	d102      	bne.n	8003410 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800340a:	2308      	movs	r3, #8
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	e010      	b.n	8003432 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d007      	beq.n	800342e <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003422:	f043 0220 	orr.w	r2, r3, #32
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e077      	b.n	800351e <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800342e:	2304      	movs	r3, #4
 8003430:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003432:	f7fe fc81 	bl	8001d38 <HAL_GetTick>
 8003436:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003438:	e021      	b.n	800347e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003440:	d01d      	beq.n	800347e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003442:	f7fe fc79 	bl	8001d38 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d302      	bcc.n	8003458 <HAL_ADC_PollForConversion+0x60>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d112      	bne.n	800347e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4013      	ands	r3, r2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10b      	bne.n	800347e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346a:	f043 0204 	orr.w	r2, r3, #4
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e04f      	b.n	800351e <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4013      	ands	r3, r2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0d6      	beq.n	800343a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff fbd6 	bl	8002c4e <LL_ADC_REG_IsTriggerSourceSWStart>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d031      	beq.n	800350c <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	7e9b      	ldrb	r3, [r3, #26]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d12d      	bne.n	800350c <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d126      	bne.n	800350c <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff fcde 	bl	8002e84 <LL_ADC_REG_IsConversionOngoing>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d112      	bne.n	80034f4 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 020c 	bic.w	r2, r2, #12
 80034dc:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034e6:	f023 0301 	bic.w	r3, r3, #1
 80034ea:	f043 0201 	orr.w	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	659a      	str	r2, [r3, #88]	; 0x58
 80034f2:	e00b      	b.n	800350c <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f8:	f043 0220 	orr.w	r2, r3, #32
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003504:	f043 0201 	orr.w	r2, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	7e1b      	ldrb	r3, [r3, #24]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d103      	bne.n	800351c <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	220c      	movs	r2, #12
 800351a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003534:	4618      	mov	r0, r3
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr
	...

08003540 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800354e:	2300      	movs	r3, #0
 8003550:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x28>
 8003564:	2302      	movs	r3, #2
 8003566:	e110      	b.n	800378a <HAL_ADC_ConfigChannel+0x24a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff fc85 	bl	8002e84 <LL_ADC_REG_IsConversionOngoing>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	f040 80f7 	bne.w	8003770 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b02      	cmp	r3, #2
 8003588:	f000 80b1 	beq.w	80036ee <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003594:	d004      	beq.n	80035a0 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800359a:	4a7e      	ldr	r2, [pc, #504]	; (8003794 <HAL_ADC_ConfigChannel+0x254>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d108      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4619      	mov	r1, r3
 80035aa:	4610      	mov	r0, r2
 80035ac:	f7ff fb82 	bl	8002cb4 <LL_ADC_REG_SetSequencerChAdd>
 80035b0:	e041      	b.n	8003636 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f003 031f 	and.w	r3, r3, #31
 80035be:	210f      	movs	r1, #15
 80035c0:	fa01 f303 	lsl.w	r3, r1, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	401a      	ands	r2, r3
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d105      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0xa0>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	0e9b      	lsrs	r3, r3, #26
 80035da:	f003 031f 	and.w	r3, r3, #31
 80035de:	e011      	b.n	8003604 <HAL_ADC_ConfigChannel+0xc4>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	fa93 f3a3 	rbit	r3, r3
 80035ec:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80035f8:	2320      	movs	r3, #32
 80035fa:	e003      	b.n	8003604 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	fab3 f383 	clz	r3, r3
 8003602:	b2db      	uxtb	r3, r3
 8003604:	6839      	ldr	r1, [r7, #0]
 8003606:	6849      	ldr	r1, [r1, #4]
 8003608:	f001 011f 	and.w	r1, r1, #31
 800360c:	408b      	lsls	r3, r1
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	089b      	lsrs	r3, r3, #2
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	429a      	cmp	r2, r3
 8003622:	d808      	bhi.n	8003636 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	6859      	ldr	r1, [r3, #4]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	f7ff fb1e 	bl	8002c72 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6819      	ldr	r1, [r3, #0]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	461a      	mov	r2, r3
 8003644:	f7ff fb5b 	bl	8002cfe <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	f280 8097 	bge.w	8003780 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003652:	4851      	ldr	r0, [pc, #324]	; (8003798 <HAL_ADC_ConfigChannel+0x258>)
 8003654:	f7ff fab8 	bl	8002bc8 <LL_ADC_GetCommonPathInternalCh>
 8003658:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a4f      	ldr	r2, [pc, #316]	; (800379c <HAL_ADC_ConfigChannel+0x25c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d120      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800366a:	2b00      	cmp	r3, #0
 800366c:	d11b      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003674:	4619      	mov	r1, r3
 8003676:	4848      	ldr	r0, [pc, #288]	; (8003798 <HAL_ADC_ConfigChannel+0x258>)
 8003678:	f7ff fa94 	bl	8002ba4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800367c:	4b48      	ldr	r3, [pc, #288]	; (80037a0 <HAL_ADC_ConfigChannel+0x260>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	099b      	lsrs	r3, r3, #6
 8003682:	4a48      	ldr	r2, [pc, #288]	; (80037a4 <HAL_ADC_ConfigChannel+0x264>)
 8003684:	fba2 2303 	umull	r2, r3, r2, r3
 8003688:	099b      	lsrs	r3, r3, #6
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	4613      	mov	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003696:	e002      	b.n	800369e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	3b01      	subs	r3, #1
 800369c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1f9      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80036a4:	e06c      	b.n	8003780 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a3f      	ldr	r2, [pc, #252]	; (80037a8 <HAL_ADC_ConfigChannel+0x268>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d10c      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x18a>
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d107      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036c0:	4619      	mov	r1, r3
 80036c2:	4835      	ldr	r0, [pc, #212]	; (8003798 <HAL_ADC_ConfigChannel+0x258>)
 80036c4:	f7ff fa6e 	bl	8002ba4 <LL_ADC_SetCommonPathInternalCh>
 80036c8:	e05a      	b.n	8003780 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a37      	ldr	r2, [pc, #220]	; (80037ac <HAL_ADC_ConfigChannel+0x26c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d155      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d150      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036e4:	4619      	mov	r1, r3
 80036e6:	482c      	ldr	r0, [pc, #176]	; (8003798 <HAL_ADC_ConfigChannel+0x258>)
 80036e8:	f7ff fa5c 	bl	8002ba4 <LL_ADC_SetCommonPathInternalCh>
 80036ec:	e048      	b.n	8003780 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036f6:	d004      	beq.n	8003702 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80036fc:	4a25      	ldr	r2, [pc, #148]	; (8003794 <HAL_ADC_ConfigChannel+0x254>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d107      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4619      	mov	r1, r3
 800370c:	4610      	mov	r0, r2
 800370e:	f7ff fae3 	bl	8002cd8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	da32      	bge.n	8003780 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800371a:	481f      	ldr	r0, [pc, #124]	; (8003798 <HAL_ADC_ConfigChannel+0x258>)
 800371c:	f7ff fa54 	bl	8002bc8 <LL_ADC_GetCommonPathInternalCh>
 8003720:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1d      	ldr	r2, [pc, #116]	; (800379c <HAL_ADC_ConfigChannel+0x25c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d107      	bne.n	800373c <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003732:	4619      	mov	r1, r3
 8003734:	4818      	ldr	r0, [pc, #96]	; (8003798 <HAL_ADC_ConfigChannel+0x258>)
 8003736:	f7ff fa35 	bl	8002ba4 <LL_ADC_SetCommonPathInternalCh>
 800373a:	e021      	b.n	8003780 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a19      	ldr	r2, [pc, #100]	; (80037a8 <HAL_ADC_ConfigChannel+0x268>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d107      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800374c:	4619      	mov	r1, r3
 800374e:	4812      	ldr	r0, [pc, #72]	; (8003798 <HAL_ADC_ConfigChannel+0x258>)
 8003750:	f7ff fa28 	bl	8002ba4 <LL_ADC_SetCommonPathInternalCh>
 8003754:	e014      	b.n	8003780 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a14      	ldr	r2, [pc, #80]	; (80037ac <HAL_ADC_ConfigChannel+0x26c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d10f      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003766:	4619      	mov	r1, r3
 8003768:	480b      	ldr	r0, [pc, #44]	; (8003798 <HAL_ADC_ConfigChannel+0x258>)
 800376a:	f7ff fa1b 	bl	8002ba4 <LL_ADC_SetCommonPathInternalCh>
 800376e:	e007      	b.n	8003780 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003774:	f043 0220 	orr.w	r2, r3, #32
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003788:	7ffb      	ldrb	r3, [r7, #31]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3720      	adds	r7, #32
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	80000004 	.word	0x80000004
 8003798:	40012708 	.word	0x40012708
 800379c:	b0001000 	.word	0xb0001000
 80037a0:	20000000 	.word	0x20000000
 80037a4:	053e2d63 	.word	0x053e2d63
 80037a8:	b8004000 	.word	0xb8004000
 80037ac:	b4002000 	.word	0xb4002000

080037b0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff fb61 	bl	8002e84 <LL_ADC_REG_IsConversionOngoing>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d033      	beq.n	8003830 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff fb21 	bl	8002e14 <LL_ADC_IsDisableOngoing>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d104      	bne.n	80037e2 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff fb3e 	bl	8002e5e <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037e2:	f7fe faa9 	bl	8001d38 <HAL_GetTick>
 80037e6:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80037e8:	e01b      	b.n	8003822 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80037ea:	f7fe faa5 	bl	8001d38 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d914      	bls.n	8003822 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00d      	beq.n	8003822 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380a:	f043 0210 	orr.w	r2, r3, #16
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003816:	f043 0201 	orr.w	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e007      	b.n	8003832 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1dc      	bne.n	80037ea <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003844:	2300      	movs	r3, #0
 8003846:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff facf 	bl	8002df0 <LL_ADC_IsEnabled>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d169      	bne.n	800392c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	4b36      	ldr	r3, [pc, #216]	; (8003938 <ADC_Enable+0xfc>)
 8003860:	4013      	ands	r3, r2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00d      	beq.n	8003882 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386a:	f043 0210 	orr.w	r2, r3, #16
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003876:	f043 0201 	orr.w	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e055      	b.n	800392e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff fa8c 	bl	8002da4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800388c:	482b      	ldr	r0, [pc, #172]	; (800393c <ADC_Enable+0x100>)
 800388e:	f7ff f99b 	bl	8002bc8 <LL_ADC_GetCommonPathInternalCh>
 8003892:	4603      	mov	r3, r0
 8003894:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00f      	beq.n	80038bc <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800389c:	4b28      	ldr	r3, [pc, #160]	; (8003940 <ADC_Enable+0x104>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	099b      	lsrs	r3, r3, #6
 80038a2:	4a28      	ldr	r2, [pc, #160]	; (8003944 <ADC_Enable+0x108>)
 80038a4:	fba2 2303 	umull	r2, r3, r2, r3
 80038a8:	099b      	lsrs	r3, r3, #6
 80038aa:	3301      	adds	r3, #1
 80038ac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80038ae:	e002      	b.n	80038b6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1f9      	bne.n	80038b0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	7e5b      	ldrb	r3, [r3, #25]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d033      	beq.n	800392c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80038c4:	f7fe fa38 	bl	8001d38 <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038ca:	e028      	b.n	800391e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff fa8d 	bl	8002df0 <LL_ADC_IsEnabled>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d104      	bne.n	80038e6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff fa5f 	bl	8002da4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038e6:	f7fe fa27 	bl	8001d38 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d914      	bls.n	800391e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d00d      	beq.n	800391e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003906:	f043 0210 	orr.w	r2, r3, #16
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003912:	f043 0201 	orr.w	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e007      	b.n	800392e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b01      	cmp	r3, #1
 800392a:	d1cf      	bne.n	80038cc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	80000017 	.word	0x80000017
 800393c:	40012708 	.word	0x40012708
 8003940:	20000000 	.word	0x20000000
 8003944:	053e2d63 	.word	0x053e2d63

08003948 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fa5d 	bl	8002e14 <LL_ADC_IsDisableOngoing>
 800395a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff fa45 	bl	8002df0 <LL_ADC_IsEnabled>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d047      	beq.n	80039fc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d144      	bne.n	80039fc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 0305 	and.w	r3, r3, #5
 800397c:	2b01      	cmp	r3, #1
 800397e:	d10c      	bne.n	800399a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff fa20 	bl	8002dca <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2203      	movs	r2, #3
 8003990:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003992:	f7fe f9d1 	bl	8001d38 <HAL_GetTick>
 8003996:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003998:	e029      	b.n	80039ee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399e:	f043 0210 	orr.w	r2, r3, #16
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039aa:	f043 0201 	orr.w	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e023      	b.n	80039fe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039b6:	f7fe f9bf 	bl	8001d38 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d914      	bls.n	80039ee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00d      	beq.n	80039ee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d6:	f043 0210 	orr.w	r2, r3, #16
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e2:	f043 0201 	orr.w	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e007      	b.n	80039fe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1dc      	bne.n	80039b6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <LL_ADC_SetCalibrationFactor>:
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a16:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr

08003a2e <LL_ADC_GetCalibrationFactor>:
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr

08003a4a <LL_ADC_Enable>:
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a5a:	f023 0317 	bic.w	r3, r3, #23
 8003a5e:	f043 0201 	orr.w	r2, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	609a      	str	r2, [r3, #8]
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr

08003a70 <LL_ADC_Disable>:
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a80:	f023 0317 	bic.w	r3, r3, #23
 8003a84:	f043 0202 	orr.w	r2, r3, #2
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	609a      	str	r2, [r3, #8]
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bc80      	pop	{r7}
 8003a94:	4770      	bx	lr

08003a96 <LL_ADC_IsEnabled>:
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <LL_ADC_IsEnabled+0x18>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <LL_ADC_IsEnabled+0x1a>
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr

08003aba <LL_ADC_StartCalibration>:
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003aca:	f023 0317 	bic.w	r3, r3, #23
 8003ace:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	609a      	str	r2, [r3, #8]
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <LL_ADC_IsCalibrationOnGoing>:
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003af0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003af4:	d101      	bne.n	8003afa <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr

08003b06 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b088      	sub	sp, #32
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_ADCEx_Calibration_Start+0x1e>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e0b9      	b.n	8003c98 <HAL_ADCEx_Calibration_Start+0x192>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff ff0b 	bl	8003948 <ADC_Disable>
 8003b32:	4603      	mov	r3, r0
 8003b34:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff ffab 	bl	8003a96 <LL_ADC_IsEnabled>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f040 809d 	bne.w	8003c82 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b50:	f043 0202 	orr.w	r2, r3, #2
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	f248 0303 	movw	r3, #32771	; 0x8003
 8003b62:	4013      	ands	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b74:	f023 0303 	bic.w	r3, r3, #3
 8003b78:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	e02e      	b.n	8003bde <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff ff98 	bl	8003aba <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b8a:	e014      	b.n	8003bb6 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003b98:	d30d      	bcc.n	8003bb6 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9e:	f023 0312 	bic.w	r3, r3, #18
 8003ba2:	f043 0210 	orr.w	r2, r3, #16
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e070      	b.n	8003c98 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff ff90 	bl	8003ae0 <LL_ADC_IsCalibrationOnGoing>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e2      	bne.n	8003b8c <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff ff2f 	bl	8003a2e <LL_ADC_GetCalibrationFactor>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	2b07      	cmp	r3, #7
 8003be2:	d9cd      	bls.n	8003b80 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bec:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff ff29 	bl	8003a4a <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69b9      	ldr	r1, [r7, #24]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff ff01 	bl	8003a06 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff ff31 	bl	8003a70 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c0e:	f7fe f893 	bl	8001d38 <HAL_GetTick>
 8003c12:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c14:	e01c      	b.n	8003c50 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c16:	f7fe f88f 	bl	8001d38 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d915      	bls.n	8003c50 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff ff34 	bl	8003a96 <LL_ADC_IsEnabled>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00d      	beq.n	8003c50 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c38:	f043 0210 	orr.w	r2, r3, #16
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c44:	f043 0201 	orr.w	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e023      	b.n	8003c98 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff ff1e 	bl	8003a96 <LL_ADC_IsEnabled>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1da      	bne.n	8003c16 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68d9      	ldr	r1, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	f023 0303 	bic.w	r3, r3, #3
 8003c78:	f043 0201 	orr.w	r2, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	659a      	str	r2, [r3, #88]	; 0x58
 8003c80:	e005      	b.n	8003c8e <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c86:	f043 0210 	orr.w	r2, r3, #16
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3720      	adds	r7, #32
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cd2:	4a04      	ldr	r2, [pc, #16]	; (8003ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	60d3      	str	r3, [r2, #12]
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc80      	pop	{r7}
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	e000ed00 	.word	0xe000ed00

08003ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cec:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <__NVIC_GetPriorityGrouping+0x18>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	0a1b      	lsrs	r3, r3, #8
 8003cf2:	f003 0307 	and.w	r3, r3, #7
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	e000ed00 	.word	0xe000ed00

08003d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	db0b      	blt.n	8003d2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	f003 021f 	and.w	r2, r3, #31
 8003d1c:	4906      	ldr	r1, [pc, #24]	; (8003d38 <__NVIC_EnableIRQ+0x34>)
 8003d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	2001      	movs	r0, #1
 8003d26:	fa00 f202 	lsl.w	r2, r0, r2
 8003d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr
 8003d38:	e000e100 	.word	0xe000e100

08003d3c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	db12      	blt.n	8003d74 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
 8003d50:	f003 021f 	and.w	r2, r3, #31
 8003d54:	490a      	ldr	r1, [pc, #40]	; (8003d80 <__NVIC_DisableIRQ+0x44>)
 8003d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d62:	3320      	adds	r3, #32
 8003d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d68:	f3bf 8f4f 	dsb	sy
}
 8003d6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d6e:	f3bf 8f6f 	isb	sy
}
 8003d72:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	e000e100 	.word	0xe000e100

08003d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	6039      	str	r1, [r7, #0]
 8003d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	db0a      	blt.n	8003dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	490c      	ldr	r1, [pc, #48]	; (8003dd0 <__NVIC_SetPriority+0x4c>)
 8003d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da2:	0112      	lsls	r2, r2, #4
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	440b      	add	r3, r1
 8003da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dac:	e00a      	b.n	8003dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	4908      	ldr	r1, [pc, #32]	; (8003dd4 <__NVIC_SetPriority+0x50>)
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	3b04      	subs	r3, #4
 8003dbc:	0112      	lsls	r2, r2, #4
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	761a      	strb	r2, [r3, #24]
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	e000e100 	.word	0xe000e100
 8003dd4:	e000ed00 	.word	0xe000ed00

08003dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b089      	sub	sp, #36	; 0x24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f1c3 0307 	rsb	r3, r3, #7
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	bf28      	it	cs
 8003df6:	2304      	movcs	r3, #4
 8003df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	2b06      	cmp	r3, #6
 8003e00:	d902      	bls.n	8003e08 <NVIC_EncodePriority+0x30>
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	3b03      	subs	r3, #3
 8003e06:	e000      	b.n	8003e0a <NVIC_EncodePriority+0x32>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43da      	mvns	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	401a      	ands	r2, r3
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e20:	f04f 31ff 	mov.w	r1, #4294967295
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2a:	43d9      	mvns	r1, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e30:	4313      	orrs	r3, r2
         );
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3724      	adds	r7, #36	; 0x24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr

08003e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff ff2b 	bl	8003ca0 <__NVIC_SetPriorityGrouping>
}
 8003e4a:	bf00      	nop
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b086      	sub	sp, #24
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	4603      	mov	r3, r0
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	607a      	str	r2, [r7, #4]
 8003e5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e60:	f7ff ff42 	bl	8003ce8 <__NVIC_GetPriorityGrouping>
 8003e64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	68b9      	ldr	r1, [r7, #8]
 8003e6a:	6978      	ldr	r0, [r7, #20]
 8003e6c:	f7ff ffb4 	bl	8003dd8 <NVIC_EncodePriority>
 8003e70:	4602      	mov	r2, r0
 8003e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e76:	4611      	mov	r1, r2
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff ff83 	bl	8003d84 <__NVIC_SetPriority>
}
 8003e7e:	bf00      	nop
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b082      	sub	sp, #8
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff ff35 	bl	8003d04 <__NVIC_EnableIRQ>
}
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff ff43 	bl	8003d3c <__NVIC_DisableIRQ>
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e08e      	b.n	8003ff0 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	4b47      	ldr	r3, [pc, #284]	; (8003ff8 <HAL_DMA_Init+0x138>)
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d80f      	bhi.n	8003efe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	4b45      	ldr	r3, [pc, #276]	; (8003ffc <HAL_DMA_Init+0x13c>)
 8003ee6:	4413      	add	r3, r2
 8003ee8:	4a45      	ldr	r2, [pc, #276]	; (8004000 <HAL_DMA_Init+0x140>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	091b      	lsrs	r3, r3, #4
 8003ef0:	009a      	lsls	r2, r3, #2
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a42      	ldr	r2, [pc, #264]	; (8004004 <HAL_DMA_Init+0x144>)
 8003efa:	641a      	str	r2, [r3, #64]	; 0x40
 8003efc:	e00e      	b.n	8003f1c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	4b40      	ldr	r3, [pc, #256]	; (8004008 <HAL_DMA_Init+0x148>)
 8003f06:	4413      	add	r3, r2
 8003f08:	4a3d      	ldr	r2, [pc, #244]	; (8004000 <HAL_DMA_Init+0x140>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	091b      	lsrs	r3, r3, #4
 8003f10:	009a      	lsls	r2, r3, #2
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a3c      	ldr	r2, [pc, #240]	; (800400c <HAL_DMA_Init+0x14c>)
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6812      	ldr	r2, [r2, #0]
 8003f2e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f36:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6819      	ldr	r1, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fb24 	bl	80045bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f7c:	d102      	bne.n	8003f84 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f90:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f9a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d010      	beq.n	8003fc6 <HAL_DMA_Init+0x106>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d80c      	bhi.n	8003fc6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fb4d 	bl	800464c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003fc2:	605a      	str	r2, [r3, #4]
 8003fc4:	e008      	b.n	8003fd8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40020407 	.word	0x40020407
 8003ffc:	bffdfff8 	.word	0xbffdfff8
 8004000:	cccccccd 	.word	0xcccccccd
 8004004:	40020000 	.word	0x40020000
 8004008:	bffdfbf8 	.word	0xbffdfbf8
 800400c:	40020400 	.word	0x40020400

08004010 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e07b      	b.n	800411a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0201 	bic.w	r2, r2, #1
 8004030:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	4b3a      	ldr	r3, [pc, #232]	; (8004124 <HAL_DMA_DeInit+0x114>)
 800403a:	429a      	cmp	r2, r3
 800403c:	d80f      	bhi.n	800405e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	4b38      	ldr	r3, [pc, #224]	; (8004128 <HAL_DMA_DeInit+0x118>)
 8004046:	4413      	add	r3, r2
 8004048:	4a38      	ldr	r2, [pc, #224]	; (800412c <HAL_DMA_DeInit+0x11c>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	091b      	lsrs	r3, r3, #4
 8004050:	009a      	lsls	r2, r3, #2
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a35      	ldr	r2, [pc, #212]	; (8004130 <HAL_DMA_DeInit+0x120>)
 800405a:	641a      	str	r2, [r3, #64]	; 0x40
 800405c:	e00e      	b.n	800407c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	4b33      	ldr	r3, [pc, #204]	; (8004134 <HAL_DMA_DeInit+0x124>)
 8004066:	4413      	add	r3, r2
 8004068:	4a30      	ldr	r2, [pc, #192]	; (800412c <HAL_DMA_DeInit+0x11c>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	091b      	lsrs	r3, r3, #4
 8004070:	009a      	lsls	r2, r3, #2
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a2f      	ldr	r2, [pc, #188]	; (8004138 <HAL_DMA_DeInit+0x128>)
 800407a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004088:	f003 021c 	and.w	r2, r3, #28
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	2101      	movs	r1, #1
 8004092:	fa01 f202 	lsl.w	r2, r1, r2
 8004096:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 fa8f 	bl	80045bc <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040ae:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00f      	beq.n	80040d8 <HAL_DMA_DeInit+0xc8>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d80b      	bhi.n	80040d8 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 fac3 	bl	800464c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040d6:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40020407 	.word	0x40020407
 8004128:	bffdfff8 	.word	0xbffdfff8
 800412c:	cccccccd 	.word	0xcccccccd
 8004130:	40020000 	.word	0x40020000
 8004134:	bffdfbf8 	.word	0xbffdfbf8
 8004138:	40020400 	.word	0x40020400

0800413c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004154:	2b01      	cmp	r3, #1
 8004156:	d101      	bne.n	800415c <HAL_DMA_Start_IT+0x20>
 8004158:	2302      	movs	r3, #2
 800415a:	e069      	b.n	8004230 <HAL_DMA_Start_IT+0xf4>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	d155      	bne.n	800421c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0201 	bic.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	68b9      	ldr	r1, [r7, #8]
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f9d3 	bl	8004540 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d008      	beq.n	80041b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 020e 	orr.w	r2, r2, #14
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	e00f      	b.n	80041d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0204 	bic.w	r2, r2, #4
 80041c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 020a 	orr.w	r2, r2, #10
 80041d2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d007      	beq.n	80041f2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041f0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d007      	beq.n	800420a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004208:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0201 	orr.w	r2, r2, #1
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	e008      	b.n	800422e <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2280      	movs	r2, #128	; 0x80
 8004220:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800422e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e04f      	b.n	80042ea <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d008      	beq.n	8004268 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2204      	movs	r2, #4
 800425a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e040      	b.n	80042ea <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 020e 	bic.w	r2, r2, #14
 8004276:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004282:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004286:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0201 	bic.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429c:	f003 021c 	and.w	r2, r3, #28
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	2101      	movs	r1, #1
 80042a6:	fa01 f202 	lsl.w	r2, r1, r2
 80042aa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042b4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00c      	beq.n	80042d8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042d6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr

080042f4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d005      	beq.n	8004318 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2204      	movs	r2, #4
 8004310:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	73fb      	strb	r3, [r7, #15]
 8004316:	e047      	b.n	80043a8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 020e 	bic.w	r2, r2, #14
 8004326:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0201 	bic.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004342:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004346:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434c:	f003 021c 	and.w	r2, r3, #28
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	2101      	movs	r1, #1
 8004356:	fa01 f202 	lsl.w	r2, r1, r2
 800435a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004364:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00c      	beq.n	8004388 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004378:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800437c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004386:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	4798      	blx	r3
    }
  }
  return status;
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d0:	f003 031c 	and.w	r3, r3, #28
 80043d4:	2204      	movs	r2, #4
 80043d6:	409a      	lsls	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4013      	ands	r3, r2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d027      	beq.n	8004430 <HAL_DMA_IRQHandler+0x7c>
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d022      	beq.n	8004430 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0320 	and.w	r3, r3, #32
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d107      	bne.n	8004408 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0204 	bic.w	r2, r2, #4
 8004406:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440c:	f003 021c 	and.w	r2, r3, #28
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	2104      	movs	r1, #4
 8004416:	fa01 f202 	lsl.w	r2, r1, r2
 800441a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8081 	beq.w	8004528 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800442e:	e07b      	b.n	8004528 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004434:	f003 031c 	and.w	r3, r3, #28
 8004438:	2202      	movs	r2, #2
 800443a:	409a      	lsls	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4013      	ands	r3, r2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d03d      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x10c>
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d038      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0320 	and.w	r3, r3, #32
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10b      	bne.n	8004474 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 020a 	bic.w	r2, r2, #10
 800446a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	461a      	mov	r2, r3
 800447a:	4b2e      	ldr	r3, [pc, #184]	; (8004534 <HAL_DMA_IRQHandler+0x180>)
 800447c:	429a      	cmp	r2, r3
 800447e:	d909      	bls.n	8004494 <HAL_DMA_IRQHandler+0xe0>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004484:	f003 031c 	and.w	r3, r3, #28
 8004488:	4a2b      	ldr	r2, [pc, #172]	; (8004538 <HAL_DMA_IRQHandler+0x184>)
 800448a:	2102      	movs	r1, #2
 800448c:	fa01 f303 	lsl.w	r3, r1, r3
 8004490:	6053      	str	r3, [r2, #4]
 8004492:	e008      	b.n	80044a6 <HAL_DMA_IRQHandler+0xf2>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004498:	f003 031c 	and.w	r3, r3, #28
 800449c:	4a27      	ldr	r2, [pc, #156]	; (800453c <HAL_DMA_IRQHandler+0x188>)
 800449e:	2102      	movs	r1, #2
 80044a0:	fa01 f303 	lsl.w	r3, r1, r3
 80044a4:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d038      	beq.n	8004528 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80044be:	e033      	b.n	8004528 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c4:	f003 031c 	and.w	r3, r3, #28
 80044c8:	2208      	movs	r2, #8
 80044ca:	409a      	lsls	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4013      	ands	r3, r2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d02a      	beq.n	800452a <HAL_DMA_IRQHandler+0x176>
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d025      	beq.n	800452a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 020e 	bic.w	r2, r2, #14
 80044ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f2:	f003 021c 	and.w	r2, r3, #28
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	2101      	movs	r1, #1
 80044fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004500:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451c:	2b00      	cmp	r3, #0
 800451e:	d004      	beq.n	800452a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004528:	bf00      	nop
 800452a:	bf00      	nop
}
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40020080 	.word	0x40020080
 8004538:	40020400 	.word	0x40020400
 800453c:	40020000 	.word	0x40020000

08004540 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004556:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455c:	2b00      	cmp	r3, #0
 800455e:	d004      	beq.n	800456a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004568:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	f003 021c 	and.w	r2, r3, #28
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	2101      	movs	r1, #1
 8004578:	fa01 f202 	lsl.w	r2, r1, r2
 800457c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	2b10      	cmp	r3, #16
 800458c:	d108      	bne.n	80045a0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800459e:	e007      	b.n	80045b0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	60da      	str	r2, [r3, #12]
}
 80045b0:	bf00      	nop
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	4770      	bx	lr
	...

080045bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	4b1c      	ldr	r3, [pc, #112]	; (800463c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d813      	bhi.n	80045f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d4:	089b      	lsrs	r3, r3, #2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045dc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	3b08      	subs	r3, #8
 80045ec:	4a14      	ldr	r2, [pc, #80]	; (8004640 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80045ee:	fba2 2303 	umull	r2, r3, r2, r3
 80045f2:	091b      	lsrs	r3, r3, #4
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	e011      	b.n	800461c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fc:	089b      	lsrs	r3, r3, #2
 80045fe:	009a      	lsls	r2, r3, #2
 8004600:	4b10      	ldr	r3, [pc, #64]	; (8004644 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004602:	4413      	add	r3, r2
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	3b08      	subs	r3, #8
 8004610:	4a0b      	ldr	r2, [pc, #44]	; (8004640 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	091b      	lsrs	r3, r3, #4
 8004618:	3307      	adds	r3, #7
 800461a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a0a      	ldr	r2, [pc, #40]	; (8004648 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004620:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f003 031f 	and.w	r3, r3, #31
 8004628:	2201      	movs	r2, #1
 800462a:	409a      	lsls	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004630:	bf00      	nop
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	bc80      	pop	{r7}
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40020407 	.word	0x40020407
 8004640:	cccccccd 	.word	0xcccccccd
 8004644:	4002081c 	.word	0x4002081c
 8004648:	40020880 	.word	0x40020880

0800464c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800465c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4b0a      	ldr	r3, [pc, #40]	; (800468c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004662:	4413      	add	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	461a      	mov	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a08      	ldr	r2, [pc, #32]	; (8004690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004670:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	3b01      	subs	r3, #1
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	2201      	movs	r2, #1
 800467c:	409a      	lsls	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004682:	bf00      	nop
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	bc80      	pop	{r7}
 800468a:	4770      	bx	lr
 800468c:	1000823f 	.word	0x1000823f
 8004690:	40020940 	.word	0x40020940

08004694 <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d12b      	bne.n	8004702 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_DMAEx_ConfigMuxSync+0x24>
 80046b4:	2302      	movs	r3, #2
 80046b6:	e028      	b.n	800470a <HAL_DMAEx_ConfigMuxSync+0x76>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	04db      	lsls	r3, r3, #19
 80046d6:	431a      	orrs	r2, r3
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	431a      	orrs	r2, r3
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	7a1b      	ldrb	r3, [r3, #8]
 80046e2:	041b      	lsls	r3, r3, #16
 80046e4:	431a      	orrs	r2, r3
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	7a5b      	ldrb	r3, [r3, #9]
 80046ea:	025b      	lsls	r3, r3, #9
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f2:	430a      	orrs	r2, r1
 80046f4:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	e003      	b.n	800470a <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2280      	movs	r2, #128	; 0x80
 8004706:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
  }
}
 800470a:	4618      	mov	r0, r3
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	bc80      	pop	{r7}
 8004712:	4770      	bx	lr

08004714 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004726:	4013      	ands	r3, r2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01a      	beq.n	8004762 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004736:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800473a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004744:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004766:	2b00      	cmp	r3, #0
 8004768:	d022      	beq.n	80047b0 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004774:	4013      	ands	r3, r2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01a      	beq.n	80047b0 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004784:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004788:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004792:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004798:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	4798      	blx	r3
      }
    }
  }
}
 80047b0:	bf00      	nop
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80047c6:	4b1c      	ldr	r3, [pc, #112]	; (8004838 <HAL_FLASH_Program+0x80>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <HAL_FLASH_Program+0x1a>
 80047ce:	2302      	movs	r3, #2
 80047d0:	e02d      	b.n	800482e <HAL_FLASH_Program+0x76>
 80047d2:	4b19      	ldr	r3, [pc, #100]	; (8004838 <HAL_FLASH_Program+0x80>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80047d8:	4b17      	ldr	r3, [pc, #92]	; (8004838 <HAL_FLASH_Program+0x80>)
 80047da:	2200      	movs	r2, #0
 80047dc:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80047de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047e2:	f000 f869 	bl	80048b8 <FLASH_WaitForLastOperation>
 80047e6:	4603      	mov	r3, r0
 80047e8:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80047ea:	7dfb      	ldrb	r3, [r7, #23]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d11a      	bne.n	8004826 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d105      	bne.n	8004802 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80047f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047fa:	68b8      	ldr	r0, [r7, #8]
 80047fc:	f000 f8be 	bl	800497c <FLASH_Program_DoubleWord>
 8004800:	e004      	b.n	800480c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	4619      	mov	r1, r3
 8004806:	68b8      	ldr	r0, [r7, #8]
 8004808:	f000 f8de 	bl	80049c8 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800480c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004810:	f000 f852 	bl	80048b8 <FLASH_WaitForLastOperation>
 8004814:	4603      	mov	r3, r0
 8004816:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004818:	4b08      	ldr	r3, [pc, #32]	; (800483c <HAL_FLASH_Program+0x84>)
 800481a:	695a      	ldr	r2, [r3, #20]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	43db      	mvns	r3, r3
 8004820:	4906      	ldr	r1, [pc, #24]	; (800483c <HAL_FLASH_Program+0x84>)
 8004822:	4013      	ands	r3, r2
 8004824:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004826:	4b04      	ldr	r3, [pc, #16]	; (8004838 <HAL_FLASH_Program+0x80>)
 8004828:	2200      	movs	r2, #0
 800482a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800482c:	7dfb      	ldrb	r3, [r7, #23]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000374 	.word	0x20000374
 800483c:	58004000 	.word	0x58004000

08004840 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800484a:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <HAL_FLASH_Unlock+0x38>)
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	2b00      	cmp	r3, #0
 8004850:	da0b      	bge.n	800486a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004852:	4b09      	ldr	r3, [pc, #36]	; (8004878 <HAL_FLASH_Unlock+0x38>)
 8004854:	4a09      	ldr	r2, [pc, #36]	; (800487c <HAL_FLASH_Unlock+0x3c>)
 8004856:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004858:	4b07      	ldr	r3, [pc, #28]	; (8004878 <HAL_FLASH_Unlock+0x38>)
 800485a:	4a09      	ldr	r2, [pc, #36]	; (8004880 <HAL_FLASH_Unlock+0x40>)
 800485c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800485e:	4b06      	ldr	r3, [pc, #24]	; (8004878 <HAL_FLASH_Unlock+0x38>)
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	2b00      	cmp	r3, #0
 8004864:	da01      	bge.n	800486a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800486a:	79fb      	ldrb	r3, [r7, #7]
}
 800486c:	4618      	mov	r0, r3
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	58004000 	.word	0x58004000
 800487c:	45670123 	.word	0x45670123
 8004880:	cdef89ab 	.word	0xcdef89ab

08004884 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800488e:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <HAL_FLASH_Lock+0x30>)
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	4a08      	ldr	r2, [pc, #32]	; (80048b4 <HAL_FLASH_Lock+0x30>)
 8004894:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004898:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <HAL_FLASH_Lock+0x30>)
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	db01      	blt.n	80048a6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80048a6:	79fb      	ldrb	r3, [r7, #7]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	58004000 	.word	0x58004000

080048b8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80048c0:	f7fd fa3a 	bl	8001d38 <HAL_GetTick>
 80048c4:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80048c6:	e009      	b.n	80048dc <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80048c8:	f7fd fa36 	bl	8001d38 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d801      	bhi.n	80048dc <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e047      	b.n	800496c <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80048dc:	4b25      	ldr	r3, [pc, #148]	; (8004974 <FLASH_WaitForLastOperation+0xbc>)
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e8:	d0ee      	beq.n	80048c8 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 80048ea:	4b22      	ldr	r3, [pc, #136]	; (8004974 <FLASH_WaitForLastOperation+0xbc>)
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80048fa:	4b1e      	ldr	r3, [pc, #120]	; (8004974 <FLASH_WaitForLastOperation+0xbc>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004906:	4013      	ands	r3, r2
 8004908:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <FLASH_WaitForLastOperation+0x6c>
 8004914:	4b17      	ldr	r3, [pc, #92]	; (8004974 <FLASH_WaitForLastOperation+0xbc>)
 8004916:	699a      	ldr	r2, [r3, #24]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800491e:	4915      	ldr	r1, [pc, #84]	; (8004974 <FLASH_WaitForLastOperation+0xbc>)
 8004920:	4313      	orrs	r3, r2
 8004922:	618b      	str	r3, [r1, #24]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d004      	beq.n	8004938 <FLASH_WaitForLastOperation+0x80>
 800492e:	4a11      	ldr	r2, [pc, #68]	; (8004974 <FLASH_WaitForLastOperation+0xbc>)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004936:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00e      	beq.n	800495c <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800493e:	4a0e      	ldr	r2, [pc, #56]	; (8004978 <FLASH_WaitForLastOperation+0xc0>)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e011      	b.n	800496c <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004948:	f7fd f9f6 	bl	8001d38 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	429a      	cmp	r2, r3
 8004956:	d801      	bhi.n	800495c <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e007      	b.n	800496c <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800495c:	4b05      	ldr	r3, [pc, #20]	; (8004974 <FLASH_WaitForLastOperation+0xbc>)
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004964:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004968:	d0ee      	beq.n	8004948 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	58004000 	.word	0x58004000
 8004978:	20000374 	.word	0x20000374

0800497c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004988:	4b0e      	ldr	r3, [pc, #56]	; (80049c4 <FLASH_Program_DoubleWord+0x48>)
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	4a0d      	ldr	r2, [pc, #52]	; (80049c4 <FLASH_Program_DoubleWord+0x48>)
 800498e:	f043 0301 	orr.w	r3, r3, #1
 8004992:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800499a:	f3bf 8f6f 	isb	sy
}
 800499e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80049a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	000a      	movs	r2, r1
 80049ae:	2300      	movs	r3, #0
 80049b0:	68f9      	ldr	r1, [r7, #12]
 80049b2:	3104      	adds	r1, #4
 80049b4:	4613      	mov	r3, r2
 80049b6:	600b      	str	r3, [r1, #0]
}
 80049b8:	bf00      	nop
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	bc80      	pop	{r7}
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	58004000 	.word	0x58004000

080049c8 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 80049c8:	b480      	push	{r7}
 80049ca:	b089      	sub	sp, #36	; 0x24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80049d2:	2340      	movs	r3, #64	; 0x40
 80049d4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80049de:	4b18      	ldr	r3, [pc, #96]	; (8004a40 <FLASH_Program_Fast+0x78>)
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	4a17      	ldr	r2, [pc, #92]	; (8004a40 <FLASH_Program_Fast+0x78>)
 80049e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049e8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ea:	f3ef 8310 	mrs	r3, PRIMASK
 80049ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80049f0:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 80049f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80049f4:	b672      	cpsid	i
}
 80049f6:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	3304      	adds	r3, #4
 8004a04:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	617b      	str	r3, [r7, #20]
    row_index--;
 8004a0c:	7ffb      	ldrb	r3, [r7, #31]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004a12:	7ffb      	ldrb	r3, [r7, #31]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1ef      	bne.n	80049f8 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004a18:	bf00      	nop
 8004a1a:	4b09      	ldr	r3, [pc, #36]	; (8004a40 <FLASH_Program_Fast+0x78>)
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a26:	d0f8      	beq.n	8004a1a <FLASH_Program_Fast+0x52>
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f383 8810 	msr	PRIMASK, r3
}
 8004a32:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004a34:	bf00      	nop
 8004a36:	3724      	adds	r7, #36	; 0x24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	58004000 	.word	0x58004000

08004a44 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004a4e:	4b28      	ldr	r3, [pc, #160]	; (8004af0 <HAL_FLASHEx_Erase+0xac>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_FLASHEx_Erase+0x16>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e046      	b.n	8004ae8 <HAL_FLASHEx_Erase+0xa4>
 8004a5a:	4b25      	ldr	r3, [pc, #148]	; (8004af0 <HAL_FLASHEx_Erase+0xac>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004a60:	4b23      	ldr	r3, [pc, #140]	; (8004af0 <HAL_FLASHEx_Erase+0xac>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004a66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a6a:	f7ff ff25 	bl	80048b8 <FLASH_WaitForLastOperation>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d133      	bne.n	8004ae0 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d108      	bne.n	8004a92 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004a80:	f000 f880 	bl	8004b84 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004a84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a88:	f7ff ff16 	bl	80048b8 <FLASH_WaitForLastOperation>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	73fb      	strb	r3, [r7, #15]
 8004a90:	e024      	b.n	8004adc <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	f04f 32ff 	mov.w	r2, #4294967295
 8004a98:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	60bb      	str	r3, [r7, #8]
 8004aa0:	e012      	b.n	8004ac8 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004aa2:	68b8      	ldr	r0, [r7, #8]
 8004aa4:	f000 f87e 	bl	8004ba4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004aa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004aac:	f7ff ff04 	bl	80048b8 <FLASH_WaitForLastOperation>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	601a      	str	r2, [r3, #0]
          break;
 8004ac0:	e00a      	b.n	8004ad8 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	60bb      	str	r3, [r7, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d3e4      	bcc.n	8004aa2 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004ad8:	f000 f8c0 	bl	8004c5c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004adc:	f000 f87a 	bl	8004bd4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004ae0:	4b03      	ldr	r3, [pc, #12]	; (8004af0 <HAL_FLASHEx_Erase+0xac>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	701a      	strb	r2, [r3, #0]

  return status;
 8004ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	20000374 	.word	0x20000374

08004af4 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004afc:	4b1f      	ldr	r3, [pc, #124]	; (8004b7c <HAL_FLASHEx_Erase_IT+0x88>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <HAL_FLASHEx_Erase_IT+0x14>
 8004b04:	2302      	movs	r3, #2
 8004b06:	e034      	b.n	8004b72 <HAL_FLASHEx_Erase_IT+0x7e>
 8004b08:	4b1c      	ldr	r3, [pc, #112]	; (8004b7c <HAL_FLASHEx_Erase_IT+0x88>)
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004b0e:	4b1b      	ldr	r3, [pc, #108]	; (8004b7c <HAL_FLASHEx_Erase_IT+0x88>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a18      	ldr	r2, [pc, #96]	; (8004b7c <HAL_FLASHEx_Erase_IT+0x88>)
 8004b1a:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b20:	f7ff feca 	bl	80048b8 <FLASH_WaitForLastOperation>
 8004b24:	4603      	mov	r3, r0
 8004b26:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004b2e:	4b13      	ldr	r3, [pc, #76]	; (8004b7c <HAL_FLASHEx_Erase_IT+0x88>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	701a      	strb	r2, [r3, #0]
 8004b34:	e01c      	b.n	8004b70 <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004b36:	4b12      	ldr	r3, [pc, #72]	; (8004b80 <HAL_FLASHEx_Erase_IT+0x8c>)
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	4a11      	ldr	r2, [pc, #68]	; (8004b80 <HAL_FLASHEx_Erase_IT+0x8c>)
 8004b3c:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8004b40:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d105      	bne.n	8004b56 <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 8004b4a:	4b0c      	ldr	r3, [pc, #48]	; (8004b7c <HAL_FLASHEx_Erase_IT+0x88>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 8004b50:	f000 f818 	bl	8004b84 <FLASH_MassErase>
 8004b54:	e00c      	b.n	8004b70 <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	4a08      	ldr	r2, [pc, #32]	; (8004b7c <HAL_FLASHEx_Erase_IT+0x88>)
 8004b5c:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	4a06      	ldr	r2, [pc, #24]	; (8004b7c <HAL_FLASHEx_Erase_IT+0x88>)
 8004b64:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 f81a 	bl	8004ba4 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000374 	.word	0x20000374
 8004b80:	58004000 	.word	0x58004000

08004b84 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004b88:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <FLASH_MassErase+0x1c>)
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	4a04      	ldr	r2, [pc, #16]	; (8004ba0 <FLASH_MassErase+0x1c>)
 8004b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b92:	f043 0304 	orr.w	r3, r3, #4
 8004b96:	6153      	str	r3, [r2, #20]
#endif
}
 8004b98:	bf00      	nop
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bc80      	pop	{r7}
 8004b9e:	4770      	bx	lr
 8004ba0:	58004000 	.word	0x58004000

08004ba4 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004bac:	4b08      	ldr	r3, [pc, #32]	; (8004bd0 <FLASH_PageErase+0x2c>)
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	4a05      	ldr	r2, [pc, #20]	; (8004bd0 <FLASH_PageErase+0x2c>)
 8004bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc0:	f043 0302 	orr.w	r3, r3, #2
 8004bc4:	6153      	str	r3, [r2, #20]
#endif
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr
 8004bd0:	58004000 	.word	0x58004000

08004bd4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004bd8:	4b1f      	ldr	r3, [pc, #124]	; (8004c58 <FLASH_FlushCaches+0x84>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d117      	bne.n	8004c14 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004be4:	4b1c      	ldr	r3, [pc, #112]	; (8004c58 <FLASH_FlushCaches+0x84>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a1b      	ldr	r2, [pc, #108]	; (8004c58 <FLASH_FlushCaches+0x84>)
 8004bea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bee:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004bf0:	4b19      	ldr	r3, [pc, #100]	; (8004c58 <FLASH_FlushCaches+0x84>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a18      	ldr	r2, [pc, #96]	; (8004c58 <FLASH_FlushCaches+0x84>)
 8004bf6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	4b16      	ldr	r3, [pc, #88]	; (8004c58 <FLASH_FlushCaches+0x84>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a15      	ldr	r2, [pc, #84]	; (8004c58 <FLASH_FlushCaches+0x84>)
 8004c02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c06:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c08:	4b13      	ldr	r3, [pc, #76]	; (8004c58 <FLASH_FlushCaches+0x84>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a12      	ldr	r2, [pc, #72]	; (8004c58 <FLASH_FlushCaches+0x84>)
 8004c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c12:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004c14:	4b10      	ldr	r3, [pc, #64]	; (8004c58 <FLASH_FlushCaches+0x84>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d117      	bne.n	8004c50 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004c20:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <FLASH_FlushCaches+0x84>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <FLASH_FlushCaches+0x84>)
 8004c26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c2a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <FLASH_FlushCaches+0x84>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a09      	ldr	r2, [pc, #36]	; (8004c58 <FLASH_FlushCaches+0x84>)
 8004c32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <FLASH_FlushCaches+0x84>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a06      	ldr	r2, [pc, #24]	; (8004c58 <FLASH_FlushCaches+0x84>)
 8004c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c42:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c44:	4b04      	ldr	r3, [pc, #16]	; (8004c58 <FLASH_FlushCaches+0x84>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a03      	ldr	r2, [pc, #12]	; (8004c58 <FLASH_FlushCaches+0x84>)
 8004c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c4e:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8004c50:	bf00      	nop
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc80      	pop	{r7}
 8004c56:	4770      	bx	lr
 8004c58:	58004000 	.word	0x58004000

08004c5c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <FLASH_AcknowledgePageErase+0x1c>)
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	4a04      	ldr	r2, [pc, #16]	; (8004c78 <FLASH_AcknowledgePageErase+0x1c>)
 8004c66:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004c6a:	f023 0302 	bic.w	r3, r3, #2
 8004c6e:	6153      	str	r3, [r2, #20]
#endif
}
 8004c70:	bf00      	nop
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bc80      	pop	{r7}
 8004c76:	4770      	bx	lr
 8004c78:	58004000 	.word	0x58004000

08004c7c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c8a:	e140      	b.n	8004f0e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	2101      	movs	r1, #1
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	fa01 f303 	lsl.w	r3, r1, r3
 8004c98:	4013      	ands	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 8132 	beq.w	8004f08 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f003 0303 	and.w	r3, r3, #3
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d005      	beq.n	8004cbc <HAL_GPIO_Init+0x40>
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f003 0303 	and.w	r3, r3, #3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d130      	bne.n	8004d1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	2203      	movs	r2, #3
 8004cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ccc:	43db      	mvns	r3, r3
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfa:	43db      	mvns	r3, r3
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	091b      	lsrs	r3, r3, #4
 8004d08:	f003 0201 	and.w	r2, r3, #1
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	2b03      	cmp	r3, #3
 8004d28:	d017      	beq.n	8004d5a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	2203      	movs	r2, #3
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d123      	bne.n	8004dae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	08da      	lsrs	r2, r3, #3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	3208      	adds	r2, #8
 8004d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	220f      	movs	r2, #15
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	43db      	mvns	r3, r3
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4013      	ands	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	691a      	ldr	r2, [r3, #16]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	08da      	lsrs	r2, r3, #3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3208      	adds	r2, #8
 8004da8:	6939      	ldr	r1, [r7, #16]
 8004daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	2203      	movs	r2, #3
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	43db      	mvns	r3, r3
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f003 0203 	and.w	r2, r3, #3
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 808c 	beq.w	8004f08 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004df0:	4a4e      	ldr	r2, [pc, #312]	; (8004f2c <HAL_GPIO_Init+0x2b0>)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	089b      	lsrs	r3, r3, #2
 8004df6:	3302      	adds	r3, #2
 8004df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f003 0303 	and.w	r3, r3, #3
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	2207      	movs	r2, #7
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4013      	ands	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e1a:	d00d      	beq.n	8004e38 <HAL_GPIO_Init+0x1bc>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a44      	ldr	r2, [pc, #272]	; (8004f30 <HAL_GPIO_Init+0x2b4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d007      	beq.n	8004e34 <HAL_GPIO_Init+0x1b8>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a43      	ldr	r2, [pc, #268]	; (8004f34 <HAL_GPIO_Init+0x2b8>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d101      	bne.n	8004e30 <HAL_GPIO_Init+0x1b4>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e004      	b.n	8004e3a <HAL_GPIO_Init+0x1be>
 8004e30:	2307      	movs	r3, #7
 8004e32:	e002      	b.n	8004e3a <HAL_GPIO_Init+0x1be>
 8004e34:	2301      	movs	r3, #1
 8004e36:	e000      	b.n	8004e3a <HAL_GPIO_Init+0x1be>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	f002 0203 	and.w	r2, r2, #3
 8004e40:	0092      	lsls	r2, r2, #2
 8004e42:	4093      	lsls	r3, r2
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e4a:	4938      	ldr	r1, [pc, #224]	; (8004f2c <HAL_GPIO_Init+0x2b0>)
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	089b      	lsrs	r3, r3, #2
 8004e50:	3302      	adds	r3, #2
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e58:	4b37      	ldr	r3, [pc, #220]	; (8004f38 <HAL_GPIO_Init+0x2bc>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	43db      	mvns	r3, r3
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	4013      	ands	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e7c:	4a2e      	ldr	r2, [pc, #184]	; (8004f38 <HAL_GPIO_Init+0x2bc>)
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e82:	4b2d      	ldr	r3, [pc, #180]	; (8004f38 <HAL_GPIO_Init+0x2bc>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ea6:	4a24      	ldr	r2, [pc, #144]	; (8004f38 <HAL_GPIO_Init+0x2bc>)
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004eac:	4b22      	ldr	r3, [pc, #136]	; (8004f38 <HAL_GPIO_Init+0x2bc>)
 8004eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eb2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	43db      	mvns	r3, r3
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004ed2:	4a19      	ldr	r2, [pc, #100]	; (8004f38 <HAL_GPIO_Init+0x2bc>)
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004eda:	4b17      	ldr	r3, [pc, #92]	; (8004f38 <HAL_GPIO_Init+0x2bc>)
 8004edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004f00:	4a0d      	ldr	r2, [pc, #52]	; (8004f38 <HAL_GPIO_Init+0x2bc>)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	fa22 f303 	lsr.w	r3, r2, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f47f aeb7 	bne.w	8004c8c <HAL_GPIO_Init+0x10>
  }
}
 8004f1e:	bf00      	nop
 8004f20:	bf00      	nop
 8004f22:	371c      	adds	r7, #28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bc80      	pop	{r7}
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	48000400 	.word	0x48000400
 8004f34:	48000800 	.word	0x48000800
 8004f38:	58000800 	.word	0x58000800

08004f3c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004f4a:	e0af      	b.n	80050ac <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	fa02 f303 	lsl.w	r3, r2, r3
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	4013      	ands	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 80a2 	beq.w	80050a6 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004f62:	4a59      	ldr	r2, [pc, #356]	; (80050c8 <HAL_GPIO_DeInit+0x18c>)
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	089b      	lsrs	r3, r3, #2
 8004f68:	3302      	adds	r3, #2
 8004f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f6e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	2207      	movs	r2, #7
 8004f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	4013      	ands	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f8a:	d00d      	beq.n	8004fa8 <HAL_GPIO_DeInit+0x6c>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a4f      	ldr	r2, [pc, #316]	; (80050cc <HAL_GPIO_DeInit+0x190>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d007      	beq.n	8004fa4 <HAL_GPIO_DeInit+0x68>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a4e      	ldr	r2, [pc, #312]	; (80050d0 <HAL_GPIO_DeInit+0x194>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d101      	bne.n	8004fa0 <HAL_GPIO_DeInit+0x64>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e004      	b.n	8004faa <HAL_GPIO_DeInit+0x6e>
 8004fa0:	2307      	movs	r3, #7
 8004fa2:	e002      	b.n	8004faa <HAL_GPIO_DeInit+0x6e>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <HAL_GPIO_DeInit+0x6e>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	f002 0203 	and.w	r2, r2, #3
 8004fb0:	0092      	lsls	r2, r2, #2
 8004fb2:	4093      	lsls	r3, r2
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d136      	bne.n	8005028 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004fba:	4b46      	ldr	r3, [pc, #280]	; (80050d4 <HAL_GPIO_DeInit+0x198>)
 8004fbc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	43db      	mvns	r3, r3
 8004fc4:	4943      	ldr	r1, [pc, #268]	; (80050d4 <HAL_GPIO_DeInit+0x198>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004fcc:	4b41      	ldr	r3, [pc, #260]	; (80050d4 <HAL_GPIO_DeInit+0x198>)
 8004fce:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	43db      	mvns	r3, r3
 8004fd6:	493f      	ldr	r1, [pc, #252]	; (80050d4 <HAL_GPIO_DeInit+0x198>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004fde:	4b3d      	ldr	r3, [pc, #244]	; (80050d4 <HAL_GPIO_DeInit+0x198>)
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	493b      	ldr	r1, [pc, #236]	; (80050d4 <HAL_GPIO_DeInit+0x198>)
 8004fe8:	4013      	ands	r3, r2
 8004fea:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004fec:	4b39      	ldr	r3, [pc, #228]	; (80050d4 <HAL_GPIO_DeInit+0x198>)
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	43db      	mvns	r3, r3
 8004ff4:	4937      	ldr	r1, [pc, #220]	; (80050d4 <HAL_GPIO_DeInit+0x198>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f003 0303 	and.w	r3, r3, #3
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	2207      	movs	r2, #7
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800500a:	4a2f      	ldr	r2, [pc, #188]	; (80050c8 <HAL_GPIO_DeInit+0x18c>)
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	089b      	lsrs	r3, r3, #2
 8005010:	3302      	adds	r3, #2
 8005012:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	43da      	mvns	r2, r3
 800501a:	482b      	ldr	r0, [pc, #172]	; (80050c8 <HAL_GPIO_DeInit+0x18c>)
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	089b      	lsrs	r3, r3, #2
 8005020:	400a      	ands	r2, r1
 8005022:	3302      	adds	r3, #2
 8005024:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	2103      	movs	r1, #3
 8005032:	fa01 f303 	lsl.w	r3, r1, r3
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	08da      	lsrs	r2, r3, #3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3208      	adds	r2, #8
 8005044:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	220f      	movs	r2, #15
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	43db      	mvns	r3, r3
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	08d2      	lsrs	r2, r2, #3
 800505c:	4019      	ands	r1, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3208      	adds	r2, #8
 8005062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689a      	ldr	r2, [r3, #8]
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	2103      	movs	r1, #3
 8005070:	fa01 f303 	lsl.w	r3, r1, r3
 8005074:	43db      	mvns	r3, r3
 8005076:	401a      	ands	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	2101      	movs	r1, #1
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	fa01 f303 	lsl.w	r3, r1, r3
 8005088:	43db      	mvns	r3, r3
 800508a:	401a      	ands	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	2103      	movs	r1, #3
 800509a:	fa01 f303 	lsl.w	r3, r1, r3
 800509e:	43db      	mvns	r3, r3
 80050a0:	401a      	ands	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	60da      	str	r2, [r3, #12]
    }

    position++;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	3301      	adds	r3, #1
 80050aa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	fa22 f303 	lsr.w	r3, r2, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f47f af49 	bne.w	8004f4c <HAL_GPIO_DeInit+0x10>
  }
}
 80050ba:	bf00      	nop
 80050bc:	bf00      	nop
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bc80      	pop	{r7}
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40010000 	.word	0x40010000
 80050cc:	48000400 	.word	0x48000400
 80050d0:	48000800 	.word	0x48000800
 80050d4:	58000800 	.word	0x58000800

080050d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	807b      	strh	r3, [r7, #2]
 80050e4:	4613      	mov	r3, r2
 80050e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050e8:	787b      	ldrb	r3, [r7, #1]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050ee:	887a      	ldrh	r2, [r7, #2]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050f4:	e002      	b.n	80050fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050f6:	887a      	ldrh	r2, [r7, #2]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	bc80      	pop	{r7}
 8005104:	4770      	bx	lr
	...

08005108 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	4603      	mov	r3, r0
 8005110:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005112:	4b08      	ldr	r3, [pc, #32]	; (8005134 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	88fb      	ldrh	r3, [r7, #6]
 8005118:	4013      	ands	r3, r2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d006      	beq.n	800512c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800511e:	4a05      	ldr	r2, [pc, #20]	; (8005134 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005120:	88fb      	ldrh	r3, [r7, #6]
 8005122:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005124:	88fb      	ldrh	r3, [r7, #6]
 8005126:	4618      	mov	r0, r3
 8005128:	f004 fe2c 	bl	8009d84 <HAL_GPIO_EXTI_Callback>
  }
}
 800512c:	bf00      	nop
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	58000800 	.word	0x58000800

08005138 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800513c:	4b04      	ldr	r3, [pc, #16]	; (8005150 <HAL_PWR_EnableBkUpAccess+0x18>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a03      	ldr	r2, [pc, #12]	; (8005150 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005146:	6013      	str	r3, [r2, #0]
}
 8005148:	bf00      	nop
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr
 8005150:	58000400 	.word	0x58000400

08005154 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	460b      	mov	r3, r1
 800515e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10c      	bne.n	8005180 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005166:	4b13      	ldr	r3, [pc, #76]	; (80051b4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800516e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005172:	d10d      	bne.n	8005190 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005174:	f000 f83c 	bl	80051f0 <HAL_PWREx_DisableLowPowerRunMode>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d008      	beq.n	8005190 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800517e:	e015      	b.n	80051ac <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005180:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800518c:	f000 f822 	bl	80051d4 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005190:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	4a08      	ldr	r2, [pc, #32]	; (80051b8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005196:	f023 0304 	bic.w	r3, r3, #4
 800519a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800519c:	78fb      	ldrb	r3, [r7, #3]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80051a2:	bf30      	wfi
 80051a4:	e002      	b.n	80051ac <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80051a6:	bf40      	sev
    __WFE();
 80051a8:	bf20      	wfe
    __WFE();
 80051aa:	bf20      	wfe
  }
}
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	58000400 	.word	0x58000400
 80051b8:	e000ed00 	.word	0xe000ed00

080051bc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80051c0:	4b03      	ldr	r3, [pc, #12]	; (80051d0 <HAL_PWREx_GetVoltageRange+0x14>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bc80      	pop	{r7}
 80051ce:	4770      	bx	lr
 80051d0:	58000400 	.word	0x58000400

080051d4 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80051d8:	4b04      	ldr	r3, [pc, #16]	; (80051ec <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a03      	ldr	r2, [pc, #12]	; (80051ec <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80051de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051e2:	6013      	str	r3, [r2, #0]
}
 80051e4:	bf00      	nop
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bc80      	pop	{r7}
 80051ea:	4770      	bx	lr
 80051ec:	58000400 	.word	0x58000400

080051f0 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80051f6:	4b16      	ldr	r3, [pc, #88]	; (8005250 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a15      	ldr	r2, [pc, #84]	; (8005250 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80051fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005200:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005202:	4b14      	ldr	r3, [pc, #80]	; (8005254 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2232      	movs	r2, #50	; 0x32
 8005208:	fb02 f303 	mul.w	r3, r2, r3
 800520c:	4a12      	ldr	r2, [pc, #72]	; (8005258 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800520e:	fba2 2303 	umull	r2, r3, r2, r3
 8005212:	0c9b      	lsrs	r3, r3, #18
 8005214:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005216:	e002      	b.n	800521e <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3b01      	subs	r3, #1
 800521c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800521e:	4b0c      	ldr	r3, [pc, #48]	; (8005250 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800522a:	d102      	bne.n	8005232 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f2      	bne.n	8005218 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005232:	4b07      	ldr	r3, [pc, #28]	; (8005250 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800523a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800523e:	d101      	bne.n	8005244 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e000      	b.n	8005246 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr
 8005250:	58000400 	.word	0x58000400
 8005254:	20000000 	.word	0x20000000
 8005258:	431bde83 	.word	0x431bde83

0800525c <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	4603      	mov	r3, r0
 8005264:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005266:	4b10      	ldr	r3, [pc, #64]	; (80052a8 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f023 0307 	bic.w	r3, r3, #7
 800526e:	4a0e      	ldr	r2, [pc, #56]	; (80052a8 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005270:	f043 0302 	orr.w	r3, r3, #2
 8005274:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005276:	4b0d      	ldr	r3, [pc, #52]	; (80052ac <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	4a0c      	ldr	r2, [pc, #48]	; (80052ac <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800527c:	f043 0304 	orr.w	r3, r3, #4
 8005280:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005282:	79fb      	ldrb	r3, [r7, #7]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005288:	bf30      	wfi
 800528a:	e002      	b.n	8005292 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800528c:	bf40      	sev
    __WFE();
 800528e:	bf20      	wfe
    __WFE();
 8005290:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005292:	4b06      	ldr	r3, [pc, #24]	; (80052ac <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	4a05      	ldr	r2, [pc, #20]	; (80052ac <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005298:	f023 0304 	bic.w	r3, r3, #4
 800529c:	6113      	str	r3, [r2, #16]
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr
 80052a8:	58000400 	.word	0x58000400
 80052ac:	e000ed00 	.word	0xe000ed00

080052b0 <LL_PWR_IsEnabledBkUpAccess>:
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80052b4:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c0:	d101      	bne.n	80052c6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bc80      	pop	{r7}
 80052ce:	4770      	bx	lr
 80052d0:	58000400 	.word	0x58000400

080052d4 <LL_RCC_HSE_EnableTcxo>:
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80052d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052e6:	6013      	str	r3, [r2, #0]
}
 80052e8:	bf00      	nop
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bc80      	pop	{r7}
 80052ee:	4770      	bx	lr

080052f0 <LL_RCC_HSE_DisableTcxo>:
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80052f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005302:	6013      	str	r3, [r2, #0]
}
 8005304:	bf00      	nop
 8005306:	46bd      	mov	sp, r7
 8005308:	bc80      	pop	{r7}
 800530a:	4770      	bx	lr

0800530c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800531a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800531e:	d101      	bne.n	8005324 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005320:	2301      	movs	r3, #1
 8005322:	e000      	b.n	8005326 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr

0800532e <LL_RCC_HSE_Enable>:
{
 800532e:	b480      	push	{r7}
 8005330:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800533c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005340:	6013      	str	r3, [r2, #0]
}
 8005342:	bf00      	nop
 8005344:	46bd      	mov	sp, r7
 8005346:	bc80      	pop	{r7}
 8005348:	4770      	bx	lr

0800534a <LL_RCC_HSE_Disable>:
{
 800534a:	b480      	push	{r7}
 800534c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800534e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800535c:	6013      	str	r3, [r2, #0]
}
 800535e:	bf00      	nop
 8005360:	46bd      	mov	sp, r7
 8005362:	bc80      	pop	{r7}
 8005364:	4770      	bx	lr

08005366 <LL_RCC_HSE_IsReady>:
{
 8005366:	b480      	push	{r7}
 8005368:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800536a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005374:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005378:	d101      	bne.n	800537e <LL_RCC_HSE_IsReady+0x18>
 800537a:	2301      	movs	r3, #1
 800537c:	e000      	b.n	8005380 <LL_RCC_HSE_IsReady+0x1a>
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr

08005388 <LL_RCC_HSI_Enable>:
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800538c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800539a:	6013      	str	r3, [r2, #0]
}
 800539c:	bf00      	nop
 800539e:	46bd      	mov	sp, r7
 80053a0:	bc80      	pop	{r7}
 80053a2:	4770      	bx	lr

080053a4 <LL_RCC_HSI_Disable>:
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80053a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053b6:	6013      	str	r3, [r2, #0]
}
 80053b8:	bf00      	nop
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc80      	pop	{r7}
 80053be:	4770      	bx	lr

080053c0 <LL_RCC_HSI_IsReady>:
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80053c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d2:	d101      	bne.n	80053d8 <LL_RCC_HSI_IsReady+0x18>
 80053d4:	2301      	movs	r3, #1
 80053d6:	e000      	b.n	80053da <LL_RCC_HSI_IsReady+0x1a>
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	46bd      	mov	sp, r7
 80053de:	bc80      	pop	{r7}
 80053e0:	4770      	bx	lr

080053e2 <LL_RCC_HSI_SetCalibTrimming>:
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80053ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	061b      	lsls	r3, r3, #24
 80053f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053fc:	4313      	orrs	r3, r2
 80053fe:	604b      	str	r3, [r1, #4]
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	bc80      	pop	{r7}
 8005408:	4770      	bx	lr

0800540a <LL_RCC_LSE_IsReady>:
{
 800540a:	b480      	push	{r7}
 800540c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800540e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b02      	cmp	r3, #2
 800541c:	d101      	bne.n	8005422 <LL_RCC_LSE_IsReady+0x18>
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <LL_RCC_LSE_IsReady+0x1a>
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	46bd      	mov	sp, r7
 8005428:	bc80      	pop	{r7}
 800542a:	4770      	bx	lr

0800542c <LL_RCC_LSI_Enable>:
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005438:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005444:	bf00      	nop
 8005446:	46bd      	mov	sp, r7
 8005448:	bc80      	pop	{r7}
 800544a:	4770      	bx	lr

0800544c <LL_RCC_LSI_Disable>:
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005458:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800545c:	f023 0301 	bic.w	r3, r3, #1
 8005460:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005464:	bf00      	nop
 8005466:	46bd      	mov	sp, r7
 8005468:	bc80      	pop	{r7}
 800546a:	4770      	bx	lr

0800546c <LL_RCC_LSI_IsReady>:
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b02      	cmp	r3, #2
 800547e:	d101      	bne.n	8005484 <LL_RCC_LSI_IsReady+0x18>
 8005480:	2301      	movs	r3, #1
 8005482:	e000      	b.n	8005486 <LL_RCC_LSI_IsReady+0x1a>
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	46bd      	mov	sp, r7
 800548a:	bc80      	pop	{r7}
 800548c:	4770      	bx	lr

0800548e <LL_RCC_MSI_Enable>:
{
 800548e:	b480      	push	{r7}
 8005490:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800549c:	f043 0301 	orr.w	r3, r3, #1
 80054a0:	6013      	str	r3, [r2, #0]
}
 80054a2:	bf00      	nop
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bc80      	pop	{r7}
 80054a8:	4770      	bx	lr

080054aa <LL_RCC_MSI_Disable>:
{
 80054aa:	b480      	push	{r7}
 80054ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80054ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054b8:	f023 0301 	bic.w	r3, r3, #1
 80054bc:	6013      	str	r3, [r2, #0]
}
 80054be:	bf00      	nop
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bc80      	pop	{r7}
 80054c4:	4770      	bx	lr

080054c6 <LL_RCC_MSI_IsReady>:
{
 80054c6:	b480      	push	{r7}
 80054c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80054ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d101      	bne.n	80054dc <LL_RCC_MSI_IsReady+0x16>
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <LL_RCC_MSI_IsReady+0x18>
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bc80      	pop	{r7}
 80054e4:	4770      	bx	lr

080054e6 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80054e6:	b480      	push	{r7}
 80054e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80054ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	d101      	bne.n	80054fc <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	46bd      	mov	sp, r7
 8005502:	bc80      	pop	{r7}
 8005504:	4770      	bx	lr

08005506 <LL_RCC_MSI_GetRange>:
{
 8005506:	b480      	push	{r7}
 8005508:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800550a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005514:	4618      	mov	r0, r3
 8005516:	46bd      	mov	sp, r7
 8005518:	bc80      	pop	{r7}
 800551a:	4770      	bx	lr

0800551c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005524:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005528:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800552c:	4618      	mov	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr

08005534 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800553c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	021b      	lsls	r3, r3, #8
 800554a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800554e:	4313      	orrs	r3, r2
 8005550:	604b      	str	r3, [r1, #4]
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	bc80      	pop	{r7}
 800555a:	4770      	bx	lr

0800555c <LL_RCC_SetSysClkSource>:
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f023 0203 	bic.w	r2, r3, #3
 800556e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4313      	orrs	r3, r2
 8005576:	608b      	str	r3, [r1, #8]
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	bc80      	pop	{r7}
 8005580:	4770      	bx	lr

08005582 <LL_RCC_GetSysClkSource>:
{
 8005582:	b480      	push	{r7}
 8005584:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f003 030c 	and.w	r3, r3, #12
}
 8005590:	4618      	mov	r0, r3
 8005592:	46bd      	mov	sp, r7
 8005594:	bc80      	pop	{r7}
 8005596:	4770      	bx	lr

08005598 <LL_RCC_SetAHBPrescaler>:
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80055a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	608b      	str	r3, [r1, #8]
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bc80      	pop	{r7}
 80055bc:	4770      	bx	lr

080055be <LL_RCC_SetAHB3Prescaler>:
{
 80055be:	b480      	push	{r7}
 80055c0:	b083      	sub	sp, #12
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80055c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80055ce:	f023 020f 	bic.w	r2, r3, #15
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	091b      	lsrs	r3, r3, #4
 80055d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bc80      	pop	{r7}
 80055e8:	4770      	bx	lr

080055ea <LL_RCC_SetAPB1Prescaler>:
{
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80055f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4313      	orrs	r3, r2
 8005604:	608b      	str	r3, [r1, #8]
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	bc80      	pop	{r7}
 800560e:	4770      	bx	lr

08005610 <LL_RCC_SetAPB2Prescaler>:
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005622:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4313      	orrs	r3, r2
 800562a:	608b      	str	r3, [r1, #8]
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	bc80      	pop	{r7}
 8005634:	4770      	bx	lr

08005636 <LL_RCC_GetAHBPrescaler>:
{
 8005636:	b480      	push	{r7}
 8005638:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800563a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005644:	4618      	mov	r0, r3
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr

0800564c <LL_RCC_GetAHB3Prescaler>:
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005654:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800565e:	4618      	mov	r0, r3
 8005660:	46bd      	mov	sp, r7
 8005662:	bc80      	pop	{r7}
 8005664:	4770      	bx	lr

08005666 <LL_RCC_GetAPB1Prescaler>:
{
 8005666:	b480      	push	{r7}
 8005668:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800566a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005674:	4618      	mov	r0, r3
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr

0800567c <LL_RCC_GetAPB2Prescaler>:
{
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800568a:	4618      	mov	r0, r3
 800568c:	46bd      	mov	sp, r7
 800568e:	bc80      	pop	{r7}
 8005690:	4770      	bx	lr

08005692 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005692:	b480      	push	{r7}
 8005694:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056a4:	6013      	str	r3, [r2, #0]
}
 80056a6:	bf00      	nop
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bc80      	pop	{r7}
 80056ac:	4770      	bx	lr

080056ae <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80056ae:	b480      	push	{r7}
 80056b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80056b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056c0:	6013      	str	r3, [r2, #0]
}
 80056c2:	bf00      	nop
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bc80      	pop	{r7}
 80056c8:	4770      	bx	lr

080056ca <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80056ca:	b480      	push	{r7}
 80056cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80056ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056dc:	d101      	bne.n	80056e2 <LL_RCC_PLL_IsReady+0x18>
 80056de:	2301      	movs	r3, #1
 80056e0:	e000      	b.n	80056e4 <LL_RCC_PLL_IsReady+0x1a>
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr

080056ec <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80056f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	0a1b      	lsrs	r3, r3, #8
 80056f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr

08005704 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005712:	4618      	mov	r0, r3
 8005714:	46bd      	mov	sp, r7
 8005716:	bc80      	pop	{r7}
 8005718:	4770      	bx	lr

0800571a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800571a:	b480      	push	{r7}
 800571c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800571e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005728:	4618      	mov	r0, r3
 800572a:	46bd      	mov	sp, r7
 800572c:	bc80      	pop	{r7}
 800572e:	4770      	bx	lr

08005730 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005730:	b480      	push	{r7}
 8005732:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f003 0303 	and.w	r3, r3, #3
}
 800573e:	4618      	mov	r0, r3
 8005740:	46bd      	mov	sp, r7
 8005742:	bc80      	pop	{r7}
 8005744:	4770      	bx	lr

08005746 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005746:	b480      	push	{r7}
 8005748:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800574a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005758:	d101      	bne.n	800575e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800575a:	2301      	movs	r3, #1
 800575c:	e000      	b.n	8005760 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr

08005768 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800576c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005770:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800577c:	d101      	bne.n	8005782 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800577e:	2301      	movs	r3, #1
 8005780:	e000      	b.n	8005784 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr

0800578c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800579e:	d101      	bne.n	80057a4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80057a0:	2301      	movs	r3, #1
 80057a2:	e000      	b.n	80057a6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bc80      	pop	{r7}
 80057ac:	4770      	bx	lr

080057ae <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80057ae:	b480      	push	{r7}
 80057b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80057b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057c0:	d101      	bne.n	80057c6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80057c2:	2301      	movs	r3, #1
 80057c4:	e000      	b.n	80057c8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr

080057d0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b088      	sub	sp, #32
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e38b      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057e2:	f7ff fece 	bl	8005582 <LL_RCC_GetSysClkSource>
 80057e6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057e8:	f7ff ffa2 	bl	8005730 <LL_RCC_PLL_GetMainSource>
 80057ec:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 80c9 	beq.w	800598e <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d005      	beq.n	800580e <HAL_RCC_OscConfig+0x3e>
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	2b0c      	cmp	r3, #12
 8005806:	d17b      	bne.n	8005900 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d178      	bne.n	8005900 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800580e:	f7ff fe5a 	bl	80054c6 <LL_RCC_MSI_IsReady>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d005      	beq.n	8005824 <HAL_RCC_OscConfig+0x54>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e36a      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0308 	and.w	r3, r3, #8
 8005832:	2b00      	cmp	r3, #0
 8005834:	d005      	beq.n	8005842 <HAL_RCC_OscConfig+0x72>
 8005836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005840:	e006      	b.n	8005850 <HAL_RCC_OscConfig+0x80>
 8005842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800584a:	091b      	lsrs	r3, r3, #4
 800584c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005850:	4293      	cmp	r3, r2
 8005852:	d222      	bcs.n	800589a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005858:	4618      	mov	r0, r3
 800585a:	f000 fd51 	bl	8006300 <RCC_SetFlashLatencyFromMSIRange>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e348      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005872:	f043 0308 	orr.w	r3, r3, #8
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005886:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800588a:	4313      	orrs	r3, r2
 800588c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	4618      	mov	r0, r3
 8005894:	f7ff fe4e 	bl	8005534 <LL_RCC_MSI_SetCalibTrimming>
 8005898:	e021      	b.n	80058de <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800589a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058a4:	f043 0308 	orr.w	r3, r3, #8
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058bc:	4313      	orrs	r3, r2
 80058be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff fe35 	bl	8005534 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fd16 	bl	8006300 <RCC_SetFlashLatencyFromMSIRange>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e30d      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80058de:	f000 fcd7 	bl	8006290 <HAL_RCC_GetHCLKFreq>
 80058e2:	4603      	mov	r3, r0
 80058e4:	4aa1      	ldr	r2, [pc, #644]	; (8005b6c <HAL_RCC_OscConfig+0x39c>)
 80058e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80058e8:	4ba1      	ldr	r3, [pc, #644]	; (8005b70 <HAL_RCC_OscConfig+0x3a0>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fc fa19 	bl	8001d24 <HAL_InitTick>
 80058f2:	4603      	mov	r3, r0
 80058f4:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80058f6:	7cfb      	ldrb	r3, [r7, #19]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d047      	beq.n	800598c <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80058fc:	7cfb      	ldrb	r3, [r7, #19]
 80058fe:	e2fc      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d02c      	beq.n	8005962 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005908:	f7ff fdc1 	bl	800548e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800590c:	f7fc fa14 	bl	8001d38 <HAL_GetTick>
 8005910:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005912:	e008      	b.n	8005926 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005914:	f7fc fa10 	bl	8001d38 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b02      	cmp	r3, #2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e2e9      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005926:	f7ff fdce 	bl	80054c6 <LL_RCC_MSI_IsReady>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0f1      	beq.n	8005914 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800593a:	f043 0308 	orr.w	r3, r3, #8
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005952:	4313      	orrs	r3, r2
 8005954:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	4618      	mov	r0, r3
 800595c:	f7ff fdea 	bl	8005534 <LL_RCC_MSI_SetCalibTrimming>
 8005960:	e015      	b.n	800598e <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005962:	f7ff fda2 	bl	80054aa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005966:	f7fc f9e7 	bl	8001d38 <HAL_GetTick>
 800596a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800596c:	e008      	b.n	8005980 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800596e:	f7fc f9e3 	bl	8001d38 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d901      	bls.n	8005980 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e2bc      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005980:	f7ff fda1 	bl	80054c6 <LL_RCC_MSI_IsReady>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1f1      	bne.n	800596e <HAL_RCC_OscConfig+0x19e>
 800598a:	e000      	b.n	800598e <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800598c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d05f      	beq.n	8005a5a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	2b08      	cmp	r3, #8
 800599e:	d005      	beq.n	80059ac <HAL_RCC_OscConfig+0x1dc>
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	2b0c      	cmp	r3, #12
 80059a4:	d10d      	bne.n	80059c2 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	2b03      	cmp	r3, #3
 80059aa:	d10a      	bne.n	80059c2 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059ac:	f7ff fcdb 	bl	8005366 <LL_RCC_HSE_IsReady>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d050      	beq.n	8005a58 <HAL_RCC_OscConfig+0x288>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d14c      	bne.n	8005a58 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e29b      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80059c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059d4:	4313      	orrs	r3, r2
 80059d6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059e0:	d102      	bne.n	80059e8 <HAL_RCC_OscConfig+0x218>
 80059e2:	f7ff fca4 	bl	800532e <LL_RCC_HSE_Enable>
 80059e6:	e00d      	b.n	8005a04 <HAL_RCC_OscConfig+0x234>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80059f0:	d104      	bne.n	80059fc <HAL_RCC_OscConfig+0x22c>
 80059f2:	f7ff fc6f 	bl	80052d4 <LL_RCC_HSE_EnableTcxo>
 80059f6:	f7ff fc9a 	bl	800532e <LL_RCC_HSE_Enable>
 80059fa:	e003      	b.n	8005a04 <HAL_RCC_OscConfig+0x234>
 80059fc:	f7ff fca5 	bl	800534a <LL_RCC_HSE_Disable>
 8005a00:	f7ff fc76 	bl	80052f0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d012      	beq.n	8005a32 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0c:	f7fc f994 	bl	8001d38 <HAL_GetTick>
 8005a10:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a14:	f7fc f990 	bl	8001d38 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b64      	cmp	r3, #100	; 0x64
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e269      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005a26:	f7ff fc9e 	bl	8005366 <LL_RCC_HSE_IsReady>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0f1      	beq.n	8005a14 <HAL_RCC_OscConfig+0x244>
 8005a30:	e013      	b.n	8005a5a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a32:	f7fc f981 	bl	8001d38 <HAL_GetTick>
 8005a36:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005a38:	e008      	b.n	8005a4c <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a3a:	f7fc f97d 	bl	8001d38 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b64      	cmp	r3, #100	; 0x64
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e256      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005a4c:	f7ff fc8b 	bl	8005366 <LL_RCC_HSE_IsReady>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1f1      	bne.n	8005a3a <HAL_RCC_OscConfig+0x26a>
 8005a56:	e000      	b.n	8005a5a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a58:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d04b      	beq.n	8005afe <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d005      	beq.n	8005a78 <HAL_RCC_OscConfig+0x2a8>
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	2b0c      	cmp	r3, #12
 8005a70:	d113      	bne.n	8005a9a <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d110      	bne.n	8005a9a <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a78:	f7ff fca2 	bl	80053c0 <LL_RCC_HSI_IsReady>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d005      	beq.n	8005a8e <HAL_RCC_OscConfig+0x2be>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e235      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7ff fca5 	bl	80053e2 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a98:	e031      	b.n	8005afe <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d019      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005aa2:	f7ff fc71 	bl	8005388 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa6:	f7fc f947 	bl	8001d38 <HAL_GetTick>
 8005aaa:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005aac:	e008      	b.n	8005ac0 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aae:	f7fc f943 	bl	8001d38 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e21c      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005ac0:	f7ff fc7e 	bl	80053c0 <LL_RCC_HSI_IsReady>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d0f1      	beq.n	8005aae <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff fc87 	bl	80053e2 <LL_RCC_HSI_SetCalibTrimming>
 8005ad4:	e013      	b.n	8005afe <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ad6:	f7ff fc65 	bl	80053a4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ada:	f7fc f92d 	bl	8001d38 <HAL_GetTick>
 8005ade:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005ae0:	e008      	b.n	8005af4 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ae2:	f7fc f929 	bl	8001d38 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d901      	bls.n	8005af4 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e202      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005af4:	f7ff fc64 	bl	80053c0 <LL_RCC_HSI_IsReady>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1f1      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0308 	and.w	r3, r3, #8
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d06f      	beq.n	8005bea <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d057      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8005b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b1a:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	69da      	ldr	r2, [r3, #28]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f003 0310 	and.w	r3, r3, #16
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d036      	beq.n	8005b98 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d006      	beq.n	8005b42 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e1db      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d018      	beq.n	8005b7e <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8005b4c:	f7ff fc7e 	bl	800544c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b50:	f7fc f8f2 	bl	8001d38 <HAL_GetTick>
 8005b54:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005b56:	e00d      	b.n	8005b74 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b58:	f7fc f8ee 	bl	8001d38 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b11      	cmp	r3, #17
 8005b64:	d906      	bls.n	8005b74 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e1c7      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
 8005b6a:	bf00      	nop
 8005b6c:	20000000 	.word	0x20000000
 8005b70:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 8005b74:	f7ff fc7a 	bl	800546c <LL_RCC_LSI_IsReady>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1ec      	bne.n	8005b58 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b86:	f023 0210 	bic.w	r2, r3, #16
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b92:	4313      	orrs	r3, r2
 8005b94:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b98:	f7ff fc48 	bl	800542c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b9c:	f7fc f8cc 	bl	8001d38 <HAL_GetTick>
 8005ba0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ba4:	f7fc f8c8 	bl	8001d38 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b11      	cmp	r3, #17
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e1a1      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005bb6:	f7ff fc59 	bl	800546c <LL_RCC_LSI_IsReady>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d0f1      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x3d4>
 8005bc0:	e013      	b.n	8005bea <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bc2:	f7ff fc43 	bl	800544c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc6:	f7fc f8b7 	bl	8001d38 <HAL_GetTick>
 8005bca:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005bcc:	e008      	b.n	8005be0 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bce:	f7fc f8b3 	bl	8001d38 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b11      	cmp	r3, #17
 8005bda:	d901      	bls.n	8005be0 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e18c      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005be0:	f7ff fc44 	bl	800546c <LL_RCC_LSI_IsReady>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1f1      	bne.n	8005bce <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0304 	and.w	r3, r3, #4
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 80d8 	beq.w	8005da8 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005bf8:	f7ff fb5a 	bl	80052b0 <LL_PWR_IsEnabledBkUpAccess>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d113      	bne.n	8005c2a <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005c02:	f7ff fa99 	bl	8005138 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c06:	f7fc f897 	bl	8001d38 <HAL_GetTick>
 8005c0a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005c0c:	e008      	b.n	8005c20 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c0e:	f7fc f893 	bl	8001d38 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e16c      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005c20:	f7ff fb46 	bl	80052b0 <LL_PWR_IsEnabledBkUpAccess>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0f1      	beq.n	8005c0e <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d07b      	beq.n	8005d2a <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	2b85      	cmp	r3, #133	; 0x85
 8005c38:	d003      	beq.n	8005c42 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	2b05      	cmp	r3, #5
 8005c40:	d109      	bne.n	8005c56 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c4e:	f043 0304 	orr.w	r3, r3, #4
 8005c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c56:	f7fc f86f 	bl	8001d38 <HAL_GetTick>
 8005c5a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c68:	f043 0301 	orr.w	r3, r3, #1
 8005c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005c70:	e00a      	b.n	8005c88 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c72:	f7fc f861 	bl	8001d38 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d901      	bls.n	8005c88 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e138      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005c88:	f7ff fbbf 	bl	800540a <LL_RCC_LSE_IsReady>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d0ef      	beq.n	8005c72 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	2b81      	cmp	r3, #129	; 0x81
 8005c98:	d003      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	2b85      	cmp	r3, #133	; 0x85
 8005ca0:	d121      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca2:	f7fc f849 	bl	8001d38 <HAL_GetTick>
 8005ca6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005cbc:	e00a      	b.n	8005cd4 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cbe:	f7fc f83b 	bl	8001d38 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e112      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0ec      	beq.n	8005cbe <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005ce4:	e060      	b.n	8005da8 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce6:	f7fc f827 	bl	8001d38 <HAL_GetTick>
 8005cea:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005d00:	e00a      	b.n	8005d18 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d02:	f7fc f819 	bl	8001d38 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d901      	bls.n	8005d18 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e0f0      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1ec      	bne.n	8005d02 <HAL_RCC_OscConfig+0x532>
 8005d28:	e03e      	b.n	8005da8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d2a:	f7fc f805 	bl	8001d38 <HAL_GetTick>
 8005d2e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005d44:	e00a      	b.n	8005d5c <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d46:	f7fb fff7 	bl	8001d38 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d901      	bls.n	8005d5c <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e0ce      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1ec      	bne.n	8005d46 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d6c:	f7fb ffe4 	bl	8001d38 <HAL_GetTick>
 8005d70:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d7e:	f023 0301 	bic.w	r3, r3, #1
 8005d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005d86:	e00a      	b.n	8005d9e <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d88:	f7fb ffd6 	bl	8001d38 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e0ad      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005d9e:	f7ff fb34 	bl	800540a <LL_RCC_LSE_IsReady>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1ef      	bne.n	8005d88 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 80a3 	beq.w	8005ef8 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	2b0c      	cmp	r3, #12
 8005db6:	d076      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d14b      	bne.n	8005e58 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dc0:	f7ff fc75 	bl	80056ae <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc4:	f7fb ffb8 	bl	8001d38 <HAL_GetTick>
 8005dc8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005dca:	e008      	b.n	8005dde <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dcc:	f7fb ffb4 	bl	8001d38 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b0a      	cmp	r3, #10
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e08d      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005dde:	f7ff fc74 	bl	80056ca <LL_RCC_PLL_IsReady>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1f1      	bne.n	8005dcc <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	4b45      	ldr	r3, [pc, #276]	; (8005f04 <HAL_RCC_OscConfig+0x734>)
 8005df0:	4013      	ands	r3, r2
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005dfa:	4311      	orrs	r1, r2
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e00:	0212      	lsls	r2, r2, #8
 8005e02:	4311      	orrs	r1, r2
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e08:	4311      	orrs	r1, r2
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e0e:	4311      	orrs	r1, r2
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005e14:	430a      	orrs	r2, r1
 8005e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e1e:	f7ff fc38 	bl	8005692 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e30:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e32:	f7fb ff81 	bl	8001d38 <HAL_GetTick>
 8005e36:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005e38:	e008      	b.n	8005e4c <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e3a:	f7fb ff7d 	bl	8001d38 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b0a      	cmp	r3, #10
 8005e46:	d901      	bls.n	8005e4c <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e056      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005e4c:	f7ff fc3d 	bl	80056ca <LL_RCC_PLL_IsReady>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0f1      	beq.n	8005e3a <HAL_RCC_OscConfig+0x66a>
 8005e56:	e04f      	b.n	8005ef8 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e58:	f7ff fc29 	bl	80056ae <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e66:	f023 0303 	bic.w	r3, r3, #3
 8005e6a:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8005e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e76:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e7e:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e80:	f7fb ff5a 	bl	8001d38 <HAL_GetTick>
 8005e84:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e88:	f7fb ff56 	bl	8001d38 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b0a      	cmp	r3, #10
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e02f      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005e9a:	f7ff fc16 	bl	80056ca <LL_RCC_PLL_IsReady>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1f1      	bne.n	8005e88 <HAL_RCC_OscConfig+0x6b8>
 8005ea4:	e028      	b.n	8005ef8 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d101      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e023      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	f003 0203 	and.w	r2, r3, #3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d115      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d10e      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee0:	021b      	lsls	r3, r3, #8
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d106      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d001      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e000      	b.n	8005efa <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3720      	adds	r7, #32
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	11c1808c 	.word	0x11c1808c

08005f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d101      	bne.n	8005f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e10f      	b.n	800613c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f1c:	4b89      	ldr	r3, [pc, #548]	; (8006144 <HAL_RCC_ClockConfig+0x23c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d91b      	bls.n	8005f62 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f2a:	4b86      	ldr	r3, [pc, #536]	; (8006144 <HAL_RCC_ClockConfig+0x23c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f023 0207 	bic.w	r2, r3, #7
 8005f32:	4984      	ldr	r1, [pc, #528]	; (8006144 <HAL_RCC_ClockConfig+0x23c>)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f3a:	f7fb fefd 	bl	8001d38 <HAL_GetTick>
 8005f3e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005f42:	f7fb fef9 	bl	8001d38 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e0f3      	b.n	800613c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f54:	4b7b      	ldr	r3, [pc, #492]	; (8006144 <HAL_RCC_ClockConfig+0x23c>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0307 	and.w	r3, r3, #7
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d1ef      	bne.n	8005f42 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d016      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7ff fb10 	bl	8005598 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005f78:	f7fb fede 	bl	8001d38 <HAL_GetTick>
 8005f7c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005f7e:	e008      	b.n	8005f92 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f80:	f7fb feda 	bl	8001d38 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d901      	bls.n	8005f92 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e0d4      	b.n	800613c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005f92:	f7ff fbd8 	bl	8005746 <LL_RCC_IsActiveFlag_HPRE>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d0f1      	beq.n	8005f80 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d016      	beq.n	8005fd6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7ff fb06 	bl	80055be <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005fb2:	f7fb fec1 	bl	8001d38 <HAL_GetTick>
 8005fb6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005fb8:	e008      	b.n	8005fcc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005fba:	f7fb febd 	bl	8001d38 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d901      	bls.n	8005fcc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e0b7      	b.n	800613c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005fcc:	f7ff fbcc 	bl	8005768 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d0f1      	beq.n	8005fba <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0304 	and.w	r3, r3, #4
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d016      	beq.n	8006010 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff faff 	bl	80055ea <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005fec:	f7fb fea4 	bl	8001d38 <HAL_GetTick>
 8005ff0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005ff2:	e008      	b.n	8006006 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ff4:	f7fb fea0 	bl	8001d38 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e09a      	b.n	800613c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006006:	f7ff fbc1 	bl	800578c <LL_RCC_IsActiveFlag_PPRE1>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0f1      	beq.n	8005ff4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0308 	and.w	r3, r3, #8
 8006018:	2b00      	cmp	r3, #0
 800601a:	d017      	beq.n	800604c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	00db      	lsls	r3, r3, #3
 8006022:	4618      	mov	r0, r3
 8006024:	f7ff faf4 	bl	8005610 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006028:	f7fb fe86 	bl	8001d38 <HAL_GetTick>
 800602c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800602e:	e008      	b.n	8006042 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006030:	f7fb fe82 	bl	8001d38 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b02      	cmp	r3, #2
 800603c:	d901      	bls.n	8006042 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e07c      	b.n	800613c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006042:	f7ff fbb4 	bl	80057ae <LL_RCC_IsActiveFlag_PPRE2>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d0f1      	beq.n	8006030 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b00      	cmp	r3, #0
 8006056:	d043      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d106      	bne.n	800606e <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006060:	f7ff f981 	bl	8005366 <LL_RCC_HSE_IsReady>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d11e      	bne.n	80060a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e066      	b.n	800613c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	2b03      	cmp	r3, #3
 8006074:	d106      	bne.n	8006084 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006076:	f7ff fb28 	bl	80056ca <LL_RCC_PLL_IsReady>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d113      	bne.n	80060a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e05b      	b.n	800613c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d106      	bne.n	800609a <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800608c:	f7ff fa1b 	bl	80054c6 <LL_RCC_MSI_IsReady>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d108      	bne.n	80060a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e050      	b.n	800613c <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800609a:	f7ff f991 	bl	80053c0 <LL_RCC_HSI_IsReady>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e049      	b.n	800613c <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff fa55 	bl	800555c <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060b2:	f7fb fe41 	bl	8001d38 <HAL_GetTick>
 80060b6:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060b8:	e00a      	b.n	80060d0 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060ba:	f7fb fe3d 	bl	8001d38 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d901      	bls.n	80060d0 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e035      	b.n	800613c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060d0:	f7ff fa57 	bl	8005582 <LL_RCC_GetSysClkSource>
 80060d4:	4602      	mov	r2, r0
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	429a      	cmp	r2, r3
 80060de:	d1ec      	bne.n	80060ba <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060e0:	4b18      	ldr	r3, [pc, #96]	; (8006144 <HAL_RCC_ClockConfig+0x23c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0307 	and.w	r3, r3, #7
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d21b      	bcs.n	8006126 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ee:	4b15      	ldr	r3, [pc, #84]	; (8006144 <HAL_RCC_ClockConfig+0x23c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f023 0207 	bic.w	r2, r3, #7
 80060f6:	4913      	ldr	r1, [pc, #76]	; (8006144 <HAL_RCC_ClockConfig+0x23c>)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060fe:	f7fb fe1b 	bl	8001d38 <HAL_GetTick>
 8006102:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006104:	e008      	b.n	8006118 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006106:	f7fb fe17 	bl	8001d38 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d901      	bls.n	8006118 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e011      	b.n	800613c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006118:	4b0a      	ldr	r3, [pc, #40]	; (8006144 <HAL_RCC_ClockConfig+0x23c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0307 	and.w	r3, r3, #7
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d1ef      	bne.n	8006106 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006126:	f000 f8b3 	bl	8006290 <HAL_RCC_GetHCLKFreq>
 800612a:	4603      	mov	r3, r0
 800612c:	4a06      	ldr	r2, [pc, #24]	; (8006148 <HAL_RCC_ClockConfig+0x240>)
 800612e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006130:	4b06      	ldr	r3, [pc, #24]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4618      	mov	r0, r3
 8006136:	f7fb fdf5 	bl	8001d24 <HAL_InitTick>
 800613a:	4603      	mov	r3, r0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	58004000 	.word	0x58004000
 8006148:	20000000 	.word	0x20000000
 800614c:	20000004 	.word	0x20000004

08006150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006150:	b590      	push	{r4, r7, lr}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800615e:	f7ff fa10 	bl	8005582 <LL_RCC_GetSysClkSource>
 8006162:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006164:	f7ff fae4 	bl	8005730 <LL_RCC_PLL_GetMainSource>
 8006168:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d005      	beq.n	800617c <HAL_RCC_GetSysClockFreq+0x2c>
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	2b0c      	cmp	r3, #12
 8006174:	d139      	bne.n	80061ea <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d136      	bne.n	80061ea <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800617c:	f7ff f9b3 	bl	80054e6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d115      	bne.n	80061b2 <HAL_RCC_GetSysClockFreq+0x62>
 8006186:	f7ff f9ae 	bl	80054e6 <LL_RCC_MSI_IsEnabledRangeSelect>
 800618a:	4603      	mov	r3, r0
 800618c:	2b01      	cmp	r3, #1
 800618e:	d106      	bne.n	800619e <HAL_RCC_GetSysClockFreq+0x4e>
 8006190:	f7ff f9b9 	bl	8005506 <LL_RCC_MSI_GetRange>
 8006194:	4603      	mov	r3, r0
 8006196:	0a1b      	lsrs	r3, r3, #8
 8006198:	f003 030f 	and.w	r3, r3, #15
 800619c:	e005      	b.n	80061aa <HAL_RCC_GetSysClockFreq+0x5a>
 800619e:	f7ff f9bd 	bl	800551c <LL_RCC_MSI_GetRangeAfterStandby>
 80061a2:	4603      	mov	r3, r0
 80061a4:	0a1b      	lsrs	r3, r3, #8
 80061a6:	f003 030f 	and.w	r3, r3, #15
 80061aa:	4a36      	ldr	r2, [pc, #216]	; (8006284 <HAL_RCC_GetSysClockFreq+0x134>)
 80061ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061b0:	e014      	b.n	80061dc <HAL_RCC_GetSysClockFreq+0x8c>
 80061b2:	f7ff f998 	bl	80054e6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d106      	bne.n	80061ca <HAL_RCC_GetSysClockFreq+0x7a>
 80061bc:	f7ff f9a3 	bl	8005506 <LL_RCC_MSI_GetRange>
 80061c0:	4603      	mov	r3, r0
 80061c2:	091b      	lsrs	r3, r3, #4
 80061c4:	f003 030f 	and.w	r3, r3, #15
 80061c8:	e005      	b.n	80061d6 <HAL_RCC_GetSysClockFreq+0x86>
 80061ca:	f7ff f9a7 	bl	800551c <LL_RCC_MSI_GetRangeAfterStandby>
 80061ce:	4603      	mov	r3, r0
 80061d0:	091b      	lsrs	r3, r3, #4
 80061d2:	f003 030f 	and.w	r3, r3, #15
 80061d6:	4a2b      	ldr	r2, [pc, #172]	; (8006284 <HAL_RCC_GetSysClockFreq+0x134>)
 80061d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061dc:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d115      	bne.n	8006210 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80061e8:	e012      	b.n	8006210 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d102      	bne.n	80061f6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80061f0:	4b25      	ldr	r3, [pc, #148]	; (8006288 <HAL_RCC_GetSysClockFreq+0x138>)
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	e00c      	b.n	8006210 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d109      	bne.n	8006210 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80061fc:	f7ff f886 	bl	800530c <LL_RCC_HSE_IsEnabledDiv2>
 8006200:	4603      	mov	r3, r0
 8006202:	2b01      	cmp	r3, #1
 8006204:	d102      	bne.n	800620c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006206:	4b20      	ldr	r3, [pc, #128]	; (8006288 <HAL_RCC_GetSysClockFreq+0x138>)
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	e001      	b.n	8006210 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800620c:	4b1f      	ldr	r3, [pc, #124]	; (800628c <HAL_RCC_GetSysClockFreq+0x13c>)
 800620e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006210:	f7ff f9b7 	bl	8005582 <LL_RCC_GetSysClkSource>
 8006214:	4603      	mov	r3, r0
 8006216:	2b0c      	cmp	r3, #12
 8006218:	d12f      	bne.n	800627a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800621a:	f7ff fa89 	bl	8005730 <LL_RCC_PLL_GetMainSource>
 800621e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b02      	cmp	r3, #2
 8006224:	d003      	beq.n	800622e <HAL_RCC_GetSysClockFreq+0xde>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b03      	cmp	r3, #3
 800622a:	d003      	beq.n	8006234 <HAL_RCC_GetSysClockFreq+0xe4>
 800622c:	e00d      	b.n	800624a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800622e:	4b16      	ldr	r3, [pc, #88]	; (8006288 <HAL_RCC_GetSysClockFreq+0x138>)
 8006230:	60fb      	str	r3, [r7, #12]
        break;
 8006232:	e00d      	b.n	8006250 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006234:	f7ff f86a 	bl	800530c <LL_RCC_HSE_IsEnabledDiv2>
 8006238:	4603      	mov	r3, r0
 800623a:	2b01      	cmp	r3, #1
 800623c:	d102      	bne.n	8006244 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800623e:	4b12      	ldr	r3, [pc, #72]	; (8006288 <HAL_RCC_GetSysClockFreq+0x138>)
 8006240:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006242:	e005      	b.n	8006250 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006244:	4b11      	ldr	r3, [pc, #68]	; (800628c <HAL_RCC_GetSysClockFreq+0x13c>)
 8006246:	60fb      	str	r3, [r7, #12]
        break;
 8006248:	e002      	b.n	8006250 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	60fb      	str	r3, [r7, #12]
        break;
 800624e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006250:	f7ff fa4c 	bl	80056ec <LL_RCC_PLL_GetN>
 8006254:	4602      	mov	r2, r0
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	fb03 f402 	mul.w	r4, r3, r2
 800625c:	f7ff fa5d 	bl	800571a <LL_RCC_PLL_GetDivider>
 8006260:	4603      	mov	r3, r0
 8006262:	091b      	lsrs	r3, r3, #4
 8006264:	3301      	adds	r3, #1
 8006266:	fbb4 f4f3 	udiv	r4, r4, r3
 800626a:	f7ff fa4b 	bl	8005704 <LL_RCC_PLL_GetR>
 800626e:	4603      	mov	r3, r0
 8006270:	0f5b      	lsrs	r3, r3, #29
 8006272:	3301      	adds	r3, #1
 8006274:	fbb4 f3f3 	udiv	r3, r4, r3
 8006278:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800627a:	697b      	ldr	r3, [r7, #20]
}
 800627c:	4618      	mov	r0, r3
 800627e:	371c      	adds	r7, #28
 8006280:	46bd      	mov	sp, r7
 8006282:	bd90      	pop	{r4, r7, pc}
 8006284:	0801b5f8 	.word	0x0801b5f8
 8006288:	00f42400 	.word	0x00f42400
 800628c:	01e84800 	.word	0x01e84800

08006290 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006290:	b598      	push	{r3, r4, r7, lr}
 8006292:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006294:	f7ff ff5c 	bl	8006150 <HAL_RCC_GetSysClockFreq>
 8006298:	4604      	mov	r4, r0
 800629a:	f7ff f9cc 	bl	8005636 <LL_RCC_GetAHBPrescaler>
 800629e:	4603      	mov	r3, r0
 80062a0:	091b      	lsrs	r3, r3, #4
 80062a2:	f003 030f 	and.w	r3, r3, #15
 80062a6:	4a03      	ldr	r2, [pc, #12]	; (80062b4 <HAL_RCC_GetHCLKFreq+0x24>)
 80062a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	bd98      	pop	{r3, r4, r7, pc}
 80062b4:	0801b598 	.word	0x0801b598

080062b8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062b8:	b598      	push	{r3, r4, r7, lr}
 80062ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80062bc:	f7ff ffe8 	bl	8006290 <HAL_RCC_GetHCLKFreq>
 80062c0:	4604      	mov	r4, r0
 80062c2:	f7ff f9d0 	bl	8005666 <LL_RCC_GetAPB1Prescaler>
 80062c6:	4603      	mov	r3, r0
 80062c8:	0a1b      	lsrs	r3, r3, #8
 80062ca:	4a03      	ldr	r2, [pc, #12]	; (80062d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062d0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	bd98      	pop	{r3, r4, r7, pc}
 80062d8:	0801b5d8 	.word	0x0801b5d8

080062dc <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062dc:	b598      	push	{r3, r4, r7, lr}
 80062de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80062e0:	f7ff ffd6 	bl	8006290 <HAL_RCC_GetHCLKFreq>
 80062e4:	4604      	mov	r4, r0
 80062e6:	f7ff f9c9 	bl	800567c <LL_RCC_GetAPB2Prescaler>
 80062ea:	4603      	mov	r3, r0
 80062ec:	0adb      	lsrs	r3, r3, #11
 80062ee:	4a03      	ldr	r2, [pc, #12]	; (80062fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80062f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	bd98      	pop	{r3, r4, r7, pc}
 80062fc:	0801b5d8 	.word	0x0801b5d8

08006300 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006300:	b590      	push	{r4, r7, lr}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	091b      	lsrs	r3, r3, #4
 800630c:	f003 030f 	and.w	r3, r3, #15
 8006310:	4a10      	ldr	r2, [pc, #64]	; (8006354 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8006312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006316:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006318:	f7ff f998 	bl	800564c <LL_RCC_GetAHB3Prescaler>
 800631c:	4603      	mov	r3, r0
 800631e:	091b      	lsrs	r3, r3, #4
 8006320:	f003 030f 	and.w	r3, r3, #15
 8006324:	4a0c      	ldr	r2, [pc, #48]	; (8006358 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006330:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	4a09      	ldr	r2, [pc, #36]	; (800635c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8006336:	fba2 2303 	umull	r2, r3, r2, r3
 800633a:	0c9c      	lsrs	r4, r3, #18
 800633c:	f7fe ff3e 	bl	80051bc <HAL_PWREx_GetVoltageRange>
 8006340:	4603      	mov	r3, r0
 8006342:	4619      	mov	r1, r3
 8006344:	4620      	mov	r0, r4
 8006346:	f000 f80b 	bl	8006360 <RCC_SetFlashLatency>
 800634a:	4603      	mov	r3, r0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	bd90      	pop	{r4, r7, pc}
 8006354:	0801b5f8 	.word	0x0801b5f8
 8006358:	0801b598 	.word	0x0801b598
 800635c:	431bde83 	.word	0x431bde83

08006360 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08e      	sub	sp, #56	; 0x38
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800636a:	4a3a      	ldr	r2, [pc, #232]	; (8006454 <RCC_SetFlashLatency+0xf4>)
 800636c:	f107 0320 	add.w	r3, r7, #32
 8006370:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006374:	6018      	str	r0, [r3, #0]
 8006376:	3304      	adds	r3, #4
 8006378:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800637a:	4a37      	ldr	r2, [pc, #220]	; (8006458 <RCC_SetFlashLatency+0xf8>)
 800637c:	f107 0318 	add.w	r3, r7, #24
 8006380:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006384:	6018      	str	r0, [r3, #0]
 8006386:	3304      	adds	r3, #4
 8006388:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800638a:	4a34      	ldr	r2, [pc, #208]	; (800645c <RCC_SetFlashLatency+0xfc>)
 800638c:	f107 030c 	add.w	r3, r7, #12
 8006390:	ca07      	ldmia	r2, {r0, r1, r2}
 8006392:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006396:	2300      	movs	r3, #0
 8006398:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063a0:	d11b      	bne.n	80063da <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80063a2:	2300      	movs	r3, #0
 80063a4:	633b      	str	r3, [r7, #48]	; 0x30
 80063a6:	e014      	b.n	80063d2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80063a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	3338      	adds	r3, #56	; 0x38
 80063ae:	443b      	add	r3, r7
 80063b0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80063b4:	461a      	mov	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d807      	bhi.n	80063cc <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	3338      	adds	r3, #56	; 0x38
 80063c2:	443b      	add	r3, r7
 80063c4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80063c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063ca:	e021      	b.n	8006410 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80063cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ce:	3301      	adds	r3, #1
 80063d0:	633b      	str	r3, [r7, #48]	; 0x30
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d9e7      	bls.n	80063a8 <RCC_SetFlashLatency+0x48>
 80063d8:	e01a      	b.n	8006410 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80063da:	2300      	movs	r3, #0
 80063dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063de:	e014      	b.n	800640a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80063e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	3338      	adds	r3, #56	; 0x38
 80063e6:	443b      	add	r3, r7
 80063e8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80063ec:	461a      	mov	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d807      	bhi.n	8006404 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80063f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	3338      	adds	r3, #56	; 0x38
 80063fa:	443b      	add	r3, r7
 80063fc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006400:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006402:	e005      	b.n	8006410 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006406:	3301      	adds	r3, #1
 8006408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800640a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640c:	2b02      	cmp	r3, #2
 800640e:	d9e7      	bls.n	80063e0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006410:	4b13      	ldr	r3, [pc, #76]	; (8006460 <RCC_SetFlashLatency+0x100>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f023 0207 	bic.w	r2, r3, #7
 8006418:	4911      	ldr	r1, [pc, #68]	; (8006460 <RCC_SetFlashLatency+0x100>)
 800641a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800641c:	4313      	orrs	r3, r2
 800641e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006420:	f7fb fc8a 	bl	8001d38 <HAL_GetTick>
 8006424:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006426:	e008      	b.n	800643a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006428:	f7fb fc86 	bl	8001d38 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b02      	cmp	r3, #2
 8006434:	d901      	bls.n	800643a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e007      	b.n	800644a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800643a:	4b09      	ldr	r3, [pc, #36]	; (8006460 <RCC_SetFlashLatency+0x100>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006444:	429a      	cmp	r2, r3
 8006446:	d1ef      	bne.n	8006428 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3738      	adds	r7, #56	; 0x38
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	0801b0c4 	.word	0x0801b0c4
 8006458:	0801b0cc 	.word	0x0801b0cc
 800645c:	0801b0d4 	.word	0x0801b0d4
 8006460:	58004000 	.word	0x58004000

08006464 <LL_RCC_LSE_IsReady>:
{
 8006464:	b480      	push	{r7}
 8006466:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800646c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b02      	cmp	r3, #2
 8006476:	d101      	bne.n	800647c <LL_RCC_LSE_IsReady+0x18>
 8006478:	2301      	movs	r3, #1
 800647a:	e000      	b.n	800647e <LL_RCC_LSE_IsReady+0x1a>
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	46bd      	mov	sp, r7
 8006482:	bc80      	pop	{r7}
 8006484:	4770      	bx	lr

08006486 <LL_RCC_SetUSARTClockSource>:
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800648e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006492:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	0c1b      	lsrs	r3, r3, #16
 800649a:	43db      	mvns	r3, r3
 800649c:	401a      	ands	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064a6:	4313      	orrs	r3, r2
 80064a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bc80      	pop	{r7}
 80064b4:	4770      	bx	lr

080064b6 <LL_RCC_SetI2SClockSource>:
{
 80064b6:	b480      	push	{r7}
 80064b8:	b083      	sub	sp, #12
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80064be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80064d6:	bf00      	nop
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	bc80      	pop	{r7}
 80064de:	4770      	bx	lr

080064e0 <LL_RCC_SetLPUARTClockSource>:
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80064e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	bc80      	pop	{r7}
 8006508:	4770      	bx	lr

0800650a <LL_RCC_SetI2CClockSource>:
{
 800650a:	b480      	push	{r7}
 800650c:	b083      	sub	sp, #12
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006516:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	091b      	lsrs	r3, r3, #4
 800651e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006522:	43db      	mvns	r3, r3
 8006524:	401a      	ands	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	011b      	lsls	r3, r3, #4
 800652a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800652e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006532:	4313      	orrs	r3, r2
 8006534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	bc80      	pop	{r7}
 8006540:	4770      	bx	lr

08006542 <LL_RCC_SetLPTIMClockSource>:
{
 8006542:	b480      	push	{r7}
 8006544:	b083      	sub	sp, #12
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800654a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800654e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	0c1b      	lsrs	r3, r3, #16
 8006556:	041b      	lsls	r3, r3, #16
 8006558:	43db      	mvns	r3, r3
 800655a:	401a      	ands	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	041b      	lsls	r3, r3, #16
 8006560:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006564:	4313      	orrs	r3, r2
 8006566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800656a:	bf00      	nop
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	bc80      	pop	{r7}
 8006572:	4770      	bx	lr

08006574 <LL_RCC_SetRNGClockSource>:
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800657c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006584:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006588:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4313      	orrs	r3, r2
 8006590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	bc80      	pop	{r7}
 800659c:	4770      	bx	lr

0800659e <LL_RCC_SetADCClockSource>:
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80065a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80065be:	bf00      	nop
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bc80      	pop	{r7}
 80065c6:	4770      	bx	lr

080065c8 <LL_RCC_SetRTCClockSource>:
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80065d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bc80      	pop	{r7}
 80065f0:	4770      	bx	lr

080065f2 <LL_RCC_GetRTCClockSource>:
{
 80065f2:	b480      	push	{r7}
 80065f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80065f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006602:	4618      	mov	r0, r3
 8006604:	46bd      	mov	sp, r7
 8006606:	bc80      	pop	{r7}
 8006608:	4770      	bx	lr

0800660a <LL_RCC_ForceBackupDomainReset>:
{
 800660a:	b480      	push	{r7}
 800660c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800660e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006616:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800661a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800661e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006622:	bf00      	nop
 8006624:	46bd      	mov	sp, r7
 8006626:	bc80      	pop	{r7}
 8006628:	4770      	bx	lr

0800662a <LL_RCC_ReleaseBackupDomainReset>:
{
 800662a:	b480      	push	{r7}
 800662c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800662e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006636:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800663a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800663e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006642:	bf00      	nop
 8006644:	46bd      	mov	sp, r7
 8006646:	bc80      	pop	{r7}
 8006648:	4770      	bx	lr
	...

0800664c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006654:	2300      	movs	r3, #0
 8006656:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006658:	2300      	movs	r3, #0
 800665a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800665c:	2300      	movs	r3, #0
 800665e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d058      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800666c:	f7fe fd64 	bl	8005138 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006670:	f7fb fb62 	bl	8001d38 <HAL_GetTick>
 8006674:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006676:	e009      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006678:	f7fb fb5e 	bl	8001d38 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	2b02      	cmp	r3, #2
 8006684:	d902      	bls.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	74fb      	strb	r3, [r7, #19]
        break;
 800668a:	e006      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800668c:	4b7b      	ldr	r3, [pc, #492]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006698:	d1ee      	bne.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800669a:	7cfb      	ldrb	r3, [r7, #19]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d13c      	bne.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80066a0:	f7ff ffa7 	bl	80065f2 <LL_RCC_GetRTCClockSource>
 80066a4:	4602      	mov	r2, r0
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d00f      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80066ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ba:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066bc:	f7ff ffa5 	bl	800660a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066c0:	f7ff ffb3 	bl	800662a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80066c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d014      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d8:	f7fb fb2e 	bl	8001d38 <HAL_GetTick>
 80066dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80066de:	e00b      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066e0:	f7fb fb2a 	bl	8001d38 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d902      	bls.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	74fb      	strb	r3, [r7, #19]
            break;
 80066f6:	e004      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80066f8:	f7ff feb4 	bl	8006464 <LL_RCC_LSE_IsReady>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d1ee      	bne.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006702:	7cfb      	ldrb	r3, [r7, #19]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d105      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800670c:	4618      	mov	r0, r3
 800670e:	f7ff ff5b 	bl	80065c8 <LL_RCC_SetRTCClockSource>
 8006712:	e004      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006714:	7cfb      	ldrb	r3, [r7, #19]
 8006716:	74bb      	strb	r3, [r7, #18]
 8006718:	e001      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671a:	7cfb      	ldrb	r3, [r7, #19]
 800671c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d004      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	4618      	mov	r0, r3
 8006730:	f7ff fea9 	bl	8006486 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d004      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	4618      	mov	r0, r3
 8006746:	f7ff fe9e 	bl	8006486 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0320 	and.w	r3, r3, #32
 8006752:	2b00      	cmp	r3, #0
 8006754:	d004      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	4618      	mov	r0, r3
 800675c:	f7ff fec0 	bl	80064e0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006768:	2b00      	cmp	r3, #0
 800676a:	d004      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a1b      	ldr	r3, [r3, #32]
 8006770:	4618      	mov	r0, r3
 8006772:	f7ff fee6 	bl	8006542 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800677e:	2b00      	cmp	r3, #0
 8006780:	d004      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff fedb 	bl	8006542 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006794:	2b00      	cmp	r3, #0
 8006796:	d004      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679c:	4618      	mov	r0, r3
 800679e:	f7ff fed0 	bl	8006542 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d004      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7ff fea9 	bl	800650a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d004      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7ff fe9e 	bl	800650a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d004      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff fe93 	bl	800650a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0310 	and.w	r3, r3, #16
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d011      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7ff fe5e 	bl	80064b6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006802:	d107      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800680e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006812:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d010      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006824:	4618      	mov	r0, r3
 8006826:	f7ff fea5 	bl	8006574 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682e:	2b00      	cmp	r3, #0
 8006830:	d107      	bne.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800683c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006840:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d011      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff fea3 	bl	800659e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006860:	d107      	bne.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800686c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006870:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006872:	7cbb      	ldrb	r3, [r7, #18]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3718      	adds	r7, #24
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	58000400 	.word	0x58000400

08006880 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d068      	beq.n	8006964 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d106      	bne.n	80068ac <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7fa ff82 	bl	80017b0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2202      	movs	r2, #2
 80068b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068b4:	4b2e      	ldr	r3, [pc, #184]	; (8006970 <HAL_RTC_Init+0xf0>)
 80068b6:	22ca      	movs	r2, #202	; 0xca
 80068b8:	625a      	str	r2, [r3, #36]	; 0x24
 80068ba:	4b2d      	ldr	r3, [pc, #180]	; (8006970 <HAL_RTC_Init+0xf0>)
 80068bc:	2253      	movs	r2, #83	; 0x53
 80068be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fa0f 	bl	8006ce4 <RTC_EnterInitMode>
 80068c6:	4603      	mov	r3, r0
 80068c8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d13f      	bne.n	8006950 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80068d0:	4b27      	ldr	r3, [pc, #156]	; (8006970 <HAL_RTC_Init+0xf0>)
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	4a26      	ldr	r2, [pc, #152]	; (8006970 <HAL_RTC_Init+0xf0>)
 80068d6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80068da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068de:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80068e0:	4b23      	ldr	r3, [pc, #140]	; (8006970 <HAL_RTC_Init+0xf0>)
 80068e2:	699a      	ldr	r2, [r3, #24]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6859      	ldr	r1, [r3, #4]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	4319      	orrs	r1, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	430b      	orrs	r3, r1
 80068f4:	491e      	ldr	r1, [pc, #120]	; (8006970 <HAL_RTC_Init+0xf0>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68da      	ldr	r2, [r3, #12]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	041b      	lsls	r3, r3, #16
 8006904:	491a      	ldr	r1, [pc, #104]	; (8006970 <HAL_RTC_Init+0xf0>)
 8006906:	4313      	orrs	r3, r2
 8006908:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800690a:	4b19      	ldr	r3, [pc, #100]	; (8006970 <HAL_RTC_Init+0xf0>)
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691a:	430b      	orrs	r3, r1
 800691c:	4914      	ldr	r1, [pc, #80]	; (8006970 <HAL_RTC_Init+0xf0>)
 800691e:	4313      	orrs	r3, r2
 8006920:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fa12 	bl	8006d4c <RTC_ExitInitMode>
 8006928:	4603      	mov	r3, r0
 800692a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10e      	bne.n	8006950 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006932:	4b0f      	ldr	r3, [pc, #60]	; (8006970 <HAL_RTC_Init+0xf0>)
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a19      	ldr	r1, [r3, #32]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	4319      	orrs	r1, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	430b      	orrs	r3, r1
 800694a:	4909      	ldr	r1, [pc, #36]	; (8006970 <HAL_RTC_Init+0xf0>)
 800694c:	4313      	orrs	r3, r2
 800694e:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006950:	4b07      	ldr	r3, [pc, #28]	; (8006970 <HAL_RTC_Init+0xf0>)
 8006952:	22ff      	movs	r2, #255	; 0xff
 8006954:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006956:	7bfb      	ldrb	r3, [r7, #15]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d103      	bne.n	8006964 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006964:	7bfb      	ldrb	r3, [r7, #15]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	40002800 	.word	0x40002800

08006974 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006974:	b590      	push	{r4, r7, lr}
 8006976:	b087      	sub	sp, #28
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006980:	2300      	movs	r3, #0
 8006982:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800698a:	2b01      	cmp	r3, #1
 800698c:	d101      	bne.n	8006992 <HAL_RTC_SetAlarm_IT+0x1e>
 800698e:	2302      	movs	r3, #2
 8006990:	e0f3      	b.n	8006b7a <HAL_RTC_SetAlarm_IT+0x206>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2202      	movs	r2, #2
 800699e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80069a2:	4b78      	ldr	r3, [pc, #480]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069aa:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069b2:	d06a      	beq.n	8006a8a <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d13a      	bne.n	8006a30 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80069ba:	4b72      	ldr	r3, [pc, #456]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d102      	bne.n	80069cc <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2200      	movs	r2, #0
 80069ca:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 f9f5 	bl	8006dc8 <RTC_ByteToBcd2>
 80069de:	4603      	mov	r3, r0
 80069e0:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	785b      	ldrb	r3, [r3, #1]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 f9ee 	bl	8006dc8 <RTC_ByteToBcd2>
 80069ec:	4603      	mov	r3, r0
 80069ee:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80069f0:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	789b      	ldrb	r3, [r3, #2]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 f9e6 	bl	8006dc8 <RTC_ByteToBcd2>
 80069fc:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80069fe:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	78db      	ldrb	r3, [r3, #3]
 8006a06:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006a08:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 f9d8 	bl	8006dc8 <RTC_ByteToBcd2>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006a1c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006a24:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]
 8006a2e:	e02c      	b.n	8006a8a <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8006a38:	d00d      	beq.n	8006a56 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a42:	d008      	beq.n	8006a56 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006a44:	4b4f      	ldr	r3, [pc, #316]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d102      	bne.n	8006a56 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	2200      	movs	r2, #0
 8006a54:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	785b      	ldrb	r3, [r3, #1]
 8006a60:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006a62:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006a68:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	78db      	ldrb	r3, [r3, #3]
 8006a6e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006a70:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a78:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006a7a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006a80:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006a86:	4313      	orrs	r3, r2
 8006a88:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a8a:	4b3e      	ldr	r3, [pc, #248]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 8006a8c:	22ca      	movs	r2, #202	; 0xca
 8006a8e:	625a      	str	r2, [r3, #36]	; 0x24
 8006a90:	4b3c      	ldr	r3, [pc, #240]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 8006a92:	2253      	movs	r2, #83	; 0x53
 8006a94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a9e:	d12c      	bne.n	8006afa <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006aa0:	4b38      	ldr	r3, [pc, #224]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	4a37      	ldr	r2, [pc, #220]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 8006aa6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006aaa:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006aac:	4b35      	ldr	r3, [pc, #212]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 8006aae:	2201      	movs	r2, #1
 8006ab0:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ab8:	d107      	bne.n	8006aca <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	699a      	ldr	r2, [r3, #24]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	4930      	ldr	r1, [pc, #192]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	644b      	str	r3, [r1, #68]	; 0x44
 8006ac8:	e006      	b.n	8006ad8 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006aca:	4a2e      	ldr	r2, [pc, #184]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006ad0:	4a2c      	ldr	r2, [pc, #176]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006ad8:	4a2a      	ldr	r2, [pc, #168]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae4:	f043 0201 	orr.w	r2, r3, #1
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006aec:	4b25      	ldr	r3, [pc, #148]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	4a24      	ldr	r2, [pc, #144]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 8006af2:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8006af6:	6193      	str	r3, [r2, #24]
 8006af8:	e02b      	b.n	8006b52 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006afa:	4b22      	ldr	r3, [pc, #136]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	4a21      	ldr	r2, [pc, #132]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 8006b00:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006b04:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006b06:	4b1f      	ldr	r3, [pc, #124]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 8006b08:	2202      	movs	r2, #2
 8006b0a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b12:	d107      	bne.n	8006b24 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	699a      	ldr	r2, [r3, #24]
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	4919      	ldr	r1, [pc, #100]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006b22:	e006      	b.n	8006b32 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006b24:	4a17      	ldr	r2, [pc, #92]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006b2a:	4a16      	ldr	r2, [pc, #88]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006b32:	4a14      	ldr	r2, [pc, #80]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3e:	f043 0202 	orr.w	r2, r3, #2
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006b46:	4b0f      	ldr	r3, [pc, #60]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	4a0e      	ldr	r2, [pc, #56]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 8006b4c:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8006b50:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006b52:	4b0d      	ldr	r3, [pc, #52]	; (8006b88 <HAL_RTC_SetAlarm_IT+0x214>)
 8006b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b58:	4a0b      	ldr	r2, [pc, #44]	; (8006b88 <HAL_RTC_SetAlarm_IT+0x214>)
 8006b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b5e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b62:	4b08      	ldr	r3, [pc, #32]	; (8006b84 <HAL_RTC_SetAlarm_IT+0x210>)
 8006b64:	22ff      	movs	r2, #255	; 0xff
 8006b66:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	371c      	adds	r7, #28
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd90      	pop	{r4, r7, pc}
 8006b82:	bf00      	nop
 8006b84:	40002800 	.word	0x40002800
 8006b88:	58000800 	.word	0x58000800

08006b8c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d101      	bne.n	8006ba4 <HAL_RTC_DeactivateAlarm+0x18>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	e048      	b.n	8006c36 <HAL_RTC_DeactivateAlarm+0xaa>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bb4:	4b22      	ldr	r3, [pc, #136]	; (8006c40 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006bb6:	22ca      	movs	r2, #202	; 0xca
 8006bb8:	625a      	str	r2, [r3, #36]	; 0x24
 8006bba:	4b21      	ldr	r3, [pc, #132]	; (8006c40 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006bbc:	2253      	movs	r2, #83	; 0x53
 8006bbe:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bc6:	d115      	bne.n	8006bf4 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006bc8:	4b1d      	ldr	r3, [pc, #116]	; (8006c40 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	4a1c      	ldr	r2, [pc, #112]	; (8006c40 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006bce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006bd2:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006bd4:	4b1a      	ldr	r3, [pc, #104]	; (8006c40 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd8:	4a19      	ldr	r2, [pc, #100]	; (8006c40 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006bda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bde:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be4:	f023 0201 	bic.w	r2, r3, #1
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006bec:	4b14      	ldr	r3, [pc, #80]	; (8006c40 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006bee:	2201      	movs	r2, #1
 8006bf0:	65da      	str	r2, [r3, #92]	; 0x5c
 8006bf2:	e014      	b.n	8006c1e <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006bf4:	4b12      	ldr	r3, [pc, #72]	; (8006c40 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	4a11      	ldr	r2, [pc, #68]	; (8006c40 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006bfa:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006bfe:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006c00:	4b0f      	ldr	r3, [pc, #60]	; (8006c40 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c04:	4a0e      	ldr	r2, [pc, #56]	; (8006c40 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006c06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c0a:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c10:	f023 0202 	bic.w	r2, r3, #2
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006c18:	4b09      	ldr	r3, [pc, #36]	; (8006c40 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c1e:	4b08      	ldr	r3, [pc, #32]	; (8006c40 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006c20:	22ff      	movs	r2, #255	; 0xff
 8006c22:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bc80      	pop	{r7}
 8006c3e:	4770      	bx	lr
 8006c40:	40002800 	.word	0x40002800

08006c44 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006c4c:	4b11      	ldr	r3, [pc, #68]	; (8006c94 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006c4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c54:	4013      	ands	r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d005      	beq.n	8006c6e <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006c62:	4b0c      	ldr	r3, [pc, #48]	; (8006c94 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006c64:	2201      	movs	r2, #1
 8006c66:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7fb faa8 	bl	80021be <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006c78:	4b06      	ldr	r3, [pc, #24]	; (8006c94 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f94a 	bl	8006f18 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006c8c:	bf00      	nop
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	40002800 	.word	0x40002800

08006c98 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006ca0:	4b0f      	ldr	r3, [pc, #60]	; (8006ce0 <HAL_RTC_WaitForSynchro+0x48>)
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	4a0e      	ldr	r2, [pc, #56]	; (8006ce0 <HAL_RTC_WaitForSynchro+0x48>)
 8006ca6:	f023 0320 	bic.w	r3, r3, #32
 8006caa:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006cac:	f7fb f844 	bl	8001d38 <HAL_GetTick>
 8006cb0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006cb2:	e009      	b.n	8006cc8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006cb4:	f7fb f840 	bl	8001d38 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e006      	b.n	8006cd6 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006cc8:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <HAL_RTC_WaitForSynchro+0x48>)
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	f003 0320 	and.w	r3, r3, #32
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0ef      	beq.n	8006cb4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	40002800 	.word	0x40002800

08006ce4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cec:	2300      	movs	r3, #0
 8006cee:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006cf0:	4b15      	ldr	r3, [pc, #84]	; (8006d48 <RTC_EnterInitMode+0x64>)
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d120      	bne.n	8006d3e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006cfc:	4b12      	ldr	r3, [pc, #72]	; (8006d48 <RTC_EnterInitMode+0x64>)
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	4a11      	ldr	r2, [pc, #68]	; (8006d48 <RTC_EnterInitMode+0x64>)
 8006d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d06:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006d08:	f7fb f816 	bl	8001d38 <HAL_GetTick>
 8006d0c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006d0e:	e00d      	b.n	8006d2c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006d10:	f7fb f812 	bl	8001d38 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d1e:	d905      	bls.n	8006d2c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2203      	movs	r2, #3
 8006d28:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006d2c:	4b06      	ldr	r3, [pc, #24]	; (8006d48 <RTC_EnterInitMode+0x64>)
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d102      	bne.n	8006d3e <RTC_EnterInitMode+0x5a>
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	d1e8      	bne.n	8006d10 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	40002800 	.word	0x40002800

08006d4c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d54:	2300      	movs	r3, #0
 8006d56:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006d58:	4b1a      	ldr	r3, [pc, #104]	; (8006dc4 <RTC_ExitInitMode+0x78>)
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	4a19      	ldr	r2, [pc, #100]	; (8006dc4 <RTC_ExitInitMode+0x78>)
 8006d5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d62:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006d64:	4b17      	ldr	r3, [pc, #92]	; (8006dc4 <RTC_ExitInitMode+0x78>)
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	f003 0320 	and.w	r3, r3, #32
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10c      	bne.n	8006d8a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7ff ff91 	bl	8006c98 <HAL_RTC_WaitForSynchro>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d01e      	beq.n	8006dba <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2203      	movs	r2, #3
 8006d80:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	73fb      	strb	r3, [r7, #15]
 8006d88:	e017      	b.n	8006dba <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006d8a:	4b0e      	ldr	r3, [pc, #56]	; (8006dc4 <RTC_ExitInitMode+0x78>)
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	4a0d      	ldr	r2, [pc, #52]	; (8006dc4 <RTC_ExitInitMode+0x78>)
 8006d90:	f023 0320 	bic.w	r3, r3, #32
 8006d94:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7ff ff7e 	bl	8006c98 <HAL_RTC_WaitForSynchro>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d005      	beq.n	8006dae <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2203      	movs	r2, #3
 8006da6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006dae:	4b05      	ldr	r3, [pc, #20]	; (8006dc4 <RTC_ExitInitMode+0x78>)
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	4a04      	ldr	r2, [pc, #16]	; (8006dc4 <RTC_ExitInitMode+0x78>)
 8006db4:	f043 0320 	orr.w	r3, r3, #32
 8006db8:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	40002800 	.word	0x40002800

08006dc8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	4603      	mov	r3, r0
 8006dd0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006dd6:	79fb      	ldrb	r3, [r7, #7]
 8006dd8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006dda:	e005      	b.n	8006de8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	3301      	adds	r3, #1
 8006de0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006de2:	7afb      	ldrb	r3, [r7, #11]
 8006de4:	3b0a      	subs	r3, #10
 8006de6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006de8:	7afb      	ldrb	r3, [r7, #11]
 8006dea:	2b09      	cmp	r3, #9
 8006dec:	d8f6      	bhi.n	8006ddc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	011b      	lsls	r3, r3, #4
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	7afb      	ldrb	r3, [r7, #11]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	b2db      	uxtb	r3, r3
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bc80      	pop	{r7}
 8006e04:	4770      	bx	lr
	...

08006e08 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d101      	bne.n	8006e1e <HAL_RTCEx_EnableBypassShadow+0x16>
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	e01f      	b.n	8006e5e <HAL_RTCEx_EnableBypassShadow+0x56>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2202      	movs	r2, #2
 8006e2a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e2e:	4b0e      	ldr	r3, [pc, #56]	; (8006e68 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006e30:	22ca      	movs	r2, #202	; 0xca
 8006e32:	625a      	str	r2, [r3, #36]	; 0x24
 8006e34:	4b0c      	ldr	r3, [pc, #48]	; (8006e68 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006e36:	2253      	movs	r2, #83	; 0x53
 8006e38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006e3a:	4b0b      	ldr	r3, [pc, #44]	; (8006e68 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	4a0a      	ldr	r2, [pc, #40]	; (8006e68 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006e40:	f043 0320 	orr.w	r3, r3, #32
 8006e44:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e46:	4b08      	ldr	r3, [pc, #32]	; (8006e68 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006e48:	22ff      	movs	r2, #255	; 0xff
 8006e4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bc80      	pop	{r7}
 8006e66:	4770      	bx	lr
 8006e68:	40002800 	.word	0x40002800

08006e6c <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d101      	bne.n	8006e82 <HAL_RTCEx_SetSSRU_IT+0x16>
 8006e7e:	2302      	movs	r3, #2
 8006e80:	e027      	b.n	8006ed2 <HAL_RTCEx_SetSSRU_IT+0x66>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e92:	4b12      	ldr	r3, [pc, #72]	; (8006edc <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006e94:	22ca      	movs	r2, #202	; 0xca
 8006e96:	625a      	str	r2, [r3, #36]	; 0x24
 8006e98:	4b10      	ldr	r3, [pc, #64]	; (8006edc <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006e9a:	2253      	movs	r2, #83	; 0x53
 8006e9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006e9e:	4b0f      	ldr	r3, [pc, #60]	; (8006edc <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	4a0e      	ldr	r2, [pc, #56]	; (8006edc <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ea8:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006eaa:	4b0d      	ldr	r3, [pc, #52]	; (8006ee0 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eb0:	4a0b      	ldr	r2, [pc, #44]	; (8006ee0 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006eb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006eb6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006eba:	4b08      	ldr	r3, [pc, #32]	; (8006edc <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006ebc:	22ff      	movs	r2, #255	; 0xff
 8006ebe:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bc80      	pop	{r7}
 8006eda:	4770      	bx	lr
 8006edc:	40002800 	.word	0x40002800
 8006ee0:	58000800 	.word	0x58000800

08006ee4 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006eec:	4b09      	ldr	r3, [pc, #36]	; (8006f14 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d005      	beq.n	8006f04 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8006ef8:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006efa:	2240      	movs	r2, #64	; 0x40
 8006efc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7fb f967 	bl	80021d2 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006f0c:	bf00      	nop
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	40002800 	.word	0x40002800

08006f18 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bc80      	pop	{r7}
 8006f28:	4770      	bx	lr
	...

08006f2c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006f38:	4b07      	ldr	r3, [pc, #28]	; (8006f58 <HAL_RTCEx_BKUPWrite+0x2c>)
 8006f3a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	4413      	add	r3, r2
 8006f44:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	601a      	str	r2, [r3, #0]
}
 8006f4c:	bf00      	nop
 8006f4e:	371c      	adds	r7, #28
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bc80      	pop	{r7}
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	4000b100 	.word	0x4000b100

08006f5c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006f66:	4b07      	ldr	r3, [pc, #28]	; (8006f84 <HAL_RTCEx_BKUPRead+0x28>)
 8006f68:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	4413      	add	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3714      	adds	r7, #20
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bc80      	pop	{r7}
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	4000b100 	.word	0x4000b100

08006f88 <LL_PWR_SetRadioBusyTrigger>:
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006f90:	4b06      	ldr	r3, [pc, #24]	; (8006fac <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f98:	4904      	ldr	r1, [pc, #16]	; (8006fac <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	608b      	str	r3, [r1, #8]
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bc80      	pop	{r7}
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	58000400 	.word	0x58000400

08006fb0 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006fb4:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fba:	4a04      	ldr	r2, [pc, #16]	; (8006fcc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006fc4:	bf00      	nop
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bc80      	pop	{r7}
 8006fca:	4770      	bx	lr
 8006fcc:	58000400 	.word	0x58000400

08006fd0 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006fd4:	4b05      	ldr	r3, [pc, #20]	; (8006fec <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fda:	4a04      	ldr	r2, [pc, #16]	; (8006fec <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006fdc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006fe4:	bf00      	nop
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bc80      	pop	{r7}
 8006fea:	4770      	bx	lr
 8006fec:	58000400 	.word	0x58000400

08006ff0 <LL_PWR_ClearFlag_RFBUSY>:
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006ff4:	4b03      	ldr	r3, [pc, #12]	; (8007004 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8006ff6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ffa:	619a      	str	r2, [r3, #24]
}
 8006ffc:	bf00      	nop
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bc80      	pop	{r7}
 8007002:	4770      	bx	lr
 8007004:	58000400 	.word	0x58000400

08007008 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8007008:	b480      	push	{r7}
 800700a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800700c:	4b06      	ldr	r3, [pc, #24]	; (8007028 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b02      	cmp	r3, #2
 8007016:	d101      	bne.n	800701c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8007018:	2301      	movs	r3, #1
 800701a:	e000      	b.n	800701e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	46bd      	mov	sp, r7
 8007022:	bc80      	pop	{r7}
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	58000400 	.word	0x58000400

0800702c <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 800702c:	b480      	push	{r7}
 800702e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007030:	4b06      	ldr	r3, [pc, #24]	; (800704c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	f003 0304 	and.w	r3, r3, #4
 8007038:	2b04      	cmp	r3, #4
 800703a:	d101      	bne.n	8007040 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800703c:	2301      	movs	r3, #1
 800703e:	e000      	b.n	8007042 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	46bd      	mov	sp, r7
 8007046:	bc80      	pop	{r7}
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	58000400 	.word	0x58000400

08007050 <LL_RCC_RF_DisableReset>:
{
 8007050:	b480      	push	{r7}
 8007052:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800705c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007060:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007064:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007068:	bf00      	nop
 800706a:	46bd      	mov	sp, r7
 800706c:	bc80      	pop	{r7}
 800706e:	4770      	bx	lr

08007070 <LL_RCC_IsRFUnderReset>:
{
 8007070:	b480      	push	{r7}
 8007072:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8007074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800707c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007084:	d101      	bne.n	800708a <LL_RCC_IsRFUnderReset+0x1a>
 8007086:	2301      	movs	r3, #1
 8007088:	e000      	b.n	800708c <LL_RCC_IsRFUnderReset+0x1c>
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	46bd      	mov	sp, r7
 8007090:	bc80      	pop	{r7}
 8007092:	4770      	bx	lr

08007094 <LL_EXTI_EnableIT_32_63>:
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800709c:	4b06      	ldr	r3, [pc, #24]	; (80070b8 <LL_EXTI_EnableIT_32_63+0x24>)
 800709e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80070a2:	4905      	ldr	r1, [pc, #20]	; (80070b8 <LL_EXTI_EnableIT_32_63+0x24>)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bc80      	pop	{r7}
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	58000800 	.word	0x58000800

080070bc <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d103      	bne.n	80070d2 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	73fb      	strb	r3, [r7, #15]
    return status;
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
 80070d0:	e04b      	b.n	800716a <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	799b      	ldrb	r3, [r3, #6]
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d105      	bne.n	80070ec <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7fa fc7e 	bl	80019e8 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 80070f2:	f7ff ffad 	bl	8007050 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80070f6:	4b1f      	ldr	r3, [pc, #124]	; (8007174 <HAL_SUBGHZ_Init+0xb8>)
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	4613      	mov	r3, r2
 80070fc:	00db      	lsls	r3, r3, #3
 80070fe:	1a9b      	subs	r3, r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	0cdb      	lsrs	r3, r3, #19
 8007104:	2264      	movs	r2, #100	; 0x64
 8007106:	fb02 f303 	mul.w	r3, r2, r3
 800710a:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d105      	bne.n	800711e <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	609a      	str	r2, [r3, #8]
      break;
 800711c:	e007      	b.n	800712e <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	3b01      	subs	r3, #1
 8007122:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8007124:	f7ff ffa4 	bl	8007070 <LL_RCC_IsRFUnderReset>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1ee      	bne.n	800710c <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 800712e:	f7ff ff3f 	bl	8006fb0 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8007132:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007136:	f7ff ffad 	bl	8007094 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800713a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800713e:	f7ff ff23 	bl	8006f88 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8007142:	f7ff ff55 	bl	8006ff0 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8007146:	7bfb      	ldrb	r3, [r7, #15]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10a      	bne.n	8007162 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4618      	mov	r0, r3
 8007152:	f000 faad 	bl	80076b0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	719a      	strb	r2, [r3, #6]

  return status;
 8007168:	7bfb      	ldrb	r3, [r7, #15]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	20000000 	.word	0x20000000

08007178 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	607a      	str	r2, [r7, #4]
 8007182:	461a      	mov	r2, r3
 8007184:	460b      	mov	r3, r1
 8007186:	817b      	strh	r3, [r7, #10]
 8007188:	4613      	mov	r3, r2
 800718a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	799b      	ldrb	r3, [r3, #6]
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b01      	cmp	r3, #1
 8007194:	d14a      	bne.n	800722c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	795b      	ldrb	r3, [r3, #5]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d101      	bne.n	80071a2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 800719e:	2302      	movs	r3, #2
 80071a0:	e045      	b.n	800722e <HAL_SUBGHZ_WriteRegisters+0xb6>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2201      	movs	r2, #1
 80071a6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2202      	movs	r2, #2
 80071ac:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f000 fb4c 	bl	800784c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80071b4:	f7ff ff0c 	bl	8006fd0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80071b8:	210d      	movs	r1, #13
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 fa98 	bl	80076f0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80071c0:	897b      	ldrh	r3, [r7, #10]
 80071c2:	0a1b      	lsrs	r3, r3, #8
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	4619      	mov	r1, r3
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f000 fa90 	bl	80076f0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80071d0:	897b      	ldrh	r3, [r7, #10]
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	4619      	mov	r1, r3
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f000 fa8a 	bl	80076f0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80071dc:	2300      	movs	r3, #0
 80071de:	82bb      	strh	r3, [r7, #20]
 80071e0:	e00a      	b.n	80071f8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80071e2:	8abb      	ldrh	r3, [r7, #20]
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	4413      	add	r3, r2
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	4619      	mov	r1, r3
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 fa7f 	bl	80076f0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80071f2:	8abb      	ldrh	r3, [r7, #20]
 80071f4:	3301      	adds	r3, #1
 80071f6:	82bb      	strh	r3, [r7, #20]
 80071f8:	8aba      	ldrh	r2, [r7, #20]
 80071fa:	893b      	ldrh	r3, [r7, #8]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d3f0      	bcc.n	80071e2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007200:	f7ff fed6 	bl	8006fb0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 fb45 	bl	8007894 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	75fb      	strb	r3, [r7, #23]
 8007216:	e001      	b.n	800721c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2201      	movs	r2, #1
 8007220:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	715a      	strb	r2, [r3, #5]

    return status;
 8007228:	7dfb      	ldrb	r3, [r7, #23]
 800722a:	e000      	b.n	800722e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800722c:	2302      	movs	r3, #2
  }
}
 800722e:	4618      	mov	r0, r3
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b088      	sub	sp, #32
 800723a:	af00      	add	r7, sp, #0
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	461a      	mov	r2, r3
 8007242:	460b      	mov	r3, r1
 8007244:	817b      	strh	r3, [r7, #10]
 8007246:	4613      	mov	r3, r2
 8007248:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	799b      	ldrb	r3, [r3, #6]
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b01      	cmp	r3, #1
 8007256:	d14a      	bne.n	80072ee <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	795b      	ldrb	r3, [r3, #5]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d101      	bne.n	8007264 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007260:	2302      	movs	r3, #2
 8007262:	e045      	b.n	80072f0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2201      	movs	r2, #1
 8007268:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f000 faee 	bl	800784c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007270:	f7ff feae 	bl	8006fd0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007274:	211d      	movs	r1, #29
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 fa3a 	bl	80076f0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800727c:	897b      	ldrh	r3, [r7, #10]
 800727e:	0a1b      	lsrs	r3, r3, #8
 8007280:	b29b      	uxth	r3, r3
 8007282:	b2db      	uxtb	r3, r3
 8007284:	4619      	mov	r1, r3
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f000 fa32 	bl	80076f0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800728c:	897b      	ldrh	r3, [r7, #10]
 800728e:	b2db      	uxtb	r3, r3
 8007290:	4619      	mov	r1, r3
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 fa2c 	bl	80076f0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007298:	2100      	movs	r1, #0
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f000 fa28 	bl	80076f0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80072a0:	2300      	movs	r3, #0
 80072a2:	82fb      	strh	r3, [r7, #22]
 80072a4:	e009      	b.n	80072ba <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80072a6:	69b9      	ldr	r1, [r7, #24]
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 fa77 	bl	800779c <SUBGHZSPI_Receive>
      pData++;
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	3301      	adds	r3, #1
 80072b2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80072b4:	8afb      	ldrh	r3, [r7, #22]
 80072b6:	3301      	adds	r3, #1
 80072b8:	82fb      	strh	r3, [r7, #22]
 80072ba:	8afa      	ldrh	r2, [r7, #22]
 80072bc:	893b      	ldrh	r3, [r7, #8]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d3f1      	bcc.n	80072a6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80072c2:	f7ff fe75 	bl	8006fb0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 fae4 	bl	8007894 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	77fb      	strb	r3, [r7, #31]
 80072d8:	e001      	b.n	80072de <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2201      	movs	r2, #1
 80072e2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	715a      	strb	r2, [r3, #5]

    return status;
 80072ea:	7ffb      	ldrb	r3, [r7, #31]
 80072ec:	e000      	b.n	80072f0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80072ee:	2302      	movs	r3, #2
  }
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3720      	adds	r7, #32
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	607a      	str	r2, [r7, #4]
 8007302:	461a      	mov	r2, r3
 8007304:	460b      	mov	r3, r1
 8007306:	72fb      	strb	r3, [r7, #11]
 8007308:	4613      	mov	r3, r2
 800730a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	799b      	ldrb	r3, [r3, #6]
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b01      	cmp	r3, #1
 8007314:	d14a      	bne.n	80073ac <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	795b      	ldrb	r3, [r3, #5]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d101      	bne.n	8007322 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800731e:	2302      	movs	r3, #2
 8007320:	e045      	b.n	80073ae <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2201      	movs	r2, #1
 8007326:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f000 fa8f 	bl	800784c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800732e:	7afb      	ldrb	r3, [r7, #11]
 8007330:	2b84      	cmp	r3, #132	; 0x84
 8007332:	d002      	beq.n	800733a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007334:	7afb      	ldrb	r3, [r7, #11]
 8007336:	2b94      	cmp	r3, #148	; 0x94
 8007338:	d103      	bne.n	8007342 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2201      	movs	r2, #1
 800733e:	711a      	strb	r2, [r3, #4]
 8007340:	e002      	b.n	8007348 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007348:	f7ff fe42 	bl	8006fd0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800734c:	7afb      	ldrb	r3, [r7, #11]
 800734e:	4619      	mov	r1, r3
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 f9cd 	bl	80076f0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007356:	2300      	movs	r3, #0
 8007358:	82bb      	strh	r3, [r7, #20]
 800735a:	e00a      	b.n	8007372 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800735c:	8abb      	ldrh	r3, [r7, #20]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	4413      	add	r3, r2
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	4619      	mov	r1, r3
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f000 f9c2 	bl	80076f0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800736c:	8abb      	ldrh	r3, [r7, #20]
 800736e:	3301      	adds	r3, #1
 8007370:	82bb      	strh	r3, [r7, #20]
 8007372:	8aba      	ldrh	r2, [r7, #20]
 8007374:	893b      	ldrh	r3, [r7, #8]
 8007376:	429a      	cmp	r2, r3
 8007378:	d3f0      	bcc.n	800735c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800737a:	f7ff fe19 	bl	8006fb0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800737e:	7afb      	ldrb	r3, [r7, #11]
 8007380:	2b84      	cmp	r3, #132	; 0x84
 8007382:	d002      	beq.n	800738a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 fa85 	bl	8007894 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d002      	beq.n	8007398 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	75fb      	strb	r3, [r7, #23]
 8007396:	e001      	b.n	800739c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007398:	2300      	movs	r3, #0
 800739a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2201      	movs	r2, #1
 80073a0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	715a      	strb	r2, [r3, #5]

    return status;
 80073a8:	7dfb      	ldrb	r3, [r7, #23]
 80073aa:	e000      	b.n	80073ae <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80073ac:	2302      	movs	r3, #2
  }
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3718      	adds	r7, #24
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b088      	sub	sp, #32
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	607a      	str	r2, [r7, #4]
 80073c0:	461a      	mov	r2, r3
 80073c2:	460b      	mov	r3, r1
 80073c4:	72fb      	strb	r3, [r7, #11]
 80073c6:	4613      	mov	r3, r2
 80073c8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	799b      	ldrb	r3, [r3, #6]
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d13d      	bne.n	8007454 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	795b      	ldrb	r3, [r3, #5]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d101      	bne.n	80073e4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80073e0:	2302      	movs	r3, #2
 80073e2:	e038      	b.n	8007456 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2201      	movs	r2, #1
 80073e8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f000 fa2e 	bl	800784c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80073f0:	f7ff fdee 	bl	8006fd0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80073f4:	7afb      	ldrb	r3, [r7, #11]
 80073f6:	4619      	mov	r1, r3
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 f979 	bl	80076f0 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80073fe:	2100      	movs	r1, #0
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f000 f975 	bl	80076f0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007406:	2300      	movs	r3, #0
 8007408:	82fb      	strh	r3, [r7, #22]
 800740a:	e009      	b.n	8007420 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800740c:	69b9      	ldr	r1, [r7, #24]
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f000 f9c4 	bl	800779c <SUBGHZSPI_Receive>
      pData++;
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	3301      	adds	r3, #1
 8007418:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800741a:	8afb      	ldrh	r3, [r7, #22]
 800741c:	3301      	adds	r3, #1
 800741e:	82fb      	strh	r3, [r7, #22]
 8007420:	8afa      	ldrh	r2, [r7, #22]
 8007422:	893b      	ldrh	r3, [r7, #8]
 8007424:	429a      	cmp	r2, r3
 8007426:	d3f1      	bcc.n	800740c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007428:	f7ff fdc2 	bl	8006fb0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 fa31 	bl	8007894 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	77fb      	strb	r3, [r7, #31]
 800743e:	e001      	b.n	8007444 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2201      	movs	r2, #1
 8007448:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	715a      	strb	r2, [r3, #5]

    return status;
 8007450:	7ffb      	ldrb	r3, [r7, #31]
 8007452:	e000      	b.n	8007456 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007454:	2302      	movs	r3, #2
  }
}
 8007456:	4618      	mov	r0, r3
 8007458:	3720      	adds	r7, #32
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b086      	sub	sp, #24
 8007462:	af00      	add	r7, sp, #0
 8007464:	60f8      	str	r0, [r7, #12]
 8007466:	607a      	str	r2, [r7, #4]
 8007468:	461a      	mov	r2, r3
 800746a:	460b      	mov	r3, r1
 800746c:	72fb      	strb	r3, [r7, #11]
 800746e:	4613      	mov	r3, r2
 8007470:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	799b      	ldrb	r3, [r3, #6]
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b01      	cmp	r3, #1
 800747a:	d13e      	bne.n	80074fa <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	795b      	ldrb	r3, [r3, #5]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d101      	bne.n	8007488 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007484:	2302      	movs	r3, #2
 8007486:	e039      	b.n	80074fc <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2201      	movs	r2, #1
 800748c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f000 f9dc 	bl	800784c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007494:	f7ff fd9c 	bl	8006fd0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007498:	210e      	movs	r1, #14
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 f928 	bl	80076f0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80074a0:	7afb      	ldrb	r3, [r7, #11]
 80074a2:	4619      	mov	r1, r3
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f000 f923 	bl	80076f0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80074aa:	2300      	movs	r3, #0
 80074ac:	82bb      	strh	r3, [r7, #20]
 80074ae:	e00a      	b.n	80074c6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80074b0:	8abb      	ldrh	r3, [r7, #20]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	4413      	add	r3, r2
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	4619      	mov	r1, r3
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 f918 	bl	80076f0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80074c0:	8abb      	ldrh	r3, [r7, #20]
 80074c2:	3301      	adds	r3, #1
 80074c4:	82bb      	strh	r3, [r7, #20]
 80074c6:	8aba      	ldrh	r2, [r7, #20]
 80074c8:	893b      	ldrh	r3, [r7, #8]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d3f0      	bcc.n	80074b0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80074ce:	f7ff fd6f 	bl	8006fb0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f000 f9de 	bl	8007894 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d002      	beq.n	80074e6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	75fb      	strb	r3, [r7, #23]
 80074e4:	e001      	b.n	80074ea <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80074e6:	2300      	movs	r3, #0
 80074e8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2201      	movs	r2, #1
 80074ee:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	715a      	strb	r2, [r3, #5]

    return status;
 80074f6:	7dfb      	ldrb	r3, [r7, #23]
 80074f8:	e000      	b.n	80074fc <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80074fa:	2302      	movs	r3, #2
  }
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3718      	adds	r7, #24
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b088      	sub	sp, #32
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	607a      	str	r2, [r7, #4]
 800750e:	461a      	mov	r2, r3
 8007510:	460b      	mov	r3, r1
 8007512:	72fb      	strb	r3, [r7, #11]
 8007514:	4613      	mov	r3, r2
 8007516:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	799b      	ldrb	r3, [r3, #6]
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b01      	cmp	r3, #1
 8007524:	d141      	bne.n	80075aa <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	795b      	ldrb	r3, [r3, #5]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d101      	bne.n	8007532 <HAL_SUBGHZ_ReadBuffer+0x2e>
 800752e:	2302      	movs	r3, #2
 8007530:	e03c      	b.n	80075ac <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2201      	movs	r2, #1
 8007536:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f000 f987 	bl	800784c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800753e:	f7ff fd47 	bl	8006fd0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007542:	211e      	movs	r1, #30
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 f8d3 	bl	80076f0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800754a:	7afb      	ldrb	r3, [r7, #11]
 800754c:	4619      	mov	r1, r3
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f000 f8ce 	bl	80076f0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007554:	2100      	movs	r1, #0
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f000 f8ca 	bl	80076f0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800755c:	2300      	movs	r3, #0
 800755e:	82fb      	strh	r3, [r7, #22]
 8007560:	e009      	b.n	8007576 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007562:	69b9      	ldr	r1, [r7, #24]
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 f919 	bl	800779c <SUBGHZSPI_Receive>
      pData++;
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	3301      	adds	r3, #1
 800756e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007570:	8afb      	ldrh	r3, [r7, #22]
 8007572:	3301      	adds	r3, #1
 8007574:	82fb      	strh	r3, [r7, #22]
 8007576:	8afa      	ldrh	r2, [r7, #22]
 8007578:	893b      	ldrh	r3, [r7, #8]
 800757a:	429a      	cmp	r2, r3
 800757c:	d3f1      	bcc.n	8007562 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800757e:	f7ff fd17 	bl	8006fb0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f000 f986 	bl	8007894 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d002      	beq.n	8007596 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	77fb      	strb	r3, [r7, #31]
 8007594:	e001      	b.n	800759a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2201      	movs	r2, #1
 800759e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	715a      	strb	r2, [r3, #5]

    return status;
 80075a6:	7ffb      	ldrb	r3, [r7, #31]
 80075a8:	e000      	b.n	80075ac <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80075aa:	2302      	movs	r3, #2
  }
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3720      	adds	r7, #32
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 80075bc:	2300      	movs	r3, #0
 80075be:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80075c0:	f107 020c 	add.w	r2, r7, #12
 80075c4:	2302      	movs	r3, #2
 80075c6:	2112      	movs	r1, #18
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7ff fef4 	bl	80073b6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80075ce:	7b3b      	ldrb	r3, [r7, #12]
 80075d0:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80075d2:	89fb      	ldrh	r3, [r7, #14]
 80075d4:	021b      	lsls	r3, r3, #8
 80075d6:	b21a      	sxth	r2, r3
 80075d8:	7b7b      	ldrb	r3, [r7, #13]
 80075da:	b21b      	sxth	r3, r3
 80075dc:	4313      	orrs	r3, r2
 80075de:	b21b      	sxth	r3, r3
 80075e0:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80075e2:	89fb      	ldrh	r3, [r7, #14]
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f011 ff71 	bl	80194d4 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80075f2:	89fb      	ldrh	r3, [r7, #14]
 80075f4:	085b      	lsrs	r3, r3, #1
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d002      	beq.n	8007604 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f011 ff76 	bl	80194f0 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007604:	89fb      	ldrh	r3, [r7, #14]
 8007606:	089b      	lsrs	r3, r3, #2
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b00      	cmp	r3, #0
 800760e:	d002      	beq.n	8007616 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f011 ffc5 	bl	80195a0 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007616:	89fb      	ldrh	r3, [r7, #14]
 8007618:	08db      	lsrs	r3, r3, #3
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	2b00      	cmp	r3, #0
 8007620:	d002      	beq.n	8007628 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f011 ffca 	bl	80195bc <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007628:	89fb      	ldrh	r3, [r7, #14]
 800762a:	091b      	lsrs	r3, r3, #4
 800762c:	f003 0301 	and.w	r3, r3, #1
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f011 ffcf 	bl	80195d8 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800763a:	89fb      	ldrh	r3, [r7, #14]
 800763c:	095b      	lsrs	r3, r3, #5
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f011 ff9c 	bl	8019584 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800764c:	89fb      	ldrh	r3, [r7, #14]
 800764e:	099b      	lsrs	r3, r3, #6
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	2b00      	cmp	r3, #0
 8007656:	d002      	beq.n	800765e <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f011 ff57 	bl	801950c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800765e:	89fb      	ldrh	r3, [r7, #14]
 8007660:	09db      	lsrs	r3, r3, #7
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00e      	beq.n	8007688 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800766a:	89fb      	ldrh	r3, [r7, #14]
 800766c:	0a1b      	lsrs	r3, r3, #8
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	2b00      	cmp	r3, #0
 8007674:	d004      	beq.n	8007680 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007676:	2101      	movs	r1, #1
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f011 ff55 	bl	8019528 <HAL_SUBGHZ_CADStatusCallback>
 800767e:	e003      	b.n	8007688 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007680:	2100      	movs	r1, #0
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f011 ff50 	bl	8019528 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007688:	89fb      	ldrh	r3, [r7, #14]
 800768a:	0a5b      	lsrs	r3, r3, #9
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b00      	cmp	r3, #0
 8007692:	d002      	beq.n	800769a <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f011 ff65 	bl	8019564 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 800769a:	f107 020c 	add.w	r2, r7, #12
 800769e:	2302      	movs	r3, #2
 80076a0:	2102      	movs	r1, #2
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7ff fe28 	bl	80072f8 <HAL_SUBGHZ_ExecSetCmd>
}
 80076a8:	bf00      	nop
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80076b8:	4b0c      	ldr	r3, [pc, #48]	; (80076ec <SUBGHZSPI_Init+0x3c>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a0b      	ldr	r2, [pc, #44]	; (80076ec <SUBGHZSPI_Init+0x3c>)
 80076be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076c2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80076c4:	4a09      	ldr	r2, [pc, #36]	; (80076ec <SUBGHZSPI_Init+0x3c>)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80076cc:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80076ce:	4b07      	ldr	r3, [pc, #28]	; (80076ec <SUBGHZSPI_Init+0x3c>)
 80076d0:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80076d4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80076d6:	4b05      	ldr	r3, [pc, #20]	; (80076ec <SUBGHZSPI_Init+0x3c>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a04      	ldr	r2, [pc, #16]	; (80076ec <SUBGHZSPI_Init+0x3c>)
 80076dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076e0:	6013      	str	r3, [r2, #0]
}
 80076e2:	bf00      	nop
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bc80      	pop	{r7}
 80076ea:	4770      	bx	lr
 80076ec:	58010000 	.word	0x58010000

080076f0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b087      	sub	sp, #28
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007700:	4b23      	ldr	r3, [pc, #140]	; (8007790 <SUBGHZSPI_Transmit+0xa0>)
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	4613      	mov	r3, r2
 8007706:	00db      	lsls	r3, r3, #3
 8007708:	1a9b      	subs	r3, r3, r2
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	0cdb      	lsrs	r3, r3, #19
 800770e:	2264      	movs	r2, #100	; 0x64
 8007710:	fb02 f303 	mul.w	r3, r2, r3
 8007714:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d105      	bne.n	8007728 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	609a      	str	r2, [r3, #8]
      break;
 8007726:	e008      	b.n	800773a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	3b01      	subs	r3, #1
 800772c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800772e:	4b19      	ldr	r3, [pc, #100]	; (8007794 <SUBGHZSPI_Transmit+0xa4>)
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b02      	cmp	r3, #2
 8007738:	d1ed      	bne.n	8007716 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800773a:	4b17      	ldr	r3, [pc, #92]	; (8007798 <SUBGHZSPI_Transmit+0xa8>)
 800773c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	78fa      	ldrb	r2, [r7, #3]
 8007742:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007744:	4b12      	ldr	r3, [pc, #72]	; (8007790 <SUBGHZSPI_Transmit+0xa0>)
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	4613      	mov	r3, r2
 800774a:	00db      	lsls	r3, r3, #3
 800774c:	1a9b      	subs	r3, r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	0cdb      	lsrs	r3, r3, #19
 8007752:	2264      	movs	r2, #100	; 0x64
 8007754:	fb02 f303 	mul.w	r3, r2, r3
 8007758:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d105      	bne.n	800776c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	609a      	str	r2, [r3, #8]
      break;
 800776a:	e008      	b.n	800777e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	3b01      	subs	r3, #1
 8007770:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007772:	4b08      	ldr	r3, [pc, #32]	; (8007794 <SUBGHZSPI_Transmit+0xa4>)
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	2b01      	cmp	r3, #1
 800777c:	d1ed      	bne.n	800775a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800777e:	4b05      	ldr	r3, [pc, #20]	; (8007794 <SUBGHZSPI_Transmit+0xa4>)
 8007780:	68db      	ldr	r3, [r3, #12]

  return status;
 8007782:	7dfb      	ldrb	r3, [r7, #23]
}
 8007784:	4618      	mov	r0, r3
 8007786:	371c      	adds	r7, #28
 8007788:	46bd      	mov	sp, r7
 800778a:	bc80      	pop	{r7}
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	20000000 	.word	0x20000000
 8007794:	58010000 	.word	0x58010000
 8007798:	5801000c 	.word	0x5801000c

0800779c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80077aa:	4b25      	ldr	r3, [pc, #148]	; (8007840 <SUBGHZSPI_Receive+0xa4>)
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	4613      	mov	r3, r2
 80077b0:	00db      	lsls	r3, r3, #3
 80077b2:	1a9b      	subs	r3, r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	0cdb      	lsrs	r3, r3, #19
 80077b8:	2264      	movs	r2, #100	; 0x64
 80077ba:	fb02 f303 	mul.w	r3, r2, r3
 80077be:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d105      	bne.n	80077d2 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	609a      	str	r2, [r3, #8]
      break;
 80077d0:	e008      	b.n	80077e4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80077d8:	4b1a      	ldr	r3, [pc, #104]	; (8007844 <SUBGHZSPI_Receive+0xa8>)
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d1ed      	bne.n	80077c0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80077e4:	4b18      	ldr	r3, [pc, #96]	; (8007848 <SUBGHZSPI_Receive+0xac>)
 80077e6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	22ff      	movs	r2, #255	; 0xff
 80077ec:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80077ee:	4b14      	ldr	r3, [pc, #80]	; (8007840 <SUBGHZSPI_Receive+0xa4>)
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	4613      	mov	r3, r2
 80077f4:	00db      	lsls	r3, r3, #3
 80077f6:	1a9b      	subs	r3, r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	0cdb      	lsrs	r3, r3, #19
 80077fc:	2264      	movs	r2, #100	; 0x64
 80077fe:	fb02 f303 	mul.w	r3, r2, r3
 8007802:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d105      	bne.n	8007816 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	609a      	str	r2, [r3, #8]
      break;
 8007814:	e008      	b.n	8007828 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3b01      	subs	r3, #1
 800781a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800781c:	4b09      	ldr	r3, [pc, #36]	; (8007844 <SUBGHZSPI_Receive+0xa8>)
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b01      	cmp	r3, #1
 8007826:	d1ed      	bne.n	8007804 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007828:	4b06      	ldr	r3, [pc, #24]	; (8007844 <SUBGHZSPI_Receive+0xa8>)
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	b2da      	uxtb	r2, r3
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	701a      	strb	r2, [r3, #0]

  return status;
 8007832:	7dfb      	ldrb	r3, [r7, #23]
}
 8007834:	4618      	mov	r0, r3
 8007836:	371c      	adds	r7, #28
 8007838:	46bd      	mov	sp, r7
 800783a:	bc80      	pop	{r7}
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	20000000 	.word	0x20000000
 8007844:	58010000 	.word	0x58010000
 8007848:	5801000c 	.word	0x5801000c

0800784c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	791b      	ldrb	r3, [r3, #4]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d111      	bne.n	8007880 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800785c:	4b0c      	ldr	r3, [pc, #48]	; (8007890 <SUBGHZ_CheckDeviceReady+0x44>)
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	4613      	mov	r3, r2
 8007862:	005b      	lsls	r3, r3, #1
 8007864:	4413      	add	r3, r2
 8007866:	00db      	lsls	r3, r3, #3
 8007868:	0c1b      	lsrs	r3, r3, #16
 800786a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800786c:	f7ff fbb0 	bl	8006fd0 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	3b01      	subs	r3, #1
 8007874:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1f9      	bne.n	8007870 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800787c:	f7ff fb98 	bl	8006fb0 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f807 	bl	8007894 <SUBGHZ_WaitOnBusy>
 8007886:	4603      	mov	r3, r0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	20000000 	.word	0x20000000

08007894 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80078a0:	4b12      	ldr	r3, [pc, #72]	; (80078ec <SUBGHZ_WaitOnBusy+0x58>)
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	4613      	mov	r3, r2
 80078a6:	005b      	lsls	r3, r3, #1
 80078a8:	4413      	add	r3, r2
 80078aa:	00db      	lsls	r3, r3, #3
 80078ac:	0d1b      	lsrs	r3, r3, #20
 80078ae:	2264      	movs	r2, #100	; 0x64
 80078b0:	fb02 f303 	mul.w	r3, r2, r3
 80078b4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80078b6:	f7ff fbb9 	bl	800702c <LL_PWR_IsActiveFlag_RFBUSYMS>
 80078ba:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d105      	bne.n	80078ce <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2202      	movs	r2, #2
 80078ca:	609a      	str	r2, [r3, #8]
      break;
 80078cc:	e009      	b.n	80078e2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	3b01      	subs	r3, #1
 80078d2:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80078d4:	f7ff fb98 	bl	8007008 <LL_PWR_IsActiveFlag_RFBUSYS>
 80078d8:	4602      	mov	r2, r0
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	4013      	ands	r3, r2
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d0e9      	beq.n	80078b6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80078e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3718      	adds	r7, #24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	20000000 	.word	0x20000000

080078f0 <LL_RCC_GetUSARTClockSource>:
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80078f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	401a      	ands	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	041b      	lsls	r3, r3, #16
 8007908:	4313      	orrs	r3, r2
}
 800790a:	4618      	mov	r0, r3
 800790c:	370c      	adds	r7, #12
 800790e:	46bd      	mov	sp, r7
 8007910:	bc80      	pop	{r7}
 8007912:	4770      	bx	lr

08007914 <LL_RCC_GetLPUARTClockSource>:
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800791c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007920:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4013      	ands	r3, r2
}
 8007928:	4618      	mov	r0, r3
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	bc80      	pop	{r7}
 8007930:	4770      	bx	lr

08007932 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b082      	sub	sp, #8
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e042      	b.n	80079ca <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800794a:	2b00      	cmp	r3, #0
 800794c:	d106      	bne.n	800795c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7fa fdba 	bl	80024d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2224      	movs	r2, #36	; 0x24
 8007960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f022 0201 	bic.w	r2, r2, #1
 8007972:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fc4b 	bl	8008210 <UART_SetConfig>
 800797a:	4603      	mov	r3, r0
 800797c:	2b01      	cmp	r3, #1
 800797e:	d101      	bne.n	8007984 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e022      	b.n	80079ca <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 feb3 	bl	80086f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	685a      	ldr	r2, [r3, #4]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689a      	ldr	r2, [r3, #8]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f042 0201 	orr.w	r2, r2, #1
 80079c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 ff39 	bl	800883a <UART_CheckIdleState>
 80079c8:	4603      	mov	r3, r0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
	...

080079d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08a      	sub	sp, #40	; 0x28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	4613      	mov	r3, r2
 80079e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e8:	2b20      	cmp	r3, #32
 80079ea:	d142      	bne.n	8007a72 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d002      	beq.n	80079f8 <HAL_UART_Receive_IT+0x24>
 80079f2:	88fb      	ldrh	r3, [r7, #6]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d101      	bne.n	80079fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e03b      	b.n	8007a74 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d101      	bne.n	8007a0a <HAL_UART_Receive_IT+0x36>
 8007a06:	2302      	movs	r3, #2
 8007a08:	e034      	b.n	8007a74 <HAL_UART_Receive_IT+0xa0>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a17      	ldr	r2, [pc, #92]	; (8007a7c <HAL_UART_Receive_IT+0xa8>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d01f      	beq.n	8007a62 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d018      	beq.n	8007a62 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a44:	627b      	str	r3, [r7, #36]	; 0x24
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	623b      	str	r3, [r7, #32]
 8007a50:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	69f9      	ldr	r1, [r7, #28]
 8007a54:	6a3a      	ldr	r2, [r7, #32]
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1e6      	bne.n	8007a30 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007a62:	88fb      	ldrh	r3, [r7, #6]
 8007a64:	461a      	mov	r2, r3
 8007a66:	68b9      	ldr	r1, [r7, #8]
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f000 fff9 	bl	8008a60 <UART_Start_Receive_IT>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	e000      	b.n	8007a74 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007a72:	2302      	movs	r3, #2
  }
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3728      	adds	r7, #40	; 0x28
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	40008000 	.word	0x40008000

08007a80 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b08a      	sub	sp, #40	; 0x28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a94:	2b20      	cmp	r3, #32
 8007a96:	d17a      	bne.n	8007b8e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d002      	beq.n	8007aa4 <HAL_UART_Transmit_DMA+0x24>
 8007a9e:	88fb      	ldrh	r3, [r7, #6]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d101      	bne.n	8007aa8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e073      	b.n	8007b90 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d101      	bne.n	8007ab6 <HAL_UART_Transmit_DMA+0x36>
 8007ab2:	2302      	movs	r3, #2
 8007ab4:	e06c      	b.n	8007b90 <HAL_UART_Transmit_DMA+0x110>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	88fa      	ldrh	r2, [r7, #6]
 8007ac8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	88fa      	ldrh	r2, [r7, #6]
 8007ad0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2221      	movs	r2, #33	; 0x21
 8007ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d02c      	beq.n	8007b46 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007af0:	4a29      	ldr	r2, [pc, #164]	; (8007b98 <HAL_UART_Transmit_DMA+0x118>)
 8007af2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007af8:	4a28      	ldr	r2, [pc, #160]	; (8007b9c <HAL_UART_Transmit_DMA+0x11c>)
 8007afa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b00:	4a27      	ldr	r2, [pc, #156]	; (8007ba0 <HAL_UART_Transmit_DMA+0x120>)
 8007b02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b08:	2200      	movs	r2, #0
 8007b0a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b14:	4619      	mov	r1, r3
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3328      	adds	r3, #40	; 0x28
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	88fb      	ldrh	r3, [r7, #6]
 8007b20:	f7fc fb0c 	bl	800413c <HAL_DMA_Start_IT>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00d      	beq.n	8007b46 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2210      	movs	r2, #16
 8007b2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2220      	movs	r2, #32
 8007b3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e024      	b.n	8007b90 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2240      	movs	r2, #64	; 0x40
 8007b4c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	3308      	adds	r3, #8
 8007b5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	e853 3f00 	ldrex	r3, [r3]
 8007b64:	613b      	str	r3, [r7, #16]
   return(result);
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	3308      	adds	r3, #8
 8007b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b76:	623a      	str	r2, [r7, #32]
 8007b78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7a:	69f9      	ldr	r1, [r7, #28]
 8007b7c:	6a3a      	ldr	r2, [r7, #32]
 8007b7e:	e841 2300 	strex	r3, r2, [r1]
 8007b82:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1e5      	bne.n	8007b56 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	e000      	b.n	8007b90 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8007b8e:	2302      	movs	r3, #2
  }
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3728      	adds	r7, #40	; 0x28
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	08008dfb 	.word	0x08008dfb
 8007b9c:	08008e95 	.word	0x08008e95
 8007ba0:	08008eb1 	.word	0x08008eb1

08007ba4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b0ba      	sub	sp, #232	; 0xe8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007bca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007bce:	f640 030f 	movw	r3, #2063	; 0x80f
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007bd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d11b      	bne.n	8007c18 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be4:	f003 0320 	and.w	r3, r3, #32
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d015      	beq.n	8007c18 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bf0:	f003 0320 	and.w	r3, r3, #32
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d105      	bne.n	8007c04 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d009      	beq.n	8007c18 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 82d6 	beq.w	80081ba <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	4798      	blx	r3
      }
      return;
 8007c16:	e2d0      	b.n	80081ba <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007c18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 811f 	beq.w	8007e60 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007c22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007c26:	4b8b      	ldr	r3, [pc, #556]	; (8007e54 <HAL_UART_IRQHandler+0x2b0>)
 8007c28:	4013      	ands	r3, r2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d106      	bne.n	8007c3c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007c2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007c32:	4b89      	ldr	r3, [pc, #548]	; (8007e58 <HAL_UART_IRQHandler+0x2b4>)
 8007c34:	4013      	ands	r3, r2
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 8112 	beq.w	8007e60 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c40:	f003 0301 	and.w	r3, r3, #1
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d011      	beq.n	8007c6c <HAL_UART_IRQHandler+0xc8>
 8007c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00b      	beq.n	8007c6c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c62:	f043 0201 	orr.w	r2, r3, #1
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c70:	f003 0302 	and.w	r3, r3, #2
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d011      	beq.n	8007c9c <HAL_UART_IRQHandler+0xf8>
 8007c78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00b      	beq.n	8007c9c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2202      	movs	r2, #2
 8007c8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c92:	f043 0204 	orr.w	r2, r3, #4
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ca0:	f003 0304 	and.w	r3, r3, #4
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d011      	beq.n	8007ccc <HAL_UART_IRQHandler+0x128>
 8007ca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00b      	beq.n	8007ccc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2204      	movs	r2, #4
 8007cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cc2:	f043 0202 	orr.w	r2, r3, #2
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cd0:	f003 0308 	and.w	r3, r3, #8
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d017      	beq.n	8007d08 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cdc:	f003 0320 	and.w	r3, r3, #32
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d105      	bne.n	8007cf0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007ce4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007ce8:	4b5a      	ldr	r3, [pc, #360]	; (8007e54 <HAL_UART_IRQHandler+0x2b0>)
 8007cea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00b      	beq.n	8007d08 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2208      	movs	r2, #8
 8007cf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cfe:	f043 0208 	orr.w	r2, r3, #8
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d012      	beq.n	8007d3a <HAL_UART_IRQHandler+0x196>
 8007d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00c      	beq.n	8007d3a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d30:	f043 0220 	orr.w	r2, r3, #32
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 823c 	beq.w	80081be <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d4a:	f003 0320 	and.w	r3, r3, #32
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d013      	beq.n	8007d7a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d56:	f003 0320 	and.w	r3, r3, #32
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d105      	bne.n	8007d6a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d007      	beq.n	8007d7a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8e:	2b40      	cmp	r3, #64	; 0x40
 8007d90:	d005      	beq.n	8007d9e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007d92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d04f      	beq.n	8007e3e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 ffc6 	bl	8008d30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dae:	2b40      	cmp	r3, #64	; 0x40
 8007db0:	d141      	bne.n	8007e36 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3308      	adds	r3, #8
 8007db8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007dc0:	e853 3f00 	ldrex	r3, [r3]
 8007dc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3308      	adds	r3, #8
 8007dda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007dde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007de2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007dea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007dee:	e841 2300 	strex	r3, r2, [r1]
 8007df2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007df6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1d9      	bne.n	8007db2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d013      	beq.n	8007e2e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e0a:	4a14      	ldr	r2, [pc, #80]	; (8007e5c <HAL_UART_IRQHandler+0x2b8>)
 8007e0c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fc fa6e 	bl	80042f4 <HAL_DMA_Abort_IT>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d017      	beq.n	8007e4e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007e28:	4610      	mov	r0, r2
 8007e2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e2c:	e00f      	b.n	8007e4e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f9d9 	bl	80081e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e34:	e00b      	b.n	8007e4e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f9d5 	bl	80081e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e3c:	e007      	b.n	8007e4e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f9d1 	bl	80081e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007e4c:	e1b7      	b.n	80081be <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e4e:	bf00      	nop
    return;
 8007e50:	e1b5      	b.n	80081be <HAL_UART_IRQHandler+0x61a>
 8007e52:	bf00      	nop
 8007e54:	10000001 	.word	0x10000001
 8007e58:	04000120 	.word	0x04000120
 8007e5c:	08008f31 	.word	0x08008f31

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	f040 814a 	bne.w	80080fe <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e6e:	f003 0310 	and.w	r3, r3, #16
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f000 8143 	beq.w	80080fe <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e7c:	f003 0310 	and.w	r3, r3, #16
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 813c 	beq.w	80080fe <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2210      	movs	r2, #16
 8007e8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e98:	2b40      	cmp	r3, #64	; 0x40
 8007e9a:	f040 80b5 	bne.w	8008008 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8007eaa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f000 8187 	beq.w	80081c2 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007eba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	f080 817f 	bcs.w	80081c2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007eca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0320 	and.w	r3, r3, #32
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f040 8086 	bne.w	8007fec <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007eec:	e853 3f00 	ldrex	r3, [r3]
 8007ef0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007efc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	461a      	mov	r2, r3
 8007f06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007f0e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007f16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007f1a:	e841 2300 	strex	r3, r2, [r1]
 8007f1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1da      	bne.n	8007ee0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3308      	adds	r3, #8
 8007f30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f34:	e853 3f00 	ldrex	r3, [r3]
 8007f38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007f3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f3c:	f023 0301 	bic.w	r3, r3, #1
 8007f40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3308      	adds	r3, #8
 8007f4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007f4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007f52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007f56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007f5a:	e841 2300 	strex	r3, r2, [r1]
 8007f5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007f60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1e1      	bne.n	8007f2a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	3308      	adds	r3, #8
 8007f6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f70:	e853 3f00 	ldrex	r3, [r3]
 8007f74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3308      	adds	r3, #8
 8007f86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f92:	e841 2300 	strex	r3, r2, [r1]
 8007f96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e3      	bne.n	8007f66 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fb4:	e853 3f00 	ldrex	r3, [r3]
 8007fb8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fbc:	f023 0310 	bic.w	r3, r3, #16
 8007fc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	461a      	mov	r2, r3
 8007fca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fce:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fd0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fd6:	e841 2300 	strex	r3, r2, [r1]
 8007fda:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1e4      	bne.n	8007fac <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fc f926 	bl	8004238 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	4619      	mov	r1, r3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f8f9 	bl	80081f8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008006:	e0dc      	b.n	80081c2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008014:	b29b      	uxth	r3, r3
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008022:	b29b      	uxth	r3, r3
 8008024:	2b00      	cmp	r3, #0
 8008026:	f000 80ce 	beq.w	80081c6 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800802a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800802e:	2b00      	cmp	r3, #0
 8008030:	f000 80c9 	beq.w	80081c6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803c:	e853 3f00 	ldrex	r3, [r3]
 8008040:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008044:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008048:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	461a      	mov	r2, r3
 8008052:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008056:	647b      	str	r3, [r7, #68]	; 0x44
 8008058:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800805c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800805e:	e841 2300 	strex	r3, r2, [r1]
 8008062:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1e4      	bne.n	8008034 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	3308      	adds	r3, #8
 8008070:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008074:	e853 3f00 	ldrex	r3, [r3]
 8008078:	623b      	str	r3, [r7, #32]
   return(result);
 800807a:	6a3b      	ldr	r3, [r7, #32]
 800807c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008080:	f023 0301 	bic.w	r3, r3, #1
 8008084:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	3308      	adds	r3, #8
 800808e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008092:	633a      	str	r2, [r7, #48]	; 0x30
 8008094:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800809a:	e841 2300 	strex	r3, r2, [r1]
 800809e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1e1      	bne.n	800806a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2220      	movs	r2, #32
 80080aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	e853 3f00 	ldrex	r3, [r3]
 80080c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f023 0310 	bic.w	r3, r3, #16
 80080ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80080dc:	61fb      	str	r3, [r7, #28]
 80080de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e0:	69b9      	ldr	r1, [r7, #24]
 80080e2:	69fa      	ldr	r2, [r7, #28]
 80080e4:	e841 2300 	strex	r3, r2, [r1]
 80080e8:	617b      	str	r3, [r7, #20]
   return(result);
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1e4      	bne.n	80080ba <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80080f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080f4:	4619      	mov	r1, r3
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f87e 	bl	80081f8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80080fc:	e063      	b.n	80081c6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80080fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00e      	beq.n	8008128 <HAL_UART_IRQHandler+0x584>
 800810a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800810e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d008      	beq.n	8008128 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800811e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f001 fba3 	bl	800986c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008126:	e051      	b.n	80081cc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800812c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008130:	2b00      	cmp	r3, #0
 8008132:	d014      	beq.n	800815e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800813c:	2b00      	cmp	r3, #0
 800813e:	d105      	bne.n	800814c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008144:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d008      	beq.n	800815e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008150:	2b00      	cmp	r3, #0
 8008152:	d03a      	beq.n	80081ca <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	4798      	blx	r3
    }
    return;
 800815c:	e035      	b.n	80081ca <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800815e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008166:	2b00      	cmp	r3, #0
 8008168:	d009      	beq.n	800817e <HAL_UART_IRQHandler+0x5da>
 800816a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800816e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fef0 	bl	8008f5c <UART_EndTransmit_IT>
    return;
 800817c:	e026      	b.n	80081cc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800817e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008182:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d009      	beq.n	800819e <HAL_UART_IRQHandler+0x5fa>
 800818a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800818e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d003      	beq.n	800819e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f001 fb7a 	bl	8009890 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800819c:	e016      	b.n	80081cc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800819e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d010      	beq.n	80081cc <HAL_UART_IRQHandler+0x628>
 80081aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	da0c      	bge.n	80081cc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f001 fb63 	bl	800987e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081b8:	e008      	b.n	80081cc <HAL_UART_IRQHandler+0x628>
      return;
 80081ba:	bf00      	nop
 80081bc:	e006      	b.n	80081cc <HAL_UART_IRQHandler+0x628>
    return;
 80081be:	bf00      	nop
 80081c0:	e004      	b.n	80081cc <HAL_UART_IRQHandler+0x628>
      return;
 80081c2:	bf00      	nop
 80081c4:	e002      	b.n	80081cc <HAL_UART_IRQHandler+0x628>
      return;
 80081c6:	bf00      	nop
 80081c8:	e000      	b.n	80081cc <HAL_UART_IRQHandler+0x628>
    return;
 80081ca:	bf00      	nop
  }
}
 80081cc:	37e8      	adds	r7, #232	; 0xe8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop

080081d4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80081dc:	bf00      	nop
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bc80      	pop	{r7}
 80081e4:	4770      	bx	lr

080081e6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b083      	sub	sp, #12
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80081ee:	bf00      	nop
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bc80      	pop	{r7}
 80081f6:	4770      	bx	lr

080081f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	460b      	mov	r3, r1
 8008202:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	bc80      	pop	{r7}
 800820c:	4770      	bx	lr
	...

08008210 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008214:	b08c      	sub	sp, #48	; 0x30
 8008216:	af00      	add	r7, sp, #0
 8008218:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	689a      	ldr	r2, [r3, #8]
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	431a      	orrs	r2, r3
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	431a      	orrs	r2, r3
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	69db      	ldr	r3, [r3, #28]
 8008234:	4313      	orrs	r3, r2
 8008236:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	4b94      	ldr	r3, [pc, #592]	; (8008490 <UART_SetConfig+0x280>)
 8008240:	4013      	ands	r3, r2
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	6812      	ldr	r2, [r2, #0]
 8008246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008248:	430b      	orrs	r3, r1
 800824a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	68da      	ldr	r2, [r3, #12]
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	430a      	orrs	r2, r1
 8008260:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a89      	ldr	r2, [pc, #548]	; (8008494 <UART_SetConfig+0x284>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d004      	beq.n	800827c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008278:	4313      	orrs	r3, r2
 800827a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008286:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	6812      	ldr	r2, [r2, #0]
 800828e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008290:	430b      	orrs	r3, r1
 8008292:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829a:	f023 010f 	bic.w	r1, r3, #15
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	430a      	orrs	r2, r1
 80082a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a7a      	ldr	r2, [pc, #488]	; (8008498 <UART_SetConfig+0x288>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d127      	bne.n	8008304 <UART_SetConfig+0xf4>
 80082b4:	2003      	movs	r0, #3
 80082b6:	f7ff fb1b 	bl	80078f0 <LL_RCC_GetUSARTClockSource>
 80082ba:	4603      	mov	r3, r0
 80082bc:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80082c0:	2b03      	cmp	r3, #3
 80082c2:	d81b      	bhi.n	80082fc <UART_SetConfig+0xec>
 80082c4:	a201      	add	r2, pc, #4	; (adr r2, 80082cc <UART_SetConfig+0xbc>)
 80082c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ca:	bf00      	nop
 80082cc:	080082dd 	.word	0x080082dd
 80082d0:	080082ed 	.word	0x080082ed
 80082d4:	080082e5 	.word	0x080082e5
 80082d8:	080082f5 	.word	0x080082f5
 80082dc:	2301      	movs	r3, #1
 80082de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082e2:	e080      	b.n	80083e6 <UART_SetConfig+0x1d6>
 80082e4:	2302      	movs	r3, #2
 80082e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ea:	e07c      	b.n	80083e6 <UART_SetConfig+0x1d6>
 80082ec:	2304      	movs	r3, #4
 80082ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082f2:	e078      	b.n	80083e6 <UART_SetConfig+0x1d6>
 80082f4:	2308      	movs	r3, #8
 80082f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082fa:	e074      	b.n	80083e6 <UART_SetConfig+0x1d6>
 80082fc:	2310      	movs	r3, #16
 80082fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008302:	e070      	b.n	80083e6 <UART_SetConfig+0x1d6>
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a64      	ldr	r2, [pc, #400]	; (800849c <UART_SetConfig+0x28c>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d138      	bne.n	8008380 <UART_SetConfig+0x170>
 800830e:	200c      	movs	r0, #12
 8008310:	f7ff faee 	bl	80078f0 <LL_RCC_GetUSARTClockSource>
 8008314:	4603      	mov	r3, r0
 8008316:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800831a:	2b0c      	cmp	r3, #12
 800831c:	d82c      	bhi.n	8008378 <UART_SetConfig+0x168>
 800831e:	a201      	add	r2, pc, #4	; (adr r2, 8008324 <UART_SetConfig+0x114>)
 8008320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008324:	08008359 	.word	0x08008359
 8008328:	08008379 	.word	0x08008379
 800832c:	08008379 	.word	0x08008379
 8008330:	08008379 	.word	0x08008379
 8008334:	08008369 	.word	0x08008369
 8008338:	08008379 	.word	0x08008379
 800833c:	08008379 	.word	0x08008379
 8008340:	08008379 	.word	0x08008379
 8008344:	08008361 	.word	0x08008361
 8008348:	08008379 	.word	0x08008379
 800834c:	08008379 	.word	0x08008379
 8008350:	08008379 	.word	0x08008379
 8008354:	08008371 	.word	0x08008371
 8008358:	2300      	movs	r3, #0
 800835a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800835e:	e042      	b.n	80083e6 <UART_SetConfig+0x1d6>
 8008360:	2302      	movs	r3, #2
 8008362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008366:	e03e      	b.n	80083e6 <UART_SetConfig+0x1d6>
 8008368:	2304      	movs	r3, #4
 800836a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800836e:	e03a      	b.n	80083e6 <UART_SetConfig+0x1d6>
 8008370:	2308      	movs	r3, #8
 8008372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008376:	e036      	b.n	80083e6 <UART_SetConfig+0x1d6>
 8008378:	2310      	movs	r3, #16
 800837a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800837e:	e032      	b.n	80083e6 <UART_SetConfig+0x1d6>
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a43      	ldr	r2, [pc, #268]	; (8008494 <UART_SetConfig+0x284>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d12a      	bne.n	80083e0 <UART_SetConfig+0x1d0>
 800838a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800838e:	f7ff fac1 	bl	8007914 <LL_RCC_GetLPUARTClockSource>
 8008392:	4603      	mov	r3, r0
 8008394:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008398:	d01a      	beq.n	80083d0 <UART_SetConfig+0x1c0>
 800839a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800839e:	d81b      	bhi.n	80083d8 <UART_SetConfig+0x1c8>
 80083a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083a4:	d00c      	beq.n	80083c0 <UART_SetConfig+0x1b0>
 80083a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083aa:	d815      	bhi.n	80083d8 <UART_SetConfig+0x1c8>
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d003      	beq.n	80083b8 <UART_SetConfig+0x1a8>
 80083b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083b4:	d008      	beq.n	80083c8 <UART_SetConfig+0x1b8>
 80083b6:	e00f      	b.n	80083d8 <UART_SetConfig+0x1c8>
 80083b8:	2300      	movs	r3, #0
 80083ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083be:	e012      	b.n	80083e6 <UART_SetConfig+0x1d6>
 80083c0:	2302      	movs	r3, #2
 80083c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083c6:	e00e      	b.n	80083e6 <UART_SetConfig+0x1d6>
 80083c8:	2304      	movs	r3, #4
 80083ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ce:	e00a      	b.n	80083e6 <UART_SetConfig+0x1d6>
 80083d0:	2308      	movs	r3, #8
 80083d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083d6:	e006      	b.n	80083e6 <UART_SetConfig+0x1d6>
 80083d8:	2310      	movs	r3, #16
 80083da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083de:	e002      	b.n	80083e6 <UART_SetConfig+0x1d6>
 80083e0:	2310      	movs	r3, #16
 80083e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a2a      	ldr	r2, [pc, #168]	; (8008494 <UART_SetConfig+0x284>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	f040 80a4 	bne.w	800853a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083f6:	2b08      	cmp	r3, #8
 80083f8:	d823      	bhi.n	8008442 <UART_SetConfig+0x232>
 80083fa:	a201      	add	r2, pc, #4	; (adr r2, 8008400 <UART_SetConfig+0x1f0>)
 80083fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008400:	08008425 	.word	0x08008425
 8008404:	08008443 	.word	0x08008443
 8008408:	0800842d 	.word	0x0800842d
 800840c:	08008443 	.word	0x08008443
 8008410:	08008433 	.word	0x08008433
 8008414:	08008443 	.word	0x08008443
 8008418:	08008443 	.word	0x08008443
 800841c:	08008443 	.word	0x08008443
 8008420:	0800843b 	.word	0x0800843b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008424:	f7fd ff48 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 8008428:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800842a:	e010      	b.n	800844e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800842c:	4b1c      	ldr	r3, [pc, #112]	; (80084a0 <UART_SetConfig+0x290>)
 800842e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008430:	e00d      	b.n	800844e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008432:	f7fd fe8d 	bl	8006150 <HAL_RCC_GetSysClockFreq>
 8008436:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008438:	e009      	b.n	800844e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800843a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800843e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008440:	e005      	b.n	800844e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8008442:	2300      	movs	r3, #0
 8008444:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800844c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 8137 	beq.w	80086c4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845a:	4a12      	ldr	r2, [pc, #72]	; (80084a4 <UART_SetConfig+0x294>)
 800845c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008460:	461a      	mov	r2, r3
 8008462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008464:	fbb3 f3f2 	udiv	r3, r3, r2
 8008468:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	685a      	ldr	r2, [r3, #4]
 800846e:	4613      	mov	r3, r2
 8008470:	005b      	lsls	r3, r3, #1
 8008472:	4413      	add	r3, r2
 8008474:	69ba      	ldr	r2, [r7, #24]
 8008476:	429a      	cmp	r2, r3
 8008478:	d305      	bcc.n	8008486 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008480:	69ba      	ldr	r2, [r7, #24]
 8008482:	429a      	cmp	r2, r3
 8008484:	d910      	bls.n	80084a8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800848c:	e11a      	b.n	80086c4 <UART_SetConfig+0x4b4>
 800848e:	bf00      	nop
 8008490:	cfff69f3 	.word	0xcfff69f3
 8008494:	40008000 	.word	0x40008000
 8008498:	40013800 	.word	0x40013800
 800849c:	40004400 	.word	0x40004400
 80084a0:	00f42400 	.word	0x00f42400
 80084a4:	0801b688 	.word	0x0801b688
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	2200      	movs	r2, #0
 80084ac:	60bb      	str	r3, [r7, #8]
 80084ae:	60fa      	str	r2, [r7, #12]
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b4:	4a8e      	ldr	r2, [pc, #568]	; (80086f0 <UART_SetConfig+0x4e0>)
 80084b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	2200      	movs	r2, #0
 80084be:	603b      	str	r3, [r7, #0]
 80084c0:	607a      	str	r2, [r7, #4]
 80084c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084ca:	f7f8 fb6d 	bl	8000ba8 <__aeabi_uldivmod>
 80084ce:	4602      	mov	r2, r0
 80084d0:	460b      	mov	r3, r1
 80084d2:	4610      	mov	r0, r2
 80084d4:	4619      	mov	r1, r3
 80084d6:	f04f 0200 	mov.w	r2, #0
 80084da:	f04f 0300 	mov.w	r3, #0
 80084de:	020b      	lsls	r3, r1, #8
 80084e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80084e4:	0202      	lsls	r2, r0, #8
 80084e6:	6979      	ldr	r1, [r7, #20]
 80084e8:	6849      	ldr	r1, [r1, #4]
 80084ea:	0849      	lsrs	r1, r1, #1
 80084ec:	2000      	movs	r0, #0
 80084ee:	460c      	mov	r4, r1
 80084f0:	4605      	mov	r5, r0
 80084f2:	eb12 0804 	adds.w	r8, r2, r4
 80084f6:	eb43 0905 	adc.w	r9, r3, r5
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	469a      	mov	sl, r3
 8008502:	4693      	mov	fp, r2
 8008504:	4652      	mov	r2, sl
 8008506:	465b      	mov	r3, fp
 8008508:	4640      	mov	r0, r8
 800850a:	4649      	mov	r1, r9
 800850c:	f7f8 fb4c 	bl	8000ba8 <__aeabi_uldivmod>
 8008510:	4602      	mov	r2, r0
 8008512:	460b      	mov	r3, r1
 8008514:	4613      	mov	r3, r2
 8008516:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800851e:	d308      	bcc.n	8008532 <UART_SetConfig+0x322>
 8008520:	6a3b      	ldr	r3, [r7, #32]
 8008522:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008526:	d204      	bcs.n	8008532 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	6a3a      	ldr	r2, [r7, #32]
 800852e:	60da      	str	r2, [r3, #12]
 8008530:	e0c8      	b.n	80086c4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008538:	e0c4      	b.n	80086c4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008542:	d168      	bne.n	8008616 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8008544:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008548:	2b08      	cmp	r3, #8
 800854a:	d828      	bhi.n	800859e <UART_SetConfig+0x38e>
 800854c:	a201      	add	r2, pc, #4	; (adr r2, 8008554 <UART_SetConfig+0x344>)
 800854e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008552:	bf00      	nop
 8008554:	08008579 	.word	0x08008579
 8008558:	08008581 	.word	0x08008581
 800855c:	08008589 	.word	0x08008589
 8008560:	0800859f 	.word	0x0800859f
 8008564:	0800858f 	.word	0x0800858f
 8008568:	0800859f 	.word	0x0800859f
 800856c:	0800859f 	.word	0x0800859f
 8008570:	0800859f 	.word	0x0800859f
 8008574:	08008597 	.word	0x08008597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008578:	f7fd fe9e 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 800857c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800857e:	e014      	b.n	80085aa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008580:	f7fd feac 	bl	80062dc <HAL_RCC_GetPCLK2Freq>
 8008584:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008586:	e010      	b.n	80085aa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008588:	4b5a      	ldr	r3, [pc, #360]	; (80086f4 <UART_SetConfig+0x4e4>)
 800858a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800858c:	e00d      	b.n	80085aa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800858e:	f7fd fddf 	bl	8006150 <HAL_RCC_GetSysClockFreq>
 8008592:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008594:	e009      	b.n	80085aa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800859a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800859c:	e005      	b.n	80085aa <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800859e:	2300      	movs	r3, #0
 80085a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80085a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f000 8089 	beq.w	80086c4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b6:	4a4e      	ldr	r2, [pc, #312]	; (80086f0 <UART_SetConfig+0x4e0>)
 80085b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085bc:	461a      	mov	r2, r3
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80085c4:	005a      	lsls	r2, r3, #1
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	085b      	lsrs	r3, r3, #1
 80085cc:	441a      	add	r2, r3
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	2b0f      	cmp	r3, #15
 80085de:	d916      	bls.n	800860e <UART_SetConfig+0x3fe>
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085e6:	d212      	bcs.n	800860e <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085e8:	6a3b      	ldr	r3, [r7, #32]
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	f023 030f 	bic.w	r3, r3, #15
 80085f0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	085b      	lsrs	r3, r3, #1
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	f003 0307 	and.w	r3, r3, #7
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	8bfb      	ldrh	r3, [r7, #30]
 8008600:	4313      	orrs	r3, r2
 8008602:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	8bfa      	ldrh	r2, [r7, #30]
 800860a:	60da      	str	r2, [r3, #12]
 800860c:	e05a      	b.n	80086c4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008614:	e056      	b.n	80086c4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008616:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800861a:	2b08      	cmp	r3, #8
 800861c:	d827      	bhi.n	800866e <UART_SetConfig+0x45e>
 800861e:	a201      	add	r2, pc, #4	; (adr r2, 8008624 <UART_SetConfig+0x414>)
 8008620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008624:	08008649 	.word	0x08008649
 8008628:	08008651 	.word	0x08008651
 800862c:	08008659 	.word	0x08008659
 8008630:	0800866f 	.word	0x0800866f
 8008634:	0800865f 	.word	0x0800865f
 8008638:	0800866f 	.word	0x0800866f
 800863c:	0800866f 	.word	0x0800866f
 8008640:	0800866f 	.word	0x0800866f
 8008644:	08008667 	.word	0x08008667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008648:	f7fd fe36 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 800864c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800864e:	e014      	b.n	800867a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008650:	f7fd fe44 	bl	80062dc <HAL_RCC_GetPCLK2Freq>
 8008654:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008656:	e010      	b.n	800867a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008658:	4b26      	ldr	r3, [pc, #152]	; (80086f4 <UART_SetConfig+0x4e4>)
 800865a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800865c:	e00d      	b.n	800867a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800865e:	f7fd fd77 	bl	8006150 <HAL_RCC_GetSysClockFreq>
 8008662:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008664:	e009      	b.n	800867a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800866a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800866c:	e005      	b.n	800867a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800866e:	2300      	movs	r3, #0
 8008670:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008678:	bf00      	nop
    }

    if (pclk != 0U)
 800867a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867c:	2b00      	cmp	r3, #0
 800867e:	d021      	beq.n	80086c4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008684:	4a1a      	ldr	r2, [pc, #104]	; (80086f0 <UART_SetConfig+0x4e0>)
 8008686:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800868a:	461a      	mov	r2, r3
 800868c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	085b      	lsrs	r3, r3, #1
 8008698:	441a      	add	r2, r3
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	fbb2 f3f3 	udiv	r3, r2, r3
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086a6:	6a3b      	ldr	r3, [r7, #32]
 80086a8:	2b0f      	cmp	r3, #15
 80086aa:	d908      	bls.n	80086be <UART_SetConfig+0x4ae>
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086b2:	d204      	bcs.n	80086be <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	6a3a      	ldr	r2, [r7, #32]
 80086ba:	60da      	str	r2, [r3, #12]
 80086bc:	e002      	b.n	80086c4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	2200      	movs	r2, #0
 80086d8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	2200      	movs	r2, #0
 80086de:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80086e0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3730      	adds	r7, #48	; 0x30
 80086e8:	46bd      	mov	sp, r7
 80086ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086ee:	bf00      	nop
 80086f0:	0801b688 	.word	0x0801b688
 80086f4:	00f42400 	.word	0x00f42400

080086f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00a      	beq.n	8008722 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	430a      	orrs	r2, r1
 8008720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008726:	f003 0302 	and.w	r3, r3, #2
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00a      	beq.n	8008744 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	430a      	orrs	r2, r1
 8008742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008748:	f003 0304 	and.w	r3, r3, #4
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00a      	beq.n	8008766 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	430a      	orrs	r2, r1
 8008764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876a:	f003 0308 	and.w	r3, r3, #8
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00a      	beq.n	8008788 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	430a      	orrs	r2, r1
 8008786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878c:	f003 0310 	and.w	r3, r3, #16
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00a      	beq.n	80087aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	430a      	orrs	r2, r1
 80087a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ae:	f003 0320 	and.w	r3, r3, #32
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00a      	beq.n	80087cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	430a      	orrs	r2, r1
 80087ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d01a      	beq.n	800880e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	430a      	orrs	r2, r1
 80087ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087f6:	d10a      	bne.n	800880e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	430a      	orrs	r2, r1
 800880c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00a      	beq.n	8008830 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	430a      	orrs	r2, r1
 800882e:	605a      	str	r2, [r3, #4]
  }
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	bc80      	pop	{r7}
 8008838:	4770      	bx	lr

0800883a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b086      	sub	sp, #24
 800883e:	af02      	add	r7, sp, #8
 8008840:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800884a:	f7f9 fa75 	bl	8001d38 <HAL_GetTick>
 800884e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0308 	and.w	r3, r3, #8
 800885a:	2b08      	cmp	r3, #8
 800885c:	d10e      	bne.n	800887c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800885e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f82f 	bl	80088d0 <UART_WaitOnFlagUntilTimeout>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d001      	beq.n	800887c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e025      	b.n	80088c8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f003 0304 	and.w	r3, r3, #4
 8008886:	2b04      	cmp	r3, #4
 8008888:	d10e      	bne.n	80088a8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800888a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 f819 	bl	80088d0 <UART_WaitOnFlagUntilTimeout>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d001      	beq.n	80088a8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088a4:	2303      	movs	r3, #3
 80088a6:	e00f      	b.n	80088c8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2220      	movs	r2, #32
 80088ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2220      	movs	r2, #32
 80088b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b09c      	sub	sp, #112	; 0x70
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	603b      	str	r3, [r7, #0]
 80088dc:	4613      	mov	r3, r2
 80088de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088e0:	e0a9      	b.n	8008a36 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e8:	f000 80a5 	beq.w	8008a36 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088ec:	f7f9 fa24 	bl	8001d38 <HAL_GetTick>
 80088f0:	4602      	mov	r2, r0
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d302      	bcc.n	8008902 <UART_WaitOnFlagUntilTimeout+0x32>
 80088fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d140      	bne.n	8008984 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800890a:	e853 3f00 	ldrex	r3, [r3]
 800890e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008912:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008916:	667b      	str	r3, [r7, #100]	; 0x64
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	461a      	mov	r2, r3
 800891e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008920:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008922:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008924:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008926:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008928:	e841 2300 	strex	r3, r2, [r1]
 800892c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800892e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1e6      	bne.n	8008902 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	3308      	adds	r3, #8
 800893a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800893e:	e853 3f00 	ldrex	r3, [r3]
 8008942:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008946:	f023 0301 	bic.w	r3, r3, #1
 800894a:	663b      	str	r3, [r7, #96]	; 0x60
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	3308      	adds	r3, #8
 8008952:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008954:	64ba      	str	r2, [r7, #72]	; 0x48
 8008956:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008958:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800895a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800895c:	e841 2300 	strex	r3, r2, [r1]
 8008960:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1e5      	bne.n	8008934 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2220      	movs	r2, #32
 800896c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2220      	movs	r2, #32
 8008974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e069      	b.n	8008a58 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 0304 	and.w	r3, r3, #4
 800898e:	2b00      	cmp	r3, #0
 8008990:	d051      	beq.n	8008a36 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	69db      	ldr	r3, [r3, #28]
 8008998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800899c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089a0:	d149      	bne.n	8008a36 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089aa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b4:	e853 3f00 	ldrex	r3, [r3]
 80089b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	461a      	mov	r2, r3
 80089c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089ca:	637b      	str	r3, [r7, #52]	; 0x34
 80089cc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089d2:	e841 2300 	strex	r3, r2, [r1]
 80089d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80089d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1e6      	bne.n	80089ac <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	3308      	adds	r3, #8
 80089e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	e853 3f00 	ldrex	r3, [r3]
 80089ec:	613b      	str	r3, [r7, #16]
   return(result);
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	f023 0301 	bic.w	r3, r3, #1
 80089f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	3308      	adds	r3, #8
 80089fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80089fe:	623a      	str	r2, [r7, #32]
 8008a00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a02:	69f9      	ldr	r1, [r7, #28]
 8008a04:	6a3a      	ldr	r2, [r7, #32]
 8008a06:	e841 2300 	strex	r3, r2, [r1]
 8008a0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1e5      	bne.n	80089de <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2220      	movs	r2, #32
 8008a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2220      	movs	r2, #32
 8008a1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2220      	movs	r2, #32
 8008a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008a32:	2303      	movs	r3, #3
 8008a34:	e010      	b.n	8008a58 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	69da      	ldr	r2, [r3, #28]
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	4013      	ands	r3, r2
 8008a40:	68ba      	ldr	r2, [r7, #8]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	bf0c      	ite	eq
 8008a46:	2301      	moveq	r3, #1
 8008a48:	2300      	movne	r3, #0
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	79fb      	ldrb	r3, [r7, #7]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	f43f af46 	beq.w	80088e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3770      	adds	r7, #112	; 0x70
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b0a3      	sub	sp, #140	; 0x8c
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	88fa      	ldrh	r2, [r7, #6]
 8008a78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	88fa      	ldrh	r2, [r7, #6]
 8008a80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a92:	d10e      	bne.n	8008ab2 <UART_Start_Receive_IT+0x52>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d105      	bne.n	8008aa8 <UART_Start_Receive_IT+0x48>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008aa2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008aa6:	e02d      	b.n	8008b04 <UART_Start_Receive_IT+0xa4>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	22ff      	movs	r2, #255	; 0xff
 8008aac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ab0:	e028      	b.n	8008b04 <UART_Start_Receive_IT+0xa4>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10d      	bne.n	8008ad6 <UART_Start_Receive_IT+0x76>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d104      	bne.n	8008acc <UART_Start_Receive_IT+0x6c>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	22ff      	movs	r2, #255	; 0xff
 8008ac6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008aca:	e01b      	b.n	8008b04 <UART_Start_Receive_IT+0xa4>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	227f      	movs	r2, #127	; 0x7f
 8008ad0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ad4:	e016      	b.n	8008b04 <UART_Start_Receive_IT+0xa4>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ade:	d10d      	bne.n	8008afc <UART_Start_Receive_IT+0x9c>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d104      	bne.n	8008af2 <UART_Start_Receive_IT+0x92>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	227f      	movs	r2, #127	; 0x7f
 8008aec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008af0:	e008      	b.n	8008b04 <UART_Start_Receive_IT+0xa4>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	223f      	movs	r2, #63	; 0x3f
 8008af6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008afa:	e003      	b.n	8008b04 <UART_Start_Receive_IT+0xa4>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2222      	movs	r2, #34	; 0x22
 8008b10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	3308      	adds	r3, #8
 8008b1a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b1e:	e853 3f00 	ldrex	r3, [r3]
 8008b22:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008b24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b26:	f043 0301 	orr.w	r3, r3, #1
 8008b2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	3308      	adds	r3, #8
 8008b34:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008b38:	673a      	str	r2, [r7, #112]	; 0x70
 8008b3a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008b3e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008b40:	e841 2300 	strex	r3, r2, [r1]
 8008b44:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008b46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1e3      	bne.n	8008b14 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b54:	d153      	bne.n	8008bfe <UART_Start_Receive_IT+0x19e>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b5c:	88fa      	ldrh	r2, [r7, #6]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d34d      	bcc.n	8008bfe <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b6a:	d107      	bne.n	8008b7c <UART_Start_Receive_IT+0x11c>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d103      	bne.n	8008b7c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	4a4a      	ldr	r2, [pc, #296]	; (8008ca0 <UART_Start_Receive_IT+0x240>)
 8008b78:	671a      	str	r2, [r3, #112]	; 0x70
 8008b7a:	e002      	b.n	8008b82 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	4a49      	ldr	r2, [pc, #292]	; (8008ca4 <UART_Start_Receive_IT+0x244>)
 8008b80:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d01a      	beq.n	8008bc8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b9a:	e853 3f00 	ldrex	r3, [r3]
 8008b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ba6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bb6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008bba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008bbc:	e841 2300 	strex	r3, r2, [r1]
 8008bc0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1e4      	bne.n	8008b92 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3308      	adds	r3, #8
 8008bce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd2:	e853 3f00 	ldrex	r3, [r3]
 8008bd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bde:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3308      	adds	r3, #8
 8008be6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008be8:	64ba      	str	r2, [r7, #72]	; 0x48
 8008bea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008bee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bf0:	e841 2300 	strex	r3, r2, [r1]
 8008bf4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1e5      	bne.n	8008bc8 <UART_Start_Receive_IT+0x168>
 8008bfc:	e04a      	b.n	8008c94 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c06:	d107      	bne.n	8008c18 <UART_Start_Receive_IT+0x1b8>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d103      	bne.n	8008c18 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	4a25      	ldr	r2, [pc, #148]	; (8008ca8 <UART_Start_Receive_IT+0x248>)
 8008c14:	671a      	str	r2, [r3, #112]	; 0x70
 8008c16:	e002      	b.n	8008c1e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	4a24      	ldr	r2, [pc, #144]	; (8008cac <UART_Start_Receive_IT+0x24c>)
 8008c1c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d019      	beq.n	8008c62 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c36:	e853 3f00 	ldrex	r3, [r3]
 8008c3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008c42:	677b      	str	r3, [r7, #116]	; 0x74
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	461a      	mov	r2, r3
 8008c4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c54:	e841 2300 	strex	r3, r2, [r1]
 8008c58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1e6      	bne.n	8008c2e <UART_Start_Receive_IT+0x1ce>
 8008c60:	e018      	b.n	8008c94 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	e853 3f00 	ldrex	r3, [r3]
 8008c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	f043 0320 	orr.w	r3, r3, #32
 8008c76:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c80:	623b      	str	r3, [r7, #32]
 8008c82:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c84:	69f9      	ldr	r1, [r7, #28]
 8008c86:	6a3a      	ldr	r2, [r7, #32]
 8008c88:	e841 2300 	strex	r3, r2, [r1]
 8008c8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1e6      	bne.n	8008c62 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	378c      	adds	r7, #140	; 0x8c
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bc80      	pop	{r7}
 8008c9e:	4770      	bx	lr
 8008ca0:	0800956d 	.word	0x0800956d
 8008ca4:	08009275 	.word	0x08009275
 8008ca8:	08009113 	.word	0x08009113
 8008cac:	08008fb3 	.word	0x08008fb3

08008cb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b08f      	sub	sp, #60	; 0x3c
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	e853 3f00 	ldrex	r3, [r3]
 8008cc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cd8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cde:	e841 2300 	strex	r3, r2, [r1]
 8008ce2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1e6      	bne.n	8008cb8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	3308      	adds	r3, #8
 8008cf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	e853 3f00 	ldrex	r3, [r3]
 8008cf8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008d00:	633b      	str	r3, [r7, #48]	; 0x30
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3308      	adds	r3, #8
 8008d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d0a:	61ba      	str	r2, [r7, #24]
 8008d0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0e:	6979      	ldr	r1, [r7, #20]
 8008d10:	69ba      	ldr	r2, [r7, #24]
 8008d12:	e841 2300 	strex	r3, r2, [r1]
 8008d16:	613b      	str	r3, [r7, #16]
   return(result);
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1e5      	bne.n	8008cea <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2220      	movs	r2, #32
 8008d22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8008d26:	bf00      	nop
 8008d28:	373c      	adds	r7, #60	; 0x3c
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bc80      	pop	{r7}
 8008d2e:	4770      	bx	lr

08008d30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b095      	sub	sp, #84	; 0x54
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d40:	e853 3f00 	ldrex	r3, [r3]
 8008d44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d56:	643b      	str	r3, [r7, #64]	; 0x40
 8008d58:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d5e:	e841 2300 	strex	r3, r2, [r1]
 8008d62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1e6      	bne.n	8008d38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	3308      	adds	r3, #8
 8008d70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d72:	6a3b      	ldr	r3, [r7, #32]
 8008d74:	e853 3f00 	ldrex	r3, [r3]
 8008d78:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d80:	f023 0301 	bic.w	r3, r3, #1
 8008d84:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3308      	adds	r3, #8
 8008d8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d96:	e841 2300 	strex	r3, r2, [r1]
 8008d9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1e3      	bne.n	8008d6a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d118      	bne.n	8008ddc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	e853 3f00 	ldrex	r3, [r3]
 8008db6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	f023 0310 	bic.w	r3, r3, #16
 8008dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dc8:	61bb      	str	r3, [r7, #24]
 8008dca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dcc:	6979      	ldr	r1, [r7, #20]
 8008dce:	69ba      	ldr	r2, [r7, #24]
 8008dd0:	e841 2300 	strex	r3, r2, [r1]
 8008dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1e6      	bne.n	8008daa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2220      	movs	r2, #32
 8008de0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008df0:	bf00      	nop
 8008df2:	3754      	adds	r7, #84	; 0x54
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bc80      	pop	{r7}
 8008df8:	4770      	bx	lr

08008dfa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b090      	sub	sp, #64	; 0x40
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e06:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f003 0320 	and.w	r3, r3, #32
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d137      	bne.n	8008e86 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3308      	adds	r3, #8
 8008e24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e28:	e853 3f00 	ldrex	r3, [r3]
 8008e2c:	623b      	str	r3, [r7, #32]
   return(result);
 8008e2e:	6a3b      	ldr	r3, [r7, #32]
 8008e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e34:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	3308      	adds	r3, #8
 8008e3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e3e:	633a      	str	r2, [r7, #48]	; 0x30
 8008e40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e46:	e841 2300 	strex	r3, r2, [r1]
 8008e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1e5      	bne.n	8008e1e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	e853 3f00 	ldrex	r3, [r3]
 8008e5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e66:	637b      	str	r3, [r7, #52]	; 0x34
 8008e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e70:	61fb      	str	r3, [r7, #28]
 8008e72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e74:	69b9      	ldr	r1, [r7, #24]
 8008e76:	69fa      	ldr	r2, [r7, #28]
 8008e78:	e841 2300 	strex	r3, r2, [r1]
 8008e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1e6      	bne.n	8008e52 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e84:	e002      	b.n	8008e8c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008e86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008e88:	f7f9 fce8 	bl	800285c <HAL_UART_TxCpltCallback>
}
 8008e8c:	bf00      	nop
 8008e8e:	3740      	adds	r7, #64	; 0x40
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f7ff f996 	bl	80081d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ea8:	bf00      	nop
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ebc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ec4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ecc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed8:	2b80      	cmp	r3, #128	; 0x80
 8008eda:	d109      	bne.n	8008ef0 <UART_DMAError+0x40>
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	2b21      	cmp	r3, #33	; 0x21
 8008ee0:	d106      	bne.n	8008ef0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008eea:	6978      	ldr	r0, [r7, #20]
 8008eec:	f7ff fee0 	bl	8008cb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008efa:	2b40      	cmp	r3, #64	; 0x40
 8008efc:	d109      	bne.n	8008f12 <UART_DMAError+0x62>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2b22      	cmp	r3, #34	; 0x22
 8008f02:	d106      	bne.n	8008f12 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008f0c:	6978      	ldr	r0, [r7, #20]
 8008f0e:	f7ff ff0f 	bl	8008d30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f18:	f043 0210 	orr.w	r2, r3, #16
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f22:	6978      	ldr	r0, [r7, #20]
 8008f24:	f7ff f95f 	bl	80081e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f28:	bf00      	nop
 8008f2a:	3718      	adds	r7, #24
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f7ff f949 	bl	80081e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f54:	bf00      	nop
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b088      	sub	sp, #32
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	e853 3f00 	ldrex	r3, [r3]
 8008f70:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f78:	61fb      	str	r3, [r7, #28]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	61bb      	str	r3, [r7, #24]
 8008f84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f86:	6979      	ldr	r1, [r7, #20]
 8008f88:	69ba      	ldr	r2, [r7, #24]
 8008f8a:	e841 2300 	strex	r3, r2, [r1]
 8008f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d1e6      	bne.n	8008f64 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2220      	movs	r2, #32
 8008f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7f9 fc59 	bl	800285c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008faa:	bf00      	nop
 8008fac:	3720      	adds	r7, #32
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b096      	sub	sp, #88	; 0x58
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008fc0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fca:	2b22      	cmp	r3, #34	; 0x22
 8008fcc:	f040 8095 	bne.w	80090fa <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008fda:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008fde:	b2d9      	uxtb	r1, r3
 8008fe0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fea:	400a      	ands	r2, r1
 8008fec:	b2d2      	uxtb	r2, r2
 8008fee:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ff4:	1c5a      	adds	r2, r3, #1
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009000:	b29b      	uxth	r3, r3
 8009002:	3b01      	subs	r3, #1
 8009004:	b29a      	uxth	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009012:	b29b      	uxth	r3, r3
 8009014:	2b00      	cmp	r3, #0
 8009016:	d178      	bne.n	800910a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009020:	e853 3f00 	ldrex	r3, [r3]
 8009024:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009028:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800902c:	653b      	str	r3, [r7, #80]	; 0x50
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	461a      	mov	r2, r3
 8009034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009036:	647b      	str	r3, [r7, #68]	; 0x44
 8009038:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800903c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800903e:	e841 2300 	strex	r3, r2, [r1]
 8009042:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1e6      	bne.n	8009018 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3308      	adds	r3, #8
 8009050:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009054:	e853 3f00 	ldrex	r3, [r3]
 8009058:	623b      	str	r3, [r7, #32]
   return(result);
 800905a:	6a3b      	ldr	r3, [r7, #32]
 800905c:	f023 0301 	bic.w	r3, r3, #1
 8009060:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3308      	adds	r3, #8
 8009068:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800906a:	633a      	str	r2, [r7, #48]	; 0x30
 800906c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009072:	e841 2300 	strex	r3, r2, [r1]
 8009076:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1e5      	bne.n	800904a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2220      	movs	r2, #32
 8009082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009090:	2b01      	cmp	r3, #1
 8009092:	d12e      	bne.n	80090f2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	e853 3f00 	ldrex	r3, [r3]
 80090a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f023 0310 	bic.w	r3, r3, #16
 80090ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	461a      	mov	r2, r3
 80090b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090b8:	61fb      	str	r3, [r7, #28]
 80090ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090bc:	69b9      	ldr	r1, [r7, #24]
 80090be:	69fa      	ldr	r2, [r7, #28]
 80090c0:	e841 2300 	strex	r3, r2, [r1]
 80090c4:	617b      	str	r3, [r7, #20]
   return(result);
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1e6      	bne.n	800909a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	69db      	ldr	r3, [r3, #28]
 80090d2:	f003 0310 	and.w	r3, r3, #16
 80090d6:	2b10      	cmp	r3, #16
 80090d8:	d103      	bne.n	80090e2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2210      	movs	r2, #16
 80090e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80090e8:	4619      	mov	r1, r3
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7ff f884 	bl	80081f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090f0:	e00b      	b.n	800910a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f7f9 fbc8 	bl	8002888 <HAL_UART_RxCpltCallback>
}
 80090f8:	e007      	b.n	800910a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	699a      	ldr	r2, [r3, #24]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f042 0208 	orr.w	r2, r2, #8
 8009108:	619a      	str	r2, [r3, #24]
}
 800910a:	bf00      	nop
 800910c:	3758      	adds	r7, #88	; 0x58
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b096      	sub	sp, #88	; 0x58
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009120:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800912a:	2b22      	cmp	r3, #34	; 0x22
 800912c:	f040 8095 	bne.w	800925a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009136:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800913e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009140:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009144:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009148:	4013      	ands	r3, r2
 800914a:	b29a      	uxth	r2, r3
 800914c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800914e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009154:	1c9a      	adds	r2, r3, #2
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009160:	b29b      	uxth	r3, r3
 8009162:	3b01      	subs	r3, #1
 8009164:	b29a      	uxth	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009172:	b29b      	uxth	r3, r3
 8009174:	2b00      	cmp	r3, #0
 8009176:	d178      	bne.n	800926a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009180:	e853 3f00 	ldrex	r3, [r3]
 8009184:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009188:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800918c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	461a      	mov	r2, r3
 8009194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009196:	643b      	str	r3, [r7, #64]	; 0x40
 8009198:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800919c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800919e:	e841 2300 	strex	r3, r2, [r1]
 80091a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1e6      	bne.n	8009178 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	3308      	adds	r3, #8
 80091b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b2:	6a3b      	ldr	r3, [r7, #32]
 80091b4:	e853 3f00 	ldrex	r3, [r3]
 80091b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	f023 0301 	bic.w	r3, r3, #1
 80091c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	3308      	adds	r3, #8
 80091c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091d2:	e841 2300 	strex	r3, r2, [r1]
 80091d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1e5      	bne.n	80091aa <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2220      	movs	r2, #32
 80091e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d12e      	bne.n	8009252 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	e853 3f00 	ldrex	r3, [r3]
 8009206:	60bb      	str	r3, [r7, #8]
   return(result);
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	f023 0310 	bic.w	r3, r3, #16
 800920e:	647b      	str	r3, [r7, #68]	; 0x44
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	461a      	mov	r2, r3
 8009216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009218:	61bb      	str	r3, [r7, #24]
 800921a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921c:	6979      	ldr	r1, [r7, #20]
 800921e:	69ba      	ldr	r2, [r7, #24]
 8009220:	e841 2300 	strex	r3, r2, [r1]
 8009224:	613b      	str	r3, [r7, #16]
   return(result);
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1e6      	bne.n	80091fa <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	69db      	ldr	r3, [r3, #28]
 8009232:	f003 0310 	and.w	r3, r3, #16
 8009236:	2b10      	cmp	r3, #16
 8009238:	d103      	bne.n	8009242 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2210      	movs	r2, #16
 8009240:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009248:	4619      	mov	r1, r3
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f7fe ffd4 	bl	80081f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009250:	e00b      	b.n	800926a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7f9 fb18 	bl	8002888 <HAL_UART_RxCpltCallback>
}
 8009258:	e007      	b.n	800926a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	699a      	ldr	r2, [r3, #24]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f042 0208 	orr.w	r2, r2, #8
 8009268:	619a      	str	r2, [r3, #24]
}
 800926a:	bf00      	nop
 800926c:	3758      	adds	r7, #88	; 0x58
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
	...

08009274 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b0a6      	sub	sp, #152	; 0x98
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009282:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	69db      	ldr	r3, [r3, #28]
 800928c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092aa:	2b22      	cmp	r3, #34	; 0x22
 80092ac:	f040 814f 	bne.w	800954e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80092b6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092ba:	e0f6      	b.n	80094aa <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80092c6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80092ca:	b2d9      	uxtb	r1, r3
 80092cc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80092d0:	b2da      	uxtb	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d6:	400a      	ands	r2, r1
 80092d8:	b2d2      	uxtb	r2, r2
 80092da:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e0:	1c5a      	adds	r2, r3, #1
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	3b01      	subs	r3, #1
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	69db      	ldr	r3, [r3, #28]
 80092fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009302:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009306:	f003 0307 	and.w	r3, r3, #7
 800930a:	2b00      	cmp	r3, #0
 800930c:	d053      	beq.n	80093b6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800930e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009312:	f003 0301 	and.w	r3, r3, #1
 8009316:	2b00      	cmp	r3, #0
 8009318:	d011      	beq.n	800933e <UART_RxISR_8BIT_FIFOEN+0xca>
 800931a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800931e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00b      	beq.n	800933e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2201      	movs	r2, #1
 800932c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009334:	f043 0201 	orr.w	r2, r3, #1
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800933e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009342:	f003 0302 	and.w	r3, r3, #2
 8009346:	2b00      	cmp	r3, #0
 8009348:	d011      	beq.n	800936e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800934a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00b      	beq.n	800936e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2202      	movs	r2, #2
 800935c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009364:	f043 0204 	orr.w	r2, r3, #4
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800936e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009372:	f003 0304 	and.w	r3, r3, #4
 8009376:	2b00      	cmp	r3, #0
 8009378:	d011      	beq.n	800939e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800937a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00b      	beq.n	800939e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2204      	movs	r2, #4
 800938c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009394:	f043 0202 	orr.w	r2, r3, #2
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d006      	beq.n	80093b6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f7fe ff1c 	bl	80081e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093bc:	b29b      	uxth	r3, r3
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d173      	bne.n	80094aa <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093ca:	e853 3f00 	ldrex	r3, [r3]
 80093ce:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80093d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	461a      	mov	r2, r3
 80093e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80093e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80093e6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80093ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80093ec:	e841 2300 	strex	r3, r2, [r1]
 80093f0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80093f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1e4      	bne.n	80093c2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	3308      	adds	r3, #8
 80093fe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009402:	e853 3f00 	ldrex	r3, [r3]
 8009406:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800940a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800940e:	f023 0301 	bic.w	r3, r3, #1
 8009412:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3308      	adds	r3, #8
 800941a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800941c:	657a      	str	r2, [r7, #84]	; 0x54
 800941e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009420:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009422:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009424:	e841 2300 	strex	r3, r2, [r1]
 8009428:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800942a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1e3      	bne.n	80093f8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2220      	movs	r2, #32
 8009434:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009442:	2b01      	cmp	r3, #1
 8009444:	d12e      	bne.n	80094a4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009454:	e853 3f00 	ldrex	r3, [r3]
 8009458:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800945a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945c:	f023 0310 	bic.w	r3, r3, #16
 8009460:	67bb      	str	r3, [r7, #120]	; 0x78
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	461a      	mov	r2, r3
 8009468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800946a:	643b      	str	r3, [r7, #64]	; 0x40
 800946c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009470:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009472:	e841 2300 	strex	r3, r2, [r1]
 8009476:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1e6      	bne.n	800944c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	69db      	ldr	r3, [r3, #28]
 8009484:	f003 0310 	and.w	r3, r3, #16
 8009488:	2b10      	cmp	r3, #16
 800948a:	d103      	bne.n	8009494 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2210      	movs	r2, #16
 8009492:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800949a:	4619      	mov	r1, r3
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7fe feab 	bl	80081f8 <HAL_UARTEx_RxEventCallback>
 80094a2:	e002      	b.n	80094aa <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f7f9 f9ef 	bl	8002888 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d006      	beq.n	80094c0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80094b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094b6:	f003 0320 	and.w	r3, r3, #32
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f47f aefe 	bne.w	80092bc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094c6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80094ca:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d045      	beq.n	800955e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80094d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80094dc:	429a      	cmp	r2, r3
 80094de:	d23e      	bcs.n	800955e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	3308      	adds	r3, #8
 80094e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e8:	6a3b      	ldr	r3, [r7, #32]
 80094ea:	e853 3f00 	ldrex	r3, [r3]
 80094ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094f6:	673b      	str	r3, [r7, #112]	; 0x70
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	3308      	adds	r3, #8
 80094fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009500:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009502:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009504:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009508:	e841 2300 	strex	r3, r2, [r1]
 800950c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800950e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009510:	2b00      	cmp	r3, #0
 8009512:	d1e5      	bne.n	80094e0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a14      	ldr	r2, [pc, #80]	; (8009568 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009518:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	e853 3f00 	ldrex	r3, [r3]
 8009526:	60bb      	str	r3, [r7, #8]
   return(result);
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	f043 0320 	orr.w	r3, r3, #32
 800952e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	461a      	mov	r2, r3
 8009536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009538:	61bb      	str	r3, [r7, #24]
 800953a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953c:	6979      	ldr	r1, [r7, #20]
 800953e:	69ba      	ldr	r2, [r7, #24]
 8009540:	e841 2300 	strex	r3, r2, [r1]
 8009544:	613b      	str	r3, [r7, #16]
   return(result);
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1e6      	bne.n	800951a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800954c:	e007      	b.n	800955e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	699a      	ldr	r2, [r3, #24]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f042 0208 	orr.w	r2, r2, #8
 800955c:	619a      	str	r2, [r3, #24]
}
 800955e:	bf00      	nop
 8009560:	3798      	adds	r7, #152	; 0x98
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	08008fb3 	.word	0x08008fb3

0800956c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b0a8      	sub	sp, #160	; 0xa0
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800957a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	69db      	ldr	r3, [r3, #28]
 8009584:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095a2:	2b22      	cmp	r3, #34	; 0x22
 80095a4:	f040 8153 	bne.w	800984e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80095ae:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80095b2:	e0fa      	b.n	80097aa <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ba:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80095c6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80095ca:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80095ce:	4013      	ands	r3, r2
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095dc:	1c9a      	adds	r2, r3, #2
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	3b01      	subs	r3, #1
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80095fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009602:	f003 0307 	and.w	r3, r3, #7
 8009606:	2b00      	cmp	r3, #0
 8009608:	d053      	beq.n	80096b2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800960a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	d011      	beq.n	800963a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009616:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800961a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00b      	beq.n	800963a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2201      	movs	r2, #1
 8009628:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009630:	f043 0201 	orr.w	r2, r3, #1
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800963a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800963e:	f003 0302 	and.w	r3, r3, #2
 8009642:	2b00      	cmp	r3, #0
 8009644:	d011      	beq.n	800966a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009646:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800964a:	f003 0301 	and.w	r3, r3, #1
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00b      	beq.n	800966a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2202      	movs	r2, #2
 8009658:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009660:	f043 0204 	orr.w	r2, r3, #4
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800966a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800966e:	f003 0304 	and.w	r3, r3, #4
 8009672:	2b00      	cmp	r3, #0
 8009674:	d011      	beq.n	800969a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009676:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800967a:	f003 0301 	and.w	r3, r3, #1
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00b      	beq.n	800969a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2204      	movs	r2, #4
 8009688:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009690:	f043 0202 	orr.w	r2, r3, #2
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d006      	beq.n	80096b2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f7fe fd9e 	bl	80081e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d175      	bne.n	80097aa <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096c6:	e853 3f00 	ldrex	r3, [r3]
 80096ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80096cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	461a      	mov	r2, r3
 80096dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80096e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80096e2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80096e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80096e8:	e841 2300 	strex	r3, r2, [r1]
 80096ec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80096ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d1e4      	bne.n	80096be <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	3308      	adds	r3, #8
 80096fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096fe:	e853 3f00 	ldrex	r3, [r3]
 8009702:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800970a:	f023 0301 	bic.w	r3, r3, #1
 800970e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	3308      	adds	r3, #8
 8009718:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800971c:	65ba      	str	r2, [r7, #88]	; 0x58
 800971e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009720:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009722:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009724:	e841 2300 	strex	r3, r2, [r1]
 8009728:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800972a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1e1      	bne.n	80096f4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2220      	movs	r2, #32
 8009734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009742:	2b01      	cmp	r3, #1
 8009744:	d12e      	bne.n	80097a4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009754:	e853 3f00 	ldrex	r3, [r3]
 8009758:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800975a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800975c:	f023 0310 	bic.w	r3, r3, #16
 8009760:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	461a      	mov	r2, r3
 8009768:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800976a:	647b      	str	r3, [r7, #68]	; 0x44
 800976c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009770:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009772:	e841 2300 	strex	r3, r2, [r1]
 8009776:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800977a:	2b00      	cmp	r3, #0
 800977c:	d1e6      	bne.n	800974c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	69db      	ldr	r3, [r3, #28]
 8009784:	f003 0310 	and.w	r3, r3, #16
 8009788:	2b10      	cmp	r3, #16
 800978a:	d103      	bne.n	8009794 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2210      	movs	r2, #16
 8009792:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800979a:	4619      	mov	r1, r3
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f7fe fd2b 	bl	80081f8 <HAL_UARTEx_RxEventCallback>
 80097a2:	e002      	b.n	80097aa <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f7f9 f86f 	bl	8002888 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80097aa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d006      	beq.n	80097c0 <UART_RxISR_16BIT_FIFOEN+0x254>
 80097b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097b6:	f003 0320 	and.w	r3, r3, #32
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f47f aefa 	bne.w	80095b4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097c6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80097ca:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d045      	beq.n	800985e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80097d8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80097dc:	429a      	cmp	r2, r3
 80097de:	d23e      	bcs.n	800985e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	3308      	adds	r3, #8
 80097e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ea:	e853 3f00 	ldrex	r3, [r3]
 80097ee:	623b      	str	r3, [r7, #32]
   return(result);
 80097f0:	6a3b      	ldr	r3, [r7, #32]
 80097f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097f6:	677b      	str	r3, [r7, #116]	; 0x74
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	3308      	adds	r3, #8
 80097fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009800:	633a      	str	r2, [r7, #48]	; 0x30
 8009802:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009804:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009808:	e841 2300 	strex	r3, r2, [r1]
 800980c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800980e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009810:	2b00      	cmp	r3, #0
 8009812:	d1e5      	bne.n	80097e0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a14      	ldr	r2, [pc, #80]	; (8009868 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009818:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	e853 3f00 	ldrex	r3, [r3]
 8009826:	60fb      	str	r3, [r7, #12]
   return(result);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f043 0320 	orr.w	r3, r3, #32
 800982e:	673b      	str	r3, [r7, #112]	; 0x70
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	461a      	mov	r2, r3
 8009836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009838:	61fb      	str	r3, [r7, #28]
 800983a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983c:	69b9      	ldr	r1, [r7, #24]
 800983e:	69fa      	ldr	r2, [r7, #28]
 8009840:	e841 2300 	strex	r3, r2, [r1]
 8009844:	617b      	str	r3, [r7, #20]
   return(result);
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1e6      	bne.n	800981a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800984c:	e007      	b.n	800985e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	699a      	ldr	r2, [r3, #24]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f042 0208 	orr.w	r2, r2, #8
 800985c:	619a      	str	r2, [r3, #24]
}
 800985e:	bf00      	nop
 8009860:	37a0      	adds	r7, #160	; 0xa0
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	08009113 	.word	0x08009113

0800986c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009874:	bf00      	nop
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	bc80      	pop	{r7}
 800987c:	4770      	bx	lr

0800987e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800987e:	b480      	push	{r7}
 8009880:	b083      	sub	sp, #12
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009886:	bf00      	nop
 8009888:	370c      	adds	r7, #12
 800988a:	46bd      	mov	sp, r7
 800988c:	bc80      	pop	{r7}
 800988e:	4770      	bx	lr

08009890 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	bc80      	pop	{r7}
 80098a0:	4770      	bx	lr

080098a2 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b088      	sub	sp, #32
 80098a6:	af02      	add	r7, sp, #8
 80098a8:	60f8      	str	r0, [r7, #12]
 80098aa:	1d3b      	adds	r3, r7, #4
 80098ac:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d101      	bne.n	80098c2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 80098be:	2302      	movs	r3, #2
 80098c0:	e046      	b.n	8009950 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2201      	movs	r2, #1
 80098c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2224      	movs	r2, #36	; 0x24
 80098ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f022 0201 	bic.w	r2, r2, #1
 80098e0:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	430a      	orrs	r2, r1
 80098f4:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d105      	bne.n	8009908 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80098fc:	1d3b      	adds	r3, r7, #4
 80098fe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f000 f911 	bl	8009b2a <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f042 0201 	orr.w	r2, r2, #1
 8009916:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009918:	f7f8 fa0e 	bl	8001d38 <HAL_GetTick>
 800991c:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800991e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	2200      	movs	r2, #0
 8009928:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f7fe ffcf 	bl	80088d0 <UART_WaitOnFlagUntilTimeout>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d002      	beq.n	800993e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009938:	2303      	movs	r3, #3
 800993a:	75fb      	strb	r3, [r7, #23]
 800993c:	e003      	b.n	8009946 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2220      	movs	r2, #32
 8009942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2200      	movs	r2, #0
 800994a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800994e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3718      	adds	r7, #24
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009958:	b480      	push	{r7}
 800995a:	b089      	sub	sp, #36	; 0x24
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009966:	2b01      	cmp	r3, #1
 8009968:	d101      	bne.n	800996e <HAL_UARTEx_EnableStopMode+0x16>
 800996a:	2302      	movs	r3, #2
 800996c:	e021      	b.n	80099b2 <HAL_UARTEx_EnableStopMode+0x5a>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2201      	movs	r2, #1
 8009972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	e853 3f00 	ldrex	r3, [r3]
 8009982:	60bb      	str	r3, [r7, #8]
   return(result);
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	f043 0302 	orr.w	r3, r3, #2
 800998a:	61fb      	str	r3, [r7, #28]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	461a      	mov	r2, r3
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	61bb      	str	r3, [r7, #24]
 8009996:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009998:	6979      	ldr	r1, [r7, #20]
 800999a:	69ba      	ldr	r2, [r7, #24]
 800999c:	e841 2300 	strex	r3, r2, [r1]
 80099a0:	613b      	str	r3, [r7, #16]
   return(result);
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1e6      	bne.n	8009976 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3724      	adds	r7, #36	; 0x24
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bc80      	pop	{r7}
 80099ba:	4770      	bx	lr

080099bc <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d101      	bne.n	80099d2 <HAL_UARTEx_EnableFifoMode+0x16>
 80099ce:	2302      	movs	r3, #2
 80099d0:	e02b      	b.n	8009a2a <HAL_UARTEx_EnableFifoMode+0x6e>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2224      	movs	r2, #36	; 0x24
 80099de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f022 0201 	bic.w	r2, r2, #1
 80099f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009a08:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 f8ac 	bl	8009b70 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2220      	movs	r2, #32
 8009a1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b084      	sub	sp, #16
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
 8009a3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d101      	bne.n	8009a4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a46:	2302      	movs	r3, #2
 8009a48:	e02d      	b.n	8009aa6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2224      	movs	r2, #36	; 0x24
 8009a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f022 0201 	bic.w	r2, r2, #1
 8009a70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	683a      	ldr	r2, [r7, #0]
 8009a82:	430a      	orrs	r2, r1
 8009a84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f872 	bl	8009b70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2220      	movs	r2, #32
 8009a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b084      	sub	sp, #16
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
 8009ab6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	d101      	bne.n	8009ac6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ac2:	2302      	movs	r3, #2
 8009ac4:	e02d      	b.n	8009b22 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2224      	movs	r2, #36	; 0x24
 8009ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f022 0201 	bic.w	r2, r2, #1
 8009aec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	683a      	ldr	r2, [r7, #0]
 8009afe:	430a      	orrs	r2, r1
 8009b00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 f834 	bl	8009b70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2220      	movs	r2, #32
 8009b14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009b2a:	b480      	push	{r7}
 8009b2c:	b085      	sub	sp, #20
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	60f8      	str	r0, [r7, #12]
 8009b32:	1d3b      	adds	r3, r7, #4
 8009b34:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	f023 0210 	bic.w	r2, r3, #16
 8009b42:	893b      	ldrh	r3, [r7, #8]
 8009b44:	4619      	mov	r1, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	430a      	orrs	r2, r1
 8009b4c:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8009b58:	7abb      	ldrb	r3, [r7, #10]
 8009b5a:	061a      	lsls	r2, r3, #24
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	430a      	orrs	r2, r1
 8009b62:	605a      	str	r2, [r3, #4]
}
 8009b64:	bf00      	nop
 8009b66:	3714      	adds	r7, #20
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bc80      	pop	{r7}
 8009b6c:	4770      	bx	lr
	...

08009b70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b085      	sub	sp, #20
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d108      	bne.n	8009b92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b90:	e031      	b.n	8009bf6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b92:	2308      	movs	r3, #8
 8009b94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b96:	2308      	movs	r3, #8
 8009b98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	0e5b      	lsrs	r3, r3, #25
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	f003 0307 	and.w	r3, r3, #7
 8009ba8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	0f5b      	lsrs	r3, r3, #29
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	f003 0307 	and.w	r3, r3, #7
 8009bb8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009bba:	7bbb      	ldrb	r3, [r7, #14]
 8009bbc:	7b3a      	ldrb	r2, [r7, #12]
 8009bbe:	4910      	ldr	r1, [pc, #64]	; (8009c00 <UARTEx_SetNbDataToProcess+0x90>)
 8009bc0:	5c8a      	ldrb	r2, [r1, r2]
 8009bc2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009bc6:	7b3a      	ldrb	r2, [r7, #12]
 8009bc8:	490e      	ldr	r1, [pc, #56]	; (8009c04 <UARTEx_SetNbDataToProcess+0x94>)
 8009bca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009bcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	7b7a      	ldrb	r2, [r7, #13]
 8009bdc:	4908      	ldr	r1, [pc, #32]	; (8009c00 <UARTEx_SetNbDataToProcess+0x90>)
 8009bde:	5c8a      	ldrb	r2, [r1, r2]
 8009be0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009be4:	7b7a      	ldrb	r2, [r7, #13]
 8009be6:	4907      	ldr	r1, [pc, #28]	; (8009c04 <UARTEx_SetNbDataToProcess+0x94>)
 8009be8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bea:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bee:	b29a      	uxth	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009bf6:	bf00      	nop
 8009bf8:	3714      	adds	r7, #20
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bc80      	pop	{r7}
 8009bfe:	4770      	bx	lr
 8009c00:	0801b6a0 	.word	0x0801b6a0
 8009c04:	0801b6a8 	.word	0x0801b6a8

08009c08 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8009c0c:	f7f7 ff34 	bl	8001a78 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8009c10:	f000 f820 	bl	8009c54 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8009c14:	bf00      	nop
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8009c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c20:	f010 facc 	bl	801a1bc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8009c24:	bf00      	nop
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009c2c:	f3bf 8f4f 	dsb	sy
}
 8009c30:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009c32:	4b06      	ldr	r3, [pc, #24]	; (8009c4c <__NVIC_SystemReset+0x24>)
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009c3a:	4904      	ldr	r1, [pc, #16]	; (8009c4c <__NVIC_SystemReset+0x24>)
 8009c3c:	4b04      	ldr	r3, [pc, #16]	; (8009c50 <__NVIC_SystemReset+0x28>)
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009c42:	f3bf 8f4f 	dsb	sy
}
 8009c46:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009c48:	bf00      	nop
 8009c4a:	e7fd      	b.n	8009c48 <__NVIC_SystemReset+0x20>
 8009c4c:	e000ed00 	.word	0xe000ed00
 8009c50:	05fa0004 	.word	0x05fa0004

08009c54 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	607b      	str	r3, [r7, #4]
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8009c5e:	1d3b      	adds	r3, r7, #4
 8009c60:	4619      	mov	r1, r3
 8009c62:	2000      	movs	r0, #0
 8009c64:	f002 ff9e 	bl	800cba4 <LmHandlerGetVersion>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8009c68:	1d3b      	adds	r3, r7, #4
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	2001      	movs	r0, #1
 8009c6e:	f002 ff99 	bl	800cba4 <LmHandlerGetVersion>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8009c72:	2300      	movs	r3, #0
 8009c74:	9300      	str	r3, [sp, #0]
 8009c76:	4b2f      	ldr	r3, [pc, #188]	; (8009d34 <LoRaWAN_Init+0xe0>)
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009c7e:	482e      	ldr	r0, [pc, #184]	; (8009d38 <LoRaWAN_Init+0xe4>)
 8009c80:	f010 fc3c 	bl	801a4fc <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8009c84:	2300      	movs	r3, #0
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	4b2c      	ldr	r3, [pc, #176]	; (8009d3c <LoRaWAN_Init+0xe8>)
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009c90:	482b      	ldr	r0, [pc, #172]	; (8009d40 <LoRaWAN_Init+0xec>)
 8009c92:	f010 fc33 	bl	801a4fc <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8009c96:	2300      	movs	r3, #0
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	4b2a      	ldr	r3, [pc, #168]	; (8009d44 <LoRaWAN_Init+0xf0>)
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009ca2:	4829      	ldr	r0, [pc, #164]	; (8009d48 <LoRaWAN_Init+0xf4>)
 8009ca4:	f010 fc2a 	bl	801a4fc <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8009ca8:	2300      	movs	r3, #0
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	4b27      	ldr	r3, [pc, #156]	; (8009d4c <LoRaWAN_Init+0xf8>)
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009cb4:	4826      	ldr	r0, [pc, #152]	; (8009d50 <LoRaWAN_Init+0xfc>)
 8009cb6:	f010 fc21 	bl	801a4fc <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8009cba:	4a26      	ldr	r2, [pc, #152]	; (8009d54 <LoRaWAN_Init+0x100>)
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	2001      	movs	r0, #1
 8009cc0:	f010 fb78 	bl	801a3b4 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8009cc4:	4a24      	ldr	r2, [pc, #144]	; (8009d58 <LoRaWAN_Init+0x104>)
 8009cc6:	2100      	movs	r1, #0
 8009cc8:	2002      	movs	r0, #2
 8009cca:	f010 fb73 	bl	801a3b4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8009cce:	4a23      	ldr	r2, [pc, #140]	; (8009d5c <LoRaWAN_Init+0x108>)
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	2004      	movs	r0, #4
 8009cd4:	f010 fb6e 	bl	801a3b4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8009cd8:	4a21      	ldr	r2, [pc, #132]	; (8009d60 <LoRaWAN_Init+0x10c>)
 8009cda:	2100      	movs	r1, #0
 8009cdc:	2008      	movs	r0, #8
 8009cde:	f010 fb69 	bl	801a3b4 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8009ce2:	f000 fb99 	bl	800a418 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8009ce6:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 8009cea:	481e      	ldr	r0, [pc, #120]	; (8009d64 <LoRaWAN_Init+0x110>)
 8009cec:	f002 f864 	bl	800bdb8 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8009cf0:	481d      	ldr	r0, [pc, #116]	; (8009d68 <LoRaWAN_Init+0x114>)
 8009cf2:	f002 f8ad 	bl	800be50 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 8009cf6:	4814      	ldr	r0, [pc, #80]	; (8009d48 <LoRaWAN_Init+0xf4>)
 8009cf8:	f010 fc36 	bl	801a568 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 8009cfc:	4b1b      	ldr	r3, [pc, #108]	; (8009d6c <LoRaWAN_Init+0x118>)
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	4a1b      	ldr	r2, [pc, #108]	; (8009d70 <LoRaWAN_Init+0x11c>)
 8009d02:	7812      	ldrb	r2, [r2, #0]
 8009d04:	4611      	mov	r1, r2
 8009d06:	4618      	mov	r0, r3
 8009d08:	f002 f9f4 	bl	800c0f4 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8009d0c:	4b19      	ldr	r3, [pc, #100]	; (8009d74 <LoRaWAN_Init+0x120>)
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10b      	bne.n	8009d2c <LoRaWAN_Init+0xd8>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8009d14:	4b18      	ldr	r3, [pc, #96]	; (8009d78 <LoRaWAN_Init+0x124>)
 8009d16:	6819      	ldr	r1, [r3, #0]
 8009d18:	2300      	movs	r3, #0
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	4b17      	ldr	r3, [pc, #92]	; (8009d7c <LoRaWAN_Init+0x128>)
 8009d1e:	2200      	movs	r2, #0
 8009d20:	4817      	ldr	r0, [pc, #92]	; (8009d80 <LoRaWAN_Init+0x12c>)
 8009d22:	f010 fbeb 	bl	801a4fc <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8009d26:	4816      	ldr	r0, [pc, #88]	; (8009d80 <LoRaWAN_Init+0x12c>)
 8009d28:	f010 fc1e 	bl	801a568 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 8009d2c:	bf00      	nop
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	0800a155 	.word	0x0800a155
 8009d38:	200004b4 	.word	0x200004b4
 8009d3c:	0800a167 	.word	0x0800a167
 8009d40:	200004cc 	.word	0x200004cc
 8009d44:	0800a179 	.word	0x0800a179
 8009d48:	200004e4 	.word	0x200004e4
 8009d4c:	0800a33d 	.word	0x0800a33d
 8009d50:	200003a8 	.word	0x200003a8
 8009d54:	0800c0d1 	.word	0x0800c0d1
 8009d58:	08009e85 	.word	0x08009e85
 8009d5c:	0800a361 	.word	0x0800a361
 8009d60:	0800a2f1 	.word	0x0800a2f1
 8009d64:	2000000c 	.word	0x2000000c
 8009d68:	20000058 	.word	0x20000058
 8009d6c:	20000008 	.word	0x20000008
 8009d70:	20000009 	.word	0x20000009
 8009d74:	2000038c 	.word	0x2000038c
 8009d78:	2000006c 	.word	0x2000006c
 8009d7c:	0800a131 	.word	0x0800a131
 8009d80:	20000390 	.word	0x20000390

08009d84 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8009d8e:	88fb      	ldrh	r3, [r7, #6]
 8009d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d94:	d104      	bne.n	8009da0 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8009d96:	2100      	movs	r1, #0
 8009d98:	2002      	movs	r0, #2
 8009d9a:	f010 fb2d 	bl	801a3f8 <UTIL_SEQ_SetTask>
      }
      break;
 8009d9e:	e000      	b.n	8009da2 <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 8009da0:	bf00      	nop
  }
}
 8009da2:	bf00      	nop
 8009da4:	3708      	adds	r7, #8
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
	...

08009dac <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 8009db6:	2300      	movs	r3, #0
 8009db8:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d057      	beq.n	8009e70 <OnRxData+0xc4>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 8009dc0:	482d      	ldr	r0, [pc, #180]	; (8009e78 <OnRxData+0xcc>)
 8009dc2:	f010 fbd1 	bl	801a568 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d04b      	beq.n	8009e66 <OnRxData+0xba>
    {
      if (appData != NULL)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d048      	beq.n	8009e66 <OnRxData+0xba>
      {
        RxPort = appData->Port;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d041      	beq.n	8009e66 <OnRxData+0xba>
        {
    switch (appData->Port)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	d021      	beq.n	8009e2e <OnRxData+0x82>
 8009dea:	2b03      	cmp	r3, #3
 8009dec:	d13d      	bne.n	8009e6a <OnRxData+0xbe>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	785b      	ldrb	r3, [r3, #1]
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d117      	bne.n	8009e26 <OnRxData+0x7a>
        {
          switch (appData->Buffer[0])
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	2b02      	cmp	r3, #2
 8009dfe:	d00e      	beq.n	8009e1e <OnRxData+0x72>
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	dc12      	bgt.n	8009e2a <OnRxData+0x7e>
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d002      	beq.n	8009e0e <OnRxData+0x62>
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d004      	beq.n	8009e16 <OnRxData+0x6a>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 8009e0c:	e00d      	b.n	8009e2a <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_A);
 8009e0e:	2000      	movs	r0, #0
 8009e10:	f002 fb0c 	bl	800c42c <LmHandlerRequestClass>
              break;
 8009e14:	e00a      	b.n	8009e2c <OnRxData+0x80>
              LmHandlerRequestClass(CLASS_B);
 8009e16:	2001      	movs	r0, #1
 8009e18:	f002 fb08 	bl	800c42c <LmHandlerRequestClass>
              break;
 8009e1c:	e006      	b.n	8009e2c <OnRxData+0x80>
              LmHandlerRequestClass(CLASS_C);
 8009e1e:	2002      	movs	r0, #2
 8009e20:	f002 fb04 	bl	800c42c <LmHandlerRequestClass>
              break;
 8009e24:	e002      	b.n	8009e2c <OnRxData+0x80>
          }
        }
 8009e26:	bf00      	nop
 8009e28:	e022      	b.n	8009e70 <OnRxData+0xc4>
              break;
 8009e2a:	bf00      	nop
        break;
 8009e2c:	e020      	b.n	8009e70 <OnRxData+0xc4>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	785b      	ldrb	r3, [r3, #1]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d11b      	bne.n	8009e6e <OnRxData+0xc2>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	f003 0301 	and.w	r3, r3, #1
 8009e40:	b2da      	uxtb	r2, r3
 8009e42:	4b0e      	ldr	r3, [pc, #56]	; (8009e7c <OnRxData+0xd0>)
 8009e44:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 8009e46:	4b0d      	ldr	r3, [pc, #52]	; (8009e7c <OnRxData+0xd0>)
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d105      	bne.n	8009e5a <OnRxData+0xae>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 8009e4e:	2201      	movs	r2, #1
 8009e50:	2120      	movs	r1, #32
 8009e52:	480b      	ldr	r0, [pc, #44]	; (8009e80 <OnRxData+0xd4>)
 8009e54:	f7fb f940 	bl	80050d8 <HAL_GPIO_WritePin>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
          }
        }
        break;
 8009e58:	e009      	b.n	8009e6e <OnRxData+0xc2>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	2120      	movs	r1, #32
 8009e5e:	4808      	ldr	r0, [pc, #32]	; (8009e80 <OnRxData+0xd4>)
 8009e60:	f7fb f93a 	bl	80050d8 <HAL_GPIO_WritePin>
        break;
 8009e64:	e003      	b.n	8009e6e <OnRxData+0xc2>

      default:

        break;
    }
  }
 8009e66:	bf00      	nop
 8009e68:	e002      	b.n	8009e70 <OnRxData+0xc4>
        break;
 8009e6a:	bf00      	nop
 8009e6c:	e000      	b.n	8009e70 <OnRxData+0xc4>
        break;
 8009e6e:	bf00      	nop
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 8009e70:	bf00      	nop
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	200004cc 	.word	0x200004cc
 8009e7c:	200004b2 	.word	0x200004b2
 8009e80:	48000400 	.word	0x48000400

08009e84 <SendTxData>:

static void SendTxData(void)
{
 8009e84:	b590      	push	{r4, r7, lr}
 8009e86:	b08f      	sub	sp, #60	; 0x3c
 8009e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 8009e8a:	23ff      	movs	r3, #255	; 0xff
 8009e8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 8009e90:	f7f7 fe26 	bl	8001ae0 <GetBatteryLevel>
 8009e94:	4603      	mov	r3, r0
 8009e96:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int16_t temperature = 0;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t humidity = 0;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	853b      	strh	r3, [r7, #40]	; 0x28
  uint32_t i = 0;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t latitude = 0;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t longitude = 0;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	83fb      	strh	r3, [r7, #30]
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 8009eba:	1d3b      	adds	r3, r7, #4
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7f7 ffe7 	bl	8001e90 <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));

  AppData.Port = LORAWAN_USER_APP_PORT;
 8009ec2:	4b92      	ldr	r3, [pc, #584]	; (800a10c <SendTxData+0x288>)
 8009ec4:	2202      	movs	r2, #2
 8009ec6:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	4991      	ldr	r1, [pc, #580]	; (800a110 <SendTxData+0x28c>)
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7f6 fcd5 	bl	800087c <__aeabi_fmul>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7f6 fe47 	bl	8000b68 <__aeabi_f2uiz>
 8009eda:	4603      	mov	r3, r0
 8009edc:	853b      	strh	r3, [r7, #40]	; 0x28
  temperature = (int16_t)(sensor_data.temperature);
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7f6 fe1b 	bl	8000b1c <__aeabi_f2iz>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	857b      	strh	r3, [r7, #42]	; 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4989      	ldr	r1, [pc, #548]	; (800a114 <SendTxData+0x290>)
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7f6 fcc4 	bl	800087c <__aeabi_fmul>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	4986      	ldr	r1, [pc, #536]	; (800a110 <SendTxData+0x28c>)
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7f6 fd73 	bl	80009e4 <__aeabi_fdiv>
 8009efe:	4603      	mov	r3, r0
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7f6 fe31 	bl	8000b68 <__aeabi_f2uiz>
 8009f06:	4603      	mov	r3, r0
 8009f08:	85bb      	strh	r3, [r7, #44]	; 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 8009f0a:	4b80      	ldr	r3, [pc, #512]	; (800a10c <SendTxData+0x288>)
 8009f0c:	685a      	ldr	r2, [r3, #4]
 8009f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f10:	1c59      	adds	r1, r3, #1
 8009f12:	6339      	str	r1, [r7, #48]	; 0x30
 8009f14:	4413      	add	r3, r2
 8009f16:	4a80      	ldr	r2, [pc, #512]	; (800a118 <SendTxData+0x294>)
 8009f18:	7812      	ldrb	r2, [r2, #0]
 8009f1a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 8009f1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009f1e:	0a1b      	lsrs	r3, r3, #8
 8009f20:	b298      	uxth	r0, r3
 8009f22:	4b7a      	ldr	r3, [pc, #488]	; (800a10c <SendTxData+0x288>)
 8009f24:	685a      	ldr	r2, [r3, #4]
 8009f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f28:	1c59      	adds	r1, r3, #1
 8009f2a:	6339      	str	r1, [r7, #48]	; 0x30
 8009f2c:	4413      	add	r3, r2
 8009f2e:	b2c2      	uxtb	r2, r0
 8009f30:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8009f32:	4b76      	ldr	r3, [pc, #472]	; (800a10c <SendTxData+0x288>)
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f38:	1c59      	adds	r1, r3, #1
 8009f3a:	6339      	str	r1, [r7, #48]	; 0x30
 8009f3c:	4413      	add	r3, r2
 8009f3e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009f40:	b2d2      	uxtb	r2, r2
 8009f42:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8009f44:	4b71      	ldr	r3, [pc, #452]	; (800a10c <SendTxData+0x288>)
 8009f46:	685a      	ldr	r2, [r3, #4]
 8009f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4a:	1c59      	adds	r1, r3, #1
 8009f4c:	6339      	str	r1, [r7, #48]	; 0x30
 8009f4e:	4413      	add	r3, r2
 8009f50:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8009f52:	b2d2      	uxtb	r2, r2
 8009f54:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8009f56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009f58:	0a1b      	lsrs	r3, r3, #8
 8009f5a:	b298      	uxth	r0, r3
 8009f5c:	4b6b      	ldr	r3, [pc, #428]	; (800a10c <SendTxData+0x288>)
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f62:	1c59      	adds	r1, r3, #1
 8009f64:	6339      	str	r1, [r7, #48]	; 0x30
 8009f66:	4413      	add	r3, r2
 8009f68:	b2c2      	uxtb	r2, r0
 8009f6a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8009f6c:	4b67      	ldr	r3, [pc, #412]	; (800a10c <SendTxData+0x288>)
 8009f6e:	685a      	ldr	r2, [r3, #4]
 8009f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f72:	1c59      	adds	r1, r3, #1
 8009f74:	6339      	str	r1, [r7, #48]	; 0x30
 8009f76:	4413      	add	r3, r2
 8009f78:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009f7a:	b2d2      	uxtb	r2, r2
 8009f7c:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8009f7e:	4b67      	ldr	r3, [pc, #412]	; (800a11c <SendTxData+0x298>)
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	2b08      	cmp	r3, #8
 8009f84:	d007      	beq.n	8009f96 <SendTxData+0x112>
 8009f86:	4b65      	ldr	r3, [pc, #404]	; (800a11c <SendTxData+0x298>)
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d003      	beq.n	8009f96 <SendTxData+0x112>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8009f8e:	4b63      	ldr	r3, [pc, #396]	; (800a11c <SendTxData+0x298>)
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d120      	bne.n	8009fd8 <SendTxData+0x154>
  {
    AppData.Buffer[i++] = 0;
 8009f96:	4b5d      	ldr	r3, [pc, #372]	; (800a10c <SendTxData+0x288>)
 8009f98:	685a      	ldr	r2, [r3, #4]
 8009f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9c:	1c59      	adds	r1, r3, #1
 8009f9e:	6339      	str	r1, [r7, #48]	; 0x30
 8009fa0:	4413      	add	r3, r2
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 8009fa6:	4b59      	ldr	r3, [pc, #356]	; (800a10c <SendTxData+0x288>)
 8009fa8:	685a      	ldr	r2, [r3, #4]
 8009faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fac:	1c59      	adds	r1, r3, #1
 8009fae:	6339      	str	r1, [r7, #48]	; 0x30
 8009fb0:	4413      	add	r3, r2
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 8009fb6:	4b55      	ldr	r3, [pc, #340]	; (800a10c <SendTxData+0x288>)
 8009fb8:	685a      	ldr	r2, [r3, #4]
 8009fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbc:	1c59      	adds	r1, r3, #1
 8009fbe:	6339      	str	r1, [r7, #48]	; 0x30
 8009fc0:	4413      	add	r3, r2
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 8009fc6:	4b51      	ldr	r3, [pc, #324]	; (800a10c <SendTxData+0x288>)
 8009fc8:	685a      	ldr	r2, [r3, #4]
 8009fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fcc:	1c59      	adds	r1, r3, #1
 8009fce:	6339      	str	r1, [r7, #48]	; 0x30
 8009fd0:	4413      	add	r3, r2
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	701a      	strb	r2, [r3, #0]
 8009fd6:	e05b      	b.n	800a090 <SendTxData+0x20c>
  }
  else
  {
    latitude = sensor_data.latitude;
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	627b      	str	r3, [r7, #36]	; 0x24
    longitude = sensor_data.longitude;
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8009fe0:	4b4a      	ldr	r3, [pc, #296]	; (800a10c <SendTxData+0x288>)
 8009fe2:	685a      	ldr	r2, [r3, #4]
 8009fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe6:	1c59      	adds	r1, r3, #1
 8009fe8:	6339      	str	r1, [r7, #48]	; 0x30
 8009fea:	18d4      	adds	r4, r2, r3
 8009fec:	f7f7 fd78 	bl	8001ae0 <GetBatteryLevel>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff6:	1418      	asrs	r0, r3, #16
 8009ff8:	4b44      	ldr	r3, [pc, #272]	; (800a10c <SendTxData+0x288>)
 8009ffa:	685a      	ldr	r2, [r3, #4]
 8009ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffe:	1c59      	adds	r1, r3, #1
 800a000:	6339      	str	r1, [r7, #48]	; 0x30
 800a002:	4413      	add	r3, r2
 800a004:	b2c2      	uxtb	r2, r0
 800a006:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00a:	1218      	asrs	r0, r3, #8
 800a00c:	4b3f      	ldr	r3, [pc, #252]	; (800a10c <SendTxData+0x288>)
 800a00e:	685a      	ldr	r2, [r3, #4]
 800a010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a012:	1c59      	adds	r1, r3, #1
 800a014:	6339      	str	r1, [r7, #48]	; 0x30
 800a016:	4413      	add	r3, r2
 800a018:	b2c2      	uxtb	r2, r0
 800a01a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800a01c:	4b3b      	ldr	r3, [pc, #236]	; (800a10c <SendTxData+0x288>)
 800a01e:	685a      	ldr	r2, [r3, #4]
 800a020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a022:	1c59      	adds	r1, r3, #1
 800a024:	6339      	str	r1, [r7, #48]	; 0x30
 800a026:	4413      	add	r3, r2
 800a028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a02a:	b2d2      	uxtb	r2, r2
 800a02c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800a02e:	6a3b      	ldr	r3, [r7, #32]
 800a030:	1418      	asrs	r0, r3, #16
 800a032:	4b36      	ldr	r3, [pc, #216]	; (800a10c <SendTxData+0x288>)
 800a034:	685a      	ldr	r2, [r3, #4]
 800a036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a038:	1c59      	adds	r1, r3, #1
 800a03a:	6339      	str	r1, [r7, #48]	; 0x30
 800a03c:	4413      	add	r3, r2
 800a03e:	b2c2      	uxtb	r2, r0
 800a040:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800a042:	6a3b      	ldr	r3, [r7, #32]
 800a044:	1218      	asrs	r0, r3, #8
 800a046:	4b31      	ldr	r3, [pc, #196]	; (800a10c <SendTxData+0x288>)
 800a048:	685a      	ldr	r2, [r3, #4]
 800a04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04c:	1c59      	adds	r1, r3, #1
 800a04e:	6339      	str	r1, [r7, #48]	; 0x30
 800a050:	4413      	add	r3, r2
 800a052:	b2c2      	uxtb	r2, r0
 800a054:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800a056:	4b2d      	ldr	r3, [pc, #180]	; (800a10c <SendTxData+0x288>)
 800a058:	685a      	ldr	r2, [r3, #4]
 800a05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05c:	1c59      	adds	r1, r3, #1
 800a05e:	6339      	str	r1, [r7, #48]	; 0x30
 800a060:	4413      	add	r3, r2
 800a062:	6a3a      	ldr	r2, [r7, #32]
 800a064:	b2d2      	uxtb	r2, r2
 800a066:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800a068:	8bfb      	ldrh	r3, [r7, #30]
 800a06a:	0a1b      	lsrs	r3, r3, #8
 800a06c:	b298      	uxth	r0, r3
 800a06e:	4b27      	ldr	r3, [pc, #156]	; (800a10c <SendTxData+0x288>)
 800a070:	685a      	ldr	r2, [r3, #4]
 800a072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a074:	1c59      	adds	r1, r3, #1
 800a076:	6339      	str	r1, [r7, #48]	; 0x30
 800a078:	4413      	add	r3, r2
 800a07a:	b2c2      	uxtb	r2, r0
 800a07c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800a07e:	4b23      	ldr	r3, [pc, #140]	; (800a10c <SendTxData+0x288>)
 800a080:	685a      	ldr	r2, [r3, #4]
 800a082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a084:	1c59      	adds	r1, r3, #1
 800a086:	6339      	str	r1, [r7, #48]	; 0x30
 800a088:	4413      	add	r3, r2
 800a08a:	8bfa      	ldrh	r2, [r7, #30]
 800a08c:	b2d2      	uxtb	r2, r2
 800a08e:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800a090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a092:	b2da      	uxtb	r2, r3
 800a094:	4b1d      	ldr	r3, [pc, #116]	; (800a10c <SendTxData+0x288>)
 800a096:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a098:	4b21      	ldr	r3, [pc, #132]	; (800a120 <SendTxData+0x29c>)
 800a09a:	7a5b      	ldrb	r3, [r3, #9]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d007      	beq.n	800a0b0 <SendTxData+0x22c>
 800a0a0:	f002 f8a8 	bl	800c1f4 <LmHandlerJoinStatus>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d102      	bne.n	800a0b0 <SendTxData+0x22c>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800a0aa:	481d      	ldr	r0, [pc, #116]	; (800a120 <SendTxData+0x29c>)
 800a0ac:	f010 faca 	bl	801a644 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800a0b0:	4b1a      	ldr	r3, [pc, #104]	; (800a11c <SendTxData+0x298>)
 800a0b2:	78db      	ldrb	r3, [r3, #3]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	4814      	ldr	r0, [pc, #80]	; (800a10c <SendTxData+0x288>)
 800a0ba:	f002 f8b7 	bl	800c22c <LmHandlerSend>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800a0c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d007      	beq.n	800a0dc <SendTxData+0x258>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800a0cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a0d0:	f113 0f06 	cmn.w	r3, #6
 800a0d4:	d102      	bne.n	800a0dc <SendTxData+0x258>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800a0d6:	f002 f803 	bl	800c0e0 <LmHandlerGetDutyCycleWaitTime>
 800a0da:	6378      	str	r0, [r7, #52]	; 0x34
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }
  }

  if (EventType == TX_ON_TIMER)
 800a0dc:	4b11      	ldr	r3, [pc, #68]	; (800a124 <SendTxData+0x2a0>)
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d10f      	bne.n	800a104 <SendTxData+0x280>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800a0e4:	4810      	ldr	r0, [pc, #64]	; (800a128 <SendTxData+0x2a4>)
 800a0e6:	f010 faad 	bl	801a644 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800a0ea:	4b10      	ldr	r3, [pc, #64]	; (800a12c <SendTxData+0x2a8>)
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	bf38      	it	cc
 800a0f4:	4613      	movcc	r3, r2
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	480b      	ldr	r0, [pc, #44]	; (800a128 <SendTxData+0x2a4>)
 800a0fa:	f010 fb13 	bl	801a724 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a0fe:	480a      	ldr	r0, [pc, #40]	; (800a128 <SendTxData+0x2a4>)
 800a100:	f010 fa32 	bl	801a568 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800a104:	bf00      	nop
 800a106:	373c      	adds	r7, #60	; 0x3c
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd90      	pop	{r4, r7, pc}
 800a10c:	20000070 	.word	0x20000070
 800a110:	41200000 	.word	0x41200000
 800a114:	42c80000 	.word	0x42c80000
 800a118:	200004b2 	.word	0x200004b2
 800a11c:	20000058 	.word	0x20000058
 800a120:	200004e4 	.word	0x200004e4
 800a124:	2000038c 	.word	0x2000038c
 800a128:	20000390 	.word	0x20000390
 800a12c:	2000006c 	.word	0x2000006c

0800a130 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a138:	2100      	movs	r1, #0
 800a13a:	2002      	movs	r0, #2
 800a13c:	f010 f95c 	bl	801a3f8 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a140:	4803      	ldr	r0, [pc, #12]	; (800a150 <OnTxTimerEvent+0x20>)
 800a142:	f010 fa11 	bl	801a568 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a146:	bf00      	nop
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	20000390 	.word	0x20000390

0800a154 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800a15c:	bf00      	nop
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	bc80      	pop	{r7}
 800a164:	4770      	bx	lr

0800a166 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a166:	b480      	push	{r7}
 800a168:	b083      	sub	sp, #12
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800a16e:	bf00      	nop
 800a170:	370c      	adds	r7, #12
 800a172:	46bd      	mov	sp, r7
 800a174:	bc80      	pop	{r7}
 800a176:	4770      	bx	lr

0800a178 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800a180:	bf00      	nop
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	bc80      	pop	{r7}
 800a188:	4770      	bx	lr
	...

0800a18c <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d006      	beq.n	800a1a8 <OnTxData+0x1c>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d002      	beq.n	800a1a8 <OnTxData+0x1c>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800a1a2:	4803      	ldr	r0, [pc, #12]	; (800a1b0 <OnTxData+0x24>)
 800a1a4:	f010 f9e0 	bl	801a568 <UTIL_TIMER_Start>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a1a8:	bf00      	nop
 800a1aa:	3708      	adds	r7, #8
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	200004b4 	.word	0x200004b4

0800a1b4 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d012      	beq.n	800a1e8 <OnJoinRequest+0x34>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d103      	bne.n	800a1d4 <OnJoinRequest+0x20>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800a1cc:	4808      	ldr	r0, [pc, #32]	; (800a1f0 <OnJoinRequest+0x3c>)
 800a1ce:	f010 fa39 	bl	801a644 <UTIL_TIMER_Stop>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800a1d2:	e009      	b.n	800a1e8 <OnJoinRequest+0x34>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	799b      	ldrb	r3, [r3, #6]
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d105      	bne.n	800a1e8 <OnJoinRequest+0x34>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800a1dc:	4b05      	ldr	r3, [pc, #20]	; (800a1f4 <OnJoinRequest+0x40>)
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	2101      	movs	r1, #1
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f001 ff86 	bl	800c0f4 <LmHandlerJoin>
}
 800a1e8:	bf00      	nop
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	200004e4 	.word	0x200004e4
 800a1f4:	20000008 	.word	0x20000008

0800a1f8 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d005      	beq.n	800a212 <OnBeaconStatusChange+0x1a>
  {
    switch (params->State)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	785b      	ldrb	r3, [r3, #1]
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d003      	beq.n	800a216 <OnBeaconStatusChange+0x1e>
 800a20e:	2b03      	cmp	r3, #3
        break;
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
        break;
 800a210:	e002      	b.n	800a218 <OnBeaconStatusChange+0x20>
      }
    }
  }
 800a212:	bf00      	nop
 800a214:	e000      	b.n	800a218 <OnBeaconStatusChange+0x20>
        break;
 800a216:	bf00      	nop
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800a218:	bf00      	nop
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bc80      	pop	{r7}
 800a220:	4770      	bx	lr

0800a222 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800a222:	b480      	push	{r7}
 800a224:	b083      	sub	sp, #12
 800a226:	af00      	add	r7, sp, #0
 800a228:	4603      	mov	r3, r0
 800a22a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
  /* USER CODE END OnClassChange_1 */
}
 800a22c:	bf00      	nop
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	bc80      	pop	{r7}
 800a234:	4770      	bx	lr

0800a236 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a23a:	2100      	movs	r1, #0
 800a23c:	2001      	movs	r0, #1
 800a23e:	f010 f8db 	bl	801a3f8 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a242:	bf00      	nop
 800a244:	bd80      	pop	{r7, pc}
	...

0800a248 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800a250:	4a0d      	ldr	r2, [pc, #52]	; (800a288 <OnTxPeriodicityChanged+0x40>)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800a256:	4b0c      	ldr	r3, [pc, #48]	; (800a288 <OnTxPeriodicityChanged+0x40>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d103      	bne.n	800a266 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800a25e:	4b0a      	ldr	r3, [pc, #40]	; (800a288 <OnTxPeriodicityChanged+0x40>)
 800a260:	f242 7210 	movw	r2, #10000	; 0x2710
 800a264:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800a266:	4809      	ldr	r0, [pc, #36]	; (800a28c <OnTxPeriodicityChanged+0x44>)
 800a268:	f010 f9ec 	bl	801a644 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800a26c:	4b06      	ldr	r3, [pc, #24]	; (800a288 <OnTxPeriodicityChanged+0x40>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4619      	mov	r1, r3
 800a272:	4806      	ldr	r0, [pc, #24]	; (800a28c <OnTxPeriodicityChanged+0x44>)
 800a274:	f010 fa56 	bl	801a724 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800a278:	4804      	ldr	r0, [pc, #16]	; (800a28c <OnTxPeriodicityChanged+0x44>)
 800a27a:	f010 f975 	bl	801a568 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800a27e:	bf00      	nop
 800a280:	3708      	adds	r7, #8
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	2000006c 	.word	0x2000006c
 800a28c:	20000390 	.word	0x20000390

0800a290 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	4603      	mov	r3, r0
 800a298:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800a29a:	4a04      	ldr	r2, [pc, #16]	; (800a2ac <OnTxFrameCtrlChanged+0x1c>)
 800a29c:	79fb      	ldrb	r3, [r7, #7]
 800a29e:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800a2a0:	bf00      	nop
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bc80      	pop	{r7}
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	20000058 	.word	0x20000058

0800a2b0 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800a2ba:	4a04      	ldr	r2, [pc, #16]	; (800a2cc <OnPingSlotPeriodicityChanged+0x1c>)
 800a2bc:	79fb      	ldrb	r3, [r7, #7]
 800a2be:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800a2c0:	bf00      	nop
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bc80      	pop	{r7}
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	20000058 	.word	0x20000058

0800a2d0 <OnSystemReset>:

static void OnSystemReset(void)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a2d4:	f002 fc97 	bl	800cc06 <LmHandlerHalt>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d106      	bne.n	800a2ec <OnSystemReset+0x1c>
 800a2de:	f001 ff89 	bl	800c1f4 <LmHandlerJoinStatus>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d101      	bne.n	800a2ec <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800a2e8:	f7ff fc9e 	bl	8009c28 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800a2ec:	bf00      	nop
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <StopJoin>:

static void StopJoin(void)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800a2f4:	480d      	ldr	r0, [pc, #52]	; (800a32c <StopJoin+0x3c>)
 800a2f6:	f010 f9a5 	bl	801a644 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800a2fa:	f002 fc77 	bl	800cbec <LmHandlerStop>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d10e      	bne.n	800a322 <StopJoin+0x32>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800a304:	4b0a      	ldr	r3, [pc, #40]	; (800a330 <StopJoin+0x40>)
 800a306:	2201      	movs	r2, #1
 800a308:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
    }
    LmHandlerConfigure(&LmHandlerParams);
 800a30a:	480a      	ldr	r0, [pc, #40]	; (800a334 <StopJoin+0x44>)
 800a30c:	f001 fda0 	bl	800be50 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800a310:	4b07      	ldr	r3, [pc, #28]	; (800a330 <StopJoin+0x40>)
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	2101      	movs	r1, #1
 800a316:	4618      	mov	r0, r3
 800a318:	f001 feec 	bl	800c0f4 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800a31c:	4803      	ldr	r0, [pc, #12]	; (800a32c <StopJoin+0x3c>)
 800a31e:	f010 f923 	bl	801a568 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800a322:	4805      	ldr	r0, [pc, #20]	; (800a338 <StopJoin+0x48>)
 800a324:	f010 f920 	bl	801a568 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800a328:	bf00      	nop
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	20000390 	.word	0x20000390
 800a330:	20000008 	.word	0x20000008
 800a334:	20000058 	.word	0x20000058
 800a338:	200003a8 	.word	0x200003a8

0800a33c <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800a344:	4b05      	ldr	r3, [pc, #20]	; (800a35c <OnStopJoinTimerEvent+0x20>)
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d103      	bne.n	800a354 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800a34c:	2100      	movs	r1, #0
 800a34e:	2008      	movs	r0, #8
 800a350:	f010 f852 	bl	801a3f8 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800a354:	bf00      	nop
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	20000008 	.word	0x20000008

0800a360 <StoreContext>:

static void StoreContext(void)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a366:	23ff      	movs	r3, #255	; 0xff
 800a368:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800a36a:	f002 fc59 	bl	800cc20 <LmHandlerNvmDataStore>
 800a36e:	4603      	mov	r3, r0
 800a370:	71fb      	strb	r3, [r7, #7]
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800a372:	bf00      	nop
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800a37a:	b480      	push	{r7}
 800a37c:	b083      	sub	sp, #12
 800a37e:	af00      	add	r7, sp, #0
 800a380:	4603      	mov	r3, r0
 800a382:	71fb      	strb	r3, [r7, #7]
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800a384:	bf00      	nop
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	bc80      	pop	{r7}
 800a38c:	4770      	bx	lr
	...

0800a390 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800a39a:	f7fa fa51 	bl	8004840 <HAL_FLASH_Unlock>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d11c      	bne.n	800a3de <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800a3a4:	4b10      	ldr	r3, [pc, #64]	; (800a3e8 <OnStoreContextRequest+0x58>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	029a      	lsls	r2, r3, #10
 800a3aa:	4b10      	ldr	r3, [pc, #64]	; (800a3ec <OnStoreContextRequest+0x5c>)
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 800a3b2:	fbb2 f1f3 	udiv	r1, r2, r3
 800a3b6:	fb01 f303 	mul.w	r3, r1, r3
 800a3ba:	1ad3      	subs	r3, r2, r3
 800a3bc:	0adb      	lsrs	r3, r3, #11
 800a3be:	2200      	movs	r2, #0
 800a3c0:	2101      	movs	r1, #1
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7f6 ffc7 	bl	8001356 <FLASH_IF_EraseByPages>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d105      	bne.n	800a3da <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	683a      	ldr	r2, [r7, #0]
 800a3d2:	6879      	ldr	r1, [r7, #4]
 800a3d4:	4806      	ldr	r0, [pc, #24]	; (800a3f0 <OnStoreContextRequest+0x60>)
 800a3d6:	f7f6 fedd 	bl	8001194 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800a3da:	f7fa fa53 	bl	8004884 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800a3de:	bf00      	nop
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	1fff75e0 	.word	0x1fff75e0
 800a3ec:	03fffc00 	.word	0x03fffc00
 800a3f0:	0803f000 	.word	0x0803f000

0800a3f4 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	b29b      	uxth	r3, r3
 800a402:	461a      	mov	r2, r3
 800a404:	4903      	ldr	r1, [pc, #12]	; (800a414 <OnRestoreContextRequest+0x20>)
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f00f fad6 	bl	80199b8 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800a40c:	bf00      	nop
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	0803f000 	.word	0x0803f000

0800a418 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800a41c:	4b15      	ldr	r3, [pc, #84]	; (800a474 <LoraInfo_Init+0x5c>)
 800a41e:	2200      	movs	r2, #0
 800a420:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800a422:	4b14      	ldr	r3, [pc, #80]	; (800a474 <LoraInfo_Init+0x5c>)
 800a424:	2200      	movs	r2, #0
 800a426:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800a428:	4b12      	ldr	r3, [pc, #72]	; (800a474 <LoraInfo_Init+0x5c>)
 800a42a:	2200      	movs	r2, #0
 800a42c:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800a42e:	4b11      	ldr	r3, [pc, #68]	; (800a474 <LoraInfo_Init+0x5c>)
 800a430:	2200      	movs	r2, #0
 800a432:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800a434:	4b0f      	ldr	r3, [pc, #60]	; (800a474 <LoraInfo_Init+0x5c>)
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	f043 0320 	orr.w	r3, r3, #32
 800a43c:	4a0d      	ldr	r2, [pc, #52]	; (800a474 <LoraInfo_Init+0x5c>)
 800a43e:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800a440:	4b0c      	ldr	r3, [pc, #48]	; (800a474 <LoraInfo_Init+0x5c>)
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d10c      	bne.n	800a462 <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800a448:	4b0b      	ldr	r3, [pc, #44]	; (800a478 <LoraInfo_Init+0x60>)
 800a44a:	2200      	movs	r2, #0
 800a44c:	2100      	movs	r1, #0
 800a44e:	2000      	movs	r0, #0
 800a450:	f010 fb02 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800a454:	bf00      	nop
 800a456:	f010 faed 	bl	801aa34 <UTIL_ADV_TRACE_IsBufferEmpty>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d1fa      	bne.n	800a456 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800a460:	e7fe      	b.n	800a460 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800a462:	4b04      	ldr	r3, [pc, #16]	; (800a474 <LoraInfo_Init+0x5c>)
 800a464:	2200      	movs	r2, #0
 800a466:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800a468:	4b02      	ldr	r3, [pc, #8]	; (800a474 <LoraInfo_Init+0x5c>)
 800a46a:	2203      	movs	r2, #3
 800a46c:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800a46e:	bf00      	nop
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	200004fc 	.word	0x200004fc
 800a478:	0801b0e0 	.word	0x0801b0e0

0800a47c <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800a47c:	b480      	push	{r7}
 800a47e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800a480:	4b02      	ldr	r3, [pc, #8]	; (800a48c <LoraInfo_GetPtr+0x10>)
}
 800a482:	4618      	mov	r0, r3
 800a484:	46bd      	mov	sp, r7
 800a486:	bc80      	pop	{r7}
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	200004fc 	.word	0x200004fc

0800a490 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800a494:	f7f8 fa49 	bl	800292a <BSP_RADIO_Init>
 800a498:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b082      	sub	sp, #8
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800a4a8:	79fb      	ldrb	r3, [r7, #7]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7f8 fa6e 	bl	800298c <BSP_RADIO_ConfigRFSwitch>
 800a4b0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3708      	adds	r7, #8
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800a4be:	f7f8 fab3 	bl	8002a28 <BSP_RADIO_GetTxConfig>
 800a4c2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800a4cc:	f7f8 fab3 	bl	8002a36 <BSP_RADIO_IsTCXO>
 800a4d0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800a4da:	f7f8 fab3 	bl	8002a44 <BSP_RADIO_IsDCDC>
 800a4de:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800a4ee:	79fb      	ldrb	r3, [r7, #7]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7f8 faae 	bl	8002a52 <BSP_RADIO_GetRFOMaxPowerConfig>
 800a4f6:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	33f1      	adds	r3, #241	; 0xf1
 800a50c:	2210      	movs	r2, #16
 800a50e:	2100      	movs	r1, #0
 800a510:	4618      	mov	r0, r3
 800a512:	f00b ff87 	bl	8016424 <memset1>
    ctx->M_n = 0;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2200      	movs	r2, #0
 800a51a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	22f0      	movs	r2, #240	; 0xf0
 800a522:	2100      	movs	r1, #0
 800a524:	4618      	mov	r0, r3
 800a526:	f00b ff7d 	bl	8016424 <memset1>
}
 800a52a:	bf00      	nop
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800a532:	b580      	push	{r7, lr}
 800a534:	b082      	sub	sp, #8
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
 800a53a:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	461a      	mov	r2, r3
 800a540:	2110      	movs	r1, #16
 800a542:	6838      	ldr	r0, [r7, #0]
 800a544:	f000 fe5c 	bl	800b200 <lorawan_aes_set_key>
}
 800a548:	bf00      	nop
 800a54a:	3708      	adds	r7, #8
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b08c      	sub	sp, #48	; 0x30
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a562:	2b00      	cmp	r3, #0
 800a564:	f000 80a1 	beq.w	800a6aa <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a56e:	f1c3 0310 	rsb	r3, r3, #16
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	4293      	cmp	r3, r2
 800a576:	bf28      	it	cs
 800a578:	4613      	movcs	r3, r2
 800a57a:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f203 1201 	addw	r2, r3, #257	; 0x101
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a588:	4413      	add	r3, r2
 800a58a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a58c:	b292      	uxth	r2, r2
 800a58e:	68b9      	ldr	r1, [r7, #8]
 800a590:	4618      	mov	r0, r3
 800a592:	f00b ff0c 	bl	80163ae <memcpy1>
        ctx->M_n += mlen;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59e:	441a      	add	r2, r3
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a5ac:	2b0f      	cmp	r3, #15
 800a5ae:	f240 808d 	bls.w	800a6cc <AES_CMAC_Update+0x17c>
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	f000 8088 	beq.w	800a6cc <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800a5bc:	2300      	movs	r3, #0
 800a5be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5c0:	e015      	b.n	800a5ee <AES_CMAC_Update+0x9e>
 800a5c2:	68fa      	ldr	r2, [r7, #12]
 800a5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c6:	4413      	add	r3, r2
 800a5c8:	33f1      	adds	r3, #241	; 0xf1
 800a5ca:	781a      	ldrb	r2, [r3, #0]
 800a5cc:	68f9      	ldr	r1, [r7, #12]
 800a5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d0:	440b      	add	r3, r1
 800a5d2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	4053      	eors	r3, r2
 800a5da:	b2d9      	uxtb	r1, r3
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e0:	4413      	add	r3, r2
 800a5e2:	33f1      	adds	r3, #241	; 0xf1
 800a5e4:	460a      	mov	r2, r1
 800a5e6:	701a      	strb	r2, [r3, #0]
 800a5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f0:	2b0f      	cmp	r3, #15
 800a5f2:	dde6      	ble.n	800a5c2 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800a5fa:	f107 0314 	add.w	r3, r7, #20
 800a5fe:	2210      	movs	r2, #16
 800a600:	4618      	mov	r0, r3
 800a602:	f00b fed4 	bl	80163ae <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	f107 0114 	add.w	r1, r7, #20
 800a60c:	f107 0314 	add.w	r3, r7, #20
 800a610:	4618      	mov	r0, r3
 800a612:	f000 fed3 	bl	800b3bc <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	33f1      	adds	r3, #241	; 0xf1
 800a61a:	f107 0114 	add.w	r1, r7, #20
 800a61e:	2210      	movs	r2, #16
 800a620:	4618      	mov	r0, r3
 800a622:	f00b fec4 	bl	80163ae <memcpy1>

        data += mlen;
 800a626:	68ba      	ldr	r2, [r7, #8]
 800a628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62a:	4413      	add	r3, r2
 800a62c:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	1ad3      	subs	r3, r2, r3
 800a634:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800a636:	e038      	b.n	800a6aa <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800a638:	2300      	movs	r3, #0
 800a63a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a63c:	e013      	b.n	800a666 <AES_CMAC_Update+0x116>
 800a63e:	68fa      	ldr	r2, [r7, #12]
 800a640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a642:	4413      	add	r3, r2
 800a644:	33f1      	adds	r3, #241	; 0xf1
 800a646:	781a      	ldrb	r2, [r3, #0]
 800a648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64a:	68b9      	ldr	r1, [r7, #8]
 800a64c:	440b      	add	r3, r1
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	4053      	eors	r3, r2
 800a652:	b2d9      	uxtb	r1, r3
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a658:	4413      	add	r3, r2
 800a65a:	33f1      	adds	r3, #241	; 0xf1
 800a65c:	460a      	mov	r2, r1
 800a65e:	701a      	strb	r2, [r3, #0]
 800a660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a662:	3301      	adds	r3, #1
 800a664:	62bb      	str	r3, [r7, #40]	; 0x28
 800a666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a668:	2b0f      	cmp	r3, #15
 800a66a:	dde8      	ble.n	800a63e <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800a672:	f107 0314 	add.w	r3, r7, #20
 800a676:	2210      	movs	r2, #16
 800a678:	4618      	mov	r0, r3
 800a67a:	f00b fe98 	bl	80163ae <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	f107 0114 	add.w	r1, r7, #20
 800a684:	f107 0314 	add.w	r3, r7, #20
 800a688:	4618      	mov	r0, r3
 800a68a:	f000 fe97 	bl	800b3bc <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	33f1      	adds	r3, #241	; 0xf1
 800a692:	f107 0114 	add.w	r1, r7, #20
 800a696:	2210      	movs	r2, #16
 800a698:	4618      	mov	r0, r3
 800a69a:	f00b fe88 	bl	80163ae <memcpy1>

        data += 16;
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	3310      	adds	r3, #16
 800a6a2:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	3b10      	subs	r3, #16
 800a6a8:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2b10      	cmp	r3, #16
 800a6ae:	d8c3      	bhi.n	800a638 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	b292      	uxth	r2, r2
 800a6ba:	68b9      	ldr	r1, [r7, #8]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f00b fe76 	bl	80163ae <memcpy1>
    ctx->M_n = len;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800a6ca:	e000      	b.n	800a6ce <AES_CMAC_Update+0x17e>
            return;
 800a6cc:	bf00      	nop
}
 800a6ce:	3730      	adds	r7, #48	; 0x30
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b092      	sub	sp, #72	; 0x48
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800a6de:	f107 031c 	add.w	r3, r7, #28
 800a6e2:	2210      	movs	r2, #16
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f00b fe9c 	bl	8016424 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800a6ec:	683a      	ldr	r2, [r7, #0]
 800a6ee:	f107 011c 	add.w	r1, r7, #28
 800a6f2:	f107 031c 	add.w	r3, r7, #28
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 fe60 	bl	800b3bc <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800a6fc:	7f3b      	ldrb	r3, [r7, #28]
 800a6fe:	b25b      	sxtb	r3, r3
 800a700:	2b00      	cmp	r3, #0
 800a702:	da30      	bge.n	800a766 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800a704:	2300      	movs	r3, #0
 800a706:	647b      	str	r3, [r7, #68]	; 0x44
 800a708:	e01b      	b.n	800a742 <AES_CMAC_Final+0x6e>
 800a70a:	f107 021c 	add.w	r2, r7, #28
 800a70e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a710:	4413      	add	r3, r2
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	005b      	lsls	r3, r3, #1
 800a716:	b25a      	sxtb	r2, r3
 800a718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a71a:	3301      	adds	r3, #1
 800a71c:	3348      	adds	r3, #72	; 0x48
 800a71e:	443b      	add	r3, r7
 800a720:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a724:	09db      	lsrs	r3, r3, #7
 800a726:	b2db      	uxtb	r3, r3
 800a728:	b25b      	sxtb	r3, r3
 800a72a:	4313      	orrs	r3, r2
 800a72c:	b25b      	sxtb	r3, r3
 800a72e:	b2d9      	uxtb	r1, r3
 800a730:	f107 021c 	add.w	r2, r7, #28
 800a734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a736:	4413      	add	r3, r2
 800a738:	460a      	mov	r2, r1
 800a73a:	701a      	strb	r2, [r3, #0]
 800a73c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a73e:	3301      	adds	r3, #1
 800a740:	647b      	str	r3, [r7, #68]	; 0x44
 800a742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a744:	2b0e      	cmp	r3, #14
 800a746:	dde0      	ble.n	800a70a <AES_CMAC_Final+0x36>
 800a748:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a74c:	005b      	lsls	r3, r3, #1
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800a754:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a758:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800a75c:	43db      	mvns	r3, r3
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a764:	e027      	b.n	800a7b6 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800a766:	2300      	movs	r3, #0
 800a768:	643b      	str	r3, [r7, #64]	; 0x40
 800a76a:	e01b      	b.n	800a7a4 <AES_CMAC_Final+0xd0>
 800a76c:	f107 021c 	add.w	r2, r7, #28
 800a770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a772:	4413      	add	r3, r2
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	005b      	lsls	r3, r3, #1
 800a778:	b25a      	sxtb	r2, r3
 800a77a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a77c:	3301      	adds	r3, #1
 800a77e:	3348      	adds	r3, #72	; 0x48
 800a780:	443b      	add	r3, r7
 800a782:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a786:	09db      	lsrs	r3, r3, #7
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	b25b      	sxtb	r3, r3
 800a78c:	4313      	orrs	r3, r2
 800a78e:	b25b      	sxtb	r3, r3
 800a790:	b2d9      	uxtb	r1, r3
 800a792:	f107 021c 	add.w	r2, r7, #28
 800a796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a798:	4413      	add	r3, r2
 800a79a:	460a      	mov	r2, r1
 800a79c:	701a      	strb	r2, [r3, #0]
 800a79e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	643b      	str	r3, [r7, #64]	; 0x40
 800a7a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7a6:	2b0e      	cmp	r3, #14
 800a7a8:	dde0      	ble.n	800a76c <AES_CMAC_Final+0x98>
 800a7aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a7ae:	005b      	lsls	r3, r3, #1
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a7bc:	2b10      	cmp	r3, #16
 800a7be:	d11d      	bne.n	800a7fc <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7c4:	e016      	b.n	800a7f4 <AES_CMAC_Final+0x120>
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a7d0:	781a      	ldrb	r2, [r3, #0]
 800a7d2:	f107 011c 	add.w	r1, r7, #28
 800a7d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7d8:	440b      	add	r3, r1
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	4053      	eors	r3, r2
 800a7de:	b2d9      	uxtb	r1, r3
 800a7e0:	683a      	ldr	r2, [r7, #0]
 800a7e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7e4:	4413      	add	r3, r2
 800a7e6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a7ea:	460a      	mov	r2, r1
 800a7ec:	701a      	strb	r2, [r3, #0]
 800a7ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7f6:	2b0f      	cmp	r3, #15
 800a7f8:	dde5      	ble.n	800a7c6 <AES_CMAC_Final+0xf2>
 800a7fa:	e096      	b.n	800a92a <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800a7fc:	7f3b      	ldrb	r3, [r7, #28]
 800a7fe:	b25b      	sxtb	r3, r3
 800a800:	2b00      	cmp	r3, #0
 800a802:	da30      	bge.n	800a866 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800a804:	2300      	movs	r3, #0
 800a806:	63bb      	str	r3, [r7, #56]	; 0x38
 800a808:	e01b      	b.n	800a842 <AES_CMAC_Final+0x16e>
 800a80a:	f107 021c 	add.w	r2, r7, #28
 800a80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a810:	4413      	add	r3, r2
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	005b      	lsls	r3, r3, #1
 800a816:	b25a      	sxtb	r2, r3
 800a818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81a:	3301      	adds	r3, #1
 800a81c:	3348      	adds	r3, #72	; 0x48
 800a81e:	443b      	add	r3, r7
 800a820:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a824:	09db      	lsrs	r3, r3, #7
 800a826:	b2db      	uxtb	r3, r3
 800a828:	b25b      	sxtb	r3, r3
 800a82a:	4313      	orrs	r3, r2
 800a82c:	b25b      	sxtb	r3, r3
 800a82e:	b2d9      	uxtb	r1, r3
 800a830:	f107 021c 	add.w	r2, r7, #28
 800a834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a836:	4413      	add	r3, r2
 800a838:	460a      	mov	r2, r1
 800a83a:	701a      	strb	r2, [r3, #0]
 800a83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a83e:	3301      	adds	r3, #1
 800a840:	63bb      	str	r3, [r7, #56]	; 0x38
 800a842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a844:	2b0e      	cmp	r3, #14
 800a846:	dde0      	ble.n	800a80a <AES_CMAC_Final+0x136>
 800a848:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a84c:	005b      	lsls	r3, r3, #1
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800a854:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a858:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800a85c:	43db      	mvns	r3, r3
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a864:	e027      	b.n	800a8b6 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800a866:	2300      	movs	r3, #0
 800a868:	637b      	str	r3, [r7, #52]	; 0x34
 800a86a:	e01b      	b.n	800a8a4 <AES_CMAC_Final+0x1d0>
 800a86c:	f107 021c 	add.w	r2, r7, #28
 800a870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a872:	4413      	add	r3, r2
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	005b      	lsls	r3, r3, #1
 800a878:	b25a      	sxtb	r2, r3
 800a87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a87c:	3301      	adds	r3, #1
 800a87e:	3348      	adds	r3, #72	; 0x48
 800a880:	443b      	add	r3, r7
 800a882:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a886:	09db      	lsrs	r3, r3, #7
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	b25b      	sxtb	r3, r3
 800a88c:	4313      	orrs	r3, r2
 800a88e:	b25b      	sxtb	r3, r3
 800a890:	b2d9      	uxtb	r1, r3
 800a892:	f107 021c 	add.w	r2, r7, #28
 800a896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a898:	4413      	add	r3, r2
 800a89a:	460a      	mov	r2, r1
 800a89c:	701a      	strb	r2, [r3, #0]
 800a89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	637b      	str	r3, [r7, #52]	; 0x34
 800a8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a6:	2b0e      	cmp	r3, #14
 800a8a8:	dde0      	ble.n	800a86c <AES_CMAC_Final+0x198>
 800a8aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a8ae:	005b      	lsls	r3, r3, #1
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a8bc:	683a      	ldr	r2, [r7, #0]
 800a8be:	4413      	add	r3, r2
 800a8c0:	2280      	movs	r2, #128	; 0x80
 800a8c2:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800a8c6:	e007      	b.n	800a8d8 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a8ce:	683a      	ldr	r2, [r7, #0]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a8de:	1c5a      	adds	r2, r3, #1
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a8ec:	2b0f      	cmp	r3, #15
 800a8ee:	d9eb      	bls.n	800a8c8 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	633b      	str	r3, [r7, #48]	; 0x30
 800a8f4:	e016      	b.n	800a924 <AES_CMAC_Final+0x250>
 800a8f6:	683a      	ldr	r2, [r7, #0]
 800a8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fa:	4413      	add	r3, r2
 800a8fc:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a900:	781a      	ldrb	r2, [r3, #0]
 800a902:	f107 011c 	add.w	r1, r7, #28
 800a906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a908:	440b      	add	r3, r1
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	4053      	eors	r3, r2
 800a90e:	b2d9      	uxtb	r1, r3
 800a910:	683a      	ldr	r2, [r7, #0]
 800a912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a914:	4413      	add	r3, r2
 800a916:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a91a:	460a      	mov	r2, r1
 800a91c:	701a      	strb	r2, [r3, #0]
 800a91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a920:	3301      	adds	r3, #1
 800a922:	633b      	str	r3, [r7, #48]	; 0x30
 800a924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a926:	2b0f      	cmp	r3, #15
 800a928:	dde5      	ble.n	800a8f6 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800a92a:	2300      	movs	r3, #0
 800a92c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a92e:	e015      	b.n	800a95c <AES_CMAC_Final+0x288>
 800a930:	683a      	ldr	r2, [r7, #0]
 800a932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a934:	4413      	add	r3, r2
 800a936:	33f1      	adds	r3, #241	; 0xf1
 800a938:	781a      	ldrb	r2, [r3, #0]
 800a93a:	6839      	ldr	r1, [r7, #0]
 800a93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93e:	440b      	add	r3, r1
 800a940:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	4053      	eors	r3, r2
 800a948:	b2d9      	uxtb	r1, r3
 800a94a:	683a      	ldr	r2, [r7, #0]
 800a94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94e:	4413      	add	r3, r2
 800a950:	33f1      	adds	r3, #241	; 0xf1
 800a952:	460a      	mov	r2, r1
 800a954:	701a      	strb	r2, [r3, #0]
 800a956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a958:	3301      	adds	r3, #1
 800a95a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95e:	2b0f      	cmp	r3, #15
 800a960:	dde6      	ble.n	800a930 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800a968:	f107 030c 	add.w	r3, r7, #12
 800a96c:	2210      	movs	r2, #16
 800a96e:	4618      	mov	r0, r3
 800a970:	f00b fd1d 	bl	80163ae <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800a974:	683a      	ldr	r2, [r7, #0]
 800a976:	f107 030c 	add.w	r3, r7, #12
 800a97a:	6879      	ldr	r1, [r7, #4]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f000 fd1d 	bl	800b3bc <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800a982:	f107 031c 	add.w	r3, r7, #28
 800a986:	2210      	movs	r2, #16
 800a988:	2100      	movs	r1, #0
 800a98a:	4618      	mov	r0, r3
 800a98c:	f00b fd4a 	bl	8016424 <memset1>
}
 800a990:	bf00      	nop
 800a992:	3748      	adds	r7, #72	; 0x48
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	781a      	ldrb	r2, [r3, #0]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	683a      	ldr	r2, [r7, #0]
 800a9b0:	7852      	ldrb	r2, [r2, #1]
 800a9b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	3302      	adds	r3, #2
 800a9b8:	683a      	ldr	r2, [r7, #0]
 800a9ba:	7892      	ldrb	r2, [r2, #2]
 800a9bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	3303      	adds	r3, #3
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	78d2      	ldrb	r2, [r2, #3]
 800a9c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	3304      	adds	r3, #4
 800a9cc:	683a      	ldr	r2, [r7, #0]
 800a9ce:	7912      	ldrb	r2, [r2, #4]
 800a9d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	3305      	adds	r3, #5
 800a9d6:	683a      	ldr	r2, [r7, #0]
 800a9d8:	7952      	ldrb	r2, [r2, #5]
 800a9da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	3306      	adds	r3, #6
 800a9e0:	683a      	ldr	r2, [r7, #0]
 800a9e2:	7992      	ldrb	r2, [r2, #6]
 800a9e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	3307      	adds	r3, #7
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	79d2      	ldrb	r2, [r2, #7]
 800a9ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	3308      	adds	r3, #8
 800a9f4:	683a      	ldr	r2, [r7, #0]
 800a9f6:	7a12      	ldrb	r2, [r2, #8]
 800a9f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	3309      	adds	r3, #9
 800a9fe:	683a      	ldr	r2, [r7, #0]
 800aa00:	7a52      	ldrb	r2, [r2, #9]
 800aa02:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	330a      	adds	r3, #10
 800aa08:	683a      	ldr	r2, [r7, #0]
 800aa0a:	7a92      	ldrb	r2, [r2, #10]
 800aa0c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	330b      	adds	r3, #11
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	7ad2      	ldrb	r2, [r2, #11]
 800aa16:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	330c      	adds	r3, #12
 800aa1c:	683a      	ldr	r2, [r7, #0]
 800aa1e:	7b12      	ldrb	r2, [r2, #12]
 800aa20:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	330d      	adds	r3, #13
 800aa26:	683a      	ldr	r2, [r7, #0]
 800aa28:	7b52      	ldrb	r2, [r2, #13]
 800aa2a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	330e      	adds	r3, #14
 800aa30:	683a      	ldr	r2, [r7, #0]
 800aa32:	7b92      	ldrb	r2, [r2, #14]
 800aa34:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	330f      	adds	r3, #15
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	7bd2      	ldrb	r2, [r2, #15]
 800aa3e:	701a      	strb	r2, [r3, #0]
#endif
}
 800aa40:	bf00      	nop
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bc80      	pop	{r7}
 800aa48:	4770      	bx	lr

0800aa4a <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800aa4a:	b480      	push	{r7}
 800aa4c:	b085      	sub	sp, #20
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	60f8      	str	r0, [r7, #12]
 800aa52:	60b9      	str	r1, [r7, #8]
 800aa54:	4613      	mov	r3, r2
 800aa56:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800aa58:	e007      	b.n	800aa6a <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800aa5a:	68ba      	ldr	r2, [r7, #8]
 800aa5c:	1c53      	adds	r3, r2, #1
 800aa5e:	60bb      	str	r3, [r7, #8]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	1c59      	adds	r1, r3, #1
 800aa64:	60f9      	str	r1, [r7, #12]
 800aa66:	7812      	ldrb	r2, [r2, #0]
 800aa68:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800aa6a:	79fb      	ldrb	r3, [r7, #7]
 800aa6c:	1e5a      	subs	r2, r3, #1
 800aa6e:	71fa      	strb	r2, [r7, #7]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d1f2      	bne.n	800aa5a <copy_block_nn+0x10>
}
 800aa74:	bf00      	nop
 800aa76:	bf00      	nop
 800aa78:	3714      	adds	r7, #20
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bc80      	pop	{r7}
 800aa7e:	4770      	bx	lr

0800aa80 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	781a      	ldrb	r2, [r3, #0]
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	4053      	eors	r3, r2
 800aa94:	b2da      	uxtb	r2, r3
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	7819      	ldrb	r1, [r3, #0]
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	781a      	ldrb	r2, [r3, #0]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	404a      	eors	r2, r1
 800aaac:	b2d2      	uxtb	r2, r2
 800aaae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	3302      	adds	r3, #2
 800aab4:	7819      	ldrb	r1, [r3, #0]
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	3302      	adds	r3, #2
 800aaba:	781a      	ldrb	r2, [r3, #0]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	3302      	adds	r3, #2
 800aac0:	404a      	eors	r2, r1
 800aac2:	b2d2      	uxtb	r2, r2
 800aac4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	3303      	adds	r3, #3
 800aaca:	7819      	ldrb	r1, [r3, #0]
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	3303      	adds	r3, #3
 800aad0:	781a      	ldrb	r2, [r3, #0]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	3303      	adds	r3, #3
 800aad6:	404a      	eors	r2, r1
 800aad8:	b2d2      	uxtb	r2, r2
 800aada:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	3304      	adds	r3, #4
 800aae0:	7819      	ldrb	r1, [r3, #0]
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	3304      	adds	r3, #4
 800aae6:	781a      	ldrb	r2, [r3, #0]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	3304      	adds	r3, #4
 800aaec:	404a      	eors	r2, r1
 800aaee:	b2d2      	uxtb	r2, r2
 800aaf0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	3305      	adds	r3, #5
 800aaf6:	7819      	ldrb	r1, [r3, #0]
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	3305      	adds	r3, #5
 800aafc:	781a      	ldrb	r2, [r3, #0]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	3305      	adds	r3, #5
 800ab02:	404a      	eors	r2, r1
 800ab04:	b2d2      	uxtb	r2, r2
 800ab06:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	3306      	adds	r3, #6
 800ab0c:	7819      	ldrb	r1, [r3, #0]
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	3306      	adds	r3, #6
 800ab12:	781a      	ldrb	r2, [r3, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	3306      	adds	r3, #6
 800ab18:	404a      	eors	r2, r1
 800ab1a:	b2d2      	uxtb	r2, r2
 800ab1c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	3307      	adds	r3, #7
 800ab22:	7819      	ldrb	r1, [r3, #0]
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	3307      	adds	r3, #7
 800ab28:	781a      	ldrb	r2, [r3, #0]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	3307      	adds	r3, #7
 800ab2e:	404a      	eors	r2, r1
 800ab30:	b2d2      	uxtb	r2, r2
 800ab32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	3308      	adds	r3, #8
 800ab38:	7819      	ldrb	r1, [r3, #0]
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	3308      	adds	r3, #8
 800ab3e:	781a      	ldrb	r2, [r3, #0]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	3308      	adds	r3, #8
 800ab44:	404a      	eors	r2, r1
 800ab46:	b2d2      	uxtb	r2, r2
 800ab48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	3309      	adds	r3, #9
 800ab4e:	7819      	ldrb	r1, [r3, #0]
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	3309      	adds	r3, #9
 800ab54:	781a      	ldrb	r2, [r3, #0]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	3309      	adds	r3, #9
 800ab5a:	404a      	eors	r2, r1
 800ab5c:	b2d2      	uxtb	r2, r2
 800ab5e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	330a      	adds	r3, #10
 800ab64:	7819      	ldrb	r1, [r3, #0]
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	330a      	adds	r3, #10
 800ab6a:	781a      	ldrb	r2, [r3, #0]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	330a      	adds	r3, #10
 800ab70:	404a      	eors	r2, r1
 800ab72:	b2d2      	uxtb	r2, r2
 800ab74:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	330b      	adds	r3, #11
 800ab7a:	7819      	ldrb	r1, [r3, #0]
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	330b      	adds	r3, #11
 800ab80:	781a      	ldrb	r2, [r3, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	330b      	adds	r3, #11
 800ab86:	404a      	eors	r2, r1
 800ab88:	b2d2      	uxtb	r2, r2
 800ab8a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	330c      	adds	r3, #12
 800ab90:	7819      	ldrb	r1, [r3, #0]
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	330c      	adds	r3, #12
 800ab96:	781a      	ldrb	r2, [r3, #0]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	330c      	adds	r3, #12
 800ab9c:	404a      	eors	r2, r1
 800ab9e:	b2d2      	uxtb	r2, r2
 800aba0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	330d      	adds	r3, #13
 800aba6:	7819      	ldrb	r1, [r3, #0]
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	330d      	adds	r3, #13
 800abac:	781a      	ldrb	r2, [r3, #0]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	330d      	adds	r3, #13
 800abb2:	404a      	eors	r2, r1
 800abb4:	b2d2      	uxtb	r2, r2
 800abb6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	330e      	adds	r3, #14
 800abbc:	7819      	ldrb	r1, [r3, #0]
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	330e      	adds	r3, #14
 800abc2:	781a      	ldrb	r2, [r3, #0]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	330e      	adds	r3, #14
 800abc8:	404a      	eors	r2, r1
 800abca:	b2d2      	uxtb	r2, r2
 800abcc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	330f      	adds	r3, #15
 800abd2:	7819      	ldrb	r1, [r3, #0]
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	330f      	adds	r3, #15
 800abd8:	781a      	ldrb	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	330f      	adds	r3, #15
 800abde:	404a      	eors	r2, r1
 800abe0:	b2d2      	uxtb	r2, r2
 800abe2:	701a      	strb	r2, [r3, #0]
#endif
}
 800abe4:	bf00      	nop
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	bc80      	pop	{r7}
 800abec:	4770      	bx	lr

0800abee <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800abee:	b480      	push	{r7}
 800abf0:	b085      	sub	sp, #20
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	60f8      	str	r0, [r7, #12]
 800abf6:	60b9      	str	r1, [r7, #8]
 800abf8:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	781a      	ldrb	r2, [r3, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	4053      	eors	r3, r2
 800ac04:	b2da      	uxtb	r2, r3
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	7819      	ldrb	r1, [r3, #0]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	3301      	adds	r3, #1
 800ac14:	781a      	ldrb	r2, [r3, #0]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	404a      	eors	r2, r1
 800ac1c:	b2d2      	uxtb	r2, r2
 800ac1e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	3302      	adds	r3, #2
 800ac24:	7819      	ldrb	r1, [r3, #0]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	3302      	adds	r3, #2
 800ac2a:	781a      	ldrb	r2, [r3, #0]
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	3302      	adds	r3, #2
 800ac30:	404a      	eors	r2, r1
 800ac32:	b2d2      	uxtb	r2, r2
 800ac34:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	3303      	adds	r3, #3
 800ac3a:	7819      	ldrb	r1, [r3, #0]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	3303      	adds	r3, #3
 800ac40:	781a      	ldrb	r2, [r3, #0]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	3303      	adds	r3, #3
 800ac46:	404a      	eors	r2, r1
 800ac48:	b2d2      	uxtb	r2, r2
 800ac4a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	3304      	adds	r3, #4
 800ac50:	7819      	ldrb	r1, [r3, #0]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	3304      	adds	r3, #4
 800ac56:	781a      	ldrb	r2, [r3, #0]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	3304      	adds	r3, #4
 800ac5c:	404a      	eors	r2, r1
 800ac5e:	b2d2      	uxtb	r2, r2
 800ac60:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	3305      	adds	r3, #5
 800ac66:	7819      	ldrb	r1, [r3, #0]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	3305      	adds	r3, #5
 800ac6c:	781a      	ldrb	r2, [r3, #0]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	3305      	adds	r3, #5
 800ac72:	404a      	eors	r2, r1
 800ac74:	b2d2      	uxtb	r2, r2
 800ac76:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	3306      	adds	r3, #6
 800ac7c:	7819      	ldrb	r1, [r3, #0]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	3306      	adds	r3, #6
 800ac82:	781a      	ldrb	r2, [r3, #0]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	3306      	adds	r3, #6
 800ac88:	404a      	eors	r2, r1
 800ac8a:	b2d2      	uxtb	r2, r2
 800ac8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	3307      	adds	r3, #7
 800ac92:	7819      	ldrb	r1, [r3, #0]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	3307      	adds	r3, #7
 800ac98:	781a      	ldrb	r2, [r3, #0]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	3307      	adds	r3, #7
 800ac9e:	404a      	eors	r2, r1
 800aca0:	b2d2      	uxtb	r2, r2
 800aca2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	3308      	adds	r3, #8
 800aca8:	7819      	ldrb	r1, [r3, #0]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	3308      	adds	r3, #8
 800acae:	781a      	ldrb	r2, [r3, #0]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	3308      	adds	r3, #8
 800acb4:	404a      	eors	r2, r1
 800acb6:	b2d2      	uxtb	r2, r2
 800acb8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	3309      	adds	r3, #9
 800acbe:	7819      	ldrb	r1, [r3, #0]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	3309      	adds	r3, #9
 800acc4:	781a      	ldrb	r2, [r3, #0]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	3309      	adds	r3, #9
 800acca:	404a      	eors	r2, r1
 800accc:	b2d2      	uxtb	r2, r2
 800acce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	330a      	adds	r3, #10
 800acd4:	7819      	ldrb	r1, [r3, #0]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	330a      	adds	r3, #10
 800acda:	781a      	ldrb	r2, [r3, #0]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	330a      	adds	r3, #10
 800ace0:	404a      	eors	r2, r1
 800ace2:	b2d2      	uxtb	r2, r2
 800ace4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	330b      	adds	r3, #11
 800acea:	7819      	ldrb	r1, [r3, #0]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	330b      	adds	r3, #11
 800acf0:	781a      	ldrb	r2, [r3, #0]
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	330b      	adds	r3, #11
 800acf6:	404a      	eors	r2, r1
 800acf8:	b2d2      	uxtb	r2, r2
 800acfa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	330c      	adds	r3, #12
 800ad00:	7819      	ldrb	r1, [r3, #0]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	330c      	adds	r3, #12
 800ad06:	781a      	ldrb	r2, [r3, #0]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	330c      	adds	r3, #12
 800ad0c:	404a      	eors	r2, r1
 800ad0e:	b2d2      	uxtb	r2, r2
 800ad10:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	330d      	adds	r3, #13
 800ad16:	7819      	ldrb	r1, [r3, #0]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	330d      	adds	r3, #13
 800ad1c:	781a      	ldrb	r2, [r3, #0]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	330d      	adds	r3, #13
 800ad22:	404a      	eors	r2, r1
 800ad24:	b2d2      	uxtb	r2, r2
 800ad26:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	330e      	adds	r3, #14
 800ad2c:	7819      	ldrb	r1, [r3, #0]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	330e      	adds	r3, #14
 800ad32:	781a      	ldrb	r2, [r3, #0]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	330e      	adds	r3, #14
 800ad38:	404a      	eors	r2, r1
 800ad3a:	b2d2      	uxtb	r2, r2
 800ad3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	330f      	adds	r3, #15
 800ad42:	7819      	ldrb	r1, [r3, #0]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	330f      	adds	r3, #15
 800ad48:	781a      	ldrb	r2, [r3, #0]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	330f      	adds	r3, #15
 800ad4e:	404a      	eors	r2, r1
 800ad50:	b2d2      	uxtb	r2, r2
 800ad52:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800ad54:	bf00      	nop
 800ad56:	3714      	adds	r7, #20
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bc80      	pop	{r7}
 800ad5c:	4770      	bx	lr

0800ad5e <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b082      	sub	sp, #8
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
 800ad66:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800ad68:	6839      	ldr	r1, [r7, #0]
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f7ff fe88 	bl	800aa80 <xor_block>
}
 800ad70:	bf00      	nop
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800ad78:	b480      	push	{r7}
 800ad7a:	b085      	sub	sp, #20
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	461a      	mov	r2, r3
 800ad86:	4b48      	ldr	r3, [pc, #288]	; (800aea8 <shift_sub_rows+0x130>)
 800ad88:	5c9a      	ldrb	r2, [r3, r2]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	701a      	strb	r2, [r3, #0]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	3304      	adds	r3, #4
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	4619      	mov	r1, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	3304      	adds	r3, #4
 800ad9a:	4a43      	ldr	r2, [pc, #268]	; (800aea8 <shift_sub_rows+0x130>)
 800ad9c:	5c52      	ldrb	r2, [r2, r1]
 800ad9e:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	3308      	adds	r3, #8
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	4619      	mov	r1, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	3308      	adds	r3, #8
 800adac:	4a3e      	ldr	r2, [pc, #248]	; (800aea8 <shift_sub_rows+0x130>)
 800adae:	5c52      	ldrb	r2, [r2, r1]
 800adb0:	701a      	strb	r2, [r3, #0]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	330c      	adds	r3, #12
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	4619      	mov	r1, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	330c      	adds	r3, #12
 800adbe:	4a3a      	ldr	r2, [pc, #232]	; (800aea8 <shift_sub_rows+0x130>)
 800adc0:	5c52      	ldrb	r2, [r2, r1]
 800adc2:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	785b      	ldrb	r3, [r3, #1]
 800adc8:	73fb      	strb	r3, [r7, #15]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	3305      	adds	r3, #5
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	4619      	mov	r1, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	3301      	adds	r3, #1
 800add6:	4a34      	ldr	r2, [pc, #208]	; (800aea8 <shift_sub_rows+0x130>)
 800add8:	5c52      	ldrb	r2, [r2, r1]
 800adda:	701a      	strb	r2, [r3, #0]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	3309      	adds	r3, #9
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	4619      	mov	r1, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	3305      	adds	r3, #5
 800ade8:	4a2f      	ldr	r2, [pc, #188]	; (800aea8 <shift_sub_rows+0x130>)
 800adea:	5c52      	ldrb	r2, [r2, r1]
 800adec:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	330d      	adds	r3, #13
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	4619      	mov	r1, r3
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	3309      	adds	r3, #9
 800adfa:	4a2b      	ldr	r2, [pc, #172]	; (800aea8 <shift_sub_rows+0x130>)
 800adfc:	5c52      	ldrb	r2, [r2, r1]
 800adfe:	701a      	strb	r2, [r3, #0]
 800ae00:	7bfa      	ldrb	r2, [r7, #15]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	330d      	adds	r3, #13
 800ae06:	4928      	ldr	r1, [pc, #160]	; (800aea8 <shift_sub_rows+0x130>)
 800ae08:	5c8a      	ldrb	r2, [r1, r2]
 800ae0a:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	789b      	ldrb	r3, [r3, #2]
 800ae10:	73fb      	strb	r3, [r7, #15]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	330a      	adds	r3, #10
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	4619      	mov	r1, r3
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	3302      	adds	r3, #2
 800ae1e:	4a22      	ldr	r2, [pc, #136]	; (800aea8 <shift_sub_rows+0x130>)
 800ae20:	5c52      	ldrb	r2, [r2, r1]
 800ae22:	701a      	strb	r2, [r3, #0]
 800ae24:	7bfa      	ldrb	r2, [r7, #15]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	330a      	adds	r3, #10
 800ae2a:	491f      	ldr	r1, [pc, #124]	; (800aea8 <shift_sub_rows+0x130>)
 800ae2c:	5c8a      	ldrb	r2, [r1, r2]
 800ae2e:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	799b      	ldrb	r3, [r3, #6]
 800ae34:	73fb      	strb	r3, [r7, #15]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	330e      	adds	r3, #14
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	3306      	adds	r3, #6
 800ae42:	4a19      	ldr	r2, [pc, #100]	; (800aea8 <shift_sub_rows+0x130>)
 800ae44:	5c52      	ldrb	r2, [r2, r1]
 800ae46:	701a      	strb	r2, [r3, #0]
 800ae48:	7bfa      	ldrb	r2, [r7, #15]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	330e      	adds	r3, #14
 800ae4e:	4916      	ldr	r1, [pc, #88]	; (800aea8 <shift_sub_rows+0x130>)
 800ae50:	5c8a      	ldrb	r2, [r1, r2]
 800ae52:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	7bdb      	ldrb	r3, [r3, #15]
 800ae58:	73fb      	strb	r3, [r7, #15]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	330b      	adds	r3, #11
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	4619      	mov	r1, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	330f      	adds	r3, #15
 800ae66:	4a10      	ldr	r2, [pc, #64]	; (800aea8 <shift_sub_rows+0x130>)
 800ae68:	5c52      	ldrb	r2, [r2, r1]
 800ae6a:	701a      	strb	r2, [r3, #0]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	3307      	adds	r3, #7
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	4619      	mov	r1, r3
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	330b      	adds	r3, #11
 800ae78:	4a0b      	ldr	r2, [pc, #44]	; (800aea8 <shift_sub_rows+0x130>)
 800ae7a:	5c52      	ldrb	r2, [r2, r1]
 800ae7c:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	3303      	adds	r3, #3
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	4619      	mov	r1, r3
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	3307      	adds	r3, #7
 800ae8a:	4a07      	ldr	r2, [pc, #28]	; (800aea8 <shift_sub_rows+0x130>)
 800ae8c:	5c52      	ldrb	r2, [r2, r1]
 800ae8e:	701a      	strb	r2, [r3, #0]
 800ae90:	7bfa      	ldrb	r2, [r7, #15]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	3303      	adds	r3, #3
 800ae96:	4904      	ldr	r1, [pc, #16]	; (800aea8 <shift_sub_rows+0x130>)
 800ae98:	5c8a      	ldrb	r2, [r1, r2]
 800ae9a:	701a      	strb	r2, [r3, #0]
}
 800ae9c:	bf00      	nop
 800ae9e:	3714      	adds	r7, #20
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bc80      	pop	{r7}
 800aea4:	4770      	bx	lr
 800aea6:	bf00      	nop
 800aea8:	0801b6b0 	.word	0x0801b6b0

0800aeac <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b086      	sub	sp, #24
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800aeb4:	f107 0308 	add.w	r3, r7, #8
 800aeb8:	6879      	ldr	r1, [r7, #4]
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7ff fd6c 	bl	800a998 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800aec0:	7a3b      	ldrb	r3, [r7, #8]
 800aec2:	461a      	mov	r2, r3
 800aec4:	4b9a      	ldr	r3, [pc, #616]	; (800b130 <mix_sub_columns+0x284>)
 800aec6:	5c9a      	ldrb	r2, [r3, r2]
 800aec8:	7b7b      	ldrb	r3, [r7, #13]
 800aeca:	4619      	mov	r1, r3
 800aecc:	4b99      	ldr	r3, [pc, #612]	; (800b134 <mix_sub_columns+0x288>)
 800aece:	5c5b      	ldrb	r3, [r3, r1]
 800aed0:	4053      	eors	r3, r2
 800aed2:	b2da      	uxtb	r2, r3
 800aed4:	7cbb      	ldrb	r3, [r7, #18]
 800aed6:	4619      	mov	r1, r3
 800aed8:	4b97      	ldr	r3, [pc, #604]	; (800b138 <mix_sub_columns+0x28c>)
 800aeda:	5c5b      	ldrb	r3, [r3, r1]
 800aedc:	4053      	eors	r3, r2
 800aede:	b2da      	uxtb	r2, r3
 800aee0:	7dfb      	ldrb	r3, [r7, #23]
 800aee2:	4619      	mov	r1, r3
 800aee4:	4b94      	ldr	r3, [pc, #592]	; (800b138 <mix_sub_columns+0x28c>)
 800aee6:	5c5b      	ldrb	r3, [r3, r1]
 800aee8:	4053      	eors	r3, r2
 800aeea:	b2da      	uxtb	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800aef0:	7a3b      	ldrb	r3, [r7, #8]
 800aef2:	461a      	mov	r2, r3
 800aef4:	4b90      	ldr	r3, [pc, #576]	; (800b138 <mix_sub_columns+0x28c>)
 800aef6:	5c9a      	ldrb	r2, [r3, r2]
 800aef8:	7b7b      	ldrb	r3, [r7, #13]
 800aefa:	4619      	mov	r1, r3
 800aefc:	4b8c      	ldr	r3, [pc, #560]	; (800b130 <mix_sub_columns+0x284>)
 800aefe:	5c5b      	ldrb	r3, [r3, r1]
 800af00:	4053      	eors	r3, r2
 800af02:	b2da      	uxtb	r2, r3
 800af04:	7cbb      	ldrb	r3, [r7, #18]
 800af06:	4619      	mov	r1, r3
 800af08:	4b8a      	ldr	r3, [pc, #552]	; (800b134 <mix_sub_columns+0x288>)
 800af0a:	5c5b      	ldrb	r3, [r3, r1]
 800af0c:	4053      	eors	r3, r2
 800af0e:	b2d9      	uxtb	r1, r3
 800af10:	7dfb      	ldrb	r3, [r7, #23]
 800af12:	461a      	mov	r2, r3
 800af14:	4b88      	ldr	r3, [pc, #544]	; (800b138 <mix_sub_columns+0x28c>)
 800af16:	5c9a      	ldrb	r2, [r3, r2]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	3301      	adds	r3, #1
 800af1c:	404a      	eors	r2, r1
 800af1e:	b2d2      	uxtb	r2, r2
 800af20:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800af22:	7a3b      	ldrb	r3, [r7, #8]
 800af24:	461a      	mov	r2, r3
 800af26:	4b84      	ldr	r3, [pc, #528]	; (800b138 <mix_sub_columns+0x28c>)
 800af28:	5c9a      	ldrb	r2, [r3, r2]
 800af2a:	7b7b      	ldrb	r3, [r7, #13]
 800af2c:	4619      	mov	r1, r3
 800af2e:	4b82      	ldr	r3, [pc, #520]	; (800b138 <mix_sub_columns+0x28c>)
 800af30:	5c5b      	ldrb	r3, [r3, r1]
 800af32:	4053      	eors	r3, r2
 800af34:	b2da      	uxtb	r2, r3
 800af36:	7cbb      	ldrb	r3, [r7, #18]
 800af38:	4619      	mov	r1, r3
 800af3a:	4b7d      	ldr	r3, [pc, #500]	; (800b130 <mix_sub_columns+0x284>)
 800af3c:	5c5b      	ldrb	r3, [r3, r1]
 800af3e:	4053      	eors	r3, r2
 800af40:	b2d9      	uxtb	r1, r3
 800af42:	7dfb      	ldrb	r3, [r7, #23]
 800af44:	461a      	mov	r2, r3
 800af46:	4b7b      	ldr	r3, [pc, #492]	; (800b134 <mix_sub_columns+0x288>)
 800af48:	5c9a      	ldrb	r2, [r3, r2]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	3302      	adds	r3, #2
 800af4e:	404a      	eors	r2, r1
 800af50:	b2d2      	uxtb	r2, r2
 800af52:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800af54:	7a3b      	ldrb	r3, [r7, #8]
 800af56:	461a      	mov	r2, r3
 800af58:	4b76      	ldr	r3, [pc, #472]	; (800b134 <mix_sub_columns+0x288>)
 800af5a:	5c9a      	ldrb	r2, [r3, r2]
 800af5c:	7b7b      	ldrb	r3, [r7, #13]
 800af5e:	4619      	mov	r1, r3
 800af60:	4b75      	ldr	r3, [pc, #468]	; (800b138 <mix_sub_columns+0x28c>)
 800af62:	5c5b      	ldrb	r3, [r3, r1]
 800af64:	4053      	eors	r3, r2
 800af66:	b2da      	uxtb	r2, r3
 800af68:	7cbb      	ldrb	r3, [r7, #18]
 800af6a:	4619      	mov	r1, r3
 800af6c:	4b72      	ldr	r3, [pc, #456]	; (800b138 <mix_sub_columns+0x28c>)
 800af6e:	5c5b      	ldrb	r3, [r3, r1]
 800af70:	4053      	eors	r3, r2
 800af72:	b2d9      	uxtb	r1, r3
 800af74:	7dfb      	ldrb	r3, [r7, #23]
 800af76:	461a      	mov	r2, r3
 800af78:	4b6d      	ldr	r3, [pc, #436]	; (800b130 <mix_sub_columns+0x284>)
 800af7a:	5c9a      	ldrb	r2, [r3, r2]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	3303      	adds	r3, #3
 800af80:	404a      	eors	r2, r1
 800af82:	b2d2      	uxtb	r2, r2
 800af84:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800af86:	7b3b      	ldrb	r3, [r7, #12]
 800af88:	461a      	mov	r2, r3
 800af8a:	4b69      	ldr	r3, [pc, #420]	; (800b130 <mix_sub_columns+0x284>)
 800af8c:	5c9a      	ldrb	r2, [r3, r2]
 800af8e:	7c7b      	ldrb	r3, [r7, #17]
 800af90:	4619      	mov	r1, r3
 800af92:	4b68      	ldr	r3, [pc, #416]	; (800b134 <mix_sub_columns+0x288>)
 800af94:	5c5b      	ldrb	r3, [r3, r1]
 800af96:	4053      	eors	r3, r2
 800af98:	b2da      	uxtb	r2, r3
 800af9a:	7dbb      	ldrb	r3, [r7, #22]
 800af9c:	4619      	mov	r1, r3
 800af9e:	4b66      	ldr	r3, [pc, #408]	; (800b138 <mix_sub_columns+0x28c>)
 800afa0:	5c5b      	ldrb	r3, [r3, r1]
 800afa2:	4053      	eors	r3, r2
 800afa4:	b2d9      	uxtb	r1, r3
 800afa6:	7afb      	ldrb	r3, [r7, #11]
 800afa8:	461a      	mov	r2, r3
 800afaa:	4b63      	ldr	r3, [pc, #396]	; (800b138 <mix_sub_columns+0x28c>)
 800afac:	5c9a      	ldrb	r2, [r3, r2]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	3304      	adds	r3, #4
 800afb2:	404a      	eors	r2, r1
 800afb4:	b2d2      	uxtb	r2, r2
 800afb6:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800afb8:	7b3b      	ldrb	r3, [r7, #12]
 800afba:	461a      	mov	r2, r3
 800afbc:	4b5e      	ldr	r3, [pc, #376]	; (800b138 <mix_sub_columns+0x28c>)
 800afbe:	5c9a      	ldrb	r2, [r3, r2]
 800afc0:	7c7b      	ldrb	r3, [r7, #17]
 800afc2:	4619      	mov	r1, r3
 800afc4:	4b5a      	ldr	r3, [pc, #360]	; (800b130 <mix_sub_columns+0x284>)
 800afc6:	5c5b      	ldrb	r3, [r3, r1]
 800afc8:	4053      	eors	r3, r2
 800afca:	b2da      	uxtb	r2, r3
 800afcc:	7dbb      	ldrb	r3, [r7, #22]
 800afce:	4619      	mov	r1, r3
 800afd0:	4b58      	ldr	r3, [pc, #352]	; (800b134 <mix_sub_columns+0x288>)
 800afd2:	5c5b      	ldrb	r3, [r3, r1]
 800afd4:	4053      	eors	r3, r2
 800afd6:	b2d9      	uxtb	r1, r3
 800afd8:	7afb      	ldrb	r3, [r7, #11]
 800afda:	461a      	mov	r2, r3
 800afdc:	4b56      	ldr	r3, [pc, #344]	; (800b138 <mix_sub_columns+0x28c>)
 800afde:	5c9a      	ldrb	r2, [r3, r2]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	3305      	adds	r3, #5
 800afe4:	404a      	eors	r2, r1
 800afe6:	b2d2      	uxtb	r2, r2
 800afe8:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800afea:	7b3b      	ldrb	r3, [r7, #12]
 800afec:	461a      	mov	r2, r3
 800afee:	4b52      	ldr	r3, [pc, #328]	; (800b138 <mix_sub_columns+0x28c>)
 800aff0:	5c9a      	ldrb	r2, [r3, r2]
 800aff2:	7c7b      	ldrb	r3, [r7, #17]
 800aff4:	4619      	mov	r1, r3
 800aff6:	4b50      	ldr	r3, [pc, #320]	; (800b138 <mix_sub_columns+0x28c>)
 800aff8:	5c5b      	ldrb	r3, [r3, r1]
 800affa:	4053      	eors	r3, r2
 800affc:	b2da      	uxtb	r2, r3
 800affe:	7dbb      	ldrb	r3, [r7, #22]
 800b000:	4619      	mov	r1, r3
 800b002:	4b4b      	ldr	r3, [pc, #300]	; (800b130 <mix_sub_columns+0x284>)
 800b004:	5c5b      	ldrb	r3, [r3, r1]
 800b006:	4053      	eors	r3, r2
 800b008:	b2d9      	uxtb	r1, r3
 800b00a:	7afb      	ldrb	r3, [r7, #11]
 800b00c:	461a      	mov	r2, r3
 800b00e:	4b49      	ldr	r3, [pc, #292]	; (800b134 <mix_sub_columns+0x288>)
 800b010:	5c9a      	ldrb	r2, [r3, r2]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	3306      	adds	r3, #6
 800b016:	404a      	eors	r2, r1
 800b018:	b2d2      	uxtb	r2, r2
 800b01a:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b01c:	7b3b      	ldrb	r3, [r7, #12]
 800b01e:	461a      	mov	r2, r3
 800b020:	4b44      	ldr	r3, [pc, #272]	; (800b134 <mix_sub_columns+0x288>)
 800b022:	5c9a      	ldrb	r2, [r3, r2]
 800b024:	7c7b      	ldrb	r3, [r7, #17]
 800b026:	4619      	mov	r1, r3
 800b028:	4b43      	ldr	r3, [pc, #268]	; (800b138 <mix_sub_columns+0x28c>)
 800b02a:	5c5b      	ldrb	r3, [r3, r1]
 800b02c:	4053      	eors	r3, r2
 800b02e:	b2da      	uxtb	r2, r3
 800b030:	7dbb      	ldrb	r3, [r7, #22]
 800b032:	4619      	mov	r1, r3
 800b034:	4b40      	ldr	r3, [pc, #256]	; (800b138 <mix_sub_columns+0x28c>)
 800b036:	5c5b      	ldrb	r3, [r3, r1]
 800b038:	4053      	eors	r3, r2
 800b03a:	b2d9      	uxtb	r1, r3
 800b03c:	7afb      	ldrb	r3, [r7, #11]
 800b03e:	461a      	mov	r2, r3
 800b040:	4b3b      	ldr	r3, [pc, #236]	; (800b130 <mix_sub_columns+0x284>)
 800b042:	5c9a      	ldrb	r2, [r3, r2]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	3307      	adds	r3, #7
 800b048:	404a      	eors	r2, r1
 800b04a:	b2d2      	uxtb	r2, r2
 800b04c:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b04e:	7c3b      	ldrb	r3, [r7, #16]
 800b050:	461a      	mov	r2, r3
 800b052:	4b37      	ldr	r3, [pc, #220]	; (800b130 <mix_sub_columns+0x284>)
 800b054:	5c9a      	ldrb	r2, [r3, r2]
 800b056:	7d7b      	ldrb	r3, [r7, #21]
 800b058:	4619      	mov	r1, r3
 800b05a:	4b36      	ldr	r3, [pc, #216]	; (800b134 <mix_sub_columns+0x288>)
 800b05c:	5c5b      	ldrb	r3, [r3, r1]
 800b05e:	4053      	eors	r3, r2
 800b060:	b2da      	uxtb	r2, r3
 800b062:	7abb      	ldrb	r3, [r7, #10]
 800b064:	4619      	mov	r1, r3
 800b066:	4b34      	ldr	r3, [pc, #208]	; (800b138 <mix_sub_columns+0x28c>)
 800b068:	5c5b      	ldrb	r3, [r3, r1]
 800b06a:	4053      	eors	r3, r2
 800b06c:	b2d9      	uxtb	r1, r3
 800b06e:	7bfb      	ldrb	r3, [r7, #15]
 800b070:	461a      	mov	r2, r3
 800b072:	4b31      	ldr	r3, [pc, #196]	; (800b138 <mix_sub_columns+0x28c>)
 800b074:	5c9a      	ldrb	r2, [r3, r2]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	3308      	adds	r3, #8
 800b07a:	404a      	eors	r2, r1
 800b07c:	b2d2      	uxtb	r2, r2
 800b07e:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b080:	7c3b      	ldrb	r3, [r7, #16]
 800b082:	461a      	mov	r2, r3
 800b084:	4b2c      	ldr	r3, [pc, #176]	; (800b138 <mix_sub_columns+0x28c>)
 800b086:	5c9a      	ldrb	r2, [r3, r2]
 800b088:	7d7b      	ldrb	r3, [r7, #21]
 800b08a:	4619      	mov	r1, r3
 800b08c:	4b28      	ldr	r3, [pc, #160]	; (800b130 <mix_sub_columns+0x284>)
 800b08e:	5c5b      	ldrb	r3, [r3, r1]
 800b090:	4053      	eors	r3, r2
 800b092:	b2da      	uxtb	r2, r3
 800b094:	7abb      	ldrb	r3, [r7, #10]
 800b096:	4619      	mov	r1, r3
 800b098:	4b26      	ldr	r3, [pc, #152]	; (800b134 <mix_sub_columns+0x288>)
 800b09a:	5c5b      	ldrb	r3, [r3, r1]
 800b09c:	4053      	eors	r3, r2
 800b09e:	b2d9      	uxtb	r1, r3
 800b0a0:	7bfb      	ldrb	r3, [r7, #15]
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	4b24      	ldr	r3, [pc, #144]	; (800b138 <mix_sub_columns+0x28c>)
 800b0a6:	5c9a      	ldrb	r2, [r3, r2]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	3309      	adds	r3, #9
 800b0ac:	404a      	eors	r2, r1
 800b0ae:	b2d2      	uxtb	r2, r2
 800b0b0:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b0b2:	7c3b      	ldrb	r3, [r7, #16]
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	4b20      	ldr	r3, [pc, #128]	; (800b138 <mix_sub_columns+0x28c>)
 800b0b8:	5c9a      	ldrb	r2, [r3, r2]
 800b0ba:	7d7b      	ldrb	r3, [r7, #21]
 800b0bc:	4619      	mov	r1, r3
 800b0be:	4b1e      	ldr	r3, [pc, #120]	; (800b138 <mix_sub_columns+0x28c>)
 800b0c0:	5c5b      	ldrb	r3, [r3, r1]
 800b0c2:	4053      	eors	r3, r2
 800b0c4:	b2da      	uxtb	r2, r3
 800b0c6:	7abb      	ldrb	r3, [r7, #10]
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	4b19      	ldr	r3, [pc, #100]	; (800b130 <mix_sub_columns+0x284>)
 800b0cc:	5c5b      	ldrb	r3, [r3, r1]
 800b0ce:	4053      	eors	r3, r2
 800b0d0:	b2d9      	uxtb	r1, r3
 800b0d2:	7bfb      	ldrb	r3, [r7, #15]
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	4b17      	ldr	r3, [pc, #92]	; (800b134 <mix_sub_columns+0x288>)
 800b0d8:	5c9a      	ldrb	r2, [r3, r2]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	330a      	adds	r3, #10
 800b0de:	404a      	eors	r2, r1
 800b0e0:	b2d2      	uxtb	r2, r2
 800b0e2:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b0e4:	7c3b      	ldrb	r3, [r7, #16]
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	4b12      	ldr	r3, [pc, #72]	; (800b134 <mix_sub_columns+0x288>)
 800b0ea:	5c9a      	ldrb	r2, [r3, r2]
 800b0ec:	7d7b      	ldrb	r3, [r7, #21]
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	4b11      	ldr	r3, [pc, #68]	; (800b138 <mix_sub_columns+0x28c>)
 800b0f2:	5c5b      	ldrb	r3, [r3, r1]
 800b0f4:	4053      	eors	r3, r2
 800b0f6:	b2da      	uxtb	r2, r3
 800b0f8:	7abb      	ldrb	r3, [r7, #10]
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	4b0e      	ldr	r3, [pc, #56]	; (800b138 <mix_sub_columns+0x28c>)
 800b0fe:	5c5b      	ldrb	r3, [r3, r1]
 800b100:	4053      	eors	r3, r2
 800b102:	b2d9      	uxtb	r1, r3
 800b104:	7bfb      	ldrb	r3, [r7, #15]
 800b106:	461a      	mov	r2, r3
 800b108:	4b09      	ldr	r3, [pc, #36]	; (800b130 <mix_sub_columns+0x284>)
 800b10a:	5c9a      	ldrb	r2, [r3, r2]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	330b      	adds	r3, #11
 800b110:	404a      	eors	r2, r1
 800b112:	b2d2      	uxtb	r2, r2
 800b114:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b116:	7d3b      	ldrb	r3, [r7, #20]
 800b118:	461a      	mov	r2, r3
 800b11a:	4b05      	ldr	r3, [pc, #20]	; (800b130 <mix_sub_columns+0x284>)
 800b11c:	5c9a      	ldrb	r2, [r3, r2]
 800b11e:	7a7b      	ldrb	r3, [r7, #9]
 800b120:	4619      	mov	r1, r3
 800b122:	4b04      	ldr	r3, [pc, #16]	; (800b134 <mix_sub_columns+0x288>)
 800b124:	5c5b      	ldrb	r3, [r3, r1]
 800b126:	4053      	eors	r3, r2
 800b128:	b2da      	uxtb	r2, r3
 800b12a:	7bbb      	ldrb	r3, [r7, #14]
 800b12c:	4619      	mov	r1, r3
 800b12e:	e005      	b.n	800b13c <mix_sub_columns+0x290>
 800b130:	0801b7b0 	.word	0x0801b7b0
 800b134:	0801b8b0 	.word	0x0801b8b0
 800b138:	0801b6b0 	.word	0x0801b6b0
 800b13c:	4b2d      	ldr	r3, [pc, #180]	; (800b1f4 <mix_sub_columns+0x348>)
 800b13e:	5c5b      	ldrb	r3, [r3, r1]
 800b140:	4053      	eors	r3, r2
 800b142:	b2d9      	uxtb	r1, r3
 800b144:	7cfb      	ldrb	r3, [r7, #19]
 800b146:	461a      	mov	r2, r3
 800b148:	4b2a      	ldr	r3, [pc, #168]	; (800b1f4 <mix_sub_columns+0x348>)
 800b14a:	5c9a      	ldrb	r2, [r3, r2]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	330c      	adds	r3, #12
 800b150:	404a      	eors	r2, r1
 800b152:	b2d2      	uxtb	r2, r2
 800b154:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b156:	7d3b      	ldrb	r3, [r7, #20]
 800b158:	461a      	mov	r2, r3
 800b15a:	4b26      	ldr	r3, [pc, #152]	; (800b1f4 <mix_sub_columns+0x348>)
 800b15c:	5c9a      	ldrb	r2, [r3, r2]
 800b15e:	7a7b      	ldrb	r3, [r7, #9]
 800b160:	4619      	mov	r1, r3
 800b162:	4b25      	ldr	r3, [pc, #148]	; (800b1f8 <mix_sub_columns+0x34c>)
 800b164:	5c5b      	ldrb	r3, [r3, r1]
 800b166:	4053      	eors	r3, r2
 800b168:	b2da      	uxtb	r2, r3
 800b16a:	7bbb      	ldrb	r3, [r7, #14]
 800b16c:	4619      	mov	r1, r3
 800b16e:	4b23      	ldr	r3, [pc, #140]	; (800b1fc <mix_sub_columns+0x350>)
 800b170:	5c5b      	ldrb	r3, [r3, r1]
 800b172:	4053      	eors	r3, r2
 800b174:	b2d9      	uxtb	r1, r3
 800b176:	7cfb      	ldrb	r3, [r7, #19]
 800b178:	461a      	mov	r2, r3
 800b17a:	4b1e      	ldr	r3, [pc, #120]	; (800b1f4 <mix_sub_columns+0x348>)
 800b17c:	5c9a      	ldrb	r2, [r3, r2]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	330d      	adds	r3, #13
 800b182:	404a      	eors	r2, r1
 800b184:	b2d2      	uxtb	r2, r2
 800b186:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b188:	7d3b      	ldrb	r3, [r7, #20]
 800b18a:	461a      	mov	r2, r3
 800b18c:	4b19      	ldr	r3, [pc, #100]	; (800b1f4 <mix_sub_columns+0x348>)
 800b18e:	5c9a      	ldrb	r2, [r3, r2]
 800b190:	7a7b      	ldrb	r3, [r7, #9]
 800b192:	4619      	mov	r1, r3
 800b194:	4b17      	ldr	r3, [pc, #92]	; (800b1f4 <mix_sub_columns+0x348>)
 800b196:	5c5b      	ldrb	r3, [r3, r1]
 800b198:	4053      	eors	r3, r2
 800b19a:	b2da      	uxtb	r2, r3
 800b19c:	7bbb      	ldrb	r3, [r7, #14]
 800b19e:	4619      	mov	r1, r3
 800b1a0:	4b15      	ldr	r3, [pc, #84]	; (800b1f8 <mix_sub_columns+0x34c>)
 800b1a2:	5c5b      	ldrb	r3, [r3, r1]
 800b1a4:	4053      	eors	r3, r2
 800b1a6:	b2d9      	uxtb	r1, r3
 800b1a8:	7cfb      	ldrb	r3, [r7, #19]
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	4b13      	ldr	r3, [pc, #76]	; (800b1fc <mix_sub_columns+0x350>)
 800b1ae:	5c9a      	ldrb	r2, [r3, r2]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	330e      	adds	r3, #14
 800b1b4:	404a      	eors	r2, r1
 800b1b6:	b2d2      	uxtb	r2, r2
 800b1b8:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b1ba:	7d3b      	ldrb	r3, [r7, #20]
 800b1bc:	461a      	mov	r2, r3
 800b1be:	4b0f      	ldr	r3, [pc, #60]	; (800b1fc <mix_sub_columns+0x350>)
 800b1c0:	5c9a      	ldrb	r2, [r3, r2]
 800b1c2:	7a7b      	ldrb	r3, [r7, #9]
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	4b0b      	ldr	r3, [pc, #44]	; (800b1f4 <mix_sub_columns+0x348>)
 800b1c8:	5c5b      	ldrb	r3, [r3, r1]
 800b1ca:	4053      	eors	r3, r2
 800b1cc:	b2da      	uxtb	r2, r3
 800b1ce:	7bbb      	ldrb	r3, [r7, #14]
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	4b08      	ldr	r3, [pc, #32]	; (800b1f4 <mix_sub_columns+0x348>)
 800b1d4:	5c5b      	ldrb	r3, [r3, r1]
 800b1d6:	4053      	eors	r3, r2
 800b1d8:	b2d9      	uxtb	r1, r3
 800b1da:	7cfb      	ldrb	r3, [r7, #19]
 800b1dc:	461a      	mov	r2, r3
 800b1de:	4b06      	ldr	r3, [pc, #24]	; (800b1f8 <mix_sub_columns+0x34c>)
 800b1e0:	5c9a      	ldrb	r2, [r3, r2]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	330f      	adds	r3, #15
 800b1e6:	404a      	eors	r2, r1
 800b1e8:	b2d2      	uxtb	r2, r2
 800b1ea:	701a      	strb	r2, [r3, #0]
  }
 800b1ec:	bf00      	nop
 800b1ee:	3718      	adds	r7, #24
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	0801b6b0 	.word	0x0801b6b0
 800b1f8:	0801b7b0 	.word	0x0801b7b0
 800b1fc:	0801b8b0 	.word	0x0801b8b0

0800b200 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b086      	sub	sp, #24
 800b204:	af00      	add	r7, sp, #0
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	460b      	mov	r3, r1
 800b20a:	607a      	str	r2, [r7, #4]
 800b20c:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b20e:	7afb      	ldrb	r3, [r7, #11]
 800b210:	3b10      	subs	r3, #16
 800b212:	2b10      	cmp	r3, #16
 800b214:	bf8c      	ite	hi
 800b216:	2201      	movhi	r2, #1
 800b218:	2200      	movls	r2, #0
 800b21a:	b2d2      	uxtb	r2, r2
 800b21c:	2a00      	cmp	r2, #0
 800b21e:	d10d      	bne.n	800b23c <lorawan_aes_set_key+0x3c>
 800b220:	2201      	movs	r2, #1
 800b222:	fa02 f303 	lsl.w	r3, r2, r3
 800b226:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b22a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b22e:	2b00      	cmp	r3, #0
 800b230:	bf14      	ite	ne
 800b232:	2301      	movne	r3, #1
 800b234:	2300      	moveq	r3, #0
 800b236:	b2db      	uxtb	r3, r3
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d105      	bne.n	800b248 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800b244:	23ff      	movs	r3, #255	; 0xff
 800b246:	e0b2      	b.n	800b3ae <lorawan_aes_set_key+0x1ae>
        break;
 800b248:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	7afa      	ldrb	r2, [r7, #11]
 800b24e:	68f9      	ldr	r1, [r7, #12]
 800b250:	4618      	mov	r0, r3
 800b252:	f7ff fbfa 	bl	800aa4a <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b256:	7afb      	ldrb	r3, [r7, #11]
 800b258:	331c      	adds	r3, #28
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b260:	7c7b      	ldrb	r3, [r7, #17]
 800b262:	091b      	lsrs	r3, r3, #4
 800b264:	b2db      	uxtb	r3, r3
 800b266:	3b01      	subs	r3, #1
 800b268:	b2da      	uxtb	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b270:	7afb      	ldrb	r3, [r7, #11]
 800b272:	75fb      	strb	r3, [r7, #23]
 800b274:	2301      	movs	r3, #1
 800b276:	75bb      	strb	r3, [r7, #22]
 800b278:	e093      	b.n	800b3a2 <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b27a:	7dfb      	ldrb	r3, [r7, #23]
 800b27c:	3b04      	subs	r3, #4
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	5cd3      	ldrb	r3, [r2, r3]
 800b282:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b284:	7dfb      	ldrb	r3, [r7, #23]
 800b286:	3b03      	subs	r3, #3
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	5cd3      	ldrb	r3, [r2, r3]
 800b28c:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b28e:	7dfb      	ldrb	r3, [r7, #23]
 800b290:	3b02      	subs	r3, #2
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	5cd3      	ldrb	r3, [r2, r3]
 800b296:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b298:	7dfb      	ldrb	r3, [r7, #23]
 800b29a:	3b01      	subs	r3, #1
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	5cd3      	ldrb	r3, [r2, r3]
 800b2a0:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b2a2:	7dfb      	ldrb	r3, [r7, #23]
 800b2a4:	7afa      	ldrb	r2, [r7, #11]
 800b2a6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b2aa:	fb01 f202 	mul.w	r2, r1, r2
 800b2ae:	1a9b      	subs	r3, r3, r2
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d127      	bne.n	800b306 <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800b2b6:	7d7b      	ldrb	r3, [r7, #21]
 800b2b8:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800b2ba:	7d3b      	ldrb	r3, [r7, #20]
 800b2bc:	4a3e      	ldr	r2, [pc, #248]	; (800b3b8 <lorawan_aes_set_key+0x1b8>)
 800b2be:	5cd2      	ldrb	r2, [r2, r3]
 800b2c0:	7dbb      	ldrb	r3, [r7, #22]
 800b2c2:	4053      	eors	r3, r2
 800b2c4:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800b2c6:	7cfb      	ldrb	r3, [r7, #19]
 800b2c8:	4a3b      	ldr	r2, [pc, #236]	; (800b3b8 <lorawan_aes_set_key+0x1b8>)
 800b2ca:	5cd3      	ldrb	r3, [r2, r3]
 800b2cc:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800b2ce:	7cbb      	ldrb	r3, [r7, #18]
 800b2d0:	4a39      	ldr	r2, [pc, #228]	; (800b3b8 <lorawan_aes_set_key+0x1b8>)
 800b2d2:	5cd3      	ldrb	r3, [r2, r3]
 800b2d4:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800b2d6:	7c3b      	ldrb	r3, [r7, #16]
 800b2d8:	4a37      	ldr	r2, [pc, #220]	; (800b3b8 <lorawan_aes_set_key+0x1b8>)
 800b2da:	5cd3      	ldrb	r3, [r2, r3]
 800b2dc:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800b2de:	7dbb      	ldrb	r3, [r7, #22]
 800b2e0:	005b      	lsls	r3, r3, #1
 800b2e2:	b25a      	sxtb	r2, r3
 800b2e4:	7dbb      	ldrb	r3, [r7, #22]
 800b2e6:	09db      	lsrs	r3, r3, #7
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	0049      	lsls	r1, r1, #1
 800b2ee:	440b      	add	r3, r1
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	00c8      	lsls	r0, r1, #3
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	440b      	add	r3, r1
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	b25b      	sxtb	r3, r3
 800b2fe:	4053      	eors	r3, r2
 800b300:	b25b      	sxtb	r3, r3
 800b302:	75bb      	strb	r3, [r7, #22]
 800b304:	e01c      	b.n	800b340 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b306:	7afb      	ldrb	r3, [r7, #11]
 800b308:	2b18      	cmp	r3, #24
 800b30a:	d919      	bls.n	800b340 <lorawan_aes_set_key+0x140>
 800b30c:	7dfb      	ldrb	r3, [r7, #23]
 800b30e:	7afa      	ldrb	r2, [r7, #11]
 800b310:	fbb3 f1f2 	udiv	r1, r3, r2
 800b314:	fb01 f202 	mul.w	r2, r1, r2
 800b318:	1a9b      	subs	r3, r3, r2
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	2b10      	cmp	r3, #16
 800b31e:	d10f      	bne.n	800b340 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800b320:	7d7b      	ldrb	r3, [r7, #21]
 800b322:	4a25      	ldr	r2, [pc, #148]	; (800b3b8 <lorawan_aes_set_key+0x1b8>)
 800b324:	5cd3      	ldrb	r3, [r2, r3]
 800b326:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b328:	7d3b      	ldrb	r3, [r7, #20]
 800b32a:	4a23      	ldr	r2, [pc, #140]	; (800b3b8 <lorawan_aes_set_key+0x1b8>)
 800b32c:	5cd3      	ldrb	r3, [r2, r3]
 800b32e:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b330:	7cfb      	ldrb	r3, [r7, #19]
 800b332:	4a21      	ldr	r2, [pc, #132]	; (800b3b8 <lorawan_aes_set_key+0x1b8>)
 800b334:	5cd3      	ldrb	r3, [r2, r3]
 800b336:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b338:	7cbb      	ldrb	r3, [r7, #18]
 800b33a:	4a1f      	ldr	r2, [pc, #124]	; (800b3b8 <lorawan_aes_set_key+0x1b8>)
 800b33c:	5cd3      	ldrb	r3, [r2, r3]
 800b33e:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b340:	7dfa      	ldrb	r2, [r7, #23]
 800b342:	7afb      	ldrb	r3, [r7, #11]
 800b344:	1ad3      	subs	r3, r2, r3
 800b346:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b348:	7c3b      	ldrb	r3, [r7, #16]
 800b34a:	687a      	ldr	r2, [r7, #4]
 800b34c:	5cd1      	ldrb	r1, [r2, r3]
 800b34e:	7dfb      	ldrb	r3, [r7, #23]
 800b350:	7d7a      	ldrb	r2, [r7, #21]
 800b352:	404a      	eors	r2, r1
 800b354:	b2d1      	uxtb	r1, r2
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b35a:	7c3b      	ldrb	r3, [r7, #16]
 800b35c:	3301      	adds	r3, #1
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	5cd1      	ldrb	r1, [r2, r3]
 800b362:	7dfb      	ldrb	r3, [r7, #23]
 800b364:	3301      	adds	r3, #1
 800b366:	7d3a      	ldrb	r2, [r7, #20]
 800b368:	404a      	eors	r2, r1
 800b36a:	b2d1      	uxtb	r1, r2
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b370:	7c3b      	ldrb	r3, [r7, #16]
 800b372:	3302      	adds	r3, #2
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	5cd1      	ldrb	r1, [r2, r3]
 800b378:	7dfb      	ldrb	r3, [r7, #23]
 800b37a:	3302      	adds	r3, #2
 800b37c:	7cfa      	ldrb	r2, [r7, #19]
 800b37e:	404a      	eors	r2, r1
 800b380:	b2d1      	uxtb	r1, r2
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b386:	7c3b      	ldrb	r3, [r7, #16]
 800b388:	3303      	adds	r3, #3
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	5cd1      	ldrb	r1, [r2, r3]
 800b38e:	7dfb      	ldrb	r3, [r7, #23]
 800b390:	3303      	adds	r3, #3
 800b392:	7cba      	ldrb	r2, [r7, #18]
 800b394:	404a      	eors	r2, r1
 800b396:	b2d1      	uxtb	r1, r2
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b39c:	7dfb      	ldrb	r3, [r7, #23]
 800b39e:	3304      	adds	r3, #4
 800b3a0:	75fb      	strb	r3, [r7, #23]
 800b3a2:	7dfa      	ldrb	r2, [r7, #23]
 800b3a4:	7c7b      	ldrb	r3, [r7, #17]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	f4ff af67 	bcc.w	800b27a <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800b3ac:	2300      	movs	r3, #0
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3718      	adds	r7, #24
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	0801b6b0 	.word	0x0801b6b0

0800b3bc <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b08a      	sub	sp, #40	; 0x28
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d038      	beq.n	800b444 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	f107 0314 	add.w	r3, r7, #20
 800b3d8:	68f9      	ldr	r1, [r7, #12]
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7ff fc07 	bl	800abee <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b3e6:	e014      	b.n	800b412 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800b3e8:	f107 0314 	add.w	r3, r7, #20
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7ff fd5d 	bl	800aeac <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b3f8:	0112      	lsls	r2, r2, #4
 800b3fa:	441a      	add	r2, r3
 800b3fc:	f107 0314 	add.w	r3, r7, #20
 800b400:	4611      	mov	r1, r2
 800b402:	4618      	mov	r0, r3
 800b404:	f7ff fcab 	bl	800ad5e <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800b408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b40c:	3301      	adds	r3, #1
 800b40e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b418:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d3e3      	bcc.n	800b3e8 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800b420:	f107 0314 	add.w	r3, r7, #20
 800b424:	4618      	mov	r0, r3
 800b426:	f7ff fca7 	bl	800ad78 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b430:	0112      	lsls	r2, r2, #4
 800b432:	441a      	add	r2, r3
 800b434:	f107 0314 	add.w	r3, r7, #20
 800b438:	4619      	mov	r1, r3
 800b43a:	68b8      	ldr	r0, [r7, #8]
 800b43c:	f7ff fbd7 	bl	800abee <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800b440:	2300      	movs	r3, #0
 800b442:	e000      	b.n	800b446 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800b444:	23ff      	movs	r3, #255	; 0xff
}
 800b446:	4618      	mov	r0, r3
 800b448:	3728      	adds	r7, #40	; 0x28
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
	...

0800b450 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800b450:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b452:	b09d      	sub	sp, #116	; 0x74
 800b454:	af10      	add	r7, sp, #64	; 0x40
 800b456:	4603      	mov	r3, r0
 800b458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800b45c:	2306      	movs	r3, #6
 800b45e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800b462:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b466:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b46a:	4611      	mov	r1, r2
 800b46c:	4618      	mov	r0, r3
 800b46e:	f000 f9a7 	bl	800b7c0 <SecureElementGetKeyByID>
 800b472:	4603      	mov	r3, r0
 800b474:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800b478:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	f040 80b0 	bne.w	800b5e2 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800b482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b486:	2b00      	cmp	r3, #0
 800b488:	d106      	bne.n	800b498 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800b48a:	4b58      	ldr	r3, [pc, #352]	; (800b5ec <PrintKey+0x19c>)
 800b48c:	2200      	movs	r2, #0
 800b48e:	2100      	movs	r1, #0
 800b490:	2002      	movs	r0, #2
 800b492:	f00f fae1 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
 800b496:	e056      	b.n	800b546 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800b498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d106      	bne.n	800b4ae <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800b4a0:	4b53      	ldr	r3, [pc, #332]	; (800b5f0 <PrintKey+0x1a0>)
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	2100      	movs	r1, #0
 800b4a6:	2002      	movs	r0, #2
 800b4a8:	f00f fad6 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
 800b4ac:	e04b      	b.n	800b546 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800b4ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4b2:	2b03      	cmp	r3, #3
 800b4b4:	d106      	bne.n	800b4c4 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800b4b6:	4b4f      	ldr	r3, [pc, #316]	; (800b5f4 <PrintKey+0x1a4>)
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	2100      	movs	r1, #0
 800b4bc:	2002      	movs	r0, #2
 800b4be:	f00f facb 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
 800b4c2:	e040      	b.n	800b546 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800b4c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	d106      	bne.n	800b4da <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800b4cc:	4b4a      	ldr	r3, [pc, #296]	; (800b5f8 <PrintKey+0x1a8>)
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	2002      	movs	r0, #2
 800b4d4:	f00f fac0 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
 800b4d8:	e035      	b.n	800b546 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800b4da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4de:	2b04      	cmp	r3, #4
 800b4e0:	d106      	bne.n	800b4f0 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800b4e2:	4b46      	ldr	r3, [pc, #280]	; (800b5fc <PrintKey+0x1ac>)
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	2002      	movs	r0, #2
 800b4ea:	f00f fab5 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
 800b4ee:	e02a      	b.n	800b546 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800b4f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4f4:	2b7f      	cmp	r3, #127	; 0x7f
 800b4f6:	d106      	bne.n	800b506 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800b4f8:	4b41      	ldr	r3, [pc, #260]	; (800b600 <PrintKey+0x1b0>)
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	2002      	movs	r0, #2
 800b500:	f00f faaa 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
 800b504:	e01f      	b.n	800b546 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800b506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b50a:	2b80      	cmp	r3, #128	; 0x80
 800b50c:	d106      	bne.n	800b51c <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800b50e:	4b3d      	ldr	r3, [pc, #244]	; (800b604 <PrintKey+0x1b4>)
 800b510:	2200      	movs	r2, #0
 800b512:	2100      	movs	r1, #0
 800b514:	2002      	movs	r0, #2
 800b516:	f00f fa9f 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
 800b51a:	e014      	b.n	800b546 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800b51c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b520:	2b81      	cmp	r3, #129	; 0x81
 800b522:	d106      	bne.n	800b532 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800b524:	4b38      	ldr	r3, [pc, #224]	; (800b608 <PrintKey+0x1b8>)
 800b526:	2200      	movs	r2, #0
 800b528:	2100      	movs	r1, #0
 800b52a:	2002      	movs	r0, #2
 800b52c:	f00f fa94 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
 800b530:	e009      	b.n	800b546 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800b532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b536:	2b82      	cmp	r3, #130	; 0x82
 800b538:	d105      	bne.n	800b546 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800b53a:	4b34      	ldr	r3, [pc, #208]	; (800b60c <PrintKey+0x1bc>)
 800b53c:	2200      	movs	r2, #0
 800b53e:	2100      	movs	r1, #0
 800b540:	2002      	movs	r0, #2
 800b542:	f00f fa89 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b548:	785b      	ldrb	r3, [r3, #1]
 800b54a:	4618      	mov	r0, r3
 800b54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54e:	789b      	ldrb	r3, [r3, #2]
 800b550:	461c      	mov	r4, r3
 800b552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b554:	78db      	ldrb	r3, [r3, #3]
 800b556:	461d      	mov	r5, r3
 800b558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55a:	791b      	ldrb	r3, [r3, #4]
 800b55c:	461e      	mov	r6, r3
 800b55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b560:	795b      	ldrb	r3, [r3, #5]
 800b562:	623b      	str	r3, [r7, #32]
 800b564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b566:	799b      	ldrb	r3, [r3, #6]
 800b568:	61fb      	str	r3, [r7, #28]
 800b56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56c:	79db      	ldrb	r3, [r3, #7]
 800b56e:	61bb      	str	r3, [r7, #24]
 800b570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b572:	7a1b      	ldrb	r3, [r3, #8]
 800b574:	617b      	str	r3, [r7, #20]
 800b576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b578:	7a5b      	ldrb	r3, [r3, #9]
 800b57a:	613b      	str	r3, [r7, #16]
 800b57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57e:	7a9b      	ldrb	r3, [r3, #10]
 800b580:	60fb      	str	r3, [r7, #12]
 800b582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b584:	7adb      	ldrb	r3, [r3, #11]
 800b586:	60bb      	str	r3, [r7, #8]
 800b588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58a:	7b1b      	ldrb	r3, [r3, #12]
 800b58c:	607b      	str	r3, [r7, #4]
 800b58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b590:	7b5b      	ldrb	r3, [r3, #13]
 800b592:	603b      	str	r3, [r7, #0]
 800b594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b596:	7b9b      	ldrb	r3, [r3, #14]
 800b598:	4619      	mov	r1, r3
 800b59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59c:	7bdb      	ldrb	r3, [r3, #15]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a2:	7c1b      	ldrb	r3, [r3, #16]
 800b5a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5a6:	920e      	str	r2, [sp, #56]	; 0x38
 800b5a8:	910d      	str	r1, [sp, #52]	; 0x34
 800b5aa:	683a      	ldr	r2, [r7, #0]
 800b5ac:	920c      	str	r2, [sp, #48]	; 0x30
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	920b      	str	r2, [sp, #44]	; 0x2c
 800b5b2:	68ba      	ldr	r2, [r7, #8]
 800b5b4:	920a      	str	r2, [sp, #40]	; 0x28
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	9209      	str	r2, [sp, #36]	; 0x24
 800b5ba:	693a      	ldr	r2, [r7, #16]
 800b5bc:	9208      	str	r2, [sp, #32]
 800b5be:	697a      	ldr	r2, [r7, #20]
 800b5c0:	9207      	str	r2, [sp, #28]
 800b5c2:	69ba      	ldr	r2, [r7, #24]
 800b5c4:	9206      	str	r2, [sp, #24]
 800b5c6:	69fa      	ldr	r2, [r7, #28]
 800b5c8:	9205      	str	r2, [sp, #20]
 800b5ca:	6a3b      	ldr	r3, [r7, #32]
 800b5cc:	9304      	str	r3, [sp, #16]
 800b5ce:	9603      	str	r6, [sp, #12]
 800b5d0:	9502      	str	r5, [sp, #8]
 800b5d2:	9401      	str	r4, [sp, #4]
 800b5d4:	9000      	str	r0, [sp, #0]
 800b5d6:	4b0e      	ldr	r3, [pc, #56]	; (800b610 <PrintKey+0x1c0>)
 800b5d8:	2200      	movs	r2, #0
 800b5da:	2100      	movs	r1, #0
 800b5dc:	2002      	movs	r0, #2
 800b5de:	f00f fa3b 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800b5e2:	bf00      	nop
 800b5e4:	3734      	adds	r7, #52	; 0x34
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	0801b130 	.word	0x0801b130
 800b5f0:	0801b148 	.word	0x0801b148
 800b5f4:	0801b160 	.word	0x0801b160
 800b5f8:	0801b178 	.word	0x0801b178
 800b5fc:	0801b190 	.word	0x0801b190
 800b600:	0801b1a8 	.word	0x0801b1a8
 800b604:	0801b1c0 	.word	0x0801b1c0
 800b608:	0801b1d8 	.word	0x0801b1d8
 800b60c:	0801b1f0 	.word	0x0801b1f0
 800b610:	0801b208 	.word	0x0801b208

0800b614 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
 800b61a:	4603      	mov	r3, r0
 800b61c:	6039      	str	r1, [r7, #0]
 800b61e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b620:	2300      	movs	r3, #0
 800b622:	73fb      	strb	r3, [r7, #15]
 800b624:	e01a      	b.n	800b65c <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b626:	4b12      	ldr	r3, [pc, #72]	; (800b670 <GetKeyByID+0x5c>)
 800b628:	6819      	ldr	r1, [r3, #0]
 800b62a:	7bfa      	ldrb	r2, [r7, #15]
 800b62c:	4613      	mov	r3, r2
 800b62e:	011b      	lsls	r3, r3, #4
 800b630:	4413      	add	r3, r2
 800b632:	440b      	add	r3, r1
 800b634:	3310      	adds	r3, #16
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	79fa      	ldrb	r2, [r7, #7]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d10b      	bne.n	800b656 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800b63e:	4b0c      	ldr	r3, [pc, #48]	; (800b670 <GetKeyByID+0x5c>)
 800b640:	6819      	ldr	r1, [r3, #0]
 800b642:	7bfa      	ldrb	r2, [r7, #15]
 800b644:	4613      	mov	r3, r2
 800b646:	011b      	lsls	r3, r3, #4
 800b648:	4413      	add	r3, r2
 800b64a:	3310      	adds	r3, #16
 800b64c:	18ca      	adds	r2, r1, r3
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b652:	2300      	movs	r3, #0
 800b654:	e006      	b.n	800b664 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b656:	7bfb      	ldrb	r3, [r7, #15]
 800b658:	3301      	adds	r3, #1
 800b65a:	73fb      	strb	r3, [r7, #15]
 800b65c:	7bfb      	ldrb	r3, [r7, #15]
 800b65e:	2b09      	cmp	r3, #9
 800b660:	d9e1      	bls.n	800b626 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b662:	2303      	movs	r3, #3
}
 800b664:	4618      	mov	r0, r3
 800b666:	3714      	adds	r7, #20
 800b668:	46bd      	mov	sp, r7
 800b66a:	bc80      	pop	{r7}
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	2000050c 	.word	0x2000050c

0800b674 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800b674:	b590      	push	{r4, r7, lr}
 800b676:	b0d1      	sub	sp, #324	; 0x144
 800b678:	af00      	add	r7, sp, #0
 800b67a:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800b67e:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800b682:	6020      	str	r0, [r4, #0]
 800b684:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800b688:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800b68c:	6001      	str	r1, [r0, #0]
 800b68e:	4619      	mov	r1, r3
 800b690:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b694:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800b698:	801a      	strh	r2, [r3, #0]
 800b69a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b69e:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800b6a2:	460a      	mov	r2, r1
 800b6a4:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800b6a6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b6aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d003      	beq.n	800b6bc <ComputeCmac+0x48>
 800b6b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d101      	bne.n	800b6c0 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b6bc:	2302      	movs	r3, #2
 800b6be:	e05c      	b.n	800b77a <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800b6c0:	f107 0314 	add.w	r3, r7, #20
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7fe ff1b 	bl	800a500 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800b6ca:	f107 0210 	add.w	r2, r7, #16
 800b6ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b6d2:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	4611      	mov	r1, r2
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7ff ff9a 	bl	800b614 <GetKeyByID>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800b6e6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d143      	bne.n	800b776 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800b6ee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b6f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	1c5a      	adds	r2, r3, #1
 800b6fa:	f107 0314 	add.w	r3, r7, #20
 800b6fe:	4611      	mov	r1, r2
 800b700:	4618      	mov	r0, r3
 800b702:	f7fe ff16 	bl	800a532 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800b706:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b70a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d009      	beq.n	800b728 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800b714:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b718:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800b71c:	f107 0014 	add.w	r0, r7, #20
 800b720:	2210      	movs	r2, #16
 800b722:	6819      	ldr	r1, [r3, #0]
 800b724:	f7fe ff14 	bl	800a550 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800b728:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b72c:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800b730:	881a      	ldrh	r2, [r3, #0]
 800b732:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b736:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b73a:	f107 0014 	add.w	r0, r7, #20
 800b73e:	6819      	ldr	r1, [r3, #0]
 800b740:	f7fe ff06 	bl	800a550 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800b744:	f107 0214 	add.w	r2, r7, #20
 800b748:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800b74c:	4611      	mov	r1, r2
 800b74e:	4618      	mov	r0, r3
 800b750:	f7fe ffc0 	bl	800a6d4 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800b754:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800b758:	061a      	lsls	r2, r3, #24
 800b75a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800b75e:	041b      	lsls	r3, r3, #16
 800b760:	431a      	orrs	r2, r3
 800b762:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800b766:	021b      	lsls	r3, r3, #8
 800b768:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800b76a:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800b76e:	431a      	orrs	r2, r3
 800b770:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800b774:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800b776:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800b780:	46bd      	mov	sp, r7
 800b782:	bd90      	pop	{r4, r7, pc}

0800b784 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d101      	bne.n	800b798 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b794:	2302      	movs	r3, #2
 800b796:	e00a      	b.n	800b7ae <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800b798:	4a07      	ldr	r2, [pc, #28]	; (800b7b8 <SecureElementInit+0x34>)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800b79e:	4b06      	ldr	r3, [pc, #24]	; (800b7b8 <SecureElementInit+0x34>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	22c0      	movs	r2, #192	; 0xc0
 800b7a4:	4905      	ldr	r1, [pc, #20]	; (800b7bc <SecureElementInit+0x38>)
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f00a fe01 	bl	80163ae <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800b7ac:	2300      	movs	r3, #0
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3708      	adds	r7, #8
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	2000050c 	.word	0x2000050c
 800b7bc:	0801bb40 	.word	0x0801bb40

0800b7c0 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	6039      	str	r1, [r7, #0]
 800b7ca:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	73fb      	strb	r3, [r7, #15]
 800b7d0:	e01a      	b.n	800b808 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800b7d2:	4b12      	ldr	r3, [pc, #72]	; (800b81c <SecureElementGetKeyByID+0x5c>)
 800b7d4:	6819      	ldr	r1, [r3, #0]
 800b7d6:	7bfa      	ldrb	r2, [r7, #15]
 800b7d8:	4613      	mov	r3, r2
 800b7da:	011b      	lsls	r3, r3, #4
 800b7dc:	4413      	add	r3, r2
 800b7de:	440b      	add	r3, r1
 800b7e0:	3310      	adds	r3, #16
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	79fa      	ldrb	r2, [r7, #7]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d10b      	bne.n	800b802 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800b7ea:	4b0c      	ldr	r3, [pc, #48]	; (800b81c <SecureElementGetKeyByID+0x5c>)
 800b7ec:	6819      	ldr	r1, [r3, #0]
 800b7ee:	7bfa      	ldrb	r2, [r7, #15]
 800b7f0:	4613      	mov	r3, r2
 800b7f2:	011b      	lsls	r3, r3, #4
 800b7f4:	4413      	add	r3, r2
 800b7f6:	3310      	adds	r3, #16
 800b7f8:	18ca      	adds	r2, r1, r3
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b7fe:	2300      	movs	r3, #0
 800b800:	e006      	b.n	800b810 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800b802:	7bfb      	ldrb	r3, [r7, #15]
 800b804:	3301      	adds	r3, #1
 800b806:	73fb      	strb	r3, [r7, #15]
 800b808:	7bfb      	ldrb	r3, [r7, #15]
 800b80a:	2b09      	cmp	r3, #9
 800b80c:	d9e1      	bls.n	800b7d2 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b80e:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800b810:	4618      	mov	r0, r3
 800b812:	3714      	adds	r7, #20
 800b814:	46bd      	mov	sp, r7
 800b816:	bc80      	pop	{r7}
 800b818:	4770      	bx	lr
 800b81a:	bf00      	nop
 800b81c:	2000050c 	.word	0x2000050c

0800b820 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800b820:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b822:	b08b      	sub	sp, #44	; 0x2c
 800b824:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800b826:	4b3f      	ldr	r3, [pc, #252]	; (800b924 <SecureElementPrintKeys+0x104>)
 800b828:	2200      	movs	r2, #0
 800b82a:	2100      	movs	r1, #0
 800b82c:	2002      	movs	r0, #2
 800b82e:	f00f f913 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800b832:	2000      	movs	r0, #0
 800b834:	f7ff fe0c 	bl	800b450 <PrintKey>
    PrintKey(NWK_KEY);
 800b838:	2001      	movs	r0, #1
 800b83a:	f7ff fe09 	bl	800b450 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800b83e:	4b3a      	ldr	r3, [pc, #232]	; (800b928 <SecureElementPrintKeys+0x108>)
 800b840:	2200      	movs	r2, #0
 800b842:	2100      	movs	r1, #0
 800b844:	2002      	movs	r0, #2
 800b846:	f00f f907 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800b84a:	2003      	movs	r0, #3
 800b84c:	f7ff fe00 	bl	800b450 <PrintKey>
    PrintKey(NWK_S_KEY);
 800b850:	2002      	movs	r0, #2
 800b852:	f7ff fdfd 	bl	800b450 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800b856:	4b35      	ldr	r3, [pc, #212]	; (800b92c <SecureElementPrintKeys+0x10c>)
 800b858:	2200      	movs	r2, #0
 800b85a:	2100      	movs	r1, #0
 800b85c:	2002      	movs	r0, #2
 800b85e:	f00f f8fb 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b862:	4b33      	ldr	r3, [pc, #204]	; (800b930 <SecureElementPrintKeys+0x110>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	461a      	mov	r2, r3
 800b86a:	4b31      	ldr	r3, [pc, #196]	; (800b930 <SecureElementPrintKeys+0x110>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	785b      	ldrb	r3, [r3, #1]
 800b870:	4619      	mov	r1, r3
 800b872:	4b2f      	ldr	r3, [pc, #188]	; (800b930 <SecureElementPrintKeys+0x110>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	789b      	ldrb	r3, [r3, #2]
 800b878:	4618      	mov	r0, r3
 800b87a:	4b2d      	ldr	r3, [pc, #180]	; (800b930 <SecureElementPrintKeys+0x110>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	78db      	ldrb	r3, [r3, #3]
 800b880:	461c      	mov	r4, r3
 800b882:	4b2b      	ldr	r3, [pc, #172]	; (800b930 <SecureElementPrintKeys+0x110>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	791b      	ldrb	r3, [r3, #4]
 800b888:	461d      	mov	r5, r3
 800b88a:	4b29      	ldr	r3, [pc, #164]	; (800b930 <SecureElementPrintKeys+0x110>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	795b      	ldrb	r3, [r3, #5]
 800b890:	461e      	mov	r6, r3
 800b892:	4b27      	ldr	r3, [pc, #156]	; (800b930 <SecureElementPrintKeys+0x110>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	799b      	ldrb	r3, [r3, #6]
 800b898:	607b      	str	r3, [r7, #4]
 800b89a:	4b25      	ldr	r3, [pc, #148]	; (800b930 <SecureElementPrintKeys+0x110>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	79db      	ldrb	r3, [r3, #7]
 800b8a0:	9307      	str	r3, [sp, #28]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	9306      	str	r3, [sp, #24]
 800b8a6:	9605      	str	r6, [sp, #20]
 800b8a8:	9504      	str	r5, [sp, #16]
 800b8aa:	9403      	str	r4, [sp, #12]
 800b8ac:	9002      	str	r0, [sp, #8]
 800b8ae:	9101      	str	r1, [sp, #4]
 800b8b0:	9200      	str	r2, [sp, #0]
 800b8b2:	4b20      	ldr	r3, [pc, #128]	; (800b934 <SecureElementPrintKeys+0x114>)
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	2100      	movs	r1, #0
 800b8b8:	2002      	movs	r0, #2
 800b8ba:	f00f f8cd 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b8be:	4b1c      	ldr	r3, [pc, #112]	; (800b930 <SecureElementPrintKeys+0x110>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	7a1b      	ldrb	r3, [r3, #8]
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	4b1a      	ldr	r3, [pc, #104]	; (800b930 <SecureElementPrintKeys+0x110>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	7a5b      	ldrb	r3, [r3, #9]
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	4b18      	ldr	r3, [pc, #96]	; (800b930 <SecureElementPrintKeys+0x110>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	7a9b      	ldrb	r3, [r3, #10]
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	4b16      	ldr	r3, [pc, #88]	; (800b930 <SecureElementPrintKeys+0x110>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	7adb      	ldrb	r3, [r3, #11]
 800b8dc:	461c      	mov	r4, r3
 800b8de:	4b14      	ldr	r3, [pc, #80]	; (800b930 <SecureElementPrintKeys+0x110>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	7b1b      	ldrb	r3, [r3, #12]
 800b8e4:	461d      	mov	r5, r3
 800b8e6:	4b12      	ldr	r3, [pc, #72]	; (800b930 <SecureElementPrintKeys+0x110>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	7b5b      	ldrb	r3, [r3, #13]
 800b8ec:	461e      	mov	r6, r3
 800b8ee:	4b10      	ldr	r3, [pc, #64]	; (800b930 <SecureElementPrintKeys+0x110>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	7b9b      	ldrb	r3, [r3, #14]
 800b8f4:	607b      	str	r3, [r7, #4]
 800b8f6:	4b0e      	ldr	r3, [pc, #56]	; (800b930 <SecureElementPrintKeys+0x110>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	7bdb      	ldrb	r3, [r3, #15]
 800b8fc:	9307      	str	r3, [sp, #28]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	9306      	str	r3, [sp, #24]
 800b902:	9605      	str	r6, [sp, #20]
 800b904:	9504      	str	r5, [sp, #16]
 800b906:	9403      	str	r4, [sp, #12]
 800b908:	9002      	str	r0, [sp, #8]
 800b90a:	9101      	str	r1, [sp, #4]
 800b90c:	9200      	str	r2, [sp, #0]
 800b90e:	4b0a      	ldr	r3, [pc, #40]	; (800b938 <SecureElementPrintKeys+0x118>)
 800b910:	2200      	movs	r2, #0
 800b912:	2100      	movs	r1, #0
 800b914:	2002      	movs	r0, #2
 800b916:	f00f f89f 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800b91a:	2300      	movs	r3, #0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	370c      	adds	r7, #12
 800b920:	46bd      	mov	sp, r7
 800b922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b924:	0801b25c 	.word	0x0801b25c
 800b928:	0801b274 	.word	0x0801b274
 800b92c:	0801b28c 	.word	0x0801b28c
 800b930:	2000050c 	.word	0x2000050c
 800b934:	0801b2a4 	.word	0x0801b2a4
 800b938:	0801b2e4 	.word	0x0801b2e4

0800b93c <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800b940:	2004      	movs	r0, #4
 800b942:	f7ff fd85 	bl	800b450 <PrintKey>
    PrintKey(MC_KE_KEY);
 800b946:	207f      	movs	r0, #127	; 0x7f
 800b948:	f7ff fd82 	bl	800b450 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800b94c:	2002      	movs	r0, #2
 800b94e:	f7ff fd7f 	bl	800b450 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800b952:	2003      	movs	r0, #3
 800b954:	f7ff fd7c 	bl	800b450 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800b958:	2300      	movs	r3, #0
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	bd80      	pop	{r7, pc}
	...

0800b960 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b088      	sub	sp, #32
 800b964:	af00      	add	r7, sp, #0
 800b966:	4603      	mov	r3, r0
 800b968:	6039      	str	r1, [r7, #0]
 800b96a:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d101      	bne.n	800b976 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b972:	2302      	movs	r3, #2
 800b974:	e04c      	b.n	800ba10 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b976:	2300      	movs	r3, #0
 800b978:	77fb      	strb	r3, [r7, #31]
 800b97a:	e045      	b.n	800ba08 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b97c:	4b26      	ldr	r3, [pc, #152]	; (800ba18 <SecureElementSetKey+0xb8>)
 800b97e:	6819      	ldr	r1, [r3, #0]
 800b980:	7ffa      	ldrb	r2, [r7, #31]
 800b982:	4613      	mov	r3, r2
 800b984:	011b      	lsls	r3, r3, #4
 800b986:	4413      	add	r3, r2
 800b988:	440b      	add	r3, r1
 800b98a:	3310      	adds	r3, #16
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	79fa      	ldrb	r2, [r7, #7]
 800b990:	429a      	cmp	r2, r3
 800b992:	d136      	bne.n	800ba02 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800b994:	79fb      	ldrb	r3, [r7, #7]
 800b996:	2b80      	cmp	r3, #128	; 0x80
 800b998:	d123      	bne.n	800b9e2 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800b99a:	2306      	movs	r3, #6
 800b99c:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800b99e:	2300      	movs	r3, #0
 800b9a0:	60fb      	str	r3, [r7, #12]
 800b9a2:	f107 0310 	add.w	r3, r7, #16
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	601a      	str	r2, [r3, #0]
 800b9aa:	605a      	str	r2, [r3, #4]
 800b9ac:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800b9ae:	f107 030c 	add.w	r3, r7, #12
 800b9b2:	227f      	movs	r2, #127	; 0x7f
 800b9b4:	2110      	movs	r1, #16
 800b9b6:	6838      	ldr	r0, [r7, #0]
 800b9b8:	f000 f87d 	bl	800bab6 <SecureElementAesEncrypt>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800b9c0:	4b15      	ldr	r3, [pc, #84]	; (800ba18 <SecureElementSetKey+0xb8>)
 800b9c2:	6819      	ldr	r1, [r3, #0]
 800b9c4:	7ffa      	ldrb	r2, [r7, #31]
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	011b      	lsls	r3, r3, #4
 800b9ca:	4413      	add	r3, r2
 800b9cc:	3310      	adds	r3, #16
 800b9ce:	440b      	add	r3, r1
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	f107 010c 	add.w	r1, r7, #12
 800b9d6:	2210      	movs	r2, #16
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f00a fce8 	bl	80163ae <memcpy1>
                return retval;
 800b9de:	7fbb      	ldrb	r3, [r7, #30]
 800b9e0:	e016      	b.n	800ba10 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800b9e2:	4b0d      	ldr	r3, [pc, #52]	; (800ba18 <SecureElementSetKey+0xb8>)
 800b9e4:	6819      	ldr	r1, [r3, #0]
 800b9e6:	7ffa      	ldrb	r2, [r7, #31]
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	011b      	lsls	r3, r3, #4
 800b9ec:	4413      	add	r3, r2
 800b9ee:	3310      	adds	r3, #16
 800b9f0:	440b      	add	r3, r1
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	2210      	movs	r2, #16
 800b9f6:	6839      	ldr	r1, [r7, #0]
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f00a fcd8 	bl	80163ae <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	e006      	b.n	800ba10 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ba02:	7ffb      	ldrb	r3, [r7, #31]
 800ba04:	3301      	adds	r3, #1
 800ba06:	77fb      	strb	r3, [r7, #31]
 800ba08:	7ffb      	ldrb	r3, [r7, #31]
 800ba0a:	2b09      	cmp	r3, #9
 800ba0c:	d9b6      	bls.n	800b97c <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ba0e:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3720      	adds	r7, #32
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	2000050c 	.word	0x2000050c

0800ba1c <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b086      	sub	sp, #24
 800ba20:	af02      	add	r7, sp, #8
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	60b9      	str	r1, [r7, #8]
 800ba26:	4611      	mov	r1, r2
 800ba28:	461a      	mov	r2, r3
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	80fb      	strh	r3, [r7, #6]
 800ba2e:	4613      	mov	r3, r2
 800ba30:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800ba32:	797b      	ldrb	r3, [r7, #5]
 800ba34:	2b7e      	cmp	r3, #126	; 0x7e
 800ba36:	d901      	bls.n	800ba3c <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ba38:	2303      	movs	r3, #3
 800ba3a:	e009      	b.n	800ba50 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800ba3c:	7979      	ldrb	r1, [r7, #5]
 800ba3e:	88fa      	ldrh	r2, [r7, #6]
 800ba40:	69bb      	ldr	r3, [r7, #24]
 800ba42:	9300      	str	r3, [sp, #0]
 800ba44:	460b      	mov	r3, r1
 800ba46:	68b9      	ldr	r1, [r7, #8]
 800ba48:	68f8      	ldr	r0, [r7, #12]
 800ba4a:	f7ff fe13 	bl	800b674 <ComputeCmac>
 800ba4e:	4603      	mov	r3, r0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3710      	adds	r7, #16
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b088      	sub	sp, #32
 800ba5c:	af02      	add	r7, sp, #8
 800ba5e:	60f8      	str	r0, [r7, #12]
 800ba60:	607a      	str	r2, [r7, #4]
 800ba62:	461a      	mov	r2, r3
 800ba64:	460b      	mov	r3, r1
 800ba66:	817b      	strh	r3, [r7, #10]
 800ba68:	4613      	mov	r3, r2
 800ba6a:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d101      	bne.n	800ba76 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ba72:	2302      	movs	r3, #2
 800ba74:	e01b      	b.n	800baae <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800ba76:	2306      	movs	r3, #6
 800ba78:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800ba7e:	7a79      	ldrb	r1, [r7, #9]
 800ba80:	897a      	ldrh	r2, [r7, #10]
 800ba82:	f107 0310 	add.w	r3, r7, #16
 800ba86:	9300      	str	r3, [sp, #0]
 800ba88:	460b      	mov	r3, r1
 800ba8a:	68f9      	ldr	r1, [r7, #12]
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	f7ff fdf1 	bl	800b674 <ComputeCmac>
 800ba92:	4603      	mov	r3, r0
 800ba94:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ba96:	7dfb      	ldrb	r3, [r7, #23]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d001      	beq.n	800baa0 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800ba9c:	7dfb      	ldrb	r3, [r7, #23]
 800ba9e:	e006      	b.n	800baae <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d001      	beq.n	800baac <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800baa8:	2301      	movs	r3, #1
 800baaa:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800baac:	7dfb      	ldrb	r3, [r7, #23]
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3718      	adds	r7, #24
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b0c2      	sub	sp, #264	; 0x108
 800baba:	af00      	add	r7, sp, #0
 800babc:	60f8      	str	r0, [r7, #12]
 800babe:	4608      	mov	r0, r1
 800bac0:	4611      	mov	r1, r2
 800bac2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800bac6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800baca:	6013      	str	r3, [r2, #0]
 800bacc:	4603      	mov	r3, r0
 800bace:	817b      	strh	r3, [r7, #10]
 800bad0:	460b      	mov	r3, r1
 800bad2:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d006      	beq.n	800bae8 <SecureElementAesEncrypt+0x32>
 800bada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bade:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d101      	bne.n	800baec <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bae8:	2302      	movs	r3, #2
 800baea:	e046      	b.n	800bb7a <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800baec:	897b      	ldrh	r3, [r7, #10]
 800baee:	f003 030f 	and.w	r3, r3, #15
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d001      	beq.n	800bafc <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800baf8:	2305      	movs	r3, #5
 800bafa:	e03e      	b.n	800bb7a <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800bafc:	f107 0314 	add.w	r3, r7, #20
 800bb00:	22f0      	movs	r2, #240	; 0xf0
 800bb02:	2100      	movs	r1, #0
 800bb04:	4618      	mov	r0, r3
 800bb06:	f00a fc8d 	bl	8016424 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800bb0a:	f107 0210 	add.w	r2, r7, #16
 800bb0e:	7a7b      	ldrb	r3, [r7, #9]
 800bb10:	4611      	mov	r1, r2
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7ff fd7e 	bl	800b614 <GetKeyByID>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bb1e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d127      	bne.n	800bb76 <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	f107 0214 	add.w	r2, r7, #20
 800bb2e:	2110      	movs	r1, #16
 800bb30:	4618      	mov	r0, r3
 800bb32:	f7ff fb65 	bl	800b200 <lorawan_aes_set_key>

        uint8_t block = 0;
 800bb36:	2300      	movs	r3, #0
 800bb38:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800bb3c:	e018      	b.n	800bb70 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800bb3e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bb42:	68fa      	ldr	r2, [r7, #12]
 800bb44:	18d0      	adds	r0, r2, r3
 800bb46:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bb4a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800bb4e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800bb52:	6812      	ldr	r2, [r2, #0]
 800bb54:	4413      	add	r3, r2
 800bb56:	f107 0214 	add.w	r2, r7, #20
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	f7ff fc2e 	bl	800b3bc <lorawan_aes_encrypt>
            block = block + 16;
 800bb60:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bb64:	3310      	adds	r3, #16
 800bb66:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800bb6a:	897b      	ldrh	r3, [r7, #10]
 800bb6c:	3b10      	subs	r3, #16
 800bb6e:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800bb70:	897b      	ldrh	r3, [r7, #10]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1e3      	bne.n	800bb3e <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800bb76:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b088      	sub	sp, #32
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	70fb      	strb	r3, [r7, #3]
 800bb90:	4613      	mov	r3, r2
 800bb92:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d101      	bne.n	800bb9e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bb9a:	2302      	movs	r3, #2
 800bb9c:	e02e      	b.n	800bbfc <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800bb9e:	2306      	movs	r3, #6
 800bba0:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800bba2:	78bb      	ldrb	r3, [r7, #2]
 800bba4:	2b7f      	cmp	r3, #127	; 0x7f
 800bba6:	d104      	bne.n	800bbb2 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800bba8:	78fb      	ldrb	r3, [r7, #3]
 800bbaa:	2b04      	cmp	r3, #4
 800bbac:	d001      	beq.n	800bbb2 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bbae:	2303      	movs	r3, #3
 800bbb0:	e024      	b.n	800bbfc <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	60fb      	str	r3, [r7, #12]
 800bbb6:	f107 0310 	add.w	r3, r7, #16
 800bbba:	2200      	movs	r2, #0
 800bbbc:	601a      	str	r2, [r3, #0]
 800bbbe:	605a      	str	r2, [r3, #4]
 800bbc0:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800bbc2:	f107 030c 	add.w	r3, r7, #12
 800bbc6:	78fa      	ldrb	r2, [r7, #3]
 800bbc8:	2110      	movs	r1, #16
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f7ff ff73 	bl	800bab6 <SecureElementAesEncrypt>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bbd4:	7ffb      	ldrb	r3, [r7, #31]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d001      	beq.n	800bbde <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800bbda:	7ffb      	ldrb	r3, [r7, #31]
 800bbdc:	e00e      	b.n	800bbfc <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800bbde:	f107 020c 	add.w	r2, r7, #12
 800bbe2:	78bb      	ldrb	r3, [r7, #2]
 800bbe4:	4611      	mov	r1, r2
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7ff feba 	bl	800b960 <SecureElementSetKey>
 800bbec:	4603      	mov	r3, r0
 800bbee:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bbf0:	7ffb      	ldrb	r3, [r7, #31]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d001      	beq.n	800bbfa <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800bbf6:	7ffb      	ldrb	r3, [r7, #31]
 800bbf8:	e000      	b.n	800bbfc <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800bbfa:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3720      	adds	r7, #32
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b086      	sub	sp, #24
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60b9      	str	r1, [r7, #8]
 800bc0c:	607b      	str	r3, [r7, #4]
 800bc0e:	4603      	mov	r3, r0
 800bc10:	73fb      	strb	r3, [r7, #15]
 800bc12:	4613      	mov	r3, r2
 800bc14:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d005      	beq.n	800bc28 <SecureElementProcessJoinAccept+0x24>
 800bc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d002      	beq.n	800bc28 <SecureElementProcessJoinAccept+0x24>
 800bc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d101      	bne.n	800bc2c <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bc28:	2302      	movs	r3, #2
 800bc2a:	e064      	b.n	800bcf6 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800bc2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bc30:	2b21      	cmp	r3, #33	; 0x21
 800bc32:	d901      	bls.n	800bc38 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bc34:	2305      	movs	r3, #5
 800bc36:	e05e      	b.n	800bcf6 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800bc3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	461a      	mov	r2, r3
 800bc44:	6879      	ldr	r1, [r7, #4]
 800bc46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc48:	f00a fbb1 	bl	80163ae <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	1c58      	adds	r0, r3, #1
 800bc50:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	3b01      	subs	r3, #1
 800bc58:	b299      	uxth	r1, r3
 800bc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	7dfa      	ldrb	r2, [r7, #23]
 800bc60:	f7ff ff29 	bl	800bab6 <SecureElementAesEncrypt>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d001      	beq.n	800bc6e <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800bc6a:	2307      	movs	r3, #7
 800bc6c:	e043      	b.n	800bcf6 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800bc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc70:	330b      	adds	r3, #11
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	09db      	lsrs	r3, r3, #7
 800bc76:	b2da      	uxtb	r2, r3
 800bc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7a:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800bc80:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bc84:	3b04      	subs	r3, #4
 800bc86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc88:	4413      	add	r3, r2
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800bc8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bc92:	3b03      	subs	r3, #3
 800bc94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc96:	4413      	add	r3, r2
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	021b      	lsls	r3, r3, #8
 800bc9c:	693a      	ldr	r2, [r7, #16]
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800bca2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bca6:	3b02      	subs	r3, #2
 800bca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcaa:	4413      	add	r3, r2
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	041b      	lsls	r3, r3, #16
 800bcb0:	693a      	ldr	r2, [r7, #16]
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800bcb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcbe:	4413      	add	r3, r2
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	061b      	lsls	r3, r3, #24
 800bcc4:	693a      	ldr	r2, [r7, #16]
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800bcca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d10e      	bne.n	800bcf0 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800bcd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bcd6:	b29b      	uxth	r3, r3
 800bcd8:	3b04      	subs	r3, #4
 800bcda:	b299      	uxth	r1, r3
 800bcdc:	2301      	movs	r3, #1
 800bcde:	693a      	ldr	r2, [r7, #16]
 800bce0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bce2:	f7ff feb9 	bl	800ba58 <SecureElementVerifyAesCmac>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d003      	beq.n	800bcf4 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800bcec:	2301      	movs	r3, #1
 800bcee:	e002      	b.n	800bcf6 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800bcf0:	2304      	movs	r3, #4
 800bcf2:	e000      	b.n	800bcf6 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800bcf4:	2300      	movs	r3, #0
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3718      	adds	r7, #24
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
	...

0800bd00 <SecureElementRandomNumber>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d101      	bne.n	800bd12 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bd0e:	2302      	movs	r3, #2
 800bd10:	e006      	b.n	800bd20 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800bd12:	4b05      	ldr	r3, [pc, #20]	; (800bd28 <SecureElementRandomNumber+0x28>)
 800bd14:	695b      	ldr	r3, [r3, #20]
 800bd16:	4798      	blx	r3
 800bd18:	4602      	mov	r2, r0
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800bd1e:	2300      	movs	r3, #0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3708      	adds	r7, #8
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	0801b9f8 	.word	0x0801b9f8

0800bd2c <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d101      	bne.n	800bd3e <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bd3a:	2302      	movs	r3, #2
 800bd3c:	e007      	b.n	800bd4e <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800bd3e:	4b06      	ldr	r3, [pc, #24]	; (800bd58 <SecureElementSetDevEui+0x2c>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	2208      	movs	r2, #8
 800bd44:	6879      	ldr	r1, [r7, #4]
 800bd46:	4618      	mov	r0, r3
 800bd48:	f00a fb31 	bl	80163ae <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800bd4c:	2300      	movs	r3, #0
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3708      	adds	r7, #8
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	2000050c 	.word	0x2000050c

0800bd5c <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800bd60:	4b02      	ldr	r3, [pc, #8]	; (800bd6c <SecureElementGetDevEui+0x10>)
 800bd62:	681b      	ldr	r3, [r3, #0]
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bc80      	pop	{r7}
 800bd6a:	4770      	bx	lr
 800bd6c:	2000050c 	.word	0x2000050c

0800bd70 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d101      	bne.n	800bd82 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bd7e:	2302      	movs	r3, #2
 800bd80:	e008      	b.n	800bd94 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800bd82:	4b06      	ldr	r3, [pc, #24]	; (800bd9c <SecureElementSetJoinEui+0x2c>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	3308      	adds	r3, #8
 800bd88:	2208      	movs	r2, #8
 800bd8a:	6879      	ldr	r1, [r7, #4]
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f00a fb0e 	bl	80163ae <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3708      	adds	r7, #8
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}
 800bd9c:	2000050c 	.word	0x2000050c

0800bda0 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800bda0:	b480      	push	{r7}
 800bda2:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800bda4:	4b03      	ldr	r3, [pc, #12]	; (800bdb4 <SecureElementGetJoinEui+0x14>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	3308      	adds	r3, #8
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bc80      	pop	{r7}
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop
 800bdb4:	2000050c 	.word	0x2000050c

0800bdb8 <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800bdc2:	4a1a      	ldr	r2, [pc, #104]	; (800be2c <LmHandlerInit+0x74>)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800bdc8:	4b19      	ldr	r3, [pc, #100]	; (800be30 <LmHandlerInit+0x78>)
 800bdca:	4a1a      	ldr	r2, [pc, #104]	; (800be34 <LmHandlerInit+0x7c>)
 800bdcc:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800bdce:	4b18      	ldr	r3, [pc, #96]	; (800be30 <LmHandlerInit+0x78>)
 800bdd0:	4a19      	ldr	r2, [pc, #100]	; (800be38 <LmHandlerInit+0x80>)
 800bdd2:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800bdd4:	4b16      	ldr	r3, [pc, #88]	; (800be30 <LmHandlerInit+0x78>)
 800bdd6:	4a19      	ldr	r2, [pc, #100]	; (800be3c <LmHandlerInit+0x84>)
 800bdd8:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800bdda:	4b15      	ldr	r3, [pc, #84]	; (800be30 <LmHandlerInit+0x78>)
 800bddc:	4a18      	ldr	r2, [pc, #96]	; (800be40 <LmHandlerInit+0x88>)
 800bdde:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800bde0:	4b12      	ldr	r3, [pc, #72]	; (800be2c <LmHandlerInit+0x74>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4a17      	ldr	r2, [pc, #92]	; (800be44 <LmHandlerInit+0x8c>)
 800bde8:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800bdea:	4b10      	ldr	r3, [pc, #64]	; (800be2c <LmHandlerInit+0x74>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	4a14      	ldr	r2, [pc, #80]	; (800be44 <LmHandlerInit+0x8c>)
 800bdf2:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800bdf4:	4b0d      	ldr	r3, [pc, #52]	; (800be2c <LmHandlerInit+0x74>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	4a12      	ldr	r2, [pc, #72]	; (800be44 <LmHandlerInit+0x8c>)
 800bdfc:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800bdfe:	4b11      	ldr	r3, [pc, #68]	; (800be44 <LmHandlerInit+0x8c>)
 800be00:	4a11      	ldr	r2, [pc, #68]	; (800be48 <LmHandlerInit+0x90>)
 800be02:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800be04:	4b09      	ldr	r3, [pc, #36]	; (800be2c <LmHandlerInit+0x74>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	699b      	ldr	r3, [r3, #24]
 800be0a:	4a0e      	ldr	r2, [pc, #56]	; (800be44 <LmHandlerInit+0x8c>)
 800be0c:	6113      	str	r3, [r2, #16]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800be0e:	490f      	ldr	r1, [pc, #60]	; (800be4c <LmHandlerInit+0x94>)
 800be10:	2000      	movs	r0, #0
 800be12:	f000 fd8f 	bl	800c934 <LmHandlerPackageRegister>
 800be16:	4603      	mov	r3, r0
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d002      	beq.n	800be22 <LmHandlerInit+0x6a>
    {
        return LORAMAC_HANDLER_ERROR;
 800be1c:	f04f 33ff 	mov.w	r3, #4294967295
 800be20:	e000      	b.n	800be24 <LmHandlerInit+0x6c>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800be22:	2300      	movs	r3, #0
}
 800be24:	4618      	mov	r0, r3
 800be26:	3708      	adds	r7, #8
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	20000538 	.word	0x20000538
 800be30:	2000053c 	.word	0x2000053c
 800be34:	0800c601 	.word	0x0800c601
 800be38:	0800c669 	.word	0x0800c669
 800be3c:	0800c745 	.word	0x0800c745
 800be40:	0800c861 	.word	0x0800c861
 800be44:	2000054c 	.word	0x2000054c
 800be48:	0800ccd1 	.word	0x0800ccd1
 800be4c:	20000090 	.word	0x20000090

0800be50 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b094      	sub	sp, #80	; 0x50
 800be54:	af04      	add	r7, sp, #16
 800be56:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800be58:	2214      	movs	r2, #20
 800be5a:	6879      	ldr	r1, [r7, #4]
 800be5c:	488f      	ldr	r0, [pc, #572]	; (800c09c <LmHandlerConfigure+0x24c>)
 800be5e:	f00d fdab 	bl	80199b8 <UTIL_MEM_cpy_8>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800be62:	f7fe fb0b 	bl	800a47c <LoraInfo_GetPtr>
 800be66:	63f8      	str	r0, [r7, #60]	; 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800be68:	4b8c      	ldr	r3, [pc, #560]	; (800c09c <LmHandlerConfigure+0x24c>)
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	461a      	mov	r2, r3
 800be6e:	2301      	movs	r3, #1
 800be70:	4093      	lsls	r3, r2
 800be72:	461a      	mov	r2, r3
 800be74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	4013      	ands	r3, r2
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d106      	bne.n	800be8c <LmHandlerConfigure+0x3c>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800be7e:	4b88      	ldr	r3, [pc, #544]	; (800c0a0 <LmHandlerConfigure+0x250>)
 800be80:	2201      	movs	r2, #1
 800be82:	2100      	movs	r1, #0
 800be84:	2000      	movs	r0, #0
 800be86:	f00e fde7 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800be8a:	e7fe      	b.n	800be8a <LmHandlerConfigure+0x3a>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800be8c:	4b83      	ldr	r3, [pc, #524]	; (800c09c <LmHandlerConfigure+0x24c>)
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	461a      	mov	r2, r3
 800be92:	4984      	ldr	r1, [pc, #528]	; (800c0a4 <LmHandlerConfigure+0x254>)
 800be94:	4884      	ldr	r0, [pc, #528]	; (800c0a8 <LmHandlerConfigure+0x258>)
 800be96:	f004 fc01 	bl	801069c <LoRaMacInitialization>
 800be9a:	4603      	mov	r3, r0
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d002      	beq.n	800bea6 <LmHandlerConfigure+0x56>
    {
        return LORAMAC_HANDLER_ERROR;
 800bea0:	f04f 33ff 	mov.w	r3, #4294967295
 800bea4:	e0f5      	b.n	800c092 <LmHandlerConfigure+0x242>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800bea6:	2326      	movs	r3, #38	; 0x26
 800bea8:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800beaa:	f107 0318 	add.w	r3, r7, #24
 800beae:	4618      	mov	r0, r3
 800beb0:	f005 f918 	bl	80110e4 <LoRaMacMibSetRequestConfirm>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d103      	bne.n	800bec2 <LmHandlerConfigure+0x72>
    {
        CtxRestoreDone = true;
 800beba:	4b7c      	ldr	r3, [pc, #496]	; (800c0ac <LmHandlerConfigure+0x25c>)
 800bebc:	2201      	movs	r2, #1
 800bebe:	701a      	strb	r2, [r3, #0]
 800bec0:	e02a      	b.n	800bf18 <LmHandlerConfigure+0xc8>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800bec2:	2327      	movs	r3, #39	; 0x27
 800bec4:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800bec6:	4b7a      	ldr	r3, [pc, #488]	; (800c0b0 <LmHandlerConfigure+0x260>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	691b      	ldr	r3, [r3, #16]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d00c      	beq.n	800beea <LmHandlerConfigure+0x9a>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800bed0:	f107 0318 	add.w	r3, r7, #24
 800bed4:	4618      	mov	r0, r3
 800bed6:	f004 ff7f 	bl	8010dd8 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800beda:	4b75      	ldr	r3, [pc, #468]	; (800c0b0 <LmHandlerConfigure+0x260>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	691b      	ldr	r3, [r3, #16]
 800bee0:	69fa      	ldr	r2, [r7, #28]
 800bee2:	f44f 61e5 	mov.w	r1, #1832	; 0x728
 800bee6:	4610      	mov	r0, r2
 800bee8:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800beea:	2326      	movs	r3, #38	; 0x26
 800beec:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800beee:	f107 0318 	add.w	r3, r7, #24
 800bef2:	4618      	mov	r0, r3
 800bef4:	f005 f8f6 	bl	80110e4 <LoRaMacMibSetRequestConfirm>
 800bef8:	4603      	mov	r3, r0
 800befa:	2b00      	cmp	r3, #0
 800befc:	d10c      	bne.n	800bf18 <LmHandlerConfigure+0xc8>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800befe:	2301      	movs	r3, #1
 800bf00:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800bf02:	f107 0318 	add.w	r3, r7, #24
 800bf06:	4618      	mov	r0, r3
 800bf08:	f004 ff66 	bl	8010dd8 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800bf0c:	7f3b      	ldrb	r3, [r7, #28]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d002      	beq.n	800bf18 <LmHandlerConfigure+0xc8>
            {
                CtxRestoreDone = true;
 800bf12:	4b66      	ldr	r3, [pc, #408]	; (800c0ac <LmHandlerConfigure+0x25c>)
 800bf14:	2201      	movs	r2, #1
 800bf16:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800bf18:	4b64      	ldr	r3, [pc, #400]	; (800c0ac <LmHandlerConfigure+0x25c>)
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d02a      	beq.n	800bf76 <LmHandlerConfigure+0x126>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800bf20:	4b63      	ldr	r3, [pc, #396]	; (800c0b0 <LmHandlerConfigure+0x260>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	69db      	ldr	r3, [r3, #28]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d004      	beq.n	800bf34 <LmHandlerConfigure+0xe4>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800bf2a:	4b61      	ldr	r3, [pc, #388]	; (800c0b0 <LmHandlerConfigure+0x260>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	69db      	ldr	r3, [r3, #28]
 800bf30:	2000      	movs	r0, #0
 800bf32:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800bf34:	2306      	movs	r3, #6
 800bf36:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800bf38:	f107 0318 	add.w	r3, r7, #24
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f004 ff4b 	bl	8010dd8 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800bf42:	69fb      	ldr	r3, [r7, #28]
 800bf44:	4a5b      	ldr	r2, [pc, #364]	; (800c0b4 <LmHandlerConfigure+0x264>)
 800bf46:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800bf48:	2326      	movs	r3, #38	; 0x26
 800bf4a:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800bf4c:	f107 0318 	add.w	r3, r7, #24
 800bf50:	4618      	mov	r0, r3
 800bf52:	f004 ff41 	bl	8010dd8 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800bf56:	69fb      	ldr	r3, [r7, #28]
 800bf58:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800bf5c:	4b4f      	ldr	r3, [pc, #316]	; (800c09c <LmHandlerConfigure+0x24c>)
 800bf5e:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800bf66:	4b4d      	ldr	r3, [pc, #308]	; (800c09c <LmHandlerConfigure+0x24c>)
 800bf68:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800bf6a:	69fb      	ldr	r3, [r7, #28]
 800bf6c:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800bf70:	4b4a      	ldr	r3, [pc, #296]	; (800c09c <LmHandlerConfigure+0x24c>)
 800bf72:	709a      	strb	r2, [r3, #2]
 800bf74:	e019      	b.n	800bfaa <LmHandlerConfigure+0x15a>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800bf76:	2305      	movs	r3, #5
 800bf78:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800bf7e:	f107 0318 	add.w	r3, r7, #24
 800bf82:	4618      	mov	r0, r3
 800bf84:	f005 f8ae 	bl	80110e4 <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800bf88:	4b49      	ldr	r3, [pc, #292]	; (800c0b0 <LmHandlerConfigure+0x260>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	4798      	blx	r3
 800bf90:	4603      	mov	r3, r0
 800bf92:	4a48      	ldr	r2, [pc, #288]	; (800c0b4 <LmHandlerConfigure+0x264>)
 800bf94:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800bf96:	2306      	movs	r3, #6
 800bf98:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800bf9a:	4b46      	ldr	r3, [pc, #280]	; (800c0b4 <LmHandlerConfigure+0x264>)
 800bf9c:	695b      	ldr	r3, [r3, #20]
 800bf9e:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800bfa0:	f107 0318 	add.w	r3, r7, #24
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f005 f89d 	bl	80110e4 <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800bfaa:	2302      	movs	r3, #2
 800bfac:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800bfae:	f107 0318 	add.w	r3, r7, #24
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f004 ff10 	bl	8010dd8 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	2208      	movs	r2, #8
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	483d      	ldr	r0, [pc, #244]	; (800c0b4 <LmHandlerConfigure+0x264>)
 800bfc0:	f00a f9f5 	bl	80163ae <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800bfc4:	2303      	movs	r3, #3
 800bfc6:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800bfc8:	f107 0318 	add.w	r3, r7, #24
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f004 ff03 	bl	8010dd8 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800bfd2:	69fb      	ldr	r3, [r7, #28]
 800bfd4:	2208      	movs	r2, #8
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	4837      	ldr	r0, [pc, #220]	; (800c0b8 <LmHandlerConfigure+0x268>)
 800bfda:	f00a f9e8 	bl	80163ae <memcpy1>

    SecureElementPrintKeys();
 800bfde:	f7ff fc1f 	bl	800b820 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800bfe2:	4b36      	ldr	r3, [pc, #216]	; (800c0bc <LmHandlerConfigure+0x26c>)
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	4b35      	ldr	r3, [pc, #212]	; (800c0c0 <LmHandlerConfigure+0x270>)
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	4619      	mov	r1, r3
 800bfee:	4b35      	ldr	r3, [pc, #212]	; (800c0c4 <LmHandlerConfigure+0x274>)
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	4618      	mov	r0, r3
 800bff4:	4b34      	ldr	r3, [pc, #208]	; (800c0c8 <LmHandlerConfigure+0x278>)
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	9303      	str	r3, [sp, #12]
 800bffa:	9002      	str	r0, [sp, #8]
 800bffc:	9101      	str	r1, [sp, #4]
 800bffe:	9200      	str	r2, [sp, #0]
 800c000:	4b32      	ldr	r3, [pc, #200]	; (800c0cc <LmHandlerConfigure+0x27c>)
 800c002:	2200      	movs	r2, #0
 800c004:	2100      	movs	r1, #0
 800c006:	2002      	movs	r0, #2
 800c008:	f00e fd26 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c00c:	230f      	movs	r3, #15
 800c00e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c010:	2301      	movs	r3, #1
 800c012:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c014:	f107 0318 	add.w	r3, r7, #24
 800c018:	4618      	mov	r0, r3
 800c01a:	f005 f863 	bl	80110e4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c01e:	2310      	movs	r3, #16
 800c020:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c022:	2300      	movs	r3, #0
 800c024:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c026:	f107 0318 	add.w	r3, r7, #24
 800c02a:	4618      	mov	r0, r3
 800c02c:	f005 f85a 	bl	80110e4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c030:	2304      	movs	r3, #4
 800c032:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c034:	4b19      	ldr	r3, [pc, #100]	; (800c09c <LmHandlerConfigure+0x24c>)
 800c036:	789b      	ldrb	r3, [r3, #2]
 800c038:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c03a:	f107 0318 	add.w	r3, r7, #24
 800c03e:	4618      	mov	r0, r3
 800c040:	f005 f850 	bl	80110e4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800c044:	2337      	movs	r3, #55	; 0x37
 800c046:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800c048:	4b14      	ldr	r3, [pc, #80]	; (800c09c <LmHandlerConfigure+0x24c>)
 800c04a:	691b      	ldr	r3, [r3, #16]
 800c04c:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c04e:	f107 0318 	add.w	r3, r7, #24
 800c052:	4618      	mov	r0, r3
 800c054:	f005 f846 	bl	80110e4 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c058:	230f      	movs	r3, #15
 800c05a:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c05c:	4b0f      	ldr	r3, [pc, #60]	; (800c09c <LmHandlerConfigure+0x24c>)
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	f107 0210 	add.w	r2, r7, #16
 800c064:	4611      	mov	r1, r2
 800c066:	4618      	mov	r0, r3
 800c068:	f007 fe8e 	bl	8013d88 <RegionGetPhyParam>
 800c06c:	4603      	mov	r3, r0
 800c06e:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2b00      	cmp	r3, #0
 800c074:	bf14      	ite	ne
 800c076:	2301      	movne	r3, #1
 800c078:	2300      	moveq	r3, #0
 800c07a:	b2da      	uxtb	r2, r3
 800c07c:	4b07      	ldr	r3, [pc, #28]	; (800c09c <LmHandlerConfigure+0x24c>)
 800c07e:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800c080:	2014      	movs	r0, #20
 800c082:	f000 faa5 	bl	800c5d0 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c086:	4b05      	ldr	r3, [pc, #20]	; (800c09c <LmHandlerConfigure+0x24c>)
 800c088:	799b      	ldrb	r3, [r3, #6]
 800c08a:	4618      	mov	r0, r3
 800c08c:	f005 fdba 	bl	8011c04 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c090:	2300      	movs	r3, #0
}
 800c092:	4618      	mov	r0, r3
 800c094:	3740      	adds	r7, #64	; 0x40
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	20000524 	.word	0x20000524
 800c0a0:	0801b324 	.word	0x0801b324
 800c0a4:	2000054c 	.word	0x2000054c
 800c0a8:	2000053c 	.word	0x2000053c
 800c0ac:	20000656 	.word	0x20000656
 800c0b0:	20000538 	.word	0x20000538
 800c0b4:	20000078 	.word	0x20000078
 800c0b8:	20000080 	.word	0x20000080
 800c0bc:	2000008f 	.word	0x2000008f
 800c0c0:	2000008e 	.word	0x2000008e
 800c0c4:	2000008d 	.word	0x2000008d
 800c0c8:	2000008c 	.word	0x2000008c
 800c0cc:	0801b370 	.word	0x0801b370

0800c0d0 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800c0d4:	f002 fab4 	bl	800e640 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800c0d8:	f000 fd30 	bl	800cb3c <LmHandlerPackagesProcess>
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800c0dc:	bf00      	nop
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800c0e4:	4b02      	ldr	r3, [pc, #8]	; (800c0f0 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bc80      	pop	{r7}
 800c0ee:	4770      	bx	lr
 800c0f0:	20000560 	.word	0x20000560

0800c0f4 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b090      	sub	sp, #64	; 0x40
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	460a      	mov	r2, r1
 800c0fe:	71fb      	strb	r3, [r7, #7]
 800c100:	4613      	mov	r3, r2
 800c102:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800c104:	2301      	movs	r3, #1
 800c106:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c10a:	4b35      	ldr	r3, [pc, #212]	; (800c1e0 <LmHandlerJoin+0xec>)
 800c10c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c110:	b2db      	uxtb	r3, r3
 800c112:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800c116:	79fb      	ldrb	r3, [r7, #7]
 800c118:	2b02      	cmp	r3, #2
 800c11a:	d110      	bne.n	800c13e <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800c11c:	2302      	movs	r3, #2
 800c11e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c122:	4b30      	ldr	r3, [pc, #192]	; (800c1e4 <LmHandlerJoin+0xf0>)
 800c124:	2202      	movs	r2, #2
 800c126:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800c128:	4a2e      	ldr	r2, [pc, #184]	; (800c1e4 <LmHandlerJoin+0xf0>)
 800c12a:	79bb      	ldrb	r3, [r7, #6]
 800c12c:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800c12e:	f004 fd69 	bl	8010c04 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800c132:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c136:	4618      	mov	r0, r3
 800c138:	f005 fb2e 	bl	8011798 <LoRaMacMlmeRequest>
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800c13c:	e04b      	b.n	800c1d6 <LmHandlerJoin+0xe2>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c13e:	2301      	movs	r3, #1
 800c140:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c144:	4b27      	ldr	r3, [pc, #156]	; (800c1e4 <LmHandlerJoin+0xf0>)
 800c146:	2201      	movs	r2, #1
 800c148:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c14a:	4b25      	ldr	r3, [pc, #148]	; (800c1e0 <LmHandlerJoin+0xec>)
 800c14c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c150:	4b24      	ldr	r3, [pc, #144]	; (800c1e4 <LmHandlerJoin+0xf0>)
 800c152:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c154:	4b23      	ldr	r3, [pc, #140]	; (800c1e4 <LmHandlerJoin+0xf0>)
 800c156:	2200      	movs	r2, #0
 800c158:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800c15a:	4a22      	ldr	r2, [pc, #136]	; (800c1e4 <LmHandlerJoin+0xf0>)
 800c15c:	79bb      	ldrb	r3, [r7, #6]
 800c15e:	71d3      	strb	r3, [r2, #7]
        if (CtxRestoreDone == false)
 800c160:	4b21      	ldr	r3, [pc, #132]	; (800c1e8 <LmHandlerJoin+0xf4>)
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	f083 0301 	eor.w	r3, r3, #1
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d01e      	beq.n	800c1ac <LmHandlerJoin+0xb8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800c16e:	231e      	movs	r3, #30
 800c170:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800c172:	4b1b      	ldr	r3, [pc, #108]	; (800c1e0 <LmHandlerJoin+0xec>)
 800c174:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c178:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c17a:	f107 0308 	add.w	r3, r7, #8
 800c17e:	4618      	mov	r0, r3
 800c180:	f004 ffb0 	bl	80110e4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800c184:	231f      	movs	r3, #31
 800c186:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800c188:	4b15      	ldr	r3, [pc, #84]	; (800c1e0 <LmHandlerJoin+0xec>)
 800c18a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c18e:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c190:	f107 0308 	add.w	r3, r7, #8
 800c194:	4618      	mov	r0, r3
 800c196:	f004 ffa5 	bl	80110e4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c19a:	2328      	movs	r3, #40	; 0x28
 800c19c:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c19e:	4b13      	ldr	r3, [pc, #76]	; (800c1ec <LmHandlerJoin+0xf8>)
 800c1a0:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c1a2:	f107 0308 	add.w	r3, r7, #8
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f004 ff9c 	bl	80110e4 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800c1ac:	f004 fd2a 	bl	8010c04 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c1b8:	f107 0308 	add.w	r3, r7, #8
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f004 ff91 	bl	80110e4 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c1c2:	4b0b      	ldr	r3, [pc, #44]	; (800c1f0 <LmHandlerJoin+0xfc>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c8:	4806      	ldr	r0, [pc, #24]	; (800c1e4 <LmHandlerJoin+0xf0>)
 800c1ca:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800c1cc:	4b04      	ldr	r3, [pc, #16]	; (800c1e0 <LmHandlerJoin+0xec>)
 800c1ce:	785b      	ldrb	r3, [r3, #1]
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f000 f92b 	bl	800c42c <LmHandlerRequestClass>
}
 800c1d6:	bf00      	nop
 800c1d8:	3740      	adds	r7, #64	; 0x40
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	20000524 	.word	0x20000524
 800c1e4:	2000009c 	.word	0x2000009c
 800c1e8:	20000656 	.word	0x20000656
 800c1ec:	01000300 	.word	0x01000300
 800c1f0:	20000538 	.word	0x20000538

0800c1f4 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b08a      	sub	sp, #40	; 0x28
 800c1f8:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c1fe:	463b      	mov	r3, r7
 800c200:	4618      	mov	r0, r3
 800c202:	f004 fde9 	bl	8010dd8 <LoRaMacMibGetRequestConfirm>
 800c206:	4603      	mov	r3, r0
 800c208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800c20c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c210:	2b00      	cmp	r3, #0
 800c212:	d106      	bne.n	800c222 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c214:	793b      	ldrb	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d101      	bne.n	800c21e <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c21a:	2300      	movs	r3, #0
 800c21c:	e002      	b.n	800c224 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c21e:	2301      	movs	r3, #1
 800c220:	e000      	b.n	800c224 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c222:	2300      	movs	r3, #0
    }
}
 800c224:	4618      	mov	r0, r3
 800c226:	3728      	adds	r7, #40	; 0x28
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b08a      	sub	sp, #40	; 0x28
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	460b      	mov	r3, r1
 800c236:	70fb      	strb	r3, [r7, #3]
 800c238:	4613      	mov	r3, r2
 800c23a:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c23c:	23ff      	movs	r3, #255	; 0xff
 800c23e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800c242:	f001 ff8b 	bl	800e15c <LoRaMacIsBusy>
 800c246:	4603      	mov	r3, r0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d002      	beq.n	800c252 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c24c:	f06f 0301 	mvn.w	r3, #1
 800c250:	e0b6      	b.n	800c3c0 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c252:	f7ff ffcf 	bl	800c1f4 <LmHandlerJoinStatus>
 800c256:	4603      	mov	r3, r0
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d00a      	beq.n	800c272 <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800c25c:	4b5a      	ldr	r3, [pc, #360]	; (800c3c8 <LmHandlerSend+0x19c>)
 800c25e:	799b      	ldrb	r3, [r3, #6]
 800c260:	4a59      	ldr	r2, [pc, #356]	; (800c3c8 <LmHandlerSend+0x19c>)
 800c262:	79d2      	ldrb	r2, [r2, #7]
 800c264:	4611      	mov	r1, r2
 800c266:	4618      	mov	r0, r3
 800c268:	f7ff ff44 	bl	800c0f4 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c26c:	f06f 0302 	mvn.w	r3, #2
 800c270:	e0a6      	b.n	800c3c0 <LmHandlerSend+0x194>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800c272:	4b56      	ldr	r3, [pc, #344]	; (800c3cc <LmHandlerSend+0x1a0>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	68db      	ldr	r3, [r3, #12]
 800c278:	4798      	blx	r3
 800c27a:	4603      	mov	r3, r0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d00d      	beq.n	800c29c <LmHandlerSend+0x70>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	781a      	ldrb	r2, [r3, #0]
 800c284:	4b51      	ldr	r3, [pc, #324]	; (800c3cc <LmHandlerSend+0x1a0>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d006      	beq.n	800c29c <LmHandlerSend+0x70>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d002      	beq.n	800c29c <LmHandlerSend+0x70>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800c296:	f06f 0303 	mvn.w	r3, #3
 800c29a:	e091      	b.n	800c3c0 <LmHandlerSend+0x194>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800c29c:	4a4c      	ldr	r2, [pc, #304]	; (800c3d0 <LmHandlerSend+0x1a4>)
 800c29e:	78fb      	ldrb	r3, [r7, #3]
 800c2a0:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800c2a2:	78fb      	ldrb	r3, [r7, #3]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	bf14      	ite	ne
 800c2a8:	2301      	movne	r3, #1
 800c2aa:	2300      	moveq	r3, #0
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c2b0:	4b48      	ldr	r3, [pc, #288]	; (800c3d4 <LmHandlerSend+0x1a8>)
 800c2b2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c2b6:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	785b      	ldrb	r3, [r3, #1]
 800c2bc:	f107 020c 	add.w	r2, r7, #12
 800c2c0:	4611      	mov	r1, r2
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f004 fd00 	bl	8010cc8 <LoRaMacQueryTxPossible>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d009      	beq.n	800c2e2 <LmHandlerSend+0xb6>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800c2da:	23f9      	movs	r3, #249	; 0xf9
 800c2dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c2e0:	e009      	b.n	800c2f6 <LmHandlerSend+0xca>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	785b      	ldrb	r3, [r3, #1]
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800c2f6:	4b36      	ldr	r3, [pc, #216]	; (800c3d0 <LmHandlerSend+0x1a4>)
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	3310      	adds	r3, #16
 800c2fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c300:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c304:	4b33      	ldr	r3, [pc, #204]	; (800c3d4 <LmHandlerSend+0x1a8>)
 800c306:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c30a:	4b31      	ldr	r3, [pc, #196]	; (800c3d0 <LmHandlerSend+0x1a4>)
 800c30c:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800c30e:	78ba      	ldrb	r2, [r7, #2]
 800c310:	f107 0310 	add.w	r3, r7, #16
 800c314:	4611      	mov	r1, r2
 800c316:	4618      	mov	r0, r3
 800c318:	f005 fb7e 	bl	8011a18 <LoRaMacMcpsRequest>
 800c31c:	4603      	mov	r3, r0
 800c31e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c322:	6a3b      	ldr	r3, [r7, #32]
 800c324:	4a2c      	ldr	r2, [pc, #176]	; (800c3d8 <LmHandlerSend+0x1ac>)
 800c326:	6013      	str	r3, [r2, #0]

    switch (status)
 800c328:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c32c:	2b11      	cmp	r3, #17
 800c32e:	d840      	bhi.n	800c3b2 <LmHandlerSend+0x186>
 800c330:	a201      	add	r2, pc, #4	; (adr r2, 800c338 <LmHandlerSend+0x10c>)
 800c332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c336:	bf00      	nop
 800c338:	0800c381 	.word	0x0800c381
 800c33c:	0800c393 	.word	0x0800c393
 800c340:	0800c3b3 	.word	0x0800c3b3
 800c344:	0800c3b3 	.word	0x0800c3b3
 800c348:	0800c3b3 	.word	0x0800c3b3
 800c34c:	0800c3b3 	.word	0x0800c3b3
 800c350:	0800c3b3 	.word	0x0800c3b3
 800c354:	0800c39b 	.word	0x0800c39b
 800c358:	0800c3b3 	.word	0x0800c3b3
 800c35c:	0800c3b3 	.word	0x0800c3b3
 800c360:	0800c3b3 	.word	0x0800c3b3
 800c364:	0800c3ab 	.word	0x0800c3ab
 800c368:	0800c3b3 	.word	0x0800c3b3
 800c36c:	0800c3b3 	.word	0x0800c3b3
 800c370:	0800c393 	.word	0x0800c393
 800c374:	0800c393 	.word	0x0800c393
 800c378:	0800c393 	.word	0x0800c393
 800c37c:	0800c3a3 	.word	0x0800c3a3
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800c380:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c384:	f113 0f07 	cmn.w	r3, #7
 800c388:	d017      	beq.n	800c3ba <LmHandlerSend+0x18e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c38a:	2300      	movs	r3, #0
 800c38c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800c390:	e013      	b.n	800c3ba <LmHandlerSend+0x18e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800c392:	23fe      	movs	r3, #254	; 0xfe
 800c394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c398:	e010      	b.n	800c3bc <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c39a:	23fd      	movs	r3, #253	; 0xfd
 800c39c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c3a0:	e00c      	b.n	800c3bc <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800c3a2:	23fb      	movs	r3, #251	; 0xfb
 800c3a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c3a8:	e008      	b.n	800c3bc <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800c3aa:	23fa      	movs	r3, #250	; 0xfa
 800c3ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c3b0:	e004      	b.n	800c3bc <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c3b2:	23ff      	movs	r3, #255	; 0xff
 800c3b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c3b8:	e000      	b.n	800c3bc <LmHandlerSend+0x190>
            break;
 800c3ba:	bf00      	nop
    }

    return lmhStatus;
 800c3bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3728      	adds	r7, #40	; 0x28
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	2000009c 	.word	0x2000009c
 800c3cc:	20000510 	.word	0x20000510
 800c3d0:	200000a4 	.word	0x200000a4
 800c3d4:	20000524 	.word	0x20000524
 800c3d8:	20000560 	.word	0x20000560

0800c3dc <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b086      	sub	sp, #24
 800c3e0:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800c3e2:	230a      	movs	r3, #10
 800c3e4:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800c3e6:	463b      	mov	r3, r7
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f005 f9d5 	bl	8011798 <LoRaMacMlmeRequest>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	4a06      	ldr	r2, [pc, #24]	; (800c410 <LmHandlerDeviceTimeReq+0x34>)
 800c3f6:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800c3f8:	7dfb      	ldrb	r3, [r7, #23]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d101      	bne.n	800c402 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c3fe:	2300      	movs	r3, #0
 800c400:	e001      	b.n	800c406 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c402:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c406:	4618      	mov	r0, r3
 800c408:	3718      	adds	r7, #24
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	20000560 	.word	0x20000560

0800c414 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800c414:	b480      	push	{r7}
 800c416:	b083      	sub	sp, #12
 800c418:	af00      	add	r7, sp, #0
 800c41a:	4603      	mov	r3, r0
 800c41c:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800c41e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c422:	4618      	mov	r0, r3
 800c424:	370c      	adds	r7, #12
 800c426:	46bd      	mov	sp, r7
 800c428:	bc80      	pop	{r7}
 800c42a:	4770      	bx	lr

0800c42c <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b08c      	sub	sp, #48	; 0x30
 800c430:	af00      	add	r7, sp, #0
 800c432:	4603      	mov	r3, r0
 800c434:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800c436:	2300      	movs	r3, #0
 800c438:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800c43c:	f001 fe8e 	bl	800e15c <LoRaMacIsBusy>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d002      	beq.n	800c44c <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c446:	f06f 0301 	mvn.w	r3, #1
 800c44a:	e073      	b.n	800c534 <LmHandlerRequestClass+0x108>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800c44c:	f7ff fed2 	bl	800c1f4 <LmHandlerJoinStatus>
 800c450:	4603      	mov	r3, r0
 800c452:	2b01      	cmp	r3, #1
 800c454:	d002      	beq.n	800c45c <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c456:	f06f 0302 	mvn.w	r3, #2
 800c45a:	e06b      	b.n	800c534 <LmHandlerRequestClass+0x108>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c45c:	2300      	movs	r3, #0
 800c45e:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c460:	f107 0308 	add.w	r3, r7, #8
 800c464:	4618      	mov	r0, r3
 800c466:	f004 fcb7 	bl	8010dd8 <LoRaMacMibGetRequestConfirm>
 800c46a:	4603      	mov	r3, r0
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d002      	beq.n	800c476 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c470:	f04f 33ff 	mov.w	r3, #4294967295
 800c474:	e05e      	b.n	800c534 <LmHandlerRequestClass+0x108>
    }
    currentClass = mibReq.Param.Class;
 800c476:	7b3b      	ldrb	r3, [r7, #12]
 800c478:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800c47c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c480:	79fb      	ldrb	r3, [r7, #7]
 800c482:	429a      	cmp	r2, r3
 800c484:	d04d      	beq.n	800c522 <LmHandlerRequestClass+0xf6>
    {
        switch( newClass )
 800c486:	79fb      	ldrb	r3, [r7, #7]
 800c488:	2b02      	cmp	r3, #2
 800c48a:	d028      	beq.n	800c4de <LmHandlerRequestClass+0xb2>
 800c48c:	2b02      	cmp	r3, #2
 800c48e:	dc4a      	bgt.n	800c526 <LmHandlerRequestClass+0xfa>
 800c490:	2b00      	cmp	r3, #0
 800c492:	d002      	beq.n	800c49a <LmHandlerRequestClass+0x6e>
 800c494:	2b01      	cmp	r3, #1
 800c496:	d01e      	beq.n	800c4d6 <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800c498:	e045      	b.n	800c526 <LmHandlerRequestClass+0xfa>
                if( currentClass != CLASS_A )
 800c49a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d043      	beq.n	800c52a <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800c4a2:	79fb      	ldrb	r3, [r7, #7]
 800c4a4:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c4a6:	f107 0308 	add.w	r3, r7, #8
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f004 fe1a 	bl	80110e4 <LoRaMacMibSetRequestConfirm>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d10b      	bne.n	800c4ce <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c4b6:	4b21      	ldr	r3, [pc, #132]	; (800c53c <LmHandlerRequestClass+0x110>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d034      	beq.n	800c52a <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c4c0:	4b1e      	ldr	r3, [pc, #120]	; (800c53c <LmHandlerRequestClass+0x110>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4c6:	79fa      	ldrb	r2, [r7, #7]
 800c4c8:	4610      	mov	r0, r2
 800c4ca:	4798      	blx	r3
            break;
 800c4cc:	e02d      	b.n	800c52a <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c4ce:	23ff      	movs	r3, #255	; 0xff
 800c4d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c4d4:	e029      	b.n	800c52a <LmHandlerRequestClass+0xfe>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800c4d6:	23ff      	movs	r3, #255	; 0xff
 800c4d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c4dc:	e028      	b.n	800c530 <LmHandlerRequestClass+0x104>
                if( currentClass != CLASS_A )
 800c4de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d003      	beq.n	800c4ee <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800c4e6:	23ff      	movs	r3, #255	; 0xff
 800c4e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c4ec:	e01f      	b.n	800c52e <LmHandlerRequestClass+0x102>
                    mibReq.Param.Class = newClass;
 800c4ee:	79fb      	ldrb	r3, [r7, #7]
 800c4f0:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c4f2:	f107 0308 	add.w	r3, r7, #8
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f004 fdf4 	bl	80110e4 <LoRaMacMibSetRequestConfirm>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d10b      	bne.n	800c51a <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c502:	4b0e      	ldr	r3, [pc, #56]	; (800c53c <LmHandlerRequestClass+0x110>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d010      	beq.n	800c52e <LmHandlerRequestClass+0x102>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c50c:	4b0b      	ldr	r3, [pc, #44]	; (800c53c <LmHandlerRequestClass+0x110>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c512:	79fa      	ldrb	r2, [r7, #7]
 800c514:	4610      	mov	r0, r2
 800c516:	4798      	blx	r3
            break;
 800c518:	e009      	b.n	800c52e <LmHandlerRequestClass+0x102>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c51a:	23ff      	movs	r3, #255	; 0xff
 800c51c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c520:	e005      	b.n	800c52e <LmHandlerRequestClass+0x102>
        }
    }
 800c522:	bf00      	nop
 800c524:	e004      	b.n	800c530 <LmHandlerRequestClass+0x104>
            break;
 800c526:	bf00      	nop
 800c528:	e002      	b.n	800c530 <LmHandlerRequestClass+0x104>
            break;
 800c52a:	bf00      	nop
 800c52c:	e000      	b.n	800c530 <LmHandlerRequestClass+0x104>
            break;
 800c52e:	bf00      	nop
    return errorStatus;
 800c530:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c534:	4618      	mov	r0, r3
 800c536:	3730      	adds	r7, #48	; 0x30
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	20000538 	.word	0x20000538

0800c540 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b08c      	sub	sp, #48	; 0x30
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d102      	bne.n	800c554 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c54e:	f04f 33ff 	mov.w	r3, #4294967295
 800c552:	e010      	b.n	800c576 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c554:	2300      	movs	r3, #0
 800c556:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800c558:	f107 030c 	add.w	r3, r7, #12
 800c55c:	4618      	mov	r0, r3
 800c55e:	f004 fc3b 	bl	8010dd8 <LoRaMacMibGetRequestConfirm>
 800c562:	4603      	mov	r3, r0
 800c564:	2b00      	cmp	r3, #0
 800c566:	d002      	beq.n	800c56e <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c568:	f04f 33ff 	mov.w	r3, #4294967295
 800c56c:	e003      	b.n	800c576 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800c56e:	7c3a      	ldrb	r2, [r7, #16]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800c574:	2300      	movs	r3, #0
}
 800c576:	4618      	mov	r0, r3
 800c578:	3730      	adds	r7, #48	; 0x30
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
	...

0800c580 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b08c      	sub	sp, #48	; 0x30
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d102      	bne.n	800c594 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c58e:	f04f 33ff 	mov.w	r3, #4294967295
 800c592:	e016      	b.n	800c5c2 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800c594:	231f      	movs	r3, #31
 800c596:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800c598:	f107 030c 	add.w	r3, r7, #12
 800c59c:	4618      	mov	r0, r3
 800c59e:	f004 fc1b 	bl	8010dd8 <LoRaMacMibGetRequestConfirm>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d002      	beq.n	800c5ae <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c5a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ac:	e009      	b.n	800c5c2 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800c5ae:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f993 2000 	ldrsb.w	r2, [r3]
 800c5bc:	4b03      	ldr	r3, [pc, #12]	; (800c5cc <LmHandlerGetTxDatarate+0x4c>)
 800c5be:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800c5c0:	2300      	movs	r3, #0
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3730      	adds	r7, #48	; 0x30
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	20000524 	.word	0x20000524

0800c5d0 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b08c      	sub	sp, #48	; 0x30
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800c5d8:	2322      	movs	r3, #34	; 0x22
 800c5da:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c5e0:	f107 030c 	add.w	r3, r7, #12
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f004 fd7d 	bl	80110e4 <LoRaMacMibSetRequestConfirm>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d002      	beq.n	800c5f6 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800c5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c5f4:	e000      	b.n	800c5f8 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800c5f6:	2300      	movs	r3, #0
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3730      	adds	r7, #48	; 0x30
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800c608:	4b15      	ldr	r3, [pc, #84]	; (800c660 <McpsConfirm+0x60>)
 800c60a:	2201      	movs	r2, #1
 800c60c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	785a      	ldrb	r2, [r3, #1]
 800c612:	4b13      	ldr	r3, [pc, #76]	; (800c660 <McpsConfirm+0x60>)
 800c614:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	789b      	ldrb	r3, [r3, #2]
 800c61a:	b25a      	sxtb	r2, r3
 800c61c:	4b10      	ldr	r3, [pc, #64]	; (800c660 <McpsConfirm+0x60>)
 800c61e:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	68db      	ldr	r3, [r3, #12]
 800c624:	4a0e      	ldr	r2, [pc, #56]	; (800c660 <McpsConfirm+0x60>)
 800c626:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c62e:	4b0c      	ldr	r3, [pc, #48]	; (800c660 <McpsConfirm+0x60>)
 800c630:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	691b      	ldr	r3, [r3, #16]
 800c636:	b2da      	uxtb	r2, r3
 800c638:	4b09      	ldr	r3, [pc, #36]	; (800c660 <McpsConfirm+0x60>)
 800c63a:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	791b      	ldrb	r3, [r3, #4]
 800c640:	461a      	mov	r2, r3
 800c642:	4b07      	ldr	r3, [pc, #28]	; (800c660 <McpsConfirm+0x60>)
 800c644:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800c646:	4b07      	ldr	r3, [pc, #28]	; (800c664 <McpsConfirm+0x64>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c64c:	4804      	ldr	r0, [pc, #16]	; (800c660 <McpsConfirm+0x60>)
 800c64e:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800c650:	6879      	ldr	r1, [r7, #4]
 800c652:	2000      	movs	r0, #0
 800c654:	f000 f9de 	bl	800ca14 <LmHandlerPackagesNotify>
}
 800c658:	bf00      	nop
 800c65a:	3708      	adds	r7, #8
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}
 800c660:	200000a4 	.word	0x200000a4
 800c664:	20000538 	.word	0x20000538

0800c668 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b088      	sub	sp, #32
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800c672:	2300      	movs	r3, #0
 800c674:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800c676:	4b31      	ldr	r3, [pc, #196]	; (800c73c <McpsIndication+0xd4>)
 800c678:	2201      	movs	r2, #1
 800c67a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	785a      	ldrb	r2, [r3, #1]
 800c680:	4b2e      	ldr	r3, [pc, #184]	; (800c73c <McpsIndication+0xd4>)
 800c682:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800c684:	4b2d      	ldr	r3, [pc, #180]	; (800c73c <McpsIndication+0xd4>)
 800c686:	785b      	ldrb	r3, [r3, #1]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d153      	bne.n	800c734 <McpsIndication+0xcc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	791b      	ldrb	r3, [r3, #4]
 800c690:	b25a      	sxtb	r2, r3
 800c692:	4b2a      	ldr	r3, [pc, #168]	; (800c73c <McpsIndication+0xd4>)
 800c694:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c69c:	b25a      	sxtb	r2, r3
 800c69e:	4b27      	ldr	r3, [pc, #156]	; (800c73c <McpsIndication+0xd4>)
 800c6a0:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c6a8:	4b24      	ldr	r3, [pc, #144]	; (800c73c <McpsIndication+0xd4>)
 800c6aa:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	78da      	ldrb	r2, [r3, #3]
 800c6b0:	4b22      	ldr	r3, [pc, #136]	; (800c73c <McpsIndication+0xd4>)
 800c6b2:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	691b      	ldr	r3, [r3, #16]
 800c6b8:	4a20      	ldr	r2, [pc, #128]	; (800c73c <McpsIndication+0xd4>)
 800c6ba:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	78db      	ldrb	r3, [r3, #3]
 800c6c0:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	7b1b      	ldrb	r3, [r3, #12]
 800c6c6:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	689b      	ldr	r3, [r3, #8]
 800c6cc:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800c6ce:	4b1c      	ldr	r3, [pc, #112]	; (800c740 <McpsIndication+0xd8>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d4:	f107 0218 	add.w	r2, r7, #24
 800c6d8:	4918      	ldr	r1, [pc, #96]	; (800c73c <McpsIndication+0xd4>)
 800c6da:	4610      	mov	r0, r2
 800c6dc:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800c6de:	4b18      	ldr	r3, [pc, #96]	; (800c740 <McpsIndication+0xd8>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d007      	beq.n	800c6f8 <McpsIndication+0x90>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	7e1b      	ldrb	r3, [r3, #24]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d003      	beq.n	800c6f8 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800c6f0:	4b13      	ldr	r3, [pc, #76]	; (800c740 <McpsIndication+0xd8>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6f6:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800c6f8:	6879      	ldr	r1, [r7, #4]
 800c6fa:	2001      	movs	r0, #1
 800c6fc:	f000 f98a 	bl	800ca14 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800c700:	f107 0317 	add.w	r3, r7, #23
 800c704:	4618      	mov	r0, r3
 800c706:	f7ff ff1b 	bl	800c540 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	795b      	ldrb	r3, [r3, #5]
 800c70e:	2b01      	cmp	r3, #1
 800c710:	d111      	bne.n	800c736 <McpsIndication+0xce>
 800c712:	7dfb      	ldrb	r3, [r7, #23]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d10e      	bne.n	800c736 <McpsIndication+0xce>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800c718:	2300      	movs	r3, #0
 800c71a:	733b      	strb	r3, [r7, #12]
 800c71c:	2300      	movs	r3, #0
 800c71e:	737b      	strb	r3, [r7, #13]
 800c720:	2300      	movs	r3, #0
 800c722:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
 800c724:	f107 030c 	add.w	r3, r7, #12
 800c728:	2201      	movs	r2, #1
 800c72a:	2100      	movs	r1, #0
 800c72c:	4618      	mov	r0, r3
 800c72e:	f7ff fd7d 	bl	800c22c <LmHandlerSend>
 800c732:	e000      	b.n	800c736 <McpsIndication+0xce>
        return;
 800c734:	bf00      	nop
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800c736:	3720      	adds	r7, #32
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	200000c0 	.word	0x200000c0
 800c740:	20000538 	.word	0x20000538

0800c744 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b08c      	sub	sp, #48	; 0x30
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800c74c:	4b3d      	ldr	r3, [pc, #244]	; (800c844 <MlmeConfirm+0x100>)
 800c74e:	2200      	movs	r2, #0
 800c750:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	785a      	ldrb	r2, [r3, #1]
 800c756:	4b3b      	ldr	r3, [pc, #236]	; (800c844 <MlmeConfirm+0x100>)
 800c758:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800c75a:	4b3b      	ldr	r3, [pc, #236]	; (800c848 <MlmeConfirm+0x104>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c760:	4838      	ldr	r0, [pc, #224]	; (800c844 <MlmeConfirm+0x100>)
 800c762:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800c764:	6879      	ldr	r1, [r7, #4]
 800c766:	2002      	movs	r0, #2
 800c768:	f000 f954 	bl	800ca14 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	3b01      	subs	r3, #1
 800c772:	2b0c      	cmp	r3, #12
 800c774:	d85e      	bhi.n	800c834 <MlmeConfirm+0xf0>
 800c776:	a201      	add	r2, pc, #4	; (adr r2, 800c77c <MlmeConfirm+0x38>)
 800c778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c77c:	0800c7b1 	.word	0x0800c7b1
 800c780:	0800c835 	.word	0x0800c835
 800c784:	0800c835 	.word	0x0800c835
 800c788:	0800c803 	.word	0x0800c803
 800c78c:	0800c835 	.word	0x0800c835
 800c790:	0800c835 	.word	0x0800c835
 800c794:	0800c835 	.word	0x0800c835
 800c798:	0800c835 	.word	0x0800c835
 800c79c:	0800c835 	.word	0x0800c835
 800c7a0:	0800c835 	.word	0x0800c835
 800c7a4:	0800c835 	.word	0x0800c835
 800c7a8:	0800c81b 	.word	0x0800c81b
 800c7ac:	0800c835 	.word	0x0800c835
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800c7b0:	2306      	movs	r3, #6
 800c7b2:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c7b4:	f107 030c 	add.w	r3, r7, #12
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f004 fb0d 	bl	8010dd8 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	4a22      	ldr	r2, [pc, #136]	; (800c84c <MlmeConfirm+0x108>)
 800c7c2:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800c7c4:	4822      	ldr	r0, [pc, #136]	; (800c850 <MlmeConfirm+0x10c>)
 800c7c6:	f7ff fedb 	bl	800c580 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	785b      	ldrb	r3, [r3, #1]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d108      	bne.n	800c7e4 <MlmeConfirm+0xa0>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c7d2:	4b20      	ldr	r3, [pc, #128]	; (800c854 <MlmeConfirm+0x110>)
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800c7d8:	4b1f      	ldr	r3, [pc, #124]	; (800c858 <MlmeConfirm+0x114>)
 800c7da:	785b      	ldrb	r3, [r3, #1]
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f7ff fe25 	bl	800c42c <LmHandlerRequestClass>
 800c7e2:	e002      	b.n	800c7ea <MlmeConfirm+0xa6>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800c7e4:	4b1b      	ldr	r3, [pc, #108]	; (800c854 <MlmeConfirm+0x110>)
 800c7e6:	22ff      	movs	r2, #255	; 0xff
 800c7e8:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c7ea:	4b17      	ldr	r3, [pc, #92]	; (800c848 <MlmeConfirm+0x104>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f0:	4818      	ldr	r0, [pc, #96]	; (800c854 <MlmeConfirm+0x110>)
 800c7f2:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	785b      	ldrb	r3, [r3, #1]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d11d      	bne.n	800c838 <MlmeConfirm+0xf4>
            {
                SecureElementPrintSessionKeys();
 800c7fc:	f7ff f89e 	bl	800b93c <SecureElementPrintSessionKeys>
            }
        }
        break;
 800c800:	e01a      	b.n	800c838 <MlmeConfirm+0xf4>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800c802:	4b16      	ldr	r3, [pc, #88]	; (800c85c <MlmeConfirm+0x118>)
 800c804:	2201      	movs	r2, #1
 800c806:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	7a1a      	ldrb	r2, [r3, #8]
 800c80c:	4b13      	ldr	r3, [pc, #76]	; (800c85c <MlmeConfirm+0x118>)
 800c80e:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	7a5a      	ldrb	r2, [r3, #9]
 800c814:	4b11      	ldr	r3, [pc, #68]	; (800c85c <MlmeConfirm+0x118>)
 800c816:	74da      	strb	r2, [r3, #19]
        }
        break;
 800c818:	e00f      	b.n	800c83a <MlmeConfirm+0xf6>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	785b      	ldrb	r3, [r3, #1]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d105      	bne.n	800c82e <MlmeConfirm+0xea>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800c822:	4b0d      	ldr	r3, [pc, #52]	; (800c858 <MlmeConfirm+0x114>)
 800c824:	7b1b      	ldrb	r3, [r3, #12]
 800c826:	4618      	mov	r0, r3
 800c828:	f7ff fdf4 	bl	800c414 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800c82c:	e005      	b.n	800c83a <MlmeConfirm+0xf6>
                LmHandlerDeviceTimeReq( );
 800c82e:	f7ff fdd5 	bl	800c3dc <LmHandlerDeviceTimeReq>
        break;
 800c832:	e002      	b.n	800c83a <MlmeConfirm+0xf6>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800c834:	bf00      	nop
 800c836:	e000      	b.n	800c83a <MlmeConfirm+0xf6>
        break;
 800c838:	bf00      	nop
    }
}
 800c83a:	bf00      	nop
 800c83c:	3730      	adds	r7, #48	; 0x30
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	200000a4 	.word	0x200000a4
 800c848:	20000538 	.word	0x20000538
 800c84c:	20000078 	.word	0x20000078
 800c850:	200000a0 	.word	0x200000a0
 800c854:	2000009c 	.word	0x2000009c
 800c858:	20000524 	.word	0x20000524
 800c85c:	200000c0 	.word	0x200000c0

0800c860 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800c86a:	4b2f      	ldr	r3, [pc, #188]	; (800c928 <MlmeIndication+0xc8>)
 800c86c:	2200      	movs	r2, #0
 800c86e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	785a      	ldrb	r2, [r3, #1]
 800c874:	4b2c      	ldr	r3, [pc, #176]	; (800c928 <MlmeIndication+0xc8>)
 800c876:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	789b      	ldrb	r3, [r3, #2]
 800c87c:	b25a      	sxtb	r2, r3
 800c87e:	4b2a      	ldr	r3, [pc, #168]	; (800c928 <MlmeIndication+0xc8>)
 800c880:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c888:	b25a      	sxtb	r2, r3
 800c88a:	4b27      	ldr	r3, [pc, #156]	; (800c928 <MlmeIndication+0xc8>)
 800c88c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c894:	4b24      	ldr	r3, [pc, #144]	; (800c928 <MlmeIndication+0xc8>)
 800c896:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	78da      	ldrb	r2, [r3, #3]
 800c89c:	4b22      	ldr	r3, [pc, #136]	; (800c928 <MlmeIndication+0xc8>)
 800c89e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	4a20      	ldr	r2, [pc, #128]	; (800c928 <MlmeIndication+0xc8>)
 800c8a6:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	2b0b      	cmp	r3, #11
 800c8ae:	d009      	beq.n	800c8c4 <MlmeIndication+0x64>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	2b0f      	cmp	r3, #15
 800c8b6:	d005      	beq.n	800c8c4 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800c8b8:	4b1c      	ldr	r3, [pc, #112]	; (800c92c <MlmeIndication+0xcc>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8be:	491a      	ldr	r1, [pc, #104]	; (800c928 <MlmeIndication+0xc8>)
 800c8c0:	2000      	movs	r0, #0
 800c8c2:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800c8c4:	6879      	ldr	r1, [r7, #4]
 800c8c6:	2003      	movs	r0, #3
 800c8c8:	f000 f8a4 	bl	800ca14 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	2b0f      	cmp	r3, #15
 800c8d2:	d01e      	beq.n	800c912 <MlmeIndication+0xb2>
 800c8d4:	2b0f      	cmp	r3, #15
 800c8d6:	dc1e      	bgt.n	800c916 <MlmeIndication+0xb6>
 800c8d8:	2b07      	cmp	r3, #7
 800c8da:	d002      	beq.n	800c8e2 <MlmeIndication+0x82>
 800c8dc:	2b0b      	cmp	r3, #11
 800c8de:	d01c      	beq.n	800c91a <MlmeIndication+0xba>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800c8e0:	e019      	b.n	800c916 <MlmeIndication+0xb6>
            LmHandlerAppData_t appData =
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	723b      	strb	r3, [r7, #8]
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	727b      	strb	r3, [r7, #9]
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	60fb      	str	r3, [r7, #12]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800c8ee:	4b10      	ldr	r3, [pc, #64]	; (800c930 <MlmeIndication+0xd0>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	68db      	ldr	r3, [r3, #12]
 800c8f4:	4798      	blx	r3
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	f083 0301 	eor.w	r3, r3, #1
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d00d      	beq.n	800c91e <MlmeIndication+0xbe>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800c902:	f107 0308 	add.w	r3, r7, #8
 800c906:	2201      	movs	r2, #1
 800c908:	2100      	movs	r1, #0
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7ff fc8e 	bl	800c22c <LmHandlerSend>
        break;
 800c910:	e005      	b.n	800c91e <MlmeIndication+0xbe>
        break;
 800c912:	bf00      	nop
 800c914:	e004      	b.n	800c920 <MlmeIndication+0xc0>
        break;
 800c916:	bf00      	nop
 800c918:	e002      	b.n	800c920 <MlmeIndication+0xc0>
        break;
 800c91a:	bf00      	nop
 800c91c:	e000      	b.n	800c920 <MlmeIndication+0xc0>
        break;
 800c91e:	bf00      	nop
    }
}
 800c920:	bf00      	nop
 800c922:	3710      	adds	r7, #16
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}
 800c928:	200000c0 	.word	0x200000c0
 800c92c:	20000538 	.word	0x20000538
 800c930:	20000510 	.word	0x20000510

0800c934 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
 800c93a:	4603      	mov	r3, r0
 800c93c:	6039      	str	r1, [r7, #0]
 800c93e:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800c940:	2300      	movs	r3, #0
 800c942:	60fb      	str	r3, [r7, #12]
    switch( id )
 800c944:	79fb      	ldrb	r3, [r7, #7]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d103      	bne.n	800c952 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800c94a:	f000 f9db 	bl	800cd04 <LmhpCompliancePackageFactory>
 800c94e:	60f8      	str	r0, [r7, #12]
            break;
 800c950:	e000      	b.n	800c954 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800c952:	bf00      	nop
        }
    }
    if( package != NULL )
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d02b      	beq.n	800c9b2 <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800c95a:	79fb      	ldrb	r3, [r7, #7]
 800c95c:	4918      	ldr	r1, [pc, #96]	; (800c9c0 <LmHandlerPackageRegister+0x8c>)
 800c95e:	68fa      	ldr	r2, [r7, #12]
 800c960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800c964:	79fb      	ldrb	r3, [r7, #7]
 800c966:	4a16      	ldr	r2, [pc, #88]	; (800c9c0 <LmHandlerPackageRegister+0x8c>)
 800c968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c96c:	4a15      	ldr	r2, [pc, #84]	; (800c9c4 <LmHandlerPackageRegister+0x90>)
 800c96e:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800c970:	79fb      	ldrb	r3, [r7, #7]
 800c972:	4a13      	ldr	r2, [pc, #76]	; (800c9c0 <LmHandlerPackageRegister+0x8c>)
 800c974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c978:	4a13      	ldr	r2, [pc, #76]	; (800c9c8 <LmHandlerPackageRegister+0x94>)
 800c97a:	62da      	str	r2, [r3, #44]	; 0x2c
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800c97c:	79fb      	ldrb	r3, [r7, #7]
 800c97e:	4a10      	ldr	r2, [pc, #64]	; (800c9c0 <LmHandlerPackageRegister+0x8c>)
 800c980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c984:	4a11      	ldr	r2, [pc, #68]	; (800c9cc <LmHandlerPackageRegister+0x98>)
 800c986:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800c988:	4b11      	ldr	r3, [pc, #68]	; (800c9d0 <LmHandlerPackageRegister+0x9c>)
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	79fb      	ldrb	r3, [r7, #7]
 800c98e:	490c      	ldr	r1, [pc, #48]	; (800c9c0 <LmHandlerPackageRegister+0x8c>)
 800c990:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c994:	6992      	ldr	r2, [r2, #24]
 800c996:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800c998:	79fb      	ldrb	r3, [r7, #7]
 800c99a:	4a09      	ldr	r2, [pc, #36]	; (800c9c0 <LmHandlerPackageRegister+0x8c>)
 800c99c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	4a0c      	ldr	r2, [pc, #48]	; (800c9d4 <LmHandlerPackageRegister+0xa0>)
 800c9a4:	6851      	ldr	r1, [r2, #4]
 800c9a6:	4a0b      	ldr	r2, [pc, #44]	; (800c9d4 <LmHandlerPackageRegister+0xa0>)
 800c9a8:	7852      	ldrb	r2, [r2, #1]
 800c9aa:	6838      	ldr	r0, [r7, #0]
 800c9ac:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	e001      	b.n	800c9b6 <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c9b2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3710      	adds	r7, #16
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	20000510 	.word	0x20000510
 800c9c4:	0800c0f5 	.word	0x0800c0f5
 800c9c8:	0800c22d 	.word	0x0800c22d
 800c9cc:	0800c3dd 	.word	0x0800c3dd
 800c9d0:	20000538 	.word	0x20000538
 800c9d4:	200000d4 	.word	0x200000d4

0800c9d8 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b082      	sub	sp, #8
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	4603      	mov	r3, r0
 800c9e0:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800c9e2:	79fb      	ldrb	r3, [r7, #7]
 800c9e4:	2b04      	cmp	r3, #4
 800c9e6:	d80e      	bhi.n	800ca06 <LmHandlerPackageIsInitialized+0x2e>
 800c9e8:	79fb      	ldrb	r3, [r7, #7]
 800c9ea:	4a09      	ldr	r2, [pc, #36]	; (800ca10 <LmHandlerPackageIsInitialized+0x38>)
 800c9ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9f0:	689b      	ldr	r3, [r3, #8]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d007      	beq.n	800ca06 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800c9f6:	79fb      	ldrb	r3, [r7, #7]
 800c9f8:	4a05      	ldr	r2, [pc, #20]	; (800ca10 <LmHandlerPackageIsInitialized+0x38>)
 800c9fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9fe:	689b      	ldr	r3, [r3, #8]
 800ca00:	4798      	blx	r3
 800ca02:	4603      	mov	r3, r0
 800ca04:	e000      	b.n	800ca08 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800ca06:	2300      	movs	r3, #0
    }
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3708      	adds	r7, #8
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	20000510 	.word	0x20000510

0800ca14 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b084      	sub	sp, #16
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	6039      	str	r1, [r7, #0]
 800ca1e:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ca20:	2300      	movs	r3, #0
 800ca22:	73fb      	strb	r3, [r7, #15]
 800ca24:	e07e      	b.n	800cb24 <LmHandlerPackagesNotify+0x110>
    {
        if( LmHandlerPackages[i] != NULL )
 800ca26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca2a:	4a43      	ldr	r2, [pc, #268]	; (800cb38 <LmHandlerPackagesNotify+0x124>)
 800ca2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d066      	beq.n	800cb02 <LmHandlerPackagesNotify+0xee>
        {
            switch( notifyType )
 800ca34:	79fb      	ldrb	r3, [r7, #7]
 800ca36:	2b03      	cmp	r3, #3
 800ca38:	d865      	bhi.n	800cb06 <LmHandlerPackagesNotify+0xf2>
 800ca3a:	a201      	add	r2, pc, #4	; (adr r2, 800ca40 <LmHandlerPackagesNotify+0x2c>)
 800ca3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca40:	0800ca51 	.word	0x0800ca51
 800ca44:	0800ca73 	.word	0x0800ca73
 800ca48:	0800cabf 	.word	0x0800cabf
 800ca4c:	0800cae1 	.word	0x0800cae1
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800ca50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca54:	4a38      	ldr	r2, [pc, #224]	; (800cb38 <LmHandlerPackagesNotify+0x124>)
 800ca56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca5a:	699b      	ldr	r3, [r3, #24]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d054      	beq.n	800cb0a <LmHandlerPackagesNotify+0xf6>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800ca60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca64:	4a34      	ldr	r2, [pc, #208]	; (800cb38 <LmHandlerPackagesNotify+0x124>)
 800ca66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca6a:	699b      	ldr	r3, [r3, #24]
 800ca6c:	6838      	ldr	r0, [r7, #0]
 800ca6e:	4798      	blx	r3
                    }
                    break;
 800ca70:	e04b      	b.n	800cb0a <LmHandlerPackagesNotify+0xf6>
                }
                case PACKAGE_MCPS_INDICATION:
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800ca72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca76:	4a30      	ldr	r2, [pc, #192]	; (800cb38 <LmHandlerPackagesNotify+0x124>)
 800ca78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca7c:	69db      	ldr	r3, [r3, #28]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d045      	beq.n	800cb0e <LmHandlerPackagesNotify+0xfa>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800ca82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca86:	4a2c      	ldr	r2, [pc, #176]	; (800cb38 <LmHandlerPackagesNotify+0x124>)
 800ca88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca8c:	781a      	ldrb	r2, [r3, #0]
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d00a      	beq.n	800caac <LmHandlerPackagesNotify+0x98>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800ca96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d137      	bne.n	800cb0e <LmHandlerPackagesNotify+0xfa>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800ca9e:	4b26      	ldr	r3, [pc, #152]	; (800cb38 <LmHandlerPackagesNotify+0x124>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	4798      	blx	r3
 800caa6:	4603      	mov	r3, r0
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d030      	beq.n	800cb0e <LmHandlerPackagesNotify+0xfa>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800caac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cab0:	4a21      	ldr	r2, [pc, #132]	; (800cb38 <LmHandlerPackagesNotify+0x124>)
 800cab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cab6:	69db      	ldr	r3, [r3, #28]
 800cab8:	6838      	ldr	r0, [r7, #0]
 800caba:	4798      	blx	r3
                    }
                    break;
 800cabc:	e027      	b.n	800cb0e <LmHandlerPackagesNotify+0xfa>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800cabe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cac2:	4a1d      	ldr	r2, [pc, #116]	; (800cb38 <LmHandlerPackagesNotify+0x124>)
 800cac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cac8:	6a1b      	ldr	r3, [r3, #32]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d021      	beq.n	800cb12 <LmHandlerPackagesNotify+0xfe>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800cace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cad2:	4a19      	ldr	r2, [pc, #100]	; (800cb38 <LmHandlerPackagesNotify+0x124>)
 800cad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cad8:	6a1b      	ldr	r3, [r3, #32]
 800cada:	6838      	ldr	r0, [r7, #0]
 800cadc:	4798      	blx	r3
                    }
                    break;
 800cade:	e018      	b.n	800cb12 <LmHandlerPackagesNotify+0xfe>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800cae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cae4:	4a14      	ldr	r2, [pc, #80]	; (800cb38 <LmHandlerPackagesNotify+0x124>)
 800cae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800caea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caec:	2b00      	cmp	r3, #0
 800caee:	d012      	beq.n	800cb16 <LmHandlerPackagesNotify+0x102>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800caf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caf4:	4a10      	ldr	r2, [pc, #64]	; (800cb38 <LmHandlerPackagesNotify+0x124>)
 800caf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cafc:	6838      	ldr	r0, [r7, #0]
 800cafe:	4798      	blx	r3
                    }
                    break;
 800cb00:	e009      	b.n	800cb16 <LmHandlerPackagesNotify+0x102>
                default:
                {
                    break;
                }
            }
        }
 800cb02:	bf00      	nop
 800cb04:	e008      	b.n	800cb18 <LmHandlerPackagesNotify+0x104>
                    break;
 800cb06:	bf00      	nop
 800cb08:	e006      	b.n	800cb18 <LmHandlerPackagesNotify+0x104>
                    break;
 800cb0a:	bf00      	nop
 800cb0c:	e004      	b.n	800cb18 <LmHandlerPackagesNotify+0x104>
                    break;
 800cb0e:	bf00      	nop
 800cb10:	e002      	b.n	800cb18 <LmHandlerPackagesNotify+0x104>
                    break;
 800cb12:	bf00      	nop
 800cb14:	e000      	b.n	800cb18 <LmHandlerPackagesNotify+0x104>
                    break;
 800cb16:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cb18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	3301      	adds	r3, #1
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	73fb      	strb	r3, [r7, #15]
 800cb24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb28:	2b04      	cmp	r3, #4
 800cb2a:	f77f af7c 	ble.w	800ca26 <LmHandlerPackagesNotify+0x12>
    }
}
 800cb2e:	bf00      	nop
 800cb30:	bf00      	nop
 800cb32:	3710      	adds	r7, #16
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	20000510 	.word	0x20000510

0800cb3c <LmHandlerPackagesProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cb42:	2300      	movs	r3, #0
 800cb44:	71fb      	strb	r3, [r7, #7]
 800cb46:	e022      	b.n	800cb8e <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800cb48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb4c:	4a14      	ldr	r2, [pc, #80]	; (800cba0 <LmHandlerPackagesProcess+0x64>)
 800cb4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d015      	beq.n	800cb82 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800cb56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb5a:	4a11      	ldr	r2, [pc, #68]	; (800cba0 <LmHandlerPackagesProcess+0x64>)
 800cb5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb60:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d00d      	beq.n	800cb82 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800cb66:	79fb      	ldrb	r3, [r7, #7]
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7ff ff35 	bl	800c9d8 <LmHandlerPackageIsInitialized>
 800cb6e:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d006      	beq.n	800cb82 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800cb74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb78:	4a09      	ldr	r2, [pc, #36]	; (800cba0 <LmHandlerPackagesProcess+0x64>)
 800cb7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb7e:	691b      	ldr	r3, [r3, #16]
 800cb80:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cb82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	3301      	adds	r3, #1
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	71fb      	strb	r3, [r7, #7]
 800cb8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb92:	2b04      	cmp	r3, #4
 800cb94:	ddd8      	ble.n	800cb48 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800cb96:	bf00      	nop
 800cb98:	bf00      	nop
 800cb9a:	3708      	adds	r7, #8
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}
 800cba0:	20000510 	.word	0x20000510

0800cba4 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b083      	sub	sp, #12
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	4603      	mov	r3, r0
 800cbac:	6039      	str	r1, [r7, #0]
 800cbae:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d102      	bne.n	800cbbc <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800cbb6:	f04f 33ff 	mov.w	r3, #4294967295
 800cbba:	e00e      	b.n	800cbda <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800cbbc:	79fb      	ldrb	r3, [r7, #7]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d002      	beq.n	800cbc8 <LmHandlerGetVersion+0x24>
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	d004      	beq.n	800cbd0 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800cbc6:	e007      	b.n	800cbd8 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	4a06      	ldr	r2, [pc, #24]	; (800cbe4 <LmHandlerGetVersion+0x40>)
 800cbcc:	601a      	str	r2, [r3, #0]
            break;
 800cbce:	e003      	b.n	800cbd8 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	4a05      	ldr	r2, [pc, #20]	; (800cbe8 <LmHandlerGetVersion+0x44>)
 800cbd4:	601a      	str	r2, [r3, #0]
            break;
 800cbd6:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800cbd8:	2300      	movs	r3, #0
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	370c      	adds	r7, #12
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bc80      	pop	{r7}
 800cbe2:	4770      	bx	lr
 800cbe4:	01000300 	.word	0x01000300
 800cbe8:	01010003 	.word	0x01010003

0800cbec <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800cbf0:	f005 f826 	bl	8011c40 <LoRaMacDeInitialization>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d101      	bne.n	800cbfe <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	e001      	b.n	800cc02 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cbfe:	f06f 0301 	mvn.w	r3, #1
    }
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	bd80      	pop	{r7, pc}

0800cc06 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800cc06:	b580      	push	{r7, lr}
 800cc08:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800cc0a:	f004 f825 	bl	8010c58 <LoRaMacHalt>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d101      	bne.n	800cc18 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800cc14:	2300      	movs	r3, #0
 800cc16:	e001      	b.n	800cc1c <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cc18:	f06f 0301 	mvn.w	r3, #1
    }
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b08e      	sub	sp, #56	; 0x38
 800cc24:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800cc26:	2300      	movs	r3, #0
 800cc28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800cc30:	f7ff ffe9 	bl	800cc06 <LmHandlerHalt>
 800cc34:	4603      	mov	r3, r0
 800cc36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800cc3a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d12f      	bne.n	800cca2 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800cc42:	f000 f84f 	bl	800cce4 <NvmDataMgmtStoreBegin>
 800cc46:	6338      	str	r0, [r7, #48]	; 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800cc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc4a:	f113 0f02 	cmn.w	r3, #2
 800cc4e:	d103      	bne.n	800cc58 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800cc50:	23f8      	movs	r3, #248	; 0xf8
 800cc52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800cc56:	e01c      	b.n	800cc92 <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800cc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d104      	bne.n	800cc68 <LmHandlerNvmDataStore+0x48>
 800cc5e:	4b1b      	ldr	r3, [pc, #108]	; (800cccc <LmHandlerNvmDataStore+0xac>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	695b      	ldr	r3, [r3, #20]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d103      	bne.n	800cc70 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800cc68:	23ff      	movs	r3, #255	; 0xff
 800cc6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800cc6e:	e010      	b.n	800cc92 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800cc70:	2326      	movs	r3, #38	; 0x26
 800cc72:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800cc74:	1d3b      	adds	r3, r7, #4
 800cc76:	4618      	mov	r0, r3
 800cc78:	f004 f8ae 	bl	8010dd8 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	62fb      	str	r3, [r7, #44]	; 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800cc80:	f44f 63e5 	mov.w	r3, #1832	; 0x728
 800cc84:	62bb      	str	r3, [r7, #40]	; 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800cc86:	4b11      	ldr	r3, [pc, #68]	; (800cccc <LmHandlerNvmDataStore+0xac>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	695b      	ldr	r3, [r3, #20]
 800cc8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc90:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800cc92:	f000 f82f 	bl	800ccf4 <NvmDataMgmtStoreEnd>
 800cc96:	4603      	mov	r3, r0
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d002      	beq.n	800cca2 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800cc9c:	23ff      	movs	r3, #255	; 0xff
 800cc9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800cca2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d109      	bne.n	800ccbe <LmHandlerNvmDataStore+0x9e>
 800ccaa:	4b08      	ldr	r3, [pc, #32]	; (800cccc <LmHandlerNvmDataStore+0xac>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	69db      	ldr	r3, [r3, #28]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d004      	beq.n	800ccbe <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800ccb4:	4b05      	ldr	r3, [pc, #20]	; (800cccc <LmHandlerNvmDataStore+0xac>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	69db      	ldr	r3, [r3, #28]
 800ccba:	2001      	movs	r0, #1
 800ccbc:	4798      	blx	r3
    }

    return lmhStatus;
 800ccbe:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3738      	adds	r7, #56	; 0x38
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}
 800ccca:	bf00      	nop
 800cccc:	20000538 	.word	0x20000538

0800ccd0 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b083      	sub	sp, #12
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800ccda:	bf00      	nop
 800ccdc:	370c      	adds	r7, #12
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bc80      	pop	{r7}
 800cce2:	4770      	bx	lr

0800cce4 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800cce4:	b480      	push	{r7}
 800cce6:	af00      	add	r7, sp, #0
    {
        return NVM_DATA_NOT_AVAILABLE;
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 800cce8:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bc80      	pop	{r7}
 800ccf2:	4770      	bx	lr

0800ccf4 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 800ccf8:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bc80      	pop	{r7}
 800cd02:	4770      	bx	lr

0800cd04 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800cd04:	b480      	push	{r7}
 800cd06:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800cd08:	4b02      	ldr	r3, [pc, #8]	; (800cd14 <LmhpCompliancePackageFactory+0x10>)
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bc80      	pop	{r7}
 800cd10:	4770      	bx	lr
 800cd12:	bf00      	nop
 800cd14:	200000dc 	.word	0x200000dc

0800cd18 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b085      	sub	sp, #20
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	4613      	mov	r3, r2
 800cd24:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d00f      	beq.n	800cd4c <LmhpComplianceInit+0x34>
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d00c      	beq.n	800cd4c <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800cd32:	4a0c      	ldr	r2, [pc, #48]	; (800cd64 <LmhpComplianceInit+0x4c>)
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800cd38:	4a0b      	ldr	r2, [pc, #44]	; (800cd68 <LmhpComplianceInit+0x50>)
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800cd3e:	4a0a      	ldr	r2, [pc, #40]	; (800cd68 <LmhpComplianceInit+0x50>)
 800cd40:	79fb      	ldrb	r3, [r7, #7]
 800cd42:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800cd44:	4b08      	ldr	r3, [pc, #32]	; (800cd68 <LmhpComplianceInit+0x50>)
 800cd46:	2201      	movs	r2, #1
 800cd48:	701a      	strb	r2, [r3, #0]
 800cd4a:	e006      	b.n	800cd5a <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800cd4c:	4b05      	ldr	r3, [pc, #20]	; (800cd64 <LmhpComplianceInit+0x4c>)
 800cd4e:	2200      	movs	r2, #0
 800cd50:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800cd52:	4b05      	ldr	r3, [pc, #20]	; (800cd68 <LmhpComplianceInit+0x50>)
 800cd54:	2200      	movs	r2, #0
 800cd56:	701a      	strb	r2, [r3, #0]
    }
}
 800cd58:	bf00      	nop
 800cd5a:	bf00      	nop
 800cd5c:	3714      	adds	r7, #20
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bc80      	pop	{r7}
 800cd62:	4770      	bx	lr
 800cd64:	20000684 	.word	0x20000684
 800cd68:	20000670 	.word	0x20000670

0800cd6c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800cd70:	4b02      	ldr	r3, [pc, #8]	; (800cd7c <LmhpComplianceIsInitialized+0x10>)
 800cd72:	781b      	ldrb	r3, [r3, #0]
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bc80      	pop	{r7}
 800cd7a:	4770      	bx	lr
 800cd7c:	20000670 	.word	0x20000670

0800cd80 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800cd80:	b480      	push	{r7}
 800cd82:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800cd84:	4b07      	ldr	r3, [pc, #28]	; (800cda4 <LmhpComplianceIsRunning+0x24>)
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	f083 0301 	eor.w	r3, r3, #1
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d001      	beq.n	800cd96 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800cd92:	2300      	movs	r3, #0
 800cd94:	e001      	b.n	800cd9a <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800cd96:	4b03      	ldr	r3, [pc, #12]	; (800cda4 <LmhpComplianceIsRunning+0x24>)
 800cd98:	785b      	ldrb	r3, [r3, #1]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bc80      	pop	{r7}
 800cda0:	4770      	bx	lr
 800cda2:	bf00      	nop
 800cda4:	20000670 	.word	0x20000670

0800cda8 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b083      	sub	sp, #12
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800cdb0:	4b0f      	ldr	r3, [pc, #60]	; (800cdf0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	f083 0301 	eor.w	r3, r3, #1
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d112      	bne.n	800cde4 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800cdbe:	4b0c      	ldr	r3, [pc, #48]	; (800cdf0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800cdc0:	785b      	ldrb	r3, [r3, #1]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d00f      	beq.n	800cde6 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	d10b      	bne.n	800cde6 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d007      	beq.n	800cde6 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800cdd6:	4b06      	ldr	r3, [pc, #24]	; (800cdf0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800cdd8:	899b      	ldrh	r3, [r3, #12]
 800cdda:	3301      	adds	r3, #1
 800cddc:	b29a      	uxth	r2, r3
 800cdde:	4b04      	ldr	r3, [pc, #16]	; (800cdf0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800cde0:	819a      	strh	r2, [r3, #12]
 800cde2:	e000      	b.n	800cde6 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800cde4:	bf00      	nop
    }
}
 800cde6:	370c      	adds	r7, #12
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bc80      	pop	{r7}
 800cdec:	4770      	bx	lr
 800cdee:	bf00      	nop
 800cdf0:	20000670 	.word	0x20000670

0800cdf4 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b083      	sub	sp, #12
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800cdfc:	4b12      	ldr	r3, [pc, #72]	; (800ce48 <LmhpComplianceOnMlmeConfirm+0x54>)
 800cdfe:	781b      	ldrb	r3, [r3, #0]
 800ce00:	f083 0301 	eor.w	r3, r3, #1
 800ce04:	b2db      	uxtb	r3, r3
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d116      	bne.n	800ce38 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800ce0a:	4b0f      	ldr	r3, [pc, #60]	; (800ce48 <LmhpComplianceOnMlmeConfirm+0x54>)
 800ce0c:	785b      	ldrb	r3, [r3, #1]
 800ce0e:	f083 0301 	eor.w	r3, r3, #1
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d111      	bne.n	800ce3c <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	2b04      	cmp	r3, #4
 800ce1e:	d10e      	bne.n	800ce3e <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800ce20:	4b09      	ldr	r3, [pc, #36]	; (800ce48 <LmhpComplianceOnMlmeConfirm+0x54>)
 800ce22:	2201      	movs	r2, #1
 800ce24:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	7a1a      	ldrb	r2, [r3, #8]
 800ce2a:	4b07      	ldr	r3, [pc, #28]	; (800ce48 <LmhpComplianceOnMlmeConfirm+0x54>)
 800ce2c:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	7a5a      	ldrb	r2, [r3, #9]
 800ce32:	4b05      	ldr	r3, [pc, #20]	; (800ce48 <LmhpComplianceOnMlmeConfirm+0x54>)
 800ce34:	741a      	strb	r2, [r3, #16]
 800ce36:	e002      	b.n	800ce3e <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800ce38:	bf00      	nop
 800ce3a:	e000      	b.n	800ce3e <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800ce3c:	bf00      	nop
    }
}
 800ce3e:	370c      	adds	r7, #12
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bc80      	pop	{r7}
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop
 800ce48:	20000670 	.word	0x20000670

0800ce4c <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b082      	sub	sp, #8
 800ce50:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800ce52:	4b33      	ldr	r3, [pc, #204]	; (800cf20 <LmhpComplianceTxProcess+0xd4>)
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	f083 0301 	eor.w	r3, r3, #1
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d002      	beq.n	800ce66 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800ce60:	f04f 33ff 	mov.w	r3, #4294967295
 800ce64:	e057      	b.n	800cf16 <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.IsRunning == false )
 800ce66:	4b2e      	ldr	r3, [pc, #184]	; (800cf20 <LmhpComplianceTxProcess+0xd4>)
 800ce68:	785b      	ldrb	r3, [r3, #1]
 800ce6a:	f083 0301 	eor.w	r3, r3, #1
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d001      	beq.n	800ce78 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ce74:	2300      	movs	r3, #0
 800ce76:	e04e      	b.n	800cf16 <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.LinkCheck == true )
 800ce78:	4b29      	ldr	r3, [pc, #164]	; (800cf20 <LmhpComplianceTxProcess+0xd4>)
 800ce7a:	7b9b      	ldrb	r3, [r3, #14]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d019      	beq.n	800ceb4 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800ce80:	4b27      	ldr	r3, [pc, #156]	; (800cf20 <LmhpComplianceTxProcess+0xd4>)
 800ce82:	2200      	movs	r2, #0
 800ce84:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800ce86:	4b26      	ldr	r3, [pc, #152]	; (800cf20 <LmhpComplianceTxProcess+0xd4>)
 800ce88:	2203      	movs	r2, #3
 800ce8a:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800ce8c:	4b24      	ldr	r3, [pc, #144]	; (800cf20 <LmhpComplianceTxProcess+0xd4>)
 800ce8e:	689b      	ldr	r3, [r3, #8]
 800ce90:	2205      	movs	r2, #5
 800ce92:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800ce94:	4b22      	ldr	r3, [pc, #136]	; (800cf20 <LmhpComplianceTxProcess+0xd4>)
 800ce96:	689b      	ldr	r3, [r3, #8]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	4a21      	ldr	r2, [pc, #132]	; (800cf20 <LmhpComplianceTxProcess+0xd4>)
 800ce9c:	7bd2      	ldrb	r2, [r2, #15]
 800ce9e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800cea0:	4b1f      	ldr	r3, [pc, #124]	; (800cf20 <LmhpComplianceTxProcess+0xd4>)
 800cea2:	689b      	ldr	r3, [r3, #8]
 800cea4:	3302      	adds	r3, #2
 800cea6:	4a1e      	ldr	r2, [pc, #120]	; (800cf20 <LmhpComplianceTxProcess+0xd4>)
 800cea8:	7c12      	ldrb	r2, [r2, #16]
 800ceaa:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800ceac:	4b1c      	ldr	r3, [pc, #112]	; (800cf20 <LmhpComplianceTxProcess+0xd4>)
 800ceae:	2201      	movs	r2, #1
 800ceb0:	709a      	strb	r2, [r3, #2]
 800ceb2:	e01c      	b.n	800ceee <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800ceb4:	4b1a      	ldr	r3, [pc, #104]	; (800cf20 <LmhpComplianceTxProcess+0xd4>)
 800ceb6:	789b      	ldrb	r3, [r3, #2]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d005      	beq.n	800cec8 <LmhpComplianceTxProcess+0x7c>
 800cebc:	2b04      	cmp	r3, #4
 800cebe:	d116      	bne.n	800ceee <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800cec0:	4b17      	ldr	r3, [pc, #92]	; (800cf20 <LmhpComplianceTxProcess+0xd4>)
 800cec2:	2201      	movs	r2, #1
 800cec4:	709a      	strb	r2, [r3, #2]
            break;
 800cec6:	e012      	b.n	800ceee <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800cec8:	4b15      	ldr	r3, [pc, #84]	; (800cf20 <LmhpComplianceTxProcess+0xd4>)
 800ceca:	2202      	movs	r2, #2
 800cecc:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800cece:	4b14      	ldr	r3, [pc, #80]	; (800cf20 <LmhpComplianceTxProcess+0xd4>)
 800ced0:	899b      	ldrh	r3, [r3, #12]
 800ced2:	0a1b      	lsrs	r3, r3, #8
 800ced4:	b29a      	uxth	r2, r3
 800ced6:	4b12      	ldr	r3, [pc, #72]	; (800cf20 <LmhpComplianceTxProcess+0xd4>)
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	b2d2      	uxtb	r2, r2
 800cedc:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800cede:	4b10      	ldr	r3, [pc, #64]	; (800cf20 <LmhpComplianceTxProcess+0xd4>)
 800cee0:	899a      	ldrh	r2, [r3, #12]
 800cee2:	4b0f      	ldr	r3, [pc, #60]	; (800cf20 <LmhpComplianceTxProcess+0xd4>)
 800cee4:	689b      	ldr	r3, [r3, #8]
 800cee6:	3301      	adds	r3, #1
 800cee8:	b2d2      	uxtb	r2, r2
 800ceea:	701a      	strb	r2, [r3, #0]
            break;
 800ceec:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800ceee:	23e0      	movs	r3, #224	; 0xe0
 800cef0:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800cef2:	4b0b      	ldr	r3, [pc, #44]	; (800cf20 <LmhpComplianceTxProcess+0xd4>)
 800cef4:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800cef6:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800cef8:	4b09      	ldr	r3, [pc, #36]	; (800cf20 <LmhpComplianceTxProcess+0xd4>)
 800cefa:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800cefc:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800cefe:	4809      	ldr	r0, [pc, #36]	; (800cf24 <LmhpComplianceTxProcess+0xd8>)
 800cf00:	f00d fb32 	bl	801a568 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800cf04:	4b08      	ldr	r3, [pc, #32]	; (800cf28 <LmhpComplianceTxProcess+0xdc>)
 800cf06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf08:	4a05      	ldr	r2, [pc, #20]	; (800cf20 <LmhpComplianceTxProcess+0xd4>)
 800cf0a:	78d2      	ldrb	r2, [r2, #3]
 800cf0c:	4611      	mov	r1, r2
 800cf0e:	4638      	mov	r0, r7
 800cf10:	2201      	movs	r2, #1
 800cf12:	4798      	blx	r3
 800cf14:	4603      	mov	r3, r0
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3708      	adds	r7, #8
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	20000670 	.word	0x20000670
 800cf24:	20000658 	.word	0x20000658
 800cf28:	200000dc 	.word	0x200000dc

0800cf2c <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b0a2      	sub	sp, #136	; 0x88
 800cf30:	af02      	add	r7, sp, #8
 800cf32:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800cf34:	4ba3      	ldr	r3, [pc, #652]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	f083 0301 	eor.w	r3, r3, #1
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	f040 81c2 	bne.w	800d2c8 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	7b5b      	ldrb	r3, [r3, #13]
 800cf48:	f083 0301 	eor.w	r3, r3, #1
 800cf4c:	b2db      	uxtb	r3, r3
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	f040 81bc 	bne.w	800d2cc <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800cf54:	4b9b      	ldr	r3, [pc, #620]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800cf56:	785b      	ldrb	r3, [r3, #1]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d00c      	beq.n	800cf76 <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	7b9b      	ldrb	r3, [r3, #14]
 800cf60:	f083 0301 	eor.w	r3, r3, #1
 800cf64:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d005      	beq.n	800cf76 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800cf6a:	4b96      	ldr	r3, [pc, #600]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800cf6c:	899b      	ldrh	r3, [r3, #12]
 800cf6e:	3301      	adds	r3, #1
 800cf70:	b29a      	uxth	r2, r3
 800cf72:	4b94      	ldr	r3, [pc, #592]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800cf74:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	78db      	ldrb	r3, [r3, #3]
 800cf7a:	2be0      	cmp	r3, #224	; 0xe0
 800cf7c:	f040 81a8 	bne.w	800d2d0 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800cf80:	4b90      	ldr	r3, [pc, #576]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800cf82:	785b      	ldrb	r3, [r3, #1]
 800cf84:	f083 0301 	eor.w	r3, r3, #1
 800cf88:	b2db      	uxtb	r3, r3
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d060      	beq.n	800d050 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	7b1b      	ldrb	r3, [r3, #12]
 800cf92:	2b04      	cmp	r3, #4
 800cf94:	f040 81a1 	bne.w	800d2da <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	689b      	ldr	r3, [r3, #8]
 800cf9c:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800cf9e:	2b01      	cmp	r3, #1
 800cfa0:	f040 819b 	bne.w	800d2da <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	689b      	ldr	r3, [r3, #8]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	f040 8194 	bne.w	800d2da <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	689b      	ldr	r3, [r3, #8]
 800cfb6:	3302      	adds	r3, #2
 800cfb8:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800cfba:	2b01      	cmp	r3, #1
 800cfbc:	f040 818d 	bne.w	800d2da <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	3303      	adds	r3, #3
 800cfc6:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800cfc8:	2b01      	cmp	r3, #1
 800cfca:	f040 8186 	bne.w	800d2da <LmhpComplianceOnMcpsIndication+0x3ae>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800cfce:	4b7d      	ldr	r3, [pc, #500]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800cfd4:	4b7b      	ldr	r3, [pc, #492]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800cfd6:	22e0      	movs	r2, #224	; 0xe0
 800cfd8:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800cfda:	4b7a      	ldr	r3, [pc, #488]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800cfdc:	2202      	movs	r2, #2
 800cfde:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800cfe0:	4b78      	ldr	r3, [pc, #480]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800cfe6:	4b77      	ldr	r3, [pc, #476]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800cfe8:	2200      	movs	r2, #0
 800cfea:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800cfec:	4b75      	ldr	r3, [pc, #468]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800cfee:	2200      	movs	r2, #0
 800cff0:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800cff2:	4b74      	ldr	r3, [pc, #464]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800cff4:	2200      	movs	r2, #0
 800cff6:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800cff8:	4b72      	ldr	r3, [pc, #456]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800cffa:	2201      	movs	r2, #1
 800cffc:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800cffe:	4b71      	ldr	r3, [pc, #452]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800d000:	2201      	movs	r2, #1
 800d002:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800d004:	2304      	movs	r3, #4
 800d006:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800d008:	2301      	movs	r3, #1
 800d00a:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d00c:	f107 0308 	add.w	r3, r7, #8
 800d010:	4618      	mov	r0, r3
 800d012:	f004 f867 	bl	80110e4 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800d016:	2000      	movs	r0, #0
 800d018:	f004 fdf4 	bl	8011c04 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800d01c:	4b6a      	ldr	r3, [pc, #424]	; (800d1c8 <LmhpComplianceOnMcpsIndication+0x29c>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	685b      	ldr	r3, [r3, #4]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d003      	beq.n	800d02e <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800d026:	4b68      	ldr	r3, [pc, #416]	; (800d1c8 <LmhpComplianceOnMcpsIndication+0x29c>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800d02e:	2300      	movs	r3, #0
 800d030:	9300      	str	r3, [sp, #0]
 800d032:	4b66      	ldr	r3, [pc, #408]	; (800d1cc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d034:	2200      	movs	r2, #0
 800d036:	f04f 31ff 	mov.w	r1, #4294967295
 800d03a:	4865      	ldr	r0, [pc, #404]	; (800d1d0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d03c:	f00d fa5e 	bl	801a4fc <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800d040:	f241 3188 	movw	r1, #5000	; 0x1388
 800d044:	4862      	ldr	r0, [pc, #392]	; (800d1d0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d046:	f00d fb6d 	bl	801a724 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800d04a:	f7ff feff 	bl	800ce4c <LmhpComplianceTxProcess>
 800d04e:	e144      	b.n	800d2da <LmhpComplianceOnMcpsIndication+0x3ae>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	689b      	ldr	r3, [r3, #8]
 800d054:	781a      	ldrb	r2, [r3, #0]
 800d056:	4b5b      	ldr	r3, [pc, #364]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800d058:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800d05a:	4b5a      	ldr	r3, [pc, #360]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800d05c:	789b      	ldrb	r3, [r3, #2]
 800d05e:	2b0a      	cmp	r3, #10
 800d060:	f200 8138 	bhi.w	800d2d4 <LmhpComplianceOnMcpsIndication+0x3a8>
 800d064:	a201      	add	r2, pc, #4	; (adr r2, 800d06c <LmhpComplianceOnMcpsIndication+0x140>)
 800d066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d06a:	bf00      	nop
 800d06c:	0800d099 	.word	0x0800d099
 800d070:	0800d0e3 	.word	0x0800d0e3
 800d074:	0800d0eb 	.word	0x0800d0eb
 800d078:	0800d0f9 	.word	0x0800d0f9
 800d07c:	0800d107 	.word	0x0800d107
 800d080:	0800d15f 	.word	0x0800d15f
 800d084:	0800d171 	.word	0x0800d171
 800d088:	0800d1d9 	.word	0x0800d1d9
 800d08c:	0800d281 	.word	0x0800d281
 800d090:	0800d293 	.word	0x0800d293
 800d094:	0800d2ad 	.word	0x0800d2ad
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800d098:	484d      	ldr	r0, [pc, #308]	; (800d1d0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d09a:	f00d fad3 	bl	801a644 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d09e:	4b49      	ldr	r3, [pc, #292]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d0a4:	4b47      	ldr	r3, [pc, #284]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 800d0aa:	2304      	movs	r3, #4
 800d0ac:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d0ae:	4b46      	ldr	r3, [pc, #280]	; (800d1c8 <LmhpComplianceOnMcpsIndication+0x29c>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d0b6:	f107 0308 	add.w	r3, r7, #8
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f004 f812 	bl	80110e4 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d0c0:	4b41      	ldr	r3, [pc, #260]	; (800d1c8 <LmhpComplianceOnMcpsIndication+0x29c>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	785b      	ldrb	r3, [r3, #1]
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f004 fd9c 	bl	8011c04 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d0cc:	4b3e      	ldr	r3, [pc, #248]	; (800d1c8 <LmhpComplianceOnMcpsIndication+0x29c>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	f000 8100 	beq.w	800d2d8 <LmhpComplianceOnMcpsIndication+0x3ac>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d0d8:	4b3b      	ldr	r3, [pc, #236]	; (800d1c8 <LmhpComplianceOnMcpsIndication+0x29c>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	4798      	blx	r3
                }
            }
            break;
 800d0e0:	e0fa      	b.n	800d2d8 <LmhpComplianceOnMcpsIndication+0x3ac>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800d0e2:	4b38      	ldr	r3, [pc, #224]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800d0e4:	2202      	movs	r2, #2
 800d0e6:	719a      	strb	r2, [r3, #6]
            break;
 800d0e8:	e0f7      	b.n	800d2da <LmhpComplianceOnMcpsIndication+0x3ae>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800d0ea:	4b36      	ldr	r3, [pc, #216]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800d0ec:	2201      	movs	r2, #1
 800d0ee:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d0f0:	4b34      	ldr	r3, [pc, #208]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	709a      	strb	r2, [r3, #2]
            break;
 800d0f6:	e0f0      	b.n	800d2da <LmhpComplianceOnMcpsIndication+0x3ae>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800d0f8:	4b32      	ldr	r3, [pc, #200]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d0fe:	4b31      	ldr	r3, [pc, #196]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800d100:	2201      	movs	r2, #1
 800d102:	709a      	strb	r2, [r3, #2]
            break;
 800d104:	e0e9      	b.n	800d2da <LmhpComplianceOnMcpsIndication+0x3ae>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	7b1a      	ldrb	r2, [r3, #12]
 800d10a:	4b2e      	ldr	r3, [pc, #184]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800d10c:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800d10e:	4b2d      	ldr	r3, [pc, #180]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	2204      	movs	r2, #4
 800d114:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d116:	2301      	movs	r3, #1
 800d118:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d11c:	e012      	b.n	800d144 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	689a      	ldr	r2, [r3, #8]
 800d122:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d126:	4413      	add	r3, r2
 800d128:	781a      	ldrb	r2, [r3, #0]
 800d12a:	4b26      	ldr	r3, [pc, #152]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800d12c:	6899      	ldr	r1, [r3, #8]
 800d12e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d132:	440b      	add	r3, r1
 800d134:	3201      	adds	r2, #1
 800d136:	b2d2      	uxtb	r2, r2
 800d138:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d13a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d13e:	3301      	adds	r3, #1
 800d140:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d144:	4b1f      	ldr	r3, [pc, #124]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800d146:	795a      	ldrb	r2, [r3, #5]
 800d148:	4b1e      	ldr	r3, [pc, #120]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800d14a:	799b      	ldrb	r3, [r3, #6]
 800d14c:	4293      	cmp	r3, r2
 800d14e:	bf28      	it	cs
 800d150:	4613      	movcs	r3, r2
 800d152:	b2db      	uxtb	r3, r3
 800d154:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800d158:	429a      	cmp	r2, r3
 800d15a:	d3e0      	bcc.n	800d11e <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800d15c:	e0bd      	b.n	800d2da <LmhpComplianceOnMcpsIndication+0x3ae>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800d15e:	2304      	movs	r3, #4
 800d160:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800d164:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d168:	4618      	mov	r0, r3
 800d16a:	f004 fb15 	bl	8011798 <LoRaMacMlmeRequest>
            }
            break;
 800d16e:	e0b4      	b.n	800d2da <LmhpComplianceOnMcpsIndication+0x3ae>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800d170:	4817      	ldr	r0, [pc, #92]	; (800d1d0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d172:	f00d fa67 	bl	801a644 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d176:	4b13      	ldr	r3, [pc, #76]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800d178:	2200      	movs	r2, #0
 800d17a:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d17c:	4b11      	ldr	r3, [pc, #68]	; (800d1c4 <LmhpComplianceOnMcpsIndication+0x298>)
 800d17e:	2200      	movs	r2, #0
 800d180:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 800d182:	2304      	movs	r3, #4
 800d184:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d186:	4b10      	ldr	r3, [pc, #64]	; (800d1c8 <LmhpComplianceOnMcpsIndication+0x29c>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d18e:	f107 0308 	add.w	r3, r7, #8
 800d192:	4618      	mov	r0, r3
 800d194:	f003 ffa6 	bl	80110e4 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d198:	4b0b      	ldr	r3, [pc, #44]	; (800d1c8 <LmhpComplianceOnMcpsIndication+0x29c>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	785b      	ldrb	r3, [r3, #1]
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f004 fd30 	bl	8011c04 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d1a4:	4b08      	ldr	r3, [pc, #32]	; (800d1c8 <LmhpComplianceOnMcpsIndication+0x29c>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	689b      	ldr	r3, [r3, #8]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d003      	beq.n	800d1b6 <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d1ae:	4b06      	ldr	r3, [pc, #24]	; (800d1c8 <LmhpComplianceOnMcpsIndication+0x29c>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	689b      	ldr	r3, [r3, #8]
 800d1b4:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800d1b6:	4b07      	ldr	r3, [pc, #28]	; (800d1d4 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800d1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ba:	2101      	movs	r1, #1
 800d1bc:	2002      	movs	r0, #2
 800d1be:	4798      	blx	r3
            }
            break;
 800d1c0:	e08b      	b.n	800d2da <LmhpComplianceOnMcpsIndication+0x3ae>
 800d1c2:	bf00      	nop
 800d1c4:	20000670 	.word	0x20000670
 800d1c8:	20000684 	.word	0x20000684
 800d1cc:	0800d2f1 	.word	0x0800d2f1
 800d1d0:	20000658 	.word	0x20000658
 800d1d4:	200000dc 	.word	0x200000dc
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	7b1b      	ldrb	r3, [r3, #12]
 800d1dc:	2b03      	cmp	r3, #3
 800d1de:	d113      	bne.n	800d208 <LmhpComplianceOnMcpsIndication+0x2dc>
                {
                    mlmeReq.Type = MLME_TXCW;
 800d1e0:	2305      	movs	r3, #5
 800d1e2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	021b      	lsls	r3, r3, #8
 800d1f0:	b21a      	sxth	r2, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	689b      	ldr	r3, [r3, #8]
 800d1f6:	3302      	adds	r3, #2
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	b21b      	sxth	r3, r3
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	b21b      	sxth	r3, r3
 800d200:	b29b      	uxth	r3, r3
 800d202:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800d206:	e032      	b.n	800d26e <LmhpComplianceOnMcpsIndication+0x342>
                }
                else if( mcpsIndication->BufferSize == 7 )
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	7b1b      	ldrb	r3, [r3, #12]
 800d20c:	2b07      	cmp	r3, #7
 800d20e:	d12e      	bne.n	800d26e <LmhpComplianceOnMcpsIndication+0x342>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800d210:	2306      	movs	r3, #6
 800d212:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	689b      	ldr	r3, [r3, #8]
 800d21a:	3301      	adds	r3, #1
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	021b      	lsls	r3, r3, #8
 800d220:	b21a      	sxth	r2, r3
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	689b      	ldr	r3, [r3, #8]
 800d226:	3302      	adds	r3, #2
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	b21b      	sxth	r3, r3
 800d22c:	4313      	orrs	r3, r2
 800d22e:	b21b      	sxth	r3, r3
 800d230:	b29b      	uxth	r3, r3
 800d232:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	689b      	ldr	r3, [r3, #8]
 800d23a:	3303      	adds	r3, #3
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	041a      	lsls	r2, r3, #16
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	689b      	ldr	r3, [r3, #8]
 800d244:	3304      	adds	r3, #4
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	021b      	lsls	r3, r3, #8
 800d24a:	4313      	orrs	r3, r2
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	6892      	ldr	r2, [r2, #8]
 800d250:	3205      	adds	r2, #5
 800d252:	7812      	ldrb	r2, [r2, #0]
 800d254:	4313      	orrs	r3, r2
 800d256:	461a      	mov	r2, r3
 800d258:	2364      	movs	r3, #100	; 0x64
 800d25a:	fb02 f303 	mul.w	r3, r2, r3
 800d25e:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	689b      	ldr	r3, [r3, #8]
 800d264:	3306      	adds	r3, #6
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	b25b      	sxtb	r3, r3
 800d26a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800d26e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d272:	4618      	mov	r0, r3
 800d274:	f004 fa90 	bl	8011798 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800d278:	4b19      	ldr	r3, [pc, #100]	; (800d2e0 <LmhpComplianceOnMcpsIndication+0x3b4>)
 800d27a:	2201      	movs	r2, #1
 800d27c:	709a      	strb	r2, [r3, #2]
            }
            break;
 800d27e:	e02c      	b.n	800d2da <LmhpComplianceOnMcpsIndication+0x3ae>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800d280:	230a      	movs	r3, #10
 800d282:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800d286:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d28a:	4618      	mov	r0, r3
 800d28c:	f004 fa84 	bl	8011798 <LoRaMacMlmeRequest>
            }
            break;
 800d290:	e023      	b.n	800d2da <LmhpComplianceOnMcpsIndication+0x3ae>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800d292:	2300      	movs	r3, #0
 800d294:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	689b      	ldr	r3, [r3, #8]
 800d29a:	3301      	adds	r3, #1
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d2a0:	f107 0308 	add.w	r3, r7, #8
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f003 ff1d 	bl	80110e4 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800d2aa:	e016      	b.n	800d2da <LmhpComplianceOnMcpsIndication+0x3ae>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800d2ac:	230d      	movs	r3, #13
 800d2ae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	689b      	ldr	r3, [r3, #8]
 800d2b6:	785b      	ldrb	r3, [r3, #1]
 800d2b8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800d2bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f004 fa69 	bl	8011798 <LoRaMacMlmeRequest>
            }
            break;
 800d2c6:	e008      	b.n	800d2da <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800d2c8:	bf00      	nop
 800d2ca:	e006      	b.n	800d2da <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800d2cc:	bf00      	nop
 800d2ce:	e004      	b.n	800d2da <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800d2d0:	bf00      	nop
 800d2d2:	e002      	b.n	800d2da <LmhpComplianceOnMcpsIndication+0x3ae>
        default:
            break;
 800d2d4:	bf00      	nop
 800d2d6:	e000      	b.n	800d2da <LmhpComplianceOnMcpsIndication+0x3ae>
            break;
 800d2d8:	bf00      	nop
        }
    }
}
 800d2da:	3780      	adds	r7, #128	; 0x80
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}
 800d2e0:	20000670 	.word	0x20000670

0800d2e4 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800d2e8:	bf00      	nop
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bc80      	pop	{r7}
 800d2ee:	4770      	bx	lr

0800d2f0 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800d2f8:	f7ff fda8 	bl	800ce4c <LmhpComplianceTxProcess>
}
 800d2fc:	bf00      	nop
 800d2fe:	3708      	adds	r7, #8
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}

0800d304 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800d304:	b590      	push	{r4, r7, lr}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d30a:	f00d fab5 	bl	801a878 <UTIL_TIMER_GetCurrentTime>
 800d30e:	4603      	mov	r3, r0
 800d310:	4a16      	ldr	r2, [pc, #88]	; (800d36c <OnRadioTxDone+0x68>)
 800d312:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d314:	4c16      	ldr	r4, [pc, #88]	; (800d370 <OnRadioTxDone+0x6c>)
 800d316:	463b      	mov	r3, r7
 800d318:	4618      	mov	r0, r3
 800d31a:	f00c fc27 	bl	8019b6c <SysTimeGet>
 800d31e:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800d322:	463a      	mov	r2, r7
 800d324:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d328:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800d32c:	4a11      	ldr	r2, [pc, #68]	; (800d374 <OnRadioTxDone+0x70>)
 800d32e:	7813      	ldrb	r3, [r2, #0]
 800d330:	f043 0310 	orr.w	r3, r3, #16
 800d334:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d336:	4b0e      	ldr	r3, [pc, #56]	; (800d370 <OnRadioTxDone+0x6c>)
 800d338:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d00a      	beq.n	800d356 <OnRadioTxDone+0x52>
 800d340:	4b0b      	ldr	r3, [pc, #44]	; (800d370 <OnRadioTxDone+0x6c>)
 800d342:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d346:	691b      	ldr	r3, [r3, #16]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d004      	beq.n	800d356 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d34c:	4b08      	ldr	r3, [pc, #32]	; (800d370 <OnRadioTxDone+0x6c>)
 800d34e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d352:	691b      	ldr	r3, [r3, #16]
 800d354:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800d356:	4b08      	ldr	r3, [pc, #32]	; (800d378 <OnRadioTxDone+0x74>)
 800d358:	2201      	movs	r2, #1
 800d35a:	2100      	movs	r1, #0
 800d35c:	2002      	movs	r0, #2
 800d35e:	f00d fb7b 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
}
 800d362:	bf00      	nop
 800d364:	370c      	adds	r7, #12
 800d366:	46bd      	mov	sp, r7
 800d368:	bd90      	pop	{r4, r7, pc}
 800d36a:	bf00      	nop
 800d36c:	200019e8 	.word	0x200019e8
 800d370:	20000688 	.word	0x20000688
 800d374:	200019e4 	.word	0x200019e4
 800d378:	0801b39c 	.word	0x0801b39c

0800d37c <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	60f8      	str	r0, [r7, #12]
 800d384:	4608      	mov	r0, r1
 800d386:	4611      	mov	r1, r2
 800d388:	461a      	mov	r2, r3
 800d38a:	4603      	mov	r3, r0
 800d38c:	817b      	strh	r3, [r7, #10]
 800d38e:	460b      	mov	r3, r1
 800d390:	813b      	strh	r3, [r7, #8]
 800d392:	4613      	mov	r3, r2
 800d394:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d396:	f00d fa6f 	bl	801a878 <UTIL_TIMER_GetCurrentTime>
 800d39a:	4603      	mov	r3, r0
 800d39c:	4a16      	ldr	r2, [pc, #88]	; (800d3f8 <OnRadioRxDone+0x7c>)
 800d39e:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800d3a0:	4a15      	ldr	r2, [pc, #84]	; (800d3f8 <OnRadioRxDone+0x7c>)
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800d3a6:	4a14      	ldr	r2, [pc, #80]	; (800d3f8 <OnRadioRxDone+0x7c>)
 800d3a8:	897b      	ldrh	r3, [r7, #10]
 800d3aa:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800d3ac:	4a12      	ldr	r2, [pc, #72]	; (800d3f8 <OnRadioRxDone+0x7c>)
 800d3ae:	893b      	ldrh	r3, [r7, #8]
 800d3b0:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800d3b2:	4a11      	ldr	r2, [pc, #68]	; (800d3f8 <OnRadioRxDone+0x7c>)
 800d3b4:	79fb      	ldrb	r3, [r7, #7]
 800d3b6:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800d3b8:	4a10      	ldr	r2, [pc, #64]	; (800d3fc <OnRadioRxDone+0x80>)
 800d3ba:	7813      	ldrb	r3, [r2, #0]
 800d3bc:	f043 0308 	orr.w	r3, r3, #8
 800d3c0:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d3c2:	4b0f      	ldr	r3, [pc, #60]	; (800d400 <OnRadioRxDone+0x84>)
 800d3c4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d00a      	beq.n	800d3e2 <OnRadioRxDone+0x66>
 800d3cc:	4b0c      	ldr	r3, [pc, #48]	; (800d400 <OnRadioRxDone+0x84>)
 800d3ce:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d3d2:	691b      	ldr	r3, [r3, #16]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d004      	beq.n	800d3e2 <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d3d8:	4b09      	ldr	r3, [pc, #36]	; (800d400 <OnRadioRxDone+0x84>)
 800d3da:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d3de:	691b      	ldr	r3, [r3, #16]
 800d3e0:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800d3e2:	4b08      	ldr	r3, [pc, #32]	; (800d404 <OnRadioRxDone+0x88>)
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	2100      	movs	r1, #0
 800d3e8:	2002      	movs	r0, #2
 800d3ea:	f00d fb35 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
}
 800d3ee:	bf00      	nop
 800d3f0:	3710      	adds	r7, #16
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	200019ec 	.word	0x200019ec
 800d3fc:	200019e4 	.word	0x200019e4
 800d400:	20000688 	.word	0x20000688
 800d404:	0801b3ac 	.word	0x0801b3ac

0800d408 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800d40c:	4a0e      	ldr	r2, [pc, #56]	; (800d448 <OnRadioTxTimeout+0x40>)
 800d40e:	7813      	ldrb	r3, [r2, #0]
 800d410:	f043 0304 	orr.w	r3, r3, #4
 800d414:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d416:	4b0d      	ldr	r3, [pc, #52]	; (800d44c <OnRadioTxTimeout+0x44>)
 800d418:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d00a      	beq.n	800d436 <OnRadioTxTimeout+0x2e>
 800d420:	4b0a      	ldr	r3, [pc, #40]	; (800d44c <OnRadioTxTimeout+0x44>)
 800d422:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d426:	691b      	ldr	r3, [r3, #16]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d004      	beq.n	800d436 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d42c:	4b07      	ldr	r3, [pc, #28]	; (800d44c <OnRadioTxTimeout+0x44>)
 800d42e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d432:	691b      	ldr	r3, [r3, #16]
 800d434:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800d436:	4b06      	ldr	r3, [pc, #24]	; (800d450 <OnRadioTxTimeout+0x48>)
 800d438:	2201      	movs	r2, #1
 800d43a:	2100      	movs	r1, #0
 800d43c:	2002      	movs	r0, #2
 800d43e:	f00d fb0b 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
}
 800d442:	bf00      	nop
 800d444:	bd80      	pop	{r7, pc}
 800d446:	bf00      	nop
 800d448:	200019e4 	.word	0x200019e4
 800d44c:	20000688 	.word	0x20000688
 800d450:	0801b3bc 	.word	0x0801b3bc

0800d454 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800d454:	b580      	push	{r7, lr}
 800d456:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800d458:	4a0b      	ldr	r2, [pc, #44]	; (800d488 <OnRadioRxError+0x34>)
 800d45a:	7813      	ldrb	r3, [r2, #0]
 800d45c:	f043 0302 	orr.w	r3, r3, #2
 800d460:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d462:	4b0a      	ldr	r3, [pc, #40]	; (800d48c <OnRadioRxError+0x38>)
 800d464:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d00a      	beq.n	800d482 <OnRadioRxError+0x2e>
 800d46c:	4b07      	ldr	r3, [pc, #28]	; (800d48c <OnRadioRxError+0x38>)
 800d46e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d472:	691b      	ldr	r3, [r3, #16]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d004      	beq.n	800d482 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d478:	4b04      	ldr	r3, [pc, #16]	; (800d48c <OnRadioRxError+0x38>)
 800d47a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d47e:	691b      	ldr	r3, [r3, #16]
 800d480:	4798      	blx	r3
    }
}
 800d482:	bf00      	nop
 800d484:	bd80      	pop	{r7, pc}
 800d486:	bf00      	nop
 800d488:	200019e4 	.word	0x200019e4
 800d48c:	20000688 	.word	0x20000688

0800d490 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800d490:	b580      	push	{r7, lr}
 800d492:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800d494:	4a0e      	ldr	r2, [pc, #56]	; (800d4d0 <OnRadioRxTimeout+0x40>)
 800d496:	7813      	ldrb	r3, [r2, #0]
 800d498:	f043 0301 	orr.w	r3, r3, #1
 800d49c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d49e:	4b0d      	ldr	r3, [pc, #52]	; (800d4d4 <OnRadioRxTimeout+0x44>)
 800d4a0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d00a      	beq.n	800d4be <OnRadioRxTimeout+0x2e>
 800d4a8:	4b0a      	ldr	r3, [pc, #40]	; (800d4d4 <OnRadioRxTimeout+0x44>)
 800d4aa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d4ae:	691b      	ldr	r3, [r3, #16]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d004      	beq.n	800d4be <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d4b4:	4b07      	ldr	r3, [pc, #28]	; (800d4d4 <OnRadioRxTimeout+0x44>)
 800d4b6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d4ba:	691b      	ldr	r3, [r3, #16]
 800d4bc:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800d4be:	4b06      	ldr	r3, [pc, #24]	; (800d4d8 <OnRadioRxTimeout+0x48>)
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	2002      	movs	r0, #2
 800d4c6:	f00d fac7 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
}
 800d4ca:	bf00      	nop
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	200019e4 	.word	0x200019e4
 800d4d4:	20000688 	.word	0x20000688
 800d4d8:	0801b3cc 	.word	0x0801b3cc

0800d4dc <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800d4dc:	b480      	push	{r7}
 800d4de:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d4e0:	4b08      	ldr	r3, [pc, #32]	; (800d504 <UpdateRxSlotIdleState+0x28>)
 800d4e2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d4e6:	2b02      	cmp	r3, #2
 800d4e8:	d004      	beq.n	800d4f4 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800d4ea:	4b07      	ldr	r3, [pc, #28]	; (800d508 <UpdateRxSlotIdleState+0x2c>)
 800d4ec:	2206      	movs	r2, #6
 800d4ee:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800d4f2:	e003      	b.n	800d4fc <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d4f4:	4b04      	ldr	r3, [pc, #16]	; (800d508 <UpdateRxSlotIdleState+0x2c>)
 800d4f6:	2202      	movs	r2, #2
 800d4f8:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
}
 800d4fc:	bf00      	nop
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bc80      	pop	{r7}
 800d502:	4770      	bx	lr
 800d504:	20000b94 	.word	0x20000b94
 800d508:	20000688 	.word	0x20000688

0800d50c <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b08e      	sub	sp, #56	; 0x38
 800d510:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d512:	4b44      	ldr	r3, [pc, #272]	; (800d624 <ProcessRadioTxDone+0x118>)
 800d514:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d518:	2b02      	cmp	r3, #2
 800d51a:	d002      	beq.n	800d522 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800d51c:	4b42      	ldr	r3, [pc, #264]	; (800d628 <ProcessRadioTxDone+0x11c>)
 800d51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d520:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800d522:	4b42      	ldr	r3, [pc, #264]	; (800d62c <ProcessRadioTxDone+0x120>)
 800d524:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800d528:	4619      	mov	r1, r3
 800d52a:	4841      	ldr	r0, [pc, #260]	; (800d630 <ProcessRadioTxDone+0x124>)
 800d52c:	f00d f8fa 	bl	801a724 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800d530:	483f      	ldr	r0, [pc, #252]	; (800d630 <ProcessRadioTxDone+0x124>)
 800d532:	f00d f819 	bl	801a568 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800d536:	4b3d      	ldr	r3, [pc, #244]	; (800d62c <ProcessRadioTxDone+0x120>)
 800d538:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800d53c:	4619      	mov	r1, r3
 800d53e:	483d      	ldr	r0, [pc, #244]	; (800d634 <ProcessRadioTxDone+0x128>)
 800d540:	f00d f8f0 	bl	801a724 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800d544:	483b      	ldr	r0, [pc, #236]	; (800d634 <ProcessRadioTxDone+0x128>)
 800d546:	f00d f80f 	bl	801a568 <UTIL_TIMER_Start>
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800d54a:	4b36      	ldr	r3, [pc, #216]	; (800d624 <ProcessRadioTxDone+0x118>)
 800d54c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d550:	2b02      	cmp	r3, #2
 800d552:	d004      	beq.n	800d55e <ProcessRadioTxDone+0x52>
 800d554:	4b35      	ldr	r3, [pc, #212]	; (800d62c <ProcessRadioTxDone+0x120>)
 800d556:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d019      	beq.n	800d592 <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800d55e:	2316      	movs	r3, #22
 800d560:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d564:	4b2f      	ldr	r3, [pc, #188]	; (800d624 <ProcessRadioTxDone+0x118>)
 800d566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d56a:	f107 0220 	add.w	r2, r7, #32
 800d56e:	4611      	mov	r1, r2
 800d570:	4618      	mov	r0, r3
 800d572:	f006 fc09 	bl	8013d88 <RegionGetPhyParam>
 800d576:	4603      	mov	r3, r0
 800d578:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800d57a:	4b2c      	ldr	r3, [pc, #176]	; (800d62c <ProcessRadioTxDone+0x120>)
 800d57c:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800d580:	69fb      	ldr	r3, [r7, #28]
 800d582:	4413      	add	r3, r2
 800d584:	4619      	mov	r1, r3
 800d586:	482c      	ldr	r0, [pc, #176]	; (800d638 <ProcessRadioTxDone+0x12c>)
 800d588:	f00d f8cc 	bl	801a724 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800d58c:	482a      	ldr	r0, [pc, #168]	; (800d638 <ProcessRadioTxDone+0x12c>)
 800d58e:	f00c ffeb 	bl	801a568 <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800d592:	4b2a      	ldr	r3, [pc, #168]	; (800d63c <ProcessRadioTxDone+0x130>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4a23      	ldr	r2, [pc, #140]	; (800d624 <ProcessRadioTxDone+0x118>)
 800d598:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800d59a:	4b24      	ldr	r3, [pc, #144]	; (800d62c <ProcessRadioTxDone+0x120>)
 800d59c:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800d5a0:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800d5a2:	4b26      	ldr	r3, [pc, #152]	; (800d63c <ProcessRadioTxDone+0x130>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800d5a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f00c fb15 	bl	8019bdc <SysTimeGetMcuTime>
 800d5b2:	4638      	mov	r0, r7
 800d5b4:	4b1b      	ldr	r3, [pc, #108]	; (800d624 <ProcessRadioTxDone+0x118>)
 800d5b6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800d5ba:	9200      	str	r2, [sp, #0]
 800d5bc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800d5c0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d5c4:	ca06      	ldmia	r2, {r1, r2}
 800d5c6:	f00c fa6a 	bl	8019a9e <SysTimeSub>
 800d5ca:	f107 0314 	add.w	r3, r7, #20
 800d5ce:	463a      	mov	r2, r7
 800d5d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d5d4:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800d5d8:	4b14      	ldr	r3, [pc, #80]	; (800d62c <ProcessRadioTxDone+0x120>)
 800d5da:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800d5de:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d5e4:	4b0f      	ldr	r3, [pc, #60]	; (800d624 <ProcessRadioTxDone+0x118>)
 800d5e6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d101      	bne.n	800d5f2 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800d5f2:	4b0c      	ldr	r3, [pc, #48]	; (800d624 <ProcessRadioTxDone+0x118>)
 800d5f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d5f8:	f107 0208 	add.w	r2, r7, #8
 800d5fc:	4611      	mov	r1, r2
 800d5fe:	4618      	mov	r0, r3
 800d600:	f006 fbda 	bl	8013db8 <RegionSetBandTxDone>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800d604:	4b09      	ldr	r3, [pc, #36]	; (800d62c <ProcessRadioTxDone+0x120>)
 800d606:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d60a:	f083 0301 	eor.w	r3, r3, #1
 800d60e:	b2db      	uxtb	r3, r3
 800d610:	2b00      	cmp	r3, #0
 800d612:	d003      	beq.n	800d61c <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d614:	4b05      	ldr	r3, [pc, #20]	; (800d62c <ProcessRadioTxDone+0x120>)
 800d616:	2200      	movs	r2, #0
 800d618:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
#endif /* LORAMAC_VERSION */
}
 800d61c:	bf00      	nop
 800d61e:	3730      	adds	r7, #48	; 0x30
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}
 800d624:	20000b94 	.word	0x20000b94
 800d628:	0801b9f8 	.word	0x0801b9f8
 800d62c:	20000688 	.word	0x20000688
 800d630:	20000a08 	.word	0x20000a08
 800d634:	20000a20 	.word	0x20000a20
 800d638:	20000a80 	.word	0x20000a80
 800d63c:	200019e8 	.word	0x200019e8

0800d640 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800d640:	b580      	push	{r7, lr}
 800d642:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800d644:	4b10      	ldr	r3, [pc, #64]	; (800d688 <PrepareRxDoneAbort+0x48>)
 800d646:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d64a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d64e:	4a0e      	ldr	r2, [pc, #56]	; (800d688 <PrepareRxDoneAbort+0x48>)
 800d650:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800d654:	4b0c      	ldr	r3, [pc, #48]	; (800d688 <PrepareRxDoneAbort+0x48>)
 800d656:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d002      	beq.n	800d664 <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 800d65e:	2000      	movs	r0, #0
 800d660:	f001 f8f2 	bl	800e848 <OnAckTimeoutTimerEvent>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800d664:	4a08      	ldr	r2, [pc, #32]	; (800d688 <PrepareRxDoneAbort+0x48>)
 800d666:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d66a:	f043 0302 	orr.w	r3, r3, #2
 800d66e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d672:	4a05      	ldr	r2, [pc, #20]	; (800d688 <PrepareRxDoneAbort+0x48>)
 800d674:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d678:	f043 0320 	orr.w	r3, r3, #32
 800d67c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

    UpdateRxSlotIdleState( );
 800d680:	f7ff ff2c 	bl	800d4dc <UpdateRxSlotIdleState>
}
 800d684:	bf00      	nop
 800d686:	bd80      	pop	{r7, pc}
 800d688:	20000688 	.word	0x20000688

0800d68c <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800d68c:	b5b0      	push	{r4, r5, r7, lr}
 800d68e:	b0a6      	sub	sp, #152	; 0x98
 800d690:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800d692:	2313      	movs	r3, #19
 800d694:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800d698:	4bb9      	ldr	r3, [pc, #740]	; (800d980 <ProcessRadioRxDone+0x2f4>)
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800d69e:	4bb8      	ldr	r3, [pc, #736]	; (800d980 <ProcessRadioRxDone+0x2f4>)
 800d6a0:	891b      	ldrh	r3, [r3, #8]
 800d6a2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800d6a6:	4bb6      	ldr	r3, [pc, #728]	; (800d980 <ProcessRadioRxDone+0x2f4>)
 800d6a8:	895b      	ldrh	r3, [r3, #10]
 800d6aa:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800d6ae:	4bb4      	ldr	r3, [pc, #720]	; (800d980 <ProcessRadioRxDone+0x2f4>)
 800d6b0:	7b1b      	ldrb	r3, [r3, #12]
 800d6b2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800d6c0:	4bb0      	ldr	r3, [pc, #704]	; (800d984 <ProcessRadioRxDone+0x2f8>)
 800d6c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800d6c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800d6d6:	4bac      	ldr	r3, [pc, #688]	; (800d988 <ProcessRadioRxDone+0x2fc>)
 800d6d8:	2200      	movs	r2, #0
 800d6da:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800d6de:	4aaa      	ldr	r2, [pc, #680]	; (800d988 <ProcessRadioRxDone+0x2fc>)
 800d6e0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d6e4:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    MacCtx.RxStatus.Snr = snr;
 800d6e8:	4aa7      	ldr	r2, [pc, #668]	; (800d988 <ProcessRadioRxDone+0x2fc>)
 800d6ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d6ee:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800d6f2:	4ba5      	ldr	r3, [pc, #660]	; (800d988 <ProcessRadioRxDone+0x2fc>)
 800d6f4:	f893 2484 	ldrb.w	r2, [r3, #1156]	; 0x484
 800d6f8:	4ba3      	ldr	r3, [pc, #652]	; (800d988 <ProcessRadioRxDone+0x2fc>)
 800d6fa:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
    MacCtx.McpsIndication.Port = 0;
 800d6fe:	4ba2      	ldr	r3, [pc, #648]	; (800d988 <ProcessRadioRxDone+0x2fc>)
 800d700:	2200      	movs	r2, #0
 800d702:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800d706:	4ba0      	ldr	r3, [pc, #640]	; (800d988 <ProcessRadioRxDone+0x2fc>)
 800d708:	2200      	movs	r2, #0
 800d70a:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800d70e:	4b9e      	ldr	r3, [pc, #632]	; (800d988 <ProcessRadioRxDone+0x2fc>)
 800d710:	2200      	movs	r2, #0
 800d712:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800d716:	4b9c      	ldr	r3, [pc, #624]	; (800d988 <ProcessRadioRxDone+0x2fc>)
 800d718:	2200      	movs	r2, #0
 800d71a:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800d71e:	4b9a      	ldr	r3, [pc, #616]	; (800d988 <ProcessRadioRxDone+0x2fc>)
 800d720:	2200      	movs	r2, #0
 800d722:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800d726:	4b98      	ldr	r3, [pc, #608]	; (800d988 <ProcessRadioRxDone+0x2fc>)
 800d728:	2200      	movs	r2, #0
 800d72a:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800d72e:	4b96      	ldr	r3, [pc, #600]	; (800d988 <ProcessRadioRxDone+0x2fc>)
 800d730:	2200      	movs	r2, #0
 800d732:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800d736:	4b94      	ldr	r3, [pc, #592]	; (800d988 <ProcessRadioRxDone+0x2fc>)
 800d738:	2200      	movs	r2, #0
 800d73a:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d73e:	4b92      	ldr	r3, [pc, #584]	; (800d988 <ProcessRadioRxDone+0x2fc>)
 800d740:	2200      	movs	r2, #0
 800d742:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800d746:	4b90      	ldr	r3, [pc, #576]	; (800d988 <ProcessRadioRxDone+0x2fc>)
 800d748:	2200      	movs	r2, #0
 800d74a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800d74e:	4b8e      	ldr	r3, [pc, #568]	; (800d988 <ProcessRadioRxDone+0x2fc>)
 800d750:	2200      	movs	r2, #0
 800d752:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800d756:	4b8d      	ldr	r3, [pc, #564]	; (800d98c <ProcessRadioRxDone+0x300>)
 800d758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d75a:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 800d75c:	488c      	ldr	r0, [pc, #560]	; (800d990 <ProcessRadioRxDone+0x304>)
 800d75e:	f00c ff71 	bl	801a644 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800d762:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d766:	4619      	mov	r1, r3
 800d768:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d76a:	f004 fbaa 	bl	8011ec2 <LoRaMacClassBRxBeacon>
 800d76e:	4603      	mov	r3, r0
 800d770:	2b00      	cmp	r3, #0
 800d772:	d00a      	beq.n	800d78a <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800d774:	4a84      	ldr	r2, [pc, #528]	; (800d988 <ProcessRadioRxDone+0x2fc>)
 800d776:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d77a:	f8a2 3476 	strh.w	r3, [r2, #1142]	; 0x476
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800d77e:	4a82      	ldr	r2, [pc, #520]	; (800d988 <ProcessRadioRxDone+0x2fc>)
 800d780:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d784:	f882 3478 	strb.w	r3, [r2, #1144]	; 0x478
        return;
 800d788:	e3c7      	b.n	800df1a <ProcessRadioRxDone+0x88e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d78a:	4b7e      	ldr	r3, [pc, #504]	; (800d984 <ProcessRadioRxDone+0x2f8>)
 800d78c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d790:	2b01      	cmp	r3, #1
 800d792:	d11e      	bne.n	800d7d2 <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d794:	f004 fba8 	bl	8011ee8 <LoRaMacClassBIsPingExpected>
 800d798:	4603      	mov	r3, r0
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d00a      	beq.n	800d7b4 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d79e:	2000      	movs	r0, #0
 800d7a0:	f004 fb59 	bl	8011e56 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	f004 fb7a 	bl	8011e9e <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800d7aa:	4b77      	ldr	r3, [pc, #476]	; (800d988 <ProcessRadioRxDone+0x2fc>)
 800d7ac:	2204      	movs	r2, #4
 800d7ae:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 800d7b2:	e00e      	b.n	800d7d2 <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d7b4:	f004 fb9f 	bl	8011ef6 <LoRaMacClassBIsMulticastExpected>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d009      	beq.n	800d7d2 <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d7be:	2000      	movs	r0, #0
 800d7c0:	f004 fb53 	bl	8011e6a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800d7c4:	2000      	movs	r0, #0
 800d7c6:	f004 fb73 	bl	8011eb0 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800d7ca:	4b6f      	ldr	r3, [pc, #444]	; (800d988 <ProcessRadioRxDone+0x2fc>)
 800d7cc:	2205      	movs	r2, #5
 800d7ce:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800d7d2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d7d6:	1c5a      	adds	r2, r3, #1
 800d7d8:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800d7dc:	461a      	mov	r2, r3
 800d7de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d7e0:	4413      	add	r3, r2
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800d7e8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800d7ec:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800d7f0:	b2db      	uxtb	r3, r3
 800d7f2:	3b01      	subs	r3, #1
 800d7f4:	2b06      	cmp	r3, #6
 800d7f6:	f200 836a 	bhi.w	800dece <ProcessRadioRxDone+0x842>
 800d7fa:	a201      	add	r2, pc, #4	; (adr r2, 800d800 <ProcessRadioRxDone+0x174>)
 800d7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d800:	0800d81d 	.word	0x0800d81d
 800d804:	0800decf 	.word	0x0800decf
 800d808:	0800d99d 	.word	0x0800d99d
 800d80c:	0800decf 	.word	0x0800decf
 800d810:	0800d995 	.word	0x0800d995
 800d814:	0800decf 	.word	0x0800decf
 800d818:	0800de75 	.word	0x0800de75
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800d81c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d820:	2b10      	cmp	r3, #16
 800d822:	d806      	bhi.n	800d832 <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d824:	4b58      	ldr	r3, [pc, #352]	; (800d988 <ProcessRadioRxDone+0x2fc>)
 800d826:	2201      	movs	r2, #1
 800d828:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800d82c:	f7ff ff08 	bl	800d640 <PrepareRxDoneAbort>
                return;
 800d830:	e373      	b.n	800df1a <ProcessRadioRxDone+0x88e>
            }
            macMsgJoinAccept.Buffer = payload;
 800d832:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d834:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800d836:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d83a:	b2db      	uxtb	r3, r3
 800d83c:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800d83e:	4b51      	ldr	r3, [pc, #324]	; (800d984 <ProcessRadioRxDone+0x2f8>)
 800d840:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800d844:	2b00      	cmp	r3, #0
 800d846:	d006      	beq.n	800d856 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d848:	4b4f      	ldr	r3, [pc, #316]	; (800d988 <ProcessRadioRxDone+0x2fc>)
 800d84a:	2201      	movs	r2, #1
 800d84c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800d850:	f7ff fef6 	bl	800d640 <PrepareRxDoneAbort>
                return;
 800d854:	e361      	b.n	800df1a <ProcessRadioRxDone+0x88e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800d856:	f7fe faa3 	bl	800bda0 <SecureElementGetJoinEui>
 800d85a:	4601      	mov	r1, r0
 800d85c:	f107 0308 	add.w	r3, r7, #8
 800d860:	461a      	mov	r2, r3
 800d862:	20ff      	movs	r0, #255	; 0xff
 800d864:	f005 fd14 	bl	8013290 <LoRaMacCryptoHandleJoinAccept>
 800d868:	4603      	mov	r3, r0
 800d86a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800d86e:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800d872:	2b00      	cmp	r3, #0
 800d874:	d172      	bne.n	800d95c <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800d876:	7c7b      	ldrb	r3, [r7, #17]
 800d878:	461a      	mov	r2, r3
 800d87a:	4b42      	ldr	r3, [pc, #264]	; (800d984 <ProcessRadioRxDone+0x2f8>)
 800d87c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800d880:	4b40      	ldr	r3, [pc, #256]	; (800d984 <ProcessRadioRxDone+0x2f8>)
 800d882:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800d886:	7cbb      	ldrb	r3, [r7, #18]
 800d888:	021b      	lsls	r3, r3, #8
 800d88a:	4313      	orrs	r3, r2
 800d88c:	4a3d      	ldr	r2, [pc, #244]	; (800d984 <ProcessRadioRxDone+0x2f8>)
 800d88e:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800d892:	4b3c      	ldr	r3, [pc, #240]	; (800d984 <ProcessRadioRxDone+0x2f8>)
 800d894:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800d898:	7cfb      	ldrb	r3, [r7, #19]
 800d89a:	041b      	lsls	r3, r3, #16
 800d89c:	4313      	orrs	r3, r2
 800d89e:	4a39      	ldr	r2, [pc, #228]	; (800d984 <ProcessRadioRxDone+0x2f8>)
 800d8a0:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	4a37      	ldr	r2, [pc, #220]	; (800d984 <ProcessRadioRxDone+0x2f8>)
 800d8a8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800d8ac:	7e3b      	ldrb	r3, [r7, #24]
 800d8ae:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	4b33      	ldr	r3, [pc, #204]	; (800d984 <ProcessRadioRxDone+0x2f8>)
 800d8b8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800d8bc:	7e3b      	ldrb	r3, [r7, #24]
 800d8be:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	4b2f      	ldr	r3, [pc, #188]	; (800d984 <ProcessRadioRxDone+0x2f8>)
 800d8c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800d8cc:	7e3b      	ldrb	r3, [r7, #24]
 800d8ce:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	4b2b      	ldr	r3, [pc, #172]	; (800d984 <ProcessRadioRxDone+0x2f8>)
 800d8d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800d8dc:	7e7b      	ldrb	r3, [r7, #25]
 800d8de:	461a      	mov	r2, r3
 800d8e0:	4b28      	ldr	r3, [pc, #160]	; (800d984 <ProcessRadioRxDone+0x2f8>)
 800d8e2:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800d8e4:	4b27      	ldr	r3, [pc, #156]	; (800d984 <ProcessRadioRxDone+0x2f8>)
 800d8e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d102      	bne.n	800d8f2 <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800d8ec:	4b25      	ldr	r3, [pc, #148]	; (800d984 <ProcessRadioRxDone+0x2f8>)
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800d8f2:	4b24      	ldr	r3, [pc, #144]	; (800d984 <ProcessRadioRxDone+0x2f8>)
 800d8f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d8fa:	fb02 f303 	mul.w	r3, r2, r3
 800d8fe:	4a21      	ldr	r2, [pc, #132]	; (800d984 <ProcessRadioRxDone+0x2f8>)
 800d900:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800d902:	4b20      	ldr	r3, [pc, #128]	; (800d984 <ProcessRadioRxDone+0x2f8>)
 800d904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d906:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800d90a:	4a1e      	ldr	r2, [pc, #120]	; (800d984 <ProcessRadioRxDone+0x2f8>)
 800d90c:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800d90e:	4b1d      	ldr	r3, [pc, #116]	; (800d984 <ProcessRadioRxDone+0x2f8>)
 800d910:	2200      	movs	r2, #0
 800d912:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800d916:	f107 0308 	add.w	r3, r7, #8
 800d91a:	3312      	adds	r3, #18
 800d91c:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800d91e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d922:	b2db      	uxtb	r3, r3
 800d924:	3b11      	subs	r3, #17
 800d926:	b2db      	uxtb	r3, r3
 800d928:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800d92c:	4b15      	ldr	r3, [pc, #84]	; (800d984 <ProcessRadioRxDone+0x2f8>)
 800d92e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d932:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800d936:	4611      	mov	r1, r2
 800d938:	4618      	mov	r0, r3
 800d93a:	f006 fa77 	bl	8013e2c <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800d93e:	4b11      	ldr	r3, [pc, #68]	; (800d984 <ProcessRadioRxDone+0x2f8>)
 800d940:	2202      	movs	r2, #2
 800d942:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800d946:	2001      	movs	r0, #1
 800d948:	f004 ff9a 	bl	8012880 <LoRaMacConfirmQueueIsCmdActive>
 800d94c:	4603      	mov	r3, r0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d00e      	beq.n	800d970 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800d952:	2101      	movs	r1, #1
 800d954:	2000      	movs	r0, #0
 800d956:	f004 ff07 	bl	8012768 <LoRaMacConfirmQueueSetStatus>
 800d95a:	e009      	b.n	800d970 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800d95c:	2001      	movs	r0, #1
 800d95e:	f004 ff8f 	bl	8012880 <LoRaMacConfirmQueueIsCmdActive>
 800d962:	4603      	mov	r3, r0
 800d964:	2b00      	cmp	r3, #0
 800d966:	d003      	beq.n	800d970 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800d968:	2101      	movs	r1, #1
 800d96a:	2007      	movs	r0, #7
 800d96c:	f004 fefc 	bl	8012768 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800d970:	4a05      	ldr	r2, [pc, #20]	; (800d988 <ProcessRadioRxDone+0x2fc>)
 800d972:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800d976:	f043 0308 	orr.w	r3, r3, #8
 800d97a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 800d97e:	e2ad      	b.n	800dedc <ProcessRadioRxDone+0x850>
 800d980:	200019ec 	.word	0x200019ec
 800d984:	20000b94 	.word	0x20000b94
 800d988:	20000688 	.word	0x20000688
 800d98c:	0801b9f8 	.word	0x0801b9f8
 800d990:	20000a20 	.word	0x20000a20
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800d994:	4bb0      	ldr	r3, [pc, #704]	; (800dc58 <ProcessRadioRxDone+0x5cc>)
 800d996:	2201      	movs	r2, #1
 800d998:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d99c:	4baf      	ldr	r3, [pc, #700]	; (800dc5c <ProcessRadioRxDone+0x5d0>)
 800d99e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800d9a2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800d9a6:	4bac      	ldr	r3, [pc, #688]	; (800dc58 <ProcessRadioRxDone+0x5cc>)
 800d9a8:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800d9ac:	b25b      	sxtb	r3, r3
 800d9ae:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800d9b2:	230d      	movs	r3, #13
 800d9b4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800d9b8:	4ba8      	ldr	r3, [pc, #672]	; (800dc5c <ProcessRadioRxDone+0x5d0>)
 800d9ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d002      	beq.n	800d9c8 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800d9c2:	230e      	movs	r3, #14
 800d9c4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d9c8:	4ba4      	ldr	r3, [pc, #656]	; (800dc5c <ProcessRadioRxDone+0x5d0>)
 800d9ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d9ce:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800d9d2:	4611      	mov	r1, r2
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f006 f9d7 	bl	8013d88 <RegionGetPhyParam>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800d9de:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d9e2:	3b0d      	subs	r3, #13
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	b21b      	sxth	r3, r3
 800d9e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d9ec:	b21a      	sxth	r2, r3
 800d9ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9f0:	b21b      	sxth	r3, r3
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	dc03      	bgt.n	800d9fe <ProcessRadioRxDone+0x372>
 800d9f6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d9fa:	2b0b      	cmp	r3, #11
 800d9fc:	d806      	bhi.n	800da0c <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d9fe:	4b96      	ldr	r3, [pc, #600]	; (800dc58 <ProcessRadioRxDone+0x5cc>)
 800da00:	2201      	movs	r2, #1
 800da02:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800da06:	f7ff fe1b 	bl	800d640 <PrepareRxDoneAbort>
                return;
 800da0a:	e286      	b.n	800df1a <ProcessRadioRxDone+0x88e>
            }
            macMsgData.Buffer = payload;
 800da0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da0e:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800da10:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800da14:	b2db      	uxtb	r3, r3
 800da16:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800da1a:	4b91      	ldr	r3, [pc, #580]	; (800dc60 <ProcessRadioRxDone+0x5d4>)
 800da1c:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800da1e:	23ff      	movs	r3, #255	; 0xff
 800da20:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800da24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800da28:	4618      	mov	r0, r3
 800da2a:	f005 ff30 	bl	801388e <LoRaMacParserData>
 800da2e:	4603      	mov	r3, r0
 800da30:	2b00      	cmp	r3, #0
 800da32:	d006      	beq.n	800da42 <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800da34:	4b88      	ldr	r3, [pc, #544]	; (800dc58 <ProcessRadioRxDone+0x5cc>)
 800da36:	2201      	movs	r2, #1
 800da38:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800da3c:	f7ff fe00 	bl	800d640 <PrepareRxDoneAbort>
                return;
 800da40:	e26b      	b.n	800df1a <ProcessRadioRxDone+0x88e>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800da42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da44:	4a84      	ldr	r2, [pc, #528]	; (800dc58 <ProcessRadioRxDone+0x5cc>)
 800da46:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800da4a:	1cba      	adds	r2, r7, #2
 800da4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800da50:	4611      	mov	r1, r2
 800da52:	4618      	mov	r0, r3
 800da54:	f002 fc9e 	bl	8010394 <DetermineFrameType>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d006      	beq.n	800da6c <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800da5e:	4b7e      	ldr	r3, [pc, #504]	; (800dc58 <ProcessRadioRxDone+0x5cc>)
 800da60:	2201      	movs	r2, #1
 800da62:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800da66:	f7ff fdeb 	bl	800d640 <PrepareRxDoneAbort>
                return;
 800da6a:	e256      	b.n	800df1a <ProcessRadioRxDone+0x88e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800da6c:	2300      	movs	r3, #0
 800da6e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800da72:	2300      	movs	r3, #0
 800da74:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800da76:	2300      	movs	r3, #0
 800da78:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800da7c:	e049      	b.n	800db12 <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800da7e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800da82:	4a76      	ldr	r2, [pc, #472]	; (800dc5c <ProcessRadioRxDone+0x5d0>)
 800da84:	212c      	movs	r1, #44	; 0x2c
 800da86:	fb01 f303 	mul.w	r3, r1, r3
 800da8a:	4413      	add	r3, r2
 800da8c:	33dc      	adds	r3, #220	; 0xdc
 800da8e:	681a      	ldr	r2, [r3, #0]
 800da90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da92:	429a      	cmp	r2, r3
 800da94:	d138      	bne.n	800db08 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800da96:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800da9a:	4a70      	ldr	r2, [pc, #448]	; (800dc5c <ProcessRadioRxDone+0x5d0>)
 800da9c:	212c      	movs	r1, #44	; 0x2c
 800da9e:	fb01 f303 	mul.w	r3, r1, r3
 800daa2:	4413      	add	r3, r2
 800daa4:	33da      	adds	r3, #218	; 0xda
 800daa6:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d02d      	beq.n	800db08 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800daac:	2301      	movs	r3, #1
 800daae:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800dab2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dab6:	4a69      	ldr	r2, [pc, #420]	; (800dc5c <ProcessRadioRxDone+0x5d0>)
 800dab8:	212c      	movs	r1, #44	; 0x2c
 800daba:	fb01 f303 	mul.w	r3, r1, r3
 800dabe:	4413      	add	r3, r2
 800dac0:	33db      	adds	r3, #219	; 0xdb
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800dac8:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dacc:	4a63      	ldr	r2, [pc, #396]	; (800dc5c <ProcessRadioRxDone+0x5d0>)
 800dace:	212c      	movs	r1, #44	; 0x2c
 800dad0:	fb01 f303 	mul.w	r3, r1, r3
 800dad4:	4413      	add	r3, r2
 800dad6:	33f8      	adds	r3, #248	; 0xf8
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800dade:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dae2:	4a5e      	ldr	r2, [pc, #376]	; (800dc5c <ProcessRadioRxDone+0x5d0>)
 800dae4:	212c      	movs	r1, #44	; 0x2c
 800dae6:	fb01 f303 	mul.w	r3, r1, r3
 800daea:	4413      	add	r3, r2
 800daec:	33dc      	adds	r3, #220	; 0xdc
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800daf4:	4b59      	ldr	r3, [pc, #356]	; (800dc5c <ProcessRadioRxDone+0x5d0>)
 800daf6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800dafa:	2b02      	cmp	r3, #2
 800dafc:	d10e      	bne.n	800db1c <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800dafe:	4b56      	ldr	r3, [pc, #344]	; (800dc58 <ProcessRadioRxDone+0x5cc>)
 800db00:	2203      	movs	r2, #3
 800db02:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
                    }
                    break;
 800db06:	e009      	b.n	800db1c <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800db08:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800db0c:	3301      	adds	r3, #1
 800db0e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800db12:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800db16:	2b00      	cmp	r3, #0
 800db18:	d0b1      	beq.n	800da7e <ProcessRadioRxDone+0x3f2>
 800db1a:	e000      	b.n	800db1e <ProcessRadioRxDone+0x492>
                    break;
 800db1c:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800db1e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800db22:	2b01      	cmp	r3, #1
 800db24:	d117      	bne.n	800db56 <ProcessRadioRxDone+0x4ca>
 800db26:	78bb      	ldrb	r3, [r7, #2]
 800db28:	2b03      	cmp	r3, #3
 800db2a:	d10d      	bne.n	800db48 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800db2c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800db30:	f003 0320 	and.w	r3, r3, #32
 800db34:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800db36:	2b00      	cmp	r3, #0
 800db38:	d106      	bne.n	800db48 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800db3a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800db3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db42:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800db44:	2b00      	cmp	r3, #0
 800db46:	d006      	beq.n	800db56 <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800db48:	4b43      	ldr	r3, [pc, #268]	; (800dc58 <ProcessRadioRxDone+0x5cc>)
 800db4a:	2201      	movs	r2, #1
 800db4c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800db50:	f7ff fd76 	bl	800d640 <PrepareRxDoneAbort>
                return;
 800db54:	e1e1      	b.n	800df1a <ProcessRadioRxDone+0x88e>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800db56:	2315      	movs	r3, #21
 800db58:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800db5c:	4b3f      	ldr	r3, [pc, #252]	; (800dc5c <ProcessRadioRxDone+0x5d0>)
 800db5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800db62:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800db66:	4611      	mov	r1, r2
 800db68:	4618      	mov	r0, r3
 800db6a:	f006 f90d 	bl	8013d88 <RegionGetPhyParam>
 800db6e:	4603      	mov	r3, r0
 800db70:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800db72:	78b9      	ldrb	r1, [r7, #2]
 800db74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db76:	b29b      	uxth	r3, r3
 800db78:	4d38      	ldr	r5, [pc, #224]	; (800dc5c <ProcessRadioRxDone+0x5d0>)
 800db7a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800db7e:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800db82:	1d3a      	adds	r2, r7, #4
 800db84:	9202      	str	r2, [sp, #8]
 800db86:	1cfa      	adds	r2, r7, #3
 800db88:	9201      	str	r2, [sp, #4]
 800db8a:	9300      	str	r3, [sp, #0]
 800db8c:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 800db90:	4622      	mov	r2, r4
 800db92:	f000 fe8f 	bl	800e8b4 <GetFCntDown>
 800db96:	4603      	mov	r3, r0
 800db98:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800db9c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d035      	beq.n	800dc10 <ProcessRadioRxDone+0x584>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800dba4:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dba8:	2b07      	cmp	r3, #7
 800dbaa:	d119      	bne.n	800dbe0 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800dbac:	4b2a      	ldr	r3, [pc, #168]	; (800dc58 <ProcessRadioRxDone+0x5cc>)
 800dbae:	2208      	movs	r2, #8
 800dbb0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800dbb4:	4b29      	ldr	r3, [pc, #164]	; (800dc5c <ProcessRadioRxDone+0x5d0>)
 800dbb6:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d11d      	bne.n	800dbfa <ProcessRadioRxDone+0x56e>
 800dbbe:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800dbc2:	f023 031f 	bic.w	r3, r3, #31
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	2ba0      	cmp	r3, #160	; 0xa0
 800dbca:	d116      	bne.n	800dbfa <ProcessRadioRxDone+0x56e>
 800dbcc:	4b23      	ldr	r3, [pc, #140]	; (800dc5c <ProcessRadioRxDone+0x5d0>)
 800dbce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d111      	bne.n	800dbfa <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800dbd6:	4b21      	ldr	r3, [pc, #132]	; (800dc5c <ProcessRadioRxDone+0x5d0>)
 800dbd8:	2201      	movs	r2, #1
 800dbda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800dbde:	e00c      	b.n	800dbfa <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800dbe0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dbe4:	2b08      	cmp	r3, #8
 800dbe6:	d104      	bne.n	800dbf2 <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800dbe8:	4b1b      	ldr	r3, [pc, #108]	; (800dc58 <ProcessRadioRxDone+0x5cc>)
 800dbea:	220a      	movs	r2, #10
 800dbec:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800dbf0:	e003      	b.n	800dbfa <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dbf2:	4b19      	ldr	r3, [pc, #100]	; (800dc58 <ProcessRadioRxDone+0x5cc>)
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	4a16      	ldr	r2, [pc, #88]	; (800dc58 <ProcessRadioRxDone+0x5cc>)
 800dbfe:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	4a14      	ldr	r2, [pc, #80]	; (800dc58 <ProcessRadioRxDone+0x5cc>)
 800dc06:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
                PrepareRxDoneAbort( );
 800dc0a:	f7ff fd19 	bl	800d640 <PrepareRxDoneAbort>
                return;
 800dc0e:	e184      	b.n	800df1a <ProcessRadioRxDone+0x88e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800dc10:	78fa      	ldrb	r2, [r7, #3]
 800dc12:	6879      	ldr	r1, [r7, #4]
 800dc14:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800dc18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc1c:	9300      	str	r3, [sp, #0]
 800dc1e:	460b      	mov	r3, r1
 800dc20:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800dc24:	f005 fc80 	bl	8013528 <LoRaMacCryptoUnsecureMessage>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800dc2e:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d016      	beq.n	800dc64 <ProcessRadioRxDone+0x5d8>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800dc36:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dc3a:	2b02      	cmp	r3, #2
 800dc3c:	d104      	bne.n	800dc48 <ProcessRadioRxDone+0x5bc>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800dc3e:	4b06      	ldr	r3, [pc, #24]	; (800dc58 <ProcessRadioRxDone+0x5cc>)
 800dc40:	220b      	movs	r2, #11
 800dc42:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800dc46:	e003      	b.n	800dc50 <ProcessRadioRxDone+0x5c4>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800dc48:	4b03      	ldr	r3, [pc, #12]	; (800dc58 <ProcessRadioRxDone+0x5cc>)
 800dc4a:	220c      	movs	r2, #12
 800dc4c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800dc50:	f7ff fcf6 	bl	800d640 <PrepareRxDoneAbort>
                return;
 800dc54:	e161      	b.n	800df1a <ProcessRadioRxDone+0x88e>
 800dc56:	bf00      	nop
 800dc58:	20000688 	.word	0x20000688
 800dc5c:	20000b94 	.word	0x20000b94
 800dc60:	200008c0 	.word	0x200008c0
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800dc64:	4bae      	ldr	r3, [pc, #696]	; (800df20 <ProcessRadioRxDone+0x894>)
 800dc66:	2200      	movs	r2, #0
 800dc68:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800dc6c:	4aac      	ldr	r2, [pc, #688]	; (800df20 <ProcessRadioRxDone+0x894>)
 800dc6e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800dc72:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800dc76:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dc7a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	461a      	mov	r2, r3
 800dc82:	4ba7      	ldr	r3, [pc, #668]	; (800df20 <ProcessRadioRxDone+0x894>)
 800dc84:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800dc88:	4ba5      	ldr	r3, [pc, #660]	; (800df20 <ProcessRadioRxDone+0x894>)
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800dc90:	4ba3      	ldr	r3, [pc, #652]	; (800df20 <ProcessRadioRxDone+0x894>)
 800dc92:	2200      	movs	r2, #0
 800dc94:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	4aa1      	ldr	r2, [pc, #644]	; (800df20 <ProcessRadioRxDone+0x894>)
 800dc9c:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	4a9f      	ldr	r2, [pc, #636]	; (800df20 <ProcessRadioRxDone+0x894>)
 800dca4:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800dca8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dcac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dcb0:	b2db      	uxtb	r3, r3
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	bf14      	ite	ne
 800dcb6:	2301      	movne	r3, #1
 800dcb8:	2300      	moveq	r3, #0
 800dcba:	b2da      	uxtb	r2, r3
 800dcbc:	4b98      	ldr	r3, [pc, #608]	; (800df20 <ProcessRadioRxDone+0x894>)
 800dcbe:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800dcc2:	4b97      	ldr	r3, [pc, #604]	; (800df20 <ProcessRadioRxDone+0x894>)
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800dcca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dcce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	bf14      	ite	ne
 800dcd8:	2301      	movne	r3, #1
 800dcda:	2300      	moveq	r3, #0
 800dcdc:	b2da      	uxtb	r2, r3
 800dcde:	4b90      	ldr	r3, [pc, #576]	; (800df20 <ProcessRadioRxDone+0x894>)
 800dce0:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800dce4:	4b8e      	ldr	r3, [pc, #568]	; (800df20 <ProcessRadioRxDone+0x894>)
 800dce6:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d004      	beq.n	800dcf8 <ProcessRadioRxDone+0x66c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800dcee:	4b8c      	ldr	r3, [pc, #560]	; (800df20 <ProcessRadioRxDone+0x894>)
 800dcf0:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d102      	bne.n	800dcfe <ProcessRadioRxDone+0x672>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800dcf8:	4b8a      	ldr	r3, [pc, #552]	; (800df24 <ProcessRadioRxDone+0x898>)
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800dcfe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800dd02:	2b01      	cmp	r3, #1
 800dd04:	d104      	bne.n	800dd10 <ProcessRadioRxDone+0x684>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800dd06:	4b86      	ldr	r3, [pc, #536]	; (800df20 <ProcessRadioRxDone+0x894>)
 800dd08:	2202      	movs	r2, #2
 800dd0a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800dd0e:	e01f      	b.n	800dd50 <ProcessRadioRxDone+0x6c4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800dd10:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800dd14:	f023 031f 	bic.w	r3, r3, #31
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	2ba0      	cmp	r3, #160	; 0xa0
 800dd1c:	d110      	bne.n	800dd40 <ProcessRadioRxDone+0x6b4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800dd1e:	4b81      	ldr	r3, [pc, #516]	; (800df24 <ProcessRadioRxDone+0x898>)
 800dd20:	2201      	movs	r2, #1
 800dd22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800dd26:	4b7f      	ldr	r3, [pc, #508]	; (800df24 <ProcessRadioRxDone+0x898>)
 800dd28:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d102      	bne.n	800dd36 <ProcessRadioRxDone+0x6aa>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800dd30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd32:	4a7c      	ldr	r2, [pc, #496]	; (800df24 <ProcessRadioRxDone+0x898>)
 800dd34:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800dd36:	4b7a      	ldr	r3, [pc, #488]	; (800df20 <ProcessRadioRxDone+0x894>)
 800dd38:	2201      	movs	r2, #1
 800dd3a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800dd3e:	e007      	b.n	800dd50 <ProcessRadioRxDone+0x6c4>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800dd40:	4b78      	ldr	r3, [pc, #480]	; (800df24 <ProcessRadioRxDone+0x898>)
 800dd42:	2200      	movs	r2, #0
 800dd44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800dd48:	4b75      	ldr	r3, [pc, #468]	; (800df20 <ProcessRadioRxDone+0x894>)
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800dd50:	4b73      	ldr	r3, [pc, #460]	; (800df20 <ProcessRadioRxDone+0x894>)
 800dd52:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800dd56:	4a72      	ldr	r2, [pc, #456]	; (800df20 <ProcessRadioRxDone+0x894>)
 800dd58:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800dd5c:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800dd60:	4618      	mov	r0, r3
 800dd62:	f001 fee9 	bl	800fb38 <RemoveMacCommands>

            switch( fType )
 800dd66:	78bb      	ldrb	r3, [r7, #2]
 800dd68:	2b03      	cmp	r3, #3
 800dd6a:	d874      	bhi.n	800de56 <ProcessRadioRxDone+0x7ca>
 800dd6c:	a201      	add	r2, pc, #4	; (adr r2, 800dd74 <ProcessRadioRxDone+0x6e8>)
 800dd6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd72:	bf00      	nop
 800dd74:	0800dd85 	.word	0x0800dd85
 800dd78:	0800ddd5 	.word	0x0800ddd5
 800dd7c:	0800de0b 	.word	0x0800de0b
 800dd80:	0800de31 	.word	0x0800de31
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800dd84:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dd88:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	461c      	mov	r4, r3
 800dd90:	4b63      	ldr	r3, [pc, #396]	; (800df20 <ProcessRadioRxDone+0x894>)
 800dd92:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800dd96:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800dd9a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800dd9e:	f102 0010 	add.w	r0, r2, #16
 800dda2:	9300      	str	r3, [sp, #0]
 800dda4:	460b      	mov	r3, r1
 800dda6:	4622      	mov	r2, r4
 800dda8:	2100      	movs	r1, #0
 800ddaa:	f000 fee5 	bl	800eb78 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ddae:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800ddb2:	4b5b      	ldr	r3, [pc, #364]	; (800df20 <ProcessRadioRxDone+0x894>)
 800ddb4:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800ddb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddba:	4a59      	ldr	r2, [pc, #356]	; (800df20 <ProcessRadioRxDone+0x894>)
 800ddbc:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800ddc0:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800ddc4:	4b56      	ldr	r3, [pc, #344]	; (800df20 <ProcessRadioRxDone+0x894>)
 800ddc6:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800ddca:	4b55      	ldr	r3, [pc, #340]	; (800df20 <ProcessRadioRxDone+0x894>)
 800ddcc:	2201      	movs	r2, #1
 800ddce:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800ddd2:	e047      	b.n	800de64 <ProcessRadioRxDone+0x7d8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800ddd4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ddd8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	461c      	mov	r4, r3
 800dde0:	4b4f      	ldr	r3, [pc, #316]	; (800df20 <ProcessRadioRxDone+0x894>)
 800dde2:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800dde6:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800ddea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ddee:	f102 0010 	add.w	r0, r2, #16
 800ddf2:	9300      	str	r3, [sp, #0]
 800ddf4:	460b      	mov	r3, r1
 800ddf6:	4622      	mov	r2, r4
 800ddf8:	2100      	movs	r1, #0
 800ddfa:	f000 febd 	bl	800eb78 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ddfe:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800de02:	4b47      	ldr	r3, [pc, #284]	; (800df20 <ProcessRadioRxDone+0x894>)
 800de04:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800de08:	e02c      	b.n	800de64 <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800de0a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800de0c:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800de10:	4b43      	ldr	r3, [pc, #268]	; (800df20 <ProcessRadioRxDone+0x894>)
 800de12:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800de16:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800de1a:	9300      	str	r3, [sp, #0]
 800de1c:	460b      	mov	r3, r1
 800de1e:	2100      	movs	r1, #0
 800de20:	f000 feaa 	bl	800eb78 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800de24:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800de28:	4b3d      	ldr	r3, [pc, #244]	; (800df20 <ProcessRadioRxDone+0x894>)
 800de2a:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800de2e:	e019      	b.n	800de64 <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800de30:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800de34:	4b3a      	ldr	r3, [pc, #232]	; (800df20 <ProcessRadioRxDone+0x894>)
 800de36:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800de3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de3c:	4a38      	ldr	r2, [pc, #224]	; (800df20 <ProcessRadioRxDone+0x894>)
 800de3e:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800de42:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800de46:	4b36      	ldr	r3, [pc, #216]	; (800df20 <ProcessRadioRxDone+0x894>)
 800de48:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800de4c:	4b34      	ldr	r3, [pc, #208]	; (800df20 <ProcessRadioRxDone+0x894>)
 800de4e:	2201      	movs	r2, #1
 800de50:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800de54:	e006      	b.n	800de64 <ProcessRadioRxDone+0x7d8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800de56:	4b32      	ldr	r3, [pc, #200]	; (800df20 <ProcessRadioRxDone+0x894>)
 800de58:	2201      	movs	r2, #1
 800de5a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800de5e:	f7ff fbef 	bl	800d640 <PrepareRxDoneAbort>
                    break;
 800de62:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800de64:	4a2e      	ldr	r2, [pc, #184]	; (800df20 <ProcessRadioRxDone+0x894>)
 800de66:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800de6a:	f043 0302 	orr.w	r3, r3, #2
 800de6e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

            break;
 800de72:	e033      	b.n	800dedc <ProcessRadioRxDone+0x850>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800de74:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800de78:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800de7a:	18d1      	adds	r1, r2, r3
 800de7c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800de80:	b29b      	uxth	r3, r3
 800de82:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800de86:	1ad3      	subs	r3, r2, r3
 800de88:	b29b      	uxth	r3, r3
 800de8a:	461a      	mov	r2, r3
 800de8c:	4826      	ldr	r0, [pc, #152]	; (800df28 <ProcessRadioRxDone+0x89c>)
 800de8e:	f008 fa8e 	bl	80163ae <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800de92:	4b23      	ldr	r3, [pc, #140]	; (800df20 <ProcessRadioRxDone+0x894>)
 800de94:	2203      	movs	r2, #3
 800de96:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800de9a:	4b21      	ldr	r3, [pc, #132]	; (800df20 <ProcessRadioRxDone+0x894>)
 800de9c:	2200      	movs	r2, #0
 800de9e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800dea2:	4b1f      	ldr	r3, [pc, #124]	; (800df20 <ProcessRadioRxDone+0x894>)
 800dea4:	4a20      	ldr	r2, [pc, #128]	; (800df28 <ProcessRadioRxDone+0x89c>)
 800dea6:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800deaa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800deae:	b2da      	uxtb	r2, r3
 800deb0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800deb4:	1ad3      	subs	r3, r2, r3
 800deb6:	b2da      	uxtb	r2, r3
 800deb8:	4b19      	ldr	r3, [pc, #100]	; (800df20 <ProcessRadioRxDone+0x894>)
 800deba:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800debe:	4a18      	ldr	r2, [pc, #96]	; (800df20 <ProcessRadioRxDone+0x894>)
 800dec0:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800dec4:	f043 0302 	orr.w	r3, r3, #2
 800dec8:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 800decc:	e006      	b.n	800dedc <ProcessRadioRxDone+0x850>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dece:	4b14      	ldr	r3, [pc, #80]	; (800df20 <ProcessRadioRxDone+0x894>)
 800ded0:	2201      	movs	r2, #1
 800ded2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800ded6:	f7ff fbb3 	bl	800d640 <PrepareRxDoneAbort>
            break;
 800deda:	bf00      	nop
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800dedc:	4b10      	ldr	r3, [pc, #64]	; (800df20 <ProcessRadioRxDone+0x894>)
 800dede:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d008      	beq.n	800def8 <ProcessRadioRxDone+0x86c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800dee6:	4b0e      	ldr	r3, [pc, #56]	; (800df20 <ProcessRadioRxDone+0x894>)
 800dee8:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800deec:	2b00      	cmp	r3, #0
 800deee:	d00b      	beq.n	800df08 <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800def0:	2000      	movs	r0, #0
 800def2:	f000 fca9 	bl	800e848 <OnAckTimeoutTimerEvent>
 800def6:	e007      	b.n	800df08 <ProcessRadioRxDone+0x87c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800def8:	4b0a      	ldr	r3, [pc, #40]	; (800df24 <ProcessRadioRxDone+0x898>)
 800defa:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800defe:	2b02      	cmp	r3, #2
 800df00:	d102      	bne.n	800df08 <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800df02:	2000      	movs	r0, #0
 800df04:	f000 fca0 	bl	800e848 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800df08:	4a05      	ldr	r2, [pc, #20]	; (800df20 <ProcessRadioRxDone+0x894>)
 800df0a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800df0e:	f043 0320 	orr.w	r3, r3, #32
 800df12:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800df16:	f7ff fae1 	bl	800d4dc <UpdateRxSlotIdleState>
}
 800df1a:	3788      	adds	r7, #136	; 0x88
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bdb0      	pop	{r4, r5, r7, pc}
 800df20:	20000688 	.word	0x20000688
 800df24:	20000b94 	.word	0x20000b94
 800df28:	200008c0 	.word	0x200008c0

0800df2c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800df30:	4b11      	ldr	r3, [pc, #68]	; (800df78 <ProcessRadioTxTimeout+0x4c>)
 800df32:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800df36:	2b02      	cmp	r3, #2
 800df38:	d002      	beq.n	800df40 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800df3a:	4b10      	ldr	r3, [pc, #64]	; (800df7c <ProcessRadioTxTimeout+0x50>)
 800df3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df3e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800df40:	f7ff facc 	bl	800d4dc <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800df44:	4b0e      	ldr	r3, [pc, #56]	; (800df80 <ProcessRadioTxTimeout+0x54>)
 800df46:	2202      	movs	r2, #2
 800df48:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800df4c:	2002      	movs	r0, #2
 800df4e:	f004 fc63 	bl	8012818 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800df52:	4b0b      	ldr	r3, [pc, #44]	; (800df80 <ProcessRadioTxTimeout+0x54>)
 800df54:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d003      	beq.n	800df64 <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 800df5c:	4b08      	ldr	r3, [pc, #32]	; (800df80 <ProcessRadioTxTimeout+0x54>)
 800df5e:	2201      	movs	r2, #1
 800df60:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800df64:	4a06      	ldr	r2, [pc, #24]	; (800df80 <ProcessRadioTxTimeout+0x54>)
 800df66:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800df6a:	f043 0320 	orr.w	r3, r3, #32
 800df6e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
}
 800df72:	bf00      	nop
 800df74:	bd80      	pop	{r7, pc}
 800df76:	bf00      	nop
 800df78:	20000b94 	.word	0x20000b94
 800df7c:	0801b9f8 	.word	0x0801b9f8
 800df80:	20000688 	.word	0x20000688

0800df84 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
 800df8a:	4603      	mov	r3, r0
 800df8c:	460a      	mov	r2, r1
 800df8e:	71fb      	strb	r3, [r7, #7]
 800df90:	4613      	mov	r3, r2
 800df92:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800df94:	2300      	movs	r3, #0
 800df96:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800df98:	4b40      	ldr	r3, [pc, #256]	; (800e09c <HandleRadioRxErrorTimeout+0x118>)
 800df9a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800df9e:	2b02      	cmp	r3, #2
 800dfa0:	d002      	beq.n	800dfa8 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800dfa2:	4b3f      	ldr	r3, [pc, #252]	; (800e0a0 <HandleRadioRxErrorTimeout+0x11c>)
 800dfa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfa6:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800dfa8:	f003 ff97 	bl	8011eda <LoRaMacClassBIsBeaconExpected>
 800dfac:	4603      	mov	r3, r0
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d007      	beq.n	800dfc2 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800dfb2:	2002      	movs	r0, #2
 800dfb4:	f003 ff45 	bl	8011e42 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800dfb8:	2000      	movs	r0, #0
 800dfba:	f003 ff67 	bl	8011e8c <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800dfc2:	4b36      	ldr	r3, [pc, #216]	; (800e09c <HandleRadioRxErrorTimeout+0x118>)
 800dfc4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800dfc8:	2b01      	cmp	r3, #1
 800dfca:	d119      	bne.n	800e000 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800dfcc:	f003 ff8c 	bl	8011ee8 <LoRaMacClassBIsPingExpected>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d007      	beq.n	800dfe6 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dfd6:	2000      	movs	r0, #0
 800dfd8:	f003 ff3d 	bl	8011e56 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800dfdc:	2000      	movs	r0, #0
 800dfde:	f003 ff5e 	bl	8011e9e <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800dfe6:	f003 ff86 	bl	8011ef6 <LoRaMacClassBIsMulticastExpected>
 800dfea:	4603      	mov	r3, r0
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d007      	beq.n	800e000 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dff0:	2000      	movs	r0, #0
 800dff2:	f003 ff3a 	bl	8011e6a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800dff6:	2000      	movs	r0, #0
 800dff8:	f003 ff5a 	bl	8011eb0 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800dffc:	2301      	movs	r3, #1
 800dffe:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800e000:	7bfb      	ldrb	r3, [r7, #15]
 800e002:	f083 0301 	eor.w	r3, r3, #1
 800e006:	b2db      	uxtb	r3, r3
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d040      	beq.n	800e08e <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e00c:	4b25      	ldr	r3, [pc, #148]	; (800e0a4 <HandleRadioRxErrorTimeout+0x120>)
 800e00e:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800e012:	2b00      	cmp	r3, #0
 800e014:	d122      	bne.n	800e05c <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800e016:	4b23      	ldr	r3, [pc, #140]	; (800e0a4 <HandleRadioRxErrorTimeout+0x120>)
 800e018:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d003      	beq.n	800e028 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e020:	4a20      	ldr	r2, [pc, #128]	; (800e0a4 <HandleRadioRxErrorTimeout+0x120>)
 800e022:	79fb      	ldrb	r3, [r7, #7]
 800e024:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e028:	79fb      	ldrb	r3, [r7, #7]
 800e02a:	4618      	mov	r0, r3
 800e02c:	f004 fbf4 	bl	8012818 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800e030:	4b1a      	ldr	r3, [pc, #104]	; (800e09c <HandleRadioRxErrorTimeout+0x118>)
 800e032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e034:	4618      	mov	r0, r3
 800e036:	f00c fc31 	bl	801a89c <UTIL_TIMER_GetElapsedTime>
 800e03a:	4602      	mov	r2, r0
 800e03c:	4b19      	ldr	r3, [pc, #100]	; (800e0a4 <HandleRadioRxErrorTimeout+0x120>)
 800e03e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800e042:	429a      	cmp	r2, r3
 800e044:	d323      	bcc.n	800e08e <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800e046:	4818      	ldr	r0, [pc, #96]	; (800e0a8 <HandleRadioRxErrorTimeout+0x124>)
 800e048:	f00c fafc 	bl	801a644 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e04c:	4a15      	ldr	r2, [pc, #84]	; (800e0a4 <HandleRadioRxErrorTimeout+0x120>)
 800e04e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e052:	f043 0320 	orr.w	r3, r3, #32
 800e056:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 800e05a:	e018      	b.n	800e08e <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e05c:	4b11      	ldr	r3, [pc, #68]	; (800e0a4 <HandleRadioRxErrorTimeout+0x120>)
 800e05e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e062:	2b00      	cmp	r3, #0
 800e064:	d003      	beq.n	800e06e <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e066:	4a0f      	ldr	r2, [pc, #60]	; (800e0a4 <HandleRadioRxErrorTimeout+0x120>)
 800e068:	79bb      	ldrb	r3, [r7, #6]
 800e06a:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e06e:	79bb      	ldrb	r3, [r7, #6]
 800e070:	4618      	mov	r0, r3
 800e072:	f004 fbd1 	bl	8012818 <LoRaMacConfirmQueueSetStatusCmn>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e076:	4b09      	ldr	r3, [pc, #36]	; (800e09c <HandleRadioRxErrorTimeout+0x118>)
 800e078:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e07c:	2b02      	cmp	r3, #2
 800e07e:	d006      	beq.n	800e08e <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e080:	4a08      	ldr	r2, [pc, #32]	; (800e0a4 <HandleRadioRxErrorTimeout+0x120>)
 800e082:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e086:	f043 0320 	orr.w	r3, r3, #32
 800e08a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800e08e:	f7ff fa25 	bl	800d4dc <UpdateRxSlotIdleState>
}
 800e092:	bf00      	nop
 800e094:	3710      	adds	r7, #16
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	20000b94 	.word	0x20000b94
 800e0a0:	0801b9f8 	.word	0x0801b9f8
 800e0a4:	20000688 	.word	0x20000688
 800e0a8:	20000a20 	.word	0x20000a20

0800e0ac <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e0b0:	2106      	movs	r1, #6
 800e0b2:	2005      	movs	r0, #5
 800e0b4:	f7ff ff66 	bl	800df84 <HandleRadioRxErrorTimeout>
}
 800e0b8:	bf00      	nop
 800e0ba:	bd80      	pop	{r7, pc}

0800e0bc <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e0c0:	2104      	movs	r1, #4
 800e0c2:	2003      	movs	r0, #3
 800e0c4:	f7ff ff5e 	bl	800df84 <HandleRadioRxErrorTimeout>
}
 800e0c8:	bf00      	nop
 800e0ca:	bd80      	pop	{r7, pc}

0800e0cc <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b084      	sub	sp, #16
 800e0d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0d2:	f3ef 8310 	mrs	r3, PRIMASK
 800e0d6:	607b      	str	r3, [r7, #4]
  return(result);
 800e0d8:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e0da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e0dc:	b672      	cpsid	i
}
 800e0de:	bf00      	nop
    events = LoRaMacRadioEvents;
 800e0e0:	4b1d      	ldr	r3, [pc, #116]	; (800e158 <LoRaMacHandleIrqEvents+0x8c>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e0e6:	4b1c      	ldr	r3, [pc, #112]	; (800e158 <LoRaMacHandleIrqEvents+0x8c>)
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	601a      	str	r2, [r3, #0]
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	f383 8810 	msr	PRIMASK, r3
}
 800e0f6:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d027      	beq.n	800e14e <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800e0fe:	783b      	ldrb	r3, [r7, #0]
 800e100:	f003 0310 	and.w	r3, r3, #16
 800e104:	b2db      	uxtb	r3, r3
 800e106:	2b00      	cmp	r3, #0
 800e108:	d001      	beq.n	800e10e <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800e10a:	f7ff f9ff 	bl	800d50c <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e10e:	783b      	ldrb	r3, [r7, #0]
 800e110:	f003 0308 	and.w	r3, r3, #8
 800e114:	b2db      	uxtb	r3, r3
 800e116:	2b00      	cmp	r3, #0
 800e118:	d001      	beq.n	800e11e <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e11a:	f7ff fab7 	bl	800d68c <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e11e:	783b      	ldrb	r3, [r7, #0]
 800e120:	f003 0304 	and.w	r3, r3, #4
 800e124:	b2db      	uxtb	r3, r3
 800e126:	2b00      	cmp	r3, #0
 800e128:	d001      	beq.n	800e12e <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800e12a:	f7ff feff 	bl	800df2c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800e12e:	783b      	ldrb	r3, [r7, #0]
 800e130:	f003 0302 	and.w	r3, r3, #2
 800e134:	b2db      	uxtb	r3, r3
 800e136:	2b00      	cmp	r3, #0
 800e138:	d001      	beq.n	800e13e <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800e13a:	f7ff ffb7 	bl	800e0ac <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800e13e:	783b      	ldrb	r3, [r7, #0]
 800e140:	f003 0301 	and.w	r3, r3, #1
 800e144:	b2db      	uxtb	r3, r3
 800e146:	2b00      	cmp	r3, #0
 800e148:	d001      	beq.n	800e14e <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800e14a:	f7ff ffb7 	bl	800e0bc <ProcessRadioRxTimeout>
        }
    }
}
 800e14e:	bf00      	nop
 800e150:	3710      	adds	r7, #16
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	200019e4 	.word	0x200019e4

0800e15c <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800e15c:	b480      	push	{r7}
 800e15e:	af00      	add	r7, sp, #0
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e160:	4b08      	ldr	r3, [pc, #32]	; (800e184 <LoRaMacIsBusy+0x28>)
 800e162:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e166:	2b00      	cmp	r3, #0
 800e168:	d106      	bne.n	800e178 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e16a:	4b06      	ldr	r3, [pc, #24]	; (800e184 <LoRaMacIsBusy+0x28>)
 800e16c:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e170:	2b01      	cmp	r3, #1
 800e172:	d101      	bne.n	800e178 <LoRaMacIsBusy+0x1c>
    {
        return false;
 800e174:	2300      	movs	r3, #0
 800e176:	e000      	b.n	800e17a <LoRaMacIsBusy+0x1e>
    }
    return true;
 800e178:	2301      	movs	r3, #1
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bc80      	pop	{r7}
 800e180:	4770      	bx	lr
 800e182:	bf00      	nop
 800e184:	20000688 	.word	0x20000688

0800e188 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800e188:	b480      	push	{r7}
 800e18a:	b083      	sub	sp, #12
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	4603      	mov	r3, r0
 800e190:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800e192:	4a04      	ldr	r2, [pc, #16]	; (800e1a4 <LoRaMacEnableRequests+0x1c>)
 800e194:	79fb      	ldrb	r3, [r7, #7]
 800e196:	f882 3486 	strb.w	r3, [r2, #1158]	; 0x486
}
 800e19a:	bf00      	nop
 800e19c:	370c      	adds	r7, #12
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bc80      	pop	{r7}
 800e1a2:	4770      	bx	lr
 800e1a4:	20000688 	.word	0x20000688

0800e1a8 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800e1ae:	4b2c      	ldr	r3, [pc, #176]	; (800e260 <LoRaMacHandleRequestEvents+0xb8>)
 800e1b0:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e1b4:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800e1b6:	4b2a      	ldr	r3, [pc, #168]	; (800e260 <LoRaMacHandleRequestEvents+0xb8>)
 800e1b8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d14a      	bne.n	800e256 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e1c0:	4b27      	ldr	r3, [pc, #156]	; (800e260 <LoRaMacHandleRequestEvents+0xb8>)
 800e1c2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e1c6:	f003 0301 	and.w	r3, r3, #1
 800e1ca:	b2db      	uxtb	r3, r3
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d006      	beq.n	800e1de <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800e1d0:	4a23      	ldr	r2, [pc, #140]	; (800e260 <LoRaMacHandleRequestEvents+0xb8>)
 800e1d2:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e1d6:	f36f 0300 	bfc	r3, #0, #1
 800e1da:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e1de:	4b20      	ldr	r3, [pc, #128]	; (800e260 <LoRaMacHandleRequestEvents+0xb8>)
 800e1e0:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e1e4:	f003 0304 	and.w	r3, r3, #4
 800e1e8:	b2db      	uxtb	r3, r3
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d006      	beq.n	800e1fc <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e1ee:	4a1c      	ldr	r2, [pc, #112]	; (800e260 <LoRaMacHandleRequestEvents+0xb8>)
 800e1f0:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e1f4:	f36f 0382 	bfc	r3, #2, #1
 800e1f8:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e1fc:	2001      	movs	r0, #1
 800e1fe:	f7ff ffc3 	bl	800e188 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800e202:	793b      	ldrb	r3, [r7, #4]
 800e204:	f003 0301 	and.w	r3, r3, #1
 800e208:	b2db      	uxtb	r3, r3
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d005      	beq.n	800e21a <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800e20e:	4b14      	ldr	r3, [pc, #80]	; (800e260 <LoRaMacHandleRequestEvents+0xb8>)
 800e210:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	4813      	ldr	r0, [pc, #76]	; (800e264 <LoRaMacHandleRequestEvents+0xbc>)
 800e218:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800e21a:	793b      	ldrb	r3, [r7, #4]
 800e21c:	f003 0304 	and.w	r3, r3, #4
 800e220:	b2db      	uxtb	r3, r3
 800e222:	2b00      	cmp	r3, #0
 800e224:	d00e      	beq.n	800e244 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800e226:	4810      	ldr	r0, [pc, #64]	; (800e268 <LoRaMacHandleRequestEvents+0xc0>)
 800e228:	f004 fb44 	bl	80128b4 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800e22c:	f004 fb8e 	bl	801294c <LoRaMacConfirmQueueGetCnt>
 800e230:	4603      	mov	r3, r0
 800e232:	2b00      	cmp	r3, #0
 800e234:	d006      	beq.n	800e244 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e236:	4a0a      	ldr	r2, [pc, #40]	; (800e260 <LoRaMacHandleRequestEvents+0xb8>)
 800e238:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e23c:	f043 0304 	orr.w	r3, r3, #4
 800e240:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800e244:	f003 fe75 	bl	8011f32 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800e248:	4a05      	ldr	r2, [pc, #20]	; (800e260 <LoRaMacHandleRequestEvents+0xb8>)
 800e24a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e24e:	f36f 1345 	bfc	r3, #5, #1
 800e252:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
}
 800e256:	bf00      	nop
 800e258:	3708      	adds	r7, #8
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	20000688 	.word	0x20000688
 800e264:	20000ac0 	.word	0x20000ac0
 800e268:	20000ad4 	.word	0x20000ad4

0800e26c <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800e272:	4b07      	ldr	r3, [pc, #28]	; (800e290 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 800e274:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d105      	bne.n	800e288 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800e27c:	2300      	movs	r3, #0
 800e27e:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800e280:	1dfb      	adds	r3, r7, #7
 800e282:	4618      	mov	r0, r3
 800e284:	f004 f8fc 	bl	8012480 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 800e288:	bf00      	nop
 800e28a:	3708      	adds	r7, #8
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}
 800e290:	20000688 	.word	0x20000688

0800e294 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800e294:	b580      	push	{r7, lr}
 800e296:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800e298:	4b16      	ldr	r3, [pc, #88]	; (800e2f4 <LoRaMacHandleIndicationEvents+0x60>)
 800e29a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e29e:	f003 0308 	and.w	r3, r3, #8
 800e2a2:	b2db      	uxtb	r3, r3
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d00d      	beq.n	800e2c4 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800e2a8:	4a12      	ldr	r2, [pc, #72]	; (800e2f4 <LoRaMacHandleIndicationEvents+0x60>)
 800e2aa:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e2ae:	f36f 03c3 	bfc	r3, #3, #1
 800e2b2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800e2b6:	4b0f      	ldr	r3, [pc, #60]	; (800e2f4 <LoRaMacHandleIndicationEvents+0x60>)
 800e2b8:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e2bc:	68db      	ldr	r3, [r3, #12]
 800e2be:	490e      	ldr	r1, [pc, #56]	; (800e2f8 <LoRaMacHandleIndicationEvents+0x64>)
 800e2c0:	480e      	ldr	r0, [pc, #56]	; (800e2fc <LoRaMacHandleIndicationEvents+0x68>)
 800e2c2:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e2c4:	4b0b      	ldr	r3, [pc, #44]	; (800e2f4 <LoRaMacHandleIndicationEvents+0x60>)
 800e2c6:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e2ca:	f003 0302 	and.w	r3, r3, #2
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d00d      	beq.n	800e2f0 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800e2d4:	4a07      	ldr	r2, [pc, #28]	; (800e2f4 <LoRaMacHandleIndicationEvents+0x60>)
 800e2d6:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e2da:	f36f 0341 	bfc	r3, #1, #1
 800e2de:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800e2e2:	4b04      	ldr	r3, [pc, #16]	; (800e2f4 <LoRaMacHandleIndicationEvents+0x60>)
 800e2e4:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e2e8:	685b      	ldr	r3, [r3, #4]
 800e2ea:	4903      	ldr	r1, [pc, #12]	; (800e2f8 <LoRaMacHandleIndicationEvents+0x64>)
 800e2ec:	4804      	ldr	r0, [pc, #16]	; (800e300 <LoRaMacHandleIndicationEvents+0x6c>)
 800e2ee:	4798      	blx	r3
    }
}
 800e2f0:	bf00      	nop
 800e2f2:	bd80      	pop	{r7, pc}
 800e2f4:	20000688 	.word	0x20000688
 800e2f8:	20000b08 	.word	0x20000b08
 800e2fc:	20000ae8 	.word	0x20000ae8
 800e300:	20000aa4 	.word	0x20000aa4

0800e304 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b082      	sub	sp, #8
 800e308:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e30a:	4b32      	ldr	r3, [pc, #200]	; (800e3d4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e30c:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e310:	f003 0301 	and.w	r3, r3, #1
 800e314:	b2db      	uxtb	r3, r3
 800e316:	2b00      	cmp	r3, #0
 800e318:	d058      	beq.n	800e3cc <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800e31a:	2300      	movs	r3, #0
 800e31c:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800e31e:	2300      	movs	r3, #0
 800e320:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e322:	4b2c      	ldr	r3, [pc, #176]	; (800e3d4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e324:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d004      	beq.n	800e336 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800e32c:	4b29      	ldr	r3, [pc, #164]	; (800e3d4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e32e:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e332:	2b03      	cmp	r3, #3
 800e334:	d104      	bne.n	800e340 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800e336:	f002 f87b 	bl	8010430 <CheckRetransUnconfirmedUplink>
 800e33a:	4603      	mov	r3, r0
 800e33c:	71fb      	strb	r3, [r7, #7]
 800e33e:	e020      	b.n	800e382 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800e340:	4b24      	ldr	r3, [pc, #144]	; (800e3d4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e342:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e346:	2b01      	cmp	r3, #1
 800e348:	d11b      	bne.n	800e382 <LoRaMacHandleMcpsRequest+0x7e>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 800e34a:	4b22      	ldr	r3, [pc, #136]	; (800e3d4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e34c:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800e350:	2b00      	cmp	r3, #0
 800e352:	d014      	beq.n	800e37e <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800e354:	f002 f898 	bl	8010488 <CheckRetransConfirmedUplink>
 800e358:	4603      	mov	r3, r0
 800e35a:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e35c:	4b1e      	ldr	r3, [pc, #120]	; (800e3d8 <LoRaMacHandleMcpsRequest+0xd4>)
 800e35e:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800e362:	2b00      	cmp	r3, #0
 800e364:	d10d      	bne.n	800e382 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800e366:	79fb      	ldrb	r3, [r7, #7]
 800e368:	f083 0301 	eor.w	r3, r3, #1
 800e36c:	b2db      	uxtb	r3, r3
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d002      	beq.n	800e378 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800e372:	f002 f905 	bl	8010580 <AckTimeoutRetriesProcess>
 800e376:	e004      	b.n	800e382 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800e378:	f002 f940 	bl	80105fc <AckTimeoutRetriesFinalize>
 800e37c:	e001      	b.n	800e382 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800e37e:	2301      	movs	r3, #1
 800e380:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800e382:	79fb      	ldrb	r3, [r7, #7]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d00d      	beq.n	800e3a4 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800e388:	4814      	ldr	r0, [pc, #80]	; (800e3dc <LoRaMacHandleMcpsRequest+0xd8>)
 800e38a:	f00c f95b 	bl	801a644 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e38e:	4b11      	ldr	r3, [pc, #68]	; (800e3d4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e390:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e394:	f023 0320 	bic.w	r3, r3, #32
 800e398:	4a0e      	ldr	r2, [pc, #56]	; (800e3d4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e39a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800e39e:	f002 f895 	bl	80104cc <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800e3a2:	e013      	b.n	800e3cc <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800e3a4:	79bb      	ldrb	r3, [r7, #6]
 800e3a6:	f083 0301 	eor.w	r3, r3, #1
 800e3aa:	b2db      	uxtb	r3, r3
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d00d      	beq.n	800e3cc <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800e3b0:	4a08      	ldr	r2, [pc, #32]	; (800e3d4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e3b2:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e3b6:	f36f 1345 	bfc	r3, #5, #1
 800e3ba:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 800e3be:	4b05      	ldr	r3, [pc, #20]	; (800e3d4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800e3c6:	2000      	movs	r0, #0
 800e3c8:	f000 f994 	bl	800e6f4 <OnTxDelayedTimerEvent>
}
 800e3cc:	bf00      	nop
 800e3ce:	3708      	adds	r7, #8
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}
 800e3d4:	20000688 	.word	0x20000688
 800e3d8:	20000b94 	.word	0x20000b94
 800e3dc:	200009f0 	.word	0x200009f0

0800e3e0 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e3e4:	4b1b      	ldr	r3, [pc, #108]	; (800e454 <LoRaMacHandleMlmeRequest+0x74>)
 800e3e6:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e3ea:	f003 0304 	and.w	r3, r3, #4
 800e3ee:	b2db      	uxtb	r3, r3
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d02c      	beq.n	800e44e <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e3f4:	2001      	movs	r0, #1
 800e3f6:	f004 fa43 	bl	8012880 <LoRaMacConfirmQueueIsCmdActive>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d012      	beq.n	800e426 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800e400:	2001      	movs	r0, #1
 800e402:	f004 f9df 	bl	80127c4 <LoRaMacConfirmQueueGetStatus>
 800e406:	4603      	mov	r3, r0
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d103      	bne.n	800e414 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800e40c:	4b11      	ldr	r3, [pc, #68]	; (800e454 <LoRaMacHandleMlmeRequest+0x74>)
 800e40e:	2200      	movs	r2, #0
 800e410:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e414:	4b0f      	ldr	r3, [pc, #60]	; (800e454 <LoRaMacHandleMlmeRequest+0x74>)
 800e416:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e41a:	f023 0302 	bic.w	r3, r3, #2
 800e41e:	4a0d      	ldr	r2, [pc, #52]	; (800e454 <LoRaMacHandleMlmeRequest+0x74>)
 800e420:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800e424:	e013      	b.n	800e44e <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e426:	2005      	movs	r0, #5
 800e428:	f004 fa2a 	bl	8012880 <LoRaMacConfirmQueueIsCmdActive>
 800e42c:	4603      	mov	r3, r0
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d105      	bne.n	800e43e <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800e432:	2006      	movs	r0, #6
 800e434:	f004 fa24 	bl	8012880 <LoRaMacConfirmQueueIsCmdActive>
 800e438:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d007      	beq.n	800e44e <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e43e:	4b05      	ldr	r3, [pc, #20]	; (800e454 <LoRaMacHandleMlmeRequest+0x74>)
 800e440:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e444:	f023 0302 	bic.w	r3, r3, #2
 800e448:	4a02      	ldr	r2, [pc, #8]	; (800e454 <LoRaMacHandleMlmeRequest+0x74>)
 800e44a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800e44e:	bf00      	nop
 800e450:	bd80      	pop	{r7, pc}
 800e452:	bf00      	nop
 800e454:	20000688 	.word	0x20000688

0800e458 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e45c:	200c      	movs	r0, #12
 800e45e:	f004 fa0f 	bl	8012880 <LoRaMacConfirmQueueIsCmdActive>
 800e462:	4603      	mov	r3, r0
 800e464:	2b00      	cmp	r3, #0
 800e466:	d019      	beq.n	800e49c <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800e468:	4b0e      	ldr	r3, [pc, #56]	; (800e4a4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e46a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e46e:	f003 0301 	and.w	r3, r3, #1
 800e472:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e474:	2b00      	cmp	r3, #0
 800e476:	d111      	bne.n	800e49c <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e478:	4b0a      	ldr	r3, [pc, #40]	; (800e4a4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e47a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e47e:	f003 0304 	and.w	r3, r3, #4
 800e482:	b2db      	uxtb	r3, r3
 800e484:	2b00      	cmp	r3, #0
 800e486:	d009      	beq.n	800e49c <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e488:	4b06      	ldr	r3, [pc, #24]	; (800e4a4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e48a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e48e:	f023 0302 	bic.w	r3, r3, #2
 800e492:	4a04      	ldr	r2, [pc, #16]	; (800e4a4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e494:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800e498:	2301      	movs	r3, #1
 800e49a:	e000      	b.n	800e49e <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800e49c:	2300      	movs	r3, #0
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	20000688 	.word	0x20000688

0800e4a8 <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800e4a8:	b480      	push	{r7}
 800e4aa:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800e4ac:	4b0d      	ldr	r3, [pc, #52]	; (800e4e4 <LoRaMacCheckForRxAbort+0x3c>)
 800e4ae:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e4b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00f      	beq.n	800e4da <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800e4ba:	4b0a      	ldr	r3, [pc, #40]	; (800e4e4 <LoRaMacCheckForRxAbort+0x3c>)
 800e4bc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e4c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e4c4:	4a07      	ldr	r2, [pc, #28]	; (800e4e4 <LoRaMacCheckForRxAbort+0x3c>)
 800e4c6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e4ca:	4b06      	ldr	r3, [pc, #24]	; (800e4e4 <LoRaMacCheckForRxAbort+0x3c>)
 800e4cc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e4d0:	f023 0302 	bic.w	r3, r3, #2
 800e4d4:	4a03      	ldr	r2, [pc, #12]	; (800e4e4 <LoRaMacCheckForRxAbort+0x3c>)
 800e4d6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800e4da:	bf00      	nop
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bc80      	pop	{r7}
 800e4e0:	4770      	bx	lr
 800e4e2:	bf00      	nop
 800e4e4:	20000688 	.word	0x20000688

0800e4e8 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800e4f8:	4b50      	ldr	r3, [pc, #320]	; (800e63c <LoRaMacHandleNvm+0x154>)
 800e4fa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	f040 8098 	bne.w	800e634 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2124      	movs	r1, #36	; 0x24
 800e508:	4618      	mov	r0, r3
 800e50a:	f007 ffa5 	bl	8016458 <Crc32>
 800e50e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e514:	68ba      	ldr	r2, [r7, #8]
 800e516:	429a      	cmp	r2, r3
 800e518:	d006      	beq.n	800e528 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	68ba      	ldr	r2, [r7, #8]
 800e51e:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800e520:	89fb      	ldrh	r3, [r7, #14]
 800e522:	f043 0301 	orr.w	r3, r3, #1
 800e526:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	3328      	adds	r3, #40	; 0x28
 800e52c:	2114      	movs	r1, #20
 800e52e:	4618      	mov	r0, r3
 800e530:	f007 ff92 	bl	8016458 <Crc32>
 800e534:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e53a:	68ba      	ldr	r2, [r7, #8]
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d006      	beq.n	800e54e <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	68ba      	ldr	r2, [r7, #8]
 800e544:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800e546:	89fb      	ldrh	r3, [r7, #14]
 800e548:	f043 0302 	orr.w	r3, r3, #2
 800e54c:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	3340      	adds	r3, #64	; 0x40
 800e552:	21dc      	movs	r1, #220	; 0xdc
 800e554:	4618      	mov	r0, r3
 800e556:	f007 ff7f 	bl	8016458 <Crc32>
 800e55a:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800e562:	68ba      	ldr	r2, [r7, #8]
 800e564:	429a      	cmp	r2, r3
 800e566:	d007      	beq.n	800e578 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	68ba      	ldr	r2, [r7, #8]
 800e56c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800e570:	89fb      	ldrh	r3, [r7, #14]
 800e572:	f043 0304 	orr.w	r3, r3, #4
 800e576:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800e57e:	21bc      	movs	r1, #188	; 0xbc
 800e580:	4618      	mov	r0, r3
 800e582:	f007 ff69 	bl	8016458 <Crc32>
 800e586:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800e58e:	68ba      	ldr	r2, [r7, #8]
 800e590:	429a      	cmp	r2, r3
 800e592:	d007      	beq.n	800e5a4 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	68ba      	ldr	r2, [r7, #8]
 800e598:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800e59c:	89fb      	ldrh	r3, [r7, #14]
 800e59e:	f043 0308 	orr.w	r3, r3, #8
 800e5a2:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800e5aa:	2190      	movs	r1, #144	; 0x90
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f007 ff53 	bl	8016458 <Crc32>
 800e5b2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e5ba:	68ba      	ldr	r2, [r7, #8]
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	d007      	beq.n	800e5d0 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	68ba      	ldr	r2, [r7, #8]
 800e5c4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800e5c8:	89fb      	ldrh	r3, [r7, #14]
 800e5ca:	f043 0310 	orr.w	r3, r3, #16
 800e5ce:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f503 731d 	add.w	r3, r3, #628	; 0x274
 800e5d6:	f44f 6193 	mov.w	r1, #1176	; 0x498
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f007 ff3c 	bl	8016458 <Crc32>
 800e5e0:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 800e5e8:	68ba      	ldr	r2, [r7, #8]
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	d007      	beq.n	800e5fe <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	68ba      	ldr	r2, [r7, #8]
 800e5f2:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800e5f6:	89fb      	ldrh	r3, [r7, #14]
 800e5f8:	f043 0320 	orr.w	r3, r3, #32
 800e5fc:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 800e604:	2114      	movs	r1, #20
 800e606:	4618      	mov	r0, r3
 800e608:	f007 ff26 	bl	8016458 <Crc32>
 800e60c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 800e614:	68ba      	ldr	r2, [r7, #8]
 800e616:	429a      	cmp	r2, r3
 800e618:	d007      	beq.n	800e62a <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	68ba      	ldr	r2, [r7, #8]
 800e61e:	f8c3 2724 	str.w	r2, [r3, #1828]	; 0x724
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800e622:	89fb      	ldrh	r3, [r7, #14]
 800e624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e628:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800e62a:	89fb      	ldrh	r3, [r7, #14]
 800e62c:	4618      	mov	r0, r3
 800e62e:	f001 ff89 	bl	8010544 <CallNvmDataChangeCallback>
 800e632:	e000      	b.n	800e636 <LoRaMacHandleNvm+0x14e>
        return;
 800e634:	bf00      	nop
}
 800e636:	3710      	adds	r7, #16
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}
 800e63c:	20000688 	.word	0x20000688

0800e640 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800e646:	2300      	movs	r3, #0
 800e648:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800e64a:	f7ff fd3f 	bl	800e0cc <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800e64e:	f003 fcd4 	bl	8011ffa <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800e652:	4b26      	ldr	r3, [pc, #152]	; (800e6ec <LoRaMacProcess+0xac>)
 800e654:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e658:	f003 0320 	and.w	r3, r3, #32
 800e65c:	b2db      	uxtb	r3, r3
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d025      	beq.n	800e6ae <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800e662:	2000      	movs	r0, #0
 800e664:	f7ff fd90 	bl	800e188 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800e668:	f7ff ff1e 	bl	800e4a8 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800e66c:	f001 fffa 	bl	8010664 <IsRequestPending>
 800e670:	4603      	mov	r3, r0
 800e672:	2b00      	cmp	r3, #0
 800e674:	d006      	beq.n	800e684 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800e676:	f7ff feef 	bl	800e458 <LoRaMacCheckForBeaconAcquisition>
 800e67a:	4603      	mov	r3, r0
 800e67c:	461a      	mov	r2, r3
 800e67e:	79fb      	ldrb	r3, [r7, #7]
 800e680:	4313      	orrs	r3, r2
 800e682:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800e684:	79fb      	ldrb	r3, [r7, #7]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d103      	bne.n	800e692 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800e68a:	f7ff fea9 	bl	800e3e0 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800e68e:	f7ff fe39 	bl	800e304 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800e692:	f7ff fd89 	bl	800e1a8 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800e696:	f7ff fde9 	bl	800e26c <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e69a:	2001      	movs	r0, #1
 800e69c:	f7ff fd74 	bl	800e188 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800e6a0:	4a12      	ldr	r2, [pc, #72]	; (800e6ec <LoRaMacProcess+0xac>)
 800e6a2:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e6a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6aa:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    LoRaMacHandleIndicationEvents( );
 800e6ae:	f7ff fdf1 	bl	800e294 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800e6b2:	4b0e      	ldr	r3, [pc, #56]	; (800e6ec <LoRaMacProcess+0xac>)
 800e6b4:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800e6b8:	2b02      	cmp	r3, #2
 800e6ba:	d101      	bne.n	800e6c0 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 800e6bc:	f001 fb7e 	bl	800fdbc <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800e6c0:	4b0a      	ldr	r3, [pc, #40]	; (800e6ec <LoRaMacProcess+0xac>)
 800e6c2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e6c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6ca:	b2db      	uxtb	r3, r3
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d009      	beq.n	800e6e4 <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800e6d0:	4a06      	ldr	r2, [pc, #24]	; (800e6ec <LoRaMacProcess+0xac>)
 800e6d2:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e6d6:	f36f 1386 	bfc	r3, #6, #1
 800e6da:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        LoRaMacHandleNvm( &Nvm );
 800e6de:	4804      	ldr	r0, [pc, #16]	; (800e6f0 <LoRaMacProcess+0xb0>)
 800e6e0:	f7ff ff02 	bl	800e4e8 <LoRaMacHandleNvm>
    }
}
 800e6e4:	bf00      	nop
 800e6e6:	3708      	adds	r7, #8
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}
 800e6ec:	20000688 	.word	0x20000688
 800e6f0:	20000b94 	.word	0x20000b94

0800e6f4 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b082      	sub	sp, #8
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800e6fc:	4817      	ldr	r0, [pc, #92]	; (800e75c <OnTxDelayedTimerEvent+0x68>)
 800e6fe:	f00b ffa1 	bl	801a644 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e702:	4b17      	ldr	r3, [pc, #92]	; (800e760 <OnTxDelayedTimerEvent+0x6c>)
 800e704:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e708:	f023 0320 	bic.w	r3, r3, #32
 800e70c:	4a14      	ldr	r2, [pc, #80]	; (800e760 <OnTxDelayedTimerEvent+0x6c>)
 800e70e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800e712:	2001      	movs	r0, #1
 800e714:	f001 f8e6 	bl	800f8e4 <ScheduleTx>
 800e718:	4603      	mov	r3, r0
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d018      	beq.n	800e750 <OnTxDelayedTimerEvent+0x5c>
 800e71e:	2b0b      	cmp	r3, #11
 800e720:	d016      	beq.n	800e750 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e722:	4b10      	ldr	r3, [pc, #64]	; (800e764 <OnTxDelayedTimerEvent+0x70>)
 800e724:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e728:	b2da      	uxtb	r2, r3
 800e72a:	4b0d      	ldr	r3, [pc, #52]	; (800e760 <OnTxDelayedTimerEvent+0x6c>)
 800e72c:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800e730:	4b0b      	ldr	r3, [pc, #44]	; (800e760 <OnTxDelayedTimerEvent+0x6c>)
 800e732:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800e736:	4b0a      	ldr	r3, [pc, #40]	; (800e760 <OnTxDelayedTimerEvent+0x6c>)
 800e738:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800e73c:	4b08      	ldr	r3, [pc, #32]	; (800e760 <OnTxDelayedTimerEvent+0x6c>)
 800e73e:	2209      	movs	r2, #9
 800e740:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800e744:	2009      	movs	r0, #9
 800e746:	f004 f867 	bl	8012818 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800e74a:	f001 febf 	bl	80104cc <StopRetransmission>
            break;
 800e74e:	e000      	b.n	800e752 <OnTxDelayedTimerEvent+0x5e>
            break;
 800e750:	bf00      	nop
        }
    }
}
 800e752:	bf00      	nop
 800e754:	3708      	adds	r7, #8
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
 800e75a:	bf00      	nop
 800e75c:	200009f0 	.word	0x200009f0
 800e760:	20000688 	.word	0x20000688
 800e764:	20000b94 	.word	0x20000b94

0800e768 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b082      	sub	sp, #8
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800e770:	4b14      	ldr	r3, [pc, #80]	; (800e7c4 <OnRxWindow1TimerEvent+0x5c>)
 800e772:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800e776:	4b13      	ldr	r3, [pc, #76]	; (800e7c4 <OnRxWindow1TimerEvent+0x5c>)
 800e778:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800e77c:	4b12      	ldr	r3, [pc, #72]	; (800e7c8 <OnRxWindow1TimerEvent+0x60>)
 800e77e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800e782:	b25a      	sxtb	r2, r3
 800e784:	4b0f      	ldr	r3, [pc, #60]	; (800e7c4 <OnRxWindow1TimerEvent+0x5c>)
 800e786:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e78a:	4b0f      	ldr	r3, [pc, #60]	; (800e7c8 <OnRxWindow1TimerEvent+0x60>)
 800e78c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800e790:	4b0c      	ldr	r3, [pc, #48]	; (800e7c4 <OnRxWindow1TimerEvent+0x5c>)
 800e792:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800e796:	4b0c      	ldr	r3, [pc, #48]	; (800e7c8 <OnRxWindow1TimerEvent+0x60>)
 800e798:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800e79c:	4b09      	ldr	r3, [pc, #36]	; (800e7c4 <OnRxWindow1TimerEvent+0x5c>)
 800e79e:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800e7a2:	4b08      	ldr	r3, [pc, #32]	; (800e7c4 <OnRxWindow1TimerEvent+0x5c>)
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800e7aa:	4b06      	ldr	r3, [pc, #24]	; (800e7c4 <OnRxWindow1TimerEvent+0x5c>)
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800e7b2:	4906      	ldr	r1, [pc, #24]	; (800e7cc <OnRxWindow1TimerEvent+0x64>)
 800e7b4:	4806      	ldr	r0, [pc, #24]	; (800e7d0 <OnRxWindow1TimerEvent+0x68>)
 800e7b6:	f001 facd 	bl	800fd54 <RxWindowSetup>
}
 800e7ba:	bf00      	nop
 800e7bc:	3708      	adds	r7, #8
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}
 800e7c2:	bf00      	nop
 800e7c4:	20000688 	.word	0x20000688
 800e7c8:	20000b94 	.word	0x20000b94
 800e7cc:	20000a40 	.word	0x20000a40
 800e7d0:	20000a08 	.word	0x20000a08

0800e7d4 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b082      	sub	sp, #8
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e7dc:	4b16      	ldr	r3, [pc, #88]	; (800e838 <OnRxWindow2TimerEvent+0x64>)
 800e7de:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d023      	beq.n	800e82e <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800e7e6:	4b14      	ldr	r3, [pc, #80]	; (800e838 <OnRxWindow2TimerEvent+0x64>)
 800e7e8:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800e7ec:	4b12      	ldr	r3, [pc, #72]	; (800e838 <OnRxWindow2TimerEvent+0x64>)
 800e7ee:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800e7f2:	4b12      	ldr	r3, [pc, #72]	; (800e83c <OnRxWindow2TimerEvent+0x68>)
 800e7f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7f6:	4a10      	ldr	r2, [pc, #64]	; (800e838 <OnRxWindow2TimerEvent+0x64>)
 800e7f8:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e7fc:	4b0f      	ldr	r3, [pc, #60]	; (800e83c <OnRxWindow2TimerEvent+0x68>)
 800e7fe:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800e802:	4b0d      	ldr	r3, [pc, #52]	; (800e838 <OnRxWindow2TimerEvent+0x64>)
 800e804:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800e808:	4b0c      	ldr	r3, [pc, #48]	; (800e83c <OnRxWindow2TimerEvent+0x68>)
 800e80a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800e80e:	4b0a      	ldr	r3, [pc, #40]	; (800e838 <OnRxWindow2TimerEvent+0x64>)
 800e810:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800e814:	4b08      	ldr	r3, [pc, #32]	; (800e838 <OnRxWindow2TimerEvent+0x64>)
 800e816:	2200      	movs	r2, #0
 800e818:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800e81c:	4b06      	ldr	r3, [pc, #24]	; (800e838 <OnRxWindow2TimerEvent+0x64>)
 800e81e:	2201      	movs	r2, #1
 800e820:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800e824:	4906      	ldr	r1, [pc, #24]	; (800e840 <OnRxWindow2TimerEvent+0x6c>)
 800e826:	4807      	ldr	r0, [pc, #28]	; (800e844 <OnRxWindow2TimerEvent+0x70>)
 800e828:	f001 fa94 	bl	800fd54 <RxWindowSetup>
 800e82c:	e000      	b.n	800e830 <OnRxWindow2TimerEvent+0x5c>
        return;
 800e82e:	bf00      	nop
}
 800e830:	3708      	adds	r7, #8
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
 800e836:	bf00      	nop
 800e838:	20000688 	.word	0x20000688
 800e83c:	20000b94 	.word	0x20000b94
 800e840:	20000a54 	.word	0x20000a54
 800e844:	20000a20 	.word	0x20000a20

0800e848 <OnAckTimeoutTimerEvent>:
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b082      	sub	sp, #8
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800e850:	4815      	ldr	r0, [pc, #84]	; (800e8a8 <OnAckTimeoutTimerEvent+0x60>)
 800e852:	f00b fef7 	bl	801a644 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800e856:	4b15      	ldr	r3, [pc, #84]	; (800e8ac <OnAckTimeoutTimerEvent+0x64>)
 800e858:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d003      	beq.n	800e868 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800e860:	4b12      	ldr	r3, [pc, #72]	; (800e8ac <OnAckTimeoutTimerEvent+0x64>)
 800e862:	2201      	movs	r2, #1
 800e864:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e868:	4b11      	ldr	r3, [pc, #68]	; (800e8b0 <OnAckTimeoutTimerEvent+0x68>)
 800e86a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e86e:	2b02      	cmp	r3, #2
 800e870:	d106      	bne.n	800e880 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800e872:	4a0e      	ldr	r2, [pc, #56]	; (800e8ac <OnAckTimeoutTimerEvent+0x64>)
 800e874:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e878:	f043 0320 	orr.w	r3, r3, #32
 800e87c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e880:	4b0a      	ldr	r3, [pc, #40]	; (800e8ac <OnAckTimeoutTimerEvent+0x64>)
 800e882:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e886:	2b00      	cmp	r3, #0
 800e888:	d00a      	beq.n	800e8a0 <OnAckTimeoutTimerEvent+0x58>
 800e88a:	4b08      	ldr	r3, [pc, #32]	; (800e8ac <OnAckTimeoutTimerEvent+0x64>)
 800e88c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e890:	691b      	ldr	r3, [r3, #16]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d004      	beq.n	800e8a0 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e896:	4b05      	ldr	r3, [pc, #20]	; (800e8ac <OnAckTimeoutTimerEvent+0x64>)
 800e898:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e89c:	691b      	ldr	r3, [r3, #16]
 800e89e:	4798      	blx	r3
    }
}
 800e8a0:	bf00      	nop
 800e8a2:	3708      	adds	r7, #8
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	20000a80 	.word	0x20000a80
 800e8ac:	20000688 	.word	0x20000688
 800e8b0:	20000b94 	.word	0x20000b94

0800e8b4 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b084      	sub	sp, #16
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	60ba      	str	r2, [r7, #8]
 800e8bc:	607b      	str	r3, [r7, #4]
 800e8be:	4603      	mov	r3, r0
 800e8c0:	73fb      	strb	r3, [r7, #15]
 800e8c2:	460b      	mov	r3, r1
 800e8c4:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d005      	beq.n	800e8d8 <GetFCntDown+0x24>
 800e8cc:	69fb      	ldr	r3, [r7, #28]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d002      	beq.n	800e8d8 <GetFCntDown+0x24>
 800e8d2:	6a3b      	ldr	r3, [r7, #32]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d101      	bne.n	800e8dc <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e8d8:	230a      	movs	r3, #10
 800e8da:	e029      	b.n	800e930 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800e8dc:	7bfb      	ldrb	r3, [r7, #15]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d016      	beq.n	800e910 <GetFCntDown+0x5c>
 800e8e2:	2b01      	cmp	r3, #1
 800e8e4:	d118      	bne.n	800e918 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800e8e6:	79bb      	ldrb	r3, [r7, #6]
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	d10d      	bne.n	800e908 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800e8ec:	7bbb      	ldrb	r3, [r7, #14]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d002      	beq.n	800e8f8 <GetFCntDown+0x44>
 800e8f2:	7bbb      	ldrb	r3, [r7, #14]
 800e8f4:	2b03      	cmp	r3, #3
 800e8f6:	d103      	bne.n	800e900 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800e8f8:	69fb      	ldr	r3, [r7, #28]
 800e8fa:	2202      	movs	r2, #2
 800e8fc:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800e8fe:	e00d      	b.n	800e91c <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800e900:	69fb      	ldr	r3, [r7, #28]
 800e902:	2201      	movs	r2, #1
 800e904:	701a      	strb	r2, [r3, #0]
            break;
 800e906:	e009      	b.n	800e91c <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	2203      	movs	r2, #3
 800e90c:	701a      	strb	r2, [r3, #0]
            break;
 800e90e:	e005      	b.n	800e91c <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800e910:	69fb      	ldr	r3, [r7, #28]
 800e912:	2204      	movs	r2, #4
 800e914:	701a      	strb	r2, [r3, #0]
            break;
 800e916:	e001      	b.n	800e91c <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800e918:	2305      	movs	r3, #5
 800e91a:	e009      	b.n	800e930 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	7818      	ldrb	r0, [r3, #0]
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	89db      	ldrh	r3, [r3, #14]
 800e924:	461a      	mov	r2, r3
 800e926:	8b39      	ldrh	r1, [r7, #24]
 800e928:	6a3b      	ldr	r3, [r7, #32]
 800e92a:	f004 fb9f 	bl	801306c <LoRaMacCryptoGetFCntDown>
 800e92e:	4603      	mov	r3, r0
}
 800e930:	4618      	mov	r0, r3
 800e932:	3710      	adds	r7, #16
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}

0800e938 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800e938:	b5b0      	push	{r4, r5, r7, lr}
 800e93a:	b084      	sub	sp, #16
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	4603      	mov	r3, r0
 800e940:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e942:	2303      	movs	r3, #3
 800e944:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800e946:	4b61      	ldr	r3, [pc, #388]	; (800eacc <SwitchClass+0x194>)
 800e948:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e94c:	2b02      	cmp	r3, #2
 800e94e:	f000 80a5 	beq.w	800ea9c <SwitchClass+0x164>
 800e952:	2b02      	cmp	r3, #2
 800e954:	f300 80b4 	bgt.w	800eac0 <SwitchClass+0x188>
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d003      	beq.n	800e964 <SwitchClass+0x2c>
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	f000 808f 	beq.w	800ea80 <SwitchClass+0x148>
 800e962:	e0ad      	b.n	800eac0 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800e964:	79fb      	ldrb	r3, [r7, #7]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d107      	bne.n	800e97a <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800e96a:	4b58      	ldr	r3, [pc, #352]	; (800eacc <SwitchClass+0x194>)
 800e96c:	4a57      	ldr	r2, [pc, #348]	; (800eacc <SwitchClass+0x194>)
 800e96e:	336c      	adds	r3, #108	; 0x6c
 800e970:	3264      	adds	r2, #100	; 0x64
 800e972:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e976:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800e97a:	79fb      	ldrb	r3, [r7, #7]
 800e97c:	2b01      	cmp	r3, #1
 800e97e:	d10c      	bne.n	800e99a <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800e980:	79fb      	ldrb	r3, [r7, #7]
 800e982:	4618      	mov	r0, r3
 800e984:	f003 fadb 	bl	8011f3e <LoRaMacClassBSwitchClass>
 800e988:	4603      	mov	r3, r0
 800e98a:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800e98c:	7bfb      	ldrb	r3, [r7, #15]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d103      	bne.n	800e99a <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800e992:	4a4e      	ldr	r2, [pc, #312]	; (800eacc <SwitchClass+0x194>)
 800e994:	79fb      	ldrb	r3, [r7, #7]
 800e996:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
                }
            }

            if( deviceClass == CLASS_C )
 800e99a:	79fb      	ldrb	r3, [r7, #7]
 800e99c:	2b02      	cmp	r3, #2
 800e99e:	f040 808a 	bne.w	800eab6 <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800e9a2:	4a4a      	ldr	r2, [pc, #296]	; (800eacc <SwitchClass+0x194>)
 800e9a4:	79fb      	ldrb	r3, [r7, #7]
 800e9a6:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800e9aa:	4a49      	ldr	r2, [pc, #292]	; (800ead0 <SwitchClass+0x198>)
 800e9ac:	4b48      	ldr	r3, [pc, #288]	; (800ead0 <SwitchClass+0x198>)
 800e9ae:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800e9b2:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800e9b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9ba:	682b      	ldr	r3, [r5, #0]
 800e9bc:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e9be:	4b44      	ldr	r3, [pc, #272]	; (800ead0 <SwitchClass+0x198>)
 800e9c0:	2202      	movs	r2, #2
 800e9c2:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	73bb      	strb	r3, [r7, #14]
 800e9ca:	e049      	b.n	800ea60 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800e9cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e9d0:	4a3e      	ldr	r2, [pc, #248]	; (800eacc <SwitchClass+0x194>)
 800e9d2:	212c      	movs	r1, #44	; 0x2c
 800e9d4:	fb01 f303 	mul.w	r3, r1, r3
 800e9d8:	4413      	add	r3, r2
 800e9da:	33da      	adds	r3, #218	; 0xda
 800e9dc:	781b      	ldrb	r3, [r3, #0]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d038      	beq.n	800ea54 <SwitchClass+0x11c>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800e9e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e9e6:	4a39      	ldr	r2, [pc, #228]	; (800eacc <SwitchClass+0x194>)
 800e9e8:	212c      	movs	r1, #44	; 0x2c
 800e9ea:	fb01 f303 	mul.w	r3, r1, r3
 800e9ee:	4413      	add	r3, r2
 800e9f0:	33f0      	adds	r3, #240	; 0xf0
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4a35      	ldr	r2, [pc, #212]	; (800eacc <SwitchClass+0x194>)
 800e9f6:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800e9f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e9fc:	4a33      	ldr	r2, [pc, #204]	; (800eacc <SwitchClass+0x194>)
 800e9fe:	212c      	movs	r1, #44	; 0x2c
 800ea00:	fb01 f303 	mul.w	r3, r1, r3
 800ea04:	4413      	add	r3, r2
 800ea06:	33f4      	adds	r3, #244	; 0xf4
 800ea08:	f993 3000 	ldrsb.w	r3, [r3]
 800ea0c:	b2da      	uxtb	r2, r3
 800ea0e:	4b2f      	ldr	r3, [pc, #188]	; (800eacc <SwitchClass+0x194>)
 800ea10:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800ea14:	4b2e      	ldr	r3, [pc, #184]	; (800ead0 <SwitchClass+0x198>)
 800ea16:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800ea1a:	4b2d      	ldr	r3, [pc, #180]	; (800ead0 <SwitchClass+0x198>)
 800ea1c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800ea20:	4b2a      	ldr	r3, [pc, #168]	; (800eacc <SwitchClass+0x194>)
 800ea22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea24:	4a2a      	ldr	r2, [pc, #168]	; (800ead0 <SwitchClass+0x198>)
 800ea26:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ea2a:	4b28      	ldr	r3, [pc, #160]	; (800eacc <SwitchClass+0x194>)
 800ea2c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ea30:	4b27      	ldr	r3, [pc, #156]	; (800ead0 <SwitchClass+0x198>)
 800ea32:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ea36:	4b25      	ldr	r3, [pc, #148]	; (800eacc <SwitchClass+0x194>)
 800ea38:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ea3c:	4b24      	ldr	r3, [pc, #144]	; (800ead0 <SwitchClass+0x198>)
 800ea3e:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ea42:	4b23      	ldr	r3, [pc, #140]	; (800ead0 <SwitchClass+0x198>)
 800ea44:	2203      	movs	r2, #3
 800ea46:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800ea4a:	4b21      	ldr	r3, [pc, #132]	; (800ead0 <SwitchClass+0x198>)
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800ea52:	e009      	b.n	800ea68 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ea54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea58:	b2db      	uxtb	r3, r3
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	73bb      	strb	r3, [r7, #14]
 800ea60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	ddb1      	ble.n	800e9cc <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800ea68:	4b19      	ldr	r3, [pc, #100]	; (800ead0 <SwitchClass+0x198>)
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800ea70:	4b18      	ldr	r3, [pc, #96]	; (800ead4 <SwitchClass+0x19c>)
 800ea72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea74:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800ea76:	f001 f9a1 	bl	800fdbc <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ea7e:	e01a      	b.n	800eab6 <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800ea80:	79fb      	ldrb	r3, [r7, #7]
 800ea82:	4618      	mov	r0, r3
 800ea84:	f003 fa5b 	bl	8011f3e <LoRaMacClassBSwitchClass>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800ea8c:	7bfb      	ldrb	r3, [r7, #15]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d113      	bne.n	800eaba <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ea92:	4a0e      	ldr	r2, [pc, #56]	; (800eacc <SwitchClass+0x194>)
 800ea94:	79fb      	ldrb	r3, [r7, #7]
 800ea96:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
            }
            break;
 800ea9a:	e00e      	b.n	800eaba <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800ea9c:	79fb      	ldrb	r3, [r7, #7]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d10d      	bne.n	800eabe <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800eaa2:	4a0a      	ldr	r2, [pc, #40]	; (800eacc <SwitchClass+0x194>)
 800eaa4:	79fb      	ldrb	r3, [r7, #7]
 800eaa6:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800eaaa:	4b0a      	ldr	r3, [pc, #40]	; (800ead4 <SwitchClass+0x19c>)
 800eaac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaae:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800eab0:	2300      	movs	r3, #0
 800eab2:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800eab4:	e003      	b.n	800eabe <SwitchClass+0x186>
            break;
 800eab6:	bf00      	nop
 800eab8:	e002      	b.n	800eac0 <SwitchClass+0x188>
            break;
 800eaba:	bf00      	nop
 800eabc:	e000      	b.n	800eac0 <SwitchClass+0x188>
            break;
 800eabe:	bf00      	nop
        }
    }

    return status;
 800eac0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3710      	adds	r7, #16
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bdb0      	pop	{r4, r5, r7, pc}
 800eaca:	bf00      	nop
 800eacc:	20000b94 	.word	0x20000b94
 800ead0:	20000688 	.word	0x20000688
 800ead4:	0801b9f8 	.word	0x0801b9f8

0800ead8 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b086      	sub	sp, #24
 800eadc:	af00      	add	r7, sp, #0
 800eade:	4603      	mov	r3, r0
 800eae0:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800eae2:	4b10      	ldr	r3, [pc, #64]	; (800eb24 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800eae4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800eae8:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800eaea:	79fb      	ldrb	r3, [r7, #7]
 800eaec:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800eaee:	230d      	movs	r3, #13
 800eaf0:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800eaf2:	4b0c      	ldr	r3, [pc, #48]	; (800eb24 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800eaf4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d001      	beq.n	800eb00 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800eafc:	230e      	movs	r3, #14
 800eafe:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eb00:	4b08      	ldr	r3, [pc, #32]	; (800eb24 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800eb02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eb06:	f107 0210 	add.w	r2, r7, #16
 800eb0a:	4611      	mov	r1, r2
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f005 f93b 	bl	8013d88 <RegionGetPhyParam>
 800eb12:	4603      	mov	r3, r0
 800eb14:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	b2db      	uxtb	r3, r3
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3718      	adds	r7, #24
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	bf00      	nop
 800eb24:	20000b94 	.word	0x20000b94

0800eb28 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b084      	sub	sp, #16
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	4603      	mov	r3, r0
 800eb30:	71fb      	strb	r3, [r7, #7]
 800eb32:	460b      	mov	r3, r1
 800eb34:	71bb      	strb	r3, [r7, #6]
 800eb36:	4613      	mov	r3, r2
 800eb38:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800eb42:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800eb46:	4618      	mov	r0, r3
 800eb48:	f7ff ffc6 	bl	800ead8 <GetMaxAppPayloadWithoutFOptsLength>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800eb50:	79fb      	ldrb	r3, [r7, #7]
 800eb52:	b29a      	uxth	r2, r3
 800eb54:	797b      	ldrb	r3, [r7, #5]
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	4413      	add	r3, r2
 800eb5a:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800eb5c:	89ba      	ldrh	r2, [r7, #12]
 800eb5e:	89fb      	ldrh	r3, [r7, #14]
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d804      	bhi.n	800eb6e <ValidatePayloadLength+0x46>
 800eb64:	89bb      	ldrh	r3, [r7, #12]
 800eb66:	2bff      	cmp	r3, #255	; 0xff
 800eb68:	d801      	bhi.n	800eb6e <ValidatePayloadLength+0x46>
    {
        return true;
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	e000      	b.n	800eb70 <ValidatePayloadLength+0x48>
    }
    return false;
 800eb6e:	2300      	movs	r3, #0
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3710      	adds	r7, #16
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800eb78:	b590      	push	{r4, r7, lr}
 800eb7a:	b0a5      	sub	sp, #148	; 0x94
 800eb7c:	af02      	add	r7, sp, #8
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	4608      	mov	r0, r1
 800eb82:	4611      	mov	r1, r2
 800eb84:	461a      	mov	r2, r3
 800eb86:	4603      	mov	r3, r0
 800eb88:	70fb      	strb	r3, [r7, #3]
 800eb8a:	460b      	mov	r3, r1
 800eb8c:	70bb      	strb	r3, [r7, #2]
 800eb8e:	4613      	mov	r3, r2
 800eb90:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800eb92:	2300      	movs	r3, #0
 800eb94:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800eb9e:	2300      	movs	r3, #0
 800eba0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800eba4:	f000 bc6d 	b.w	800f482 <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800eba8:	78fb      	ldrb	r3, [r7, #3]
 800ebaa:	687a      	ldr	r2, [r7, #4]
 800ebac:	4413      	add	r3, r2
 800ebae:	781b      	ldrb	r3, [r3, #0]
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f003 fc8d 	bl	80124d0 <LoRaMacCommandsGetCmdSize>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	461a      	mov	r2, r3
 800ebba:	78fb      	ldrb	r3, [r7, #3]
 800ebbc:	441a      	add	r2, r3
 800ebbe:	78bb      	ldrb	r3, [r7, #2]
 800ebc0:	429a      	cmp	r2, r3
 800ebc2:	f300 8464 	bgt.w	800f48e <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800ebc6:	78fb      	ldrb	r3, [r7, #3]
 800ebc8:	1c5a      	adds	r2, r3, #1
 800ebca:	70fa      	strb	r2, [r7, #3]
 800ebcc:	461a      	mov	r2, r3
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	4413      	add	r3, r2
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	3b02      	subs	r3, #2
 800ebd6:	2b11      	cmp	r3, #17
 800ebd8:	f200 845b 	bhi.w	800f492 <ProcessMacCommands+0x91a>
 800ebdc:	a201      	add	r2, pc, #4	; (adr r2, 800ebe4 <ProcessMacCommands+0x6c>)
 800ebde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebe2:	bf00      	nop
 800ebe4:	0800ec2d 	.word	0x0800ec2d
 800ebe8:	0800ec6f 	.word	0x0800ec6f
 800ebec:	0800ed8b 	.word	0x0800ed8b
 800ebf0:	0800edc9 	.word	0x0800edc9
 800ebf4:	0800eeb5 	.word	0x0800eeb5
 800ebf8:	0800ef11 	.word	0x0800ef11
 800ebfc:	0800efcd 	.word	0x0800efcd
 800ec00:	0800f023 	.word	0x0800f023
 800ec04:	0800f107 	.word	0x0800f107
 800ec08:	0800f493 	.word	0x0800f493
 800ec0c:	0800f493 	.word	0x0800f493
 800ec10:	0800f1ad 	.word	0x0800f1ad
 800ec14:	0800f493 	.word	0x0800f493
 800ec18:	0800f493 	.word	0x0800f493
 800ec1c:	0800f2c3 	.word	0x0800f2c3
 800ec20:	0800f2f7 	.word	0x0800f2f7
 800ec24:	0800f387 	.word	0x0800f387
 800ec28:	0800f3fd 	.word	0x0800f3fd
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800ec2c:	2004      	movs	r0, #4
 800ec2e:	f003 fe27 	bl	8012880 <LoRaMacConfirmQueueIsCmdActive>
 800ec32:	4603      	mov	r3, r0
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	f000 8424 	beq.w	800f482 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800ec3a:	2104      	movs	r1, #4
 800ec3c:	2000      	movs	r0, #0
 800ec3e:	f003 fd93 	bl	8012768 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800ec42:	78fb      	ldrb	r3, [r7, #3]
 800ec44:	1c5a      	adds	r2, r3, #1
 800ec46:	70fa      	strb	r2, [r7, #3]
 800ec48:	461a      	mov	r2, r3
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	4413      	add	r3, r2
 800ec4e:	781a      	ldrb	r2, [r3, #0]
 800ec50:	4bac      	ldr	r3, [pc, #688]	; (800ef04 <ProcessMacCommands+0x38c>)
 800ec52:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800ec56:	78fb      	ldrb	r3, [r7, #3]
 800ec58:	1c5a      	adds	r2, r3, #1
 800ec5a:	70fa      	strb	r2, [r7, #3]
 800ec5c:	461a      	mov	r2, r3
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	4413      	add	r3, r2
 800ec62:	781a      	ldrb	r2, [r3, #0]
 800ec64:	4ba7      	ldr	r3, [pc, #668]	; (800ef04 <ProcessMacCommands+0x38c>)
 800ec66:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 800ec6a:	f000 bc0a 	b.w	800f482 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800ec74:	2300      	movs	r3, #0
 800ec76:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800ec80:	2300      	movs	r3, #0
 800ec82:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 800ec86:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ec8a:	f083 0301 	eor.w	r3, r3, #1
 800ec8e:	b2db      	uxtb	r3, r3
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d078      	beq.n	800ed86 <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 800ec94:	2301      	movs	r3, #1
 800ec96:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800ec9a:	78fb      	ldrb	r3, [r7, #3]
 800ec9c:	3b01      	subs	r3, #1
 800ec9e:	687a      	ldr	r2, [r7, #4]
 800eca0:	4413      	add	r3, r2
 800eca2:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800eca4:	78ba      	ldrb	r2, [r7, #2]
 800eca6:	78fb      	ldrb	r3, [r7, #3]
 800eca8:	1ad3      	subs	r3, r2, r3
 800ecaa:	b2db      	uxtb	r3, r3
 800ecac:	3301      	adds	r3, #1
 800ecae:	b2db      	uxtb	r3, r3
 800ecb0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800ecb4:	4b94      	ldr	r3, [pc, #592]	; (800ef08 <ProcessMacCommands+0x390>)
 800ecb6:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800ecba:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ecbe:	4b92      	ldr	r3, [pc, #584]	; (800ef08 <ProcessMacCommands+0x390>)
 800ecc0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ecc4:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800ecc8:	4b8f      	ldr	r3, [pc, #572]	; (800ef08 <ProcessMacCommands+0x390>)
 800ecca:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ecce:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ecd2:	4b8d      	ldr	r3, [pc, #564]	; (800ef08 <ProcessMacCommands+0x390>)
 800ecd4:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800ecd8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800ecdc:	4b8a      	ldr	r3, [pc, #552]	; (800ef08 <ProcessMacCommands+0x390>)
 800ecde:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ece2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800ece6:	4b88      	ldr	r3, [pc, #544]	; (800ef08 <ProcessMacCommands+0x390>)
 800ece8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ecec:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800ecee:	4b86      	ldr	r3, [pc, #536]	; (800ef08 <ProcessMacCommands+0x390>)
 800ecf0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ecf4:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800ecf8:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800ecfc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ed00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ed04:	9301      	str	r3, [sp, #4]
 800ed06:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800ed0a:	9300      	str	r3, [sp, #0]
 800ed0c:	4623      	mov	r3, r4
 800ed0e:	f005 f8f8 	bl	8013f02 <RegionLinkAdrReq>
 800ed12:	4603      	mov	r3, r0
 800ed14:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800ed18:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800ed1c:	f003 0307 	and.w	r3, r3, #7
 800ed20:	2b07      	cmp	r3, #7
 800ed22:	d10e      	bne.n	800ed42 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800ed24:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800ed28:	4b77      	ldr	r3, [pc, #476]	; (800ef08 <ProcessMacCommands+0x390>)
 800ed2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800ed2e:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800ed32:	4b75      	ldr	r3, [pc, #468]	; (800ef08 <ProcessMacCommands+0x390>)
 800ed34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800ed38:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800ed3c:	4b72      	ldr	r3, [pc, #456]	; (800ef08 <ProcessMacCommands+0x390>)
 800ed3e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800ed42:	2300      	movs	r3, #0
 800ed44:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800ed48:	e00b      	b.n	800ed62 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800ed4a:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800ed4e:	2201      	movs	r2, #1
 800ed50:	4619      	mov	r1, r3
 800ed52:	2003      	movs	r0, #3
 800ed54:	f003 fa6c 	bl	8012230 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800ed58:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800ed62:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ed66:	4a69      	ldr	r2, [pc, #420]	; (800ef0c <ProcessMacCommands+0x394>)
 800ed68:	fba2 2303 	umull	r2, r3, r2, r3
 800ed6c:	089b      	lsrs	r3, r3, #2
 800ed6e:	b2db      	uxtb	r3, r3
 800ed70:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d3e8      	bcc.n	800ed4a <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800ed78:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800ed7c:	78fb      	ldrb	r3, [r7, #3]
 800ed7e:	4413      	add	r3, r2
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	3b01      	subs	r3, #1
 800ed84:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800ed86:	bf00      	nop
 800ed88:	e37b      	b.n	800f482 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800ed8a:	78fb      	ldrb	r3, [r7, #3]
 800ed8c:	1c5a      	adds	r2, r3, #1
 800ed8e:	70fa      	strb	r2, [r7, #3]
 800ed90:	461a      	mov	r2, r3
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	4413      	add	r3, r2
 800ed96:	781b      	ldrb	r3, [r3, #0]
 800ed98:	f003 030f 	and.w	r3, r3, #15
 800ed9c:	b2da      	uxtb	r2, r3
 800ed9e:	4b5a      	ldr	r3, [pc, #360]	; (800ef08 <ProcessMacCommands+0x390>)
 800eda0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800eda4:	4b58      	ldr	r3, [pc, #352]	; (800ef08 <ProcessMacCommands+0x390>)
 800eda6:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800edaa:	461a      	mov	r2, r3
 800edac:	2301      	movs	r3, #1
 800edae:	4093      	lsls	r3, r2
 800edb0:	b29a      	uxth	r2, r3
 800edb2:	4b55      	ldr	r3, [pc, #340]	; (800ef08 <ProcessMacCommands+0x390>)
 800edb4:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800edb8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800edbc:	2200      	movs	r2, #0
 800edbe:	4619      	mov	r1, r3
 800edc0:	2004      	movs	r0, #4
 800edc2:	f003 fa35 	bl	8012230 <LoRaMacCommandsAddCmd>
                break;
 800edc6:	e35c      	b.n	800f482 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800edc8:	2307      	movs	r3, #7
 800edca:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800edce:	78fb      	ldrb	r3, [r7, #3]
 800edd0:	687a      	ldr	r2, [r7, #4]
 800edd2:	4413      	add	r3, r2
 800edd4:	781b      	ldrb	r3, [r3, #0]
 800edd6:	091b      	lsrs	r3, r3, #4
 800edd8:	b2db      	uxtb	r3, r3
 800edda:	b25b      	sxtb	r3, r3
 800eddc:	f003 0307 	and.w	r3, r3, #7
 800ede0:	b25b      	sxtb	r3, r3
 800ede2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800ede6:	78fb      	ldrb	r3, [r7, #3]
 800ede8:	687a      	ldr	r2, [r7, #4]
 800edea:	4413      	add	r3, r2
 800edec:	781b      	ldrb	r3, [r3, #0]
 800edee:	b25b      	sxtb	r3, r3
 800edf0:	f003 030f 	and.w	r3, r3, #15
 800edf4:	b25b      	sxtb	r3, r3
 800edf6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800edfa:	78fb      	ldrb	r3, [r7, #3]
 800edfc:	3301      	adds	r3, #1
 800edfe:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800ee00:	78fb      	ldrb	r3, [r7, #3]
 800ee02:	1c5a      	adds	r2, r3, #1
 800ee04:	70fa      	strb	r2, [r7, #3]
 800ee06:	461a      	mov	r2, r3
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	4413      	add	r3, r2
 800ee0c:	781b      	ldrb	r3, [r3, #0]
 800ee0e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800ee10:	78fb      	ldrb	r3, [r7, #3]
 800ee12:	1c5a      	adds	r2, r3, #1
 800ee14:	70fa      	strb	r2, [r7, #3]
 800ee16:	461a      	mov	r2, r3
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	4413      	add	r3, r2
 800ee1c:	781b      	ldrb	r3, [r3, #0]
 800ee1e:	021a      	lsls	r2, r3, #8
 800ee20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee22:	4313      	orrs	r3, r2
 800ee24:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800ee26:	78fb      	ldrb	r3, [r7, #3]
 800ee28:	1c5a      	adds	r2, r3, #1
 800ee2a:	70fa      	strb	r2, [r7, #3]
 800ee2c:	461a      	mov	r2, r3
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	4413      	add	r3, r2
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	041a      	lsls	r2, r3, #16
 800ee36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee38:	4313      	orrs	r3, r2
 800ee3a:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800ee3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee3e:	2264      	movs	r2, #100	; 0x64
 800ee40:	fb02 f303 	mul.w	r3, r2, r3
 800ee44:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800ee46:	4b30      	ldr	r3, [pc, #192]	; (800ef08 <ProcessMacCommands+0x390>)
 800ee48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ee4c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800ee50:	4611      	mov	r1, r2
 800ee52:	4618      	mov	r0, r3
 800ee54:	f005 f86f 	bl	8013f36 <RegionRxParamSetupReq>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800ee5e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800ee62:	f003 0307 	and.w	r3, r3, #7
 800ee66:	2b07      	cmp	r3, #7
 800ee68:	d117      	bne.n	800ee9a <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800ee6a:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800ee6e:	b2da      	uxtb	r2, r3
 800ee70:	4b25      	ldr	r3, [pc, #148]	; (800ef08 <ProcessMacCommands+0x390>)
 800ee72:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800ee76:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800ee7a:	b2da      	uxtb	r2, r3
 800ee7c:	4b22      	ldr	r3, [pc, #136]	; (800ef08 <ProcessMacCommands+0x390>)
 800ee7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800ee82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee84:	4a20      	ldr	r2, [pc, #128]	; (800ef08 <ProcessMacCommands+0x390>)
 800ee86:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800ee88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee8a:	4a1f      	ldr	r2, [pc, #124]	; (800ef08 <ProcessMacCommands+0x390>)
 800ee8c:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800ee8e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800ee92:	b2da      	uxtb	r2, r3
 800ee94:	4b1c      	ldr	r3, [pc, #112]	; (800ef08 <ProcessMacCommands+0x390>)
 800ee96:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800ee9a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800ee9e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800eea2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800eea6:	2201      	movs	r2, #1
 800eea8:	4619      	mov	r1, r3
 800eeaa:	2005      	movs	r0, #5
 800eeac:	f003 f9c0 	bl	8012230 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800eeb0:	bf00      	nop
 800eeb2:	e2e6      	b.n	800f482 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800eeb4:	23ff      	movs	r3, #255	; 0xff
 800eeb6:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800eeba:	4b12      	ldr	r3, [pc, #72]	; (800ef04 <ProcessMacCommands+0x38c>)
 800eebc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d00d      	beq.n	800eee0 <ProcessMacCommands+0x368>
 800eec4:	4b0f      	ldr	r3, [pc, #60]	; (800ef04 <ProcessMacCommands+0x38c>)
 800eec6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d007      	beq.n	800eee0 <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800eed0:	4b0c      	ldr	r3, [pc, #48]	; (800ef04 <ProcessMacCommands+0x38c>)
 800eed2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	4798      	blx	r3
 800eeda:	4603      	mov	r3, r0
 800eedc:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800eee0:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800eee4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800eee8:	787b      	ldrb	r3, [r7, #1]
 800eeea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eeee:	b2db      	uxtb	r3, r3
 800eef0:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800eef4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800eef8:	2202      	movs	r2, #2
 800eefa:	4619      	mov	r1, r3
 800eefc:	2006      	movs	r0, #6
 800eefe:	f003 f997 	bl	8012230 <LoRaMacCommandsAddCmd>
                break;
 800ef02:	e2be      	b.n	800f482 <ProcessMacCommands+0x90a>
 800ef04:	20000688 	.word	0x20000688
 800ef08:	20000b94 	.word	0x20000b94
 800ef0c:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800ef10:	2303      	movs	r3, #3
 800ef12:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800ef16:	78fb      	ldrb	r3, [r7, #3]
 800ef18:	1c5a      	adds	r2, r3, #1
 800ef1a:	70fa      	strb	r2, [r7, #3]
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4413      	add	r3, r2
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	b25b      	sxtb	r3, r3
 800ef26:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800ef2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ef2e:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800ef30:	78fb      	ldrb	r3, [r7, #3]
 800ef32:	1c5a      	adds	r2, r3, #1
 800ef34:	70fa      	strb	r2, [r7, #3]
 800ef36:	461a      	mov	r2, r3
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	4413      	add	r3, r2
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800ef40:	78fb      	ldrb	r3, [r7, #3]
 800ef42:	1c5a      	adds	r2, r3, #1
 800ef44:	70fa      	strb	r2, [r7, #3]
 800ef46:	461a      	mov	r2, r3
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	4413      	add	r3, r2
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	021a      	lsls	r2, r3, #8
 800ef50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef52:	4313      	orrs	r3, r2
 800ef54:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800ef56:	78fb      	ldrb	r3, [r7, #3]
 800ef58:	1c5a      	adds	r2, r3, #1
 800ef5a:	70fa      	strb	r2, [r7, #3]
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4413      	add	r3, r2
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	041a      	lsls	r2, r3, #16
 800ef66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef68:	4313      	orrs	r3, r2
 800ef6a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800ef6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef6e:	2264      	movs	r2, #100	; 0x64
 800ef70:	fb02 f303 	mul.w	r3, r2, r3
 800ef74:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800ef76:	2300      	movs	r3, #0
 800ef78:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800ef7a:	78fb      	ldrb	r3, [r7, #3]
 800ef7c:	1c5a      	adds	r2, r3, #1
 800ef7e:	70fa      	strb	r2, [r7, #3]
 800ef80:	461a      	mov	r2, r3
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	4413      	add	r3, r2
 800ef86:	781b      	ldrb	r3, [r3, #0]
 800ef88:	b25b      	sxtb	r3, r3
 800ef8a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800ef8e:	4b85      	ldr	r3, [pc, #532]	; (800f1a4 <ProcessMacCommands+0x62c>)
 800ef90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ef94:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800ef98:	4611      	mov	r1, r2
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f004 ffde 	bl	8013f5c <RegionNewChannelReq>
 800efa0:	4603      	mov	r3, r0
 800efa2:	b2db      	uxtb	r3, r3
 800efa4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800efa8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800efac:	b25b      	sxtb	r3, r3
 800efae:	2b00      	cmp	r3, #0
 800efb0:	db0a      	blt.n	800efc8 <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 800efb2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800efb6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800efba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800efbe:	2201      	movs	r2, #1
 800efc0:	4619      	mov	r1, r3
 800efc2:	2007      	movs	r0, #7
 800efc4:	f003 f934 	bl	8012230 <LoRaMacCommandsAddCmd>
                }
                break;
 800efc8:	bf00      	nop
 800efca:	e25a      	b.n	800f482 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800efcc:	78fb      	ldrb	r3, [r7, #3]
 800efce:	1c5a      	adds	r2, r3, #1
 800efd0:	70fa      	strb	r2, [r7, #3]
 800efd2:	461a      	mov	r2, r3
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	4413      	add	r3, r2
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	f003 030f 	and.w	r3, r3, #15
 800efde:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800efe2:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d104      	bne.n	800eff4 <ProcessMacCommands+0x47c>
                {
                    delay++;
 800efea:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800efee:	3301      	adds	r3, #1
 800eff0:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800eff4:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800eff8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800effc:	fb02 f303 	mul.w	r3, r2, r3
 800f000:	461a      	mov	r2, r3
 800f002:	4b68      	ldr	r3, [pc, #416]	; (800f1a4 <ProcessMacCommands+0x62c>)
 800f004:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f006:	4b67      	ldr	r3, [pc, #412]	; (800f1a4 <ProcessMacCommands+0x62c>)
 800f008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f00a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800f00e:	4a65      	ldr	r2, [pc, #404]	; (800f1a4 <ProcessMacCommands+0x62c>)
 800f010:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f012:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f016:	2200      	movs	r2, #0
 800f018:	4619      	mov	r1, r3
 800f01a:	2008      	movs	r0, #8
 800f01c:	f003 f908 	bl	8012230 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800f020:	e22f      	b.n	800f482 <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800f022:	78fb      	ldrb	r3, [r7, #3]
 800f024:	1c5a      	adds	r2, r3, #1
 800f026:	70fa      	strb	r2, [r7, #3]
 800f028:	461a      	mov	r2, r3
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	4413      	add	r3, r2
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800f034:	2300      	movs	r3, #0
 800f036:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800f03a:	2300      	movs	r3, #0
 800f03c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800f040:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f044:	f003 0320 	and.w	r3, r3, #32
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d002      	beq.n	800f052 <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f04c:	2301      	movs	r3, #1
 800f04e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800f052:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f056:	f003 0310 	and.w	r3, r3, #16
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d002      	beq.n	800f064 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800f05e:	2301      	movs	r3, #1
 800f060:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f064:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f068:	f003 030f 	and.w	r3, r3, #15
 800f06c:	b2db      	uxtb	r3, r3
 800f06e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800f072:	4b4c      	ldr	r3, [pc, #304]	; (800f1a4 <ProcessMacCommands+0x62c>)
 800f074:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f078:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f07c:	4611      	mov	r1, r2
 800f07e:	4618      	mov	r0, r3
 800f080:	f004 ff7f 	bl	8013f82 <RegionTxParamSetupReq>
 800f084:	4603      	mov	r3, r0
 800f086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f08a:	d03a      	beq.n	800f102 <ProcessMacCommands+0x58a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800f08c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800f090:	4b44      	ldr	r3, [pc, #272]	; (800f1a4 <ProcessMacCommands+0x62c>)
 800f092:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f096:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800f09a:	4b42      	ldr	r3, [pc, #264]	; (800f1a4 <ProcessMacCommands+0x62c>)
 800f09c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f0a0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f0a4:	461a      	mov	r2, r3
 800f0a6:	4b40      	ldr	r3, [pc, #256]	; (800f1a8 <ProcessMacCommands+0x630>)
 800f0a8:	5c9b      	ldrb	r3, [r3, r2]
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7f1 fb8e 	bl	80007cc <__aeabi_ui2f>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	4a3c      	ldr	r2, [pc, #240]	; (800f1a4 <ProcessMacCommands+0x62c>)
 800f0b4:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800f0b6:	2302      	movs	r3, #2
 800f0b8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f0bc:	4b39      	ldr	r3, [pc, #228]	; (800f1a4 <ProcessMacCommands+0x62c>)
 800f0be:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f0c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f0c6:	4b37      	ldr	r3, [pc, #220]	; (800f1a4 <ProcessMacCommands+0x62c>)
 800f0c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f0cc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f0d0:	4611      	mov	r1, r2
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f004 fe58 	bl	8013d88 <RegionGetPhyParam>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800f0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0de:	b25a      	sxtb	r2, r3
 800f0e0:	4b30      	ldr	r3, [pc, #192]	; (800f1a4 <ProcessMacCommands+0x62c>)
 800f0e2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f0e6:	4293      	cmp	r3, r2
 800f0e8:	bfb8      	it	lt
 800f0ea:	4613      	movlt	r3, r2
 800f0ec:	b25a      	sxtb	r2, r3
 800f0ee:	4b2d      	ldr	r3, [pc, #180]	; (800f1a4 <ProcessMacCommands+0x62c>)
 800f0f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f0f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	4619      	mov	r1, r3
 800f0fc:	2009      	movs	r0, #9
 800f0fe:	f003 f897 	bl	8012230 <LoRaMacCommandsAddCmd>
                }
                break;
 800f102:	bf00      	nop
 800f104:	e1bd      	b.n	800f482 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800f106:	2303      	movs	r3, #3
 800f108:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800f10c:	78fb      	ldrb	r3, [r7, #3]
 800f10e:	1c5a      	adds	r2, r3, #1
 800f110:	70fa      	strb	r2, [r7, #3]
 800f112:	461a      	mov	r2, r3
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	4413      	add	r3, r2
 800f118:	781b      	ldrb	r3, [r3, #0]
 800f11a:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f11e:	78fb      	ldrb	r3, [r7, #3]
 800f120:	1c5a      	adds	r2, r3, #1
 800f122:	70fa      	strb	r2, [r7, #3]
 800f124:	461a      	mov	r2, r3
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	4413      	add	r3, r2
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f12e:	78fb      	ldrb	r3, [r7, #3]
 800f130:	1c5a      	adds	r2, r3, #1
 800f132:	70fa      	strb	r2, [r7, #3]
 800f134:	461a      	mov	r2, r3
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	4413      	add	r3, r2
 800f13a:	781b      	ldrb	r3, [r3, #0]
 800f13c:	021a      	lsls	r2, r3, #8
 800f13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f140:	4313      	orrs	r3, r2
 800f142:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f144:	78fb      	ldrb	r3, [r7, #3]
 800f146:	1c5a      	adds	r2, r3, #1
 800f148:	70fa      	strb	r2, [r7, #3]
 800f14a:	461a      	mov	r2, r3
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	4413      	add	r3, r2
 800f150:	781b      	ldrb	r3, [r3, #0]
 800f152:	041a      	lsls	r2, r3, #16
 800f154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f156:	4313      	orrs	r3, r2
 800f158:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800f15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f15c:	2264      	movs	r2, #100	; 0x64
 800f15e:	fb02 f303 	mul.w	r3, r2, r3
 800f162:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800f164:	4b0f      	ldr	r3, [pc, #60]	; (800f1a4 <ProcessMacCommands+0x62c>)
 800f166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f16a:	f107 0220 	add.w	r2, r7, #32
 800f16e:	4611      	mov	r1, r2
 800f170:	4618      	mov	r0, r3
 800f172:	f004 ff19 	bl	8013fa8 <RegionDlChannelReq>
 800f176:	4603      	mov	r3, r0
 800f178:	b2db      	uxtb	r3, r3
 800f17a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f17e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f182:	b25b      	sxtb	r3, r3
 800f184:	2b00      	cmp	r3, #0
 800f186:	db0a      	blt.n	800f19e <ProcessMacCommands+0x626>
                {
                    macCmdPayload[0] = status;
 800f188:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f18c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800f190:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f194:	2201      	movs	r2, #1
 800f196:	4619      	mov	r1, r3
 800f198:	200a      	movs	r0, #10
 800f19a:	f003 f849 	bl	8012230 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 800f19e:	bf00      	nop
 800f1a0:	e16f      	b.n	800f482 <ProcessMacCommands+0x90a>
 800f1a2:	bf00      	nop
 800f1a4:	20000b94 	.word	0x20000b94
 800f1a8:	0801b9b0 	.word	0x0801b9b0
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800f1ac:	200a      	movs	r0, #10
 800f1ae:	f003 fb67 	bl	8012880 <LoRaMacConfirmQueueIsCmdActive>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	f000 8164 	beq.w	800f482 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800f1ba:	210a      	movs	r1, #10
 800f1bc:	2000      	movs	r0, #0
 800f1be:	f003 fad3 	bl	8012768 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800f1c2:	f107 0318 	add.w	r3, r7, #24
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	601a      	str	r2, [r3, #0]
 800f1ca:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800f1cc:	f107 0310 	add.w	r3, r7, #16
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	601a      	str	r2, [r3, #0]
 800f1d4:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800f1d6:	f107 0308 	add.w	r3, r7, #8
 800f1da:	2200      	movs	r2, #0
 800f1dc:	601a      	str	r2, [r3, #0]
 800f1de:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f1e0:	78fb      	ldrb	r3, [r7, #3]
 800f1e2:	1c5a      	adds	r2, r3, #1
 800f1e4:	70fa      	strb	r2, [r7, #3]
 800f1e6:	461a      	mov	r2, r3
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	4413      	add	r3, r2
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f1f0:	78fb      	ldrb	r3, [r7, #3]
 800f1f2:	1c5a      	adds	r2, r3, #1
 800f1f4:	70fa      	strb	r2, [r7, #3]
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	4413      	add	r3, r2
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	021a      	lsls	r2, r3, #8
 800f200:	69bb      	ldr	r3, [r7, #24]
 800f202:	4313      	orrs	r3, r2
 800f204:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f206:	78fb      	ldrb	r3, [r7, #3]
 800f208:	1c5a      	adds	r2, r3, #1
 800f20a:	70fa      	strb	r2, [r7, #3]
 800f20c:	461a      	mov	r2, r3
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	4413      	add	r3, r2
 800f212:	781b      	ldrb	r3, [r3, #0]
 800f214:	041a      	lsls	r2, r3, #16
 800f216:	69bb      	ldr	r3, [r7, #24]
 800f218:	4313      	orrs	r3, r2
 800f21a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f21c:	78fb      	ldrb	r3, [r7, #3]
 800f21e:	1c5a      	adds	r2, r3, #1
 800f220:	70fa      	strb	r2, [r7, #3]
 800f222:	461a      	mov	r2, r3
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	4413      	add	r3, r2
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	061a      	lsls	r2, r3, #24
 800f22c:	69bb      	ldr	r3, [r7, #24]
 800f22e:	4313      	orrs	r3, r2
 800f230:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800f232:	78fb      	ldrb	r3, [r7, #3]
 800f234:	1c5a      	adds	r2, r3, #1
 800f236:	70fa      	strb	r2, [r7, #3]
 800f238:	461a      	mov	r2, r3
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	4413      	add	r3, r2
 800f23e:	781b      	ldrb	r3, [r3, #0]
 800f240:	b21b      	sxth	r3, r3
 800f242:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f244:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f248:	461a      	mov	r2, r3
 800f24a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f24e:	fb02 f303 	mul.w	r3, r2, r3
 800f252:	121b      	asrs	r3, r3, #8
 800f254:	b21b      	sxth	r3, r3
 800f256:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800f258:	f107 0310 	add.w	r3, r7, #16
 800f25c:	f107 0218 	add.w	r2, r7, #24
 800f260:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f264:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800f268:	693a      	ldr	r2, [r7, #16]
 800f26a:	4b8c      	ldr	r3, [pc, #560]	; (800f49c <ProcessMacCommands+0x924>)
 800f26c:	4413      	add	r3, r2
 800f26e:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800f270:	f107 0308 	add.w	r3, r7, #8
 800f274:	4618      	mov	r0, r3
 800f276:	f00a fc79 	bl	8019b6c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f27a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800f27e:	4b88      	ldr	r3, [pc, #544]	; (800f4a0 <ProcessMacCommands+0x928>)
 800f280:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800f284:	9200      	str	r2, [sp, #0]
 800f286:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800f28a:	f107 0210 	add.w	r2, r7, #16
 800f28e:	ca06      	ldmia	r2, {r1, r2}
 800f290:	f00a fc05 	bl	8019a9e <SysTimeSub>
 800f294:	f107 0010 	add.w	r0, r7, #16
 800f298:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f29a:	9300      	str	r3, [sp, #0]
 800f29c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f29e:	f107 0208 	add.w	r2, r7, #8
 800f2a2:	ca06      	ldmia	r2, {r1, r2}
 800f2a4:	f00a fbc2 	bl	8019a2c <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800f2a8:	f107 0310 	add.w	r3, r7, #16
 800f2ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f2b0:	f00a fc2e 	bl	8019b10 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800f2b4:	f002 fe81 	bl	8011fba <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800f2b8:	4b79      	ldr	r3, [pc, #484]	; (800f4a0 <ProcessMacCommands+0x928>)
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 800f2c0:	e0df      	b.n	800f482 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800f2c2:	200d      	movs	r0, #13
 800f2c4:	f003 fadc 	bl	8012880 <LoRaMacConfirmQueueIsCmdActive>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	f000 80d9 	beq.w	800f482 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800f2d0:	210d      	movs	r1, #13
 800f2d2:	2000      	movs	r0, #0
 800f2d4:	f003 fa48 	bl	8012768 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800f2d8:	4b71      	ldr	r3, [pc, #452]	; (800f4a0 <ProcessMacCommands+0x928>)
 800f2da:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800f2de:	2b04      	cmp	r3, #4
 800f2e0:	f000 80cf 	beq.w	800f482 <ProcessMacCommands+0x90a>
 800f2e4:	4b6e      	ldr	r3, [pc, #440]	; (800f4a0 <ProcessMacCommands+0x928>)
 800f2e6:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800f2ea:	2b05      	cmp	r3, #5
 800f2ec:	f000 80c9 	beq.w	800f482 <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800f2f0:	f002 fe44 	bl	8011f7c <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800f2f4:	e0c5      	b.n	800f482 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800f2f6:	2303      	movs	r3, #3
 800f2f8:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800f300:	78fb      	ldrb	r3, [r7, #3]
 800f302:	1c5a      	adds	r2, r3, #1
 800f304:	70fa      	strb	r2, [r7, #3]
 800f306:	461a      	mov	r2, r3
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	4413      	add	r3, r2
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f310:	78fb      	ldrb	r3, [r7, #3]
 800f312:	1c5a      	adds	r2, r3, #1
 800f314:	70fa      	strb	r2, [r7, #3]
 800f316:	461a      	mov	r2, r3
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	4413      	add	r3, r2
 800f31c:	781b      	ldrb	r3, [r3, #0]
 800f31e:	021b      	lsls	r3, r3, #8
 800f320:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f322:	4313      	orrs	r3, r2
 800f324:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f326:	78fb      	ldrb	r3, [r7, #3]
 800f328:	1c5a      	adds	r2, r3, #1
 800f32a:	70fa      	strb	r2, [r7, #3]
 800f32c:	461a      	mov	r2, r3
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	4413      	add	r3, r2
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	041b      	lsls	r3, r3, #16
 800f336:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f338:	4313      	orrs	r3, r2
 800f33a:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800f33c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f33e:	2264      	movs	r2, #100	; 0x64
 800f340:	fb02 f303 	mul.w	r3, r2, r3
 800f344:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800f346:	78fb      	ldrb	r3, [r7, #3]
 800f348:	1c5a      	adds	r2, r3, #1
 800f34a:	70fa      	strb	r2, [r7, #3]
 800f34c:	461a      	mov	r2, r3
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	4413      	add	r3, r2
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	f003 030f 	and.w	r3, r3, #15
 800f358:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800f35c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f360:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f362:	4618      	mov	r0, r3
 800f364:	f002 fe10 	bl	8011f88 <LoRaMacClassBPingSlotChannelReq>
 800f368:	4603      	mov	r3, r0
 800f36a:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800f36e:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800f372:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800f376:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f37a:	2201      	movs	r2, #1
 800f37c:	4619      	mov	r1, r3
 800f37e:	2011      	movs	r0, #17
 800f380:	f002 ff56 	bl	8012230 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 800f384:	e07d      	b.n	800f482 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800f386:	200e      	movs	r0, #14
 800f388:	f003 fa7a 	bl	8012880 <LoRaMacConfirmQueueIsCmdActive>
 800f38c:	4603      	mov	r3, r0
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d077      	beq.n	800f482 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800f392:	210e      	movs	r1, #14
 800f394:	2000      	movs	r0, #0
 800f396:	f003 f9e7 	bl	8012768 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800f39a:	2300      	movs	r3, #0
 800f39c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800f3a6:	78fb      	ldrb	r3, [r7, #3]
 800f3a8:	1c5a      	adds	r2, r3, #1
 800f3aa:	70fa      	strb	r2, [r7, #3]
 800f3ac:	461a      	mov	r2, r3
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	4413      	add	r3, r2
 800f3b2:	781b      	ldrb	r3, [r3, #0]
 800f3b4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800f3b8:	78fb      	ldrb	r3, [r7, #3]
 800f3ba:	1c5a      	adds	r2, r3, #1
 800f3bc:	70fa      	strb	r2, [r7, #3]
 800f3be:	461a      	mov	r2, r3
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	4413      	add	r3, r2
 800f3c4:	781b      	ldrb	r3, [r3, #0]
 800f3c6:	021b      	lsls	r3, r3, #8
 800f3c8:	b21a      	sxth	r2, r3
 800f3ca:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800f3ce:	4313      	orrs	r3, r2
 800f3d0:	b21b      	sxth	r3, r3
 800f3d2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800f3d6:	78fb      	ldrb	r3, [r7, #3]
 800f3d8:	1c5a      	adds	r2, r3, #1
 800f3da:	70fa      	strb	r2, [r7, #3]
 800f3dc:	461a      	mov	r2, r3
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	4413      	add	r3, r2
 800f3e2:	781b      	ldrb	r3, [r3, #0]
 800f3e4:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800f3e8:	4b2e      	ldr	r3, [pc, #184]	; (800f4a4 <ProcessMacCommands+0x92c>)
 800f3ea:	681a      	ldr	r2, [r3, #0]
 800f3ec:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800f3f0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f002 fdd3 	bl	8011fa0 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800f3fa:	e042      	b.n	800f482 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800f402:	78fb      	ldrb	r3, [r7, #3]
 800f404:	1c5a      	adds	r2, r3, #1
 800f406:	70fa      	strb	r2, [r7, #3]
 800f408:	461a      	mov	r2, r3
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	4413      	add	r3, r2
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f414:	78fb      	ldrb	r3, [r7, #3]
 800f416:	1c5a      	adds	r2, r3, #1
 800f418:	70fa      	strb	r2, [r7, #3]
 800f41a:	461a      	mov	r2, r3
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	4413      	add	r3, r2
 800f420:	781b      	ldrb	r3, [r3, #0]
 800f422:	021b      	lsls	r3, r3, #8
 800f424:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f428:	4313      	orrs	r3, r2
 800f42a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f42e:	78fb      	ldrb	r3, [r7, #3]
 800f430:	1c5a      	adds	r2, r3, #1
 800f432:	70fa      	strb	r2, [r7, #3]
 800f434:	461a      	mov	r2, r3
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	4413      	add	r3, r2
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	041b      	lsls	r3, r3, #16
 800f43e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f442:	4313      	orrs	r3, r2
 800f444:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800f448:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f44c:	2264      	movs	r2, #100	; 0x64
 800f44e:	fb02 f303 	mul.w	r3, r2, r3
 800f452:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800f456:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800f45a:	f002 fdb4 	bl	8011fc6 <LoRaMacClassBBeaconFreqReq>
 800f45e:	4603      	mov	r3, r0
 800f460:	2b00      	cmp	r3, #0
 800f462:	d003      	beq.n	800f46c <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 800f464:	2301      	movs	r3, #1
 800f466:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800f46a:	e002      	b.n	800f472 <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800f46c:	2300      	movs	r3, #0
 800f46e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800f472:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f476:	2201      	movs	r2, #1
 800f478:	4619      	mov	r1, r3
 800f47a:	2013      	movs	r0, #19
 800f47c:	f002 fed8 	bl	8012230 <LoRaMacCommandsAddCmd>
                }
                break;
 800f480:	bf00      	nop
    while( macIndex < commandsSize )
 800f482:	78fa      	ldrb	r2, [r7, #3]
 800f484:	78bb      	ldrb	r3, [r7, #2]
 800f486:	429a      	cmp	r2, r3
 800f488:	f4ff ab8e 	bcc.w	800eba8 <ProcessMacCommands+0x30>
 800f48c:	e002      	b.n	800f494 <ProcessMacCommands+0x91c>
            return;
 800f48e:	bf00      	nop
 800f490:	e000      	b.n	800f494 <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800f492:	bf00      	nop
        }
    }
}
 800f494:	378c      	adds	r7, #140	; 0x8c
 800f496:	46bd      	mov	sp, r7
 800f498:	bd90      	pop	{r4, r7, pc}
 800f49a:	bf00      	nop
 800f49c:	12d53d80 	.word	0x12d53d80
 800f4a0:	20000688 	.word	0x20000688
 800f4a4:	200019ec 	.word	0x200019ec

0800f4a8 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b08e      	sub	sp, #56	; 0x38
 800f4ac:	af02      	add	r7, sp, #8
 800f4ae:	60f8      	str	r0, [r7, #12]
 800f4b0:	607a      	str	r2, [r7, #4]
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	460b      	mov	r3, r1
 800f4b6:	72fb      	strb	r3, [r7, #11]
 800f4b8:	4613      	mov	r3, r2
 800f4ba:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f4bc:	2303      	movs	r3, #3
 800f4be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f4c2:	4b65      	ldr	r3, [pc, #404]	; (800f658 <Send+0x1b0>)
 800f4c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f4c8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800f4cc:	4b62      	ldr	r3, [pc, #392]	; (800f658 <Send+0x1b0>)
 800f4ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f4d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f4d6:	4b60      	ldr	r3, [pc, #384]	; (800f658 <Send+0x1b0>)
 800f4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4da:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f4dc:	4b5e      	ldr	r3, [pc, #376]	; (800f658 <Send+0x1b0>)
 800f4de:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d101      	bne.n	800f4ea <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800f4e6:	2307      	movs	r3, #7
 800f4e8:	e0b1      	b.n	800f64e <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800f4ea:	4b5b      	ldr	r3, [pc, #364]	; (800f658 <Send+0x1b0>)
 800f4ec:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d102      	bne.n	800f4fa <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800f4f4:	4b58      	ldr	r3, [pc, #352]	; (800f658 <Send+0x1b0>)
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800f500:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f504:	f36f 0303 	bfc	r3, #0, #4
 800f508:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800f50c:	4b52      	ldr	r3, [pc, #328]	; (800f658 <Send+0x1b0>)
 800f50e:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800f512:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f516:	f362 13c7 	bfi	r3, r2, #7, #1
 800f51a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f51e:	4b4e      	ldr	r3, [pc, #312]	; (800f658 <Send+0x1b0>)
 800f520:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f524:	2b01      	cmp	r3, #1
 800f526:	d106      	bne.n	800f536 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800f528:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f52c:	f043 0310 	orr.w	r3, r3, #16
 800f530:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800f534:	e005      	b.n	800f542 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800f536:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f53a:	f36f 1304 	bfc	r3, #4, #1
 800f53e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800f542:	4b45      	ldr	r3, [pc, #276]	; (800f658 <Send+0x1b0>)
 800f544:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d005      	beq.n	800f558 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800f54c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f550:	f043 0320 	orr.w	r3, r3, #32
 800f554:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 800f558:	4b3f      	ldr	r3, [pc, #252]	; (800f658 <Send+0x1b0>)
 800f55a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f55e:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 800f560:	2301      	movs	r3, #1
 800f562:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800f564:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f568:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f56c:	b2db      	uxtb	r3, r3
 800f56e:	2b00      	cmp	r3, #0
 800f570:	bf14      	ite	ne
 800f572:	2301      	movne	r3, #1
 800f574:	2300      	moveq	r3, #0
 800f576:	b2db      	uxtb	r3, r3
 800f578:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f57a:	4b37      	ldr	r3, [pc, #220]	; (800f658 <Send+0x1b0>)
 800f57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f57e:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800f580:	4b36      	ldr	r3, [pc, #216]	; (800f65c <Send+0x1b4>)
 800f582:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800f586:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800f588:	4b34      	ldr	r3, [pc, #208]	; (800f65c <Send+0x1b4>)
 800f58a:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800f58e:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f590:	4b31      	ldr	r3, [pc, #196]	; (800f658 <Send+0x1b0>)
 800f592:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f596:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f59a:	4b2f      	ldr	r3, [pc, #188]	; (800f658 <Send+0x1b0>)
 800f59c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f5a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f5a4:	4b2c      	ldr	r3, [pc, #176]	; (800f658 <Send+0x1b0>)
 800f5a6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f5aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800f5ae:	4b2a      	ldr	r3, [pc, #168]	; (800f658 <Send+0x1b0>)
 800f5b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f5b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800f5b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f5bc:	f107 0014 	add.w	r0, r7, #20
 800f5c0:	4a27      	ldr	r2, [pc, #156]	; (800f660 <Send+0x1b8>)
 800f5c2:	4928      	ldr	r1, [pc, #160]	; (800f664 <Send+0x1bc>)
 800f5c4:	f002 fc1a 	bl	8011dfc <LoRaMacAdrCalcNext>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f5d0:	f362 1386 	bfi	r3, r2, #6, #1
 800f5d4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800f5d8:	7afa      	ldrb	r2, [r7, #11]
 800f5da:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800f5de:	893b      	ldrh	r3, [r7, #8]
 800f5e0:	9300      	str	r3, [sp, #0]
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	68f8      	ldr	r0, [r7, #12]
 800f5e6:	f000 fc2d 	bl	800fe44 <PrepareFrame>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800f5f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d003      	beq.n	800f600 <Send+0x158>
 800f5f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f5fc:	2b0a      	cmp	r3, #10
 800f5fe:	d107      	bne.n	800f610 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800f600:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800f604:	4618      	mov	r0, r3
 800f606:	f000 f96d 	bl	800f8e4 <ScheduleTx>
 800f60a:	4603      	mov	r3, r0
 800f60c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800f610:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f614:	2b00      	cmp	r3, #0
 800f616:	d00a      	beq.n	800f62e <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800f618:	4a0f      	ldr	r2, [pc, #60]	; (800f658 <Send+0x1b0>)
 800f61a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f61e:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800f622:	4a0d      	ldr	r2, [pc, #52]	; (800f658 <Send+0x1b0>)
 800f624:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f628:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800f62c:	e00d      	b.n	800f64a <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800f62e:	4b0a      	ldr	r3, [pc, #40]	; (800f658 <Send+0x1b0>)
 800f630:	2200      	movs	r2, #0
 800f632:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800f636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f638:	4a07      	ldr	r2, [pc, #28]	; (800f658 <Send+0x1b0>)
 800f63a:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800f63c:	f002 fe70 	bl	8012320 <LoRaMacCommandsRemoveNoneStickyCmds>
 800f640:	4603      	mov	r3, r0
 800f642:	2b00      	cmp	r3, #0
 800f644:	d001      	beq.n	800f64a <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f646:	2313      	movs	r3, #19
 800f648:	e001      	b.n	800f64e <Send+0x1a6>
        }
    }
    return status;
 800f64a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f64e:	4618      	mov	r0, r3
 800f650:	3730      	adds	r7, #48	; 0x30
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}
 800f656:	bf00      	nop
 800f658:	20000b94 	.word	0x20000b94
 800f65c:	20000688 	.word	0x20000688
 800f660:	20000bcc 	.word	0x20000bcc
 800f664:	20000bcd 	.word	0x20000bcd

0800f668 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b084      	sub	sp, #16
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	4603      	mov	r3, r0
 800f670:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f672:	2300      	movs	r3, #0
 800f674:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800f676:	2300      	movs	r3, #0
 800f678:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800f67a:	2301      	movs	r3, #1
 800f67c:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800f67e:	79fb      	ldrb	r3, [r7, #7]
 800f680:	2bff      	cmp	r3, #255	; 0xff
 800f682:	d129      	bne.n	800f6d8 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800f684:	2000      	movs	r0, #0
 800f686:	f7ff f957 	bl	800e938 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800f68a:	4b1a      	ldr	r3, [pc, #104]	; (800f6f4 <SendReJoinReq+0x8c>)
 800f68c:	2200      	movs	r2, #0
 800f68e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800f692:	4b18      	ldr	r3, [pc, #96]	; (800f6f4 <SendReJoinReq+0x8c>)
 800f694:	4a18      	ldr	r2, [pc, #96]	; (800f6f8 <SendReJoinReq+0x90>)
 800f696:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800f69a:	4b16      	ldr	r3, [pc, #88]	; (800f6f4 <SendReJoinReq+0x8c>)
 800f69c:	22ff      	movs	r2, #255	; 0xff
 800f69e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800f6a2:	7b3b      	ldrb	r3, [r7, #12]
 800f6a4:	f36f 1347 	bfc	r3, #5, #3
 800f6a8:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800f6aa:	7b3a      	ldrb	r2, [r7, #12]
 800f6ac:	4b11      	ldr	r3, [pc, #68]	; (800f6f4 <SendReJoinReq+0x8c>)
 800f6ae:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800f6b2:	f7fc fb75 	bl	800bda0 <SecureElementGetJoinEui>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	2208      	movs	r2, #8
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	480f      	ldr	r0, [pc, #60]	; (800f6fc <SendReJoinReq+0x94>)
 800f6be:	f006 fe76 	bl	80163ae <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800f6c2:	f7fc fb4b 	bl	800bd5c <SecureElementGetDevEui>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	2208      	movs	r2, #8
 800f6ca:	4619      	mov	r1, r3
 800f6cc:	480c      	ldr	r0, [pc, #48]	; (800f700 <SendReJoinReq+0x98>)
 800f6ce:	f006 fe6e 	bl	80163ae <memcpy1>

            allowDelayedTx = false;
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	73fb      	strb	r3, [r7, #15]

            break;
 800f6d6:	e002      	b.n	800f6de <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f6d8:	2302      	movs	r3, #2
 800f6da:	73bb      	strb	r3, [r7, #14]
            break;
 800f6dc:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800f6de:	7bfb      	ldrb	r3, [r7, #15]
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f000 f8ff 	bl	800f8e4 <ScheduleTx>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	73bb      	strb	r3, [r7, #14]
    return status;
 800f6ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3710      	adds	r7, #16
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}
 800f6f4:	20000688 	.word	0x20000688
 800f6f8:	2000068a 	.word	0x2000068a
 800f6fc:	20000796 	.word	0x20000796
 800f700:	2000079e 	.word	0x2000079e

0800f704 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800f704:	b580      	push	{r7, lr}
 800f706:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f708:	f002 fbe7 	bl	8011eda <LoRaMacClassBIsBeaconExpected>
 800f70c:	4603      	mov	r3, r0
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d001      	beq.n	800f716 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800f712:	230e      	movs	r3, #14
 800f714:	e013      	b.n	800f73e <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f716:	4b0b      	ldr	r3, [pc, #44]	; (800f744 <CheckForClassBCollision+0x40>)
 800f718:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f71c:	2b01      	cmp	r3, #1
 800f71e:	d10d      	bne.n	800f73c <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f720:	f002 fbe2 	bl	8011ee8 <LoRaMacClassBIsPingExpected>
 800f724:	4603      	mov	r3, r0
 800f726:	2b00      	cmp	r3, #0
 800f728:	d001      	beq.n	800f72e <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f72a:	230f      	movs	r3, #15
 800f72c:	e007      	b.n	800f73e <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f72e:	f002 fbe2 	bl	8011ef6 <LoRaMacClassBIsMulticastExpected>
 800f732:	4603      	mov	r3, r0
 800f734:	2b00      	cmp	r3, #0
 800f736:	d001      	beq.n	800f73c <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f738:	230f      	movs	r3, #15
 800f73a:	e000      	b.n	800f73e <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800f73c:	2300      	movs	r3, #0
}
 800f73e:	4618      	mov	r0, r3
 800f740:	bd80      	pop	{r7, pc}
 800f742:	bf00      	nop
 800f744:	20000b94 	.word	0x20000b94

0800f748 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800f748:	b590      	push	{r4, r7, lr}
 800f74a:	b083      	sub	sp, #12
 800f74c:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f74e:	4b2d      	ldr	r3, [pc, #180]	; (800f804 <ComputeRxWindowParameters+0xbc>)
 800f750:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f754:	4b2b      	ldr	r3, [pc, #172]	; (800f804 <ComputeRxWindowParameters+0xbc>)
 800f756:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f75a:	4b2a      	ldr	r3, [pc, #168]	; (800f804 <ComputeRxWindowParameters+0xbc>)
 800f75c:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 800f760:	4b28      	ldr	r3, [pc, #160]	; (800f804 <ComputeRxWindowParameters+0xbc>)
 800f762:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800f766:	4b27      	ldr	r3, [pc, #156]	; (800f804 <ComputeRxWindowParameters+0xbc>)
 800f768:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f76c:	b25b      	sxtb	r3, r3
 800f76e:	f004 fc72 	bl	8014056 <RegionApplyDrOffset>
 800f772:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f774:	b259      	sxtb	r1, r3
 800f776:	4b23      	ldr	r3, [pc, #140]	; (800f804 <ComputeRxWindowParameters+0xbc>)
 800f778:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f77c:	4b21      	ldr	r3, [pc, #132]	; (800f804 <ComputeRxWindowParameters+0xbc>)
 800f77e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f780:	4821      	ldr	r0, [pc, #132]	; (800f808 <ComputeRxWindowParameters+0xc0>)
 800f782:	9000      	str	r0, [sp, #0]
 800f784:	4620      	mov	r0, r4
 800f786:	f004 fb76 	bl	8013e76 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f78a:	4b1e      	ldr	r3, [pc, #120]	; (800f804 <ComputeRxWindowParameters+0xbc>)
 800f78c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800f790:	4b1c      	ldr	r3, [pc, #112]	; (800f804 <ComputeRxWindowParameters+0xbc>)
 800f792:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f796:	b259      	sxtb	r1, r3
 800f798:	4b1a      	ldr	r3, [pc, #104]	; (800f804 <ComputeRxWindowParameters+0xbc>)
 800f79a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f79e:	4b19      	ldr	r3, [pc, #100]	; (800f804 <ComputeRxWindowParameters+0xbc>)
 800f7a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7a2:	4c1a      	ldr	r4, [pc, #104]	; (800f80c <ComputeRxWindowParameters+0xc4>)
 800f7a4:	9400      	str	r4, [sp, #0]
 800f7a6:	f004 fb66 	bl	8013e76 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800f7aa:	4b16      	ldr	r3, [pc, #88]	; (800f804 <ComputeRxWindowParameters+0xbc>)
 800f7ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7ae:	4a18      	ldr	r2, [pc, #96]	; (800f810 <ComputeRxWindowParameters+0xc8>)
 800f7b0:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800f7b4:	4413      	add	r3, r2
 800f7b6:	4a16      	ldr	r2, [pc, #88]	; (800f810 <ComputeRxWindowParameters+0xc8>)
 800f7b8:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800f7bc:	4b11      	ldr	r3, [pc, #68]	; (800f804 <ComputeRxWindowParameters+0xbc>)
 800f7be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7c0:	4a13      	ldr	r2, [pc, #76]	; (800f810 <ComputeRxWindowParameters+0xc8>)
 800f7c2:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800f7c6:	4413      	add	r3, r2
 800f7c8:	4a11      	ldr	r2, [pc, #68]	; (800f810 <ComputeRxWindowParameters+0xc8>)
 800f7ca:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f7ce:	4b0d      	ldr	r3, [pc, #52]	; (800f804 <ComputeRxWindowParameters+0xbc>)
 800f7d0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d111      	bne.n	800f7fc <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800f7d8:	4b0a      	ldr	r3, [pc, #40]	; (800f804 <ComputeRxWindowParameters+0xbc>)
 800f7da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7dc:	4a0c      	ldr	r2, [pc, #48]	; (800f810 <ComputeRxWindowParameters+0xc8>)
 800f7de:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800f7e2:	4413      	add	r3, r2
 800f7e4:	4a0a      	ldr	r2, [pc, #40]	; (800f810 <ComputeRxWindowParameters+0xc8>)
 800f7e6:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800f7ea:	4b06      	ldr	r3, [pc, #24]	; (800f804 <ComputeRxWindowParameters+0xbc>)
 800f7ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f7ee:	4a08      	ldr	r2, [pc, #32]	; (800f810 <ComputeRxWindowParameters+0xc8>)
 800f7f0:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800f7f4:	4413      	add	r3, r2
 800f7f6:	4a06      	ldr	r2, [pc, #24]	; (800f810 <ComputeRxWindowParameters+0xc8>)
 800f7f8:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 800f7fc:	bf00      	nop
 800f7fe:	3704      	adds	r7, #4
 800f800:	46bd      	mov	sp, r7
 800f802:	bd90      	pop	{r4, r7, pc}
 800f804:	20000b94 	.word	0x20000b94
 800f808:	20000a40 	.word	0x20000a40
 800f80c:	20000a54 	.word	0x20000a54
 800f810:	20000688 	.word	0x20000688

0800f814 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b082      	sub	sp, #8
 800f818:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800f81a:	2300      	movs	r3, #0
 800f81c:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800f81e:	4b13      	ldr	r3, [pc, #76]	; (800f86c <VerifyTxFrame+0x58>)
 800f820:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f824:	2b00      	cmp	r3, #0
 800f826:	d01b      	beq.n	800f860 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800f828:	1d3b      	adds	r3, r7, #4
 800f82a:	4618      	mov	r0, r3
 800f82c:	f002 fdbe 	bl	80123ac <LoRaMacCommandsGetSizeSerializedCmds>
 800f830:	4603      	mov	r3, r0
 800f832:	2b00      	cmp	r3, #0
 800f834:	d001      	beq.n	800f83a <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f836:	2313      	movs	r3, #19
 800f838:	e013      	b.n	800f862 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800f83a:	4b0d      	ldr	r3, [pc, #52]	; (800f870 <VerifyTxFrame+0x5c>)
 800f83c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f840:	4a0a      	ldr	r2, [pc, #40]	; (800f86c <VerifyTxFrame+0x58>)
 800f842:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 800f846:	687a      	ldr	r2, [r7, #4]
 800f848:	b2d2      	uxtb	r2, r2
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7ff f96c 	bl	800eb28 <ValidatePayloadLength>
 800f850:	4603      	mov	r3, r0
 800f852:	f083 0301 	eor.w	r3, r3, #1
 800f856:	b2db      	uxtb	r3, r3
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d001      	beq.n	800f860 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800f85c:	2308      	movs	r3, #8
 800f85e:	e000      	b.n	800f862 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800f860:	2300      	movs	r3, #0
}
 800f862:	4618      	mov	r0, r3
 800f864:	3708      	adds	r7, #8
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}
 800f86a:	bf00      	nop
 800f86c:	20000b94 	.word	0x20000b94
 800f870:	20000688 	.word	0x20000688

0800f874 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800f87a:	4b18      	ldr	r3, [pc, #96]	; (800f8dc <SerializeTxFrame+0x68>)
 800f87c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f880:	2b00      	cmp	r3, #0
 800f882:	d002      	beq.n	800f88a <SerializeTxFrame+0x16>
 800f884:	2b04      	cmp	r3, #4
 800f886:	d011      	beq.n	800f8ac <SerializeTxFrame+0x38>
 800f888:	e021      	b.n	800f8ce <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800f88a:	4815      	ldr	r0, [pc, #84]	; (800f8e0 <SerializeTxFrame+0x6c>)
 800f88c:	f004 f8f3 	bl	8013a76 <LoRaMacSerializerJoinRequest>
 800f890:	4603      	mov	r3, r0
 800f892:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800f894:	79fb      	ldrb	r3, [r7, #7]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d001      	beq.n	800f89e <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f89a:	2311      	movs	r3, #17
 800f89c:	e01a      	b.n	800f8d4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800f89e:	4b0f      	ldr	r3, [pc, #60]	; (800f8dc <SerializeTxFrame+0x68>)
 800f8a0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800f8a4:	b29a      	uxth	r2, r3
 800f8a6:	4b0d      	ldr	r3, [pc, #52]	; (800f8dc <SerializeTxFrame+0x68>)
 800f8a8:	801a      	strh	r2, [r3, #0]
            break;
 800f8aa:	e012      	b.n	800f8d2 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800f8ac:	480c      	ldr	r0, [pc, #48]	; (800f8e0 <SerializeTxFrame+0x6c>)
 800f8ae:	f004 f964 	bl	8013b7a <LoRaMacSerializerData>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800f8b6:	79fb      	ldrb	r3, [r7, #7]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d001      	beq.n	800f8c0 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f8bc:	2311      	movs	r3, #17
 800f8be:	e009      	b.n	800f8d4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800f8c0:	4b06      	ldr	r3, [pc, #24]	; (800f8dc <SerializeTxFrame+0x68>)
 800f8c2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800f8c6:	b29a      	uxth	r2, r3
 800f8c8:	4b04      	ldr	r3, [pc, #16]	; (800f8dc <SerializeTxFrame+0x68>)
 800f8ca:	801a      	strh	r2, [r3, #0]
            break;
 800f8cc:	e001      	b.n	800f8d2 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800f8ce:	2303      	movs	r3, #3
 800f8d0:	e000      	b.n	800f8d4 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800f8d2:	2300      	movs	r3, #0
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	20000688 	.word	0x20000688
 800f8e0:	20000790 	.word	0x20000790

0800f8e4 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b090      	sub	sp, #64	; 0x40
 800f8e8:	af02      	add	r7, sp, #8
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f8ee:	2303      	movs	r3, #3
 800f8f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800f8f4:	f7ff ff06 	bl	800f704 <CheckForClassBCollision>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800f8fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f902:	2b00      	cmp	r3, #0
 800f904:	d002      	beq.n	800f90c <ScheduleTx+0x28>
    {
        return status;
 800f906:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f90a:	e08f      	b.n	800fa2c <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 800f90c:	f000 f8fa 	bl	800fb04 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800f910:	f7ff ffb0 	bl	800f874 <SerializeTxFrame>
 800f914:	4603      	mov	r3, r0
 800f916:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800f91a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d002      	beq.n	800f928 <ScheduleTx+0x44>
    {
        return status;
 800f922:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f926:	e081      	b.n	800fa2c <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800f928:	4b42      	ldr	r3, [pc, #264]	; (800fa34 <ScheduleTx+0x150>)
 800f92a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f92c:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f92e:	4b41      	ldr	r3, [pc, #260]	; (800fa34 <ScheduleTx+0x150>)
 800f930:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f934:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800f936:	4b3f      	ldr	r3, [pc, #252]	; (800fa34 <ScheduleTx+0x150>)
 800f938:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800f93c:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800f93e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f942:	4618      	mov	r0, r3
 800f944:	f00a f94a 	bl	8019bdc <SysTimeGetMcuTime>
 800f948:	4638      	mov	r0, r7
 800f94a:	4b3a      	ldr	r3, [pc, #232]	; (800fa34 <ScheduleTx+0x150>)
 800f94c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800f950:	9200      	str	r2, [sp, #0]
 800f952:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800f956:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f95a:	ca06      	ldmia	r2, {r1, r2}
 800f95c:	f00a f89f 	bl	8019a9e <SysTimeSub>
 800f960:	f107 0320 	add.w	r3, r7, #32
 800f964:	463a      	mov	r2, r7
 800f966:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f96a:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800f96e:	4b31      	ldr	r3, [pc, #196]	; (800fa34 <ScheduleTx+0x150>)
 800f970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f972:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800f974:	2300      	movs	r3, #0
 800f976:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 800f97a:	2301      	movs	r3, #1
 800f97c:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800f97e:	4b2e      	ldr	r3, [pc, #184]	; (800fa38 <ScheduleTx+0x154>)
 800f980:	881b      	ldrh	r3, [r3, #0]
 800f982:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f984:	4b2b      	ldr	r3, [pc, #172]	; (800fa34 <ScheduleTx+0x150>)
 800f986:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d104      	bne.n	800f998 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800f98e:	2301      	movs	r3, #1
 800f990:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 800f994:	2300      	movs	r3, #0
 800f996:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800f998:	4b26      	ldr	r3, [pc, #152]	; (800fa34 <ScheduleTx+0x150>)
 800f99a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f99e:	f107 0114 	add.w	r1, r7, #20
 800f9a2:	4b26      	ldr	r3, [pc, #152]	; (800fa3c <ScheduleTx+0x158>)
 800f9a4:	9300      	str	r3, [sp, #0]
 800f9a6:	4b26      	ldr	r3, [pc, #152]	; (800fa40 <ScheduleTx+0x15c>)
 800f9a8:	4a26      	ldr	r2, [pc, #152]	; (800fa44 <ScheduleTx+0x160>)
 800f9aa:	f004 fb2a 	bl	8014002 <RegionNextChannel>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 800f9b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d022      	beq.n	800fa02 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800f9bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f9c0:	2b0b      	cmp	r3, #11
 800f9c2:	d11b      	bne.n	800f9fc <ScheduleTx+0x118>
 800f9c4:	7bfb      	ldrb	r3, [r7, #15]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d018      	beq.n	800f9fc <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 800f9ca:	4b1b      	ldr	r3, [pc, #108]	; (800fa38 <ScheduleTx+0x154>)
 800f9cc:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d011      	beq.n	800f9f8 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800f9d4:	4b18      	ldr	r3, [pc, #96]	; (800fa38 <ScheduleTx+0x154>)
 800f9d6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f9da:	f043 0320 	orr.w	r3, r3, #32
 800f9de:	4a16      	ldr	r2, [pc, #88]	; (800fa38 <ScheduleTx+0x154>)
 800f9e0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800f9e4:	4b14      	ldr	r3, [pc, #80]	; (800fa38 <ScheduleTx+0x154>)
 800f9e6:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	4816      	ldr	r0, [pc, #88]	; (800fa48 <ScheduleTx+0x164>)
 800f9ee:	f00a fe99 	bl	801a724 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800f9f2:	4815      	ldr	r0, [pc, #84]	; (800fa48 <ScheduleTx+0x164>)
 800f9f4:	f00a fdb8 	bl	801a568 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	e017      	b.n	800fa2c <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800f9fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa00:	e014      	b.n	800fa2c <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800fa02:	f7ff fea1 	bl	800f748 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800fa06:	f7ff ff05 	bl	800f814 <VerifyTxFrame>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fa10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d002      	beq.n	800fa1e <ScheduleTx+0x13a>
    {
        return status;
 800fa18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa1c:	e006      	b.n	800fa2c <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800fa1e:	4b06      	ldr	r3, [pc, #24]	; (800fa38 <ScheduleTx+0x154>)
 800fa20:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800fa24:	4618      	mov	r0, r3
 800fa26:	f000 fb29 	bl	801007c <SendFrameOnChannel>
 800fa2a:	4603      	mov	r3, r0
}
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	3738      	adds	r7, #56	; 0x38
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}
 800fa34:	20000b94 	.word	0x20000b94
 800fa38:	20000688 	.word	0x20000688
 800fa3c:	20000bc4 	.word	0x20000bc4
 800fa40:	20000b10 	.word	0x20000b10
 800fa44:	20000a9d 	.word	0x20000a9d
 800fa48:	200009f0 	.word	0x200009f0

0800fa4c <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b084      	sub	sp, #16
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	4603      	mov	r3, r0
 800fa54:	460a      	mov	r2, r1
 800fa56:	71fb      	strb	r3, [r7, #7]
 800fa58:	4613      	mov	r3, r2
 800fa5a:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800fa5c:	2313      	movs	r3, #19
 800fa5e:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800fa60:	2300      	movs	r3, #0
 800fa62:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800fa64:	4b25      	ldr	r3, [pc, #148]	; (800fafc <SecureFrame+0xb0>)
 800fa66:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d002      	beq.n	800fa74 <SecureFrame+0x28>
 800fa6e:	2b04      	cmp	r3, #4
 800fa70:	d011      	beq.n	800fa96 <SecureFrame+0x4a>
 800fa72:	e03b      	b.n	800faec <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fa74:	4822      	ldr	r0, [pc, #136]	; (800fb00 <SecureFrame+0xb4>)
 800fa76:	f003 fbc7 	bl	8013208 <LoRaMacCryptoPrepareJoinRequest>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800fa7e:	7bfb      	ldrb	r3, [r7, #15]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d001      	beq.n	800fa88 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fa84:	2311      	movs	r3, #17
 800fa86:	e034      	b.n	800faf2 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800fa88:	4b1c      	ldr	r3, [pc, #112]	; (800fafc <SecureFrame+0xb0>)
 800fa8a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fa8e:	b29a      	uxth	r2, r3
 800fa90:	4b1a      	ldr	r3, [pc, #104]	; (800fafc <SecureFrame+0xb0>)
 800fa92:	801a      	strh	r2, [r3, #0]
            break;
 800fa94:	e02c      	b.n	800faf0 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800fa96:	f107 0308 	add.w	r3, r7, #8
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f003 face 	bl	801303c <LoRaMacCryptoGetFCntUp>
 800faa0:	4603      	mov	r3, r0
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d001      	beq.n	800faaa <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800faa6:	2312      	movs	r3, #18
 800faa8:	e023      	b.n	800faf2 <SecureFrame+0xa6>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800faaa:	4b14      	ldr	r3, [pc, #80]	; (800fafc <SecureFrame+0xb0>)
 800faac:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d104      	bne.n	800fabe <SecureFrame+0x72>
 800fab4:	4b11      	ldr	r3, [pc, #68]	; (800fafc <SecureFrame+0xb0>)
 800fab6:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800faba:	2b01      	cmp	r3, #1
 800fabc:	d902      	bls.n	800fac4 <SecureFrame+0x78>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	3b01      	subs	r3, #1
 800fac2:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800fac4:	68b8      	ldr	r0, [r7, #8]
 800fac6:	79ba      	ldrb	r2, [r7, #6]
 800fac8:	79f9      	ldrb	r1, [r7, #7]
 800faca:	4b0d      	ldr	r3, [pc, #52]	; (800fb00 <SecureFrame+0xb4>)
 800facc:	f003 fcb4 	bl	8013438 <LoRaMacCryptoSecureMessage>
 800fad0:	4603      	mov	r3, r0
 800fad2:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800fad4:	7bfb      	ldrb	r3, [r7, #15]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d001      	beq.n	800fade <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fada:	2311      	movs	r3, #17
 800fadc:	e009      	b.n	800faf2 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800fade:	4b07      	ldr	r3, [pc, #28]	; (800fafc <SecureFrame+0xb0>)
 800fae0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fae4:	b29a      	uxth	r2, r3
 800fae6:	4b05      	ldr	r3, [pc, #20]	; (800fafc <SecureFrame+0xb0>)
 800fae8:	801a      	strh	r2, [r3, #0]
            break;
 800faea:	e001      	b.n	800faf0 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800faec:	2303      	movs	r3, #3
 800faee:	e000      	b.n	800faf2 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800faf0:	2300      	movs	r3, #0
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3710      	adds	r7, #16
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
 800fafa:	bf00      	nop
 800fafc:	20000688 	.word	0x20000688
 800fb00:	20000790 	.word	0x20000790

0800fb04 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800fb04:	b480      	push	{r7}
 800fb06:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800fb08:	4b09      	ldr	r3, [pc, #36]	; (800fb30 <CalculateBackOff+0x2c>)
 800fb0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d10a      	bne.n	800fb26 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800fb10:	4b07      	ldr	r3, [pc, #28]	; (800fb30 <CalculateBackOff+0x2c>)
 800fb12:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800fb16:	3b01      	subs	r3, #1
 800fb18:	4a06      	ldr	r2, [pc, #24]	; (800fb34 <CalculateBackOff+0x30>)
 800fb1a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 800fb1e:	fb02 f303 	mul.w	r3, r2, r3
 800fb22:	4a03      	ldr	r2, [pc, #12]	; (800fb30 <CalculateBackOff+0x2c>)
 800fb24:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800fb26:	bf00      	nop
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bc80      	pop	{r7}
 800fb2c:	4770      	bx	lr
 800fb2e:	bf00      	nop
 800fb30:	20000b94 	.word	0x20000b94
 800fb34:	20000688 	.word	0x20000688

0800fb38 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b082      	sub	sp, #8
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	4603      	mov	r3, r0
 800fb40:	7139      	strb	r1, [r7, #4]
 800fb42:	71fb      	strb	r3, [r7, #7]
 800fb44:	4613      	mov	r3, r2
 800fb46:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800fb48:	79fb      	ldrb	r3, [r7, #7]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d002      	beq.n	800fb54 <RemoveMacCommands+0x1c>
 800fb4e:	79fb      	ldrb	r3, [r7, #7]
 800fb50:	2b01      	cmp	r3, #1
 800fb52:	d10d      	bne.n	800fb70 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800fb54:	79bb      	ldrb	r3, [r7, #6]
 800fb56:	2b01      	cmp	r3, #1
 800fb58:	d108      	bne.n	800fb6c <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800fb5a:	793b      	ldrb	r3, [r7, #4]
 800fb5c:	f003 0320 	and.w	r3, r3, #32
 800fb60:	b2db      	uxtb	r3, r3
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d004      	beq.n	800fb70 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800fb66:	f002 fbff 	bl	8012368 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800fb6a:	e001      	b.n	800fb70 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800fb6c:	f002 fbfc 	bl	8012368 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800fb70:	bf00      	nop
 800fb72:	3708      	adds	r7, #8
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}

0800fb78 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 800fb78:	b5b0      	push	{r4, r5, r7, lr}
 800fb7a:	b08e      	sub	sp, #56	; 0x38
 800fb7c:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800fb7e:	4b68      	ldr	r3, [pc, #416]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fb80:	2200      	movs	r2, #0
 800fb82:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800fb86:	4b66      	ldr	r3, [pc, #408]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fb88:	2200      	movs	r2, #0
 800fb8a:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800fb8c:	4b65      	ldr	r3, [pc, #404]	; (800fd24 <ResetMacParameters+0x1ac>)
 800fb8e:	2200      	movs	r2, #0
 800fb90:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 800fb94:	4b63      	ldr	r3, [pc, #396]	; (800fd24 <ResetMacParameters+0x1ac>)
 800fb96:	2201      	movs	r2, #1
 800fb98:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 800fb9c:	4b61      	ldr	r3, [pc, #388]	; (800fd24 <ResetMacParameters+0x1ac>)
 800fb9e:	2201      	movs	r2, #1
 800fba0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 800fba4:	4b5f      	ldr	r3, [pc, #380]	; (800fd24 <ResetMacParameters+0x1ac>)
 800fba6:	2200      	movs	r2, #0
 800fba8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 800fbac:	4b5c      	ldr	r3, [pc, #368]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fbae:	2200      	movs	r2, #0
 800fbb0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800fbb4:	4b5a      	ldr	r3, [pc, #360]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fbb6:	2201      	movs	r2, #1
 800fbb8:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800fbbc:	4b58      	ldr	r3, [pc, #352]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fbbe:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 800fbc2:	4b57      	ldr	r3, [pc, #348]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fbc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800fbc8:	4b55      	ldr	r3, [pc, #340]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fbca:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 800fbce:	4b54      	ldr	r3, [pc, #336]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fbd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800fbd4:	4b52      	ldr	r3, [pc, #328]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fbd6:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 800fbda:	4b51      	ldr	r3, [pc, #324]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fbdc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800fbe0:	4b4f      	ldr	r3, [pc, #316]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fbe2:	4a4f      	ldr	r2, [pc, #316]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fbe4:	3364      	adds	r3, #100	; 0x64
 800fbe6:	32a8      	adds	r2, #168	; 0xa8
 800fbe8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fbec:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800fbf0:	4b4b      	ldr	r3, [pc, #300]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fbf2:	4a4b      	ldr	r2, [pc, #300]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fbf4:	336c      	adds	r3, #108	; 0x6c
 800fbf6:	32b0      	adds	r2, #176	; 0xb0
 800fbf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fbfc:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800fc00:	4b47      	ldr	r3, [pc, #284]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fc02:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 800fc06:	4b46      	ldr	r3, [pc, #280]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fc08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800fc0c:	4b44      	ldr	r3, [pc, #272]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fc0e:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 800fc12:	4b43      	ldr	r3, [pc, #268]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fc14:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800fc18:	4b41      	ldr	r3, [pc, #260]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fc1a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fc1e:	4a40      	ldr	r2, [pc, #256]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fc20:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800fc22:	4b3f      	ldr	r3, [pc, #252]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fc24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800fc28:	4a3d      	ldr	r2, [pc, #244]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fc2a:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 800fc2c:	4b3d      	ldr	r3, [pc, #244]	; (800fd24 <ResetMacParameters+0x1ac>)
 800fc2e:	2200      	movs	r2, #0
 800fc30:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 800fc34:	4b3a      	ldr	r3, [pc, #232]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fc36:	2200      	movs	r2, #0
 800fc38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800fc40:	4b39      	ldr	r3, [pc, #228]	; (800fd28 <ResetMacParameters+0x1b0>)
 800fc42:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800fc44:	4b39      	ldr	r3, [pc, #228]	; (800fd2c <ResetMacParameters+0x1b4>)
 800fc46:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800fc48:	4b35      	ldr	r3, [pc, #212]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fc4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc4e:	1d3a      	adds	r2, r7, #4
 800fc50:	4611      	mov	r1, r2
 800fc52:	4618      	mov	r0, r3
 800fc54:	f004 f8c1 	bl	8013dda <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800fc58:	4b32      	ldr	r3, [pc, #200]	; (800fd24 <ResetMacParameters+0x1ac>)
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800fc60:	4b30      	ldr	r3, [pc, #192]	; (800fd24 <ResetMacParameters+0x1ac>)
 800fc62:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800fc66:	4b2f      	ldr	r3, [pc, #188]	; (800fd24 <ResetMacParameters+0x1ac>)
 800fc68:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800fc6c:	4b2c      	ldr	r3, [pc, #176]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fc6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc70:	4a2c      	ldr	r2, [pc, #176]	; (800fd24 <ResetMacParameters+0x1ac>)
 800fc72:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fc76:	4b2a      	ldr	r3, [pc, #168]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fc78:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fc7c:	4b29      	ldr	r3, [pc, #164]	; (800fd24 <ResetMacParameters+0x1ac>)
 800fc7e:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fc82:	4b27      	ldr	r3, [pc, #156]	; (800fd20 <ResetMacParameters+0x1a8>)
 800fc84:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800fc88:	4b26      	ldr	r3, [pc, #152]	; (800fd24 <ResetMacParameters+0x1ac>)
 800fc8a:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800fc8e:	4b25      	ldr	r3, [pc, #148]	; (800fd24 <ResetMacParameters+0x1ac>)
 800fc90:	2200      	movs	r2, #0
 800fc92:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800fc96:	4b23      	ldr	r3, [pc, #140]	; (800fd24 <ResetMacParameters+0x1ac>)
 800fc98:	2201      	movs	r2, #1
 800fc9a:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800fc9e:	4a21      	ldr	r2, [pc, #132]	; (800fd24 <ResetMacParameters+0x1ac>)
 800fca0:	4b20      	ldr	r3, [pc, #128]	; (800fd24 <ResetMacParameters+0x1ac>)
 800fca2:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800fca6:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800fcaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fcac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fcae:	682b      	ldr	r3, [r5, #0]
 800fcb0:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800fcb2:	4b1c      	ldr	r3, [pc, #112]	; (800fd24 <ResetMacParameters+0x1ac>)
 800fcb4:	2201      	movs	r2, #1
 800fcb6:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fcba:	4b1a      	ldr	r3, [pc, #104]	; (800fd24 <ResetMacParameters+0x1ac>)
 800fcbc:	2202      	movs	r2, #2
 800fcbe:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 800fcca:	4b16      	ldr	r3, [pc, #88]	; (800fd24 <ResetMacParameters+0x1ac>)
 800fccc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d009      	beq.n	800fce8 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800fcd4:	4b13      	ldr	r3, [pc, #76]	; (800fd24 <ResetMacParameters+0x1ac>)
 800fcd6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fcda:	685b      	ldr	r3, [r3, #4]
 800fcdc:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800fcde:	4b11      	ldr	r3, [pc, #68]	; (800fd24 <ResetMacParameters+0x1ac>)
 800fce0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fce4:	691b      	ldr	r3, [r3, #16]
 800fce6:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800fce8:	4b11      	ldr	r3, [pc, #68]	; (800fd30 <ResetMacParameters+0x1b8>)
 800fcea:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800fcec:	4b11      	ldr	r3, [pc, #68]	; (800fd34 <ResetMacParameters+0x1bc>)
 800fcee:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800fcf0:	4b11      	ldr	r3, [pc, #68]	; (800fd38 <ResetMacParameters+0x1c0>)
 800fcf2:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800fcf4:	4b11      	ldr	r3, [pc, #68]	; (800fd3c <ResetMacParameters+0x1c4>)
 800fcf6:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800fcf8:	4b11      	ldr	r3, [pc, #68]	; (800fd40 <ResetMacParameters+0x1c8>)
 800fcfa:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800fcfc:	4b11      	ldr	r3, [pc, #68]	; (800fd44 <ResetMacParameters+0x1cc>)
 800fcfe:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800fd00:	4b11      	ldr	r3, [pc, #68]	; (800fd48 <ResetMacParameters+0x1d0>)
 800fd02:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800fd04:	4b11      	ldr	r3, [pc, #68]	; (800fd4c <ResetMacParameters+0x1d4>)
 800fd06:	62fb      	str	r3, [r7, #44]	; 0x2c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800fd08:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800fd0c:	f107 0310 	add.w	r3, r7, #16
 800fd10:	4a0f      	ldr	r2, [pc, #60]	; (800fd50 <ResetMacParameters+0x1d8>)
 800fd12:	4618      	mov	r0, r3
 800fd14:	f002 f88a 	bl	8011e2c <LoRaMacClassBInit>
}
 800fd18:	bf00      	nop
 800fd1a:	3738      	adds	r7, #56	; 0x38
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bdb0      	pop	{r4, r5, r7, pc}
 800fd20:	20000b94 	.word	0x20000b94
 800fd24:	20000688 	.word	0x20000688
 800fd28:	20000d74 	.word	0x20000d74
 800fd2c:	20000e08 	.word	0x20000e08
 800fd30:	20000ae8 	.word	0x20000ae8
 800fd34:	20000aa4 	.word	0x20000aa4
 800fd38:	20000ad4 	.word	0x20000ad4
 800fd3c:	20000b0d 	.word	0x20000b0d
 800fd40:	20000c68 	.word	0x20000c68
 800fd44:	20000bd4 	.word	0x20000bd4
 800fd48:	20000bd8 	.word	0x20000bd8
 800fd4c:	20000c6c 	.word	0x20000c6c
 800fd50:	200012a4 	.word	0x200012a4

0800fd54 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b082      	sub	sp, #8
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
 800fd5c:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f00a fc70 	bl	801a644 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800fd64:	4b11      	ldr	r3, [pc, #68]	; (800fdac <RxWindowSetup+0x58>)
 800fd66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd68:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800fd6a:	4b11      	ldr	r3, [pc, #68]	; (800fdb0 <RxWindowSetup+0x5c>)
 800fd6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fd70:	4a10      	ldr	r2, [pc, #64]	; (800fdb4 <RxWindowSetup+0x60>)
 800fd72:	6839      	ldr	r1, [r7, #0]
 800fd74:	4618      	mov	r0, r3
 800fd76:	f004 f898 	bl	8013eaa <RegionRxConfig>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d010      	beq.n	800fda2 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800fd80:	4b0d      	ldr	r3, [pc, #52]	; (800fdb8 <RxWindowSetup+0x64>)
 800fd82:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 800fd86:	4b0c      	ldr	r3, [pc, #48]	; (800fdb8 <RxWindowSetup+0x64>)
 800fd88:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800fd8c:	4b07      	ldr	r3, [pc, #28]	; (800fdac <RxWindowSetup+0x58>)
 800fd8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd90:	4a07      	ldr	r2, [pc, #28]	; (800fdb0 <RxWindowSetup+0x5c>)
 800fd92:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800fd94:	4610      	mov	r0, r2
 800fd96:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	7cda      	ldrb	r2, [r3, #19]
 800fd9c:	4b06      	ldr	r3, [pc, #24]	; (800fdb8 <RxWindowSetup+0x64>)
 800fd9e:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 800fda2:	bf00      	nop
 800fda4:	3708      	adds	r7, #8
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	0801b9f8 	.word	0x0801b9f8
 800fdb0:	20000b94 	.word	0x20000b94
 800fdb4:	20000aa8 	.word	0x20000aa8
 800fdb8:	20000688 	.word	0x20000688

0800fdbc <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800fdbc:	b590      	push	{r4, r7, lr}
 800fdbe:	b083      	sub	sp, #12
 800fdc0:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fdc2:	4b1b      	ldr	r3, [pc, #108]	; (800fe30 <OpenContinuousRxCWindow+0x74>)
 800fdc4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800fdc8:	4b19      	ldr	r3, [pc, #100]	; (800fe30 <OpenContinuousRxCWindow+0x74>)
 800fdca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fdce:	b259      	sxtb	r1, r3
 800fdd0:	4b17      	ldr	r3, [pc, #92]	; (800fe30 <OpenContinuousRxCWindow+0x74>)
 800fdd2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fdd6:	4b16      	ldr	r3, [pc, #88]	; (800fe30 <OpenContinuousRxCWindow+0x74>)
 800fdd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdda:	4c16      	ldr	r4, [pc, #88]	; (800fe34 <OpenContinuousRxCWindow+0x78>)
 800fddc:	9400      	str	r4, [sp, #0]
 800fdde:	f004 f84a 	bl	8013e76 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fde2:	4b15      	ldr	r3, [pc, #84]	; (800fe38 <OpenContinuousRxCWindow+0x7c>)
 800fde4:	2202      	movs	r2, #2
 800fde6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800fdea:	4b13      	ldr	r3, [pc, #76]	; (800fe38 <OpenContinuousRxCWindow+0x7c>)
 800fdec:	2201      	movs	r2, #1
 800fdee:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800fdf2:	4b0f      	ldr	r3, [pc, #60]	; (800fe30 <OpenContinuousRxCWindow+0x74>)
 800fdf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fdf8:	4a10      	ldr	r2, [pc, #64]	; (800fe3c <OpenContinuousRxCWindow+0x80>)
 800fdfa:	490e      	ldr	r1, [pc, #56]	; (800fe34 <OpenContinuousRxCWindow+0x78>)
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	f004 f854 	bl	8013eaa <RegionRxConfig>
 800fe02:	4603      	mov	r3, r0
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d00f      	beq.n	800fe28 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800fe08:	4b0b      	ldr	r3, [pc, #44]	; (800fe38 <OpenContinuousRxCWindow+0x7c>)
 800fe0a:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 800fe0e:	4b0a      	ldr	r3, [pc, #40]	; (800fe38 <OpenContinuousRxCWindow+0x7c>)
 800fe10:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( 0 ); // Continuous mode
 800fe14:	4b0a      	ldr	r3, [pc, #40]	; (800fe40 <OpenContinuousRxCWindow+0x84>)
 800fe16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe18:	2000      	movs	r0, #0
 800fe1a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800fe1c:	4b06      	ldr	r3, [pc, #24]	; (800fe38 <OpenContinuousRxCWindow+0x7c>)
 800fe1e:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 800fe22:	4b05      	ldr	r3, [pc, #20]	; (800fe38 <OpenContinuousRxCWindow+0x7c>)
 800fe24:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 800fe28:	bf00      	nop
 800fe2a:	3704      	adds	r7, #4
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd90      	pop	{r4, r7, pc}
 800fe30:	20000b94 	.word	0x20000b94
 800fe34:	20000a68 	.word	0x20000a68
 800fe38:	20000688 	.word	0x20000688
 800fe3c:	20000aa8 	.word	0x20000aa8
 800fe40:	0801b9f8 	.word	0x0801b9f8

0800fe44 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b088      	sub	sp, #32
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	60f8      	str	r0, [r7, #12]
 800fe4c:	60b9      	str	r1, [r7, #8]
 800fe4e:	603b      	str	r3, [r7, #0]
 800fe50:	4613      	mov	r3, r2
 800fe52:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 800fe54:	4b82      	ldr	r3, [pc, #520]	; (8010060 <PrepareFrame+0x21c>)
 800fe56:	2200      	movs	r2, #0
 800fe58:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800fe5a:	4b81      	ldr	r3, [pc, #516]	; (8010060 <PrepareFrame+0x21c>)
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 800fe62:	2300      	movs	r3, #0
 800fe64:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800fe66:	2300      	movs	r3, #0
 800fe68:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d101      	bne.n	800fe78 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 800fe74:	2300      	movs	r3, #0
 800fe76:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800fe78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fe7a:	461a      	mov	r2, r3
 800fe7c:	6839      	ldr	r1, [r7, #0]
 800fe7e:	4879      	ldr	r0, [pc, #484]	; (8010064 <PrepareFrame+0x220>)
 800fe80:	f006 fa95 	bl	80163ae <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800fe84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fe86:	b2da      	uxtb	r2, r3
 800fe88:	4b75      	ldr	r3, [pc, #468]	; (8010060 <PrepareFrame+0x21c>)
 800fe8a:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	781a      	ldrb	r2, [r3, #0]
 800fe92:	4b73      	ldr	r3, [pc, #460]	; (8010060 <PrepareFrame+0x21c>)
 800fe94:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	781b      	ldrb	r3, [r3, #0]
 800fe9a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800fe9e:	b2db      	uxtb	r3, r3
 800fea0:	2b07      	cmp	r3, #7
 800fea2:	f000 80b9 	beq.w	8010018 <PrepareFrame+0x1d4>
 800fea6:	2b07      	cmp	r3, #7
 800fea8:	f300 80d0 	bgt.w	801004c <PrepareFrame+0x208>
 800feac:	2b02      	cmp	r3, #2
 800feae:	d006      	beq.n	800febe <PrepareFrame+0x7a>
 800feb0:	2b04      	cmp	r3, #4
 800feb2:	f040 80cb 	bne.w	801004c <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 800feb6:	4b6a      	ldr	r3, [pc, #424]	; (8010060 <PrepareFrame+0x21c>)
 800feb8:	2201      	movs	r2, #1
 800feba:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800febe:	4b68      	ldr	r3, [pc, #416]	; (8010060 <PrepareFrame+0x21c>)
 800fec0:	2204      	movs	r2, #4
 800fec2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800fec6:	4b66      	ldr	r3, [pc, #408]	; (8010060 <PrepareFrame+0x21c>)
 800fec8:	4a67      	ldr	r2, [pc, #412]	; (8010068 <PrepareFrame+0x224>)
 800feca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800fece:	4b64      	ldr	r3, [pc, #400]	; (8010060 <PrepareFrame+0x21c>)
 800fed0:	22ff      	movs	r2, #255	; 0xff
 800fed2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	781a      	ldrb	r2, [r3, #0]
 800feda:	4b61      	ldr	r3, [pc, #388]	; (8010060 <PrepareFrame+0x21c>)
 800fedc:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800fee0:	4a5f      	ldr	r2, [pc, #380]	; (8010060 <PrepareFrame+0x21c>)
 800fee2:	79fb      	ldrb	r3, [r7, #7]
 800fee4:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800fee8:	4b60      	ldr	r3, [pc, #384]	; (801006c <PrepareFrame+0x228>)
 800feea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800feee:	4a5c      	ldr	r2, [pc, #368]	; (8010060 <PrepareFrame+0x21c>)
 800fef0:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800fef4:	68bb      	ldr	r3, [r7, #8]
 800fef6:	781a      	ldrb	r2, [r3, #0]
 800fef8:	4b59      	ldr	r3, [pc, #356]	; (8010060 <PrepareFrame+0x21c>)
 800fefa:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800fefe:	4b58      	ldr	r3, [pc, #352]	; (8010060 <PrepareFrame+0x21c>)
 800ff00:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 800ff04:	4b56      	ldr	r3, [pc, #344]	; (8010060 <PrepareFrame+0x21c>)
 800ff06:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800ff0a:	4b55      	ldr	r3, [pc, #340]	; (8010060 <PrepareFrame+0x21c>)
 800ff0c:	4a55      	ldr	r2, [pc, #340]	; (8010064 <PrepareFrame+0x220>)
 800ff0e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800ff12:	f107 0318 	add.w	r3, r7, #24
 800ff16:	4618      	mov	r0, r3
 800ff18:	f003 f890 	bl	801303c <LoRaMacCryptoGetFCntUp>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d001      	beq.n	800ff26 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800ff22:	2312      	movs	r3, #18
 800ff24:	e098      	b.n	8010058 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800ff26:	69bb      	ldr	r3, [r7, #24]
 800ff28:	b29a      	uxth	r2, r3
 800ff2a:	4b4d      	ldr	r3, [pc, #308]	; (8010060 <PrepareFrame+0x21c>)
 800ff2c:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 800ff30:	4b4b      	ldr	r3, [pc, #300]	; (8010060 <PrepareFrame+0x21c>)
 800ff32:	2200      	movs	r2, #0
 800ff34:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 800ff38:	4b49      	ldr	r3, [pc, #292]	; (8010060 <PrepareFrame+0x21c>)
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800ff40:	69bb      	ldr	r3, [r7, #24]
 800ff42:	4a47      	ldr	r2, [pc, #284]	; (8010060 <PrepareFrame+0x21c>)
 800ff44:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800ff48:	f107 0314 	add.w	r3, r7, #20
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f002 fa2d 	bl	80123ac <LoRaMacCommandsGetSizeSerializedCmds>
 800ff52:	4603      	mov	r3, r0
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d001      	beq.n	800ff5c <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ff58:	2313      	movs	r3, #19
 800ff5a:	e07d      	b.n	8010058 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d076      	beq.n	8010050 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800ff62:	4b42      	ldr	r3, [pc, #264]	; (801006c <PrepareFrame+0x228>)
 800ff64:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f7fe fdb5 	bl	800ead8 <GetMaxAppPayloadWithoutFOptsLength>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800ff72:	4b3b      	ldr	r3, [pc, #236]	; (8010060 <PrepareFrame+0x21c>)
 800ff74:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d01d      	beq.n	800ffb8 <PrepareFrame+0x174>
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	2b0f      	cmp	r3, #15
 800ff80:	d81a      	bhi.n	800ffb8 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800ff82:	f107 0314 	add.w	r3, r7, #20
 800ff86:	4a3a      	ldr	r2, [pc, #232]	; (8010070 <PrepareFrame+0x22c>)
 800ff88:	4619      	mov	r1, r3
 800ff8a:	200f      	movs	r0, #15
 800ff8c:	f002 fa24 	bl	80123d8 <LoRaMacCommandsSerializeCmds>
 800ff90:	4603      	mov	r3, r0
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d001      	beq.n	800ff9a <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ff96:	2313      	movs	r3, #19
 800ff98:	e05e      	b.n	8010058 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800ff9a:	697b      	ldr	r3, [r7, #20]
 800ff9c:	f003 030f 	and.w	r3, r3, #15
 800ffa0:	b2d9      	uxtb	r1, r3
 800ffa2:	68ba      	ldr	r2, [r7, #8]
 800ffa4:	7813      	ldrb	r3, [r2, #0]
 800ffa6:	f361 0303 	bfi	r3, r1, #0, #4
 800ffaa:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	781a      	ldrb	r2, [r3, #0]
 800ffb0:	4b2b      	ldr	r3, [pc, #172]	; (8010060 <PrepareFrame+0x21c>)
 800ffb2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800ffb6:	e04b      	b.n	8010050 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800ffb8:	4b29      	ldr	r3, [pc, #164]	; (8010060 <PrepareFrame+0x21c>)
 800ffba:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d010      	beq.n	800ffe4 <PrepareFrame+0x1a0>
 800ffc2:	697b      	ldr	r3, [r7, #20]
 800ffc4:	2b0f      	cmp	r3, #15
 800ffc6:	d90d      	bls.n	800ffe4 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800ffc8:	7ffb      	ldrb	r3, [r7, #31]
 800ffca:	f107 0114 	add.w	r1, r7, #20
 800ffce:	4a29      	ldr	r2, [pc, #164]	; (8010074 <PrepareFrame+0x230>)
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f002 fa01 	bl	80123d8 <LoRaMacCommandsSerializeCmds>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d001      	beq.n	800ffe0 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ffdc:	2313      	movs	r3, #19
 800ffde:	e03b      	b.n	8010058 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800ffe0:	230a      	movs	r3, #10
 800ffe2:	e039      	b.n	8010058 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800ffe4:	7ffb      	ldrb	r3, [r7, #31]
 800ffe6:	f107 0114 	add.w	r1, r7, #20
 800ffea:	4a22      	ldr	r2, [pc, #136]	; (8010074 <PrepareFrame+0x230>)
 800ffec:	4618      	mov	r0, r3
 800ffee:	f002 f9f3 	bl	80123d8 <LoRaMacCommandsSerializeCmds>
 800fff2:	4603      	mov	r3, r0
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d001      	beq.n	800fffc <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fff8:	2313      	movs	r3, #19
 800fffa:	e02d      	b.n	8010058 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800fffc:	4b18      	ldr	r3, [pc, #96]	; (8010060 <PrepareFrame+0x21c>)
 800fffe:	2200      	movs	r2, #0
 8010000:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8010004:	4b16      	ldr	r3, [pc, #88]	; (8010060 <PrepareFrame+0x21c>)
 8010006:	4a1b      	ldr	r2, [pc, #108]	; (8010074 <PrepareFrame+0x230>)
 8010008:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	b2da      	uxtb	r2, r3
 8010010:	4b13      	ldr	r3, [pc, #76]	; (8010060 <PrepareFrame+0x21c>)
 8010012:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8010016:	e01b      	b.n	8010050 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d01a      	beq.n	8010054 <PrepareFrame+0x210>
 801001e:	4b10      	ldr	r3, [pc, #64]	; (8010060 <PrepareFrame+0x21c>)
 8010020:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010024:	2b00      	cmp	r3, #0
 8010026:	d015      	beq.n	8010054 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8010028:	4813      	ldr	r0, [pc, #76]	; (8010078 <PrepareFrame+0x234>)
 801002a:	4b0d      	ldr	r3, [pc, #52]	; (8010060 <PrepareFrame+0x21c>)
 801002c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010030:	b29b      	uxth	r3, r3
 8010032:	461a      	mov	r2, r3
 8010034:	6839      	ldr	r1, [r7, #0]
 8010036:	f006 f9ba 	bl	80163ae <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 801003a:	4b09      	ldr	r3, [pc, #36]	; (8010060 <PrepareFrame+0x21c>)
 801003c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010040:	b29b      	uxth	r3, r3
 8010042:	3301      	adds	r3, #1
 8010044:	b29a      	uxth	r2, r3
 8010046:	4b06      	ldr	r3, [pc, #24]	; (8010060 <PrepareFrame+0x21c>)
 8010048:	801a      	strh	r2, [r3, #0]
            }
            break;
 801004a:	e003      	b.n	8010054 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801004c:	2302      	movs	r3, #2
 801004e:	e003      	b.n	8010058 <PrepareFrame+0x214>
            break;
 8010050:	bf00      	nop
 8010052:	e000      	b.n	8010056 <PrepareFrame+0x212>
            break;
 8010054:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8010056:	2300      	movs	r3, #0
}
 8010058:	4618      	mov	r0, r3
 801005a:	3720      	adds	r7, #32
 801005c:	46bd      	mov	sp, r7
 801005e:	bd80      	pop	{r7, pc}
 8010060:	20000688 	.word	0x20000688
 8010064:	200007c0 	.word	0x200007c0
 8010068:	2000068a 	.word	0x2000068a
 801006c:	20000b94 	.word	0x20000b94
 8010070:	200007a0 	.word	0x200007a0
 8010074:	20000b14 	.word	0x20000b14
 8010078:	2000068b 	.word	0x2000068b

0801007c <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b08a      	sub	sp, #40	; 0x28
 8010080:	af00      	add	r7, sp, #0
 8010082:	4603      	mov	r3, r0
 8010084:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010086:	2303      	movs	r3, #3
 8010088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 801008c:	2300      	movs	r3, #0
 801008e:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8010090:	79fb      	ldrb	r3, [r7, #7]
 8010092:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010094:	4b47      	ldr	r3, [pc, #284]	; (80101b4 <SendFrameOnChannel+0x138>)
 8010096:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801009a:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801009c:	4b45      	ldr	r3, [pc, #276]	; (80101b4 <SendFrameOnChannel+0x138>)
 801009e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80100a2:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80100a4:	4b43      	ldr	r3, [pc, #268]	; (80101b4 <SendFrameOnChannel+0x138>)
 80100a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80100a8:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80100aa:	4b42      	ldr	r3, [pc, #264]	; (80101b4 <SendFrameOnChannel+0x138>)
 80100ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100ae:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80100b0:	4b41      	ldr	r3, [pc, #260]	; (80101b8 <SendFrameOnChannel+0x13c>)
 80100b2:	881b      	ldrh	r3, [r3, #0]
 80100b4:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80100b6:	4b3f      	ldr	r3, [pc, #252]	; (80101b4 <SendFrameOnChannel+0x138>)
 80100b8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80100bc:	f107 020f 	add.w	r2, r7, #15
 80100c0:	f107 0110 	add.w	r1, r7, #16
 80100c4:	4b3d      	ldr	r3, [pc, #244]	; (80101bc <SendFrameOnChannel+0x140>)
 80100c6:	f003 ff05 	bl	8013ed4 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80100ca:	4b3b      	ldr	r3, [pc, #236]	; (80101b8 <SendFrameOnChannel+0x13c>)
 80100cc:	2201      	movs	r2, #1
 80100ce:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80100d2:	4b38      	ldr	r3, [pc, #224]	; (80101b4 <SendFrameOnChannel+0x138>)
 80100d4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80100d8:	b2da      	uxtb	r2, r3
 80100da:	4b37      	ldr	r3, [pc, #220]	; (80101b8 <SendFrameOnChannel+0x13c>)
 80100dc:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 80100e0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80100e4:	4b34      	ldr	r3, [pc, #208]	; (80101b8 <SendFrameOnChannel+0x13c>)
 80100e6:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 80100ea:	79fb      	ldrb	r3, [r7, #7]
 80100ec:	4a32      	ldr	r2, [pc, #200]	; (80101b8 <SendFrameOnChannel+0x13c>)
 80100ee:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80100f2:	4b31      	ldr	r3, [pc, #196]	; (80101b8 <SendFrameOnChannel+0x13c>)
 80100f4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80100f8:	4a2f      	ldr	r2, [pc, #188]	; (80101b8 <SendFrameOnChannel+0x13c>)
 80100fa:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80100fe:	4b2e      	ldr	r3, [pc, #184]	; (80101b8 <SendFrameOnChannel+0x13c>)
 8010100:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8010104:	4a2c      	ldr	r2, [pc, #176]	; (80101b8 <SendFrameOnChannel+0x13c>)
 8010106:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 801010a:	f001 fefb 	bl	8011f04 <LoRaMacClassBIsBeaconModeActive>
 801010e:	4603      	mov	r3, r0
 8010110:	2b00      	cmp	r3, #0
 8010112:	d00b      	beq.n	801012c <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8010114:	4b28      	ldr	r3, [pc, #160]	; (80101b8 <SendFrameOnChannel+0x13c>)
 8010116:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 801011a:	4618      	mov	r0, r3
 801011c:	f001 ff5d 	bl	8011fda <LoRaMacClassBIsUplinkCollision>
 8010120:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8010122:	6a3b      	ldr	r3, [r7, #32]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d001      	beq.n	801012c <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8010128:	2310      	movs	r3, #16
 801012a:	e03e      	b.n	80101aa <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801012c:	4b21      	ldr	r3, [pc, #132]	; (80101b4 <SendFrameOnChannel+0x138>)
 801012e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010132:	2b01      	cmp	r3, #1
 8010134:	d101      	bne.n	801013a <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8010136:	f001 ff5a 	bl	8011fee <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 801013a:	f001 fef4 	bl	8011f26 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 801013e:	4b1d      	ldr	r3, [pc, #116]	; (80101b4 <SendFrameOnChannel+0x138>)
 8010140:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010144:	b2db      	uxtb	r3, r3
 8010146:	4a1c      	ldr	r2, [pc, #112]	; (80101b8 <SendFrameOnChannel+0x13c>)
 8010148:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 801014c:	4611      	mov	r1, r2
 801014e:	4618      	mov	r0, r3
 8010150:	f7ff fc7c 	bl	800fa4c <SecureFrame>
 8010154:	4603      	mov	r3, r0
 8010156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 801015a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801015e:	2b00      	cmp	r3, #0
 8010160:	d002      	beq.n	8010168 <SendFrameOnChannel+0xec>
    {
        return status;
 8010162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010166:	e020      	b.n	80101aa <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010168:	4b13      	ldr	r3, [pc, #76]	; (80101b8 <SendFrameOnChannel+0x13c>)
 801016a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801016e:	f043 0302 	orr.w	r3, r3, #2
 8010172:	4a11      	ldr	r2, [pc, #68]	; (80101b8 <SendFrameOnChannel+0x13c>)
 8010174:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8010178:	4b0f      	ldr	r3, [pc, #60]	; (80101b8 <SendFrameOnChannel+0x13c>)
 801017a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801017e:	f083 0301 	eor.w	r3, r3, #1
 8010182:	b2db      	uxtb	r3, r3
 8010184:	2b00      	cmp	r3, #0
 8010186:	d007      	beq.n	8010198 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 8010188:	4b0b      	ldr	r3, [pc, #44]	; (80101b8 <SendFrameOnChannel+0x13c>)
 801018a:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801018e:	3301      	adds	r3, #1
 8010190:	b2da      	uxtb	r2, r3
 8010192:	4b09      	ldr	r3, [pc, #36]	; (80101b8 <SendFrameOnChannel+0x13c>)
 8010194:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8010198:	4b09      	ldr	r3, [pc, #36]	; (80101c0 <SendFrameOnChannel+0x144>)
 801019a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801019c:	4a06      	ldr	r2, [pc, #24]	; (80101b8 <SendFrameOnChannel+0x13c>)
 801019e:	8812      	ldrh	r2, [r2, #0]
 80101a0:	b2d2      	uxtb	r2, r2
 80101a2:	4611      	mov	r1, r2
 80101a4:	4807      	ldr	r0, [pc, #28]	; (80101c4 <SendFrameOnChannel+0x148>)
 80101a6:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80101a8:	2300      	movs	r3, #0
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3728      	adds	r7, #40	; 0x28
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
 80101b2:	bf00      	nop
 80101b4:	20000b94 	.word	0x20000b94
 80101b8:	20000688 	.word	0x20000688
 80101bc:	20000aa0 	.word	0x20000aa0
 80101c0:	0801b9f8 	.word	0x0801b9f8
 80101c4:	2000068a 	.word	0x2000068a

080101c8 <SetTxContinuousWave>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b086      	sub	sp, #24
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	4603      	mov	r3, r0
 80101d0:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 80101d2:	4b15      	ldr	r3, [pc, #84]	; (8010228 <SetTxContinuousWave+0x60>)
 80101d4:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 80101d8:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80101da:	4b14      	ldr	r3, [pc, #80]	; (801022c <SetTxContinuousWave+0x64>)
 80101dc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80101e0:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80101e2:	4b12      	ldr	r3, [pc, #72]	; (801022c <SetTxContinuousWave+0x64>)
 80101e4:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80101e8:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80101ea:	4b10      	ldr	r3, [pc, #64]	; (801022c <SetTxContinuousWave+0x64>)
 80101ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80101ee:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80101f0:	4b0e      	ldr	r3, [pc, #56]	; (801022c <SetTxContinuousWave+0x64>)
 80101f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80101f4:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 80101f6:	88fb      	ldrh	r3, [r7, #6]
 80101f8:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 80101fa:	4b0c      	ldr	r3, [pc, #48]	; (801022c <SetTxContinuousWave+0x64>)
 80101fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010200:	f107 0208 	add.w	r2, r7, #8
 8010204:	4611      	mov	r1, r2
 8010206:	4618      	mov	r0, r3
 8010208:	f003 ff13 	bl	8014032 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801020c:	4b06      	ldr	r3, [pc, #24]	; (8010228 <SetTxContinuousWave+0x60>)
 801020e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010212:	f043 0302 	orr.w	r3, r3, #2
 8010216:	4a04      	ldr	r2, [pc, #16]	; (8010228 <SetTxContinuousWave+0x60>)
 8010218:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801021c:	2300      	movs	r3, #0
}
 801021e:	4618      	mov	r0, r3
 8010220:	3718      	adds	r7, #24
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}
 8010226:	bf00      	nop
 8010228:	20000688 	.word	0x20000688
 801022c:	20000b94 	.word	0x20000b94

08010230 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b082      	sub	sp, #8
 8010234:	af00      	add	r7, sp, #0
 8010236:	4603      	mov	r3, r0
 8010238:	6039      	str	r1, [r7, #0]
 801023a:	80fb      	strh	r3, [r7, #6]
 801023c:	4613      	mov	r3, r2
 801023e:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8010240:	4b09      	ldr	r3, [pc, #36]	; (8010268 <SetTxContinuousWave1+0x38>)
 8010242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010244:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8010248:	88fa      	ldrh	r2, [r7, #6]
 801024a:	6838      	ldr	r0, [r7, #0]
 801024c:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801024e:	4b07      	ldr	r3, [pc, #28]	; (801026c <SetTxContinuousWave1+0x3c>)
 8010250:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010254:	f043 0302 	orr.w	r3, r3, #2
 8010258:	4a04      	ldr	r2, [pc, #16]	; (801026c <SetTxContinuousWave1+0x3c>)
 801025a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801025e:	2300      	movs	r3, #0
}
 8010260:	4618      	mov	r0, r3
 8010262:	3708      	adds	r7, #8
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}
 8010268:	0801b9f8 	.word	0x0801b9f8
 801026c:	20000688 	.word	0x20000688

08010270 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b082      	sub	sp, #8
 8010274:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 8010276:	2300      	movs	r3, #0
 8010278:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 801027a:	4b3e      	ldr	r3, [pc, #248]	; (8010374 <RestoreNvmData+0x104>)
 801027c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010280:	2b01      	cmp	r3, #1
 8010282:	d001      	beq.n	8010288 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8010284:	2301      	movs	r3, #1
 8010286:	e071      	b.n	801036c <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8010288:	2124      	movs	r1, #36	; 0x24
 801028a:	483b      	ldr	r0, [pc, #236]	; (8010378 <RestoreNvmData+0x108>)
 801028c:	f006 f8e4 	bl	8016458 <Crc32>
 8010290:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8010292:	4b39      	ldr	r3, [pc, #228]	; (8010378 <RestoreNvmData+0x108>)
 8010294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010296:	687a      	ldr	r2, [r7, #4]
 8010298:	429a      	cmp	r2, r3
 801029a:	d001      	beq.n	80102a0 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801029c:	2317      	movs	r3, #23
 801029e:	e065      	b.n	801036c <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 80102a0:	2114      	movs	r1, #20
 80102a2:	4836      	ldr	r0, [pc, #216]	; (801037c <RestoreNvmData+0x10c>)
 80102a4:	f006 f8d8 	bl	8016458 <Crc32>
 80102a8:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 80102aa:	4b33      	ldr	r3, [pc, #204]	; (8010378 <RestoreNvmData+0x108>)
 80102ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102ae:	687a      	ldr	r2, [r7, #4]
 80102b0:	429a      	cmp	r2, r3
 80102b2:	d001      	beq.n	80102b8 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80102b4:	2317      	movs	r3, #23
 80102b6:	e059      	b.n	801036c <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 80102b8:	21dc      	movs	r1, #220	; 0xdc
 80102ba:	4831      	ldr	r0, [pc, #196]	; (8010380 <RestoreNvmData+0x110>)
 80102bc:	f006 f8cc 	bl	8016458 <Crc32>
 80102c0:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 80102c2:	4b2d      	ldr	r3, [pc, #180]	; (8010378 <RestoreNvmData+0x108>)
 80102c4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80102c8:	687a      	ldr	r2, [r7, #4]
 80102ca:	429a      	cmp	r2, r3
 80102cc:	d001      	beq.n	80102d2 <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80102ce:	2317      	movs	r3, #23
 80102d0:	e04c      	b.n	801036c <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 80102d2:	21bc      	movs	r1, #188	; 0xbc
 80102d4:	482b      	ldr	r0, [pc, #172]	; (8010384 <RestoreNvmData+0x114>)
 80102d6:	f006 f8bf 	bl	8016458 <Crc32>
 80102da:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 80102dc:	4b26      	ldr	r3, [pc, #152]	; (8010378 <RestoreNvmData+0x108>)
 80102de:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80102e2:	687a      	ldr	r2, [r7, #4]
 80102e4:	429a      	cmp	r2, r3
 80102e6:	d001      	beq.n	80102ec <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80102e8:	2317      	movs	r3, #23
 80102ea:	e03f      	b.n	801036c <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 80102ec:	2190      	movs	r1, #144	; 0x90
 80102ee:	4826      	ldr	r0, [pc, #152]	; (8010388 <RestoreNvmData+0x118>)
 80102f0:	f006 f8b2 	bl	8016458 <Crc32>
 80102f4:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 80102f6:	4b20      	ldr	r3, [pc, #128]	; (8010378 <RestoreNvmData+0x108>)
 80102f8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80102fc:	687a      	ldr	r2, [r7, #4]
 80102fe:	429a      	cmp	r2, r3
 8010300:	d001      	beq.n	8010306 <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010302:	2317      	movs	r3, #23
 8010304:	e032      	b.n	801036c <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8010306:	2114      	movs	r1, #20
 8010308:	4820      	ldr	r0, [pc, #128]	; (801038c <RestoreNvmData+0x11c>)
 801030a:	f006 f8a5 	bl	8016458 <Crc32>
 801030e:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8010310:	4b19      	ldr	r3, [pc, #100]	; (8010378 <RestoreNvmData+0x108>)
 8010312:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 8010316:	687a      	ldr	r2, [r7, #4]
 8010318:	429a      	cmp	r2, r3
 801031a:	d001      	beq.n	8010320 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801031c:	2317      	movs	r3, #23
 801031e:	e025      	b.n	801036c <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8010320:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8010324:	4914      	ldr	r1, [pc, #80]	; (8010378 <RestoreNvmData+0x108>)
 8010326:	481a      	ldr	r0, [pc, #104]	; (8010390 <RestoreNvmData+0x120>)
 8010328:	f006 f841 	bl	80163ae <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 801032c:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8010330:	2100      	movs	r1, #0
 8010332:	4811      	ldr	r0, [pc, #68]	; (8010378 <RestoreNvmData+0x108>)
 8010334:	f006 f876 	bl	8016424 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010338:	4b0e      	ldr	r3, [pc, #56]	; (8010374 <RestoreNvmData+0x104>)
 801033a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 801033e:	4b0d      	ldr	r3, [pc, #52]	; (8010374 <RestoreNvmData+0x104>)
 8010340:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010344:	4b12      	ldr	r3, [pc, #72]	; (8010390 <RestoreNvmData+0x120>)
 8010346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010348:	4a0a      	ldr	r2, [pc, #40]	; (8010374 <RestoreNvmData+0x104>)
 801034a:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801034e:	4b10      	ldr	r3, [pc, #64]	; (8010390 <RestoreNvmData+0x120>)
 8010350:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010354:	4b07      	ldr	r3, [pc, #28]	; (8010374 <RestoreNvmData+0x104>)
 8010356:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801035a:	4b06      	ldr	r3, [pc, #24]	; (8010374 <RestoreNvmData+0x104>)
 801035c:	2201      	movs	r2, #1
 801035e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010362:	4b04      	ldr	r3, [pc, #16]	; (8010374 <RestoreNvmData+0x104>)
 8010364:	2202      	movs	r2, #2
 8010366:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    return LORAMAC_STATUS_OK;
 801036a:	2300      	movs	r3, #0
}
 801036c:	4618      	mov	r0, r3
 801036e:	3708      	adds	r7, #8
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}
 8010374:	20000688 	.word	0x20000688
 8010378:	200012bc 	.word	0x200012bc
 801037c:	200012e4 	.word	0x200012e4
 8010380:	200012fc 	.word	0x200012fc
 8010384:	200013dc 	.word	0x200013dc
 8010388:	2000149c 	.word	0x2000149c
 801038c:	200019cc 	.word	0x200019cc
 8010390:	20000b94 	.word	0x20000b94

08010394 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8010394:	b480      	push	{r7}
 8010396:	b083      	sub	sp, #12
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d002      	beq.n	80103aa <DetermineFrameType+0x16>
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d101      	bne.n	80103ae <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80103aa:	2303      	movs	r3, #3
 80103ac:	e03b      	b.n	8010426 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	7b1b      	ldrb	r3, [r3, #12]
 80103b2:	f003 030f 	and.w	r3, r3, #15
 80103b6:	b2db      	uxtb	r3, r3
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d008      	beq.n	80103ce <DetermineFrameType+0x3a>
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d003      	beq.n	80103ce <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	2200      	movs	r2, #0
 80103ca:	701a      	strb	r2, [r3, #0]
 80103cc:	e02a      	b.n	8010424 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d103      	bne.n	80103e0 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	2201      	movs	r2, #1
 80103dc:	701a      	strb	r2, [r3, #0]
 80103de:	e021      	b.n	8010424 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	7b1b      	ldrb	r3, [r3, #12]
 80103e4:	f003 030f 	and.w	r3, r3, #15
 80103e8:	b2db      	uxtb	r3, r3
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d108      	bne.n	8010400 <DetermineFrameType+0x6c>
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d103      	bne.n	8010400 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	2202      	movs	r2, #2
 80103fc:	701a      	strb	r2, [r3, #0]
 80103fe:	e011      	b.n	8010424 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	7b1b      	ldrb	r3, [r3, #12]
 8010404:	f003 030f 	and.w	r3, r3, #15
 8010408:	b2db      	uxtb	r3, r3
 801040a:	2b00      	cmp	r3, #0
 801040c:	d108      	bne.n	8010420 <DetermineFrameType+0x8c>
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d003      	beq.n	8010420 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	2203      	movs	r2, #3
 801041c:	701a      	strb	r2, [r3, #0]
 801041e:	e001      	b.n	8010424 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8010420:	2318      	movs	r3, #24
 8010422:	e000      	b.n	8010426 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8010424:	2300      	movs	r3, #0
}
 8010426:	4618      	mov	r0, r3
 8010428:	370c      	adds	r7, #12
 801042a:	46bd      	mov	sp, r7
 801042c:	bc80      	pop	{r7}
 801042e:	4770      	bx	lr

08010430 <CheckRetransUnconfirmedUplink>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 8010430:	b480      	push	{r7}
 8010432:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8010434:	4b12      	ldr	r3, [pc, #72]	; (8010480 <CheckRetransUnconfirmedUplink+0x50>)
 8010436:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 801043a:	4b12      	ldr	r3, [pc, #72]	; (8010484 <CheckRetransUnconfirmedUplink+0x54>)
 801043c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8010440:	429a      	cmp	r2, r3
 8010442:	d301      	bcc.n	8010448 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8010444:	2301      	movs	r3, #1
 8010446:	e016      	b.n	8010476 <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010448:	4b0d      	ldr	r3, [pc, #52]	; (8010480 <CheckRetransUnconfirmedUplink+0x50>)
 801044a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801044e:	f003 0302 	and.w	r3, r3, #2
 8010452:	b2db      	uxtb	r3, r3
 8010454:	2b00      	cmp	r3, #0
 8010456:	d00d      	beq.n	8010474 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8010458:	4b0a      	ldr	r3, [pc, #40]	; (8010484 <CheckRetransUnconfirmedUplink+0x54>)
 801045a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801045e:	2b00      	cmp	r3, #0
 8010460:	d101      	bne.n	8010466 <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 8010462:	2301      	movs	r3, #1
 8010464:	e007      	b.n	8010476 <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8010466:	4b06      	ldr	r3, [pc, #24]	; (8010480 <CheckRetransUnconfirmedUplink+0x50>)
 8010468:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 801046c:	2b00      	cmp	r3, #0
 801046e:	d101      	bne.n	8010474 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8010470:	2301      	movs	r3, #1
 8010472:	e000      	b.n	8010476 <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 8010474:	2300      	movs	r3, #0
}
 8010476:	4618      	mov	r0, r3
 8010478:	46bd      	mov	sp, r7
 801047a:	bc80      	pop	{r7}
 801047c:	4770      	bx	lr
 801047e:	bf00      	nop
 8010480:	20000688 	.word	0x20000688
 8010484:	20000b94 	.word	0x20000b94

08010488 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8010488:	b480      	push	{r7}
 801048a:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 801048c:	4b0e      	ldr	r3, [pc, #56]	; (80104c8 <CheckRetransConfirmedUplink+0x40>)
 801048e:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 8010492:	4b0d      	ldr	r3, [pc, #52]	; (80104c8 <CheckRetransConfirmedUplink+0x40>)
 8010494:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8010498:	429a      	cmp	r2, r3
 801049a:	d301      	bcc.n	80104a0 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 801049c:	2301      	movs	r3, #1
 801049e:	e00f      	b.n	80104c0 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80104a0:	4b09      	ldr	r3, [pc, #36]	; (80104c8 <CheckRetransConfirmedUplink+0x40>)
 80104a2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80104a6:	f003 0302 	and.w	r3, r3, #2
 80104aa:	b2db      	uxtb	r3, r3
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d006      	beq.n	80104be <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80104b0:	4b05      	ldr	r3, [pc, #20]	; (80104c8 <CheckRetransConfirmedUplink+0x40>)
 80104b2:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d001      	beq.n	80104be <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 80104ba:	2301      	movs	r3, #1
 80104bc:	e000      	b.n	80104c0 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 80104be:	2300      	movs	r3, #0
}
 80104c0:	4618      	mov	r0, r3
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bc80      	pop	{r7}
 80104c6:	4770      	bx	lr
 80104c8:	20000688 	.word	0x20000688

080104cc <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80104cc:	b480      	push	{r7}
 80104ce:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80104d0:	4b1a      	ldr	r3, [pc, #104]	; (801053c <StopRetransmission+0x70>)
 80104d2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80104d6:	f003 0302 	and.w	r3, r3, #2
 80104da:	b2db      	uxtb	r3, r3
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d009      	beq.n	80104f4 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80104e0:	4b16      	ldr	r3, [pc, #88]	; (801053c <StopRetransmission+0x70>)
 80104e2:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d00e      	beq.n	8010508 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 80104ea:	4b14      	ldr	r3, [pc, #80]	; (801053c <StopRetransmission+0x70>)
 80104ec:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80104f0:	2b01      	cmp	r3, #1
 80104f2:	d009      	beq.n	8010508 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80104f4:	4b12      	ldr	r3, [pc, #72]	; (8010540 <StopRetransmission+0x74>)
 80104f6:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d004      	beq.n	8010508 <StopRetransmission+0x3c>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 80104fe:	4b10      	ldr	r3, [pc, #64]	; (8010540 <StopRetransmission+0x74>)
 8010500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010502:	3301      	adds	r3, #1
 8010504:	4a0e      	ldr	r2, [pc, #56]	; (8010540 <StopRetransmission+0x74>)
 8010506:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8010508:	4b0c      	ldr	r3, [pc, #48]	; (801053c <StopRetransmission+0x70>)
 801050a:	2200      	movs	r2, #0
 801050c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8010510:	4b0a      	ldr	r3, [pc, #40]	; (801053c <StopRetransmission+0x70>)
 8010512:	2200      	movs	r2, #0
 8010514:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8010518:	4b08      	ldr	r3, [pc, #32]	; (801053c <StopRetransmission+0x70>)
 801051a:	2200      	movs	r2, #0
 801051c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010520:	4b06      	ldr	r3, [pc, #24]	; (801053c <StopRetransmission+0x70>)
 8010522:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010526:	f023 0302 	bic.w	r3, r3, #2
 801052a:	4a04      	ldr	r2, [pc, #16]	; (801053c <StopRetransmission+0x70>)
 801052c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8010530:	2301      	movs	r3, #1
}
 8010532:	4618      	mov	r0, r3
 8010534:	46bd      	mov	sp, r7
 8010536:	bc80      	pop	{r7}
 8010538:	4770      	bx	lr
 801053a:	bf00      	nop
 801053c:	20000688 	.word	0x20000688
 8010540:	20000b94 	.word	0x20000b94

08010544 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b082      	sub	sp, #8
 8010548:	af00      	add	r7, sp, #0
 801054a:	4603      	mov	r3, r0
 801054c:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 801054e:	4b0b      	ldr	r3, [pc, #44]	; (801057c <CallNvmDataChangeCallback+0x38>)
 8010550:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010554:	2b00      	cmp	r3, #0
 8010556:	d00c      	beq.n	8010572 <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8010558:	4b08      	ldr	r3, [pc, #32]	; (801057c <CallNvmDataChangeCallback+0x38>)
 801055a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801055e:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010560:	2b00      	cmp	r3, #0
 8010562:	d006      	beq.n	8010572 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8010564:	4b05      	ldr	r3, [pc, #20]	; (801057c <CallNvmDataChangeCallback+0x38>)
 8010566:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801056a:	68db      	ldr	r3, [r3, #12]
 801056c:	88fa      	ldrh	r2, [r7, #6]
 801056e:	4610      	mov	r0, r2
 8010570:	4798      	blx	r3
    }
}
 8010572:	bf00      	nop
 8010574:	3708      	adds	r7, #8
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}
 801057a:	bf00      	nop
 801057c:	20000688 	.word	0x20000688

08010580 <AckTimeoutRetriesProcess>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b084      	sub	sp, #16
 8010584:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8010586:	4b1b      	ldr	r3, [pc, #108]	; (80105f4 <AckTimeoutRetriesProcess+0x74>)
 8010588:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 801058c:	4b19      	ldr	r3, [pc, #100]	; (80105f4 <AckTimeoutRetriesProcess+0x74>)
 801058e:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8010592:	429a      	cmp	r2, r3
 8010594:	d229      	bcs.n	80105ea <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8010596:	4b17      	ldr	r3, [pc, #92]	; (80105f4 <AckTimeoutRetriesProcess+0x74>)
 8010598:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 801059c:	3301      	adds	r3, #1
 801059e:	b2da      	uxtb	r2, r3
 80105a0:	4b14      	ldr	r3, [pc, #80]	; (80105f4 <AckTimeoutRetriesProcess+0x74>)
 80105a2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 80105a6:	4b13      	ldr	r3, [pc, #76]	; (80105f4 <AckTimeoutRetriesProcess+0x74>)
 80105a8:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 80105ac:	f003 0301 	and.w	r3, r3, #1
 80105b0:	b2db      	uxtb	r3, r3
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d019      	beq.n	80105ea <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80105b6:	2322      	movs	r3, #34	; 0x22
 80105b8:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80105ba:	4b0f      	ldr	r3, [pc, #60]	; (80105f8 <AckTimeoutRetriesProcess+0x78>)
 80105bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80105c0:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80105c2:	4b0d      	ldr	r3, [pc, #52]	; (80105f8 <AckTimeoutRetriesProcess+0x78>)
 80105c4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80105c8:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80105ca:	4b0b      	ldr	r3, [pc, #44]	; (80105f8 <AckTimeoutRetriesProcess+0x78>)
 80105cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80105d0:	f107 0208 	add.w	r2, r7, #8
 80105d4:	4611      	mov	r1, r2
 80105d6:	4618      	mov	r0, r3
 80105d8:	f003 fbd6 	bl	8013d88 <RegionGetPhyParam>
 80105dc:	4603      	mov	r3, r0
 80105de:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	b25a      	sxtb	r2, r3
 80105e4:	4b04      	ldr	r3, [pc, #16]	; (80105f8 <AckTimeoutRetriesProcess+0x78>)
 80105e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 80105ea:	bf00      	nop
 80105ec:	3710      	adds	r7, #16
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}
 80105f2:	bf00      	nop
 80105f4:	20000688 	.word	0x20000688
 80105f8:	20000b94 	.word	0x20000b94

080105fc <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b084      	sub	sp, #16
 8010600:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8010602:	4b14      	ldr	r3, [pc, #80]	; (8010654 <AckTimeoutRetriesFinalize+0x58>)
 8010604:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8010608:	f083 0301 	eor.w	r3, r3, #1
 801060c:	b2db      	uxtb	r3, r3
 801060e:	2b00      	cmp	r3, #0
 8010610:	d015      	beq.n	801063e <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8010612:	2302      	movs	r3, #2
 8010614:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8010616:	4b10      	ldr	r3, [pc, #64]	; (8010658 <AckTimeoutRetriesFinalize+0x5c>)
 8010618:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 801061a:	4b10      	ldr	r3, [pc, #64]	; (801065c <AckTimeoutRetriesFinalize+0x60>)
 801061c:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801061e:	4b10      	ldr	r3, [pc, #64]	; (8010660 <AckTimeoutRetriesFinalize+0x64>)
 8010620:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010624:	1d3a      	adds	r2, r7, #4
 8010626:	4611      	mov	r1, r2
 8010628:	4618      	mov	r0, r3
 801062a:	f003 fbd6 	bl	8013dda <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 801062e:	4b09      	ldr	r3, [pc, #36]	; (8010654 <AckTimeoutRetriesFinalize+0x58>)
 8010630:	2200      	movs	r2, #0
 8010632:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 8010636:	4b07      	ldr	r3, [pc, #28]	; (8010654 <AckTimeoutRetriesFinalize+0x58>)
 8010638:	2200      	movs	r2, #0
 801063a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 801063e:	4b05      	ldr	r3, [pc, #20]	; (8010654 <AckTimeoutRetriesFinalize+0x58>)
 8010640:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8010644:	4b03      	ldr	r3, [pc, #12]	; (8010654 <AckTimeoutRetriesFinalize+0x58>)
 8010646:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 801064a:	bf00      	nop
 801064c:	3710      	adds	r7, #16
 801064e:	46bd      	mov	sp, r7
 8010650:	bd80      	pop	{r7, pc}
 8010652:	bf00      	nop
 8010654:	20000688 	.word	0x20000688
 8010658:	20000d74 	.word	0x20000d74
 801065c:	20000e08 	.word	0x20000e08
 8010660:	20000b94 	.word	0x20000b94

08010664 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8010664:	b480      	push	{r7}
 8010666:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010668:	4b0b      	ldr	r3, [pc, #44]	; (8010698 <IsRequestPending+0x34>)
 801066a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801066e:	f003 0304 	and.w	r3, r3, #4
 8010672:	b2db      	uxtb	r3, r3
 8010674:	2b00      	cmp	r3, #0
 8010676:	d107      	bne.n	8010688 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8010678:	4b07      	ldr	r3, [pc, #28]	; (8010698 <IsRequestPending+0x34>)
 801067a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801067e:	f003 0301 	and.w	r3, r3, #1
 8010682:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010684:	2b00      	cmp	r3, #0
 8010686:	d001      	beq.n	801068c <IsRequestPending+0x28>
    {
        return 1;
 8010688:	2301      	movs	r3, #1
 801068a:	e000      	b.n	801068e <IsRequestPending+0x2a>
    }
    return 0;
 801068c:	2300      	movs	r3, #0
}
 801068e:	4618      	mov	r0, r3
 8010690:	46bd      	mov	sp, r7
 8010692:	bc80      	pop	{r7}
 8010694:	4770      	bx	lr
 8010696:	bf00      	nop
 8010698:	20000688 	.word	0x20000688

0801069c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 801069c:	b590      	push	{r4, r7, lr}
 801069e:	b08f      	sub	sp, #60	; 0x3c
 80106a0:	af02      	add	r7, sp, #8
 80106a2:	6178      	str	r0, [r7, #20]
 80106a4:	6139      	str	r1, [r7, #16]
 80106a6:	4613      	mov	r3, r2
 80106a8:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d002      	beq.n	80106b6 <LoRaMacInitialization+0x1a>
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d101      	bne.n	80106ba <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80106b6:	2303      	movs	r3, #3
 80106b8:	e275      	b.n	8010ba6 <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80106ba:	697b      	ldr	r3, [r7, #20]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d00b      	beq.n	80106da <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d007      	beq.n	80106da <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80106ca:	697b      	ldr	r3, [r7, #20]
 80106cc:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d003      	beq.n	80106da <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d101      	bne.n	80106de <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80106da:	2303      	movs	r3, #3
 80106dc:	e263      	b.n	8010ba6 <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80106de:	7bfb      	ldrb	r3, [r7, #15]
 80106e0:	4618      	mov	r0, r3
 80106e2:	f003 fb41 	bl	8013d68 <RegionIsActive>
 80106e6:	4603      	mov	r3, r0
 80106e8:	f083 0301 	eor.w	r3, r3, #1
 80106ec:	b2db      	uxtb	r3, r3
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d001      	beq.n	80106f6 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80106f2:	2309      	movs	r3, #9
 80106f4:	e257      	b.n	8010ba6 <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80106f6:	6978      	ldr	r0, [r7, #20]
 80106f8:	f001 ffb8 	bl	801266c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80106fc:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8010700:	2100      	movs	r1, #0
 8010702:	48c7      	ldr	r0, [pc, #796]	; (8010a20 <LoRaMacInitialization+0x384>)
 8010704:	f005 fe8e 	bl	8016424 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8010708:	f240 520c 	movw	r2, #1292	; 0x50c
 801070c:	2100      	movs	r1, #0
 801070e:	48c5      	ldr	r0, [pc, #788]	; (8010a24 <LoRaMacInitialization+0x388>)
 8010710:	f005 fe88 	bl	8016424 <memset1>

    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010714:	4bc3      	ldr	r3, [pc, #780]	; (8010a24 <LoRaMacInitialization+0x388>)
 8010716:	2201      	movs	r2, #1
 8010718:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 801071c:	4bc1      	ldr	r3, [pc, #772]	; (8010a24 <LoRaMacInitialization+0x388>)
 801071e:	2201      	movs	r2, #1
 8010720:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8010724:	4abe      	ldr	r2, [pc, #760]	; (8010a20 <LoRaMacInitialization+0x384>)
 8010726:	7bfb      	ldrb	r3, [r7, #15]
 8010728:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 801072c:	4bbc      	ldr	r3, [pc, #752]	; (8010a20 <LoRaMacInitialization+0x384>)
 801072e:	2200      	movs	r2, #0
 8010730:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8010734:	4bba      	ldr	r3, [pc, #744]	; (8010a20 <LoRaMacInitialization+0x384>)
 8010736:	2200      	movs	r2, #0
 8010738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 801073c:	4bb8      	ldr	r3, [pc, #736]	; (8010a20 <LoRaMacInitialization+0x384>)
 801073e:	4aba      	ldr	r2, [pc, #744]	; (8010a28 <LoRaMacInitialization+0x38c>)
 8010740:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010744:	230f      	movs	r3, #15
 8010746:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801074a:	4bb5      	ldr	r3, [pc, #724]	; (8010a20 <LoRaMacInitialization+0x384>)
 801074c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010750:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010754:	4611      	mov	r1, r2
 8010756:	4618      	mov	r0, r3
 8010758:	f003 fb16 	bl	8013d88 <RegionGetPhyParam>
 801075c:	4603      	mov	r3, r0
 801075e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8010760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010762:	2b00      	cmp	r3, #0
 8010764:	bf14      	ite	ne
 8010766:	2301      	movne	r3, #1
 8010768:	2300      	moveq	r3, #0
 801076a:	b2da      	uxtb	r2, r3
 801076c:	4bac      	ldr	r3, [pc, #688]	; (8010a20 <LoRaMacInitialization+0x384>)
 801076e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8010772:	230a      	movs	r3, #10
 8010774:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010778:	4ba9      	ldr	r3, [pc, #676]	; (8010a20 <LoRaMacInitialization+0x384>)
 801077a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801077e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010782:	4611      	mov	r1, r2
 8010784:	4618      	mov	r0, r3
 8010786:	f003 faff 	bl	8013d88 <RegionGetPhyParam>
 801078a:	4603      	mov	r3, r0
 801078c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 801078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010790:	b25a      	sxtb	r2, r3
 8010792:	4ba3      	ldr	r3, [pc, #652]	; (8010a20 <LoRaMacInitialization+0x384>)
 8010794:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8010798:	2306      	movs	r3, #6
 801079a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801079e:	4ba0      	ldr	r3, [pc, #640]	; (8010a20 <LoRaMacInitialization+0x384>)
 80107a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80107a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80107a8:	4611      	mov	r1, r2
 80107aa:	4618      	mov	r0, r3
 80107ac:	f003 faec 	bl	8013d88 <RegionGetPhyParam>
 80107b0:	4603      	mov	r3, r0
 80107b2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 80107b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b6:	b25a      	sxtb	r2, r3
 80107b8:	4b99      	ldr	r3, [pc, #612]	; (8010a20 <LoRaMacInitialization+0x384>)
 80107ba:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80107be:	2310      	movs	r3, #16
 80107c0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80107c4:	4b96      	ldr	r3, [pc, #600]	; (8010a20 <LoRaMacInitialization+0x384>)
 80107c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80107ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80107ce:	4611      	mov	r1, r2
 80107d0:	4618      	mov	r0, r3
 80107d2:	f003 fad9 	bl	8013d88 <RegionGetPhyParam>
 80107d6:	4603      	mov	r3, r0
 80107d8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80107da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107dc:	4a90      	ldr	r2, [pc, #576]	; (8010a20 <LoRaMacInitialization+0x384>)
 80107de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80107e2:	2311      	movs	r3, #17
 80107e4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80107e8:	4b8d      	ldr	r3, [pc, #564]	; (8010a20 <LoRaMacInitialization+0x384>)
 80107ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80107ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80107f2:	4611      	mov	r1, r2
 80107f4:	4618      	mov	r0, r3
 80107f6:	f003 fac7 	bl	8013d88 <RegionGetPhyParam>
 80107fa:	4603      	mov	r3, r0
 80107fc:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80107fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010800:	4a87      	ldr	r2, [pc, #540]	; (8010a20 <LoRaMacInitialization+0x384>)
 8010802:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8010806:	2312      	movs	r3, #18
 8010808:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801080c:	4b84      	ldr	r3, [pc, #528]	; (8010a20 <LoRaMacInitialization+0x384>)
 801080e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010812:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010816:	4611      	mov	r1, r2
 8010818:	4618      	mov	r0, r3
 801081a:	f003 fab5 	bl	8013d88 <RegionGetPhyParam>
 801081e:	4603      	mov	r3, r0
 8010820:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8010822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010824:	4a7e      	ldr	r2, [pc, #504]	; (8010a20 <LoRaMacInitialization+0x384>)
 8010826:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801082a:	2313      	movs	r3, #19
 801082c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010830:	4b7b      	ldr	r3, [pc, #492]	; (8010a20 <LoRaMacInitialization+0x384>)
 8010832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010836:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801083a:	4611      	mov	r1, r2
 801083c:	4618      	mov	r0, r3
 801083e:	f003 faa3 	bl	8013d88 <RegionGetPhyParam>
 8010842:	4603      	mov	r3, r0
 8010844:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010848:	4a75      	ldr	r2, [pc, #468]	; (8010a20 <LoRaMacInitialization+0x384>)
 801084a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 801084e:	2314      	movs	r3, #20
 8010850:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010854:	4b72      	ldr	r3, [pc, #456]	; (8010a20 <LoRaMacInitialization+0x384>)
 8010856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801085a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801085e:	4611      	mov	r1, r2
 8010860:	4618      	mov	r0, r3
 8010862:	f003 fa91 	bl	8013d88 <RegionGetPhyParam>
 8010866:	4603      	mov	r3, r0
 8010868:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 801086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801086c:	4a6c      	ldr	r2, [pc, #432]	; (8010a20 <LoRaMacInitialization+0x384>)
 801086e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010872:	2317      	movs	r3, #23
 8010874:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010878:	4b69      	ldr	r3, [pc, #420]	; (8010a20 <LoRaMacInitialization+0x384>)
 801087a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801087e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010882:	4611      	mov	r1, r2
 8010884:	4618      	mov	r0, r3
 8010886:	f003 fa7f 	bl	8013d88 <RegionGetPhyParam>
 801088a:	4603      	mov	r3, r0
 801088c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 801088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010890:	b2da      	uxtb	r2, r3
 8010892:	4b63      	ldr	r3, [pc, #396]	; (8010a20 <LoRaMacInitialization+0x384>)
 8010894:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010898:	2318      	movs	r3, #24
 801089a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801089e:	4b60      	ldr	r3, [pc, #384]	; (8010a20 <LoRaMacInitialization+0x384>)
 80108a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80108a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80108a8:	4611      	mov	r1, r2
 80108aa:	4618      	mov	r0, r3
 80108ac:	f003 fa6c 	bl	8013d88 <RegionGetPhyParam>
 80108b0:	4603      	mov	r3, r0
 80108b2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80108b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b6:	4a5a      	ldr	r2, [pc, #360]	; (8010a20 <LoRaMacInitialization+0x384>)
 80108b8:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80108bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108be:	4a58      	ldr	r2, [pc, #352]	; (8010a20 <LoRaMacInitialization+0x384>)
 80108c0:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80108c4:	2319      	movs	r3, #25
 80108c6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80108ca:	4b55      	ldr	r3, [pc, #340]	; (8010a20 <LoRaMacInitialization+0x384>)
 80108cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80108d0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80108d4:	4611      	mov	r1, r2
 80108d6:	4618      	mov	r0, r3
 80108d8:	f003 fa56 	bl	8013d88 <RegionGetPhyParam>
 80108dc:	4603      	mov	r3, r0
 80108de:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80108e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e2:	b2da      	uxtb	r2, r3
 80108e4:	4b4e      	ldr	r3, [pc, #312]	; (8010a20 <LoRaMacInitialization+0x384>)
 80108e6:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80108ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ec:	b2da      	uxtb	r2, r3
 80108ee:	4b4c      	ldr	r3, [pc, #304]	; (8010a20 <LoRaMacInitialization+0x384>)
 80108f0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80108f4:	231e      	movs	r3, #30
 80108f6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80108fa:	4b49      	ldr	r3, [pc, #292]	; (8010a20 <LoRaMacInitialization+0x384>)
 80108fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010900:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010904:	4611      	mov	r1, r2
 8010906:	4618      	mov	r0, r3
 8010908:	f003 fa3e 	bl	8013d88 <RegionGetPhyParam>
 801090c:	4603      	mov	r3, r0
 801090e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010912:	b2da      	uxtb	r2, r3
 8010914:	4b42      	ldr	r3, [pc, #264]	; (8010a20 <LoRaMacInitialization+0x384>)
 8010916:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801091a:	231f      	movs	r3, #31
 801091c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010920:	4b3f      	ldr	r3, [pc, #252]	; (8010a20 <LoRaMacInitialization+0x384>)
 8010922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010926:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801092a:	4611      	mov	r1, r2
 801092c:	4618      	mov	r0, r3
 801092e:	f003 fa2b 	bl	8013d88 <RegionGetPhyParam>
 8010932:	4603      	mov	r3, r0
 8010934:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010938:	b2da      	uxtb	r2, r3
 801093a:	4b39      	ldr	r3, [pc, #228]	; (8010a20 <LoRaMacInitialization+0x384>)
 801093c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010940:	2320      	movs	r3, #32
 8010942:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010946:	4b36      	ldr	r3, [pc, #216]	; (8010a20 <LoRaMacInitialization+0x384>)
 8010948:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801094c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010950:	4611      	mov	r1, r2
 8010952:	4618      	mov	r0, r3
 8010954:	f003 fa18 	bl	8013d88 <RegionGetPhyParam>
 8010958:	4603      	mov	r3, r0
 801095a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 801095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801095e:	4a30      	ldr	r2, [pc, #192]	; (8010a20 <LoRaMacInitialization+0x384>)
 8010960:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010964:	2321      	movs	r3, #33	; 0x21
 8010966:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801096a:	4b2d      	ldr	r3, [pc, #180]	; (8010a20 <LoRaMacInitialization+0x384>)
 801096c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010970:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010974:	4611      	mov	r1, r2
 8010976:	4618      	mov	r0, r3
 8010978:	f003 fa06 	bl	8013d88 <RegionGetPhyParam>
 801097c:	4603      	mov	r3, r0
 801097e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010982:	4a27      	ldr	r2, [pc, #156]	; (8010a20 <LoRaMacInitialization+0x384>)
 8010984:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8010988:	230b      	movs	r3, #11
 801098a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801098e:	4b24      	ldr	r3, [pc, #144]	; (8010a20 <LoRaMacInitialization+0x384>)
 8010990:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010994:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010998:	4611      	mov	r1, r2
 801099a:	4618      	mov	r0, r3
 801099c:	f003 f9f4 	bl	8013d88 <RegionGetPhyParam>
 80109a0:	4603      	mov	r3, r0
 80109a2:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 80109a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a6:	b29a      	uxth	r2, r3
 80109a8:	4b1e      	ldr	r3, [pc, #120]	; (8010a24 <LoRaMacInitialization+0x388>)
 80109aa:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80109ae:	230c      	movs	r3, #12
 80109b0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80109b4:	4b1a      	ldr	r3, [pc, #104]	; (8010a20 <LoRaMacInitialization+0x384>)
 80109b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80109ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80109be:	4611      	mov	r1, r2
 80109c0:	4618      	mov	r0, r3
 80109c2:	f003 f9e1 	bl	8013d88 <RegionGetPhyParam>
 80109c6:	4603      	mov	r3, r0
 80109c8:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 80109ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109cc:	b29a      	uxth	r2, r3
 80109ce:	4b15      	ldr	r3, [pc, #84]	; (8010a24 <LoRaMacInitialization+0x388>)
 80109d0:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80109d4:	4b12      	ldr	r3, [pc, #72]	; (8010a20 <LoRaMacInitialization+0x384>)
 80109d6:	2201      	movs	r2, #1
 80109d8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80109dc:	4b10      	ldr	r3, [pc, #64]	; (8010a20 <LoRaMacInitialization+0x384>)
 80109de:	220a      	movs	r2, #10
 80109e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80109e4:	4b0e      	ldr	r3, [pc, #56]	; (8010a20 <LoRaMacInitialization+0x384>)
 80109e6:	2206      	movs	r2, #6
 80109e8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80109ec:	4b0c      	ldr	r3, [pc, #48]	; (8010a20 <LoRaMacInitialization+0x384>)
 80109ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109f2:	4a0b      	ldr	r2, [pc, #44]	; (8010a20 <LoRaMacInitialization+0x384>)
 80109f4:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80109f6:	4b0a      	ldr	r3, [pc, #40]	; (8010a20 <LoRaMacInitialization+0x384>)
 80109f8:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80109fc:	4b08      	ldr	r3, [pc, #32]	; (8010a20 <LoRaMacInitialization+0x384>)
 80109fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8010a02:	4b07      	ldr	r3, [pc, #28]	; (8010a20 <LoRaMacInitialization+0x384>)
 8010a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a08:	4a05      	ldr	r2, [pc, #20]	; (8010a20 <LoRaMacInitialization+0x384>)
 8010a0a:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8010a0c:	4b04      	ldr	r3, [pc, #16]	; (8010a20 <LoRaMacInitialization+0x384>)
 8010a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010a12:	4a03      	ldr	r2, [pc, #12]	; (8010a20 <LoRaMacInitialization+0x384>)
 8010a14:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8010a16:	4b02      	ldr	r3, [pc, #8]	; (8010a20 <LoRaMacInitialization+0x384>)
 8010a18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010a1c:	e006      	b.n	8010a2c <LoRaMacInitialization+0x390>
 8010a1e:	bf00      	nop
 8010a20:	20000b94 	.word	0x20000b94
 8010a24:	20000688 	.word	0x20000688
 8010a28:	01000300 	.word	0x01000300
 8010a2c:	4a60      	ldr	r2, [pc, #384]	; (8010bb0 <LoRaMacInitialization+0x514>)
 8010a2e:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8010a30:	4b5f      	ldr	r3, [pc, #380]	; (8010bb0 <LoRaMacInitialization+0x514>)
 8010a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010a36:	4a5e      	ldr	r2, [pc, #376]	; (8010bb0 <LoRaMacInitialization+0x514>)
 8010a38:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8010a3a:	4b5d      	ldr	r3, [pc, #372]	; (8010bb0 <LoRaMacInitialization+0x514>)
 8010a3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010a40:	4a5b      	ldr	r2, [pc, #364]	; (8010bb0 <LoRaMacInitialization+0x514>)
 8010a42:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8010a44:	4b5a      	ldr	r3, [pc, #360]	; (8010bb0 <LoRaMacInitialization+0x514>)
 8010a46:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 8010a4a:	4b59      	ldr	r3, [pc, #356]	; (8010bb0 <LoRaMacInitialization+0x514>)
 8010a4c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010a50:	2300      	movs	r3, #0
 8010a52:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010a56:	4b57      	ldr	r3, [pc, #348]	; (8010bb4 <LoRaMacInitialization+0x518>)
 8010a58:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010a5a:	4b57      	ldr	r3, [pc, #348]	; (8010bb8 <LoRaMacInitialization+0x51c>)
 8010a5c:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010a5e:	4b54      	ldr	r3, [pc, #336]	; (8010bb0 <LoRaMacInitialization+0x514>)
 8010a60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a64:	f107 0218 	add.w	r2, r7, #24
 8010a68:	4611      	mov	r1, r2
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f003 f9b5 	bl	8013dda <RegionInitDefaults>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8010a70:	4a52      	ldr	r2, [pc, #328]	; (8010bbc <LoRaMacInitialization+0x520>)
 8010a72:	693b      	ldr	r3, [r7, #16]
 8010a74:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8010a78:	f7ff f87e 	bl	800fb78 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8010a7c:	4b4c      	ldr	r3, [pc, #304]	; (8010bb0 <LoRaMacInitialization+0x514>)
 8010a7e:	2201      	movs	r2, #1
 8010a80:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 8010a84:	4a4d      	ldr	r2, [pc, #308]	; (8010bbc <LoRaMacInitialization+0x520>)
 8010a86:	697b      	ldr	r3, [r7, #20]
 8010a88:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8010a8c:	4b4b      	ldr	r3, [pc, #300]	; (8010bbc <LoRaMacInitialization+0x520>)
 8010a8e:	2200      	movs	r2, #0
 8010a90:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    MacCtx.MacState = LORAMAC_STOPPED;
 8010a94:	4b49      	ldr	r3, [pc, #292]	; (8010bbc <LoRaMacInitialization+0x520>)
 8010a96:	2201      	movs	r2, #1
 8010a98:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8010a9c:	4b44      	ldr	r3, [pc, #272]	; (8010bb0 <LoRaMacInitialization+0x514>)
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010aa2:	4b43      	ldr	r3, [pc, #268]	; (8010bb0 <LoRaMacInitialization+0x514>)
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	9300      	str	r3, [sp, #0]
 8010aac:	4b44      	ldr	r3, [pc, #272]	; (8010bc0 <LoRaMacInitialization+0x524>)
 8010aae:	2200      	movs	r2, #0
 8010ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8010ab4:	4843      	ldr	r0, [pc, #268]	; (8010bc4 <LoRaMacInitialization+0x528>)
 8010ab6:	f009 fd21 	bl	801a4fc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8010aba:	2300      	movs	r3, #0
 8010abc:	9300      	str	r3, [sp, #0]
 8010abe:	4b42      	ldr	r3, [pc, #264]	; (8010bc8 <LoRaMacInitialization+0x52c>)
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	f04f 31ff 	mov.w	r1, #4294967295
 8010ac6:	4841      	ldr	r0, [pc, #260]	; (8010bcc <LoRaMacInitialization+0x530>)
 8010ac8:	f009 fd18 	bl	801a4fc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8010acc:	2300      	movs	r3, #0
 8010ace:	9300      	str	r3, [sp, #0]
 8010ad0:	4b3f      	ldr	r3, [pc, #252]	; (8010bd0 <LoRaMacInitialization+0x534>)
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8010ad8:	483e      	ldr	r0, [pc, #248]	; (8010bd4 <LoRaMacInitialization+0x538>)
 8010ada:	f009 fd0f 	bl	801a4fc <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8010ade:	2300      	movs	r3, #0
 8010ae0:	9300      	str	r3, [sp, #0]
 8010ae2:	4b3d      	ldr	r3, [pc, #244]	; (8010bd8 <LoRaMacInitialization+0x53c>)
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	f04f 31ff 	mov.w	r1, #4294967295
 8010aea:	483c      	ldr	r0, [pc, #240]	; (8010bdc <LoRaMacInitialization+0x540>)
 8010aec:	f009 fd06 	bl	801a4fc <UTIL_TIMER_Create>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8010af0:	4c2f      	ldr	r4, [pc, #188]	; (8010bb0 <LoRaMacInitialization+0x514>)
 8010af2:	463b      	mov	r3, r7
 8010af4:	4618      	mov	r0, r3
 8010af6:	f009 f871 	bl	8019bdc <SysTimeGetMcuTime>
 8010afa:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8010afe:	463a      	mov	r2, r7
 8010b00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b04:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8010b08:	4b2c      	ldr	r3, [pc, #176]	; (8010bbc <LoRaMacInitialization+0x520>)
 8010b0a:	4a35      	ldr	r2, [pc, #212]	; (8010be0 <LoRaMacInitialization+0x544>)
 8010b0c:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8010b10:	4b2a      	ldr	r3, [pc, #168]	; (8010bbc <LoRaMacInitialization+0x520>)
 8010b12:	4a34      	ldr	r2, [pc, #208]	; (8010be4 <LoRaMacInitialization+0x548>)
 8010b14:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8010b18:	4b28      	ldr	r3, [pc, #160]	; (8010bbc <LoRaMacInitialization+0x520>)
 8010b1a:	4a33      	ldr	r2, [pc, #204]	; (8010be8 <LoRaMacInitialization+0x54c>)
 8010b1c:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8010b20:	4b26      	ldr	r3, [pc, #152]	; (8010bbc <LoRaMacInitialization+0x520>)
 8010b22:	4a32      	ldr	r2, [pc, #200]	; (8010bec <LoRaMacInitialization+0x550>)
 8010b24:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8010b28:	4b24      	ldr	r3, [pc, #144]	; (8010bbc <LoRaMacInitialization+0x520>)
 8010b2a:	4a31      	ldr	r2, [pc, #196]	; (8010bf0 <LoRaMacInitialization+0x554>)
 8010b2c:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8010b30:	4b30      	ldr	r3, [pc, #192]	; (8010bf4 <LoRaMacInitialization+0x558>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	4830      	ldr	r0, [pc, #192]	; (8010bf8 <LoRaMacInitialization+0x55c>)
 8010b36:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	689b      	ldr	r3, [r3, #8]
 8010b3c:	4619      	mov	r1, r3
 8010b3e:	482f      	ldr	r0, [pc, #188]	; (8010bfc <LoRaMacInitialization+0x560>)
 8010b40:	f7fa fe20 	bl	800b784 <SecureElementInit>
 8010b44:	4603      	mov	r3, r0
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d001      	beq.n	8010b4e <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010b4a:	2311      	movs	r3, #17
 8010b4c:	e02b      	b.n	8010ba6 <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8010b4e:	4818      	ldr	r0, [pc, #96]	; (8010bb0 <LoRaMacInitialization+0x514>)
 8010b50:	f002 fa38 	bl	8012fc4 <LoRaMacCryptoInit>
 8010b54:	4603      	mov	r3, r0
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d001      	beq.n	8010b5e <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010b5a:	2311      	movs	r3, #17
 8010b5c:	e023      	b.n	8010ba6 <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8010b5e:	f001 fb57 	bl	8012210 <LoRaMacCommandsInit>
 8010b62:	4603      	mov	r3, r0
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d001      	beq.n	8010b6c <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010b68:	2313      	movs	r3, #19
 8010b6a:	e01c      	b.n	8010ba6 <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8010b6c:	4824      	ldr	r0, [pc, #144]	; (8010c00 <LoRaMacInitialization+0x564>)
 8010b6e:	f002 faf3 	bl	8013158 <LoRaMacCryptoSetMulticastReference>
 8010b72:	4603      	mov	r3, r0
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d001      	beq.n	8010b7c <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010b78:	2311      	movs	r3, #17
 8010b7a:	e014      	b.n	8010ba6 <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8010b7c:	4b1d      	ldr	r3, [pc, #116]	; (8010bf4 <LoRaMacInitialization+0x558>)
 8010b7e:	695b      	ldr	r3, [r3, #20]
 8010b80:	4798      	blx	r3
 8010b82:	4603      	mov	r3, r0
 8010b84:	4618      	mov	r0, r3
 8010b86:	f005 fbed 	bl	8016364 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8010b8a:	4b1a      	ldr	r3, [pc, #104]	; (8010bf4 <LoRaMacInitialization+0x558>)
 8010b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b8e:	4a08      	ldr	r2, [pc, #32]	; (8010bb0 <LoRaMacInitialization+0x514>)
 8010b90:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8010b94:	4610      	mov	r0, r2
 8010b96:	4798      	blx	r3
    Radio.Sleep( );
 8010b98:	4b16      	ldr	r3, [pc, #88]	; (8010bf4 <LoRaMacInitialization+0x558>)
 8010b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b9c:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010b9e:	2001      	movs	r0, #1
 8010ba0:	f7fd faf2 	bl	800e188 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8010ba4:	2300      	movs	r3, #0
}
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	3734      	adds	r7, #52	; 0x34
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd90      	pop	{r4, r7, pc}
 8010bae:	bf00      	nop
 8010bb0:	20000b94 	.word	0x20000b94
 8010bb4:	20000d74 	.word	0x20000d74
 8010bb8:	20000e08 	.word	0x20000e08
 8010bbc:	20000688 	.word	0x20000688
 8010bc0:	0800e6f5 	.word	0x0800e6f5
 8010bc4:	200009f0 	.word	0x200009f0
 8010bc8:	0800e769 	.word	0x0800e769
 8010bcc:	20000a08 	.word	0x20000a08
 8010bd0:	0800e7d5 	.word	0x0800e7d5
 8010bd4:	20000a20 	.word	0x20000a20
 8010bd8:	0800e849 	.word	0x0800e849
 8010bdc:	20000a80 	.word	0x20000a80
 8010be0:	0800d305 	.word	0x0800d305
 8010be4:	0800d37d 	.word	0x0800d37d
 8010be8:	0800d455 	.word	0x0800d455
 8010bec:	0800d409 	.word	0x0800d409
 8010bf0:	0800d491 	.word	0x0800d491
 8010bf4:	0801b9f8 	.word	0x0801b9f8
 8010bf8:	200009d4 	.word	0x200009d4
 8010bfc:	20000cb4 	.word	0x20000cb4
 8010c00:	20000c6c 	.word	0x20000c6c

08010c04 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8010c04:	b480      	push	{r7}
 8010c06:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8010c08:	4b04      	ldr	r3, [pc, #16]	; (8010c1c <LoRaMacStart+0x18>)
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8010c10:	2300      	movs	r3, #0
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bc80      	pop	{r7}
 8010c18:	4770      	bx	lr
 8010c1a:	bf00      	nop
 8010c1c:	20000688 	.word	0x20000688

08010c20 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8010c24:	f7fd fa9a 	bl	800e15c <LoRaMacIsBusy>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	f083 0301 	eor.w	r3, r3, #1
 8010c2e:	b2db      	uxtb	r3, r3
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d005      	beq.n	8010c40 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 8010c34:	4b07      	ldr	r3, [pc, #28]	; (8010c54 <LoRaMacStop+0x34>)
 8010c36:	2201      	movs	r2, #1
 8010c38:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	e007      	b.n	8010c50 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8010c40:	4b04      	ldr	r3, [pc, #16]	; (8010c54 <LoRaMacStop+0x34>)
 8010c42:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010c46:	2b01      	cmp	r3, #1
 8010c48:	d101      	bne.n	8010c4e <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	e000      	b.n	8010c50 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 8010c4e:	2301      	movs	r3, #1
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	bd80      	pop	{r7, pc}
 8010c54:	20000688 	.word	0x20000688

08010c58 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8010c5c:	4812      	ldr	r0, [pc, #72]	; (8010ca8 <LoRaMacHalt+0x50>)
 8010c5e:	f009 fcf1 	bl	801a644 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8010c62:	4812      	ldr	r0, [pc, #72]	; (8010cac <LoRaMacHalt+0x54>)
 8010c64:	f009 fcee 	bl	801a644 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8010c68:	4811      	ldr	r0, [pc, #68]	; (8010cb0 <LoRaMacHalt+0x58>)
 8010c6a:	f009 fceb 	bl	801a644 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 8010c6e:	4811      	ldr	r0, [pc, #68]	; (8010cb4 <LoRaMacHalt+0x5c>)
 8010c70:	f009 fce8 	bl	801a644 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8010c74:	f001 f957 	bl	8011f26 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8010c78:	4b0f      	ldr	r3, [pc, #60]	; (8010cb8 <LoRaMacHalt+0x60>)
 8010c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c7c:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8010c7e:	4b0f      	ldr	r3, [pc, #60]	; (8010cbc <LoRaMacHalt+0x64>)
 8010c80:	2200      	movs	r2, #0
 8010c82:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 8010c86:	480e      	ldr	r0, [pc, #56]	; (8010cc0 <LoRaMacHalt+0x68>)
 8010c88:	f7fd fc2e 	bl	800e4e8 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8010c8c:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8010c90:	490b      	ldr	r1, [pc, #44]	; (8010cc0 <LoRaMacHalt+0x68>)
 8010c92:	480c      	ldr	r0, [pc, #48]	; (8010cc4 <LoRaMacHalt+0x6c>)
 8010c94:	f005 fb8b 	bl	80163ae <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8010c98:	4b08      	ldr	r3, [pc, #32]	; (8010cbc <LoRaMacHalt+0x64>)
 8010c9a:	2201      	movs	r2, #1
 8010c9c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8010ca0:	2300      	movs	r3, #0
}
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	bd80      	pop	{r7, pc}
 8010ca6:	bf00      	nop
 8010ca8:	200009f0 	.word	0x200009f0
 8010cac:	20000a08 	.word	0x20000a08
 8010cb0:	20000a20 	.word	0x20000a20
 8010cb4:	20000a80 	.word	0x20000a80
 8010cb8:	0801b9f8 	.word	0x0801b9f8
 8010cbc:	20000688 	.word	0x20000688
 8010cc0:	20000b94 	.word	0x20000b94
 8010cc4:	200012bc 	.word	0x200012bc

08010cc8 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b08a      	sub	sp, #40	; 0x28
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	4603      	mov	r3, r0
 8010cd0:	6039      	str	r1, [r7, #0]
 8010cd2:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010cd4:	4b3e      	ldr	r3, [pc, #248]	; (8010dd0 <LoRaMacQueryTxPossible+0x108>)
 8010cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cd8:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010cda:	4b3d      	ldr	r3, [pc, #244]	; (8010dd0 <LoRaMacQueryTxPossible+0x108>)
 8010cdc:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 8010ce0:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010ce2:	4b3b      	ldr	r3, [pc, #236]	; (8010dd0 <LoRaMacQueryTxPossible+0x108>)
 8010ce4:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 8010ce8:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8010cea:	2300      	movs	r3, #0
 8010cec:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d101      	bne.n	8010cf8 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010cf4:	2303      	movs	r3, #3
 8010cf6:	e066      	b.n	8010dc6 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8010cf8:	4b35      	ldr	r3, [pc, #212]	; (8010dd0 <LoRaMacQueryTxPossible+0x108>)
 8010cfa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8010cfe:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8010d00:	2300      	movs	r3, #0
 8010d02:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010d04:	4b32      	ldr	r3, [pc, #200]	; (8010dd0 <LoRaMacQueryTxPossible+0x108>)
 8010d06:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8010d0a:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010d0c:	4b30      	ldr	r3, [pc, #192]	; (8010dd0 <LoRaMacQueryTxPossible+0x108>)
 8010d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d10:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8010d12:	4b30      	ldr	r3, [pc, #192]	; (8010dd4 <LoRaMacQueryTxPossible+0x10c>)
 8010d14:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8010d18:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8010d1a:	4b2e      	ldr	r3, [pc, #184]	; (8010dd4 <LoRaMacQueryTxPossible+0x10c>)
 8010d1c:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8010d20:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010d22:	4b2b      	ldr	r3, [pc, #172]	; (8010dd0 <LoRaMacQueryTxPossible+0x108>)
 8010d24:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010d28:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010d2c:	4b28      	ldr	r3, [pc, #160]	; (8010dd0 <LoRaMacQueryTxPossible+0x108>)
 8010d2e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010d32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010d36:	4b26      	ldr	r3, [pc, #152]	; (8010dd0 <LoRaMacQueryTxPossible+0x108>)
 8010d38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010d3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8010d40:	4b23      	ldr	r3, [pc, #140]	; (8010dd0 <LoRaMacQueryTxPossible+0x108>)
 8010d42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8010d4a:	f107 0310 	add.w	r3, r7, #16
 8010d4e:	f107 020e 	add.w	r2, r7, #14
 8010d52:	f107 010f 	add.w	r1, r7, #15
 8010d56:	f107 0014 	add.w	r0, r7, #20
 8010d5a:	f001 f84f 	bl	8011dfc <LoRaMacAdrCalcNext>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d62:	4618      	mov	r0, r3
 8010d64:	f7fd feb8 	bl	800ead8 <GetMaxAppPayloadWithoutFOptsLength>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	461a      	mov	r2, r3
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010d70:	f107 0308 	add.w	r3, r7, #8
 8010d74:	4618      	mov	r0, r3
 8010d76:	f001 fb19 	bl	80123ac <LoRaMacCommandsGetSizeSerializedCmds>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d001      	beq.n	8010d84 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010d80:	2313      	movs	r3, #19
 8010d82:	e020      	b.n	8010dc6 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8010d84:	68bb      	ldr	r3, [r7, #8]
 8010d86:	2b0f      	cmp	r3, #15
 8010d88:	d819      	bhi.n	8010dbe <LoRaMacQueryTxPossible+0xf6>
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	785b      	ldrb	r3, [r3, #1]
 8010d8e:	461a      	mov	r2, r3
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d313      	bcc.n	8010dbe <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	785a      	ldrb	r2, [r3, #1]
 8010d9a:	68bb      	ldr	r3, [r7, #8]
 8010d9c:	b2db      	uxtb	r3, r3
 8010d9e:	1ad3      	subs	r3, r2, r3
 8010da0:	b2da      	uxtb	r2, r3
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8010da6:	683b      	ldr	r3, [r7, #0]
 8010da8:	785b      	ldrb	r3, [r3, #1]
 8010daa:	4619      	mov	r1, r3
 8010dac:	79fa      	ldrb	r2, [r7, #7]
 8010dae:	68bb      	ldr	r3, [r7, #8]
 8010db0:	4413      	add	r3, r2
 8010db2:	4299      	cmp	r1, r3
 8010db4:	d301      	bcc.n	8010dba <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8010db6:	2300      	movs	r3, #0
 8010db8:	e005      	b.n	8010dc6 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8010dba:	2308      	movs	r3, #8
 8010dbc:	e003      	b.n	8010dc6 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8010dc4:	2308      	movs	r3, #8
    }
}
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	3728      	adds	r7, #40	; 0x28
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	bd80      	pop	{r7, pc}
 8010dce:	bf00      	nop
 8010dd0:	20000b94 	.word	0x20000b94
 8010dd4:	20000688 	.word	0x20000688

08010dd8 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8010dd8:	b590      	push	{r4, r7, lr}
 8010dda:	b087      	sub	sp, #28
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010de0:	2300      	movs	r3, #0
 8010de2:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d101      	bne.n	8010dee <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010dea:	2303      	movs	r3, #3
 8010dec:	e171      	b.n	80110d2 <LoRaMacMibGetRequestConfirm+0x2fa>
    }

    switch( mibGet->Type )
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	781b      	ldrb	r3, [r3, #0]
 8010df2:	2b37      	cmp	r3, #55	; 0x37
 8010df4:	f200 8166 	bhi.w	80110c4 <LoRaMacMibGetRequestConfirm+0x2ec>
 8010df8:	a201      	add	r2, pc, #4	; (adr r2, 8010e00 <LoRaMacMibGetRequestConfirm+0x28>)
 8010dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dfe:	bf00      	nop
 8010e00:	08010ee1 	.word	0x08010ee1
 8010e04:	08010eed 	.word	0x08010eed
 8010e08:	08010ef9 	.word	0x08010ef9
 8010e0c:	08010f05 	.word	0x08010f05
 8010e10:	08010f11 	.word	0x08010f11
 8010e14:	08010f1d 	.word	0x08010f1d
 8010e18:	08010f29 	.word	0x08010f29
 8010e1c:	080110c5 	.word	0x080110c5
 8010e20:	080110c5 	.word	0x080110c5
 8010e24:	080110c5 	.word	0x080110c5
 8010e28:	080110c5 	.word	0x080110c5
 8010e2c:	080110c5 	.word	0x080110c5
 8010e30:	080110c5 	.word	0x080110c5
 8010e34:	080110c5 	.word	0x080110c5
 8010e38:	080110c5 	.word	0x080110c5
 8010e3c:	08010f35 	.word	0x08010f35
 8010e40:	08010f41 	.word	0x08010f41
 8010e44:	08010f4d 	.word	0x08010f4d
 8010e48:	08010f6f 	.word	0x08010f6f
 8010e4c:	08010f81 	.word	0x08010f81
 8010e50:	08010f93 	.word	0x08010f93
 8010e54:	08010fa5 	.word	0x08010fa5
 8010e58:	08010fd9 	.word	0x08010fd9
 8010e5c:	08010fb7 	.word	0x08010fb7
 8010e60:	08010ffb 	.word	0x08010ffb
 8010e64:	08011007 	.word	0x08011007
 8010e68:	08011011 	.word	0x08011011
 8010e6c:	0801101b 	.word	0x0801101b
 8010e70:	08011025 	.word	0x08011025
 8010e74:	0801102f 	.word	0x0801102f
 8010e78:	08011039 	.word	0x08011039
 8010e7c:	08011045 	.word	0x08011045
 8010e80:	0801105d 	.word	0x0801105d
 8010e84:	08011051 	.word	0x08011051
 8010e88:	08011069 	.word	0x08011069
 8010e8c:	08011073 	.word	0x08011073
 8010e90:	0801107f 	.word	0x0801107f
 8010e94:	08011099 	.word	0x08011099
 8010e98:	08011089 	.word	0x08011089
 8010e9c:	08011091 	.word	0x08011091
 8010ea0:	080110c5 	.word	0x080110c5
 8010ea4:	080110a5 	.word	0x080110a5
 8010ea8:	080110c5 	.word	0x080110c5
 8010eac:	080110c5 	.word	0x080110c5
 8010eb0:	080110c5 	.word	0x080110c5
 8010eb4:	080110c5 	.word	0x080110c5
 8010eb8:	080110c5 	.word	0x080110c5
 8010ebc:	080110c5 	.word	0x080110c5
 8010ec0:	080110c5 	.word	0x080110c5
 8010ec4:	080110c5 	.word	0x080110c5
 8010ec8:	080110c5 	.word	0x080110c5
 8010ecc:	080110c5 	.word	0x080110c5
 8010ed0:	080110c5 	.word	0x080110c5
 8010ed4:	080110c5 	.word	0x080110c5
 8010ed8:	080110c5 	.word	0x080110c5
 8010edc:	080110b9 	.word	0x080110b9
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8010ee0:	4b7e      	ldr	r3, [pc, #504]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010ee2:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	711a      	strb	r2, [r3, #4]
            break;
 8010eea:	e0f1      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010eec:	4b7b      	ldr	r3, [pc, #492]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010eee:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	711a      	strb	r2, [r3, #4]
            break;
 8010ef6:	e0eb      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8010ef8:	f7fa ff30 	bl	800bd5c <SecureElementGetDevEui>
 8010efc:	4602      	mov	r2, r0
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	605a      	str	r2, [r3, #4]
            break;
 8010f02:	e0e5      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8010f04:	f7fa ff4c 	bl	800bda0 <SecureElementGetJoinEui>
 8010f08:	4602      	mov	r2, r0
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	605a      	str	r2, [r3, #4]
            break;
 8010f0e:	e0df      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8010f10:	4b72      	ldr	r3, [pc, #456]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010f12:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	711a      	strb	r2, [r3, #4]
            break;
 8010f1a:	e0d9      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8010f1c:	4b6f      	ldr	r3, [pc, #444]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010f1e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	605a      	str	r2, [r3, #4]
            break;
 8010f26:	e0d3      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8010f28:	4b6c      	ldr	r3, [pc, #432]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010f2a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	605a      	str	r2, [r3, #4]
            break;
 8010f32:	e0cd      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8010f34:	4b69      	ldr	r3, [pc, #420]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010f36:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	711a      	strb	r2, [r3, #4]
            break;
 8010f3e:	e0c7      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010f40:	4b66      	ldr	r3, [pc, #408]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010f42:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	711a      	strb	r2, [r3, #4]
            break;
 8010f4a:	e0c1      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8010f4c:	231d      	movs	r3, #29
 8010f4e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f50:	4b62      	ldr	r3, [pc, #392]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010f52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f56:	f107 0210 	add.w	r2, r7, #16
 8010f5a:	4611      	mov	r1, r2
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f002 ff13 	bl	8013d88 <RegionGetPhyParam>
 8010f62:	4603      	mov	r3, r0
 8010f64:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8010f66:	68fa      	ldr	r2, [r7, #12]
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	605a      	str	r2, [r3, #4]
            break;
 8010f6c:	e0b0      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	4a5a      	ldr	r2, [pc, #360]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010f72:	3304      	adds	r3, #4
 8010f74:	3264      	adds	r2, #100	; 0x64
 8010f76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f7a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010f7e:	e0a7      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	4a56      	ldr	r2, [pc, #344]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010f84:	3304      	adds	r3, #4
 8010f86:	32a8      	adds	r2, #168	; 0xa8
 8010f88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f8c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010f90:	e09e      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	4a51      	ldr	r2, [pc, #324]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010f96:	3304      	adds	r3, #4
 8010f98:	326c      	adds	r2, #108	; 0x6c
 8010f9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f9e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010fa2:	e095      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	4a4d      	ldr	r2, [pc, #308]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010fa8:	3304      	adds	r3, #4
 8010faa:	32b0      	adds	r2, #176	; 0xb0
 8010fac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010fb0:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010fb4:	e08c      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8010fb6:	231b      	movs	r3, #27
 8010fb8:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010fba:	4b48      	ldr	r3, [pc, #288]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010fbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010fc0:	f107 0210 	add.w	r2, r7, #16
 8010fc4:	4611      	mov	r1, r2
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f002 fede 	bl	8013d88 <RegionGetPhyParam>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8010fd0:	68fa      	ldr	r2, [r7, #12]
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	605a      	str	r2, [r3, #4]
            break;
 8010fd6:	e07b      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8010fd8:	231a      	movs	r3, #26
 8010fda:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010fdc:	4b3f      	ldr	r3, [pc, #252]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010fe2:	f107 0210 	add.w	r2, r7, #16
 8010fe6:	4611      	mov	r1, r2
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f002 fecd 	bl	8013d88 <RegionGetPhyParam>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8010ff2:	68fa      	ldr	r2, [r7, #12]
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	605a      	str	r2, [r3, #4]
            break;
 8010ff8:	e06a      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8010ffa:	4b38      	ldr	r3, [pc, #224]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 8010ffc:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	711a      	strb	r2, [r3, #4]
            break;
 8011004:	e064      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8011006:	4b35      	ldr	r3, [pc, #212]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 8011008:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	605a      	str	r2, [r3, #4]
            break;
 801100e:	e05f      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8011010:	4b32      	ldr	r3, [pc, #200]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 8011012:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	605a      	str	r2, [r3, #4]
            break;
 8011018:	e05a      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 801101a:	4b30      	ldr	r3, [pc, #192]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 801101c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	605a      	str	r2, [r3, #4]
            break;
 8011022:	e055      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8011024:	4b2d      	ldr	r3, [pc, #180]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 8011026:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	605a      	str	r2, [r3, #4]
            break;
 801102c:	e050      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 801102e:	4b2b      	ldr	r3, [pc, #172]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 8011030:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	605a      	str	r2, [r3, #4]
            break;
 8011036:	e04b      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011038:	4b28      	ldr	r3, [pc, #160]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 801103a:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	711a      	strb	r2, [r3, #4]
            break;
 8011042:	e045      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8011044:	4b25      	ldr	r3, [pc, #148]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 8011046:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	711a      	strb	r2, [r3, #4]
            break;
 801104e:	e03f      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011050:	4b22      	ldr	r3, [pc, #136]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 8011052:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	711a      	strb	r2, [r3, #4]
            break;
 801105a:	e039      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 801105c:	4b1f      	ldr	r3, [pc, #124]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 801105e:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	711a      	strb	r2, [r3, #4]
            break;
 8011066:	e033      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8011068:	4b1c      	ldr	r3, [pc, #112]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 801106a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	605a      	str	r2, [r3, #4]
            break;
 8011070:	e02e      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8011072:	4b1a      	ldr	r3, [pc, #104]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 8011074:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	711a      	strb	r2, [r3, #4]
            break;
 801107c:	e028      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801107e:	4b17      	ldr	r3, [pc, #92]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 8011080:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	605a      	str	r2, [r3, #4]
            break;
 8011086:	e023      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	4a14      	ldr	r2, [pc, #80]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 801108c:	605a      	str	r2, [r3, #4]
            break;
 801108e:	e01f      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	4a13      	ldr	r2, [pc, #76]	; (80110e0 <LoRaMacMibGetRequestConfirm+0x308>)
 8011094:	605a      	str	r2, [r3, #4]
            break;
 8011096:	e01b      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011098:	4b10      	ldr	r3, [pc, #64]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 801109a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	605a      	str	r2, [r3, #4]
            break;
 80110a2:	e015      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	4a0d      	ldr	r2, [pc, #52]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 80110a8:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 80110ac:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80110ae:	687c      	ldr	r4, [r7, #4]
 80110b0:	f002 fff2 	bl	8014098 <RegionGetVersion>
 80110b4:	60a0      	str	r0, [r4, #8]
            break;
 80110b6:	e00b      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80110b8:	4b08      	ldr	r3, [pc, #32]	; (80110dc <LoRaMacMibGetRequestConfirm+0x304>)
 80110ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	605a      	str	r2, [r3, #4]
            break;
 80110c2:	e005      	b.n	80110d0 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f000 ff45 	bl	8011f54 <LoRaMacClassBMibGetRequestConfirm>
 80110ca:	4603      	mov	r3, r0
 80110cc:	75fb      	strb	r3, [r7, #23]
            break;
 80110ce:	bf00      	nop
        }
    }
    return status;
 80110d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	371c      	adds	r7, #28
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd90      	pop	{r4, r7, pc}
 80110da:	bf00      	nop
 80110dc:	20000b94 	.word	0x20000b94
 80110e0:	200012bc 	.word	0x200012bc

080110e4 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b086      	sub	sp, #24
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80110ec:	2300      	movs	r3, #0
 80110ee:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d101      	bne.n	80110fa <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80110f6:	2303      	movs	r3, #3
 80110f8:	e348      	b.n	801178c <LoRaMacMibSetRequestConfirm+0x6a8>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80110fa:	4bb7      	ldr	r3, [pc, #732]	; (80113d8 <LoRaMacMibSetRequestConfirm+0x2f4>)
 80110fc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011100:	f003 0302 	and.w	r3, r3, #2
 8011104:	2b00      	cmp	r3, #0
 8011106:	d001      	beq.n	801110c <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011108:	2301      	movs	r3, #1
 801110a:	e33f      	b.n	801178c <LoRaMacMibSetRequestConfirm+0x6a8>
    }

    switch( mibSet->Type )
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	781b      	ldrb	r3, [r3, #0]
 8011110:	2b37      	cmp	r3, #55	; 0x37
 8011112:	f200 8319 	bhi.w	8011748 <LoRaMacMibSetRequestConfirm+0x664>
 8011116:	a201      	add	r2, pc, #4	; (adr r2, 801111c <LoRaMacMibSetRequestConfirm+0x38>)
 8011118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801111c:	080111fd 	.word	0x080111fd
 8011120:	0801120d 	.word	0x0801120d
 8011124:	08011227 	.word	0x08011227
 8011128:	0801123f 	.word	0x0801123f
 801112c:	08011257 	.word	0x08011257
 8011130:	08011263 	.word	0x08011263
 8011134:	0801126f 	.word	0x0801126f
 8011138:	0801127b 	.word	0x0801127b
 801113c:	080112a1 	.word	0x080112a1
 8011140:	080112c7 	.word	0x080112c7
 8011144:	080112ed 	.word	0x080112ed
 8011148:	08011313 	.word	0x08011313
 801114c:	08011339 	.word	0x08011339
 8011150:	0801135f 	.word	0x0801135f
 8011154:	08011385 	.word	0x08011385
 8011158:	080113ab 	.word	0x080113ab
 801115c:	080113cb 	.word	0x080113cb
 8011160:	08011749 	.word	0x08011749
 8011164:	080113e5 	.word	0x080113e5
 8011168:	08011455 	.word	0x08011455
 801116c:	08011495 	.word	0x08011495
 8011170:	080114f7 	.word	0x080114f7
 8011174:	08011567 	.word	0x08011567
 8011178:	08011537 	.word	0x08011537
 801117c:	08011597 	.word	0x08011597
 8011180:	080115b9 	.word	0x080115b9
 8011184:	080115c3 	.word	0x080115c3
 8011188:	080115cd 	.word	0x080115cd
 801118c:	080115d7 	.word	0x080115d7
 8011190:	080115e1 	.word	0x080115e1
 8011194:	080115eb 	.word	0x080115eb
 8011198:	0801161d 	.word	0x0801161d
 801119c:	08011689 	.word	0x08011689
 80111a0:	08011657 	.word	0x08011657
 80111a4:	080116c5 	.word	0x080116c5
 80111a8:	080116db 	.word	0x080116db
 80111ac:	080116f3 	.word	0x080116f3
 80111b0:	080116fd 	.word	0x080116fd
 80111b4:	08011709 	.word	0x08011709
 80111b8:	08011749 	.word	0x08011749
 80111bc:	08011713 	.word	0x08011713
 80111c0:	08011749 	.word	0x08011749
 80111c4:	08011749 	.word	0x08011749
 80111c8:	08011749 	.word	0x08011749
 80111cc:	08011749 	.word	0x08011749
 80111d0:	08011749 	.word	0x08011749
 80111d4:	08011749 	.word	0x08011749
 80111d8:	08011749 	.word	0x08011749
 80111dc:	08011749 	.word	0x08011749
 80111e0:	08011749 	.word	0x08011749
 80111e4:	08011749 	.word	0x08011749
 80111e8:	08011749 	.word	0x08011749
 80111ec:	08011749 	.word	0x08011749
 80111f0:	08011749 	.word	0x08011749
 80111f4:	08011749 	.word	0x08011749
 80111f8:	0801173d 	.word	0x0801173d
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	791b      	ldrb	r3, [r3, #4]
 8011200:	4618      	mov	r0, r3
 8011202:	f7fd fb99 	bl	800e938 <SwitchClass>
 8011206:	4603      	mov	r3, r0
 8011208:	75fb      	strb	r3, [r7, #23]
            break;
 801120a:	e2be      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	791b      	ldrb	r3, [r3, #4]
 8011210:	2b02      	cmp	r3, #2
 8011212:	d005      	beq.n	8011220 <LoRaMacMibSetRequestConfirm+0x13c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	791a      	ldrb	r2, [r3, #4]
 8011218:	4b70      	ldr	r3, [pc, #448]	; (80113dc <LoRaMacMibSetRequestConfirm+0x2f8>)
 801121a:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801121e:	e2b4      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011220:	2303      	movs	r3, #3
 8011222:	75fb      	strb	r3, [r7, #23]
            break;
 8011224:	e2b1      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	685b      	ldr	r3, [r3, #4]
 801122a:	4618      	mov	r0, r3
 801122c:	f7fa fd7e 	bl	800bd2c <SecureElementSetDevEui>
 8011230:	4603      	mov	r3, r0
 8011232:	2b00      	cmp	r3, #0
 8011234:	f000 828e 	beq.w	8011754 <LoRaMacMibSetRequestConfirm+0x670>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011238:	2303      	movs	r3, #3
 801123a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801123c:	e28a      	b.n	8011754 <LoRaMacMibSetRequestConfirm+0x670>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	685b      	ldr	r3, [r3, #4]
 8011242:	4618      	mov	r0, r3
 8011244:	f7fa fd94 	bl	800bd70 <SecureElementSetJoinEui>
 8011248:	4603      	mov	r3, r0
 801124a:	2b00      	cmp	r3, #0
 801124c:	f000 8284 	beq.w	8011758 <LoRaMacMibSetRequestConfirm+0x674>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011250:	2303      	movs	r3, #3
 8011252:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011254:	e280      	b.n	8011758 <LoRaMacMibSetRequestConfirm+0x674>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	791a      	ldrb	r2, [r3, #4]
 801125a:	4b60      	ldr	r3, [pc, #384]	; (80113dc <LoRaMacMibSetRequestConfirm+0x2f8>)
 801125c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            break;
 8011260:	e293      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	685b      	ldr	r3, [r3, #4]
 8011266:	4a5d      	ldr	r2, [pc, #372]	; (80113dc <LoRaMacMibSetRequestConfirm+0x2f8>)
 8011268:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            break;
 801126c:	e28d      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	685b      	ldr	r3, [r3, #4]
 8011272:	4a5a      	ldr	r2, [pc, #360]	; (80113dc <LoRaMacMibSetRequestConfirm+0x2f8>)
 8011274:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
            break;
 8011278:	e287      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	685b      	ldr	r3, [r3, #4]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d00b      	beq.n	801129a <LoRaMacMibSetRequestConfirm+0x1b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	685b      	ldr	r3, [r3, #4]
 8011286:	4619      	mov	r1, r3
 8011288:	2000      	movs	r0, #0
 801128a:	f001 ff8d 	bl	80131a8 <LoRaMacCryptoSetKey>
 801128e:	4603      	mov	r3, r0
 8011290:	2b00      	cmp	r3, #0
 8011292:	f000 8263 	beq.w	801175c <LoRaMacMibSetRequestConfirm+0x678>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011296:	2311      	movs	r3, #17
 8011298:	e278      	b.n	801178c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801129a:	2303      	movs	r3, #3
 801129c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801129e:	e25d      	b.n	801175c <LoRaMacMibSetRequestConfirm+0x678>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	685b      	ldr	r3, [r3, #4]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d00b      	beq.n	80112c0 <LoRaMacMibSetRequestConfirm+0x1dc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	685b      	ldr	r3, [r3, #4]
 80112ac:	4619      	mov	r1, r3
 80112ae:	2001      	movs	r0, #1
 80112b0:	f001 ff7a 	bl	80131a8 <LoRaMacCryptoSetKey>
 80112b4:	4603      	mov	r3, r0
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	f000 8252 	beq.w	8011760 <LoRaMacMibSetRequestConfirm+0x67c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80112bc:	2311      	movs	r3, #17
 80112be:	e265      	b.n	801178c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80112c0:	2303      	movs	r3, #3
 80112c2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80112c4:	e24c      	b.n	8011760 <LoRaMacMibSetRequestConfirm+0x67c>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	685b      	ldr	r3, [r3, #4]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d00b      	beq.n	80112e6 <LoRaMacMibSetRequestConfirm+0x202>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	685b      	ldr	r3, [r3, #4]
 80112d2:	4619      	mov	r1, r3
 80112d4:	2002      	movs	r0, #2
 80112d6:	f001 ff67 	bl	80131a8 <LoRaMacCryptoSetKey>
 80112da:	4603      	mov	r3, r0
 80112dc:	2b00      	cmp	r3, #0
 80112de:	f000 8241 	beq.w	8011764 <LoRaMacMibSetRequestConfirm+0x680>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80112e2:	2311      	movs	r3, #17
 80112e4:	e252      	b.n	801178c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80112e6:	2303      	movs	r3, #3
 80112e8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80112ea:	e23b      	b.n	8011764 <LoRaMacMibSetRequestConfirm+0x680>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	685b      	ldr	r3, [r3, #4]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d00b      	beq.n	801130c <LoRaMacMibSetRequestConfirm+0x228>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	685b      	ldr	r3, [r3, #4]
 80112f8:	4619      	mov	r1, r3
 80112fa:	2003      	movs	r0, #3
 80112fc:	f001 ff54 	bl	80131a8 <LoRaMacCryptoSetKey>
 8011300:	4603      	mov	r3, r0
 8011302:	2b00      	cmp	r3, #0
 8011304:	f000 8230 	beq.w	8011768 <LoRaMacMibSetRequestConfirm+0x684>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011308:	2311      	movs	r3, #17
 801130a:	e23f      	b.n	801178c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801130c:	2303      	movs	r3, #3
 801130e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011310:	e22a      	b.n	8011768 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	685b      	ldr	r3, [r3, #4]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d00b      	beq.n	8011332 <LoRaMacMibSetRequestConfirm+0x24e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	685b      	ldr	r3, [r3, #4]
 801131e:	4619      	mov	r1, r3
 8011320:	207f      	movs	r0, #127	; 0x7f
 8011322:	f001 ff41 	bl	80131a8 <LoRaMacCryptoSetKey>
 8011326:	4603      	mov	r3, r0
 8011328:	2b00      	cmp	r3, #0
 801132a:	f000 821f 	beq.w	801176c <LoRaMacMibSetRequestConfirm+0x688>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801132e:	2311      	movs	r3, #17
 8011330:	e22c      	b.n	801178c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011332:	2303      	movs	r3, #3
 8011334:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011336:	e219      	b.n	801176c <LoRaMacMibSetRequestConfirm+0x688>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	685b      	ldr	r3, [r3, #4]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d00b      	beq.n	8011358 <LoRaMacMibSetRequestConfirm+0x274>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	685b      	ldr	r3, [r3, #4]
 8011344:	4619      	mov	r1, r3
 8011346:	2080      	movs	r0, #128	; 0x80
 8011348:	f001 ff2e 	bl	80131a8 <LoRaMacCryptoSetKey>
 801134c:	4603      	mov	r3, r0
 801134e:	2b00      	cmp	r3, #0
 8011350:	f000 820e 	beq.w	8011770 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011354:	2311      	movs	r3, #17
 8011356:	e219      	b.n	801178c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011358:	2303      	movs	r3, #3
 801135a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801135c:	e208      	b.n	8011770 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	685b      	ldr	r3, [r3, #4]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d00b      	beq.n	801137e <LoRaMacMibSetRequestConfirm+0x29a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	685b      	ldr	r3, [r3, #4]
 801136a:	4619      	mov	r1, r3
 801136c:	2081      	movs	r0, #129	; 0x81
 801136e:	f001 ff1b 	bl	80131a8 <LoRaMacCryptoSetKey>
 8011372:	4603      	mov	r3, r0
 8011374:	2b00      	cmp	r3, #0
 8011376:	f000 81fd 	beq.w	8011774 <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801137a:	2311      	movs	r3, #17
 801137c:	e206      	b.n	801178c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801137e:	2303      	movs	r3, #3
 8011380:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011382:	e1f7      	b.n	8011774 <LoRaMacMibSetRequestConfirm+0x690>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	685b      	ldr	r3, [r3, #4]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d00b      	beq.n	80113a4 <LoRaMacMibSetRequestConfirm+0x2c0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	685b      	ldr	r3, [r3, #4]
 8011390:	4619      	mov	r1, r3
 8011392:	2082      	movs	r0, #130	; 0x82
 8011394:	f001 ff08 	bl	80131a8 <LoRaMacCryptoSetKey>
 8011398:	4603      	mov	r3, r0
 801139a:	2b00      	cmp	r3, #0
 801139c:	f000 81ec 	beq.w	8011778 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80113a0:	2311      	movs	r3, #17
 80113a2:	e1f3      	b.n	801178c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80113a4:	2303      	movs	r3, #3
 80113a6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80113a8:	e1e6      	b.n	8011778 <LoRaMacMibSetRequestConfirm+0x694>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	791a      	ldrb	r2, [r3, #4]
 80113ae:	4b0b      	ldr	r3, [pc, #44]	; (80113dc <LoRaMacMibSetRequestConfirm+0x2f8>)
 80113b0:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80113b4:	4b0a      	ldr	r3, [pc, #40]	; (80113e0 <LoRaMacMibSetRequestConfirm+0x2fc>)
 80113b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113b8:	4a08      	ldr	r2, [pc, #32]	; (80113dc <LoRaMacMibSetRequestConfirm+0x2f8>)
 80113ba:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 80113be:	4610      	mov	r0, r2
 80113c0:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 80113c2:	4b07      	ldr	r3, [pc, #28]	; (80113e0 <LoRaMacMibSetRequestConfirm+0x2fc>)
 80113c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113c6:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 80113c8:	e1df      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	791a      	ldrb	r2, [r3, #4]
 80113ce:	4b03      	ldr	r3, [pc, #12]	; (80113dc <LoRaMacMibSetRequestConfirm+0x2f8>)
 80113d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 80113d4:	e1d9      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
 80113d6:	bf00      	nop
 80113d8:	20000688 	.word	0x20000688
 80113dc:	20000b94 	.word	0x20000b94
 80113e0:	0801b9f8 	.word	0x0801b9f8
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	7a1b      	ldrb	r3, [r3, #8]
 80113e8:	b25b      	sxtb	r3, r3
 80113ea:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80113ec:	4bb3      	ldr	r3, [pc, #716]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 80113ee:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80113f2:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80113f4:	4bb1      	ldr	r3, [pc, #708]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 80113f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80113fa:	f107 0108 	add.w	r1, r7, #8
 80113fe:	2207      	movs	r2, #7
 8011400:	4618      	mov	r0, r3
 8011402:	f002 fcfc 	bl	8013dfe <RegionVerify>
 8011406:	4603      	mov	r3, r0
 8011408:	f083 0301 	eor.w	r3, r3, #1
 801140c:	b2db      	uxtb	r3, r3
 801140e:	2b00      	cmp	r3, #0
 8011410:	d002      	beq.n	8011418 <LoRaMacMibSetRequestConfirm+0x334>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011412:	2303      	movs	r3, #3
 8011414:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8011416:	e1b8      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	685b      	ldr	r3, [r3, #4]
 801141c:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 801141e:	4ba7      	ldr	r3, [pc, #668]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011420:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011424:	f107 0108 	add.w	r1, r7, #8
 8011428:	2200      	movs	r2, #0
 801142a:	4618      	mov	r0, r3
 801142c:	f002 fce7 	bl	8013dfe <RegionVerify>
 8011430:	4603      	mov	r3, r0
 8011432:	f083 0301 	eor.w	r3, r3, #1
 8011436:	b2db      	uxtb	r3, r3
 8011438:	2b00      	cmp	r3, #0
 801143a:	d002      	beq.n	8011442 <LoRaMacMibSetRequestConfirm+0x35e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 801143c:	2303      	movs	r3, #3
 801143e:	75fb      	strb	r3, [r7, #23]
            break;
 8011440:	e1a3      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8011442:	4b9e      	ldr	r3, [pc, #632]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011444:	687a      	ldr	r2, [r7, #4]
 8011446:	3364      	adds	r3, #100	; 0x64
 8011448:	3204      	adds	r2, #4
 801144a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801144e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011452:	e19a      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	7a1b      	ldrb	r3, [r3, #8]
 8011458:	b25b      	sxtb	r3, r3
 801145a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801145c:	4b97      	ldr	r3, [pc, #604]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 801145e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011462:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011464:	4b95      	ldr	r3, [pc, #596]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011466:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801146a:	f107 0108 	add.w	r1, r7, #8
 801146e:	2207      	movs	r2, #7
 8011470:	4618      	mov	r0, r3
 8011472:	f002 fcc4 	bl	8013dfe <RegionVerify>
 8011476:	4603      	mov	r3, r0
 8011478:	2b00      	cmp	r3, #0
 801147a:	d008      	beq.n	801148e <LoRaMacMibSetRequestConfirm+0x3aa>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 801147c:	4b8f      	ldr	r3, [pc, #572]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 801147e:	687a      	ldr	r2, [r7, #4]
 8011480:	33a8      	adds	r3, #168	; 0xa8
 8011482:	3204      	adds	r2, #4
 8011484:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011488:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801148c:	e17d      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801148e:	2303      	movs	r3, #3
 8011490:	75fb      	strb	r3, [r7, #23]
            break;
 8011492:	e17a      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	7a1b      	ldrb	r3, [r3, #8]
 8011498:	b25b      	sxtb	r3, r3
 801149a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801149c:	4b87      	ldr	r3, [pc, #540]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 801149e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80114a2:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80114a4:	4b85      	ldr	r3, [pc, #532]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 80114a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80114aa:	f107 0108 	add.w	r1, r7, #8
 80114ae:	2207      	movs	r2, #7
 80114b0:	4618      	mov	r0, r3
 80114b2:	f002 fca4 	bl	8013dfe <RegionVerify>
 80114b6:	4603      	mov	r3, r0
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d019      	beq.n	80114f0 <LoRaMacMibSetRequestConfirm+0x40c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80114bc:	4b7f      	ldr	r3, [pc, #508]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 80114be:	687a      	ldr	r2, [r7, #4]
 80114c0:	336c      	adds	r3, #108	; 0x6c
 80114c2:	3204      	adds	r2, #4
 80114c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80114c8:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80114cc:	4b7b      	ldr	r3, [pc, #492]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 80114ce:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80114d2:	2b02      	cmp	r3, #2
 80114d4:	f040 8152 	bne.w	801177c <LoRaMacMibSetRequestConfirm+0x698>
 80114d8:	4b78      	ldr	r3, [pc, #480]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 80114da:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80114de:	2b00      	cmp	r3, #0
 80114e0:	f000 814c 	beq.w	801177c <LoRaMacMibSetRequestConfirm+0x698>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80114e4:	4b76      	ldr	r3, [pc, #472]	; (80116c0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80114e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114e8:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80114ea:	f7fe fc67 	bl	800fdbc <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80114ee:	e145      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x698>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80114f0:	2303      	movs	r3, #3
 80114f2:	75fb      	strb	r3, [r7, #23]
            break;
 80114f4:	e142      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	7a1b      	ldrb	r3, [r3, #8]
 80114fa:	b25b      	sxtb	r3, r3
 80114fc:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80114fe:	4b6f      	ldr	r3, [pc, #444]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011500:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011504:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011506:	4b6d      	ldr	r3, [pc, #436]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011508:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801150c:	f107 0108 	add.w	r1, r7, #8
 8011510:	2207      	movs	r2, #7
 8011512:	4618      	mov	r0, r3
 8011514:	f002 fc73 	bl	8013dfe <RegionVerify>
 8011518:	4603      	mov	r3, r0
 801151a:	2b00      	cmp	r3, #0
 801151c:	d008      	beq.n	8011530 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 801151e:	4b67      	ldr	r3, [pc, #412]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011520:	687a      	ldr	r2, [r7, #4]
 8011522:	33b0      	adds	r3, #176	; 0xb0
 8011524:	3204      	adds	r2, #4
 8011526:	e892 0003 	ldmia.w	r2, {r0, r1}
 801152a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801152e:	e12c      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011530:	2303      	movs	r3, #3
 8011532:	75fb      	strb	r3, [r7, #23]
            break;
 8011534:	e129      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	685b      	ldr	r3, [r3, #4]
 801153a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 801153c:	2301      	movs	r3, #1
 801153e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011540:	4b5e      	ldr	r3, [pc, #376]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011542:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011546:	f107 020c 	add.w	r2, r7, #12
 801154a:	4611      	mov	r1, r2
 801154c:	4618      	mov	r0, r3
 801154e:	f002 fc7f 	bl	8013e50 <RegionChanMaskSet>
 8011552:	4603      	mov	r3, r0
 8011554:	f083 0301 	eor.w	r3, r3, #1
 8011558:	b2db      	uxtb	r3, r3
 801155a:	2b00      	cmp	r3, #0
 801155c:	f000 8110 	beq.w	8011780 <LoRaMacMibSetRequestConfirm+0x69c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011560:	2303      	movs	r3, #3
 8011562:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011564:	e10c      	b.n	8011780 <LoRaMacMibSetRequestConfirm+0x69c>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	685b      	ldr	r3, [r3, #4]
 801156a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 801156c:	2300      	movs	r3, #0
 801156e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011570:	4b52      	ldr	r3, [pc, #328]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011572:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011576:	f107 020c 	add.w	r2, r7, #12
 801157a:	4611      	mov	r1, r2
 801157c:	4618      	mov	r0, r3
 801157e:	f002 fc67 	bl	8013e50 <RegionChanMaskSet>
 8011582:	4603      	mov	r3, r0
 8011584:	f083 0301 	eor.w	r3, r3, #1
 8011588:	b2db      	uxtb	r3, r3
 801158a:	2b00      	cmp	r3, #0
 801158c:	f000 80fa 	beq.w	8011784 <LoRaMacMibSetRequestConfirm+0x6a0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011590:	2303      	movs	r3, #3
 8011592:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011594:	e0f6      	b.n	8011784 <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	791b      	ldrb	r3, [r3, #4]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d009      	beq.n	80115b2 <LoRaMacMibSetRequestConfirm+0x4ce>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80115a2:	2b0f      	cmp	r3, #15
 80115a4:	d805      	bhi.n	80115b2 <LoRaMacMibSetRequestConfirm+0x4ce>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	791a      	ldrb	r2, [r3, #4]
 80115aa:	4b44      	ldr	r3, [pc, #272]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 80115ac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80115b0:	e0eb      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80115b2:	2303      	movs	r3, #3
 80115b4:	75fb      	strb	r3, [r7, #23]
            break;
 80115b6:	e0e8      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	4a3f      	ldr	r2, [pc, #252]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 80115be:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 80115c0:	e0e3      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	685b      	ldr	r3, [r3, #4]
 80115c6:	4a3d      	ldr	r2, [pc, #244]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 80115c8:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 80115ca:	e0de      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	685b      	ldr	r3, [r3, #4]
 80115d0:	4a3a      	ldr	r2, [pc, #232]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 80115d2:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 80115d4:	e0d9      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	685b      	ldr	r3, [r3, #4]
 80115da:	4a38      	ldr	r2, [pc, #224]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 80115dc:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 80115de:	e0d4      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	685b      	ldr	r3, [r3, #4]
 80115e4:	4a35      	ldr	r2, [pc, #212]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 80115e6:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 80115e8:	e0cf      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80115f0:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80115f2:	4b32      	ldr	r3, [pc, #200]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 80115f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80115f8:	f107 0108 	add.w	r1, r7, #8
 80115fc:	2206      	movs	r2, #6
 80115fe:	4618      	mov	r0, r3
 8011600:	f002 fbfd 	bl	8013dfe <RegionVerify>
 8011604:	4603      	mov	r3, r0
 8011606:	2b00      	cmp	r3, #0
 8011608:	d005      	beq.n	8011616 <LoRaMacMibSetRequestConfirm+0x532>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 801160a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801160e:	4b2b      	ldr	r3, [pc, #172]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011610:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011614:	e0b9      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011616:	2303      	movs	r3, #3
 8011618:	75fb      	strb	r3, [r7, #23]
            break;
 801161a:	e0b6      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011622:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011624:	4b25      	ldr	r3, [pc, #148]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011626:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801162a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 801162c:	4b23      	ldr	r3, [pc, #140]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 801162e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011632:	f107 0108 	add.w	r1, r7, #8
 8011636:	2205      	movs	r2, #5
 8011638:	4618      	mov	r0, r3
 801163a:	f002 fbe0 	bl	8013dfe <RegionVerify>
 801163e:	4603      	mov	r3, r0
 8011640:	2b00      	cmp	r3, #0
 8011642:	d005      	beq.n	8011650 <LoRaMacMibSetRequestConfirm+0x56c>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011644:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011648:	4b1c      	ldr	r3, [pc, #112]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 801164a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801164e:	e09c      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011650:	2303      	movs	r3, #3
 8011652:	75fb      	strb	r3, [r7, #23]
            break;
 8011654:	e099      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801165c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 801165e:	4b17      	ldr	r3, [pc, #92]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011660:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011664:	f107 0108 	add.w	r1, r7, #8
 8011668:	220a      	movs	r2, #10
 801166a:	4618      	mov	r0, r3
 801166c:	f002 fbc7 	bl	8013dfe <RegionVerify>
 8011670:	4603      	mov	r3, r0
 8011672:	2b00      	cmp	r3, #0
 8011674:	d005      	beq.n	8011682 <LoRaMacMibSetRequestConfirm+0x59e>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8011676:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801167a:	4b10      	ldr	r3, [pc, #64]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 801167c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011680:	e083      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011682:	2303      	movs	r3, #3
 8011684:	75fb      	strb	r3, [r7, #23]
            break;
 8011686:	e080      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801168e:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8011690:	4b0a      	ldr	r3, [pc, #40]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011696:	f107 0108 	add.w	r1, r7, #8
 801169a:	2209      	movs	r2, #9
 801169c:	4618      	mov	r0, r3
 801169e:	f002 fbae 	bl	8013dfe <RegionVerify>
 80116a2:	4603      	mov	r3, r0
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d005      	beq.n	80116b4 <LoRaMacMibSetRequestConfirm+0x5d0>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80116a8:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80116ac:	4b03      	ldr	r3, [pc, #12]	; (80116bc <LoRaMacMibSetRequestConfirm+0x5d8>)
 80116ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80116b2:	e06a      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116b4:	2303      	movs	r3, #3
 80116b6:	75fb      	strb	r3, [r7, #23]
            break;
 80116b8:	e067      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
 80116ba:	bf00      	nop
 80116bc:	20000b94 	.word	0x20000b94
 80116c0:	0801b9f8 	.word	0x0801b9f8
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	685b      	ldr	r3, [r3, #4]
 80116c8:	4a32      	ldr	r2, [pc, #200]	; (8011794 <LoRaMacMibSetRequestConfirm+0x6b0>)
 80116ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80116ce:	4b31      	ldr	r3, [pc, #196]	; (8011794 <LoRaMacMibSetRequestConfirm+0x6b0>)
 80116d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80116d4:	4a2f      	ldr	r2, [pc, #188]	; (8011794 <LoRaMacMibSetRequestConfirm+0x6b0>)
 80116d6:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 80116d8:	e057      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	791a      	ldrb	r2, [r3, #4]
 80116de:	4b2d      	ldr	r3, [pc, #180]	; (8011794 <LoRaMacMibSetRequestConfirm+0x6b0>)
 80116e0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 80116e4:	4b2b      	ldr	r3, [pc, #172]	; (8011794 <LoRaMacMibSetRequestConfirm+0x6b0>)
 80116e6:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80116ea:	4b2a      	ldr	r3, [pc, #168]	; (8011794 <LoRaMacMibSetRequestConfirm+0x6b0>)
 80116ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 80116f0:	e04b      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	685b      	ldr	r3, [r3, #4]
 80116f6:	4a27      	ldr	r2, [pc, #156]	; (8011794 <LoRaMacMibSetRequestConfirm+0x6b0>)
 80116f8:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 80116fa:	e046      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	685b      	ldr	r3, [r3, #4]
 8011700:	4a24      	ldr	r2, [pc, #144]	; (8011794 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8011702:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
            break;
 8011706:	e040      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8011708:	f7fe fdb2 	bl	8010270 <RestoreNvmData>
 801170c:	4603      	mov	r3, r0
 801170e:	75fb      	strb	r3, [r7, #23]
            break;
 8011710:	e03b      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	799b      	ldrb	r3, [r3, #6]
 8011716:	2b01      	cmp	r3, #1
 8011718:	d80d      	bhi.n	8011736 <LoRaMacMibSetRequestConfirm+0x652>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 801171a:	4a1e      	ldr	r2, [pc, #120]	; (8011794 <LoRaMacMibSetRequestConfirm+0x6b0>)
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	685b      	ldr	r3, [r3, #4]
 8011720:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	6858      	ldr	r0, [r3, #4]
 8011728:	f001 fc78 	bl	801301c <LoRaMacCryptoSetLrWanVersion>
 801172c:	4603      	mov	r3, r0
 801172e:	2b00      	cmp	r3, #0
 8011730:	d02a      	beq.n	8011788 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011732:	2311      	movs	r3, #17
 8011734:	e02a      	b.n	801178c <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011736:	2303      	movs	r3, #3
 8011738:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801173a:	e025      	b.n	8011788 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	685b      	ldr	r3, [r3, #4]
 8011740:	4a14      	ldr	r2, [pc, #80]	; (8011794 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8011742:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8011746:	e020      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	f000 fc0d 	bl	8011f68 <LoRaMacMibClassBSetRequestConfirm>
 801174e:	4603      	mov	r3, r0
 8011750:	75fb      	strb	r3, [r7, #23]
            break;
 8011752:	e01a      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011754:	bf00      	nop
 8011756:	e018      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011758:	bf00      	nop
 801175a:	e016      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 801175c:	bf00      	nop
 801175e:	e014      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011760:	bf00      	nop
 8011762:	e012      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011764:	bf00      	nop
 8011766:	e010      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011768:	bf00      	nop
 801176a:	e00e      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 801176c:	bf00      	nop
 801176e:	e00c      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011770:	bf00      	nop
 8011772:	e00a      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011774:	bf00      	nop
 8011776:	e008      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011778:	bf00      	nop
 801177a:	e006      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 801177c:	bf00      	nop
 801177e:	e004      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011780:	bf00      	nop
 8011782:	e002      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011784:	bf00      	nop
 8011786:	e000      	b.n	801178a <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011788:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 801178a:	7dfb      	ldrb	r3, [r7, #23]
}
 801178c:	4618      	mov	r0, r3
 801178e:	3718      	adds	r7, #24
 8011790:	46bd      	mov	sp, r7
 8011792:	bd80      	pop	{r7, pc}
 8011794:	20000b94 	.word	0x20000b94

08011798 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b086      	sub	sp, #24
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80117a0:	2302      	movs	r3, #2
 80117a2:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80117a4:	2300      	movs	r3, #0
 80117a6:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d101      	bne.n	80117b2 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80117ae:	2303      	movs	r3, #3
 80117b0:	e127      	b.n	8011a02 <LoRaMacMlmeRequest+0x26a>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 80117b2:	f7fc fcd3 	bl	800e15c <LoRaMacIsBusy>
 80117b6:	4603      	mov	r3, r0
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d001      	beq.n	80117c0 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80117bc:	2301      	movs	r3, #1
 80117be:	e120      	b.n	8011a02 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80117c0:	f001 f8d0 	bl	8012964 <LoRaMacConfirmQueueIsFull>
 80117c4:	4603      	mov	r3, r0
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d001      	beq.n	80117ce <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 80117ca:	2301      	movs	r3, #1
 80117cc:	e119      	b.n	8011a02 <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80117ce:	f001 f8bd 	bl	801294c <LoRaMacConfirmQueueGetCnt>
 80117d2:	4603      	mov	r3, r0
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d104      	bne.n	80117e2 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80117d8:	2214      	movs	r2, #20
 80117da:	2100      	movs	r1, #0
 80117dc:	488b      	ldr	r0, [pc, #556]	; (8011a0c <LoRaMacMlmeRequest+0x274>)
 80117de:	f004 fe21 	bl	8016424 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80117e2:	4b8b      	ldr	r3, [pc, #556]	; (8011a10 <LoRaMacMlmeRequest+0x278>)
 80117e4:	2201      	movs	r2, #1
 80117e6:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80117ea:	4a89      	ldr	r2, [pc, #548]	; (8011a10 <LoRaMacMlmeRequest+0x278>)
 80117ec:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80117f0:	f043 0304 	orr.w	r3, r3, #4
 80117f4:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    queueElement.Request = mlmeRequest->Type;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80117fe:	2301      	movs	r3, #1
 8011800:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8011802:	2300      	movs	r3, #0
 8011804:	74fb      	strb	r3, [r7, #19]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	781b      	ldrb	r3, [r3, #0]
 801180a:	3b01      	subs	r3, #1
 801180c:	2b0d      	cmp	r3, #13
 801180e:	f200 80ce 	bhi.w	80119ae <LoRaMacMlmeRequest+0x216>
 8011812:	a201      	add	r2, pc, #4	; (adr r2, 8011818 <LoRaMacMlmeRequest+0x80>)
 8011814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011818:	08011851 	.word	0x08011851
 801181c:	080119af 	.word	0x080119af
 8011820:	080119af 	.word	0x080119af
 8011824:	080118bb 	.word	0x080118bb
 8011828:	080118d9 	.word	0x080118d9
 801182c:	080118e9 	.word	0x080118e9
 8011830:	080119af 	.word	0x080119af
 8011834:	080119af 	.word	0x080119af
 8011838:	080119af 	.word	0x080119af
 801183c:	08011905 	.word	0x08011905
 8011840:	080119af 	.word	0x080119af
 8011844:	08011983 	.word	0x08011983
 8011848:	08011923 	.word	0x08011923
 801184c:	08011965 	.word	0x08011965
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8011850:	4b6f      	ldr	r3, [pc, #444]	; (8011a10 <LoRaMacMlmeRequest+0x278>)
 8011852:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011856:	f003 0320 	and.w	r3, r3, #32
 801185a:	2b00      	cmp	r3, #0
 801185c:	d001      	beq.n	8011862 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 801185e:	2301      	movs	r3, #1
 8011860:	e0cf      	b.n	8011a02 <LoRaMacMlmeRequest+0x26a>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( );
 8011862:	f7fe f989 	bl	800fb78 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8011866:	4b6b      	ldr	r3, [pc, #428]	; (8011a14 <LoRaMacMlmeRequest+0x27c>)
 8011868:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	795b      	ldrb	r3, [r3, #5]
 8011870:	b25b      	sxtb	r3, r3
 8011872:	2200      	movs	r2, #0
 8011874:	4619      	mov	r1, r3
 8011876:	f002 fbaa 	bl	8013fce <RegionAlternateDr>
 801187a:	4603      	mov	r3, r0
 801187c:	461a      	mov	r2, r3
 801187e:	4b65      	ldr	r3, [pc, #404]	; (8011a14 <LoRaMacMlmeRequest+0x27c>)
 8011880:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8011884:	2307      	movs	r3, #7
 8011886:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8011888:	20ff      	movs	r0, #255	; 0xff
 801188a:	f7fd feed 	bl	800f668 <SendReJoinReq>
 801188e:	4603      	mov	r3, r0
 8011890:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8011892:	7dfb      	ldrb	r3, [r7, #23]
 8011894:	2b00      	cmp	r3, #0
 8011896:	f000 808c 	beq.w	80119b2 <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 801189a:	4b5e      	ldr	r3, [pc, #376]	; (8011a14 <LoRaMacMlmeRequest+0x27c>)
 801189c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	795b      	ldrb	r3, [r3, #5]
 80118a4:	b25b      	sxtb	r3, r3
 80118a6:	2201      	movs	r2, #1
 80118a8:	4619      	mov	r1, r3
 80118aa:	f002 fb90 	bl	8013fce <RegionAlternateDr>
 80118ae:	4603      	mov	r3, r0
 80118b0:	461a      	mov	r2, r3
 80118b2:	4b58      	ldr	r3, [pc, #352]	; (8011a14 <LoRaMacMlmeRequest+0x27c>)
 80118b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 80118b8:	e07b      	b.n	80119b2 <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80118ba:	2300      	movs	r3, #0
 80118bc:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80118be:	f107 030c 	add.w	r3, r7, #12
 80118c2:	2200      	movs	r2, #0
 80118c4:	4619      	mov	r1, r3
 80118c6:	2002      	movs	r0, #2
 80118c8:	f000 fcb2 	bl	8012230 <LoRaMacCommandsAddCmd>
 80118cc:	4603      	mov	r3, r0
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d071      	beq.n	80119b6 <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80118d2:	2313      	movs	r3, #19
 80118d4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80118d6:	e06e      	b.n	80119b6 <LoRaMacMlmeRequest+0x21e>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	889b      	ldrh	r3, [r3, #4]
 80118dc:	4618      	mov	r0, r3
 80118de:	f7fe fc73 	bl	80101c8 <SetTxContinuousWave>
 80118e2:	4603      	mov	r3, r0
 80118e4:	75fb      	strb	r3, [r7, #23]
            break;
 80118e6:	e06d      	b.n	80119c4 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	8898      	ldrh	r0, [r3, #4]
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	6899      	ldr	r1, [r3, #8]
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80118f6:	b2db      	uxtb	r3, r3
 80118f8:	461a      	mov	r2, r3
 80118fa:	f7fe fc99 	bl	8010230 <SetTxContinuousWave1>
 80118fe:	4603      	mov	r3, r0
 8011900:	75fb      	strb	r3, [r7, #23]
            break;
 8011902:	e05f      	b.n	80119c4 <LoRaMacMlmeRequest+0x22c>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011904:	2300      	movs	r3, #0
 8011906:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011908:	f107 030c 	add.w	r3, r7, #12
 801190c:	2200      	movs	r2, #0
 801190e:	4619      	mov	r1, r3
 8011910:	200d      	movs	r0, #13
 8011912:	f000 fc8d 	bl	8012230 <LoRaMacCommandsAddCmd>
 8011916:	4603      	mov	r3, r0
 8011918:	2b00      	cmp	r3, #0
 801191a:	d04e      	beq.n	80119ba <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801191c:	2313      	movs	r3, #19
 801191e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011920:	e04b      	b.n	80119ba <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8011922:	4b3c      	ldr	r3, [pc, #240]	; (8011a14 <LoRaMacMlmeRequest+0x27c>)
 8011924:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011928:	2b00      	cmp	r3, #0
 801192a:	d148      	bne.n	80119be <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	791b      	ldrb	r3, [r3, #4]
 8011930:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	791b      	ldrb	r3, [r3, #4]
 8011936:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801193a:	b2db      	uxtb	r3, r3
 801193c:	4618      	mov	r0, r3
 801193e:	f000 fae8 	bl	8011f12 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8011942:	7dbb      	ldrb	r3, [r7, #22]
 8011944:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8011946:	2300      	movs	r3, #0
 8011948:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 801194a:	f107 030c 	add.w	r3, r7, #12
 801194e:	2201      	movs	r2, #1
 8011950:	4619      	mov	r1, r3
 8011952:	2010      	movs	r0, #16
 8011954:	f000 fc6c 	bl	8012230 <LoRaMacCommandsAddCmd>
 8011958:	4603      	mov	r3, r0
 801195a:	2b00      	cmp	r3, #0
 801195c:	d02f      	beq.n	80119be <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801195e:	2313      	movs	r3, #19
 8011960:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8011962:	e02c      	b.n	80119be <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011964:	2300      	movs	r3, #0
 8011966:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011968:	f107 030c 	add.w	r3, r7, #12
 801196c:	2200      	movs	r2, #0
 801196e:	4619      	mov	r1, r3
 8011970:	2012      	movs	r0, #18
 8011972:	f000 fc5d 	bl	8012230 <LoRaMacCommandsAddCmd>
 8011976:	4603      	mov	r3, r0
 8011978:	2b00      	cmp	r3, #0
 801197a:	d022      	beq.n	80119c2 <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801197c:	2313      	movs	r3, #19
 801197e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011980:	e01f      	b.n	80119c2 <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8011982:	2301      	movs	r3, #1
 8011984:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8011986:	f000 fa7a 	bl	8011e7e <LoRaMacClassBIsAcquisitionInProgress>
 801198a:	4603      	mov	r3, r0
 801198c:	f083 0301 	eor.w	r3, r3, #1
 8011990:	b2db      	uxtb	r3, r3
 8011992:	2b00      	cmp	r3, #0
 8011994:	d008      	beq.n	80119a8 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8011996:	2000      	movs	r0, #0
 8011998:	f000 fa53 	bl	8011e42 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 801199c:	2000      	movs	r0, #0
 801199e:	f000 fa75 	bl	8011e8c <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80119a2:	2300      	movs	r3, #0
 80119a4:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80119a6:	e00d      	b.n	80119c4 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 80119a8:	2301      	movs	r3, #1
 80119aa:	75fb      	strb	r3, [r7, #23]
            break;
 80119ac:	e00a      	b.n	80119c4 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 80119ae:	bf00      	nop
 80119b0:	e008      	b.n	80119c4 <LoRaMacMlmeRequest+0x22c>
            break;
 80119b2:	bf00      	nop
 80119b4:	e006      	b.n	80119c4 <LoRaMacMlmeRequest+0x22c>
            break;
 80119b6:	bf00      	nop
 80119b8:	e004      	b.n	80119c4 <LoRaMacMlmeRequest+0x22c>
            break;
 80119ba:	bf00      	nop
 80119bc:	e002      	b.n	80119c4 <LoRaMacMlmeRequest+0x22c>
            break;
 80119be:	bf00      	nop
 80119c0:	e000      	b.n	80119c4 <LoRaMacMlmeRequest+0x22c>
            break;
 80119c2:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80119c4:	4b12      	ldr	r3, [pc, #72]	; (8011a10 <LoRaMacMlmeRequest+0x278>)
 80119c6:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 80119ce:	7dfb      	ldrb	r3, [r7, #23]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d010      	beq.n	80119f6 <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80119d4:	f000 ffba 	bl	801294c <LoRaMacConfirmQueueGetCnt>
 80119d8:	4603      	mov	r3, r0
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d110      	bne.n	8011a00 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 80119de:	4b0c      	ldr	r3, [pc, #48]	; (8011a10 <LoRaMacMlmeRequest+0x278>)
 80119e0:	2200      	movs	r2, #0
 80119e2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80119e6:	4a0a      	ldr	r2, [pc, #40]	; (8011a10 <LoRaMacMlmeRequest+0x278>)
 80119e8:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80119ec:	f36f 0382 	bfc	r3, #2, #1
 80119f0:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 80119f4:	e004      	b.n	8011a00 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80119f6:	f107 0310 	add.w	r3, r7, #16
 80119fa:	4618      	mov	r0, r3
 80119fc:	f000 fe58 	bl	80126b0 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8011a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a02:	4618      	mov	r0, r3
 8011a04:	3718      	adds	r7, #24
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}
 8011a0a:	bf00      	nop
 8011a0c:	20000ad4 	.word	0x20000ad4
 8011a10:	20000688 	.word	0x20000688
 8011a14:	20000b94 	.word	0x20000b94

08011a18 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b08c      	sub	sp, #48	; 0x30
 8011a1c:	af02      	add	r7, sp, #8
 8011a1e:	6078      	str	r0, [r7, #4]
 8011a20:	460b      	mov	r3, r1
 8011a22:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011a24:	2302      	movs	r3, #2
 8011a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8011a30:	2300      	movs	r3, #0
 8011a32:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8011a34:	2300      	movs	r3, #0
 8011a36:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8011a38:	2300      	movs	r3, #0
 8011a3a:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d101      	bne.n	8011a46 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011a42:	2303      	movs	r3, #3
 8011a44:	e0d4      	b.n	8011bf0 <LoRaMacMcpsRequest+0x1d8>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 8011a46:	f7fc fb89 	bl	800e15c <LoRaMacIsBusy>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d001      	beq.n	8011a54 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8011a50:	2301      	movs	r3, #1
 8011a52:	e0cd      	b.n	8011bf0 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8011a54:	2300      	movs	r3, #0
 8011a56:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8011a58:	2214      	movs	r2, #20
 8011a5a:	2100      	movs	r1, #0
 8011a5c:	4866      	ldr	r0, [pc, #408]	; (8011bf8 <LoRaMacMcpsRequest+0x1e0>)
 8011a5e:	f004 fce1 	bl	8016424 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011a62:	4b66      	ldr	r3, [pc, #408]	; (8011bfc <LoRaMacMcpsRequest+0x1e4>)
 8011a64:	2201      	movs	r2, #1
 8011a66:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011a6a:	4b64      	ldr	r3, [pc, #400]	; (8011bfc <LoRaMacMcpsRequest+0x1e4>)
 8011a6c:	2201      	movs	r2, #1
 8011a6e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	781b      	ldrb	r3, [r3, #0]
 8011a76:	2b03      	cmp	r3, #3
 8011a78:	d03d      	beq.n	8011af6 <LoRaMacMcpsRequest+0xde>
 8011a7a:	2b03      	cmp	r3, #3
 8011a7c:	dc4f      	bgt.n	8011b1e <LoRaMacMcpsRequest+0x106>
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d002      	beq.n	8011a88 <LoRaMacMcpsRequest+0x70>
 8011a82:	2b01      	cmp	r3, #1
 8011a84:	d019      	beq.n	8011aba <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8011a86:	e04a      	b.n	8011b1e <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8011a88:	2301      	movs	r3, #1
 8011a8a:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011a8c:	4b5b      	ldr	r3, [pc, #364]	; (8011bfc <LoRaMacMcpsRequest+0x1e4>)
 8011a8e:	2201      	movs	r2, #1
 8011a90:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8011a94:	7b3b      	ldrb	r3, [r7, #12]
 8011a96:	2202      	movs	r2, #2
 8011a98:	f362 1347 	bfi	r3, r2, #5, #3
 8011a9c:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	791b      	ldrb	r3, [r3, #4]
 8011aa2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	689b      	ldr	r3, [r3, #8]
 8011aaa:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	899b      	ldrh	r3, [r3, #12]
 8011ab0:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	7b9b      	ldrb	r3, [r3, #14]
 8011ab6:	777b      	strb	r3, [r7, #29]
            break;
 8011ab8:	e032      	b.n	8011b20 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011aba:	2301      	movs	r3, #1
 8011abc:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	7bdb      	ldrb	r3, [r3, #15]
 8011ac2:	2b08      	cmp	r3, #8
 8011ac4:	bf28      	it	cs
 8011ac6:	2308      	movcs	r3, #8
 8011ac8:	b2da      	uxtb	r2, r3
 8011aca:	4b4c      	ldr	r3, [pc, #304]	; (8011bfc <LoRaMacMcpsRequest+0x1e4>)
 8011acc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8011ad0:	7b3b      	ldrb	r3, [r7, #12]
 8011ad2:	2204      	movs	r2, #4
 8011ad4:	f362 1347 	bfi	r3, r2, #5, #3
 8011ad8:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	791b      	ldrb	r3, [r3, #4]
 8011ade:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	689b      	ldr	r3, [r3, #8]
 8011ae6:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	899b      	ldrh	r3, [r3, #12]
 8011aec:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	7b9b      	ldrb	r3, [r3, #14]
 8011af2:	777b      	strb	r3, [r7, #29]
            break;
 8011af4:	e014      	b.n	8011b20 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011af6:	2301      	movs	r3, #1
 8011af8:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011afa:	4b40      	ldr	r3, [pc, #256]	; (8011bfc <LoRaMacMcpsRequest+0x1e4>)
 8011afc:	2201      	movs	r2, #1
 8011afe:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8011b02:	7b3b      	ldrb	r3, [r7, #12]
 8011b04:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8011b08:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	891b      	ldrh	r3, [r3, #8]
 8011b14:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	7a9b      	ldrb	r3, [r3, #10]
 8011b1a:	777b      	strb	r3, [r7, #29]
            break;
 8011b1c:	e000      	b.n	8011b20 <LoRaMacMcpsRequest+0x108>
            break;
 8011b1e:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011b20:	2302      	movs	r3, #2
 8011b22:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011b24:	4b36      	ldr	r3, [pc, #216]	; (8011c00 <LoRaMacMcpsRequest+0x1e8>)
 8011b26:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011b2a:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b2c:	4b34      	ldr	r3, [pc, #208]	; (8011c00 <LoRaMacMcpsRequest+0x1e8>)
 8011b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011b32:	f107 0214 	add.w	r2, r7, #20
 8011b36:	4611      	mov	r1, r2
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f002 f925 	bl	8013d88 <RegionGetPhyParam>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8011b42:	693b      	ldr	r3, [r7, #16]
 8011b44:	b25b      	sxtb	r3, r3
 8011b46:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8011b4a:	4293      	cmp	r3, r2
 8011b4c:	bfb8      	it	lt
 8011b4e:	4613      	movlt	r3, r2
 8011b50:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8011b52:	7f3b      	ldrb	r3, [r7, #28]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d044      	beq.n	8011be2 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8011b58:	4b29      	ldr	r3, [pc, #164]	; (8011c00 <LoRaMacMcpsRequest+0x1e8>)
 8011b5a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8011b5e:	f083 0301 	eor.w	r3, r3, #1
 8011b62:	b2db      	uxtb	r3, r3
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d019      	beq.n	8011b9c <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8011b68:	7f7b      	ldrb	r3, [r7, #29]
 8011b6a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011b6c:	4b24      	ldr	r3, [pc, #144]	; (8011c00 <LoRaMacMcpsRequest+0x1e8>)
 8011b6e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011b72:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011b74:	4b22      	ldr	r3, [pc, #136]	; (8011c00 <LoRaMacMcpsRequest+0x1e8>)
 8011b76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011b7a:	f107 0108 	add.w	r1, r7, #8
 8011b7e:	2205      	movs	r2, #5
 8011b80:	4618      	mov	r0, r3
 8011b82:	f002 f93c 	bl	8013dfe <RegionVerify>
 8011b86:	4603      	mov	r3, r0
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d005      	beq.n	8011b98 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011b8c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011b90:	4b1b      	ldr	r3, [pc, #108]	; (8011c00 <LoRaMacMcpsRequest+0x1e8>)
 8011b92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8011b96:	e001      	b.n	8011b9c <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8011b98:	2303      	movs	r3, #3
 8011b9a:	e029      	b.n	8011bf0 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8011b9c:	8bfa      	ldrh	r2, [r7, #30]
 8011b9e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8011ba2:	f107 000c 	add.w	r0, r7, #12
 8011ba6:	78fb      	ldrb	r3, [r7, #3]
 8011ba8:	9300      	str	r3, [sp, #0]
 8011baa:	4613      	mov	r3, r2
 8011bac:	6a3a      	ldr	r2, [r7, #32]
 8011bae:	f7fd fc7b 	bl	800f4a8 <Send>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8011bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d10c      	bne.n	8011bda <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	781a      	ldrb	r2, [r3, #0]
 8011bc4:	4b0d      	ldr	r3, [pc, #52]	; (8011bfc <LoRaMacMcpsRequest+0x1e4>)
 8011bc6:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8011bca:	4a0c      	ldr	r2, [pc, #48]	; (8011bfc <LoRaMacMcpsRequest+0x1e4>)
 8011bcc:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011bd0:	f043 0301 	orr.w	r3, r3, #1
 8011bd4:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8011bd8:	e003      	b.n	8011be2 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8011bda:	4b08      	ldr	r3, [pc, #32]	; (8011bfc <LoRaMacMcpsRequest+0x1e4>)
 8011bdc:	2200      	movs	r2, #0
 8011bde:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011be2:	4b06      	ldr	r3, [pc, #24]	; (8011bfc <LoRaMacMcpsRequest+0x1e4>)
 8011be4:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	611a      	str	r2, [r3, #16]

    return status;
 8011bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	3728      	adds	r7, #40	; 0x28
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}
 8011bf8:	20000ac0 	.word	0x20000ac0
 8011bfc:	20000688 	.word	0x20000688
 8011c00:	20000b94 	.word	0x20000b94

08011c04 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b084      	sub	sp, #16
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8011c0e:	79fb      	ldrb	r3, [r7, #7]
 8011c10:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8011c12:	4b0a      	ldr	r3, [pc, #40]	; (8011c3c <LoRaMacTestSetDutyCycleOn+0x38>)
 8011c14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c18:	f107 010c 	add.w	r1, r7, #12
 8011c1c:	220f      	movs	r2, #15
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f002 f8ed 	bl	8013dfe <RegionVerify>
 8011c24:	4603      	mov	r3, r0
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d003      	beq.n	8011c32 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8011c2a:	4a04      	ldr	r2, [pc, #16]	; (8011c3c <LoRaMacTestSetDutyCycleOn+0x38>)
 8011c2c:	79fb      	ldrb	r3, [r7, #7]
 8011c2e:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
    }
}
 8011c32:	bf00      	nop
 8011c34:	3710      	adds	r7, #16
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}
 8011c3a:	bf00      	nop
 8011c3c:	20000b94 	.word	0x20000b94

08011c40 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8011c44:	f7fe ffec 	bl	8010c20 <LoRaMacStop>
 8011c48:	4603      	mov	r3, r0
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d114      	bne.n	8011c78 <LoRaMacDeInitialization+0x38>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8011c4e:	480c      	ldr	r0, [pc, #48]	; (8011c80 <LoRaMacDeInitialization+0x40>)
 8011c50:	f008 fcf8 	bl	801a644 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8011c54:	480b      	ldr	r0, [pc, #44]	; (8011c84 <LoRaMacDeInitialization+0x44>)
 8011c56:	f008 fcf5 	bl	801a644 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8011c5a:	480b      	ldr	r0, [pc, #44]	; (8011c88 <LoRaMacDeInitialization+0x48>)
 8011c5c:	f008 fcf2 	bl	801a644 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 8011c60:	480a      	ldr	r0, [pc, #40]	; (8011c8c <LoRaMacDeInitialization+0x4c>)
 8011c62:	f008 fcef 	bl	801a644 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8011c66:	f000 f95e 	bl	8011f26 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 8011c6a:	f7fd ff85 	bl	800fb78 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8011c6e:	4b08      	ldr	r3, [pc, #32]	; (8011c90 <LoRaMacDeInitialization+0x50>)
 8011c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c72:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8011c74:	2300      	movs	r3, #0
 8011c76:	e000      	b.n	8011c7a <LoRaMacDeInitialization+0x3a>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8011c78:	2301      	movs	r3, #1
    }
}
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	bd80      	pop	{r7, pc}
 8011c7e:	bf00      	nop
 8011c80:	200009f0 	.word	0x200009f0
 8011c84:	20000a08 	.word	0x20000a08
 8011c88:	20000a20 	.word	0x20000a20
 8011c8c:	20000a80 	.word	0x20000a80
 8011c90:	0801b9f8 	.word	0x0801b9f8

08011c94 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b08c      	sub	sp, #48	; 0x30
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	60f8      	str	r0, [r7, #12]
 8011c9c:	60b9      	str	r1, [r7, #8]
 8011c9e:	607a      	str	r2, [r7, #4]
 8011ca0:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	7c1b      	ldrb	r3, [r3, #16]
 8011cac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	7c5b      	ldrb	r3, [r3, #17]
 8011cb4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	689a      	ldr	r2, [r3, #8]
 8011cbc:	683b      	ldr	r3, [r7, #0]
 8011cbe:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	795b      	ldrb	r3, [r3, #5]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	f000 808b 	beq.w	8011de0 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8011cca:	2302      	movs	r3, #2
 8011ccc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	7c9b      	ldrb	r3, [r3, #18]
 8011cd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	7cdb      	ldrb	r3, [r3, #19]
 8011cdc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011ce0:	4611      	mov	r1, r2
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f002 f850 	bl	8013d88 <RegionGetPhyParam>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8011cec:	6a3b      	ldr	r3, [r7, #32]
 8011cee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8011cf2:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8011cf6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8011cfa:	4293      	cmp	r3, r2
 8011cfc:	bfb8      	it	lt
 8011cfe:	4613      	movlt	r3, r2
 8011d00:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8011d04:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8011d08:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d106      	bne.n	8011d1e <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	2200      	movs	r2, #0
 8011d14:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8011d16:	2300      	movs	r3, #0
 8011d18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011d1c:	e060      	b.n	8011de0 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	689b      	ldr	r3, [r3, #8]
 8011d22:	68fa      	ldr	r2, [r7, #12]
 8011d24:	8992      	ldrh	r2, [r2, #12]
 8011d26:	4293      	cmp	r3, r2
 8011d28:	d303      	bcc.n	8011d32 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011d30:	e002      	b.n	8011d38 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8011d32:	2300      	movs	r3, #0
 8011d34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	689b      	ldr	r3, [r3, #8]
 8011d3c:	68fa      	ldr	r2, [r7, #12]
 8011d3e:	8992      	ldrh	r2, [r2, #12]
 8011d40:	4611      	mov	r1, r2
 8011d42:	68fa      	ldr	r2, [r7, #12]
 8011d44:	89d2      	ldrh	r2, [r2, #14]
 8011d46:	440a      	add	r2, r1
 8011d48:	4293      	cmp	r3, r2
 8011d4a:	d349      	bcc.n	8011de0 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8011d4c:	2308      	movs	r3, #8
 8011d4e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	7cdb      	ldrb	r3, [r3, #19]
 8011d56:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011d5a:	4611      	mov	r1, r2
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f002 f813 	bl	8013d88 <RegionGetPhyParam>
 8011d62:	4603      	mov	r3, r0
 8011d64:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8011d66:	6a3b      	ldr	r3, [r7, #32]
 8011d68:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	689b      	ldr	r3, [r3, #8]
 8011d70:	68fa      	ldr	r2, [r7, #12]
 8011d72:	89d2      	ldrh	r2, [r2, #14]
 8011d74:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d78:	fb01 f202 	mul.w	r2, r1, r2
 8011d7c:	1a9b      	subs	r3, r3, r2
 8011d7e:	2b01      	cmp	r3, #1
 8011d80:	d12e      	bne.n	8011de0 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8011d82:	2322      	movs	r3, #34	; 0x22
 8011d84:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8011d88:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011d8c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	7c9b      	ldrb	r3, [r3, #18]
 8011d94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	7cdb      	ldrb	r3, [r3, #19]
 8011d9c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011da0:	4611      	mov	r1, r2
 8011da2:	4618      	mov	r0, r3
 8011da4:	f001 fff0 	bl	8013d88 <RegionGetPhyParam>
 8011da8:	4603      	mov	r3, r0
 8011daa:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8011dac:	6a3b      	ldr	r3, [r7, #32]
 8011dae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 8011db2:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8011db6:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8011dba:	429a      	cmp	r2, r3
 8011dbc:	d110      	bne.n	8011de0 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	791b      	ldrb	r3, [r3, #4]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d009      	beq.n	8011de0 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011dcc:	2302      	movs	r3, #2
 8011dce:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	7cdb      	ldrb	r3, [r3, #19]
 8011dd4:	f107 0214 	add.w	r2, r7, #20
 8011dd8:	4611      	mov	r1, r2
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f001 fffd 	bl	8013dda <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8011de0:	68bb      	ldr	r3, [r7, #8]
 8011de2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8011de6:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011dee:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8011df0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011df4:	4618      	mov	r0, r3
 8011df6:	3730      	adds	r7, #48	; 0x30
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}

08011dfc <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b084      	sub	sp, #16
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	60f8      	str	r0, [r7, #12]
 8011e04:	60b9      	str	r1, [r7, #8]
 8011e06:	607a      	str	r2, [r7, #4]
 8011e08:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	789b      	ldrb	r3, [r3, #2]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d107      	bne.n	8011e22 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	687a      	ldr	r2, [r7, #4]
 8011e16:	68b9      	ldr	r1, [r7, #8]
 8011e18:	68f8      	ldr	r0, [r7, #12]
 8011e1a:	f7ff ff3b 	bl	8011c94 <CalcNextV10X>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	e000      	b.n	8011e24 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8011e22:	2300      	movs	r3, #0
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	3710      	adds	r7, #16
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}

08011e2c <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8011e2c:	b480      	push	{r7}
 8011e2e:	b085      	sub	sp, #20
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	60f8      	str	r0, [r7, #12]
 8011e34:	60b9      	str	r1, [r7, #8]
 8011e36:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011e38:	bf00      	nop
 8011e3a:	3714      	adds	r7, #20
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bc80      	pop	{r7}
 8011e40:	4770      	bx	lr

08011e42 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8011e42:	b480      	push	{r7}
 8011e44:	b083      	sub	sp, #12
 8011e46:	af00      	add	r7, sp, #0
 8011e48:	4603      	mov	r3, r0
 8011e4a:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011e4c:	bf00      	nop
 8011e4e:	370c      	adds	r7, #12
 8011e50:	46bd      	mov	sp, r7
 8011e52:	bc80      	pop	{r7}
 8011e54:	4770      	bx	lr

08011e56 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8011e56:	b480      	push	{r7}
 8011e58:	b083      	sub	sp, #12
 8011e5a:	af00      	add	r7, sp, #0
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011e60:	bf00      	nop
 8011e62:	370c      	adds	r7, #12
 8011e64:	46bd      	mov	sp, r7
 8011e66:	bc80      	pop	{r7}
 8011e68:	4770      	bx	lr

08011e6a <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8011e6a:	b480      	push	{r7}
 8011e6c:	b083      	sub	sp, #12
 8011e6e:	af00      	add	r7, sp, #0
 8011e70:	4603      	mov	r3, r0
 8011e72:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011e74:	bf00      	nop
 8011e76:	370c      	adds	r7, #12
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bc80      	pop	{r7}
 8011e7c:	4770      	bx	lr

08011e7e <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8011e7e:	b480      	push	{r7}
 8011e80:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8011e82:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011e84:	4618      	mov	r0, r3
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bc80      	pop	{r7}
 8011e8a:	4770      	bx	lr

08011e8c <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8011e8c:	b480      	push	{r7}
 8011e8e:	b083      	sub	sp, #12
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011e94:	bf00      	nop
 8011e96:	370c      	adds	r7, #12
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	bc80      	pop	{r7}
 8011e9c:	4770      	bx	lr

08011e9e <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8011e9e:	b480      	push	{r7}
 8011ea0:	b083      	sub	sp, #12
 8011ea2:	af00      	add	r7, sp, #0
 8011ea4:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ea6:	bf00      	nop
 8011ea8:	370c      	adds	r7, #12
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bc80      	pop	{r7}
 8011eae:	4770      	bx	lr

08011eb0 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8011eb0:	b480      	push	{r7}
 8011eb2:	b083      	sub	sp, #12
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011eb8:	bf00      	nop
 8011eba:	370c      	adds	r7, #12
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bc80      	pop	{r7}
 8011ec0:	4770      	bx	lr

08011ec2 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8011ec2:	b480      	push	{r7}
 8011ec4:	b083      	sub	sp, #12
 8011ec6:	af00      	add	r7, sp, #0
 8011ec8:	6078      	str	r0, [r7, #4]
 8011eca:	460b      	mov	r3, r1
 8011ecc:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8011ece:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	370c      	adds	r7, #12
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bc80      	pop	{r7}
 8011ed8:	4770      	bx	lr

08011eda <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8011eda:	b480      	push	{r7}
 8011edc:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011ede:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bc80      	pop	{r7}
 8011ee6:	4770      	bx	lr

08011ee8 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8011ee8:	b480      	push	{r7}
 8011eea:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011eec:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011eee:	4618      	mov	r0, r3
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bc80      	pop	{r7}
 8011ef4:	4770      	bx	lr

08011ef6 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8011ef6:	b480      	push	{r7}
 8011ef8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011efa:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bc80      	pop	{r7}
 8011f02:	4770      	bx	lr

08011f04 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8011f04:	b480      	push	{r7}
 8011f06:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011f08:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bc80      	pop	{r7}
 8011f10:	4770      	bx	lr

08011f12 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8011f12:	b480      	push	{r7}
 8011f14:	b083      	sub	sp, #12
 8011f16:	af00      	add	r7, sp, #0
 8011f18:	4603      	mov	r3, r0
 8011f1a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f1c:	bf00      	nop
 8011f1e:	370c      	adds	r7, #12
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bc80      	pop	{r7}
 8011f24:	4770      	bx	lr

08011f26 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8011f26:	b480      	push	{r7}
 8011f28:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f2a:	bf00      	nop
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	bc80      	pop	{r7}
 8011f30:	4770      	bx	lr

08011f32 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8011f32:	b480      	push	{r7}
 8011f34:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f36:	bf00      	nop
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bc80      	pop	{r7}
 8011f3c:	4770      	bx	lr

08011f3e <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8011f3e:	b480      	push	{r7}
 8011f40:	b083      	sub	sp, #12
 8011f42:	af00      	add	r7, sp, #0
 8011f44:	4603      	mov	r3, r0
 8011f46:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011f48:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	370c      	adds	r7, #12
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bc80      	pop	{r7}
 8011f52:	4770      	bx	lr

08011f54 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8011f54:	b480      	push	{r7}
 8011f56:	b083      	sub	sp, #12
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011f5c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	370c      	adds	r7, #12
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bc80      	pop	{r7}
 8011f66:	4770      	bx	lr

08011f68 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8011f68:	b480      	push	{r7}
 8011f6a:	b083      	sub	sp, #12
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011f70:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f72:	4618      	mov	r0, r3
 8011f74:	370c      	adds	r7, #12
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bc80      	pop	{r7}
 8011f7a:	4770      	bx	lr

08011f7c <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8011f7c:	b480      	push	{r7}
 8011f7e:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f80:	bf00      	nop
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bc80      	pop	{r7}
 8011f86:	4770      	bx	lr

08011f88 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8011f88:	b480      	push	{r7}
 8011f8a:	b083      	sub	sp, #12
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	4603      	mov	r3, r0
 8011f90:	6039      	str	r1, [r7, #0]
 8011f92:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8011f94:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f96:	4618      	mov	r0, r3
 8011f98:	370c      	adds	r7, #12
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bc80      	pop	{r7}
 8011f9e:	4770      	bx	lr

08011fa0 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8011fa0:	b480      	push	{r7}
 8011fa2:	b083      	sub	sp, #12
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	603a      	str	r2, [r7, #0]
 8011faa:	80fb      	strh	r3, [r7, #6]
 8011fac:	460b      	mov	r3, r1
 8011fae:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fb0:	bf00      	nop
 8011fb2:	370c      	adds	r7, #12
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	bc80      	pop	{r7}
 8011fb8:	4770      	bx	lr

08011fba <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8011fba:	b480      	push	{r7}
 8011fbc:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fbe:	bf00      	nop
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bc80      	pop	{r7}
 8011fc4:	4770      	bx	lr

08011fc6 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8011fc6:	b480      	push	{r7}
 8011fc8:	b083      	sub	sp, #12
 8011fca:	af00      	add	r7, sp, #0
 8011fcc:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8011fce:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	370c      	adds	r7, #12
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	bc80      	pop	{r7}
 8011fd8:	4770      	bx	lr

08011fda <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8011fda:	b480      	push	{r7}
 8011fdc:	b083      	sub	sp, #12
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8011fe2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	370c      	adds	r7, #12
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	bc80      	pop	{r7}
 8011fec:	4770      	bx	lr

08011fee <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8011fee:	b480      	push	{r7}
 8011ff0:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ff2:	bf00      	nop
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	bc80      	pop	{r7}
 8011ff8:	4770      	bx	lr

08011ffa <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8011ffa:	b480      	push	{r7}
 8011ffc:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ffe:	bf00      	nop
 8012000:	46bd      	mov	sp, r7
 8012002:	bc80      	pop	{r7}
 8012004:	4770      	bx	lr

08012006 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8012006:	b480      	push	{r7}
 8012008:	b085      	sub	sp, #20
 801200a:	af00      	add	r7, sp, #0
 801200c:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012012:	2300      	movs	r3, #0
 8012014:	81fb      	strh	r3, [r7, #14]
 8012016:	e00a      	b.n	801202e <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8012018:	89fb      	ldrh	r3, [r7, #14]
 801201a:	68ba      	ldr	r2, [r7, #8]
 801201c:	4413      	add	r3, r2
 801201e:	781b      	ldrb	r3, [r3, #0]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d001      	beq.n	8012028 <IsSlotFree+0x22>
        {
            return false;
 8012024:	2300      	movs	r3, #0
 8012026:	e006      	b.n	8012036 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012028:	89fb      	ldrh	r3, [r7, #14]
 801202a:	3301      	adds	r3, #1
 801202c:	81fb      	strh	r3, [r7, #14]
 801202e:	89fb      	ldrh	r3, [r7, #14]
 8012030:	2b0f      	cmp	r3, #15
 8012032:	d9f1      	bls.n	8012018 <IsSlotFree+0x12>
        }
    }
    return true;
 8012034:	2301      	movs	r3, #1
}
 8012036:	4618      	mov	r0, r3
 8012038:	3714      	adds	r7, #20
 801203a:	46bd      	mov	sp, r7
 801203c:	bc80      	pop	{r7}
 801203e:	4770      	bx	lr

08012040 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b082      	sub	sp, #8
 8012044:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8012046:	2300      	movs	r3, #0
 8012048:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801204a:	e007      	b.n	801205c <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 801204c:	79fb      	ldrb	r3, [r7, #7]
 801204e:	3301      	adds	r3, #1
 8012050:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8012052:	79fb      	ldrb	r3, [r7, #7]
 8012054:	2b0f      	cmp	r3, #15
 8012056:	d101      	bne.n	801205c <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8012058:	2300      	movs	r3, #0
 801205a:	e012      	b.n	8012082 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801205c:	79fb      	ldrb	r3, [r7, #7]
 801205e:	011b      	lsls	r3, r3, #4
 8012060:	3308      	adds	r3, #8
 8012062:	4a0a      	ldr	r2, [pc, #40]	; (801208c <MallocNewMacCommandSlot+0x4c>)
 8012064:	4413      	add	r3, r2
 8012066:	4618      	mov	r0, r3
 8012068:	f7ff ffcd 	bl	8012006 <IsSlotFree>
 801206c:	4603      	mov	r3, r0
 801206e:	f083 0301 	eor.w	r3, r3, #1
 8012072:	b2db      	uxtb	r3, r3
 8012074:	2b00      	cmp	r3, #0
 8012076:	d1e9      	bne.n	801204c <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8012078:	79fb      	ldrb	r3, [r7, #7]
 801207a:	011b      	lsls	r3, r3, #4
 801207c:	3308      	adds	r3, #8
 801207e:	4a03      	ldr	r2, [pc, #12]	; (801208c <MallocNewMacCommandSlot+0x4c>)
 8012080:	4413      	add	r3, r2
}
 8012082:	4618      	mov	r0, r3
 8012084:	3708      	adds	r7, #8
 8012086:	46bd      	mov	sp, r7
 8012088:	bd80      	pop	{r7, pc}
 801208a:	bf00      	nop
 801208c:	200019fc 	.word	0x200019fc

08012090 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b082      	sub	sp, #8
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d101      	bne.n	80120a2 <FreeMacCommandSlot+0x12>
    {
        return false;
 801209e:	2300      	movs	r3, #0
 80120a0:	e005      	b.n	80120ae <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80120a2:	2210      	movs	r2, #16
 80120a4:	2100      	movs	r1, #0
 80120a6:	6878      	ldr	r0, [r7, #4]
 80120a8:	f004 f9bc 	bl	8016424 <memset1>

    return true;
 80120ac:	2301      	movs	r3, #1
}
 80120ae:	4618      	mov	r0, r3
 80120b0:	3708      	adds	r7, #8
 80120b2:	46bd      	mov	sp, r7
 80120b4:	bd80      	pop	{r7, pc}

080120b6 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80120b6:	b480      	push	{r7}
 80120b8:	b083      	sub	sp, #12
 80120ba:	af00      	add	r7, sp, #0
 80120bc:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d101      	bne.n	80120c8 <LinkedListInit+0x12>
    {
        return false;
 80120c4:	2300      	movs	r3, #0
 80120c6:	e006      	b.n	80120d6 <LinkedListInit+0x20>
    }

    list->First = NULL;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2200      	movs	r2, #0
 80120cc:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	2200      	movs	r2, #0
 80120d2:	605a      	str	r2, [r3, #4]

    return true;
 80120d4:	2301      	movs	r3, #1
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	370c      	adds	r7, #12
 80120da:	46bd      	mov	sp, r7
 80120dc:	bc80      	pop	{r7}
 80120de:	4770      	bx	lr

080120e0 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80120e0:	b480      	push	{r7}
 80120e2:	b083      	sub	sp, #12
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
 80120e8:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d002      	beq.n	80120f6 <LinkedListAdd+0x16>
 80120f0:	683b      	ldr	r3, [r7, #0]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d101      	bne.n	80120fa <LinkedListAdd+0x1a>
    {
        return false;
 80120f6:	2300      	movs	r3, #0
 80120f8:	e015      	b.n	8012126 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d102      	bne.n	8012108 <LinkedListAdd+0x28>
    {
        list->First = element;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	683a      	ldr	r2, [r7, #0]
 8012106:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	685b      	ldr	r3, [r3, #4]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d003      	beq.n	8012118 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	685b      	ldr	r3, [r3, #4]
 8012114:	683a      	ldr	r2, [r7, #0]
 8012116:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	2200      	movs	r2, #0
 801211c:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	683a      	ldr	r2, [r7, #0]
 8012122:	605a      	str	r2, [r3, #4]

    return true;
 8012124:	2301      	movs	r3, #1
}
 8012126:	4618      	mov	r0, r3
 8012128:	370c      	adds	r7, #12
 801212a:	46bd      	mov	sp, r7
 801212c:	bc80      	pop	{r7}
 801212e:	4770      	bx	lr

08012130 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8012130:	b480      	push	{r7}
 8012132:	b085      	sub	sp, #20
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
 8012138:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d002      	beq.n	8012146 <LinkedListGetPrevious+0x16>
 8012140:	683b      	ldr	r3, [r7, #0]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d101      	bne.n	801214a <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8012146:	2300      	movs	r3, #0
 8012148:	e016      	b.n	8012178 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8012150:	683a      	ldr	r2, [r7, #0]
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	429a      	cmp	r2, r3
 8012156:	d00c      	beq.n	8012172 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012158:	e002      	b.n	8012160 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d007      	beq.n	8012176 <LinkedListGetPrevious+0x46>
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	683a      	ldr	r2, [r7, #0]
 801216c:	429a      	cmp	r2, r3
 801216e:	d1f4      	bne.n	801215a <LinkedListGetPrevious+0x2a>
 8012170:	e001      	b.n	8012176 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8012172:	2300      	movs	r3, #0
 8012174:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8012176:	68fb      	ldr	r3, [r7, #12]
}
 8012178:	4618      	mov	r0, r3
 801217a:	3714      	adds	r7, #20
 801217c:	46bd      	mov	sp, r7
 801217e:	bc80      	pop	{r7}
 8012180:	4770      	bx	lr

08012182 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8012182:	b580      	push	{r7, lr}
 8012184:	b084      	sub	sp, #16
 8012186:	af00      	add	r7, sp, #0
 8012188:	6078      	str	r0, [r7, #4]
 801218a:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d002      	beq.n	8012198 <LinkedListRemove+0x16>
 8012192:	683b      	ldr	r3, [r7, #0]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d101      	bne.n	801219c <LinkedListRemove+0x1a>
    {
        return false;
 8012198:	2300      	movs	r3, #0
 801219a:	e020      	b.n	80121de <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 801219c:	6839      	ldr	r1, [r7, #0]
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f7ff ffc6 	bl	8012130 <LinkedListGetPrevious>
 80121a4:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	683a      	ldr	r2, [r7, #0]
 80121ac:	429a      	cmp	r2, r3
 80121ae:	d103      	bne.n	80121b8 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 80121b0:	683b      	ldr	r3, [r7, #0]
 80121b2:	681a      	ldr	r2, [r3, #0]
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	685b      	ldr	r3, [r3, #4]
 80121bc:	683a      	ldr	r2, [r7, #0]
 80121be:	429a      	cmp	r2, r3
 80121c0:	d102      	bne.n	80121c8 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	68fa      	ldr	r2, [r7, #12]
 80121c6:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d003      	beq.n	80121d6 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80121ce:	683b      	ldr	r3, [r7, #0]
 80121d0:	681a      	ldr	r2, [r3, #0]
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80121d6:	683b      	ldr	r3, [r7, #0]
 80121d8:	2200      	movs	r2, #0
 80121da:	601a      	str	r2, [r3, #0]

    return true;
 80121dc:	2301      	movs	r3, #1
}
 80121de:	4618      	mov	r0, r3
 80121e0:	3710      	adds	r7, #16
 80121e2:	46bd      	mov	sp, r7
 80121e4:	bd80      	pop	{r7, pc}

080121e6 <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80121e6:	b480      	push	{r7}
 80121e8:	b083      	sub	sp, #12
 80121ea:	af00      	add	r7, sp, #0
 80121ec:	4603      	mov	r3, r0
 80121ee:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80121f0:	79fb      	ldrb	r3, [r7, #7]
 80121f2:	2b05      	cmp	r3, #5
 80121f4:	d004      	beq.n	8012200 <IsSticky+0x1a>
 80121f6:	2b05      	cmp	r3, #5
 80121f8:	db04      	blt.n	8012204 <IsSticky+0x1e>
 80121fa:	3b08      	subs	r3, #8
 80121fc:	2b02      	cmp	r3, #2
 80121fe:	d801      	bhi.n	8012204 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8012200:	2301      	movs	r3, #1
 8012202:	e000      	b.n	8012206 <IsSticky+0x20>
        default:
            return false;
 8012204:	2300      	movs	r3, #0
    }
}
 8012206:	4618      	mov	r0, r3
 8012208:	370c      	adds	r7, #12
 801220a:	46bd      	mov	sp, r7
 801220c:	bc80      	pop	{r7}
 801220e:	4770      	bx	lr

08012210 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8012210:	b580      	push	{r7, lr}
 8012212:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8012214:	22fc      	movs	r2, #252	; 0xfc
 8012216:	2100      	movs	r1, #0
 8012218:	4804      	ldr	r0, [pc, #16]	; (801222c <LoRaMacCommandsInit+0x1c>)
 801221a:	f004 f903 	bl	8016424 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 801221e:	4803      	ldr	r0, [pc, #12]	; (801222c <LoRaMacCommandsInit+0x1c>)
 8012220:	f7ff ff49 	bl	80120b6 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8012224:	2300      	movs	r3, #0
}
 8012226:	4618      	mov	r0, r3
 8012228:	bd80      	pop	{r7, pc}
 801222a:	bf00      	nop
 801222c:	200019fc 	.word	0x200019fc

08012230 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b086      	sub	sp, #24
 8012234:	af00      	add	r7, sp, #0
 8012236:	4603      	mov	r3, r0
 8012238:	60b9      	str	r1, [r7, #8]
 801223a:	607a      	str	r2, [r7, #4]
 801223c:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 801223e:	68bb      	ldr	r3, [r7, #8]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d101      	bne.n	8012248 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012244:	2301      	movs	r3, #1
 8012246:	e033      	b.n	80122b0 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8012248:	f7ff fefa 	bl	8012040 <MallocNewMacCommandSlot>
 801224c:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d101      	bne.n	8012258 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8012254:	2302      	movs	r3, #2
 8012256:	e02b      	b.n	80122b0 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8012258:	6979      	ldr	r1, [r7, #20]
 801225a:	4817      	ldr	r0, [pc, #92]	; (80122b8 <LoRaMacCommandsAddCmd+0x88>)
 801225c:	f7ff ff40 	bl	80120e0 <LinkedListAdd>
 8012260:	4603      	mov	r3, r0
 8012262:	f083 0301 	eor.w	r3, r3, #1
 8012266:	b2db      	uxtb	r3, r3
 8012268:	2b00      	cmp	r3, #0
 801226a:	d001      	beq.n	8012270 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 801226c:	2305      	movs	r3, #5
 801226e:	e01f      	b.n	80122b0 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8012270:	697b      	ldr	r3, [r7, #20]
 8012272:	7bfa      	ldrb	r2, [r7, #15]
 8012274:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8012276:	697b      	ldr	r3, [r7, #20]
 8012278:	687a      	ldr	r2, [r7, #4]
 801227a:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	3305      	adds	r3, #5
 8012280:	687a      	ldr	r2, [r7, #4]
 8012282:	b292      	uxth	r2, r2
 8012284:	68b9      	ldr	r1, [r7, #8]
 8012286:	4618      	mov	r0, r3
 8012288:	f004 f891 	bl	80163ae <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 801228c:	7bfb      	ldrb	r3, [r7, #15]
 801228e:	4618      	mov	r0, r3
 8012290:	f7ff ffa9 	bl	80121e6 <IsSticky>
 8012294:	4603      	mov	r3, r0
 8012296:	461a      	mov	r2, r3
 8012298:	697b      	ldr	r3, [r7, #20]
 801229a:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 801229c:	4b06      	ldr	r3, [pc, #24]	; (80122b8 <LoRaMacCommandsAddCmd+0x88>)
 801229e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	4413      	add	r3, r2
 80122a6:	3301      	adds	r3, #1
 80122a8:	4a03      	ldr	r2, [pc, #12]	; (80122b8 <LoRaMacCommandsAddCmd+0x88>)
 80122aa:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 80122ae:	2300      	movs	r3, #0
}
 80122b0:	4618      	mov	r0, r3
 80122b2:	3718      	adds	r7, #24
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd80      	pop	{r7, pc}
 80122b8:	200019fc 	.word	0x200019fc

080122bc <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b082      	sub	sp, #8
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d101      	bne.n	80122ce <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80122ca:	2301      	movs	r3, #1
 80122cc:	e021      	b.n	8012312 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80122ce:	6879      	ldr	r1, [r7, #4]
 80122d0:	4812      	ldr	r0, [pc, #72]	; (801231c <LoRaMacCommandsRemoveCmd+0x60>)
 80122d2:	f7ff ff56 	bl	8012182 <LinkedListRemove>
 80122d6:	4603      	mov	r3, r0
 80122d8:	f083 0301 	eor.w	r3, r3, #1
 80122dc:	b2db      	uxtb	r3, r3
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d001      	beq.n	80122e6 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80122e2:	2303      	movs	r3, #3
 80122e4:	e015      	b.n	8012312 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80122e6:	4b0d      	ldr	r3, [pc, #52]	; (801231c <LoRaMacCommandsRemoveCmd+0x60>)
 80122e8:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	689b      	ldr	r3, [r3, #8]
 80122f0:	1ad3      	subs	r3, r2, r3
 80122f2:	3b01      	subs	r3, #1
 80122f4:	4a09      	ldr	r2, [pc, #36]	; (801231c <LoRaMacCommandsRemoveCmd+0x60>)
 80122f6:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80122fa:	6878      	ldr	r0, [r7, #4]
 80122fc:	f7ff fec8 	bl	8012090 <FreeMacCommandSlot>
 8012300:	4603      	mov	r3, r0
 8012302:	f083 0301 	eor.w	r3, r3, #1
 8012306:	b2db      	uxtb	r3, r3
 8012308:	2b00      	cmp	r3, #0
 801230a:	d001      	beq.n	8012310 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 801230c:	2305      	movs	r3, #5
 801230e:	e000      	b.n	8012312 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012310:	2300      	movs	r3, #0
}
 8012312:	4618      	mov	r0, r3
 8012314:	3708      	adds	r7, #8
 8012316:	46bd      	mov	sp, r7
 8012318:	bd80      	pop	{r7, pc}
 801231a:	bf00      	nop
 801231c:	200019fc 	.word	0x200019fc

08012320 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b082      	sub	sp, #8
 8012324:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012326:	4b0f      	ldr	r3, [pc, #60]	; (8012364 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801232c:	e012      	b.n	8012354 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	7b1b      	ldrb	r3, [r3, #12]
 8012332:	f083 0301 	eor.w	r3, r3, #1
 8012336:	b2db      	uxtb	r3, r3
 8012338:	2b00      	cmp	r3, #0
 801233a:	d008      	beq.n	801234e <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8012342:	6878      	ldr	r0, [r7, #4]
 8012344:	f7ff ffba 	bl	80122bc <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8012348:	683b      	ldr	r3, [r7, #0]
 801234a:	607b      	str	r3, [r7, #4]
 801234c:	e002      	b.n	8012354 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d1e9      	bne.n	801232e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801235a:	2300      	movs	r3, #0
}
 801235c:	4618      	mov	r0, r3
 801235e:	3708      	adds	r7, #8
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}
 8012364:	200019fc 	.word	0x200019fc

08012368 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b082      	sub	sp, #8
 801236c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801236e:	4b0e      	ldr	r3, [pc, #56]	; (80123a8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012374:	e00f      	b.n	8012396 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	791b      	ldrb	r3, [r3, #4]
 8012380:	4618      	mov	r0, r3
 8012382:	f7ff ff30 	bl	80121e6 <IsSticky>
 8012386:	4603      	mov	r3, r0
 8012388:	2b00      	cmp	r3, #0
 801238a:	d002      	beq.n	8012392 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 801238c:	6878      	ldr	r0, [r7, #4]
 801238e:	f7ff ff95 	bl	80122bc <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8012392:	683b      	ldr	r3, [r7, #0]
 8012394:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d1ec      	bne.n	8012376 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801239c:	2300      	movs	r3, #0
}
 801239e:	4618      	mov	r0, r3
 80123a0:	3708      	adds	r7, #8
 80123a2:	46bd      	mov	sp, r7
 80123a4:	bd80      	pop	{r7, pc}
 80123a6:	bf00      	nop
 80123a8:	200019fc 	.word	0x200019fc

080123ac <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80123ac:	b480      	push	{r7}
 80123ae:	b083      	sub	sp, #12
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d101      	bne.n	80123be <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80123ba:	2301      	movs	r3, #1
 80123bc:	e005      	b.n	80123ca <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80123be:	4b05      	ldr	r3, [pc, #20]	; (80123d4 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80123c0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80123c8:	2300      	movs	r3, #0
}
 80123ca:	4618      	mov	r0, r3
 80123cc:	370c      	adds	r7, #12
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bc80      	pop	{r7}
 80123d2:	4770      	bx	lr
 80123d4:	200019fc 	.word	0x200019fc

080123d8 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b088      	sub	sp, #32
 80123dc:	af00      	add	r7, sp, #0
 80123de:	60f8      	str	r0, [r7, #12]
 80123e0:	60b9      	str	r1, [r7, #8]
 80123e2:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80123e4:	4b25      	ldr	r3, [pc, #148]	; (801247c <LoRaMacCommandsSerializeCmds+0xa4>)
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80123ea:	2300      	movs	r3, #0
 80123ec:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d002      	beq.n	80123fa <LoRaMacCommandsSerializeCmds+0x22>
 80123f4:	68bb      	ldr	r3, [r7, #8]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d126      	bne.n	8012448 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80123fa:	2301      	movs	r3, #1
 80123fc:	e039      	b.n	8012472 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80123fe:	7efb      	ldrb	r3, [r7, #27]
 8012400:	68fa      	ldr	r2, [r7, #12]
 8012402:	1ad2      	subs	r2, r2, r3
 8012404:	69fb      	ldr	r3, [r7, #28]
 8012406:	689b      	ldr	r3, [r3, #8]
 8012408:	3301      	adds	r3, #1
 801240a:	429a      	cmp	r2, r3
 801240c:	d320      	bcc.n	8012450 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 801240e:	7efb      	ldrb	r3, [r7, #27]
 8012410:	1c5a      	adds	r2, r3, #1
 8012412:	76fa      	strb	r2, [r7, #27]
 8012414:	461a      	mov	r2, r3
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	4413      	add	r3, r2
 801241a:	69fa      	ldr	r2, [r7, #28]
 801241c:	7912      	ldrb	r2, [r2, #4]
 801241e:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8012420:	7efb      	ldrb	r3, [r7, #27]
 8012422:	687a      	ldr	r2, [r7, #4]
 8012424:	18d0      	adds	r0, r2, r3
 8012426:	69fb      	ldr	r3, [r7, #28]
 8012428:	1d59      	adds	r1, r3, #5
 801242a:	69fb      	ldr	r3, [r7, #28]
 801242c:	689b      	ldr	r3, [r3, #8]
 801242e:	b29b      	uxth	r3, r3
 8012430:	461a      	mov	r2, r3
 8012432:	f003 ffbc 	bl	80163ae <memcpy1>
            itr += curElement->PayloadSize;
 8012436:	69fb      	ldr	r3, [r7, #28]
 8012438:	689b      	ldr	r3, [r3, #8]
 801243a:	b2da      	uxtb	r2, r3
 801243c:	7efb      	ldrb	r3, [r7, #27]
 801243e:	4413      	add	r3, r2
 8012440:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8012442:	69fb      	ldr	r3, [r7, #28]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012448:	69fb      	ldr	r3, [r7, #28]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d1d7      	bne.n	80123fe <LoRaMacCommandsSerializeCmds+0x26>
 801244e:	e009      	b.n	8012464 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8012450:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8012452:	e007      	b.n	8012464 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8012454:	69fb      	ldr	r3, [r7, #28]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 801245a:	69f8      	ldr	r0, [r7, #28]
 801245c:	f7ff ff2e 	bl	80122bc <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8012460:	697b      	ldr	r3, [r7, #20]
 8012462:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012464:	69fb      	ldr	r3, [r7, #28]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d1f4      	bne.n	8012454 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 801246a:	68b8      	ldr	r0, [r7, #8]
 801246c:	f7ff ff9e 	bl	80123ac <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8012470:	2300      	movs	r3, #0
}
 8012472:	4618      	mov	r0, r3
 8012474:	3720      	adds	r7, #32
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}
 801247a:	bf00      	nop
 801247c:	200019fc 	.word	0x200019fc

08012480 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8012480:	b480      	push	{r7}
 8012482:	b085      	sub	sp, #20
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d101      	bne.n	8012492 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801248e:	2301      	movs	r3, #1
 8012490:	e016      	b.n	80124c0 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8012492:	4b0e      	ldr	r3, [pc, #56]	; (80124cc <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2200      	movs	r2, #0
 801249c:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 801249e:	e00b      	b.n	80124b8 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	7b1b      	ldrb	r3, [r3, #12]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d004      	beq.n	80124b2 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	2201      	movs	r2, #1
 80124ac:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80124ae:	2300      	movs	r3, #0
 80124b0:	e006      	b.n	80124c0 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d1f0      	bne.n	80124a0 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80124be:	2300      	movs	r3, #0
}
 80124c0:	4618      	mov	r0, r3
 80124c2:	3714      	adds	r7, #20
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bc80      	pop	{r7}
 80124c8:	4770      	bx	lr
 80124ca:	bf00      	nop
 80124cc:	200019fc 	.word	0x200019fc

080124d0 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80124d0:	b480      	push	{r7}
 80124d2:	b085      	sub	sp, #20
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	4603      	mov	r3, r0
 80124d8:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 80124da:	2300      	movs	r3, #0
 80124dc:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 80124de:	79fb      	ldrb	r3, [r7, #7]
 80124e0:	3b02      	subs	r3, #2
 80124e2:	2b11      	cmp	r3, #17
 80124e4:	d850      	bhi.n	8012588 <LoRaMacCommandsGetCmdSize+0xb8>
 80124e6:	a201      	add	r2, pc, #4	; (adr r2, 80124ec <LoRaMacCommandsGetCmdSize+0x1c>)
 80124e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124ec:	08012535 	.word	0x08012535
 80124f0:	0801253b 	.word	0x0801253b
 80124f4:	08012541 	.word	0x08012541
 80124f8:	08012547 	.word	0x08012547
 80124fc:	0801254d 	.word	0x0801254d
 8012500:	08012553 	.word	0x08012553
 8012504:	08012559 	.word	0x08012559
 8012508:	0801255f 	.word	0x0801255f
 801250c:	08012565 	.word	0x08012565
 8012510:	08012589 	.word	0x08012589
 8012514:	08012589 	.word	0x08012589
 8012518:	0801256b 	.word	0x0801256b
 801251c:	08012589 	.word	0x08012589
 8012520:	08012589 	.word	0x08012589
 8012524:	08012571 	.word	0x08012571
 8012528:	08012577 	.word	0x08012577
 801252c:	0801257d 	.word	0x0801257d
 8012530:	08012583 	.word	0x08012583
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8012534:	2303      	movs	r3, #3
 8012536:	73fb      	strb	r3, [r7, #15]
            break;
 8012538:	e027      	b.n	801258a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 801253a:	2305      	movs	r3, #5
 801253c:	73fb      	strb	r3, [r7, #15]
            break;
 801253e:	e024      	b.n	801258a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8012540:	2302      	movs	r3, #2
 8012542:	73fb      	strb	r3, [r7, #15]
            break;
 8012544:	e021      	b.n	801258a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8012546:	2305      	movs	r3, #5
 8012548:	73fb      	strb	r3, [r7, #15]
            break;
 801254a:	e01e      	b.n	801258a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 801254c:	2301      	movs	r3, #1
 801254e:	73fb      	strb	r3, [r7, #15]
            break;
 8012550:	e01b      	b.n	801258a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8012552:	2306      	movs	r3, #6
 8012554:	73fb      	strb	r3, [r7, #15]
            break;
 8012556:	e018      	b.n	801258a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8012558:	2302      	movs	r3, #2
 801255a:	73fb      	strb	r3, [r7, #15]
            break;
 801255c:	e015      	b.n	801258a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 801255e:	2302      	movs	r3, #2
 8012560:	73fb      	strb	r3, [r7, #15]
            break;
 8012562:	e012      	b.n	801258a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8012564:	2305      	movs	r3, #5
 8012566:	73fb      	strb	r3, [r7, #15]
            break;
 8012568:	e00f      	b.n	801258a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 801256a:	2306      	movs	r3, #6
 801256c:	73fb      	strb	r3, [r7, #15]
            break;
 801256e:	e00c      	b.n	801258a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8012570:	2301      	movs	r3, #1
 8012572:	73fb      	strb	r3, [r7, #15]
            break;
 8012574:	e009      	b.n	801258a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8012576:	2305      	movs	r3, #5
 8012578:	73fb      	strb	r3, [r7, #15]
            break;
 801257a:	e006      	b.n	801258a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 801257c:	2304      	movs	r3, #4
 801257e:	73fb      	strb	r3, [r7, #15]
            break;
 8012580:	e003      	b.n	801258a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8012582:	2304      	movs	r3, #4
 8012584:	73fb      	strb	r3, [r7, #15]
            break;
 8012586:	e000      	b.n	801258a <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8012588:	bf00      	nop
        }
    }
    return cidSize;
 801258a:	7bfb      	ldrb	r3, [r7, #15]
}
 801258c:	4618      	mov	r0, r3
 801258e:	3714      	adds	r7, #20
 8012590:	46bd      	mov	sp, r7
 8012592:	bc80      	pop	{r7}
 8012594:	4770      	bx	lr
 8012596:	bf00      	nop

08012598 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8012598:	b480      	push	{r7}
 801259a:	b083      	sub	sp, #12
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	4a07      	ldr	r2, [pc, #28]	; (80125c0 <IncreaseBufferPointer+0x28>)
 80125a4:	4293      	cmp	r3, r2
 80125a6:	d102      	bne.n	80125ae <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80125a8:	4b06      	ldr	r3, [pc, #24]	; (80125c4 <IncreaseBufferPointer+0x2c>)
 80125aa:	607b      	str	r3, [r7, #4]
 80125ac:	e002      	b.n	80125b4 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	3304      	adds	r3, #4
 80125b2:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80125b4:	687b      	ldr	r3, [r7, #4]
}
 80125b6:	4618      	mov	r0, r3
 80125b8:	370c      	adds	r7, #12
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bc80      	pop	{r7}
 80125be:	4770      	bx	lr
 80125c0:	20001b14 	.word	0x20001b14
 80125c4:	20001b04 	.word	0x20001b04

080125c8 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 80125c8:	b480      	push	{r7}
 80125ca:	b083      	sub	sp, #12
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	4603      	mov	r3, r0
 80125d0:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 80125d2:	79fb      	ldrb	r3, [r7, #7]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d101      	bne.n	80125dc <IsListEmpty+0x14>
    {
        return true;
 80125d8:	2301      	movs	r3, #1
 80125da:	e000      	b.n	80125de <IsListEmpty+0x16>
    }
    return false;
 80125dc:	2300      	movs	r3, #0
}
 80125de:	4618      	mov	r0, r3
 80125e0:	370c      	adds	r7, #12
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bc80      	pop	{r7}
 80125e6:	4770      	bx	lr

080125e8 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 80125e8:	b480      	push	{r7}
 80125ea:	b083      	sub	sp, #12
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	4603      	mov	r3, r0
 80125f0:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80125f2:	79fb      	ldrb	r3, [r7, #7]
 80125f4:	2b04      	cmp	r3, #4
 80125f6:	d901      	bls.n	80125fc <IsListFull+0x14>
    {
        return true;
 80125f8:	2301      	movs	r3, #1
 80125fa:	e000      	b.n	80125fe <IsListFull+0x16>
    }
    return false;
 80125fc:	2300      	movs	r3, #0
}
 80125fe:	4618      	mov	r0, r3
 8012600:	370c      	adds	r7, #12
 8012602:	46bd      	mov	sp, r7
 8012604:	bc80      	pop	{r7}
 8012606:	4770      	bx	lr

08012608 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b086      	sub	sp, #24
 801260c:	af00      	add	r7, sp, #0
 801260e:	4603      	mov	r3, r0
 8012610:	60b9      	str	r1, [r7, #8]
 8012612:	607a      	str	r2, [r7, #4]
 8012614:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8012616:	68bb      	ldr	r3, [r7, #8]
 8012618:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801261a:	4b13      	ldr	r3, [pc, #76]	; (8012668 <GetElement+0x60>)
 801261c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012620:	4618      	mov	r0, r3
 8012622:	f7ff ffd1 	bl	80125c8 <IsListEmpty>
 8012626:	4603      	mov	r3, r0
 8012628:	2b00      	cmp	r3, #0
 801262a:	d001      	beq.n	8012630 <GetElement+0x28>
    {
        return NULL;
 801262c:	2300      	movs	r3, #0
 801262e:	e017      	b.n	8012660 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012630:	2300      	movs	r3, #0
 8012632:	74fb      	strb	r3, [r7, #19]
 8012634:	e00d      	b.n	8012652 <GetElement+0x4a>
    {
        if( element->Request == request )
 8012636:	697b      	ldr	r3, [r7, #20]
 8012638:	781b      	ldrb	r3, [r3, #0]
 801263a:	7bfa      	ldrb	r2, [r7, #15]
 801263c:	429a      	cmp	r2, r3
 801263e:	d101      	bne.n	8012644 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8012640:	697b      	ldr	r3, [r7, #20]
 8012642:	e00d      	b.n	8012660 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8012644:	6978      	ldr	r0, [r7, #20]
 8012646:	f7ff ffa7 	bl	8012598 <IncreaseBufferPointer>
 801264a:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 801264c:	7cfb      	ldrb	r3, [r7, #19]
 801264e:	3301      	adds	r3, #1
 8012650:	74fb      	strb	r3, [r7, #19]
 8012652:	4b05      	ldr	r3, [pc, #20]	; (8012668 <GetElement+0x60>)
 8012654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012658:	7cfa      	ldrb	r2, [r7, #19]
 801265a:	429a      	cmp	r2, r3
 801265c:	d3eb      	bcc.n	8012636 <GetElement+0x2e>
    }

    return NULL;
 801265e:	2300      	movs	r3, #0
}
 8012660:	4618      	mov	r0, r3
 8012662:	3718      	adds	r7, #24
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}
 8012668:	20001af8 	.word	0x20001af8

0801266c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b082      	sub	sp, #8
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8012674:	4a0c      	ldr	r2, [pc, #48]	; (80126a8 <LoRaMacConfirmQueueInit+0x3c>)
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801267a:	4b0b      	ldr	r3, [pc, #44]	; (80126a8 <LoRaMacConfirmQueueInit+0x3c>)
 801267c:	2200      	movs	r2, #0
 801267e:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012682:	4b09      	ldr	r3, [pc, #36]	; (80126a8 <LoRaMacConfirmQueueInit+0x3c>)
 8012684:	4a09      	ldr	r2, [pc, #36]	; (80126ac <LoRaMacConfirmQueueInit+0x40>)
 8012686:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012688:	4b07      	ldr	r3, [pc, #28]	; (80126a8 <LoRaMacConfirmQueueInit+0x3c>)
 801268a:	4a08      	ldr	r2, [pc, #32]	; (80126ac <LoRaMacConfirmQueueInit+0x40>)
 801268c:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 801268e:	2214      	movs	r2, #20
 8012690:	21ff      	movs	r1, #255	; 0xff
 8012692:	4806      	ldr	r0, [pc, #24]	; (80126ac <LoRaMacConfirmQueueInit+0x40>)
 8012694:	f003 fec6 	bl	8016424 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012698:	4b03      	ldr	r3, [pc, #12]	; (80126a8 <LoRaMacConfirmQueueInit+0x3c>)
 801269a:	2201      	movs	r2, #1
 801269c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80126a0:	bf00      	nop
 80126a2:	3708      	adds	r7, #8
 80126a4:	46bd      	mov	sp, r7
 80126a6:	bd80      	pop	{r7, pc}
 80126a8:	20001af8 	.word	0x20001af8
 80126ac:	20001b04 	.word	0x20001b04

080126b0 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b082      	sub	sp, #8
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80126b8:	4b19      	ldr	r3, [pc, #100]	; (8012720 <LoRaMacConfirmQueueAdd+0x70>)
 80126ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80126be:	4618      	mov	r0, r3
 80126c0:	f7ff ff92 	bl	80125e8 <IsListFull>
 80126c4:	4603      	mov	r3, r0
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d001      	beq.n	80126ce <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80126ca:	2300      	movs	r3, #0
 80126cc:	e023      	b.n	8012716 <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80126ce:	4b14      	ldr	r3, [pc, #80]	; (8012720 <LoRaMacConfirmQueueAdd+0x70>)
 80126d0:	689b      	ldr	r3, [r3, #8]
 80126d2:	687a      	ldr	r2, [r7, #4]
 80126d4:	7812      	ldrb	r2, [r2, #0]
 80126d6:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80126d8:	4b11      	ldr	r3, [pc, #68]	; (8012720 <LoRaMacConfirmQueueAdd+0x70>)
 80126da:	689b      	ldr	r3, [r3, #8]
 80126dc:	687a      	ldr	r2, [r7, #4]
 80126de:	7852      	ldrb	r2, [r2, #1]
 80126e0:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80126e2:	4b0f      	ldr	r3, [pc, #60]	; (8012720 <LoRaMacConfirmQueueAdd+0x70>)
 80126e4:	689b      	ldr	r3, [r3, #8]
 80126e6:	687a      	ldr	r2, [r7, #4]
 80126e8:	78d2      	ldrb	r2, [r2, #3]
 80126ea:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 80126ec:	4b0c      	ldr	r3, [pc, #48]	; (8012720 <LoRaMacConfirmQueueAdd+0x70>)
 80126ee:	689b      	ldr	r3, [r3, #8]
 80126f0:	2200      	movs	r2, #0
 80126f2:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80126f4:	4b0a      	ldr	r3, [pc, #40]	; (8012720 <LoRaMacConfirmQueueAdd+0x70>)
 80126f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80126fa:	3301      	adds	r3, #1
 80126fc:	b2da      	uxtb	r2, r3
 80126fe:	4b08      	ldr	r3, [pc, #32]	; (8012720 <LoRaMacConfirmQueueAdd+0x70>)
 8012700:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8012704:	4b06      	ldr	r3, [pc, #24]	; (8012720 <LoRaMacConfirmQueueAdd+0x70>)
 8012706:	689b      	ldr	r3, [r3, #8]
 8012708:	4618      	mov	r0, r3
 801270a:	f7ff ff45 	bl	8012598 <IncreaseBufferPointer>
 801270e:	4603      	mov	r3, r0
 8012710:	4a03      	ldr	r2, [pc, #12]	; (8012720 <LoRaMacConfirmQueueAdd+0x70>)
 8012712:	6093      	str	r3, [r2, #8]

    return true;
 8012714:	2301      	movs	r3, #1
}
 8012716:	4618      	mov	r0, r3
 8012718:	3708      	adds	r7, #8
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}
 801271e:	bf00      	nop
 8012720:	20001af8 	.word	0x20001af8

08012724 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8012724:	b580      	push	{r7, lr}
 8012726:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012728:	4b0e      	ldr	r3, [pc, #56]	; (8012764 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801272a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801272e:	4618      	mov	r0, r3
 8012730:	f7ff ff4a 	bl	80125c8 <IsListEmpty>
 8012734:	4603      	mov	r3, r0
 8012736:	2b00      	cmp	r3, #0
 8012738:	d001      	beq.n	801273e <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801273a:	2300      	movs	r3, #0
 801273c:	e010      	b.n	8012760 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 801273e:	4b09      	ldr	r3, [pc, #36]	; (8012764 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012744:	3b01      	subs	r3, #1
 8012746:	b2da      	uxtb	r2, r3
 8012748:	4b06      	ldr	r3, [pc, #24]	; (8012764 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801274a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 801274e:	4b05      	ldr	r3, [pc, #20]	; (8012764 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012750:	685b      	ldr	r3, [r3, #4]
 8012752:	4618      	mov	r0, r3
 8012754:	f7ff ff20 	bl	8012598 <IncreaseBufferPointer>
 8012758:	4603      	mov	r3, r0
 801275a:	4a02      	ldr	r2, [pc, #8]	; (8012764 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801275c:	6053      	str	r3, [r2, #4]

    return true;
 801275e:	2301      	movs	r3, #1
}
 8012760:	4618      	mov	r0, r3
 8012762:	bd80      	pop	{r7, pc}
 8012764:	20001af8 	.word	0x20001af8

08012768 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b084      	sub	sp, #16
 801276c:	af00      	add	r7, sp, #0
 801276e:	4603      	mov	r3, r0
 8012770:	460a      	mov	r2, r1
 8012772:	71fb      	strb	r3, [r7, #7]
 8012774:	4613      	mov	r3, r2
 8012776:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8012778:	2300      	movs	r3, #0
 801277a:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801277c:	4b10      	ldr	r3, [pc, #64]	; (80127c0 <LoRaMacConfirmQueueSetStatus+0x58>)
 801277e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012782:	4618      	mov	r0, r3
 8012784:	f7ff ff20 	bl	80125c8 <IsListEmpty>
 8012788:	4603      	mov	r3, r0
 801278a:	f083 0301 	eor.w	r3, r3, #1
 801278e:	b2db      	uxtb	r3, r3
 8012790:	2b00      	cmp	r3, #0
 8012792:	d011      	beq.n	80127b8 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012794:	4b0a      	ldr	r3, [pc, #40]	; (80127c0 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012796:	6859      	ldr	r1, [r3, #4]
 8012798:	4b09      	ldr	r3, [pc, #36]	; (80127c0 <LoRaMacConfirmQueueSetStatus+0x58>)
 801279a:	689a      	ldr	r2, [r3, #8]
 801279c:	79bb      	ldrb	r3, [r7, #6]
 801279e:	4618      	mov	r0, r3
 80127a0:	f7ff ff32 	bl	8012608 <GetElement>
 80127a4:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d005      	beq.n	80127b8 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	79fa      	ldrb	r2, [r7, #7]
 80127b0:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	2201      	movs	r2, #1
 80127b6:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80127b8:	bf00      	nop
 80127ba:	3710      	adds	r7, #16
 80127bc:	46bd      	mov	sp, r7
 80127be:	bd80      	pop	{r7, pc}
 80127c0:	20001af8 	.word	0x20001af8

080127c4 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80127c4:	b580      	push	{r7, lr}
 80127c6:	b084      	sub	sp, #16
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	4603      	mov	r3, r0
 80127cc:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80127ce:	2300      	movs	r3, #0
 80127d0:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80127d2:	4b10      	ldr	r3, [pc, #64]	; (8012814 <LoRaMacConfirmQueueGetStatus+0x50>)
 80127d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80127d8:	4618      	mov	r0, r3
 80127da:	f7ff fef5 	bl	80125c8 <IsListEmpty>
 80127de:	4603      	mov	r3, r0
 80127e0:	f083 0301 	eor.w	r3, r3, #1
 80127e4:	b2db      	uxtb	r3, r3
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d00e      	beq.n	8012808 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80127ea:	4b0a      	ldr	r3, [pc, #40]	; (8012814 <LoRaMacConfirmQueueGetStatus+0x50>)
 80127ec:	6859      	ldr	r1, [r3, #4]
 80127ee:	4b09      	ldr	r3, [pc, #36]	; (8012814 <LoRaMacConfirmQueueGetStatus+0x50>)
 80127f0:	689a      	ldr	r2, [r3, #8]
 80127f2:	79fb      	ldrb	r3, [r7, #7]
 80127f4:	4618      	mov	r0, r3
 80127f6:	f7ff ff07 	bl	8012608 <GetElement>
 80127fa:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d002      	beq.n	8012808 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	785b      	ldrb	r3, [r3, #1]
 8012806:	e000      	b.n	801280a <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012808:	2301      	movs	r3, #1
}
 801280a:	4618      	mov	r0, r3
 801280c:	3710      	adds	r7, #16
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}
 8012812:	bf00      	nop
 8012814:	20001af8 	.word	0x20001af8

08012818 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b084      	sub	sp, #16
 801281c:	af00      	add	r7, sp, #0
 801281e:	4603      	mov	r3, r0
 8012820:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8012822:	4b16      	ldr	r3, [pc, #88]	; (801287c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012824:	685b      	ldr	r3, [r3, #4]
 8012826:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8012828:	4a14      	ldr	r2, [pc, #80]	; (801287c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801282a:	79fb      	ldrb	r3, [r7, #7]
 801282c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012830:	4b12      	ldr	r3, [pc, #72]	; (801287c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012832:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012836:	4618      	mov	r0, r3
 8012838:	f7ff fec6 	bl	80125c8 <IsListEmpty>
 801283c:	4603      	mov	r3, r0
 801283e:	f083 0301 	eor.w	r3, r3, #1
 8012842:	b2db      	uxtb	r3, r3
 8012844:	2b00      	cmp	r3, #0
 8012846:	d015      	beq.n	8012874 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	79fa      	ldrb	r2, [r7, #7]
 801284c:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	78db      	ldrb	r3, [r3, #3]
 8012852:	f083 0301 	eor.w	r3, r3, #1
 8012856:	b2db      	uxtb	r3, r3
 8012858:	2b00      	cmp	r3, #0
 801285a:	d002      	beq.n	8012862 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	2201      	movs	r2, #1
 8012860:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8012862:	68f8      	ldr	r0, [r7, #12]
 8012864:	f7ff fe98 	bl	8012598 <IncreaseBufferPointer>
 8012868:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 801286a:	4b04      	ldr	r3, [pc, #16]	; (801287c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801286c:	689b      	ldr	r3, [r3, #8]
 801286e:	68fa      	ldr	r2, [r7, #12]
 8012870:	429a      	cmp	r2, r3
 8012872:	d1e9      	bne.n	8012848 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8012874:	bf00      	nop
 8012876:	3710      	adds	r7, #16
 8012878:	46bd      	mov	sp, r7
 801287a:	bd80      	pop	{r7, pc}
 801287c:	20001af8 	.word	0x20001af8

08012880 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b082      	sub	sp, #8
 8012884:	af00      	add	r7, sp, #0
 8012886:	4603      	mov	r3, r0
 8012888:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 801288a:	4b09      	ldr	r3, [pc, #36]	; (80128b0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 801288c:	6859      	ldr	r1, [r3, #4]
 801288e:	4b08      	ldr	r3, [pc, #32]	; (80128b0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012890:	689a      	ldr	r2, [r3, #8]
 8012892:	79fb      	ldrb	r3, [r7, #7]
 8012894:	4618      	mov	r0, r3
 8012896:	f7ff feb7 	bl	8012608 <GetElement>
 801289a:	4603      	mov	r3, r0
 801289c:	2b00      	cmp	r3, #0
 801289e:	d001      	beq.n	80128a4 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80128a0:	2301      	movs	r3, #1
 80128a2:	e000      	b.n	80128a6 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80128a4:	2300      	movs	r3, #0
}
 80128a6:	4618      	mov	r0, r3
 80128a8:	3708      	adds	r7, #8
 80128aa:	46bd      	mov	sp, r7
 80128ac:	bd80      	pop	{r7, pc}
 80128ae:	bf00      	nop
 80128b0:	20001af8 	.word	0x20001af8

080128b4 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b084      	sub	sp, #16
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80128bc:	4b22      	ldr	r3, [pc, #136]	; (8012948 <LoRaMacConfirmQueueHandleCb+0x94>)
 80128be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80128c2:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80128c4:	2300      	movs	r3, #0
 80128c6:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 80128c8:	2300      	movs	r3, #0
 80128ca:	73fb      	strb	r3, [r7, #15]
 80128cc:	e032      	b.n	8012934 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80128ce:	4b1e      	ldr	r3, [pc, #120]	; (8012948 <LoRaMacConfirmQueueHandleCb+0x94>)
 80128d0:	685b      	ldr	r3, [r3, #4]
 80128d2:	781a      	ldrb	r2, [r3, #0]
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80128d8:	4b1b      	ldr	r3, [pc, #108]	; (8012948 <LoRaMacConfirmQueueHandleCb+0x94>)
 80128da:	685b      	ldr	r3, [r3, #4]
 80128dc:	785a      	ldrb	r2, [r3, #1]
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80128e2:	4b19      	ldr	r3, [pc, #100]	; (8012948 <LoRaMacConfirmQueueHandleCb+0x94>)
 80128e4:	685b      	ldr	r3, [r3, #4]
 80128e6:	789b      	ldrb	r3, [r3, #2]
 80128e8:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80128ea:	7b7b      	ldrb	r3, [r7, #13]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d005      	beq.n	80128fc <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80128f0:	4b15      	ldr	r3, [pc, #84]	; (8012948 <LoRaMacConfirmQueueHandleCb+0x94>)
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	689b      	ldr	r3, [r3, #8]
 80128f6:	6878      	ldr	r0, [r7, #4]
 80128f8:	4798      	blx	r3
 80128fa:	e00b      	b.n	8012914 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80128fc:	4b12      	ldr	r3, [pc, #72]	; (8012948 <LoRaMacConfirmQueueHandleCb+0x94>)
 80128fe:	685b      	ldr	r3, [r3, #4]
 8012900:	781b      	ldrb	r3, [r3, #0]
 8012902:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8012904:	4b10      	ldr	r3, [pc, #64]	; (8012948 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012906:	685b      	ldr	r3, [r3, #4]
 8012908:	785b      	ldrb	r3, [r3, #1]
 801290a:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801290c:	4b0e      	ldr	r3, [pc, #56]	; (8012948 <LoRaMacConfirmQueueHandleCb+0x94>)
 801290e:	685b      	ldr	r3, [r3, #4]
 8012910:	78db      	ldrb	r3, [r3, #3]
 8012912:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8012914:	f7ff ff06 	bl	8012724 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8012918:	7b7b      	ldrb	r3, [r7, #13]
 801291a:	f083 0301 	eor.w	r3, r3, #1
 801291e:	b2db      	uxtb	r3, r3
 8012920:	2b00      	cmp	r3, #0
 8012922:	d004      	beq.n	801292e <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8012924:	f107 0308 	add.w	r3, r7, #8
 8012928:	4618      	mov	r0, r3
 801292a:	f7ff fec1 	bl	80126b0 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 801292e:	7bfb      	ldrb	r3, [r7, #15]
 8012930:	3301      	adds	r3, #1
 8012932:	73fb      	strb	r3, [r7, #15]
 8012934:	7bfa      	ldrb	r2, [r7, #15]
 8012936:	7bbb      	ldrb	r3, [r7, #14]
 8012938:	429a      	cmp	r2, r3
 801293a:	d3c8      	bcc.n	80128ce <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 801293c:	bf00      	nop
 801293e:	bf00      	nop
 8012940:	3710      	adds	r7, #16
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}
 8012946:	bf00      	nop
 8012948:	20001af8 	.word	0x20001af8

0801294c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 801294c:	b480      	push	{r7}
 801294e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012950:	4b03      	ldr	r3, [pc, #12]	; (8012960 <LoRaMacConfirmQueueGetCnt+0x14>)
 8012952:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8012956:	4618      	mov	r0, r3
 8012958:	46bd      	mov	sp, r7
 801295a:	bc80      	pop	{r7}
 801295c:	4770      	bx	lr
 801295e:	bf00      	nop
 8012960:	20001af8 	.word	0x20001af8

08012964 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8012964:	b580      	push	{r7, lr}
 8012966:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012968:	4b06      	ldr	r3, [pc, #24]	; (8012984 <LoRaMacConfirmQueueIsFull+0x20>)
 801296a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801296e:	4618      	mov	r0, r3
 8012970:	f7ff fe3a 	bl	80125e8 <IsListFull>
 8012974:	4603      	mov	r3, r0
 8012976:	2b00      	cmp	r3, #0
 8012978:	d001      	beq.n	801297e <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 801297a:	2301      	movs	r3, #1
 801297c:	e000      	b.n	8012980 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 801297e:	2300      	movs	r3, #0
    }
}
 8012980:	4618      	mov	r0, r3
 8012982:	bd80      	pop	{r7, pc}
 8012984:	20001af8 	.word	0x20001af8

08012988 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b08e      	sub	sp, #56	; 0x38
 801298c:	af00      	add	r7, sp, #0
 801298e:	60f8      	str	r0, [r7, #12]
 8012990:	607b      	str	r3, [r7, #4]
 8012992:	460b      	mov	r3, r1
 8012994:	817b      	strh	r3, [r7, #10]
 8012996:	4613      	mov	r3, r2
 8012998:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d101      	bne.n	80129a4 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80129a0:	230a      	movs	r3, #10
 80129a2:	e086      	b.n	8012ab2 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80129a4:	2300      	movs	r3, #0
 80129a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 80129aa:	2301      	movs	r3, #1
 80129ac:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 80129ae:	2300      	movs	r3, #0
 80129b0:	623b      	str	r3, [r7, #32]
 80129b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80129b6:	2200      	movs	r2, #0
 80129b8:	601a      	str	r2, [r3, #0]
 80129ba:	605a      	str	r2, [r3, #4]
 80129bc:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80129be:	2300      	movs	r3, #0
 80129c0:	613b      	str	r3, [r7, #16]
 80129c2:	f107 0314 	add.w	r3, r7, #20
 80129c6:	2200      	movs	r2, #0
 80129c8:	601a      	str	r2, [r3, #0]
 80129ca:	605a      	str	r2, [r3, #4]
 80129cc:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 80129ce:	2301      	movs	r3, #1
 80129d0:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80129d2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80129d6:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	b2db      	uxtb	r3, r3
 80129dc:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	0a1b      	lsrs	r3, r3, #8
 80129e2:	b2db      	uxtb	r3, r3
 80129e4:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	0c1b      	lsrs	r3, r3, #16
 80129ea:	b2db      	uxtb	r3, r3
 80129ec:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	0e1b      	lsrs	r3, r3, #24
 80129f2:	b2db      	uxtb	r3, r3
 80129f4:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80129f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129f8:	b2db      	uxtb	r3, r3
 80129fa:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80129fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129fe:	0a1b      	lsrs	r3, r3, #8
 8012a00:	b2db      	uxtb	r3, r3
 8012a02:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8012a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a06:	0c1b      	lsrs	r3, r3, #16
 8012a08:	b2db      	uxtb	r3, r3
 8012a0a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8012a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a0e:	0e1b      	lsrs	r3, r3, #24
 8012a10:	b2db      	uxtb	r3, r3
 8012a12:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8012a14:	e048      	b.n	8012aa8 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8012a16:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012a18:	b2db      	uxtb	r3, r3
 8012a1a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8012a1c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012a1e:	3301      	adds	r3, #1
 8012a20:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8012a22:	f107 0320 	add.w	r3, r7, #32
 8012a26:	7a7a      	ldrb	r2, [r7, #9]
 8012a28:	f107 0010 	add.w	r0, r7, #16
 8012a2c:	2110      	movs	r1, #16
 8012a2e:	f7f9 f842 	bl	800bab6 <SecureElementAesEncrypt>
 8012a32:	4603      	mov	r3, r0
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d001      	beq.n	8012a3c <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012a38:	230f      	movs	r3, #15
 8012a3a:	e03a      	b.n	8012ab2 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012a42:	e01e      	b.n	8012a82 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8012a44:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012a48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012a4c:	4413      	add	r3, r2
 8012a4e:	461a      	mov	r2, r3
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	4413      	add	r3, r2
 8012a54:	7819      	ldrb	r1, [r3, #0]
 8012a56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012a5a:	3338      	adds	r3, #56	; 0x38
 8012a5c:	443b      	add	r3, r7
 8012a5e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8012a62:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8012a66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012a6a:	4403      	add	r3, r0
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	4403      	add	r3, r0
 8012a72:	404a      	eors	r2, r1
 8012a74:	b2d2      	uxtb	r2, r2
 8012a76:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012a78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012a7c:	3301      	adds	r3, #1
 8012a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012a82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012a86:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012a8a:	2a10      	cmp	r2, #16
 8012a8c:	bfa8      	it	ge
 8012a8e:	2210      	movge	r2, #16
 8012a90:	b212      	sxth	r2, r2
 8012a92:	4293      	cmp	r3, r2
 8012a94:	dbd6      	blt.n	8012a44 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8012a96:	897b      	ldrh	r3, [r7, #10]
 8012a98:	3b10      	subs	r3, #16
 8012a9a:	b29b      	uxth	r3, r3
 8012a9c:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8012a9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012aa2:	3310      	adds	r3, #16
 8012aa4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8012aa8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	dcb2      	bgt.n	8012a16 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012ab0:	2300      	movs	r3, #0
}
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	3738      	adds	r7, #56	; 0x38
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	bd80      	pop	{r7, pc}

08012aba <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8012aba:	b490      	push	{r4, r7}
 8012abc:	b082      	sub	sp, #8
 8012abe:	af00      	add	r7, sp, #0
 8012ac0:	4604      	mov	r4, r0
 8012ac2:	4608      	mov	r0, r1
 8012ac4:	4611      	mov	r1, r2
 8012ac6:	461a      	mov	r2, r3
 8012ac8:	4623      	mov	r3, r4
 8012aca:	80fb      	strh	r3, [r7, #6]
 8012acc:	4603      	mov	r3, r0
 8012ace:	717b      	strb	r3, [r7, #5]
 8012ad0:	460b      	mov	r3, r1
 8012ad2:	713b      	strb	r3, [r7, #4]
 8012ad4:	4613      	mov	r3, r2
 8012ad6:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8012ad8:	69bb      	ldr	r3, [r7, #24]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d101      	bne.n	8012ae2 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012ade:	230a      	movs	r3, #10
 8012ae0:	e04e      	b.n	8012b80 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8012ae2:	69bb      	ldr	r3, [r7, #24]
 8012ae4:	2249      	movs	r2, #73	; 0x49
 8012ae6:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8012ae8:	69bb      	ldr	r3, [r7, #24]
 8012aea:	3301      	adds	r3, #1
 8012aec:	2200      	movs	r2, #0
 8012aee:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8012af0:	69bb      	ldr	r3, [r7, #24]
 8012af2:	3302      	adds	r3, #2
 8012af4:	2200      	movs	r2, #0
 8012af6:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8012af8:	69bb      	ldr	r3, [r7, #24]
 8012afa:	3303      	adds	r3, #3
 8012afc:	2200      	movs	r2, #0
 8012afe:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8012b00:	69bb      	ldr	r3, [r7, #24]
 8012b02:	3304      	adds	r3, #4
 8012b04:	2200      	movs	r2, #0
 8012b06:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8012b08:	69bb      	ldr	r3, [r7, #24]
 8012b0a:	3305      	adds	r3, #5
 8012b0c:	78fa      	ldrb	r2, [r7, #3]
 8012b0e:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8012b10:	69bb      	ldr	r3, [r7, #24]
 8012b12:	3306      	adds	r3, #6
 8012b14:	693a      	ldr	r2, [r7, #16]
 8012b16:	b2d2      	uxtb	r2, r2
 8012b18:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8012b1a:	693b      	ldr	r3, [r7, #16]
 8012b1c:	0a1a      	lsrs	r2, r3, #8
 8012b1e:	69bb      	ldr	r3, [r7, #24]
 8012b20:	3307      	adds	r3, #7
 8012b22:	b2d2      	uxtb	r2, r2
 8012b24:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8012b26:	693b      	ldr	r3, [r7, #16]
 8012b28:	0c1a      	lsrs	r2, r3, #16
 8012b2a:	69bb      	ldr	r3, [r7, #24]
 8012b2c:	3308      	adds	r3, #8
 8012b2e:	b2d2      	uxtb	r2, r2
 8012b30:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8012b32:	693b      	ldr	r3, [r7, #16]
 8012b34:	0e1a      	lsrs	r2, r3, #24
 8012b36:	69bb      	ldr	r3, [r7, #24]
 8012b38:	3309      	adds	r3, #9
 8012b3a:	b2d2      	uxtb	r2, r2
 8012b3c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8012b3e:	69bb      	ldr	r3, [r7, #24]
 8012b40:	330a      	adds	r3, #10
 8012b42:	697a      	ldr	r2, [r7, #20]
 8012b44:	b2d2      	uxtb	r2, r2
 8012b46:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8012b48:	697b      	ldr	r3, [r7, #20]
 8012b4a:	0a1a      	lsrs	r2, r3, #8
 8012b4c:	69bb      	ldr	r3, [r7, #24]
 8012b4e:	330b      	adds	r3, #11
 8012b50:	b2d2      	uxtb	r2, r2
 8012b52:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8012b54:	697b      	ldr	r3, [r7, #20]
 8012b56:	0c1a      	lsrs	r2, r3, #16
 8012b58:	69bb      	ldr	r3, [r7, #24]
 8012b5a:	330c      	adds	r3, #12
 8012b5c:	b2d2      	uxtb	r2, r2
 8012b5e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	0e1a      	lsrs	r2, r3, #24
 8012b64:	69bb      	ldr	r3, [r7, #24]
 8012b66:	330d      	adds	r3, #13
 8012b68:	b2d2      	uxtb	r2, r2
 8012b6a:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8012b6c:	69bb      	ldr	r3, [r7, #24]
 8012b6e:	330e      	adds	r3, #14
 8012b70:	2200      	movs	r2, #0
 8012b72:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8012b74:	69bb      	ldr	r3, [r7, #24]
 8012b76:	330f      	adds	r3, #15
 8012b78:	88fa      	ldrh	r2, [r7, #6]
 8012b7a:	b2d2      	uxtb	r2, r2
 8012b7c:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8012b7e:	2300      	movs	r3, #0
}
 8012b80:	4618      	mov	r0, r3
 8012b82:	3708      	adds	r7, #8
 8012b84:	46bd      	mov	sp, r7
 8012b86:	bc90      	pop	{r4, r7}
 8012b88:	4770      	bx	lr

08012b8a <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8012b8a:	b590      	push	{r4, r7, lr}
 8012b8c:	b08b      	sub	sp, #44	; 0x2c
 8012b8e:	af04      	add	r7, sp, #16
 8012b90:	6078      	str	r0, [r7, #4]
 8012b92:	4608      	mov	r0, r1
 8012b94:	4611      	mov	r1, r2
 8012b96:	461a      	mov	r2, r3
 8012b98:	4603      	mov	r3, r0
 8012b9a:	807b      	strh	r3, [r7, #2]
 8012b9c:	460b      	mov	r3, r1
 8012b9e:	707b      	strb	r3, [r7, #1]
 8012ba0:	4613      	mov	r3, r2
 8012ba2:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d002      	beq.n	8012bb0 <ComputeCmacB0+0x26>
 8012baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d101      	bne.n	8012bb4 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012bb0:	230a      	movs	r3, #10
 8012bb2:	e024      	b.n	8012bfe <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012bb4:	887b      	ldrh	r3, [r7, #2]
 8012bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012bba:	d901      	bls.n	8012bc0 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012bbc:	230e      	movs	r3, #14
 8012bbe:	e01e      	b.n	8012bfe <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012bc0:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8012bc4:	783a      	ldrb	r2, [r7, #0]
 8012bc6:	7879      	ldrb	r1, [r7, #1]
 8012bc8:	8878      	ldrh	r0, [r7, #2]
 8012bca:	f107 0308 	add.w	r3, r7, #8
 8012bce:	9302      	str	r3, [sp, #8]
 8012bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bd2:	9301      	str	r3, [sp, #4]
 8012bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bd6:	9300      	str	r3, [sp, #0]
 8012bd8:	4623      	mov	r3, r4
 8012bda:	f7ff ff6e 	bl	8012aba <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8012bde:	7879      	ldrb	r1, [r7, #1]
 8012be0:	887a      	ldrh	r2, [r7, #2]
 8012be2:	f107 0008 	add.w	r0, r7, #8
 8012be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012be8:	9300      	str	r3, [sp, #0]
 8012bea:	460b      	mov	r3, r1
 8012bec:	6879      	ldr	r1, [r7, #4]
 8012bee:	f7f8 ff15 	bl	800ba1c <SecureElementComputeAesCmac>
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d001      	beq.n	8012bfc <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012bf8:	230f      	movs	r3, #15
 8012bfa:	e000      	b.n	8012bfe <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012bfc:	2300      	movs	r3, #0
}
 8012bfe:	4618      	mov	r0, r3
 8012c00:	371c      	adds	r7, #28
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd90      	pop	{r4, r7, pc}

08012c06 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8012c06:	b590      	push	{r4, r7, lr}
 8012c08:	b0cd      	sub	sp, #308	; 0x134
 8012c0a:	af04      	add	r7, sp, #16
 8012c0c:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8012c10:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8012c14:	6020      	str	r0, [r4, #0]
 8012c16:	460c      	mov	r4, r1
 8012c18:	4610      	mov	r0, r2
 8012c1a:	4619      	mov	r1, r3
 8012c1c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012c20:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8012c24:	4622      	mov	r2, r4
 8012c26:	801a      	strh	r2, [r3, #0]
 8012c28:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012c2c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8012c30:	4602      	mov	r2, r0
 8012c32:	701a      	strb	r2, [r3, #0]
 8012c34:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012c38:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8012c3c:	460a      	mov	r2, r1
 8012c3e:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8012c40:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012c44:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d101      	bne.n	8012c52 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012c4e:	230a      	movs	r3, #10
 8012c50:	e063      	b.n	8012d1a <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012c52:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012c56:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8012c5a:	881b      	ldrh	r3, [r3, #0]
 8012c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c60:	d901      	bls.n	8012c66 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012c62:	230e      	movs	r3, #14
 8012c64:	e059      	b.n	8012d1a <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8012c66:	f107 030c 	add.w	r3, r7, #12
 8012c6a:	f44f 7288 	mov.w	r2, #272	; 0x110
 8012c6e:	2100      	movs	r1, #0
 8012c70:	4618      	mov	r0, r3
 8012c72:	f003 fbd7 	bl	8016424 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012c76:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8012c7a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012c7e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8012c82:	781a      	ldrb	r2, [r3, #0]
 8012c84:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012c88:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8012c8c:	7819      	ldrb	r1, [r3, #0]
 8012c8e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012c92:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8012c96:	8818      	ldrh	r0, [r3, #0]
 8012c98:	f107 030c 	add.w	r3, r7, #12
 8012c9c:	9302      	str	r3, [sp, #8]
 8012c9e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8012ca2:	9301      	str	r3, [sp, #4]
 8012ca4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012ca8:	9300      	str	r3, [sp, #0]
 8012caa:	4623      	mov	r3, r4
 8012cac:	f7ff ff05 	bl	8012aba <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8012cb0:	f107 030c 	add.w	r3, r7, #12
 8012cb4:	3310      	adds	r3, #16
 8012cb6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8012cba:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8012cbe:	8812      	ldrh	r2, [r2, #0]
 8012cc0:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8012cc4:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8012cc8:	6809      	ldr	r1, [r1, #0]
 8012cca:	4618      	mov	r0, r3
 8012ccc:	f003 fb6f 	bl	80163ae <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8012cd0:	2306      	movs	r3, #6
 8012cd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8012cd6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012cda:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8012cde:	881b      	ldrh	r3, [r3, #0]
 8012ce0:	3310      	adds	r3, #16
 8012ce2:	b299      	uxth	r1, r3
 8012ce4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012ce8:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8012cec:	781b      	ldrb	r3, [r3, #0]
 8012cee:	f107 000c 	add.w	r0, r7, #12
 8012cf2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8012cf6:	f7f8 feaf 	bl	800ba58 <SecureElementVerifyAesCmac>
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8012d00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d101      	bne.n	8012d0c <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8012d08:	2300      	movs	r3, #0
 8012d0a:	e006      	b.n	8012d1a <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8012d0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012d10:	2b01      	cmp	r3, #1
 8012d12:	d101      	bne.n	8012d18 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8012d14:	2301      	movs	r3, #1
 8012d16:	e000      	b.n	8012d1a <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012d18:	230f      	movs	r3, #15
}
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd90      	pop	{r4, r7, pc}

08012d24 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8012d24:	b480      	push	{r7}
 8012d26:	b085      	sub	sp, #20
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	6039      	str	r1, [r7, #0]
 8012d2e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012d30:	2300      	movs	r3, #0
 8012d32:	73fb      	strb	r3, [r7, #15]
 8012d34:	e011      	b.n	8012d5a <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8012d36:	7bfb      	ldrb	r3, [r7, #15]
 8012d38:	4a0c      	ldr	r2, [pc, #48]	; (8012d6c <GetKeyAddrItem+0x48>)
 8012d3a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8012d3e:	79fa      	ldrb	r2, [r7, #7]
 8012d40:	429a      	cmp	r2, r3
 8012d42:	d107      	bne.n	8012d54 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8012d44:	7bfb      	ldrb	r3, [r7, #15]
 8012d46:	009b      	lsls	r3, r3, #2
 8012d48:	4a08      	ldr	r2, [pc, #32]	; (8012d6c <GetKeyAddrItem+0x48>)
 8012d4a:	441a      	add	r2, r3
 8012d4c:	683b      	ldr	r3, [r7, #0]
 8012d4e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8012d50:	2300      	movs	r3, #0
 8012d52:	e006      	b.n	8012d62 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012d54:	7bfb      	ldrb	r3, [r7, #15]
 8012d56:	3301      	adds	r3, #1
 8012d58:	73fb      	strb	r3, [r7, #15]
 8012d5a:	7bfb      	ldrb	r3, [r7, #15]
 8012d5c:	2b01      	cmp	r3, #1
 8012d5e:	d9ea      	bls.n	8012d36 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8012d60:	230c      	movs	r3, #12
}
 8012d62:	4618      	mov	r0, r3
 8012d64:	3714      	adds	r7, #20
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bc80      	pop	{r7}
 8012d6a:	4770      	bx	lr
 8012d6c:	20000114 	.word	0x20000114

08012d70 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b088      	sub	sp, #32
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	60b9      	str	r1, [r7, #8]
 8012d78:	607a      	str	r2, [r7, #4]
 8012d7a:	461a      	mov	r2, r3
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	73fb      	strb	r3, [r7, #15]
 8012d80:	4613      	mov	r3, r2
 8012d82:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8012d84:	2300      	movs	r3, #0
 8012d86:	613b      	str	r3, [r7, #16]
 8012d88:	f107 0314 	add.w	r3, r7, #20
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	601a      	str	r2, [r3, #0]
 8012d90:	605a      	str	r2, [r3, #4]
 8012d92:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8012d94:	7bfb      	ldrb	r3, [r7, #15]
 8012d96:	2b02      	cmp	r3, #2
 8012d98:	d002      	beq.n	8012da0 <DeriveSessionKey10x+0x30>
 8012d9a:	2b03      	cmp	r3, #3
 8012d9c:	d003      	beq.n	8012da6 <DeriveSessionKey10x+0x36>
 8012d9e:	e005      	b.n	8012dac <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8012da0:	2301      	movs	r3, #1
 8012da2:	743b      	strb	r3, [r7, #16]
            break;
 8012da4:	e004      	b.n	8012db0 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8012da6:	2302      	movs	r3, #2
 8012da8:	743b      	strb	r3, [r7, #16]
            break;
 8012daa:	e001      	b.n	8012db0 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8012dac:	230b      	movs	r3, #11
 8012dae:	e02a      	b.n	8012e06 <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8012db0:	68bb      	ldr	r3, [r7, #8]
 8012db2:	b2db      	uxtb	r3, r3
 8012db4:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8012db6:	68bb      	ldr	r3, [r7, #8]
 8012db8:	0a1b      	lsrs	r3, r3, #8
 8012dba:	b2db      	uxtb	r3, r3
 8012dbc:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	0c1b      	lsrs	r3, r3, #16
 8012dc2:	b2db      	uxtb	r3, r3
 8012dc4:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	b2db      	uxtb	r3, r3
 8012dca:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	0a1b      	lsrs	r3, r3, #8
 8012dd0:	b2db      	uxtb	r3, r3
 8012dd2:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	0c1b      	lsrs	r3, r3, #16
 8012dd8:	b2db      	uxtb	r3, r3
 8012dda:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8012ddc:	89bb      	ldrh	r3, [r7, #12]
 8012dde:	b2db      	uxtb	r3, r3
 8012de0:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8012de2:	89bb      	ldrh	r3, [r7, #12]
 8012de4:	0a1b      	lsrs	r3, r3, #8
 8012de6:	b29b      	uxth	r3, r3
 8012de8:	b2db      	uxtb	r3, r3
 8012dea:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8012dec:	7bfa      	ldrb	r2, [r7, #15]
 8012dee:	f107 0310 	add.w	r3, r7, #16
 8012df2:	2101      	movs	r1, #1
 8012df4:	4618      	mov	r0, r3
 8012df6:	f7f8 fec5 	bl	800bb84 <SecureElementDeriveAndStoreKey>
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d001      	beq.n	8012e04 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012e00:	230f      	movs	r3, #15
 8012e02:	e000      	b.n	8012e06 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012e04:	2300      	movs	r3, #0
}
 8012e06:	4618      	mov	r0, r3
 8012e08:	3720      	adds	r7, #32
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bd80      	pop	{r7, pc}
	...

08012e10 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8012e10:	b480      	push	{r7}
 8012e12:	b083      	sub	sp, #12
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	4603      	mov	r3, r0
 8012e18:	6039      	str	r1, [r7, #0]
 8012e1a:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8012e1c:	683b      	ldr	r3, [r7, #0]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d101      	bne.n	8012e26 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012e22:	230a      	movs	r3, #10
 8012e24:	e03b      	b.n	8012e9e <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8012e26:	79fb      	ldrb	r3, [r7, #7]
 8012e28:	3b01      	subs	r3, #1
 8012e2a:	2b03      	cmp	r3, #3
 8012e2c:	d834      	bhi.n	8012e98 <GetLastFcntDown+0x88>
 8012e2e:	a201      	add	r2, pc, #4	; (adr r2, 8012e34 <GetLastFcntDown+0x24>)
 8012e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e34:	08012e45 	.word	0x08012e45
 8012e38:	08012e5d 	.word	0x08012e5d
 8012e3c:	08012e75 	.word	0x08012e75
 8012e40:	08012e8d 	.word	0x08012e8d
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8012e44:	4b18      	ldr	r3, [pc, #96]	; (8012ea8 <GetLastFcntDown+0x98>)
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	691a      	ldr	r2, [r3, #16]
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8012e4e:	4b16      	ldr	r3, [pc, #88]	; (8012ea8 <GetLastFcntDown+0x98>)
 8012e50:	681a      	ldr	r2, [r3, #0]
 8012e52:	4b15      	ldr	r3, [pc, #84]	; (8012ea8 <GetLastFcntDown+0x98>)
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	6912      	ldr	r2, [r2, #16]
 8012e58:	621a      	str	r2, [r3, #32]
            break;
 8012e5a:	e01f      	b.n	8012e9c <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8012e5c:	4b12      	ldr	r3, [pc, #72]	; (8012ea8 <GetLastFcntDown+0x98>)
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	695a      	ldr	r2, [r3, #20]
 8012e62:	683b      	ldr	r3, [r7, #0]
 8012e64:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8012e66:	4b10      	ldr	r3, [pc, #64]	; (8012ea8 <GetLastFcntDown+0x98>)
 8012e68:	681a      	ldr	r2, [r3, #0]
 8012e6a:	4b0f      	ldr	r3, [pc, #60]	; (8012ea8 <GetLastFcntDown+0x98>)
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	6952      	ldr	r2, [r2, #20]
 8012e70:	621a      	str	r2, [r3, #32]
            break;
 8012e72:	e013      	b.n	8012e9c <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8012e74:	4b0c      	ldr	r3, [pc, #48]	; (8012ea8 <GetLastFcntDown+0x98>)
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	699a      	ldr	r2, [r3, #24]
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8012e7e:	4b0a      	ldr	r3, [pc, #40]	; (8012ea8 <GetLastFcntDown+0x98>)
 8012e80:	681a      	ldr	r2, [r3, #0]
 8012e82:	4b09      	ldr	r3, [pc, #36]	; (8012ea8 <GetLastFcntDown+0x98>)
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	6992      	ldr	r2, [r2, #24]
 8012e88:	621a      	str	r2, [r3, #32]
            break;
 8012e8a:	e007      	b.n	8012e9c <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8012e8c:	4b06      	ldr	r3, [pc, #24]	; (8012ea8 <GetLastFcntDown+0x98>)
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	69da      	ldr	r2, [r3, #28]
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	601a      	str	r2, [r3, #0]
            break;
 8012e96:	e001      	b.n	8012e9c <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8012e98:	2305      	movs	r3, #5
 8012e9a:	e000      	b.n	8012e9e <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012e9c:	2300      	movs	r3, #0
}
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	370c      	adds	r7, #12
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bc80      	pop	{r7}
 8012ea6:	4770      	bx	lr
 8012ea8:	20001b1c 	.word	0x20001b1c

08012eac <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b084      	sub	sp, #16
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	6039      	str	r1, [r7, #0]
 8012eb6:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8012eb8:	2300      	movs	r3, #0
 8012eba:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8012ebc:	f107 020c 	add.w	r2, r7, #12
 8012ec0:	79fb      	ldrb	r3, [r7, #7]
 8012ec2:	4611      	mov	r1, r2
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f7ff ffa3 	bl	8012e10 <GetLastFcntDown>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d001      	beq.n	8012ed4 <CheckFCntDown+0x28>
    {
        return false;
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	e00a      	b.n	8012eea <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	683a      	ldr	r2, [r7, #0]
 8012ed8:	429a      	cmp	r2, r3
 8012eda:	d803      	bhi.n	8012ee4 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8012edc:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8012ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ee2:	d101      	bne.n	8012ee8 <CheckFCntDown+0x3c>
    {
        return true;
 8012ee4:	2301      	movs	r3, #1
 8012ee6:	e000      	b.n	8012eea <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8012ee8:	2300      	movs	r3, #0
    }
}
 8012eea:	4618      	mov	r0, r3
 8012eec:	3710      	adds	r7, #16
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	bd80      	pop	{r7, pc}
	...

08012ef4 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012ef4:	b480      	push	{r7}
 8012ef6:	b083      	sub	sp, #12
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	4603      	mov	r3, r0
 8012efc:	6039      	str	r1, [r7, #0]
 8012efe:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8012f00:	79fb      	ldrb	r3, [r7, #7]
 8012f02:	3b01      	subs	r3, #1
 8012f04:	2b03      	cmp	r3, #3
 8012f06:	d81f      	bhi.n	8012f48 <UpdateFCntDown+0x54>
 8012f08:	a201      	add	r2, pc, #4	; (adr r2, 8012f10 <UpdateFCntDown+0x1c>)
 8012f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f0e:	bf00      	nop
 8012f10:	08012f21 	.word	0x08012f21
 8012f14:	08012f2b 	.word	0x08012f2b
 8012f18:	08012f35 	.word	0x08012f35
 8012f1c:	08012f3f 	.word	0x08012f3f
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8012f20:	4b0c      	ldr	r3, [pc, #48]	; (8012f54 <UpdateFCntDown+0x60>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	683a      	ldr	r2, [r7, #0]
 8012f26:	611a      	str	r2, [r3, #16]
            break;
 8012f28:	e00f      	b.n	8012f4a <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8012f2a:	4b0a      	ldr	r3, [pc, #40]	; (8012f54 <UpdateFCntDown+0x60>)
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	683a      	ldr	r2, [r7, #0]
 8012f30:	615a      	str	r2, [r3, #20]
            break;
 8012f32:	e00a      	b.n	8012f4a <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8012f34:	4b07      	ldr	r3, [pc, #28]	; (8012f54 <UpdateFCntDown+0x60>)
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	683a      	ldr	r2, [r7, #0]
 8012f3a:	619a      	str	r2, [r3, #24]
            break;
 8012f3c:	e005      	b.n	8012f4a <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8012f3e:	4b05      	ldr	r3, [pc, #20]	; (8012f54 <UpdateFCntDown+0x60>)
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	683a      	ldr	r2, [r7, #0]
 8012f44:	61da      	str	r2, [r3, #28]
            break;
 8012f46:	e000      	b.n	8012f4a <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8012f48:	bf00      	nop
    }
}
 8012f4a:	bf00      	nop
 8012f4c:	370c      	adds	r7, #12
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bc80      	pop	{r7}
 8012f52:	4770      	bx	lr
 8012f54:	20001b1c 	.word	0x20001b1c

08012f58 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8012f58:	b480      	push	{r7}
 8012f5a:	b083      	sub	sp, #12
 8012f5c:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8012f5e:	4b18      	ldr	r3, [pc, #96]	; (8012fc0 <ResetFCnts+0x68>)
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	2200      	movs	r2, #0
 8012f64:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012f66:	4b16      	ldr	r3, [pc, #88]	; (8012fc0 <ResetFCnts+0x68>)
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8012f6e:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012f70:	4b13      	ldr	r3, [pc, #76]	; (8012fc0 <ResetFCnts+0x68>)
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	f04f 32ff 	mov.w	r2, #4294967295
 8012f78:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8012f7a:	4b11      	ldr	r3, [pc, #68]	; (8012fc0 <ResetFCnts+0x68>)
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8012f82:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8012f84:	4b0e      	ldr	r3, [pc, #56]	; (8012fc0 <ResetFCnts+0x68>)
 8012f86:	681a      	ldr	r2, [r3, #0]
 8012f88:	4b0d      	ldr	r3, [pc, #52]	; (8012fc0 <ResetFCnts+0x68>)
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	6992      	ldr	r2, [r2, #24]
 8012f8e:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012f90:	2300      	movs	r3, #0
 8012f92:	607b      	str	r3, [r7, #4]
 8012f94:	e00b      	b.n	8012fae <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8012f96:	4b0a      	ldr	r3, [pc, #40]	; (8012fc0 <ResetFCnts+0x68>)
 8012f98:	681a      	ldr	r2, [r3, #0]
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	3306      	adds	r3, #6
 8012f9e:	009b      	lsls	r3, r3, #2
 8012fa0:	4413      	add	r3, r2
 8012fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8012fa6:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	3301      	adds	r3, #1
 8012fac:	607b      	str	r3, [r7, #4]
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	ddf0      	ble.n	8012f96 <ResetFCnts+0x3e>
    }
}
 8012fb4:	bf00      	nop
 8012fb6:	bf00      	nop
 8012fb8:	370c      	adds	r7, #12
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	bc80      	pop	{r7}
 8012fbe:	4770      	bx	lr
 8012fc0:	20001b1c 	.word	0x20001b1c

08012fc4 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b082      	sub	sp, #8
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d101      	bne.n	8012fd6 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8012fd2:	2309      	movs	r3, #9
 8012fd4:	e01c      	b.n	8013010 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8012fd6:	4a10      	ldr	r2, [pc, #64]	; (8013018 <LoRaMacCryptoInit+0x54>)
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8012fdc:	4b0e      	ldr	r3, [pc, #56]	; (8013018 <LoRaMacCryptoInit+0x54>)
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	2228      	movs	r2, #40	; 0x28
 8012fe2:	2100      	movs	r1, #0
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f003 fa1d 	bl	8016424 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8012fea:	4b0b      	ldr	r3, [pc, #44]	; (8013018 <LoRaMacCryptoInit+0x54>)
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	2201      	movs	r2, #1
 8012ff0:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8012ff2:	4b09      	ldr	r3, [pc, #36]	; (8013018 <LoRaMacCryptoInit+0x54>)
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	2201      	movs	r2, #1
 8012ff8:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8012ffa:	4b07      	ldr	r3, [pc, #28]	; (8013018 <LoRaMacCryptoInit+0x54>)
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	2201      	movs	r2, #1
 8013000:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8013002:	4b05      	ldr	r3, [pc, #20]	; (8013018 <LoRaMacCryptoInit+0x54>)
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	2200      	movs	r2, #0
 8013008:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801300a:	f7ff ffa5 	bl	8012f58 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801300e:	2300      	movs	r3, #0
}
 8013010:	4618      	mov	r0, r3
 8013012:	3708      	adds	r7, #8
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}
 8013018:	20001b1c 	.word	0x20001b1c

0801301c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 801301c:	b480      	push	{r7}
 801301e:	b083      	sub	sp, #12
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8013024:	4b04      	ldr	r3, [pc, #16]	; (8013038 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	687a      	ldr	r2, [r7, #4]
 801302a:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 801302c:	2300      	movs	r3, #0
}
 801302e:	4618      	mov	r0, r3
 8013030:	370c      	adds	r7, #12
 8013032:	46bd      	mov	sp, r7
 8013034:	bc80      	pop	{r7}
 8013036:	4770      	bx	lr
 8013038:	20001b1c 	.word	0x20001b1c

0801303c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 801303c:	b480      	push	{r7}
 801303e:	b083      	sub	sp, #12
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d101      	bne.n	801304e <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801304a:	230a      	movs	r3, #10
 801304c:	e006      	b.n	801305c <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801304e:	4b06      	ldr	r3, [pc, #24]	; (8013068 <LoRaMacCryptoGetFCntUp+0x2c>)
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	68db      	ldr	r3, [r3, #12]
 8013054:	1c5a      	adds	r2, r3, #1
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801305a:	2300      	movs	r3, #0
}
 801305c:	4618      	mov	r0, r3
 801305e:	370c      	adds	r7, #12
 8013060:	46bd      	mov	sp, r7
 8013062:	bc80      	pop	{r7}
 8013064:	4770      	bx	lr
 8013066:	bf00      	nop
 8013068:	20001b1c 	.word	0x20001b1c

0801306c <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 801306c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013070:	b08a      	sub	sp, #40	; 0x28
 8013072:	af00      	add	r7, sp, #0
 8013074:	613a      	str	r2, [r7, #16]
 8013076:	60fb      	str	r3, [r7, #12]
 8013078:	4603      	mov	r3, r0
 801307a:	75fb      	strb	r3, [r7, #23]
 801307c:	460b      	mov	r3, r1
 801307e:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8013080:	2300      	movs	r3, #0
 8013082:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8013084:	2300      	movs	r3, #0
 8013086:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8013088:	2313      	movs	r3, #19
 801308a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d101      	bne.n	8013098 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013094:	230a      	movs	r3, #10
 8013096:	e057      	b.n	8013148 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8013098:	f107 021c 	add.w	r2, r7, #28
 801309c:	7dfb      	ldrb	r3, [r7, #23]
 801309e:	4611      	mov	r1, r2
 80130a0:	4618      	mov	r0, r3
 80130a2:	f7ff feb5 	bl	8012e10 <GetLastFcntDown>
 80130a6:	4603      	mov	r3, r0
 80130a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80130ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d002      	beq.n	80130ba <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 80130b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80130b8:	e046      	b.n	8013148 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 80130ba:	69fb      	ldr	r3, [r7, #28]
 80130bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130c0:	d103      	bne.n	80130ca <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	693a      	ldr	r2, [r7, #16]
 80130c6:	601a      	str	r2, [r3, #0]
 80130c8:	e01e      	b.n	8013108 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80130ca:	69fb      	ldr	r3, [r7, #28]
 80130cc:	b29b      	uxth	r3, r3
 80130ce:	693a      	ldr	r2, [r7, #16]
 80130d0:	1ad3      	subs	r3, r2, r3
 80130d2:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 80130d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	dd05      	ble.n	80130e6 <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80130da:	69fa      	ldr	r2, [r7, #28]
 80130dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130de:	441a      	add	r2, r3
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	601a      	str	r2, [r3, #0]
 80130e4:	e010      	b.n	8013108 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 80130e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d104      	bne.n	80130f6 <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80130ec:	69fa      	ldr	r2, [r7, #28]
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80130f2:	2307      	movs	r3, #7
 80130f4:	e028      	b.n	8013148 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80130f6:	69fb      	ldr	r3, [r7, #28]
 80130f8:	0c1b      	lsrs	r3, r3, #16
 80130fa:	041b      	lsls	r3, r3, #16
 80130fc:	693a      	ldr	r2, [r7, #16]
 80130fe:	4413      	add	r3, r2
 8013100:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013108:	4b12      	ldr	r3, [pc, #72]	; (8013154 <LoRaMacCryptoGetFCntDown+0xe8>)
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	789b      	ldrb	r3, [r3, #2]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d119      	bne.n	8013146 <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	2200      	movs	r2, #0
 8013118:	603b      	str	r3, [r7, #0]
 801311a:	607a      	str	r2, [r7, #4]
 801311c:	69fb      	ldr	r3, [r7, #28]
 801311e:	2200      	movs	r2, #0
 8013120:	469a      	mov	sl, r3
 8013122:	4693      	mov	fp, r2
 8013124:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013128:	4611      	mov	r1, r2
 801312a:	ebb1 040a 	subs.w	r4, r1, sl
 801312e:	eb63 050b 	sbc.w	r5, r3, fp
 8013132:	8abb      	ldrh	r3, [r7, #20]
 8013134:	2200      	movs	r2, #0
 8013136:	4698      	mov	r8, r3
 8013138:	4691      	mov	r9, r2
 801313a:	4544      	cmp	r4, r8
 801313c:	eb75 0309 	sbcs.w	r3, r5, r9
 8013140:	db01      	blt.n	8013146 <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8013142:	2308      	movs	r3, #8
 8013144:	e000      	b.n	8013148 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013146:	2300      	movs	r3, #0
}
 8013148:	4618      	mov	r0, r3
 801314a:	3728      	adds	r7, #40	; 0x28
 801314c:	46bd      	mov	sp, r7
 801314e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013152:	bf00      	nop
 8013154:	20001b1c 	.word	0x20001b1c

08013158 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8013158:	b480      	push	{r7}
 801315a:	b085      	sub	sp, #20
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d101      	bne.n	801316a <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013166:	230a      	movs	r3, #10
 8013168:	e017      	b.n	801319a <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801316a:	2300      	movs	r3, #0
 801316c:	60fb      	str	r3, [r7, #12]
 801316e:	e010      	b.n	8013192 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8013170:	4b0c      	ldr	r3, [pc, #48]	; (80131a4 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8013172:	6819      	ldr	r1, [r3, #0]
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	222c      	movs	r2, #44	; 0x2c
 8013178:	fb02 f303 	mul.w	r3, r2, r3
 801317c:	687a      	ldr	r2, [r7, #4]
 801317e:	4413      	add	r3, r2
 8013180:	68fa      	ldr	r2, [r7, #12]
 8013182:	3206      	adds	r2, #6
 8013184:	0092      	lsls	r2, r2, #2
 8013186:	440a      	add	r2, r1
 8013188:	3204      	adds	r2, #4
 801318a:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	3301      	adds	r3, #1
 8013190:	60fb      	str	r3, [r7, #12]
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	2b00      	cmp	r3, #0
 8013196:	ddeb      	ble.n	8013170 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013198:	2300      	movs	r3, #0
}
 801319a:	4618      	mov	r0, r3
 801319c:	3714      	adds	r7, #20
 801319e:	46bd      	mov	sp, r7
 80131a0:	bc80      	pop	{r7}
 80131a2:	4770      	bx	lr
 80131a4:	20001b1c 	.word	0x20001b1c

080131a8 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b082      	sub	sp, #8
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	4603      	mov	r3, r0
 80131b0:	6039      	str	r1, [r7, #0]
 80131b2:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80131b4:	79fb      	ldrb	r3, [r7, #7]
 80131b6:	6839      	ldr	r1, [r7, #0]
 80131b8:	4618      	mov	r0, r3
 80131ba:	f7f8 fbd1 	bl	800b960 <SecureElementSetKey>
 80131be:	4603      	mov	r3, r0
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d001      	beq.n	80131c8 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80131c4:	230f      	movs	r3, #15
 80131c6:	e018      	b.n	80131fa <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 80131c8:	79fb      	ldrb	r3, [r7, #7]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d114      	bne.n	80131f8 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 80131ce:	4b0d      	ldr	r3, [pc, #52]	; (8013204 <LoRaMacCryptoSetKey+0x5c>)
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	789b      	ldrb	r3, [r3, #2]
 80131d4:	79fa      	ldrb	r2, [r7, #7]
 80131d6:	4611      	mov	r1, r2
 80131d8:	4618      	mov	r0, r3
 80131da:	f000 fa3f 	bl	801365c <LoRaMacCryptoDeriveMcRootKey>
 80131de:	4603      	mov	r3, r0
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d001      	beq.n	80131e8 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80131e4:	230f      	movs	r3, #15
 80131e6:	e008      	b.n	80131fa <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80131e8:	2004      	movs	r0, #4
 80131ea:	f000 fa62 	bl	80136b2 <LoRaMacCryptoDeriveMcKEKey>
 80131ee:	4603      	mov	r3, r0
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d001      	beq.n	80131f8 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80131f4:	230f      	movs	r3, #15
 80131f6:	e000      	b.n	80131fa <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80131f8:	2300      	movs	r3, #0
}
 80131fa:	4618      	mov	r0, r3
 80131fc:	3708      	adds	r7, #8
 80131fe:	46bd      	mov	sp, r7
 8013200:	bd80      	pop	{r7, pc}
 8013202:	bf00      	nop
 8013204:	20001b1c 	.word	0x20001b1c

08013208 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013208:	b580      	push	{r7, lr}
 801320a:	b086      	sub	sp, #24
 801320c:	af02      	add	r7, sp, #8
 801320e:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d101      	bne.n	801321a <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013216:	230a      	movs	r3, #10
 8013218:	e033      	b.n	8013282 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801321a:	2301      	movs	r3, #1
 801321c:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 801321e:	2300      	movs	r3, #0
 8013220:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8013222:	f107 0308 	add.w	r3, r7, #8
 8013226:	4618      	mov	r0, r3
 8013228:	f7f8 fd6a 	bl	800bd00 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 801322c:	68ba      	ldr	r2, [r7, #8]
 801322e:	4b17      	ldr	r3, [pc, #92]	; (801328c <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	b292      	uxth	r2, r2
 8013234:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8013236:	4b15      	ldr	r3, [pc, #84]	; (801328c <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	889a      	ldrh	r2, [r3, #4]
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013240:	6878      	ldr	r0, [r7, #4]
 8013242:	f000 fc18 	bl	8013a76 <LoRaMacSerializerJoinRequest>
 8013246:	4603      	mov	r3, r0
 8013248:	2b00      	cmp	r3, #0
 801324a:	d001      	beq.n	8013250 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801324c:	2311      	movs	r3, #17
 801324e:	e018      	b.n	8013282 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	6819      	ldr	r1, [r3, #0]
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	3318      	adds	r3, #24
 8013258:	7bfa      	ldrb	r2, [r7, #15]
 801325a:	9300      	str	r3, [sp, #0]
 801325c:	4613      	mov	r3, r2
 801325e:	2213      	movs	r2, #19
 8013260:	2000      	movs	r0, #0
 8013262:	f7f8 fbdb 	bl	800ba1c <SecureElementComputeAesCmac>
 8013266:	4603      	mov	r3, r0
 8013268:	2b00      	cmp	r3, #0
 801326a:	d001      	beq.n	8013270 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801326c:	230f      	movs	r3, #15
 801326e:	e008      	b.n	8013282 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013270:	6878      	ldr	r0, [r7, #4]
 8013272:	f000 fc00 	bl	8013a76 <LoRaMacSerializerJoinRequest>
 8013276:	4603      	mov	r3, r0
 8013278:	2b00      	cmp	r3, #0
 801327a:	d001      	beq.n	8013280 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801327c:	2311      	movs	r3, #17
 801327e:	e000      	b.n	8013282 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013280:	2300      	movs	r3, #0
}
 8013282:	4618      	mov	r0, r3
 8013284:	3710      	adds	r7, #16
 8013286:	46bd      	mov	sp, r7
 8013288:	bd80      	pop	{r7, pc}
 801328a:	bf00      	nop
 801328c:	20001b1c 	.word	0x20001b1c

08013290 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8013290:	b590      	push	{r4, r7, lr}
 8013292:	b097      	sub	sp, #92	; 0x5c
 8013294:	af04      	add	r7, sp, #16
 8013296:	4603      	mov	r3, r0
 8013298:	60b9      	str	r1, [r7, #8]
 801329a:	607a      	str	r2, [r7, #4]
 801329c:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d002      	beq.n	80132aa <LoRaMacCryptoHandleJoinAccept+0x1a>
 80132a4:	68bb      	ldr	r3, [r7, #8]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d101      	bne.n	80132ae <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80132aa:	230a      	movs	r3, #10
 80132ac:	e0bd      	b.n	801342a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80132ae:	2313      	movs	r3, #19
 80132b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80132b4:	2300      	movs	r3, #0
 80132b6:	61bb      	str	r3, [r7, #24]
 80132b8:	f107 031c 	add.w	r3, r7, #28
 80132bc:	221d      	movs	r2, #29
 80132be:	2100      	movs	r1, #0
 80132c0:	4618      	mov	r0, r3
 80132c2:	f007 fe65 	bl	801af90 <memset>
    uint8_t versionMinor         = 0;
 80132c6:	2300      	movs	r3, #0
 80132c8:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80132ca:	4b5a      	ldr	r3, [pc, #360]	; (8013434 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	889b      	ldrh	r3, [r3, #4]
 80132d0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	681c      	ldr	r4, [r3, #0]
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	791b      	ldrb	r3, [r3, #4]
 80132dc:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80132e0:	7bf8      	ldrb	r0, [r7, #15]
 80132e2:	f107 0217 	add.w	r2, r7, #23
 80132e6:	9202      	str	r2, [sp, #8]
 80132e8:	f107 0218 	add.w	r2, r7, #24
 80132ec:	9201      	str	r2, [sp, #4]
 80132ee:	9300      	str	r3, [sp, #0]
 80132f0:	4623      	mov	r3, r4
 80132f2:	460a      	mov	r2, r1
 80132f4:	68b9      	ldr	r1, [r7, #8]
 80132f6:	f7f8 fc85 	bl	800bc04 <SecureElementProcessJoinAccept>
 80132fa:	4603      	mov	r3, r0
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d001      	beq.n	8013304 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013300:	230f      	movs	r3, #15
 8013302:	e092      	b.n	801342a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	6818      	ldr	r0, [r3, #0]
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	791b      	ldrb	r3, [r3, #4]
 801330c:	b29a      	uxth	r2, r3
 801330e:	f107 0318 	add.w	r3, r7, #24
 8013312:	4619      	mov	r1, r3
 8013314:	f003 f84b 	bl	80163ae <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013318:	6878      	ldr	r0, [r7, #4]
 801331a:	f000 f9ed 	bl	80136f8 <LoRaMacParserJoinAccept>
 801331e:	4603      	mov	r3, r0
 8013320:	2b00      	cmp	r3, #0
 8013322:	d001      	beq.n	8013328 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013324:	2310      	movs	r3, #16
 8013326:	e080      	b.n	801342a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	799b      	ldrb	r3, [r3, #6]
 801332c:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	79db      	ldrb	r3, [r3, #7]
 8013332:	021b      	lsls	r3, r3, #8
 8013334:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013336:	4313      	orrs	r3, r2
 8013338:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	7a1b      	ldrb	r3, [r3, #8]
 801333e:	041b      	lsls	r3, r3, #16
 8013340:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013342:	4313      	orrs	r3, r2
 8013344:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8013346:	4b3b      	ldr	r3, [pc, #236]	; (8013434 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	689b      	ldr	r3, [r3, #8]
 801334c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801334e:	429a      	cmp	r2, r3
 8013350:	d010      	beq.n	8013374 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8013352:	4b38      	ldr	r3, [pc, #224]	; (8013434 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013358:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 801335a:	7dfb      	ldrb	r3, [r7, #23]
 801335c:	2100      	movs	r1, #0
 801335e:	4618      	mov	r0, r3
 8013360:	f000 f97c 	bl	801365c <LoRaMacCryptoDeriveMcRootKey>
 8013364:	4603      	mov	r3, r0
 8013366:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801336a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801336e:	2b00      	cmp	r3, #0
 8013370:	d005      	beq.n	801337e <LoRaMacCryptoHandleJoinAccept+0xee>
 8013372:	e001      	b.n	8013378 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8013374:	2303      	movs	r3, #3
 8013376:	e058      	b.n	801342a <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8013378:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801337c:	e055      	b.n	801342a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 801337e:	2004      	movs	r0, #4
 8013380:	f000 f997 	bl	80136b2 <LoRaMacCryptoDeriveMcKEKey>
 8013384:	4603      	mov	r3, r0
 8013386:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801338a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801338e:	2b00      	cmp	r3, #0
 8013390:	d002      	beq.n	8013398 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8013392:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013396:	e048      	b.n	801342a <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	7a5b      	ldrb	r3, [r3, #9]
 801339c:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	7a9b      	ldrb	r3, [r3, #10]
 80133a2:	021b      	lsls	r3, r3, #8
 80133a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80133a6:	4313      	orrs	r3, r2
 80133a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	7adb      	ldrb	r3, [r3, #11]
 80133ae:	041b      	lsls	r3, r3, #16
 80133b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80133b2:	4313      	orrs	r3, r2
 80133b4:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80133b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80133ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80133bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80133be:	2003      	movs	r0, #3
 80133c0:	f7ff fcd6 	bl	8012d70 <DeriveSessionKey10x>
 80133c4:	4603      	mov	r3, r0
 80133c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80133ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d002      	beq.n	80133d8 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 80133d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80133d6:	e028      	b.n	801342a <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80133d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80133dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80133de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80133e0:	2002      	movs	r0, #2
 80133e2:	f7ff fcc5 	bl	8012d70 <DeriveSessionKey10x>
 80133e6:	4603      	mov	r3, r0
 80133e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80133ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d002      	beq.n	80133fa <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 80133f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80133f8:	e017      	b.n	801342a <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80133fa:	4b0e      	ldr	r3, [pc, #56]	; (8013434 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	7dfa      	ldrb	r2, [r7, #23]
 8013400:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8013402:	4b0c      	ldr	r3, [pc, #48]	; (8013434 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	2200      	movs	r2, #0
 8013408:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801340a:	4b0a      	ldr	r3, [pc, #40]	; (8013434 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	f04f 32ff 	mov.w	r2, #4294967295
 8013412:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013414:	4b07      	ldr	r3, [pc, #28]	; (8013434 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	f04f 32ff 	mov.w	r2, #4294967295
 801341c:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801341e:	4b05      	ldr	r3, [pc, #20]	; (8013434 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	f04f 32ff 	mov.w	r2, #4294967295
 8013426:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8013428:	2300      	movs	r3, #0
}
 801342a:	4618      	mov	r0, r3
 801342c:	374c      	adds	r7, #76	; 0x4c
 801342e:	46bd      	mov	sp, r7
 8013430:	bd90      	pop	{r4, r7, pc}
 8013432:	bf00      	nop
 8013434:	20001b1c 	.word	0x20001b1c

08013438 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8013438:	b590      	push	{r4, r7, lr}
 801343a:	b08b      	sub	sp, #44	; 0x2c
 801343c:	af04      	add	r7, sp, #16
 801343e:	60f8      	str	r0, [r7, #12]
 8013440:	607b      	str	r3, [r7, #4]
 8013442:	460b      	mov	r3, r1
 8013444:	72fb      	strb	r3, [r7, #11]
 8013446:	4613      	mov	r3, r2
 8013448:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801344a:	2313      	movs	r3, #19
 801344c:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801344e:	2303      	movs	r3, #3
 8013450:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d101      	bne.n	801345c <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013458:	230a      	movs	r3, #10
 801345a:	e05f      	b.n	801351c <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 801345c:	4b31      	ldr	r3, [pc, #196]	; (8013524 <LoRaMacCryptoSecureMessage+0xec>)
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	68db      	ldr	r3, [r3, #12]
 8013462:	68fa      	ldr	r2, [r7, #12]
 8013464:	429a      	cmp	r2, r3
 8013466:	d201      	bcs.n	801346c <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013468:	2306      	movs	r3, #6
 801346a:	e057      	b.n	801351c <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d101      	bne.n	801347a <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013476:	2302      	movs	r3, #2
 8013478:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 801347a:	4b2a      	ldr	r3, [pc, #168]	; (8013524 <LoRaMacCryptoSecureMessage+0xec>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	68db      	ldr	r3, [r3, #12]
 8013480:	68fa      	ldr	r2, [r7, #12]
 8013482:	429a      	cmp	r2, r3
 8013484:	d916      	bls.n	80134b4 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013490:	b219      	sxth	r1, r3
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	689c      	ldr	r4, [r3, #8]
 8013496:	7dfa      	ldrb	r2, [r7, #23]
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	9301      	str	r3, [sp, #4]
 801349c:	2300      	movs	r3, #0
 801349e:	9300      	str	r3, [sp, #0]
 80134a0:	4623      	mov	r3, r4
 80134a2:	f7ff fa71 	bl	8012988 <PayloadEncrypt>
 80134a6:	4603      	mov	r3, r0
 80134a8:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80134aa:	7dbb      	ldrb	r3, [r7, #22]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d001      	beq.n	80134b4 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80134b0:	7dbb      	ldrb	r3, [r7, #22]
 80134b2:	e033      	b.n	801351c <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80134b4:	6878      	ldr	r0, [r7, #4]
 80134b6:	f000 fb60 	bl	8013b7a <LoRaMacSerializerData>
 80134ba:	4603      	mov	r3, r0
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d001      	beq.n	80134c4 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80134c0:	2311      	movs	r3, #17
 80134c2:	e02b      	b.n	801351c <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80134c4:	2302      	movs	r3, #2
 80134c6:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	6818      	ldr	r0, [r3, #0]
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	791b      	ldrb	r3, [r3, #4]
 80134d0:	b29b      	uxth	r3, r3
 80134d2:	3b04      	subs	r3, #4
 80134d4:	b299      	uxth	r1, r3
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	689b      	ldr	r3, [r3, #8]
 80134da:	687a      	ldr	r2, [r7, #4]
 80134dc:	322c      	adds	r2, #44	; 0x2c
 80134de:	7dfc      	ldrb	r4, [r7, #23]
 80134e0:	9203      	str	r2, [sp, #12]
 80134e2:	68fa      	ldr	r2, [r7, #12]
 80134e4:	9202      	str	r2, [sp, #8]
 80134e6:	9301      	str	r3, [sp, #4]
 80134e8:	2300      	movs	r3, #0
 80134ea:	9300      	str	r3, [sp, #0]
 80134ec:	2300      	movs	r3, #0
 80134ee:	4622      	mov	r2, r4
 80134f0:	f7ff fb4b 	bl	8012b8a <ComputeCmacB0>
 80134f4:	4603      	mov	r3, r0
 80134f6:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80134f8:	7dbb      	ldrb	r3, [r7, #22]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d001      	beq.n	8013502 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 80134fe:	7dbb      	ldrb	r3, [r7, #22]
 8013500:	e00c      	b.n	801351c <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013502:	6878      	ldr	r0, [r7, #4]
 8013504:	f000 fb39 	bl	8013b7a <LoRaMacSerializerData>
 8013508:	4603      	mov	r3, r0
 801350a:	2b00      	cmp	r3, #0
 801350c:	d001      	beq.n	8013512 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801350e:	2311      	movs	r3, #17
 8013510:	e004      	b.n	801351c <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8013512:	4b04      	ldr	r3, [pc, #16]	; (8013524 <LoRaMacCryptoSecureMessage+0xec>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	68fa      	ldr	r2, [r7, #12]
 8013518:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 801351a:	2300      	movs	r3, #0
}
 801351c:	4618      	mov	r0, r3
 801351e:	371c      	adds	r7, #28
 8013520:	46bd      	mov	sp, r7
 8013522:	bd90      	pop	{r4, r7, pc}
 8013524:	20001b1c 	.word	0x20001b1c

08013528 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8013528:	b590      	push	{r4, r7, lr}
 801352a:	b08b      	sub	sp, #44	; 0x2c
 801352c:	af04      	add	r7, sp, #16
 801352e:	60b9      	str	r1, [r7, #8]
 8013530:	607b      	str	r3, [r7, #4]
 8013532:	4603      	mov	r3, r0
 8013534:	73fb      	strb	r3, [r7, #15]
 8013536:	4613      	mov	r3, r2
 8013538:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 801353a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801353c:	2b00      	cmp	r3, #0
 801353e:	d101      	bne.n	8013544 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013540:	230a      	movs	r3, #10
 8013542:	e084      	b.n	801364e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8013544:	7bbb      	ldrb	r3, [r7, #14]
 8013546:	6879      	ldr	r1, [r7, #4]
 8013548:	4618      	mov	r0, r3
 801354a:	f7ff fcaf 	bl	8012eac <CheckFCntDown>
 801354e:	4603      	mov	r3, r0
 8013550:	f083 0301 	eor.w	r3, r3, #1
 8013554:	b2db      	uxtb	r3, r3
 8013556:	2b00      	cmp	r3, #0
 8013558:	d001      	beq.n	801355e <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801355a:	2306      	movs	r3, #6
 801355c:	e077      	b.n	801364e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801355e:	2313      	movs	r3, #19
 8013560:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013562:	2303      	movs	r3, #3
 8013564:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8013566:	2302      	movs	r3, #2
 8013568:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801356a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801356c:	f000 f98f 	bl	801388e <LoRaMacParserData>
 8013570:	4603      	mov	r3, r0
 8013572:	2b00      	cmp	r3, #0
 8013574:	d001      	beq.n	801357a <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013576:	2310      	movs	r3, #16
 8013578:	e069      	b.n	801364e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 801357a:	f107 0210 	add.w	r2, r7, #16
 801357e:	7bfb      	ldrb	r3, [r7, #15]
 8013580:	4611      	mov	r1, r2
 8013582:	4618      	mov	r0, r3
 8013584:	f7ff fbce 	bl	8012d24 <GetKeyAddrItem>
 8013588:	4603      	mov	r3, r0
 801358a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801358c:	7d7b      	ldrb	r3, [r7, #21]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d001      	beq.n	8013596 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8013592:	7d7b      	ldrb	r3, [r7, #21]
 8013594:	e05b      	b.n	801364e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8013596:	693b      	ldr	r3, [r7, #16]
 8013598:	785b      	ldrb	r3, [r3, #1]
 801359a:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 801359c:	693b      	ldr	r3, [r7, #16]
 801359e:	789b      	ldrb	r3, [r3, #2]
 80135a0:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80135a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135a4:	689b      	ldr	r3, [r3, #8]
 80135a6:	68ba      	ldr	r2, [r7, #8]
 80135a8:	429a      	cmp	r2, r3
 80135aa:	d001      	beq.n	80135b0 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80135ac:	2302      	movs	r3, #2
 80135ae:	e04e      	b.n	801364e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80135b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135b2:	7b1b      	ldrb	r3, [r3, #12]
 80135b4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80135b8:	b2db      	uxtb	r3, r3
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	bf14      	ite	ne
 80135be:	2301      	movne	r3, #1
 80135c0:	2300      	moveq	r3, #0
 80135c2:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80135c4:	4b24      	ldr	r3, [pc, #144]	; (8013658 <LoRaMacCryptoUnsecureMessage+0x130>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	789b      	ldrb	r3, [r3, #2]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d101      	bne.n	80135d2 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80135ce:	2300      	movs	r3, #0
 80135d0:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80135d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135d4:	6818      	ldr	r0, [r3, #0]
 80135d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135d8:	791b      	ldrb	r3, [r3, #4]
 80135da:	b29b      	uxth	r3, r3
 80135dc:	3b04      	subs	r3, #4
 80135de:	b299      	uxth	r1, r3
 80135e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135e4:	7dbc      	ldrb	r4, [r7, #22]
 80135e6:	7d3a      	ldrb	r2, [r7, #20]
 80135e8:	9303      	str	r3, [sp, #12]
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	9302      	str	r3, [sp, #8]
 80135ee:	68bb      	ldr	r3, [r7, #8]
 80135f0:	9301      	str	r3, [sp, #4]
 80135f2:	2301      	movs	r3, #1
 80135f4:	9300      	str	r3, [sp, #0]
 80135f6:	4623      	mov	r3, r4
 80135f8:	f7ff fb05 	bl	8012c06 <VerifyCmacB0>
 80135fc:	4603      	mov	r3, r0
 80135fe:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013600:	7d7b      	ldrb	r3, [r7, #21]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d001      	beq.n	801360a <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8013606:	7d7b      	ldrb	r3, [r7, #21]
 8013608:	e021      	b.n	801364e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 801360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801360c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d101      	bne.n	8013618 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013614:	2302      	movs	r3, #2
 8013616:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8013618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801361a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801361c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801361e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013622:	b219      	sxth	r1, r3
 8013624:	7dfa      	ldrb	r2, [r7, #23]
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	9301      	str	r3, [sp, #4]
 801362a:	2301      	movs	r3, #1
 801362c:	9300      	str	r3, [sp, #0]
 801362e:	68bb      	ldr	r3, [r7, #8]
 8013630:	f7ff f9aa 	bl	8012988 <PayloadEncrypt>
 8013634:	4603      	mov	r3, r0
 8013636:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013638:	7d7b      	ldrb	r3, [r7, #21]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d001      	beq.n	8013642 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 801363e:	7d7b      	ldrb	r3, [r7, #21]
 8013640:	e005      	b.n	801364e <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8013642:	7bbb      	ldrb	r3, [r7, #14]
 8013644:	6879      	ldr	r1, [r7, #4]
 8013646:	4618      	mov	r0, r3
 8013648:	f7ff fc54 	bl	8012ef4 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 801364c:	2300      	movs	r3, #0
}
 801364e:	4618      	mov	r0, r3
 8013650:	371c      	adds	r7, #28
 8013652:	46bd      	mov	sp, r7
 8013654:	bd90      	pop	{r4, r7, pc}
 8013656:	bf00      	nop
 8013658:	20001b1c 	.word	0x20001b1c

0801365c <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b086      	sub	sp, #24
 8013660:	af00      	add	r7, sp, #0
 8013662:	4603      	mov	r3, r0
 8013664:	460a      	mov	r2, r1
 8013666:	71fb      	strb	r3, [r7, #7]
 8013668:	4613      	mov	r3, r2
 801366a:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 801366c:	79bb      	ldrb	r3, [r7, #6]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d001      	beq.n	8013676 <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013672:	230b      	movs	r3, #11
 8013674:	e019      	b.n	80136aa <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8013676:	2300      	movs	r3, #0
 8013678:	60bb      	str	r3, [r7, #8]
 801367a:	f107 030c 	add.w	r3, r7, #12
 801367e:	2200      	movs	r2, #0
 8013680:	601a      	str	r2, [r3, #0]
 8013682:	605a      	str	r2, [r3, #4]
 8013684:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8013686:	79fb      	ldrb	r3, [r7, #7]
 8013688:	2b01      	cmp	r3, #1
 801368a:	d101      	bne.n	8013690 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 801368c:	2320      	movs	r3, #32
 801368e:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8013690:	79b9      	ldrb	r1, [r7, #6]
 8013692:	f107 0308 	add.w	r3, r7, #8
 8013696:	2204      	movs	r2, #4
 8013698:	4618      	mov	r0, r3
 801369a:	f7f8 fa73 	bl	800bb84 <SecureElementDeriveAndStoreKey>
 801369e:	4603      	mov	r3, r0
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d001      	beq.n	80136a8 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80136a4:	230f      	movs	r3, #15
 80136a6:	e000      	b.n	80136aa <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80136a8:	2300      	movs	r3, #0
}
 80136aa:	4618      	mov	r0, r3
 80136ac:	3718      	adds	r7, #24
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}

080136b2 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 80136b2:	b580      	push	{r7, lr}
 80136b4:	b086      	sub	sp, #24
 80136b6:	af00      	add	r7, sp, #0
 80136b8:	4603      	mov	r3, r0
 80136ba:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 80136bc:	79fb      	ldrb	r3, [r7, #7]
 80136be:	2b04      	cmp	r3, #4
 80136c0:	d001      	beq.n	80136c6 <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80136c2:	230b      	movs	r3, #11
 80136c4:	e014      	b.n	80136f0 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 80136c6:	2300      	movs	r3, #0
 80136c8:	60bb      	str	r3, [r7, #8]
 80136ca:	f107 030c 	add.w	r3, r7, #12
 80136ce:	2200      	movs	r2, #0
 80136d0:	601a      	str	r2, [r3, #0]
 80136d2:	605a      	str	r2, [r3, #4]
 80136d4:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 80136d6:	79f9      	ldrb	r1, [r7, #7]
 80136d8:	f107 0308 	add.w	r3, r7, #8
 80136dc:	227f      	movs	r2, #127	; 0x7f
 80136de:	4618      	mov	r0, r3
 80136e0:	f7f8 fa50 	bl	800bb84 <SecureElementDeriveAndStoreKey>
 80136e4:	4603      	mov	r3, r0
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d001      	beq.n	80136ee <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80136ea:	230f      	movs	r3, #15
 80136ec:	e000      	b.n	80136f0 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80136ee:	2300      	movs	r3, #0
}
 80136f0:	4618      	mov	r0, r3
 80136f2:	3718      	adds	r7, #24
 80136f4:	46bd      	mov	sp, r7
 80136f6:	bd80      	pop	{r7, pc}

080136f8 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b084      	sub	sp, #16
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d003      	beq.n	801370e <LoRaMacParserJoinAccept+0x16>
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d101      	bne.n	8013712 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801370e:	2302      	movs	r3, #2
 8013710:	e0b9      	b.n	8013886 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8013712:	2300      	movs	r3, #0
 8013714:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	681a      	ldr	r2, [r3, #0]
 801371a:	89fb      	ldrh	r3, [r7, #14]
 801371c:	1c59      	adds	r1, r3, #1
 801371e:	81f9      	strh	r1, [r7, #14]
 8013720:	4413      	add	r3, r2
 8013722:	781a      	ldrb	r2, [r3, #0]
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	1d98      	adds	r0, r3, #6
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	681a      	ldr	r2, [r3, #0]
 8013730:	89fb      	ldrh	r3, [r7, #14]
 8013732:	4413      	add	r3, r2
 8013734:	2203      	movs	r2, #3
 8013736:	4619      	mov	r1, r3
 8013738:	f002 fe39 	bl	80163ae <memcpy1>
    bufItr = bufItr + 3;
 801373c:	89fb      	ldrh	r3, [r7, #14]
 801373e:	3303      	adds	r3, #3
 8013740:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	f103 0009 	add.w	r0, r3, #9
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	681a      	ldr	r2, [r3, #0]
 801374c:	89fb      	ldrh	r3, [r7, #14]
 801374e:	4413      	add	r3, r2
 8013750:	2203      	movs	r2, #3
 8013752:	4619      	mov	r1, r3
 8013754:	f002 fe2b 	bl	80163ae <memcpy1>
    bufItr = bufItr + 3;
 8013758:	89fb      	ldrh	r3, [r7, #14]
 801375a:	3303      	adds	r3, #3
 801375c:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	681a      	ldr	r2, [r3, #0]
 8013762:	89fb      	ldrh	r3, [r7, #14]
 8013764:	1c59      	adds	r1, r3, #1
 8013766:	81f9      	strh	r1, [r7, #14]
 8013768:	4413      	add	r3, r2
 801376a:	781b      	ldrb	r3, [r3, #0]
 801376c:	461a      	mov	r2, r3
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	681a      	ldr	r2, [r3, #0]
 8013776:	89fb      	ldrh	r3, [r7, #14]
 8013778:	1c59      	adds	r1, r3, #1
 801377a:	81f9      	strh	r1, [r7, #14]
 801377c:	4413      	add	r3, r2
 801377e:	781b      	ldrb	r3, [r3, #0]
 8013780:	021a      	lsls	r2, r3, #8
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	68db      	ldr	r3, [r3, #12]
 8013786:	431a      	orrs	r2, r3
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	681a      	ldr	r2, [r3, #0]
 8013790:	89fb      	ldrh	r3, [r7, #14]
 8013792:	1c59      	adds	r1, r3, #1
 8013794:	81f9      	strh	r1, [r7, #14]
 8013796:	4413      	add	r3, r2
 8013798:	781b      	ldrb	r3, [r3, #0]
 801379a:	041a      	lsls	r2, r3, #16
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	68db      	ldr	r3, [r3, #12]
 80137a0:	431a      	orrs	r2, r3
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	681a      	ldr	r2, [r3, #0]
 80137aa:	89fb      	ldrh	r3, [r7, #14]
 80137ac:	1c59      	adds	r1, r3, #1
 80137ae:	81f9      	strh	r1, [r7, #14]
 80137b0:	4413      	add	r3, r2
 80137b2:	781b      	ldrb	r3, [r3, #0]
 80137b4:	061a      	lsls	r2, r3, #24
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	68db      	ldr	r3, [r3, #12]
 80137ba:	431a      	orrs	r2, r3
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	681a      	ldr	r2, [r3, #0]
 80137c4:	89fb      	ldrh	r3, [r7, #14]
 80137c6:	1c59      	adds	r1, r3, #1
 80137c8:	81f9      	strh	r1, [r7, #14]
 80137ca:	4413      	add	r3, r2
 80137cc:	781a      	ldrb	r2, [r3, #0]
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	681a      	ldr	r2, [r3, #0]
 80137d6:	89fb      	ldrh	r3, [r7, #14]
 80137d8:	1c59      	adds	r1, r3, #1
 80137da:	81f9      	strh	r1, [r7, #14]
 80137dc:	4413      	add	r3, r2
 80137de:	781a      	ldrb	r2, [r3, #0]
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	791b      	ldrb	r3, [r3, #4]
 80137e8:	1f1a      	subs	r2, r3, #4
 80137ea:	89fb      	ldrh	r3, [r7, #14]
 80137ec:	1ad3      	subs	r3, r2, r3
 80137ee:	2b10      	cmp	r3, #16
 80137f0:	d10e      	bne.n	8013810 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	f103 0012 	add.w	r0, r3, #18
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681a      	ldr	r2, [r3, #0]
 80137fc:	89fb      	ldrh	r3, [r7, #14]
 80137fe:	4413      	add	r3, r2
 8013800:	2210      	movs	r2, #16
 8013802:	4619      	mov	r1, r3
 8013804:	f002 fdd3 	bl	80163ae <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8013808:	89fb      	ldrh	r3, [r7, #14]
 801380a:	3310      	adds	r3, #16
 801380c:	81fb      	strh	r3, [r7, #14]
 801380e:	e008      	b.n	8013822 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	791b      	ldrb	r3, [r3, #4]
 8013814:	1f1a      	subs	r2, r3, #4
 8013816:	89fb      	ldrh	r3, [r7, #14]
 8013818:	1ad3      	subs	r3, r2, r3
 801381a:	2b00      	cmp	r3, #0
 801381c:	dd01      	ble.n	8013822 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 801381e:	2301      	movs	r3, #1
 8013820:	e031      	b.n	8013886 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	681a      	ldr	r2, [r3, #0]
 8013826:	89fb      	ldrh	r3, [r7, #14]
 8013828:	1c59      	adds	r1, r3, #1
 801382a:	81f9      	strh	r1, [r7, #14]
 801382c:	4413      	add	r3, r2
 801382e:	781b      	ldrb	r3, [r3, #0]
 8013830:	461a      	mov	r2, r3
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	681a      	ldr	r2, [r3, #0]
 801383a:	89fb      	ldrh	r3, [r7, #14]
 801383c:	1c59      	adds	r1, r3, #1
 801383e:	81f9      	strh	r1, [r7, #14]
 8013840:	4413      	add	r3, r2
 8013842:	781b      	ldrb	r3, [r3, #0]
 8013844:	021a      	lsls	r2, r3, #8
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801384a:	431a      	orrs	r2, r3
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	681a      	ldr	r2, [r3, #0]
 8013854:	89fb      	ldrh	r3, [r7, #14]
 8013856:	1c59      	adds	r1, r3, #1
 8013858:	81f9      	strh	r1, [r7, #14]
 801385a:	4413      	add	r3, r2
 801385c:	781b      	ldrb	r3, [r3, #0]
 801385e:	041a      	lsls	r2, r3, #16
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013864:	431a      	orrs	r2, r3
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	681a      	ldr	r2, [r3, #0]
 801386e:	89fb      	ldrh	r3, [r7, #14]
 8013870:	1c59      	adds	r1, r3, #1
 8013872:	81f9      	strh	r1, [r7, #14]
 8013874:	4413      	add	r3, r2
 8013876:	781b      	ldrb	r3, [r3, #0]
 8013878:	061a      	lsls	r2, r3, #24
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801387e:	431a      	orrs	r2, r3
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8013884:	2300      	movs	r3, #0
}
 8013886:	4618      	mov	r0, r3
 8013888:	3710      	adds	r7, #16
 801388a:	46bd      	mov	sp, r7
 801388c:	bd80      	pop	{r7, pc}

0801388e <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 801388e:	b580      	push	{r7, lr}
 8013890:	b084      	sub	sp, #16
 8013892:	af00      	add	r7, sp, #0
 8013894:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d003      	beq.n	80138a4 <LoRaMacParserData+0x16>
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d101      	bne.n	80138a8 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80138a4:	2302      	movs	r3, #2
 80138a6:	e0e2      	b.n	8013a6e <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 80138a8:	2300      	movs	r3, #0
 80138aa:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	681a      	ldr	r2, [r3, #0]
 80138b0:	89fb      	ldrh	r3, [r7, #14]
 80138b2:	1c59      	adds	r1, r3, #1
 80138b4:	81f9      	strh	r1, [r7, #14]
 80138b6:	4413      	add	r3, r2
 80138b8:	781a      	ldrb	r2, [r3, #0]
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	681a      	ldr	r2, [r3, #0]
 80138c2:	89fb      	ldrh	r3, [r7, #14]
 80138c4:	1c59      	adds	r1, r3, #1
 80138c6:	81f9      	strh	r1, [r7, #14]
 80138c8:	4413      	add	r3, r2
 80138ca:	781b      	ldrb	r3, [r3, #0]
 80138cc:	461a      	mov	r2, r3
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	681a      	ldr	r2, [r3, #0]
 80138d6:	89fb      	ldrh	r3, [r7, #14]
 80138d8:	1c59      	adds	r1, r3, #1
 80138da:	81f9      	strh	r1, [r7, #14]
 80138dc:	4413      	add	r3, r2
 80138de:	781b      	ldrb	r3, [r3, #0]
 80138e0:	021a      	lsls	r2, r3, #8
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	689b      	ldr	r3, [r3, #8]
 80138e6:	431a      	orrs	r2, r3
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	681a      	ldr	r2, [r3, #0]
 80138f0:	89fb      	ldrh	r3, [r7, #14]
 80138f2:	1c59      	adds	r1, r3, #1
 80138f4:	81f9      	strh	r1, [r7, #14]
 80138f6:	4413      	add	r3, r2
 80138f8:	781b      	ldrb	r3, [r3, #0]
 80138fa:	041a      	lsls	r2, r3, #16
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	689b      	ldr	r3, [r3, #8]
 8013900:	431a      	orrs	r2, r3
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	681a      	ldr	r2, [r3, #0]
 801390a:	89fb      	ldrh	r3, [r7, #14]
 801390c:	1c59      	adds	r1, r3, #1
 801390e:	81f9      	strh	r1, [r7, #14]
 8013910:	4413      	add	r3, r2
 8013912:	781b      	ldrb	r3, [r3, #0]
 8013914:	061a      	lsls	r2, r3, #24
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	689b      	ldr	r3, [r3, #8]
 801391a:	431a      	orrs	r2, r3
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	681a      	ldr	r2, [r3, #0]
 8013924:	89fb      	ldrh	r3, [r7, #14]
 8013926:	1c59      	adds	r1, r3, #1
 8013928:	81f9      	strh	r1, [r7, #14]
 801392a:	4413      	add	r3, r2
 801392c:	781a      	ldrb	r2, [r3, #0]
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	681a      	ldr	r2, [r3, #0]
 8013936:	89fb      	ldrh	r3, [r7, #14]
 8013938:	1c59      	adds	r1, r3, #1
 801393a:	81f9      	strh	r1, [r7, #14]
 801393c:	4413      	add	r3, r2
 801393e:	781b      	ldrb	r3, [r3, #0]
 8013940:	b29a      	uxth	r2, r3
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	681a      	ldr	r2, [r3, #0]
 801394a:	89fb      	ldrh	r3, [r7, #14]
 801394c:	1c59      	adds	r1, r3, #1
 801394e:	81f9      	strh	r1, [r7, #14]
 8013950:	4413      	add	r3, r2
 8013952:	781b      	ldrb	r3, [r3, #0]
 8013954:	0219      	lsls	r1, r3, #8
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	89db      	ldrh	r3, [r3, #14]
 801395a:	b21a      	sxth	r2, r3
 801395c:	b20b      	sxth	r3, r1
 801395e:	4313      	orrs	r3, r2
 8013960:	b21b      	sxth	r3, r3
 8013962:	b29a      	uxth	r2, r3
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	f103 0010 	add.w	r0, r3, #16
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	681a      	ldr	r2, [r3, #0]
 8013972:	89fb      	ldrh	r3, [r7, #14]
 8013974:	18d1      	adds	r1, r2, r3
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	7b1b      	ldrb	r3, [r3, #12]
 801397a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801397e:	b2db      	uxtb	r3, r3
 8013980:	b29b      	uxth	r3, r3
 8013982:	461a      	mov	r2, r3
 8013984:	f002 fd13 	bl	80163ae <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	7b1b      	ldrb	r3, [r3, #12]
 801398c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013990:	b2db      	uxtb	r3, r3
 8013992:	b29a      	uxth	r2, r3
 8013994:	89fb      	ldrh	r3, [r7, #14]
 8013996:	4413      	add	r3, r2
 8013998:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	2200      	movs	r2, #0
 801399e:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	2200      	movs	r2, #0
 80139a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	791b      	ldrb	r3, [r3, #4]
 80139ae:	461a      	mov	r2, r3
 80139b0:	89fb      	ldrh	r3, [r7, #14]
 80139b2:	1ad3      	subs	r3, r2, r3
 80139b4:	2b04      	cmp	r3, #4
 80139b6:	dd28      	ble.n	8013a0a <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	681a      	ldr	r2, [r3, #0]
 80139bc:	89fb      	ldrh	r3, [r7, #14]
 80139be:	1c59      	adds	r1, r3, #1
 80139c0:	81f9      	strh	r1, [r7, #14]
 80139c2:	4413      	add	r3, r2
 80139c4:	781a      	ldrb	r2, [r3, #0]
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	791a      	ldrb	r2, [r3, #4]
 80139d0:	89fb      	ldrh	r3, [r7, #14]
 80139d2:	b2db      	uxtb	r3, r3
 80139d4:	1ad3      	subs	r3, r2, r3
 80139d6:	b2db      	uxtb	r3, r3
 80139d8:	3b04      	subs	r3, #4
 80139da:	b2da      	uxtb	r2, r3
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	681a      	ldr	r2, [r3, #0]
 80139ea:	89fb      	ldrh	r3, [r7, #14]
 80139ec:	18d1      	adds	r1, r2, r3
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80139f4:	b29b      	uxth	r3, r3
 80139f6:	461a      	mov	r2, r3
 80139f8:	f002 fcd9 	bl	80163ae <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a02:	b29a      	uxth	r2, r3
 8013a04:	89fb      	ldrh	r3, [r7, #14]
 8013a06:	4413      	add	r3, r2
 8013a08:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	681a      	ldr	r2, [r3, #0]
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	791b      	ldrb	r3, [r3, #4]
 8013a12:	3b04      	subs	r3, #4
 8013a14:	4413      	add	r3, r2
 8013a16:	781b      	ldrb	r3, [r3, #0]
 8013a18:	461a      	mov	r2, r3
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	6819      	ldr	r1, [r3, #0]
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	791b      	ldrb	r3, [r3, #4]
 8013a2a:	3b03      	subs	r3, #3
 8013a2c:	440b      	add	r3, r1
 8013a2e:	781b      	ldrb	r3, [r3, #0]
 8013a30:	021b      	lsls	r3, r3, #8
 8013a32:	431a      	orrs	r2, r3
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	6819      	ldr	r1, [r3, #0]
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	791b      	ldrb	r3, [r3, #4]
 8013a44:	3b02      	subs	r3, #2
 8013a46:	440b      	add	r3, r1
 8013a48:	781b      	ldrb	r3, [r3, #0]
 8013a4a:	041b      	lsls	r3, r3, #16
 8013a4c:	431a      	orrs	r2, r3
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	6819      	ldr	r1, [r3, #0]
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	791b      	ldrb	r3, [r3, #4]
 8013a5e:	3b01      	subs	r3, #1
 8013a60:	440b      	add	r3, r1
 8013a62:	781b      	ldrb	r3, [r3, #0]
 8013a64:	061b      	lsls	r3, r3, #24
 8013a66:	431a      	orrs	r2, r3
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8013a6c:	2300      	movs	r3, #0
}
 8013a6e:	4618      	mov	r0, r3
 8013a70:	3710      	adds	r7, #16
 8013a72:	46bd      	mov	sp, r7
 8013a74:	bd80      	pop	{r7, pc}

08013a76 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013a76:	b580      	push	{r7, lr}
 8013a78:	b084      	sub	sp, #16
 8013a7a:	af00      	add	r7, sp, #0
 8013a7c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d003      	beq.n	8013a8c <LoRaMacSerializerJoinRequest+0x16>
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d101      	bne.n	8013a90 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013a8c:	2301      	movs	r3, #1
 8013a8e:	e070      	b.n	8013b72 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8013a90:	2300      	movs	r3, #0
 8013a92:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	791b      	ldrb	r3, [r3, #4]
 8013a98:	2b16      	cmp	r3, #22
 8013a9a:	d801      	bhi.n	8013aa0 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013a9c:	2302      	movs	r3, #2
 8013a9e:	e068      	b.n	8013b72 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	681a      	ldr	r2, [r3, #0]
 8013aa4:	89fb      	ldrh	r3, [r7, #14]
 8013aa6:	1c59      	adds	r1, r3, #1
 8013aa8:	81f9      	strh	r1, [r7, #14]
 8013aaa:	4413      	add	r3, r2
 8013aac:	687a      	ldr	r2, [r7, #4]
 8013aae:	7952      	ldrb	r2, [r2, #5]
 8013ab0:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	681a      	ldr	r2, [r3, #0]
 8013ab6:	89fb      	ldrh	r3, [r7, #14]
 8013ab8:	18d0      	adds	r0, r2, r3
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	3306      	adds	r3, #6
 8013abe:	2208      	movs	r2, #8
 8013ac0:	4619      	mov	r1, r3
 8013ac2:	f002 fc8f 	bl	80163e4 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8013ac6:	89fb      	ldrh	r3, [r7, #14]
 8013ac8:	3308      	adds	r3, #8
 8013aca:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	681a      	ldr	r2, [r3, #0]
 8013ad0:	89fb      	ldrh	r3, [r7, #14]
 8013ad2:	18d0      	adds	r0, r2, r3
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	330e      	adds	r3, #14
 8013ad8:	2208      	movs	r2, #8
 8013ada:	4619      	mov	r1, r3
 8013adc:	f002 fc82 	bl	80163e4 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8013ae0:	89fb      	ldrh	r3, [r7, #14]
 8013ae2:	3308      	adds	r3, #8
 8013ae4:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	8ad9      	ldrh	r1, [r3, #22]
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	681a      	ldr	r2, [r3, #0]
 8013aee:	89fb      	ldrh	r3, [r7, #14]
 8013af0:	1c58      	adds	r0, r3, #1
 8013af2:	81f8      	strh	r0, [r7, #14]
 8013af4:	4413      	add	r3, r2
 8013af6:	b2ca      	uxtb	r2, r1
 8013af8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	8adb      	ldrh	r3, [r3, #22]
 8013afe:	0a1b      	lsrs	r3, r3, #8
 8013b00:	b299      	uxth	r1, r3
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	681a      	ldr	r2, [r3, #0]
 8013b06:	89fb      	ldrh	r3, [r7, #14]
 8013b08:	1c58      	adds	r0, r3, #1
 8013b0a:	81f8      	strh	r0, [r7, #14]
 8013b0c:	4413      	add	r3, r2
 8013b0e:	b2ca      	uxtb	r2, r1
 8013b10:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	6999      	ldr	r1, [r3, #24]
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	681a      	ldr	r2, [r3, #0]
 8013b1a:	89fb      	ldrh	r3, [r7, #14]
 8013b1c:	1c58      	adds	r0, r3, #1
 8013b1e:	81f8      	strh	r0, [r7, #14]
 8013b20:	4413      	add	r3, r2
 8013b22:	b2ca      	uxtb	r2, r1
 8013b24:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	699b      	ldr	r3, [r3, #24]
 8013b2a:	0a19      	lsrs	r1, r3, #8
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	681a      	ldr	r2, [r3, #0]
 8013b30:	89fb      	ldrh	r3, [r7, #14]
 8013b32:	1c58      	adds	r0, r3, #1
 8013b34:	81f8      	strh	r0, [r7, #14]
 8013b36:	4413      	add	r3, r2
 8013b38:	b2ca      	uxtb	r2, r1
 8013b3a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	699b      	ldr	r3, [r3, #24]
 8013b40:	0c19      	lsrs	r1, r3, #16
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	681a      	ldr	r2, [r3, #0]
 8013b46:	89fb      	ldrh	r3, [r7, #14]
 8013b48:	1c58      	adds	r0, r3, #1
 8013b4a:	81f8      	strh	r0, [r7, #14]
 8013b4c:	4413      	add	r3, r2
 8013b4e:	b2ca      	uxtb	r2, r1
 8013b50:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	699b      	ldr	r3, [r3, #24]
 8013b56:	0e19      	lsrs	r1, r3, #24
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	681a      	ldr	r2, [r3, #0]
 8013b5c:	89fb      	ldrh	r3, [r7, #14]
 8013b5e:	1c58      	adds	r0, r3, #1
 8013b60:	81f8      	strh	r0, [r7, #14]
 8013b62:	4413      	add	r3, r2
 8013b64:	b2ca      	uxtb	r2, r1
 8013b66:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013b68:	89fb      	ldrh	r3, [r7, #14]
 8013b6a:	b2da      	uxtb	r2, r3
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013b70:	2300      	movs	r3, #0
}
 8013b72:	4618      	mov	r0, r3
 8013b74:	3710      	adds	r7, #16
 8013b76:	46bd      	mov	sp, r7
 8013b78:	bd80      	pop	{r7, pc}

08013b7a <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8013b7a:	b580      	push	{r7, lr}
 8013b7c:	b084      	sub	sp, #16
 8013b7e:	af00      	add	r7, sp, #0
 8013b80:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d003      	beq.n	8013b90 <LoRaMacSerializerData+0x16>
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d101      	bne.n	8013b94 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013b90:	2301      	movs	r3, #1
 8013b92:	e0e5      	b.n	8013d60 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8013b94:	2300      	movs	r3, #0
 8013b96:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8013b98:	2308      	movs	r3, #8
 8013b9a:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	7b1b      	ldrb	r3, [r3, #12]
 8013ba0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013ba4:	b2db      	uxtb	r3, r3
 8013ba6:	b29a      	uxth	r2, r3
 8013ba8:	89bb      	ldrh	r3, [r7, #12]
 8013baa:	4413      	add	r3, r2
 8013bac:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d002      	beq.n	8013bbe <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8013bb8:	89bb      	ldrh	r3, [r7, #12]
 8013bba:	3301      	adds	r3, #1
 8013bbc:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013bc4:	b29a      	uxth	r2, r3
 8013bc6:	89bb      	ldrh	r3, [r7, #12]
 8013bc8:	4413      	add	r3, r2
 8013bca:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8013bcc:	89bb      	ldrh	r3, [r7, #12]
 8013bce:	3304      	adds	r3, #4
 8013bd0:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	791b      	ldrb	r3, [r3, #4]
 8013bd6:	b29b      	uxth	r3, r3
 8013bd8:	89ba      	ldrh	r2, [r7, #12]
 8013bda:	429a      	cmp	r2, r3
 8013bdc:	d901      	bls.n	8013be2 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013bde:	2302      	movs	r3, #2
 8013be0:	e0be      	b.n	8013d60 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	681a      	ldr	r2, [r3, #0]
 8013be6:	89fb      	ldrh	r3, [r7, #14]
 8013be8:	1c59      	adds	r1, r3, #1
 8013bea:	81f9      	strh	r1, [r7, #14]
 8013bec:	4413      	add	r3, r2
 8013bee:	687a      	ldr	r2, [r7, #4]
 8013bf0:	7952      	ldrb	r2, [r2, #5]
 8013bf2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	6899      	ldr	r1, [r3, #8]
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	681a      	ldr	r2, [r3, #0]
 8013bfc:	89fb      	ldrh	r3, [r7, #14]
 8013bfe:	1c58      	adds	r0, r3, #1
 8013c00:	81f8      	strh	r0, [r7, #14]
 8013c02:	4413      	add	r3, r2
 8013c04:	b2ca      	uxtb	r2, r1
 8013c06:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	689b      	ldr	r3, [r3, #8]
 8013c0c:	0a19      	lsrs	r1, r3, #8
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	681a      	ldr	r2, [r3, #0]
 8013c12:	89fb      	ldrh	r3, [r7, #14]
 8013c14:	1c58      	adds	r0, r3, #1
 8013c16:	81f8      	strh	r0, [r7, #14]
 8013c18:	4413      	add	r3, r2
 8013c1a:	b2ca      	uxtb	r2, r1
 8013c1c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	689b      	ldr	r3, [r3, #8]
 8013c22:	0c19      	lsrs	r1, r3, #16
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	681a      	ldr	r2, [r3, #0]
 8013c28:	89fb      	ldrh	r3, [r7, #14]
 8013c2a:	1c58      	adds	r0, r3, #1
 8013c2c:	81f8      	strh	r0, [r7, #14]
 8013c2e:	4413      	add	r3, r2
 8013c30:	b2ca      	uxtb	r2, r1
 8013c32:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	689b      	ldr	r3, [r3, #8]
 8013c38:	0e19      	lsrs	r1, r3, #24
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	681a      	ldr	r2, [r3, #0]
 8013c3e:	89fb      	ldrh	r3, [r7, #14]
 8013c40:	1c58      	adds	r0, r3, #1
 8013c42:	81f8      	strh	r0, [r7, #14]
 8013c44:	4413      	add	r3, r2
 8013c46:	b2ca      	uxtb	r2, r1
 8013c48:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	681a      	ldr	r2, [r3, #0]
 8013c4e:	89fb      	ldrh	r3, [r7, #14]
 8013c50:	1c59      	adds	r1, r3, #1
 8013c52:	81f9      	strh	r1, [r7, #14]
 8013c54:	4413      	add	r3, r2
 8013c56:	687a      	ldr	r2, [r7, #4]
 8013c58:	7b12      	ldrb	r2, [r2, #12]
 8013c5a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	89d9      	ldrh	r1, [r3, #14]
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681a      	ldr	r2, [r3, #0]
 8013c64:	89fb      	ldrh	r3, [r7, #14]
 8013c66:	1c58      	adds	r0, r3, #1
 8013c68:	81f8      	strh	r0, [r7, #14]
 8013c6a:	4413      	add	r3, r2
 8013c6c:	b2ca      	uxtb	r2, r1
 8013c6e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	89db      	ldrh	r3, [r3, #14]
 8013c74:	0a1b      	lsrs	r3, r3, #8
 8013c76:	b299      	uxth	r1, r3
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	681a      	ldr	r2, [r3, #0]
 8013c7c:	89fb      	ldrh	r3, [r7, #14]
 8013c7e:	1c58      	adds	r0, r3, #1
 8013c80:	81f8      	strh	r0, [r7, #14]
 8013c82:	4413      	add	r3, r2
 8013c84:	b2ca      	uxtb	r2, r1
 8013c86:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	681a      	ldr	r2, [r3, #0]
 8013c8c:	89fb      	ldrh	r3, [r7, #14]
 8013c8e:	18d0      	adds	r0, r2, r3
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	f103 0110 	add.w	r1, r3, #16
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	7b1b      	ldrb	r3, [r3, #12]
 8013c9a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013c9e:	b2db      	uxtb	r3, r3
 8013ca0:	b29b      	uxth	r3, r3
 8013ca2:	461a      	mov	r2, r3
 8013ca4:	f002 fb83 	bl	80163ae <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	7b1b      	ldrb	r3, [r3, #12]
 8013cac:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013cb0:	b2db      	uxtb	r3, r3
 8013cb2:	b29a      	uxth	r2, r3
 8013cb4:	89fb      	ldrh	r3, [r7, #14]
 8013cb6:	4413      	add	r3, r2
 8013cb8:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d009      	beq.n	8013cd8 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	681a      	ldr	r2, [r3, #0]
 8013cc8:	89fb      	ldrh	r3, [r7, #14]
 8013cca:	1c59      	adds	r1, r3, #1
 8013ccc:	81f9      	strh	r1, [r7, #14]
 8013cce:	4413      	add	r3, r2
 8013cd0:	687a      	ldr	r2, [r7, #4]
 8013cd2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8013cd6:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	681a      	ldr	r2, [r3, #0]
 8013cdc:	89fb      	ldrh	r3, [r7, #14]
 8013cde:	18d0      	adds	r0, r2, r3
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013cea:	b29b      	uxth	r3, r3
 8013cec:	461a      	mov	r2, r3
 8013cee:	f002 fb5e 	bl	80163ae <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013cf8:	b29a      	uxth	r2, r3
 8013cfa:	89fb      	ldrh	r3, [r7, #14]
 8013cfc:	4413      	add	r3, r2
 8013cfe:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	681a      	ldr	r2, [r3, #0]
 8013d08:	89fb      	ldrh	r3, [r7, #14]
 8013d0a:	1c58      	adds	r0, r3, #1
 8013d0c:	81f8      	strh	r0, [r7, #14]
 8013d0e:	4413      	add	r3, r2
 8013d10:	b2ca      	uxtb	r2, r1
 8013d12:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d18:	0a19      	lsrs	r1, r3, #8
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	681a      	ldr	r2, [r3, #0]
 8013d1e:	89fb      	ldrh	r3, [r7, #14]
 8013d20:	1c58      	adds	r0, r3, #1
 8013d22:	81f8      	strh	r0, [r7, #14]
 8013d24:	4413      	add	r3, r2
 8013d26:	b2ca      	uxtb	r2, r1
 8013d28:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d2e:	0c19      	lsrs	r1, r3, #16
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	681a      	ldr	r2, [r3, #0]
 8013d34:	89fb      	ldrh	r3, [r7, #14]
 8013d36:	1c58      	adds	r0, r3, #1
 8013d38:	81f8      	strh	r0, [r7, #14]
 8013d3a:	4413      	add	r3, r2
 8013d3c:	b2ca      	uxtb	r2, r1
 8013d3e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d44:	0e19      	lsrs	r1, r3, #24
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	681a      	ldr	r2, [r3, #0]
 8013d4a:	89fb      	ldrh	r3, [r7, #14]
 8013d4c:	1c58      	adds	r0, r3, #1
 8013d4e:	81f8      	strh	r0, [r7, #14]
 8013d50:	4413      	add	r3, r2
 8013d52:	b2ca      	uxtb	r2, r1
 8013d54:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013d56:	89fb      	ldrh	r3, [r7, #14]
 8013d58:	b2da      	uxtb	r2, r3
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013d5e:	2300      	movs	r3, #0
}
 8013d60:	4618      	mov	r0, r3
 8013d62:	3710      	adds	r7, #16
 8013d64:	46bd      	mov	sp, r7
 8013d66:	bd80      	pop	{r7, pc}

08013d68 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8013d68:	b480      	push	{r7}
 8013d6a:	b083      	sub	sp, #12
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	4603      	mov	r3, r0
 8013d70:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013d72:	79fb      	ldrb	r3, [r7, #7]
 8013d74:	2b05      	cmp	r3, #5
 8013d76:	d101      	bne.n	8013d7c <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8013d78:	2301      	movs	r3, #1
 8013d7a:	e000      	b.n	8013d7e <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8013d7c:	2300      	movs	r3, #0
        }
    }
}
 8013d7e:	4618      	mov	r0, r3
 8013d80:	370c      	adds	r7, #12
 8013d82:	46bd      	mov	sp, r7
 8013d84:	bc80      	pop	{r7}
 8013d86:	4770      	bx	lr

08013d88 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b084      	sub	sp, #16
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	4603      	mov	r3, r0
 8013d90:	6039      	str	r1, [r7, #0]
 8013d92:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8013d94:	2300      	movs	r3, #0
 8013d96:	60bb      	str	r3, [r7, #8]
    switch( region )
 8013d98:	79fb      	ldrb	r3, [r7, #7]
 8013d9a:	2b05      	cmp	r3, #5
 8013d9c:	d105      	bne.n	8013daa <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8013d9e:	6838      	ldr	r0, [r7, #0]
 8013da0:	f001 f994 	bl	80150cc <RegionEU868GetPhyParam>
 8013da4:	4603      	mov	r3, r0
 8013da6:	60fb      	str	r3, [r7, #12]
 8013da8:	e001      	b.n	8013dae <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8013daa:	68bb      	ldr	r3, [r7, #8]
 8013dac:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	4618      	mov	r0, r3
 8013db2:	3710      	adds	r7, #16
 8013db4:	46bd      	mov	sp, r7
 8013db6:	bd80      	pop	{r7, pc}

08013db8 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8013db8:	b580      	push	{r7, lr}
 8013dba:	b082      	sub	sp, #8
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	6039      	str	r1, [r7, #0]
 8013dc2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013dc4:	79fb      	ldrb	r3, [r7, #7]
 8013dc6:	2b05      	cmp	r3, #5
 8013dc8:	d103      	bne.n	8013dd2 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8013dca:	6838      	ldr	r0, [r7, #0]
 8013dcc:	f001 faca 	bl	8015364 <RegionEU868SetBandTxDone>
 8013dd0:	e000      	b.n	8013dd4 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8013dd2:	bf00      	nop
        }
    }
}
 8013dd4:	3708      	adds	r7, #8
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}

08013dda <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8013dda:	b580      	push	{r7, lr}
 8013ddc:	b082      	sub	sp, #8
 8013dde:	af00      	add	r7, sp, #0
 8013de0:	4603      	mov	r3, r0
 8013de2:	6039      	str	r1, [r7, #0]
 8013de4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013de6:	79fb      	ldrb	r3, [r7, #7]
 8013de8:	2b05      	cmp	r3, #5
 8013dea:	d103      	bne.n	8013df4 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8013dec:	6838      	ldr	r0, [r7, #0]
 8013dee:	f001 fae5 	bl	80153bc <RegionEU868InitDefaults>
 8013df2:	e000      	b.n	8013df6 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8013df4:	bf00      	nop
        }
    }
}
 8013df6:	bf00      	nop
 8013df8:	3708      	adds	r7, #8
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bd80      	pop	{r7, pc}

08013dfe <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8013dfe:	b580      	push	{r7, lr}
 8013e00:	b082      	sub	sp, #8
 8013e02:	af00      	add	r7, sp, #0
 8013e04:	4603      	mov	r3, r0
 8013e06:	6039      	str	r1, [r7, #0]
 8013e08:	71fb      	strb	r3, [r7, #7]
 8013e0a:	4613      	mov	r3, r2
 8013e0c:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8013e0e:	79fb      	ldrb	r3, [r7, #7]
 8013e10:	2b05      	cmp	r3, #5
 8013e12:	d106      	bne.n	8013e22 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8013e14:	79bb      	ldrb	r3, [r7, #6]
 8013e16:	4619      	mov	r1, r3
 8013e18:	6838      	ldr	r0, [r7, #0]
 8013e1a:	f001 fb6d 	bl	80154f8 <RegionEU868Verify>
 8013e1e:	4603      	mov	r3, r0
 8013e20:	e000      	b.n	8013e24 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8013e22:	2300      	movs	r3, #0
        }
    }
}
 8013e24:	4618      	mov	r0, r3
 8013e26:	3708      	adds	r7, #8
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bd80      	pop	{r7, pc}

08013e2c <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b082      	sub	sp, #8
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	4603      	mov	r3, r0
 8013e34:	6039      	str	r1, [r7, #0]
 8013e36:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013e38:	79fb      	ldrb	r3, [r7, #7]
 8013e3a:	2b05      	cmp	r3, #5
 8013e3c:	d103      	bne.n	8013e46 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8013e3e:	6838      	ldr	r0, [r7, #0]
 8013e40:	f001 fbd6 	bl	80155f0 <RegionEU868ApplyCFList>
 8013e44:	e000      	b.n	8013e48 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8013e46:	bf00      	nop
        }
    }
}
 8013e48:	bf00      	nop
 8013e4a:	3708      	adds	r7, #8
 8013e4c:	46bd      	mov	sp, r7
 8013e4e:	bd80      	pop	{r7, pc}

08013e50 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b082      	sub	sp, #8
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	4603      	mov	r3, r0
 8013e58:	6039      	str	r1, [r7, #0]
 8013e5a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013e5c:	79fb      	ldrb	r3, [r7, #7]
 8013e5e:	2b05      	cmp	r3, #5
 8013e60:	d104      	bne.n	8013e6c <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8013e62:	6838      	ldr	r0, [r7, #0]
 8013e64:	f001 fc38 	bl	80156d8 <RegionEU868ChanMaskSet>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	e000      	b.n	8013e6e <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8013e6c:	2300      	movs	r3, #0
        }
    }
}
 8013e6e:	4618      	mov	r0, r3
 8013e70:	3708      	adds	r7, #8
 8013e72:	46bd      	mov	sp, r7
 8013e74:	bd80      	pop	{r7, pc}

08013e76 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8013e76:	b580      	push	{r7, lr}
 8013e78:	b082      	sub	sp, #8
 8013e7a:	af00      	add	r7, sp, #0
 8013e7c:	603b      	str	r3, [r7, #0]
 8013e7e:	4603      	mov	r3, r0
 8013e80:	71fb      	strb	r3, [r7, #7]
 8013e82:	460b      	mov	r3, r1
 8013e84:	71bb      	strb	r3, [r7, #6]
 8013e86:	4613      	mov	r3, r2
 8013e88:	717b      	strb	r3, [r7, #5]
    switch( region )
 8013e8a:	79fb      	ldrb	r3, [r7, #7]
 8013e8c:	2b05      	cmp	r3, #5
 8013e8e:	d107      	bne.n	8013ea0 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8013e90:	7979      	ldrb	r1, [r7, #5]
 8013e92:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8013e96:	693b      	ldr	r3, [r7, #16]
 8013e98:	683a      	ldr	r2, [r7, #0]
 8013e9a:	f001 fc47 	bl	801572c <RegionEU868ComputeRxWindowParameters>
 8013e9e:	e000      	b.n	8013ea2 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8013ea0:	bf00      	nop
        }
    }
}
 8013ea2:	bf00      	nop
 8013ea4:	3708      	adds	r7, #8
 8013ea6:	46bd      	mov	sp, r7
 8013ea8:	bd80      	pop	{r7, pc}

08013eaa <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8013eaa:	b580      	push	{r7, lr}
 8013eac:	b084      	sub	sp, #16
 8013eae:	af00      	add	r7, sp, #0
 8013eb0:	4603      	mov	r3, r0
 8013eb2:	60b9      	str	r1, [r7, #8]
 8013eb4:	607a      	str	r2, [r7, #4]
 8013eb6:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013eb8:	7bfb      	ldrb	r3, [r7, #15]
 8013eba:	2b05      	cmp	r3, #5
 8013ebc:	d105      	bne.n	8013eca <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8013ebe:	6879      	ldr	r1, [r7, #4]
 8013ec0:	68b8      	ldr	r0, [r7, #8]
 8013ec2:	f001 fc8d 	bl	80157e0 <RegionEU868RxConfig>
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	e000      	b.n	8013ecc <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8013eca:	2300      	movs	r3, #0
        }
    }
}
 8013ecc:	4618      	mov	r0, r3
 8013ece:	3710      	adds	r7, #16
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd80      	pop	{r7, pc}

08013ed4 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b084      	sub	sp, #16
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	60b9      	str	r1, [r7, #8]
 8013edc:	607a      	str	r2, [r7, #4]
 8013ede:	603b      	str	r3, [r7, #0]
 8013ee0:	4603      	mov	r3, r0
 8013ee2:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013ee4:	7bfb      	ldrb	r3, [r7, #15]
 8013ee6:	2b05      	cmp	r3, #5
 8013ee8:	d106      	bne.n	8013ef8 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8013eea:	683a      	ldr	r2, [r7, #0]
 8013eec:	6879      	ldr	r1, [r7, #4]
 8013eee:	68b8      	ldr	r0, [r7, #8]
 8013ef0:	f001 fd46 	bl	8015980 <RegionEU868TxConfig>
 8013ef4:	4603      	mov	r3, r0
 8013ef6:	e000      	b.n	8013efa <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8013ef8:	2300      	movs	r3, #0
        }
    }
}
 8013efa:	4618      	mov	r0, r3
 8013efc:	3710      	adds	r7, #16
 8013efe:	46bd      	mov	sp, r7
 8013f00:	bd80      	pop	{r7, pc}

08013f02 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8013f02:	b580      	push	{r7, lr}
 8013f04:	b086      	sub	sp, #24
 8013f06:	af02      	add	r7, sp, #8
 8013f08:	60b9      	str	r1, [r7, #8]
 8013f0a:	607a      	str	r2, [r7, #4]
 8013f0c:	603b      	str	r3, [r7, #0]
 8013f0e:	4603      	mov	r3, r0
 8013f10:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013f12:	7bfb      	ldrb	r3, [r7, #15]
 8013f14:	2b05      	cmp	r3, #5
 8013f16:	d109      	bne.n	8013f2c <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8013f18:	69fb      	ldr	r3, [r7, #28]
 8013f1a:	9300      	str	r3, [sp, #0]
 8013f1c:	69bb      	ldr	r3, [r7, #24]
 8013f1e:	683a      	ldr	r2, [r7, #0]
 8013f20:	6879      	ldr	r1, [r7, #4]
 8013f22:	68b8      	ldr	r0, [r7, #8]
 8013f24:	f001 fdfc 	bl	8015b20 <RegionEU868LinkAdrReq>
 8013f28:	4603      	mov	r3, r0
 8013f2a:	e000      	b.n	8013f2e <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8013f2c:	2300      	movs	r3, #0
        }
    }
}
 8013f2e:	4618      	mov	r0, r3
 8013f30:	3710      	adds	r7, #16
 8013f32:	46bd      	mov	sp, r7
 8013f34:	bd80      	pop	{r7, pc}

08013f36 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013f36:	b580      	push	{r7, lr}
 8013f38:	b082      	sub	sp, #8
 8013f3a:	af00      	add	r7, sp, #0
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	6039      	str	r1, [r7, #0]
 8013f40:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013f42:	79fb      	ldrb	r3, [r7, #7]
 8013f44:	2b05      	cmp	r3, #5
 8013f46:	d104      	bne.n	8013f52 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8013f48:	6838      	ldr	r0, [r7, #0]
 8013f4a:	f001 ff0b 	bl	8015d64 <RegionEU868RxParamSetupReq>
 8013f4e:	4603      	mov	r3, r0
 8013f50:	e000      	b.n	8013f54 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8013f52:	2300      	movs	r3, #0
        }
    }
}
 8013f54:	4618      	mov	r0, r3
 8013f56:	3708      	adds	r7, #8
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd80      	pop	{r7, pc}

08013f5c <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b082      	sub	sp, #8
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	4603      	mov	r3, r0
 8013f64:	6039      	str	r1, [r7, #0]
 8013f66:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013f68:	79fb      	ldrb	r3, [r7, #7]
 8013f6a:	2b05      	cmp	r3, #5
 8013f6c:	d104      	bne.n	8013f78 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8013f6e:	6838      	ldr	r0, [r7, #0]
 8013f70:	f001 ff36 	bl	8015de0 <RegionEU868NewChannelReq>
 8013f74:	4603      	mov	r3, r0
 8013f76:	e000      	b.n	8013f7a <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8013f78:	2300      	movs	r3, #0
        }
    }
}
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	3708      	adds	r7, #8
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	bd80      	pop	{r7, pc}

08013f82 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8013f82:	b580      	push	{r7, lr}
 8013f84:	b082      	sub	sp, #8
 8013f86:	af00      	add	r7, sp, #0
 8013f88:	4603      	mov	r3, r0
 8013f8a:	6039      	str	r1, [r7, #0]
 8013f8c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013f8e:	79fb      	ldrb	r3, [r7, #7]
 8013f90:	2b05      	cmp	r3, #5
 8013f92:	d104      	bne.n	8013f9e <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8013f94:	6838      	ldr	r0, [r7, #0]
 8013f96:	f001 ff81 	bl	8015e9c <RegionEU868TxParamSetupReq>
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	e000      	b.n	8013fa0 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8013f9e:	2300      	movs	r3, #0
        }
    }
}
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	3708      	adds	r7, #8
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	bd80      	pop	{r7, pc}

08013fa8 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b082      	sub	sp, #8
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	4603      	mov	r3, r0
 8013fb0:	6039      	str	r1, [r7, #0]
 8013fb2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013fb4:	79fb      	ldrb	r3, [r7, #7]
 8013fb6:	2b05      	cmp	r3, #5
 8013fb8:	d104      	bne.n	8013fc4 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8013fba:	6838      	ldr	r0, [r7, #0]
 8013fbc:	f001 ff7a 	bl	8015eb4 <RegionEU868DlChannelReq>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	e000      	b.n	8013fc6 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8013fc4:	2300      	movs	r3, #0
        }
    }
}
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	3708      	adds	r7, #8
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bd80      	pop	{r7, pc}

08013fce <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8013fce:	b580      	push	{r7, lr}
 8013fd0:	b082      	sub	sp, #8
 8013fd2:	af00      	add	r7, sp, #0
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	71fb      	strb	r3, [r7, #7]
 8013fd8:	460b      	mov	r3, r1
 8013fda:	71bb      	strb	r3, [r7, #6]
 8013fdc:	4613      	mov	r3, r2
 8013fde:	717b      	strb	r3, [r7, #5]
    switch( region )
 8013fe0:	79fb      	ldrb	r3, [r7, #7]
 8013fe2:	2b05      	cmp	r3, #5
 8013fe4:	d108      	bne.n	8013ff8 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8013fe6:	797a      	ldrb	r2, [r7, #5]
 8013fe8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013fec:	4611      	mov	r1, r2
 8013fee:	4618      	mov	r0, r3
 8013ff0:	f001 ffa4 	bl	8015f3c <RegionEU868AlternateDr>
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	e000      	b.n	8013ffa <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8013ff8:	2300      	movs	r3, #0
        }
    }
}
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	3708      	adds	r7, #8
 8013ffe:	46bd      	mov	sp, r7
 8014000:	bd80      	pop	{r7, pc}

08014002 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014002:	b580      	push	{r7, lr}
 8014004:	b084      	sub	sp, #16
 8014006:	af00      	add	r7, sp, #0
 8014008:	60b9      	str	r1, [r7, #8]
 801400a:	607a      	str	r2, [r7, #4]
 801400c:	603b      	str	r3, [r7, #0]
 801400e:	4603      	mov	r3, r0
 8014010:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014012:	7bfb      	ldrb	r3, [r7, #15]
 8014014:	2b05      	cmp	r3, #5
 8014016:	d107      	bne.n	8014028 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8014018:	69bb      	ldr	r3, [r7, #24]
 801401a:	683a      	ldr	r2, [r7, #0]
 801401c:	6879      	ldr	r1, [r7, #4]
 801401e:	68b8      	ldr	r0, [r7, #8]
 8014020:	f001 ff9c 	bl	8015f5c <RegionEU868NextChannel>
 8014024:	4603      	mov	r3, r0
 8014026:	e000      	b.n	801402a <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8014028:	2309      	movs	r3, #9
        }
    }
}
 801402a:	4618      	mov	r0, r3
 801402c:	3710      	adds	r7, #16
 801402e:	46bd      	mov	sp, r7
 8014030:	bd80      	pop	{r7, pc}

08014032 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8014032:	b580      	push	{r7, lr}
 8014034:	b082      	sub	sp, #8
 8014036:	af00      	add	r7, sp, #0
 8014038:	4603      	mov	r3, r0
 801403a:	6039      	str	r1, [r7, #0]
 801403c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801403e:	79fb      	ldrb	r3, [r7, #7]
 8014040:	2b05      	cmp	r3, #5
 8014042:	d103      	bne.n	801404c <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8014044:	6838      	ldr	r0, [r7, #0]
 8014046:	f002 f903 	bl	8016250 <RegionEU868SetContinuousWave>
 801404a:	e000      	b.n	801404e <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 801404c:	bf00      	nop
        }
    }
}
 801404e:	bf00      	nop
 8014050:	3708      	adds	r7, #8
 8014052:	46bd      	mov	sp, r7
 8014054:	bd80      	pop	{r7, pc}

08014056 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8014056:	b590      	push	{r4, r7, lr}
 8014058:	b083      	sub	sp, #12
 801405a:	af00      	add	r7, sp, #0
 801405c:	4604      	mov	r4, r0
 801405e:	4608      	mov	r0, r1
 8014060:	4611      	mov	r1, r2
 8014062:	461a      	mov	r2, r3
 8014064:	4623      	mov	r3, r4
 8014066:	71fb      	strb	r3, [r7, #7]
 8014068:	4603      	mov	r3, r0
 801406a:	71bb      	strb	r3, [r7, #6]
 801406c:	460b      	mov	r3, r1
 801406e:	717b      	strb	r3, [r7, #5]
 8014070:	4613      	mov	r3, r2
 8014072:	713b      	strb	r3, [r7, #4]
    switch( region )
 8014074:	79fb      	ldrb	r3, [r7, #7]
 8014076:	2b05      	cmp	r3, #5
 8014078:	d109      	bne.n	801408e <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 801407a:	f997 2004 	ldrsb.w	r2, [r7, #4]
 801407e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014082:	79bb      	ldrb	r3, [r7, #6]
 8014084:	4618      	mov	r0, r3
 8014086:	f002 f931 	bl	80162ec <RegionEU868ApplyDrOffset>
 801408a:	4603      	mov	r3, r0
 801408c:	e000      	b.n	8014090 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 801408e:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8014090:	4618      	mov	r0, r3
 8014092:	370c      	adds	r7, #12
 8014094:	46bd      	mov	sp, r7
 8014096:	bd90      	pop	{r4, r7, pc}

08014098 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8014098:	b480      	push	{r7}
 801409a:	b083      	sub	sp, #12
 801409c:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801409e:	4b04      	ldr	r3, [pc, #16]	; (80140b0 <RegionGetVersion+0x18>)
 80140a0:	607b      	str	r3, [r7, #4]

    return version;
 80140a2:	687b      	ldr	r3, [r7, #4]
}
 80140a4:	4618      	mov	r0, r3
 80140a6:	370c      	adds	r7, #12
 80140a8:	46bd      	mov	sp, r7
 80140aa:	bc80      	pop	{r7}
 80140ac:	4770      	bx	lr
 80140ae:	bf00      	nop
 80140b0:	01010003 	.word	0x01010003

080140b4 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80140b4:	b480      	push	{r7}
 80140b6:	b087      	sub	sp, #28
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	60f8      	str	r0, [r7, #12]
 80140bc:	4608      	mov	r0, r1
 80140be:	4639      	mov	r1, r7
 80140c0:	e881 000c 	stmia.w	r1, {r2, r3}
 80140c4:	4603      	mov	r3, r0
 80140c6:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	881b      	ldrh	r3, [r3, #0]
 80140cc:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 80140ce:	7afb      	ldrb	r3, [r7, #11]
 80140d0:	f083 0301 	eor.w	r3, r3, #1
 80140d4:	b2db      	uxtb	r3, r3
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d01b      	beq.n	8014112 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 80140da:	f242 7310 	movw	r3, #10000	; 0x2710
 80140de:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80140e0:	683b      	ldr	r3, [r7, #0]
 80140e2:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80140e6:	d202      	bcs.n	80140ee <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80140e8:	2364      	movs	r3, #100	; 0x64
 80140ea:	82bb      	strh	r3, [r7, #20]
 80140ec:	e00b      	b.n	8014106 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80140ee:	683b      	ldr	r3, [r7, #0]
 80140f0:	f649 22af 	movw	r2, #39599	; 0x9aaf
 80140f4:	4293      	cmp	r3, r2
 80140f6:	d803      	bhi.n	8014100 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80140f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80140fc:	82bb      	strh	r3, [r7, #20]
 80140fe:	e002      	b.n	8014106 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014100:	f242 7310 	movw	r3, #10000	; 0x2710
 8014104:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8014106:	8aba      	ldrh	r2, [r7, #20]
 8014108:	8afb      	ldrh	r3, [r7, #22]
 801410a:	4293      	cmp	r3, r2
 801410c:	bf38      	it	cc
 801410e:	4613      	movcc	r3, r2
 8014110:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8014112:	8afb      	ldrh	r3, [r7, #22]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d101      	bne.n	801411c <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8014118:	2301      	movs	r3, #1
 801411a:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 801411c:	8afb      	ldrh	r3, [r7, #22]
}
 801411e:	4618      	mov	r0, r3
 8014120:	371c      	adds	r7, #28
 8014122:	46bd      	mov	sp, r7
 8014124:	bc80      	pop	{r7}
 8014126:	4770      	bx	lr

08014128 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b08e      	sub	sp, #56	; 0x38
 801412c:	af02      	add	r7, sp, #8
 801412e:	60f8      	str	r0, [r7, #12]
 8014130:	4608      	mov	r0, r1
 8014132:	4639      	mov	r1, r7
 8014134:	e881 000c 	stmia.w	r1, {r2, r3}
 8014138:	4603      	mov	r3, r0
 801413a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	881b      	ldrh	r3, [r3, #0]
 8014140:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8014142:	4b4b      	ldr	r3, [pc, #300]	; (8014270 <SetMaxTimeCredits+0x148>)
 8014144:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8014146:	463b      	mov	r3, r7
 8014148:	e893 0003 	ldmia.w	r3, {r0, r1}
 801414c:	f005 fd66 	bl	8019c1c <SysTimeToMs>
 8014150:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8014152:	f107 0314 	add.w	r3, r7, #20
 8014156:	2200      	movs	r2, #0
 8014158:	601a      	str	r2, [r3, #0]
 801415a:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801415c:	7af9      	ldrb	r1, [r7, #11]
 801415e:	463b      	mov	r3, r7
 8014160:	cb0c      	ldmia	r3, {r2, r3}
 8014162:	68f8      	ldr	r0, [r7, #12]
 8014164:	f7ff ffa6 	bl	80140b4 <GetDutyCycle>
 8014168:	4603      	mov	r3, r0
 801416a:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 801416c:	7afb      	ldrb	r3, [r7, #11]
 801416e:	f083 0301 	eor.w	r3, r3, #1
 8014172:	b2db      	uxtb	r3, r3
 8014174:	2b00      	cmp	r3, #0
 8014176:	d062      	beq.n	801423e <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8014178:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801417a:	2b64      	cmp	r3, #100	; 0x64
 801417c:	d105      	bne.n	801418a <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801417e:	4b3c      	ldr	r3, [pc, #240]	; (8014270 <SetMaxTimeCredits+0x148>)
 8014180:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014186:	609a      	str	r2, [r3, #8]
 8014188:	e00b      	b.n	80141a2 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801418a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801418c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014190:	d105      	bne.n	801419e <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8014192:	4b38      	ldr	r3, [pc, #224]	; (8014274 <SetMaxTimeCredits+0x14c>)
 8014194:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801419a:	609a      	str	r2, [r3, #8]
 801419c:	e001      	b.n	80141a2 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801419e:	4b36      	ldr	r3, [pc, #216]	; (8014278 <SetMaxTimeCredits+0x150>)
 80141a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	689a      	ldr	r2, [r3, #8]
 80141a6:	f107 031c 	add.w	r3, r7, #28
 80141aa:	4611      	mov	r1, r2
 80141ac:	4618      	mov	r0, r3
 80141ae:	f005 fd5d 	bl	8019c6c <SysTimeFromMs>
 80141b2:	f107 0014 	add.w	r0, r7, #20
 80141b6:	6a3b      	ldr	r3, [r7, #32]
 80141b8:	9300      	str	r3, [sp, #0]
 80141ba:	69fb      	ldr	r3, [r7, #28]
 80141bc:	463a      	mov	r2, r7
 80141be:	ca06      	ldmia	r2, {r1, r2}
 80141c0:	f005 fc6d 	bl	8019a9e <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80141c4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80141c8:	f083 0301 	eor.w	r3, r3, #1
 80141cc:	b2db      	uxtb	r3, r3
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d006      	beq.n	80141e0 <SetMaxTimeCredits+0xb8>
 80141d2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80141d6:	f083 0301 	eor.w	r3, r3, #1
 80141da:	b2db      	uxtb	r3, r3
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d108      	bne.n	80141f2 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80141e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141e6:	429a      	cmp	r2, r3
 80141e8:	d103      	bne.n	80141f2 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 80141ea:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 80141ec:	4a23      	ldr	r2, [pc, #140]	; (801427c <SetMaxTimeCredits+0x154>)
 80141ee:	4293      	cmp	r3, r2
 80141f0:	d92f      	bls.n	8014252 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141f6:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80141f8:	683b      	ldr	r3, [r7, #0]
 80141fa:	4a21      	ldr	r2, [pc, #132]	; (8014280 <SetMaxTimeCredits+0x158>)
 80141fc:	4293      	cmp	r3, r2
 80141fe:	d928      	bls.n	8014252 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8014200:	683b      	ldr	r3, [r7, #0]
 8014202:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8014206:	3b30      	subs	r3, #48	; 0x30
 8014208:	4a1e      	ldr	r2, [pc, #120]	; (8014284 <SetMaxTimeCredits+0x15c>)
 801420a:	fba2 2303 	umull	r2, r3, r2, r3
 801420e:	0c1b      	lsrs	r3, r3, #16
 8014210:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8014212:	697b      	ldr	r3, [r7, #20]
 8014214:	4a1c      	ldr	r2, [pc, #112]	; (8014288 <SetMaxTimeCredits+0x160>)
 8014216:	fb02 f303 	mul.w	r3, r2, r3
 801421a:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801421c:	697b      	ldr	r3, [r7, #20]
 801421e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8014222:	3330      	adds	r3, #48	; 0x30
 8014224:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8014226:	2300      	movs	r3, #0
 8014228:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801422a:	f107 0314 	add.w	r3, r7, #20
 801422e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014232:	f005 fcf3 	bl	8019c1c <SysTimeToMs>
 8014236:	4602      	mov	r2, r0
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	609a      	str	r2, [r3, #8]
 801423c:	e009      	b.n	8014252 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 801423e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014242:	f083 0301 	eor.w	r3, r3, #1
 8014246:	b2db      	uxtb	r3, r3
 8014248:	2b00      	cmp	r3, #0
 801424a:	d002      	beq.n	8014252 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014250:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	685b      	ldr	r3, [r3, #4]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d102      	bne.n	8014260 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801425e:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014264:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8014266:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8014268:	4618      	mov	r0, r3
 801426a:	3730      	adds	r7, #48	; 0x30
 801426c:	46bd      	mov	sp, r7
 801426e:	bd80      	pop	{r7, pc}
 8014270:	001b7740 	.word	0x001b7740
 8014274:	0112a880 	.word	0x0112a880
 8014278:	02932e00 	.word	0x02932e00
 801427c:	0001517f 	.word	0x0001517f
 8014280:	0001ec2f 	.word	0x0001ec2f
 8014284:	c22e4507 	.word	0xc22e4507
 8014288:	00015180 	.word	0x00015180

0801428c <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b086      	sub	sp, #24
 8014290:	af02      	add	r7, sp, #8
 8014292:	6078      	str	r0, [r7, #4]
 8014294:	4608      	mov	r0, r1
 8014296:	4611      	mov	r1, r2
 8014298:	461a      	mov	r2, r3
 801429a:	4603      	mov	r3, r0
 801429c:	70fb      	strb	r3, [r7, #3]
 801429e:	460b      	mov	r3, r1
 80142a0:	70bb      	strb	r3, [r7, #2]
 80142a2:	4613      	mov	r3, r2
 80142a4:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80142a6:	78f9      	ldrb	r1, [r7, #3]
 80142a8:	787b      	ldrb	r3, [r7, #1]
 80142aa:	9301      	str	r3, [sp, #4]
 80142ac:	78bb      	ldrb	r3, [r7, #2]
 80142ae:	9300      	str	r3, [sp, #0]
 80142b0:	f107 0318 	add.w	r3, r7, #24
 80142b4:	cb0c      	ldmia	r3, {r2, r3}
 80142b6:	6878      	ldr	r0, [r7, #4]
 80142b8:	f7ff ff36 	bl	8014128 <SetMaxTimeCredits>
 80142bc:	4603      	mov	r3, r0
 80142be:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 80142c0:	78fb      	ldrb	r3, [r7, #3]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d00a      	beq.n	80142dc <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	685b      	ldr	r3, [r3, #4]
 80142ca:	4618      	mov	r0, r3
 80142cc:	f006 fae6 	bl	801a89c <UTIL_TIMER_GetElapsedTime>
 80142d0:	4602      	mov	r2, r0
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	68db      	ldr	r3, [r3, #12]
 80142d6:	441a      	add	r2, r3
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	68da      	ldr	r2, [r3, #12]
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	691b      	ldr	r3, [r3, #16]
 80142e4:	429a      	cmp	r2, r3
 80142e6:	d903      	bls.n	80142f0 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	691a      	ldr	r2, [r3, #16]
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	6a3a      	ldr	r2, [r7, #32]
 80142f4:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 80142f6:	89fb      	ldrh	r3, [r7, #14]
}
 80142f8:	4618      	mov	r0, r3
 80142fa:	3710      	adds	r7, #16
 80142fc:	46bd      	mov	sp, r7
 80142fe:	bd80      	pop	{r7, pc}

08014300 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8014300:	b480      	push	{r7}
 8014302:	b085      	sub	sp, #20
 8014304:	af00      	add	r7, sp, #0
 8014306:	4603      	mov	r3, r0
 8014308:	460a      	mov	r2, r1
 801430a:	80fb      	strh	r3, [r7, #6]
 801430c:	4613      	mov	r3, r2
 801430e:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8014310:	2300      	movs	r3, #0
 8014312:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8014314:	2300      	movs	r3, #0
 8014316:	73bb      	strb	r3, [r7, #14]
 8014318:	e011      	b.n	801433e <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801431a:	88fa      	ldrh	r2, [r7, #6]
 801431c:	7bbb      	ldrb	r3, [r7, #14]
 801431e:	2101      	movs	r1, #1
 8014320:	fa01 f303 	lsl.w	r3, r1, r3
 8014324:	401a      	ands	r2, r3
 8014326:	7bbb      	ldrb	r3, [r7, #14]
 8014328:	2101      	movs	r1, #1
 801432a:	fa01 f303 	lsl.w	r3, r1, r3
 801432e:	429a      	cmp	r2, r3
 8014330:	d102      	bne.n	8014338 <CountChannels+0x38>
        {
            nbActiveBits++;
 8014332:	7bfb      	ldrb	r3, [r7, #15]
 8014334:	3301      	adds	r3, #1
 8014336:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8014338:	7bbb      	ldrb	r3, [r7, #14]
 801433a:	3301      	adds	r3, #1
 801433c:	73bb      	strb	r3, [r7, #14]
 801433e:	7bba      	ldrb	r2, [r7, #14]
 8014340:	797b      	ldrb	r3, [r7, #5]
 8014342:	429a      	cmp	r2, r3
 8014344:	d3e9      	bcc.n	801431a <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8014346:	7bfb      	ldrb	r3, [r7, #15]
}
 8014348:	4618      	mov	r0, r3
 801434a:	3714      	adds	r7, #20
 801434c:	46bd      	mov	sp, r7
 801434e:	bc80      	pop	{r7}
 8014350:	4770      	bx	lr

08014352 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8014352:	b580      	push	{r7, lr}
 8014354:	b084      	sub	sp, #16
 8014356:	af00      	add	r7, sp, #0
 8014358:	6039      	str	r1, [r7, #0]
 801435a:	4611      	mov	r1, r2
 801435c:	461a      	mov	r2, r3
 801435e:	4603      	mov	r3, r0
 8014360:	71fb      	strb	r3, [r7, #7]
 8014362:	460b      	mov	r3, r1
 8014364:	71bb      	strb	r3, [r7, #6]
 8014366:	4613      	mov	r3, r2
 8014368:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801436a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 801436e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014372:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014376:	4618      	mov	r0, r3
 8014378:	f000 f85d 	bl	8014436 <RegionCommonValueInRange>
 801437c:	4603      	mov	r3, r0
 801437e:	2b00      	cmp	r3, #0
 8014380:	d101      	bne.n	8014386 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8014382:	2300      	movs	r3, #0
 8014384:	e053      	b.n	801442e <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014386:	2300      	movs	r3, #0
 8014388:	73fb      	strb	r3, [r7, #15]
 801438a:	2300      	movs	r3, #0
 801438c:	73bb      	strb	r3, [r7, #14]
 801438e:	e049      	b.n	8014424 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014390:	2300      	movs	r3, #0
 8014392:	737b      	strb	r3, [r7, #13]
 8014394:	e03d      	b.n	8014412 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8014396:	7bbb      	ldrb	r3, [r7, #14]
 8014398:	005b      	lsls	r3, r3, #1
 801439a:	683a      	ldr	r2, [r7, #0]
 801439c:	4413      	add	r3, r2
 801439e:	881b      	ldrh	r3, [r3, #0]
 80143a0:	461a      	mov	r2, r3
 80143a2:	7b7b      	ldrb	r3, [r7, #13]
 80143a4:	fa42 f303 	asr.w	r3, r2, r3
 80143a8:	f003 0301 	and.w	r3, r3, #1
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d02d      	beq.n	801440c <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80143b0:	7bfa      	ldrb	r2, [r7, #15]
 80143b2:	7b7b      	ldrb	r3, [r7, #13]
 80143b4:	4413      	add	r3, r2
 80143b6:	461a      	mov	r2, r3
 80143b8:	4613      	mov	r3, r2
 80143ba:	005b      	lsls	r3, r3, #1
 80143bc:	4413      	add	r3, r2
 80143be:	009b      	lsls	r3, r3, #2
 80143c0:	461a      	mov	r2, r3
 80143c2:	69fb      	ldr	r3, [r7, #28]
 80143c4:	4413      	add	r3, r2
 80143c6:	7a1b      	ldrb	r3, [r3, #8]
 80143c8:	f343 0303 	sbfx	r3, r3, #0, #4
 80143cc:	b25b      	sxtb	r3, r3
 80143ce:	f003 030f 	and.w	r3, r3, #15
 80143d2:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 80143d4:	7bfa      	ldrb	r2, [r7, #15]
 80143d6:	7b7b      	ldrb	r3, [r7, #13]
 80143d8:	4413      	add	r3, r2
 80143da:	461a      	mov	r2, r3
 80143dc:	4613      	mov	r3, r2
 80143de:	005b      	lsls	r3, r3, #1
 80143e0:	4413      	add	r3, r2
 80143e2:	009b      	lsls	r3, r3, #2
 80143e4:	461a      	mov	r2, r3
 80143e6:	69fb      	ldr	r3, [r7, #28]
 80143e8:	4413      	add	r3, r2
 80143ea:	7a1b      	ldrb	r3, [r3, #8]
 80143ec:	f343 1303 	sbfx	r3, r3, #4, #4
 80143f0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80143f2:	f003 030f 	and.w	r3, r3, #15
 80143f6:	b25a      	sxtb	r2, r3
 80143f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80143fc:	4618      	mov	r0, r3
 80143fe:	f000 f81a 	bl	8014436 <RegionCommonValueInRange>
 8014402:	4603      	mov	r3, r0
 8014404:	2b01      	cmp	r3, #1
 8014406:	d101      	bne.n	801440c <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8014408:	2301      	movs	r3, #1
 801440a:	e010      	b.n	801442e <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 801440c:	7b7b      	ldrb	r3, [r7, #13]
 801440e:	3301      	adds	r3, #1
 8014410:	737b      	strb	r3, [r7, #13]
 8014412:	7b7b      	ldrb	r3, [r7, #13]
 8014414:	2b0f      	cmp	r3, #15
 8014416:	d9be      	bls.n	8014396 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014418:	7bfb      	ldrb	r3, [r7, #15]
 801441a:	3310      	adds	r3, #16
 801441c:	73fb      	strb	r3, [r7, #15]
 801441e:	7bbb      	ldrb	r3, [r7, #14]
 8014420:	3301      	adds	r3, #1
 8014422:	73bb      	strb	r3, [r7, #14]
 8014424:	7bfa      	ldrb	r2, [r7, #15]
 8014426:	79fb      	ldrb	r3, [r7, #7]
 8014428:	429a      	cmp	r2, r3
 801442a:	d3b1      	bcc.n	8014390 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 801442c:	2300      	movs	r3, #0
}
 801442e:	4618      	mov	r0, r3
 8014430:	3710      	adds	r7, #16
 8014432:	46bd      	mov	sp, r7
 8014434:	bd80      	pop	{r7, pc}

08014436 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8014436:	b480      	push	{r7}
 8014438:	b083      	sub	sp, #12
 801443a:	af00      	add	r7, sp, #0
 801443c:	4603      	mov	r3, r0
 801443e:	71fb      	strb	r3, [r7, #7]
 8014440:	460b      	mov	r3, r1
 8014442:	71bb      	strb	r3, [r7, #6]
 8014444:	4613      	mov	r3, r2
 8014446:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8014448:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801444c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014450:	429a      	cmp	r2, r3
 8014452:	db07      	blt.n	8014464 <RegionCommonValueInRange+0x2e>
 8014454:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014458:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801445c:	429a      	cmp	r2, r3
 801445e:	dc01      	bgt.n	8014464 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8014460:	2301      	movs	r3, #1
 8014462:	e000      	b.n	8014466 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8014464:	2300      	movs	r3, #0
}
 8014466:	4618      	mov	r0, r3
 8014468:	370c      	adds	r7, #12
 801446a:	46bd      	mov	sp, r7
 801446c:	bc80      	pop	{r7}
 801446e:	4770      	bx	lr

08014470 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8014470:	b480      	push	{r7}
 8014472:	b085      	sub	sp, #20
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
 8014478:	460b      	mov	r3, r1
 801447a:	70fb      	strb	r3, [r7, #3]
 801447c:	4613      	mov	r3, r2
 801447e:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8014480:	78fb      	ldrb	r3, [r7, #3]
 8014482:	091b      	lsrs	r3, r3, #4
 8014484:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8014486:	78bb      	ldrb	r3, [r7, #2]
 8014488:	091b      	lsrs	r3, r3, #4
 801448a:	b2db      	uxtb	r3, r3
 801448c:	7bfa      	ldrb	r2, [r7, #15]
 801448e:	429a      	cmp	r2, r3
 8014490:	d803      	bhi.n	801449a <RegionCommonChanDisable+0x2a>
 8014492:	78fa      	ldrb	r2, [r7, #3]
 8014494:	78bb      	ldrb	r3, [r7, #2]
 8014496:	429a      	cmp	r2, r3
 8014498:	d301      	bcc.n	801449e <RegionCommonChanDisable+0x2e>
    {
        return false;
 801449a:	2300      	movs	r3, #0
 801449c:	e017      	b.n	80144ce <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801449e:	7bfb      	ldrb	r3, [r7, #15]
 80144a0:	005b      	lsls	r3, r3, #1
 80144a2:	687a      	ldr	r2, [r7, #4]
 80144a4:	4413      	add	r3, r2
 80144a6:	881b      	ldrh	r3, [r3, #0]
 80144a8:	b21a      	sxth	r2, r3
 80144aa:	78fb      	ldrb	r3, [r7, #3]
 80144ac:	f003 030f 	and.w	r3, r3, #15
 80144b0:	2101      	movs	r1, #1
 80144b2:	fa01 f303 	lsl.w	r3, r1, r3
 80144b6:	b21b      	sxth	r3, r3
 80144b8:	43db      	mvns	r3, r3
 80144ba:	b21b      	sxth	r3, r3
 80144bc:	4013      	ands	r3, r2
 80144be:	b219      	sxth	r1, r3
 80144c0:	7bfb      	ldrb	r3, [r7, #15]
 80144c2:	005b      	lsls	r3, r3, #1
 80144c4:	687a      	ldr	r2, [r7, #4]
 80144c6:	4413      	add	r3, r2
 80144c8:	b28a      	uxth	r2, r1
 80144ca:	801a      	strh	r2, [r3, #0]

    return true;
 80144cc:	2301      	movs	r3, #1
}
 80144ce:	4618      	mov	r0, r3
 80144d0:	3714      	adds	r7, #20
 80144d2:	46bd      	mov	sp, r7
 80144d4:	bc80      	pop	{r7}
 80144d6:	4770      	bx	lr

080144d8 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b084      	sub	sp, #16
 80144dc:	af00      	add	r7, sp, #0
 80144de:	6078      	str	r0, [r7, #4]
 80144e0:	460b      	mov	r3, r1
 80144e2:	70fb      	strb	r3, [r7, #3]
 80144e4:	4613      	mov	r3, r2
 80144e6:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 80144e8:	2300      	movs	r3, #0
 80144ea:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d101      	bne.n	80144f6 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 80144f2:	2300      	movs	r3, #0
 80144f4:	e018      	b.n	8014528 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80144f6:	78fb      	ldrb	r3, [r7, #3]
 80144f8:	73bb      	strb	r3, [r7, #14]
 80144fa:	e010      	b.n	801451e <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80144fc:	7bbb      	ldrb	r3, [r7, #14]
 80144fe:	005b      	lsls	r3, r3, #1
 8014500:	687a      	ldr	r2, [r7, #4]
 8014502:	4413      	add	r3, r2
 8014504:	881b      	ldrh	r3, [r3, #0]
 8014506:	2110      	movs	r1, #16
 8014508:	4618      	mov	r0, r3
 801450a:	f7ff fef9 	bl	8014300 <CountChannels>
 801450e:	4603      	mov	r3, r0
 8014510:	461a      	mov	r2, r3
 8014512:	7bfb      	ldrb	r3, [r7, #15]
 8014514:	4413      	add	r3, r2
 8014516:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014518:	7bbb      	ldrb	r3, [r7, #14]
 801451a:	3301      	adds	r3, #1
 801451c:	73bb      	strb	r3, [r7, #14]
 801451e:	7bba      	ldrb	r2, [r7, #14]
 8014520:	78bb      	ldrb	r3, [r7, #2]
 8014522:	429a      	cmp	r2, r3
 8014524:	d3ea      	bcc.n	80144fc <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8014526:	7bfb      	ldrb	r3, [r7, #15]
}
 8014528:	4618      	mov	r0, r3
 801452a:	3710      	adds	r7, #16
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}

08014530 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8014530:	b480      	push	{r7}
 8014532:	b087      	sub	sp, #28
 8014534:	af00      	add	r7, sp, #0
 8014536:	60f8      	str	r0, [r7, #12]
 8014538:	60b9      	str	r1, [r7, #8]
 801453a:	4613      	mov	r3, r2
 801453c:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d016      	beq.n	8014572 <RegionCommonChanMaskCopy+0x42>
 8014544:	68bb      	ldr	r3, [r7, #8]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d013      	beq.n	8014572 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 801454a:	2300      	movs	r3, #0
 801454c:	75fb      	strb	r3, [r7, #23]
 801454e:	e00c      	b.n	801456a <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8014550:	7dfb      	ldrb	r3, [r7, #23]
 8014552:	005b      	lsls	r3, r3, #1
 8014554:	68ba      	ldr	r2, [r7, #8]
 8014556:	441a      	add	r2, r3
 8014558:	7dfb      	ldrb	r3, [r7, #23]
 801455a:	005b      	lsls	r3, r3, #1
 801455c:	68f9      	ldr	r1, [r7, #12]
 801455e:	440b      	add	r3, r1
 8014560:	8812      	ldrh	r2, [r2, #0]
 8014562:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8014564:	7dfb      	ldrb	r3, [r7, #23]
 8014566:	3301      	adds	r3, #1
 8014568:	75fb      	strb	r3, [r7, #23]
 801456a:	7dfa      	ldrb	r2, [r7, #23]
 801456c:	79fb      	ldrb	r3, [r7, #7]
 801456e:	429a      	cmp	r2, r3
 8014570:	d3ee      	bcc.n	8014550 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8014572:	bf00      	nop
 8014574:	371c      	adds	r7, #28
 8014576:	46bd      	mov	sp, r7
 8014578:	bc80      	pop	{r7}
 801457a:	4770      	bx	lr

0801457c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801457c:	b082      	sub	sp, #8
 801457e:	b580      	push	{r7, lr}
 8014580:	b086      	sub	sp, #24
 8014582:	af00      	add	r7, sp, #0
 8014584:	60f8      	str	r0, [r7, #12]
 8014586:	60b9      	str	r1, [r7, #8]
 8014588:	627b      	str	r3, [r7, #36]	; 0x24
 801458a:	4613      	mov	r3, r2
 801458c:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801458e:	79f9      	ldrb	r1, [r7, #7]
 8014590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014594:	cb0c      	ldmia	r3, {r2, r3}
 8014596:	68f8      	ldr	r0, [r7, #12]
 8014598:	f7ff fd8c 	bl	80140b4 <GetDutyCycle>
 801459c:	4603      	mov	r3, r0
 801459e:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	68da      	ldr	r2, [r3, #12]
 80145a4:	8afb      	ldrh	r3, [r7, #22]
 80145a6:	68b9      	ldr	r1, [r7, #8]
 80145a8:	fb01 f303 	mul.w	r3, r1, r3
 80145ac:	429a      	cmp	r2, r3
 80145ae:	d909      	bls.n	80145c4 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	68da      	ldr	r2, [r3, #12]
 80145b4:	8afb      	ldrh	r3, [r7, #22]
 80145b6:	68b9      	ldr	r1, [r7, #8]
 80145b8:	fb01 f303 	mul.w	r3, r1, r3
 80145bc:	1ad2      	subs	r2, r2, r3
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 80145c2:	e002      	b.n	80145ca <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	2200      	movs	r2, #0
 80145c8:	60da      	str	r2, [r3, #12]
}
 80145ca:	bf00      	nop
 80145cc:	3718      	adds	r7, #24
 80145ce:	46bd      	mov	sp, r7
 80145d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80145d4:	b002      	add	sp, #8
 80145d6:	4770      	bx	lr

080145d8 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 80145d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145da:	b08f      	sub	sp, #60	; 0x3c
 80145dc:	af04      	add	r7, sp, #16
 80145de:	6039      	str	r1, [r7, #0]
 80145e0:	4611      	mov	r1, r2
 80145e2:	461a      	mov	r2, r3
 80145e4:	4603      	mov	r3, r0
 80145e6:	71fb      	strb	r3, [r7, #7]
 80145e8:	460b      	mov	r3, r1
 80145ea:	71bb      	strb	r3, [r7, #6]
 80145ec:	4613      	mov	r3, r2
 80145ee:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 80145f0:	f04f 33ff 	mov.w	r3, #4294967295
 80145f4:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 80145f6:	f006 f93f 	bl	801a878 <UTIL_TIMER_GetCurrentTime>
 80145fa:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 80145fc:	2300      	movs	r3, #0
 80145fe:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8014600:	2301      	movs	r3, #1
 8014602:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8014604:	2300      	movs	r3, #0
 8014606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 801460a:	2300      	movs	r3, #0
 801460c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014610:	e0ba      	b.n	8014788 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8014612:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014616:	4613      	mov	r3, r2
 8014618:	005b      	lsls	r3, r3, #1
 801461a:	4413      	add	r3, r2
 801461c:	00db      	lsls	r3, r3, #3
 801461e:	461a      	mov	r2, r3
 8014620:	683b      	ldr	r3, [r7, #0]
 8014622:	189c      	adds	r4, r3, r2
 8014624:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8014628:	797a      	ldrb	r2, [r7, #5]
 801462a:	79fd      	ldrb	r5, [r7, #7]
 801462c:	69fb      	ldr	r3, [r7, #28]
 801462e:	9302      	str	r3, [sp, #8]
 8014630:	46ec      	mov	ip, sp
 8014632:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014636:	e893 0003 	ldmia.w	r3, {r0, r1}
 801463a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801463e:	4633      	mov	r3, r6
 8014640:	4629      	mov	r1, r5
 8014642:	4620      	mov	r0, r4
 8014644:	f7ff fe22 	bl	801428c <UpdateTimeCredits>
 8014648:	4603      	mov	r3, r0
 801464a:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 801464c:	8afa      	ldrh	r2, [r7, #22]
 801464e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014650:	fb02 f303 	mul.w	r3, r2, r3
 8014654:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8014656:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801465a:	4613      	mov	r3, r2
 801465c:	005b      	lsls	r3, r3, #1
 801465e:	4413      	add	r3, r2
 8014660:	00db      	lsls	r3, r3, #3
 8014662:	461a      	mov	r2, r3
 8014664:	683b      	ldr	r3, [r7, #0]
 8014666:	4413      	add	r3, r2
 8014668:	68db      	ldr	r3, [r3, #12]
 801466a:	69ba      	ldr	r2, [r7, #24]
 801466c:	429a      	cmp	r2, r3
 801466e:	d308      	bcc.n	8014682 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8014670:	797b      	ldrb	r3, [r7, #5]
 8014672:	f083 0301 	eor.w	r3, r3, #1
 8014676:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8014678:	2b00      	cmp	r3, #0
 801467a:	d013      	beq.n	80146a4 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801467c:	79fb      	ldrb	r3, [r7, #7]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d010      	beq.n	80146a4 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8014682:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014686:	4613      	mov	r3, r2
 8014688:	005b      	lsls	r3, r3, #1
 801468a:	4413      	add	r3, r2
 801468c:	00db      	lsls	r3, r3, #3
 801468e:	461a      	mov	r2, r3
 8014690:	683b      	ldr	r3, [r7, #0]
 8014692:	4413      	add	r3, r2
 8014694:	2201      	movs	r2, #1
 8014696:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8014698:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801469c:	3301      	adds	r3, #1
 801469e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80146a2:	e06c      	b.n	801477e <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80146a4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80146a8:	4613      	mov	r3, r2
 80146aa:	005b      	lsls	r3, r3, #1
 80146ac:	4413      	add	r3, r2
 80146ae:	00db      	lsls	r3, r3, #3
 80146b0:	461a      	mov	r2, r3
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	4413      	add	r3, r2
 80146b6:	2200      	movs	r2, #0
 80146b8:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 80146ba:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80146be:	4613      	mov	r3, r2
 80146c0:	005b      	lsls	r3, r3, #1
 80146c2:	4413      	add	r3, r2
 80146c4:	00db      	lsls	r3, r3, #3
 80146c6:	461a      	mov	r2, r3
 80146c8:	683b      	ldr	r3, [r7, #0]
 80146ca:	4413      	add	r3, r2
 80146cc:	691b      	ldr	r3, [r3, #16]
 80146ce:	69ba      	ldr	r2, [r7, #24]
 80146d0:	429a      	cmp	r2, r3
 80146d2:	d215      	bcs.n	8014700 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 80146d4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80146d8:	4613      	mov	r3, r2
 80146da:	005b      	lsls	r3, r3, #1
 80146dc:	4413      	add	r3, r2
 80146de:	00db      	lsls	r3, r3, #3
 80146e0:	461a      	mov	r2, r3
 80146e2:	683b      	ldr	r3, [r7, #0]
 80146e4:	4413      	add	r3, r2
 80146e6:	68db      	ldr	r3, [r3, #12]
 80146e8:	69ba      	ldr	r2, [r7, #24]
 80146ea:	1ad3      	subs	r3, r2, r3
 80146ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146ee:	4293      	cmp	r3, r2
 80146f0:	bf28      	it	cs
 80146f2:	4613      	movcs	r3, r2
 80146f4:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 80146f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80146fa:	3301      	adds	r3, #1
 80146fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8014700:	79fb      	ldrb	r3, [r7, #7]
 8014702:	f083 0301 	eor.w	r3, r3, #1
 8014706:	b2db      	uxtb	r3, r3
 8014708:	2b00      	cmp	r3, #0
 801470a:	d038      	beq.n	801477e <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 801470c:	2300      	movs	r3, #0
 801470e:	60fb      	str	r3, [r7, #12]
 8014710:	2300      	movs	r3, #0
 8014712:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8014714:	8afb      	ldrh	r3, [r7, #22]
 8014716:	2b64      	cmp	r3, #100	; 0x64
 8014718:	d103      	bne.n	8014722 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 801471a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801471e:	60fb      	str	r3, [r7, #12]
 8014720:	e009      	b.n	8014736 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8014722:	8afb      	ldrh	r3, [r7, #22]
 8014724:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014728:	d103      	bne.n	8014732 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 801472a:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 801472e:	60fb      	str	r3, [r7, #12]
 8014730:	e001      	b.n	8014736 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014732:	4b1e      	ldr	r3, [pc, #120]	; (80147ac <RegionCommonUpdateBandTimeOff+0x1d4>)
 8014734:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014738:	4a1c      	ldr	r2, [pc, #112]	; (80147ac <RegionCommonUpdateBandTimeOff+0x1d4>)
 801473a:	4293      	cmp	r3, r2
 801473c:	d90e      	bls.n	801475c <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801473e:	68fa      	ldr	r2, [r7, #12]
 8014740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014742:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8014746:	3b30      	subs	r3, #48	; 0x30
 8014748:	4919      	ldr	r1, [pc, #100]	; (80147b0 <RegionCommonUpdateBandTimeOff+0x1d8>)
 801474a:	fba1 1303 	umull	r1, r3, r1, r3
 801474e:	0c1b      	lsrs	r3, r3, #16
 8014750:	3301      	adds	r3, #1
 8014752:	4918      	ldr	r1, [pc, #96]	; (80147b4 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8014754:	fb01 f303 	mul.w	r3, r1, r3
 8014758:	4413      	add	r3, r2
 801475a:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 801475c:	f107 000c 	add.w	r0, r7, #12
 8014760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014762:	9300      	str	r3, [sp, #0]
 8014764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014766:	f107 020c 	add.w	r2, r7, #12
 801476a:	ca06      	ldmia	r2, {r1, r2}
 801476c:	f005 f997 	bl	8019a9e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8014770:	f107 030c 	add.w	r3, r7, #12
 8014774:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014778:	f005 fa50 	bl	8019c1c <SysTimeToMs>
 801477c:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801477e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014782:	3301      	adds	r3, #1
 8014784:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014788:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801478c:	79bb      	ldrb	r3, [r7, #6]
 801478e:	429a      	cmp	r2, r3
 8014790:	f4ff af3f 	bcc.w	8014612 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8014794:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014798:	2b00      	cmp	r3, #0
 801479a:	d102      	bne.n	80147a2 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 801479c:	f04f 33ff 	mov.w	r3, #4294967295
 80147a0:	e000      	b.n	80147a4 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80147a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80147a4:	4618      	mov	r0, r3
 80147a6:	372c      	adds	r7, #44	; 0x2c
 80147a8:	46bd      	mov	sp, r7
 80147aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147ac:	0001ec30 	.word	0x0001ec30
 80147b0:	c22e4507 	.word	0xc22e4507
 80147b4:	00015180 	.word	0x00015180

080147b8 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80147b8:	b480      	push	{r7}
 80147ba:	b085      	sub	sp, #20
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
 80147c0:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80147c2:	2300      	movs	r3, #0
 80147c4:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	781b      	ldrb	r3, [r3, #0]
 80147ca:	2b03      	cmp	r3, #3
 80147cc:	d13f      	bne.n	801484e <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	3301      	adds	r3, #1
 80147d2:	781b      	ldrb	r3, [r3, #0]
 80147d4:	b25a      	sxtb	r2, r3
 80147d6:	683b      	ldr	r3, [r7, #0]
 80147d8:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80147da:	683b      	ldr	r3, [r7, #0]
 80147dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80147e0:	f003 030f 	and.w	r3, r3, #15
 80147e4:	b25a      	sxtb	r2, r3
 80147e6:	683b      	ldr	r3, [r7, #0]
 80147e8:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80147f0:	b2db      	uxtb	r3, r3
 80147f2:	091b      	lsrs	r3, r3, #4
 80147f4:	b2db      	uxtb	r3, r3
 80147f6:	b25a      	sxtb	r2, r3
 80147f8:	683b      	ldr	r3, [r7, #0]
 80147fa:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	3302      	adds	r3, #2
 8014800:	781b      	ldrb	r3, [r3, #0]
 8014802:	b29a      	uxth	r2, r3
 8014804:	683b      	ldr	r3, [r7, #0]
 8014806:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8014808:	683b      	ldr	r3, [r7, #0]
 801480a:	889b      	ldrh	r3, [r3, #4]
 801480c:	b21a      	sxth	r2, r3
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	3303      	adds	r3, #3
 8014812:	781b      	ldrb	r3, [r3, #0]
 8014814:	021b      	lsls	r3, r3, #8
 8014816:	b21b      	sxth	r3, r3
 8014818:	4313      	orrs	r3, r2
 801481a:	b21b      	sxth	r3, r3
 801481c:	b29a      	uxth	r2, r3
 801481e:	683b      	ldr	r3, [r7, #0]
 8014820:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	791a      	ldrb	r2, [r3, #4]
 8014826:	683b      	ldr	r3, [r7, #0]
 8014828:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801482a:	683b      	ldr	r3, [r7, #0]
 801482c:	781b      	ldrb	r3, [r3, #0]
 801482e:	091b      	lsrs	r3, r3, #4
 8014830:	b2db      	uxtb	r3, r3
 8014832:	f003 0307 	and.w	r3, r3, #7
 8014836:	b2da      	uxtb	r2, r3
 8014838:	683b      	ldr	r3, [r7, #0]
 801483a:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 801483c:	683b      	ldr	r3, [r7, #0]
 801483e:	781b      	ldrb	r3, [r3, #0]
 8014840:	f003 030f 	and.w	r3, r3, #15
 8014844:	b2da      	uxtb	r2, r3
 8014846:	683b      	ldr	r3, [r7, #0]
 8014848:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801484a:	2305      	movs	r3, #5
 801484c:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 801484e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014850:	4618      	mov	r0, r3
 8014852:	3714      	adds	r7, #20
 8014854:	46bd      	mov	sp, r7
 8014856:	bc80      	pop	{r7}
 8014858:	4770      	bx	lr

0801485a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801485a:	b5b0      	push	{r4, r5, r7, lr}
 801485c:	b088      	sub	sp, #32
 801485e:	af02      	add	r7, sp, #8
 8014860:	60f8      	str	r0, [r7, #12]
 8014862:	60b9      	str	r1, [r7, #8]
 8014864:	607a      	str	r2, [r7, #4]
 8014866:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	791b      	ldrb	r3, [r3, #4]
 801486c:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	799b      	ldrb	r3, [r3, #6]
 8014872:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	79db      	ldrb	r3, [r3, #7]
 8014878:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	7a1b      	ldrb	r3, [r3, #8]
 801487e:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	795b      	ldrb	r3, [r3, #5]
 8014884:	f083 0301 	eor.w	r3, r3, #1
 8014888:	b2db      	uxtb	r3, r3
 801488a:	2b00      	cmp	r3, #0
 801488c:	d008      	beq.n	80148a0 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	7adb      	ldrb	r3, [r3, #11]
 8014892:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	7a5b      	ldrb	r3, [r3, #9]
 8014898:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	7a9b      	ldrb	r3, [r3, #10]
 801489e:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80148a0:	7dfb      	ldrb	r3, [r7, #23]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d04a      	beq.n	801493c <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 80148a6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80148aa:	2b0f      	cmp	r3, #15
 80148ac:	d103      	bne.n	80148b6 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	7a5b      	ldrb	r3, [r3, #9]
 80148b2:	75bb      	strb	r3, [r7, #22]
 80148b4:	e01d      	b.n	80148f2 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	7b18      	ldrb	r0, [r3, #12]
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	6919      	ldr	r1, [r3, #16]
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	f993 5014 	ldrsb.w	r5, [r3, #20]
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80148ca:	68fa      	ldr	r2, [r7, #12]
 80148cc:	6992      	ldr	r2, [r2, #24]
 80148ce:	f997 4016 	ldrsb.w	r4, [r7, #22]
 80148d2:	9201      	str	r2, [sp, #4]
 80148d4:	9300      	str	r3, [sp, #0]
 80148d6:	462b      	mov	r3, r5
 80148d8:	4622      	mov	r2, r4
 80148da:	f7ff fd3a 	bl	8014352 <RegionCommonChanVerifyDr>
 80148de:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80148e0:	f083 0301 	eor.w	r3, r3, #1
 80148e4:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d003      	beq.n	80148f2 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 80148ea:	7dfb      	ldrb	r3, [r7, #23]
 80148ec:	f023 0302 	bic.w	r3, r3, #2
 80148f0:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 80148f2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80148f6:	2b0f      	cmp	r3, #15
 80148f8:	d103      	bne.n	8014902 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	7a9b      	ldrb	r3, [r3, #10]
 80148fe:	757b      	strb	r3, [r7, #21]
 8014900:	e01c      	b.n	801493c <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801490e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8014912:	4618      	mov	r0, r3
 8014914:	f7ff fd8f 	bl	8014436 <RegionCommonValueInRange>
 8014918:	4603      	mov	r3, r0
 801491a:	2b00      	cmp	r3, #0
 801491c:	d10e      	bne.n	801493c <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8014924:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8014928:	429a      	cmp	r2, r3
 801492a:	da03      	bge.n	8014934 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	7f5b      	ldrb	r3, [r3, #29]
 8014930:	757b      	strb	r3, [r7, #21]
 8014932:	e003      	b.n	801493c <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8014934:	7dfb      	ldrb	r3, [r7, #23]
 8014936:	f023 0304 	bic.w	r3, r3, #4
 801493a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801493c:	7dfb      	ldrb	r3, [r7, #23]
 801493e:	2b07      	cmp	r3, #7
 8014940:	d105      	bne.n	801494e <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8014942:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8014946:	2b00      	cmp	r3, #0
 8014948:	d101      	bne.n	801494e <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 801494a:	2301      	movs	r3, #1
 801494c:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801494e:	68bb      	ldr	r3, [r7, #8]
 8014950:	7dba      	ldrb	r2, [r7, #22]
 8014952:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	7d7a      	ldrb	r2, [r7, #21]
 8014958:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801495a:	7d3a      	ldrb	r2, [r7, #20]
 801495c:	683b      	ldr	r3, [r7, #0]
 801495e:	701a      	strb	r2, [r3, #0]

    return status;
 8014960:	7dfb      	ldrb	r3, [r7, #23]
}
 8014962:	4618      	mov	r0, r3
 8014964:	3718      	adds	r7, #24
 8014966:	46bd      	mov	sp, r7
 8014968:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801496c <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 801496c:	b480      	push	{r7}
 801496e:	b083      	sub	sp, #12
 8014970:	af00      	add	r7, sp, #0
 8014972:	4603      	mov	r3, r0
 8014974:	6039      	str	r1, [r7, #0]
 8014976:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8014978:	79fb      	ldrb	r3, [r7, #7]
 801497a:	4a06      	ldr	r2, [pc, #24]	; (8014994 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 801497c:	fa02 f303 	lsl.w	r3, r2, r3
 8014980:	461a      	mov	r2, r3
 8014982:	683b      	ldr	r3, [r7, #0]
 8014984:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014988:	4618      	mov	r0, r3
 801498a:	370c      	adds	r7, #12
 801498c:	46bd      	mov	sp, r7
 801498e:	bc80      	pop	{r7}
 8014990:	4770      	bx	lr
 8014992:	bf00      	nop
 8014994:	000f4240 	.word	0x000f4240

08014998 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8014998:	b480      	push	{r7}
 801499a:	b083      	sub	sp, #12
 801499c:	af00      	add	r7, sp, #0
 801499e:	4603      	mov	r3, r0
 80149a0:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80149a2:	79fb      	ldrb	r3, [r7, #7]
 80149a4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80149a8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80149ac:	4618      	mov	r0, r3
 80149ae:	370c      	adds	r7, #12
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bc80      	pop	{r7}
 80149b4:	4770      	bx	lr
	...

080149b8 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80149b8:	b480      	push	{r7}
 80149ba:	b085      	sub	sp, #20
 80149bc:	af00      	add	r7, sp, #0
 80149be:	60f8      	str	r0, [r7, #12]
 80149c0:	607a      	str	r2, [r7, #4]
 80149c2:	603b      	str	r3, [r7, #0]
 80149c4:	460b      	mov	r3, r1
 80149c6:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80149c8:	7afa      	ldrb	r2, [r7, #11]
 80149ca:	7afb      	ldrb	r3, [r7, #11]
 80149cc:	3b04      	subs	r3, #4
 80149ce:	4619      	mov	r1, r3
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	fb03 f101 	mul.w	r1, r3, r1
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80149dc:	fb00 f303 	mul.w	r3, r0, r3
 80149e0:	440b      	add	r3, r1
 80149e2:	005b      	lsls	r3, r3, #1
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d013      	beq.n	8014a10 <RegionCommonComputeRxWindowParameters+0x58>
 80149e8:	7afb      	ldrb	r3, [r7, #11]
 80149ea:	3b04      	subs	r3, #4
 80149ec:	4619      	mov	r1, r3
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	fb03 f101 	mul.w	r1, r3, r1
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80149fa:	fb00 f303 	mul.w	r3, r0, r3
 80149fe:	440b      	add	r3, r1
 8014a00:	0059      	lsls	r1, r3, #1
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	440b      	add	r3, r1
 8014a06:	1e59      	subs	r1, r3, #1
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8014a0e:	e00f      	b.n	8014a30 <RegionCommonComputeRxWindowParameters+0x78>
 8014a10:	7afb      	ldrb	r3, [r7, #11]
 8014a12:	3b04      	subs	r3, #4
 8014a14:	4619      	mov	r1, r3
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	fb03 f101 	mul.w	r1, r3, r1
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014a22:	fb00 f303 	mul.w	r3, r0, r3
 8014a26:	440b      	add	r3, r1
 8014a28:	0059      	lsls	r1, r3, #1
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8014a30:	429a      	cmp	r2, r3
 8014a32:	bf38      	it	cc
 8014a34:	461a      	movcc	r2, r3
 8014a36:	69bb      	ldr	r3, [r7, #24]
 8014a38:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	009b      	lsls	r3, r3, #2
 8014a3e:	4619      	mov	r1, r3
 8014a40:	69bb      	ldr	r3, [r7, #24]
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	68fa      	ldr	r2, [r7, #12]
 8014a46:	fb02 f303 	mul.w	r3, r2, r3
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d007      	beq.n	8014a5e <RegionCommonComputeRxWindowParameters+0xa6>
 8014a4e:	69bb      	ldr	r3, [r7, #24]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	68fa      	ldr	r2, [r7, #12]
 8014a54:	fb02 f303 	mul.w	r3, r2, r3
 8014a58:	3301      	adds	r3, #1
 8014a5a:	085b      	lsrs	r3, r3, #1
 8014a5c:	e005      	b.n	8014a6a <RegionCommonComputeRxWindowParameters+0xb2>
 8014a5e:	69bb      	ldr	r3, [r7, #24]
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	68fa      	ldr	r2, [r7, #12]
 8014a64:	fb02 f303 	mul.w	r3, r2, r3
 8014a68:	085b      	lsrs	r3, r3, #1
 8014a6a:	1acb      	subs	r3, r1, r3
 8014a6c:	683a      	ldr	r2, [r7, #0]
 8014a6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014a72:	fb01 f202 	mul.w	r2, r1, r2
 8014a76:	1a9b      	subs	r3, r3, r2
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	dd27      	ble.n	8014acc <RegionCommonComputeRxWindowParameters+0x114>
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	009b      	lsls	r3, r3, #2
 8014a80:	4619      	mov	r1, r3
 8014a82:	69bb      	ldr	r3, [r7, #24]
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	68fa      	ldr	r2, [r7, #12]
 8014a88:	fb02 f303 	mul.w	r3, r2, r3
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d007      	beq.n	8014aa0 <RegionCommonComputeRxWindowParameters+0xe8>
 8014a90:	69bb      	ldr	r3, [r7, #24]
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	68fa      	ldr	r2, [r7, #12]
 8014a96:	fb02 f303 	mul.w	r3, r2, r3
 8014a9a:	3301      	adds	r3, #1
 8014a9c:	085b      	lsrs	r3, r3, #1
 8014a9e:	e005      	b.n	8014aac <RegionCommonComputeRxWindowParameters+0xf4>
 8014aa0:	69bb      	ldr	r3, [r7, #24]
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	68fa      	ldr	r2, [r7, #12]
 8014aa6:	fb02 f303 	mul.w	r3, r2, r3
 8014aaa:	085b      	lsrs	r3, r3, #1
 8014aac:	1acb      	subs	r3, r1, r3
 8014aae:	683a      	ldr	r2, [r7, #0]
 8014ab0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014ab4:	fb01 f202 	mul.w	r2, r1, r2
 8014ab8:	1a9b      	subs	r3, r3, r2
 8014aba:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8014abe:	4a19      	ldr	r2, [pc, #100]	; (8014b24 <RegionCommonComputeRxWindowParameters+0x16c>)
 8014ac0:	fb82 1203 	smull	r1, r2, r2, r3
 8014ac4:	1192      	asrs	r2, r2, #6
 8014ac6:	17db      	asrs	r3, r3, #31
 8014ac8:	1ad3      	subs	r3, r2, r3
 8014aca:	e024      	b.n	8014b16 <RegionCommonComputeRxWindowParameters+0x15e>
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	009b      	lsls	r3, r3, #2
 8014ad0:	4619      	mov	r1, r3
 8014ad2:	69bb      	ldr	r3, [r7, #24]
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	68fa      	ldr	r2, [r7, #12]
 8014ad8:	fb02 f303 	mul.w	r3, r2, r3
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d007      	beq.n	8014af0 <RegionCommonComputeRxWindowParameters+0x138>
 8014ae0:	69bb      	ldr	r3, [r7, #24]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	68fa      	ldr	r2, [r7, #12]
 8014ae6:	fb02 f303 	mul.w	r3, r2, r3
 8014aea:	3301      	adds	r3, #1
 8014aec:	085b      	lsrs	r3, r3, #1
 8014aee:	e005      	b.n	8014afc <RegionCommonComputeRxWindowParameters+0x144>
 8014af0:	69bb      	ldr	r3, [r7, #24]
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	68fa      	ldr	r2, [r7, #12]
 8014af6:	fb02 f303 	mul.w	r3, r2, r3
 8014afa:	085b      	lsrs	r3, r3, #1
 8014afc:	1acb      	subs	r3, r1, r3
 8014afe:	683a      	ldr	r2, [r7, #0]
 8014b00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014b04:	fb01 f202 	mul.w	r2, r1, r2
 8014b08:	1a9b      	subs	r3, r3, r2
 8014b0a:	4a06      	ldr	r2, [pc, #24]	; (8014b24 <RegionCommonComputeRxWindowParameters+0x16c>)
 8014b0c:	fb82 1203 	smull	r1, r2, r2, r3
 8014b10:	1192      	asrs	r2, r2, #6
 8014b12:	17db      	asrs	r3, r3, #31
 8014b14:	1ad3      	subs	r3, r2, r3
 8014b16:	69fa      	ldr	r2, [r7, #28]
 8014b18:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8014b1a:	bf00      	nop
 8014b1c:	3714      	adds	r7, #20
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	bc80      	pop	{r7}
 8014b22:	4770      	bx	lr
 8014b24:	10624dd3 	.word	0x10624dd3

08014b28 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b086      	sub	sp, #24
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	4603      	mov	r3, r0
 8014b30:	60b9      	str	r1, [r7, #8]
 8014b32:	607a      	str	r2, [r7, #4]
 8014b34:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8014b36:	2300      	movs	r3, #0
 8014b38:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8014b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014b3e:	005b      	lsls	r3, r3, #1
 8014b40:	4618      	mov	r0, r3
 8014b42:	f7eb fe43 	bl	80007cc <__aeabi_ui2f>
 8014b46:	4603      	mov	r3, r0
 8014b48:	4619      	mov	r1, r3
 8014b4a:	68b8      	ldr	r0, [r7, #8]
 8014b4c:	f7eb fd8c 	bl	8000668 <__aeabi_fsub>
 8014b50:	4603      	mov	r3, r0
 8014b52:	6879      	ldr	r1, [r7, #4]
 8014b54:	4618      	mov	r0, r3
 8014b56:	f7eb fd87 	bl	8000668 <__aeabi_fsub>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	f7eb fc77 	bl	8000450 <__aeabi_f2d>
 8014b62:	4602      	mov	r2, r0
 8014b64:	460b      	mov	r3, r1
 8014b66:	4610      	mov	r0, r2
 8014b68:	4619      	mov	r1, r3
 8014b6a:	f006 fa19 	bl	801afa0 <floor>
 8014b6e:	4602      	mov	r2, r0
 8014b70:	460b      	mov	r3, r1
 8014b72:	4610      	mov	r0, r2
 8014b74:	4619      	mov	r1, r3
 8014b76:	f7eb fd4b 	bl	8000610 <__aeabi_d2iz>
 8014b7a:	4603      	mov	r3, r0
 8014b7c:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8014b7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	3718      	adds	r7, #24
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}

08014b8a <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8014b8a:	b590      	push	{r4, r7, lr}
 8014b8c:	b087      	sub	sp, #28
 8014b8e:	af00      	add	r7, sp, #0
 8014b90:	60f8      	str	r0, [r7, #12]
 8014b92:	60b9      	str	r1, [r7, #8]
 8014b94:	607a      	str	r2, [r7, #4]
 8014b96:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8014b98:	2300      	movs	r3, #0
 8014b9a:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014ba0:	2300      	movs	r3, #0
 8014ba2:	757b      	strb	r3, [r7, #21]
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	753b      	strb	r3, [r7, #20]
 8014ba8:	e09c      	b.n	8014ce4 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014baa:	2300      	movs	r3, #0
 8014bac:	74fb      	strb	r3, [r7, #19]
 8014bae:	e08f      	b.n	8014cd0 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	685a      	ldr	r2, [r3, #4]
 8014bb4:	7d3b      	ldrb	r3, [r7, #20]
 8014bb6:	005b      	lsls	r3, r3, #1
 8014bb8:	4413      	add	r3, r2
 8014bba:	881b      	ldrh	r3, [r3, #0]
 8014bbc:	461a      	mov	r2, r3
 8014bbe:	7cfb      	ldrb	r3, [r7, #19]
 8014bc0:	fa42 f303 	asr.w	r3, r2, r3
 8014bc4:	f003 0301 	and.w	r3, r3, #1
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d07e      	beq.n	8014cca <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	689a      	ldr	r2, [r3, #8]
 8014bd0:	7d79      	ldrb	r1, [r7, #21]
 8014bd2:	7cfb      	ldrb	r3, [r7, #19]
 8014bd4:	440b      	add	r3, r1
 8014bd6:	4619      	mov	r1, r3
 8014bd8:	460b      	mov	r3, r1
 8014bda:	005b      	lsls	r3, r3, #1
 8014bdc:	440b      	add	r3, r1
 8014bde:	009b      	lsls	r3, r3, #2
 8014be0:	4413      	add	r3, r2
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d06b      	beq.n	8014cc0 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	781b      	ldrb	r3, [r3, #0]
 8014bec:	f083 0301 	eor.w	r3, r3, #1
 8014bf0:	b2db      	uxtb	r3, r3
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d011      	beq.n	8014c1a <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d00d      	beq.n	8014c1a <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	695a      	ldr	r2, [r3, #20]
 8014c02:	7d3b      	ldrb	r3, [r7, #20]
 8014c04:	005b      	lsls	r3, r3, #1
 8014c06:	4413      	add	r3, r2
 8014c08:	881b      	ldrh	r3, [r3, #0]
 8014c0a:	461a      	mov	r2, r3
 8014c0c:	7cfb      	ldrb	r3, [r7, #19]
 8014c0e:	fa42 f303 	asr.w	r3, r2, r3
 8014c12:	f003 0301 	and.w	r3, r3, #1
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d054      	beq.n	8014cc4 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	785b      	ldrb	r3, [r3, #1]
 8014c1e:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	689a      	ldr	r2, [r3, #8]
 8014c24:	7d79      	ldrb	r1, [r7, #21]
 8014c26:	7cfb      	ldrb	r3, [r7, #19]
 8014c28:	440b      	add	r3, r1
 8014c2a:	4619      	mov	r1, r3
 8014c2c:	460b      	mov	r3, r1
 8014c2e:	005b      	lsls	r3, r3, #1
 8014c30:	440b      	add	r3, r1
 8014c32:	009b      	lsls	r3, r3, #2
 8014c34:	4413      	add	r3, r2
 8014c36:	7a1b      	ldrb	r3, [r3, #8]
 8014c38:	f343 0303 	sbfx	r3, r3, #0, #4
 8014c3c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014c3e:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	689a      	ldr	r2, [r3, #8]
 8014c44:	7d79      	ldrb	r1, [r7, #21]
 8014c46:	7cfb      	ldrb	r3, [r7, #19]
 8014c48:	440b      	add	r3, r1
 8014c4a:	4619      	mov	r1, r3
 8014c4c:	460b      	mov	r3, r1
 8014c4e:	005b      	lsls	r3, r3, #1
 8014c50:	440b      	add	r3, r1
 8014c52:	009b      	lsls	r3, r3, #2
 8014c54:	4413      	add	r3, r2
 8014c56:	7a1b      	ldrb	r3, [r3, #8]
 8014c58:	f343 1303 	sbfx	r3, r3, #4, #4
 8014c5c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014c5e:	461a      	mov	r2, r3
 8014c60:	4621      	mov	r1, r4
 8014c62:	f7ff fbe8 	bl	8014436 <RegionCommonValueInRange>
 8014c66:	4603      	mov	r3, r0
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d02d      	beq.n	8014cc8 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	68da      	ldr	r2, [r3, #12]
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	6899      	ldr	r1, [r3, #8]
 8014c74:	7d78      	ldrb	r0, [r7, #21]
 8014c76:	7cfb      	ldrb	r3, [r7, #19]
 8014c78:	4403      	add	r3, r0
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	005b      	lsls	r3, r3, #1
 8014c80:	4403      	add	r3, r0
 8014c82:	009b      	lsls	r3, r3, #2
 8014c84:	440b      	add	r3, r1
 8014c86:	7a5b      	ldrb	r3, [r3, #9]
 8014c88:	4619      	mov	r1, r3
 8014c8a:	460b      	mov	r3, r1
 8014c8c:	005b      	lsls	r3, r3, #1
 8014c8e:	440b      	add	r3, r1
 8014c90:	00db      	lsls	r3, r3, #3
 8014c92:	4413      	add	r3, r2
 8014c94:	7d1b      	ldrb	r3, [r3, #20]
 8014c96:	f083 0301 	eor.w	r3, r3, #1
 8014c9a:	b2db      	uxtb	r3, r3
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d003      	beq.n	8014ca8 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8014ca0:	7dbb      	ldrb	r3, [r7, #22]
 8014ca2:	3301      	adds	r3, #1
 8014ca4:	75bb      	strb	r3, [r7, #22]
                    continue;
 8014ca6:	e010      	b.n	8014cca <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8014ca8:	7dfb      	ldrb	r3, [r7, #23]
 8014caa:	1c5a      	adds	r2, r3, #1
 8014cac:	75fa      	strb	r2, [r7, #23]
 8014cae:	461a      	mov	r2, r3
 8014cb0:	68bb      	ldr	r3, [r7, #8]
 8014cb2:	4413      	add	r3, r2
 8014cb4:	7d79      	ldrb	r1, [r7, #21]
 8014cb6:	7cfa      	ldrb	r2, [r7, #19]
 8014cb8:	440a      	add	r2, r1
 8014cba:	b2d2      	uxtb	r2, r2
 8014cbc:	701a      	strb	r2, [r3, #0]
 8014cbe:	e004      	b.n	8014cca <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014cc0:	bf00      	nop
 8014cc2:	e002      	b.n	8014cca <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8014cc4:	bf00      	nop
 8014cc6:	e000      	b.n	8014cca <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014cc8:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8014cca:	7cfb      	ldrb	r3, [r7, #19]
 8014ccc:	3301      	adds	r3, #1
 8014cce:	74fb      	strb	r3, [r7, #19]
 8014cd0:	7cfb      	ldrb	r3, [r7, #19]
 8014cd2:	2b0f      	cmp	r3, #15
 8014cd4:	f67f af6c 	bls.w	8014bb0 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014cd8:	7d7b      	ldrb	r3, [r7, #21]
 8014cda:	3310      	adds	r3, #16
 8014cdc:	757b      	strb	r3, [r7, #21]
 8014cde:	7d3b      	ldrb	r3, [r7, #20]
 8014ce0:	3301      	adds	r3, #1
 8014ce2:	753b      	strb	r3, [r7, #20]
 8014ce4:	7d7b      	ldrb	r3, [r7, #21]
 8014ce6:	b29a      	uxth	r2, r3
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	8a1b      	ldrh	r3, [r3, #16]
 8014cec:	429a      	cmp	r2, r3
 8014cee:	f4ff af5c 	bcc.w	8014baa <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	7dfa      	ldrb	r2, [r7, #23]
 8014cf6:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8014cf8:	683b      	ldr	r3, [r7, #0]
 8014cfa:	7dba      	ldrb	r2, [r7, #22]
 8014cfc:	701a      	strb	r2, [r3, #0]
}
 8014cfe:	bf00      	nop
 8014d00:	371c      	adds	r7, #28
 8014d02:	46bd      	mov	sp, r7
 8014d04:	bd90      	pop	{r4, r7, pc}

08014d06 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8014d06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d08:	b08b      	sub	sp, #44	; 0x2c
 8014d0a:	af04      	add	r7, sp, #16
 8014d0c:	60f8      	str	r0, [r7, #12]
 8014d0e:	60b9      	str	r1, [r7, #8]
 8014d10:	607a      	str	r2, [r7, #4]
 8014d12:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	685b      	ldr	r3, [r3, #4]
 8014d18:	4618      	mov	r0, r3
 8014d1a:	f005 fdbf 	bl	801a89c <UTIL_TIMER_GetElapsedTime>
 8014d1e:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	681a      	ldr	r2, [r3, #0]
 8014d24:	697b      	ldr	r3, [r7, #20]
 8014d26:	1ad2      	subs	r2, r2, r3
 8014d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d2a:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8014d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d2e:	2201      	movs	r2, #1
 8014d30:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8014d32:	683b      	ldr	r3, [r7, #0]
 8014d34:	2200      	movs	r2, #0
 8014d36:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	685b      	ldr	r3, [r3, #4]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d004      	beq.n	8014d4a <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014d44:	697a      	ldr	r2, [r7, #20]
 8014d46:	429a      	cmp	r2, r3
 8014d48:	d32b      	bcc.n	8014da2 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8014d4a:	68bb      	ldr	r3, [r7, #8]
 8014d4c:	2200      	movs	r2, #0
 8014d4e:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	69db      	ldr	r3, [r3, #28]
 8014d54:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014d5a:	68dd      	ldr	r5, [r3, #12]
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	7a5e      	ldrb	r6, [r3, #9]
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	f893 c008 	ldrb.w	ip, [r3, #8]
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	7d1b      	ldrb	r3, [r3, #20]
 8014d6a:	68fa      	ldr	r2, [r7, #12]
 8014d6c:	6992      	ldr	r2, [r2, #24]
 8014d6e:	9203      	str	r2, [sp, #12]
 8014d70:	68fa      	ldr	r2, [r7, #12]
 8014d72:	f10d 0e04 	add.w	lr, sp, #4
 8014d76:	320c      	adds	r2, #12
 8014d78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014d7c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8014d80:	9300      	str	r3, [sp, #0]
 8014d82:	4663      	mov	r3, ip
 8014d84:	4632      	mov	r2, r6
 8014d86:	4629      	mov	r1, r5
 8014d88:	4620      	mov	r0, r4
 8014d8a:	f7ff fc25 	bl	80145d8 <RegionCommonUpdateBandTimeOff>
 8014d8e:	4602      	mov	r2, r0
 8014d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d92:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	69d8      	ldr	r0, [r3, #28]
 8014d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d9a:	683a      	ldr	r2, [r7, #0]
 8014d9c:	6879      	ldr	r1, [r7, #4]
 8014d9e:	f7ff fef4 	bl	8014b8a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8014da2:	683b      	ldr	r3, [r7, #0]
 8014da4:	781b      	ldrb	r3, [r3, #0]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d004      	beq.n	8014db4 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8014daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dac:	2200      	movs	r2, #0
 8014dae:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8014db0:	2300      	movs	r3, #0
 8014db2:	e006      	b.n	8014dc2 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8014db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014db6:	781b      	ldrb	r3, [r3, #0]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d001      	beq.n	8014dc0 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8014dbc:	230b      	movs	r3, #11
 8014dbe:	e000      	b.n	8014dc2 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8014dc0:	230c      	movs	r3, #12
    }
}
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	371c      	adds	r7, #28
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014dca <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8014dca:	b5b0      	push	{r4, r5, r7, lr}
 8014dcc:	b086      	sub	sp, #24
 8014dce:	af02      	add	r7, sp, #8
 8014dd0:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	781b      	ldrb	r3, [r3, #0]
 8014dd6:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	f993 2000 	ldrsb.w	r2, [r3]
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014de4:	429a      	cmp	r2, r3
 8014de6:	d103      	bne.n	8014df0 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014dee:	e026      	b.n	8014e3e <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8014df0:	7bfb      	ldrb	r3, [r7, #15]
 8014df2:	3b01      	subs	r3, #1
 8014df4:	b2db      	uxtb	r3, r3
 8014df6:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8014dfe:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014e02:	429a      	cmp	r2, r3
 8014e04:	d019      	beq.n	8014e3a <RegionCommonGetNextLowerTxDr+0x70>
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	78d8      	ldrb	r0, [r3, #3]
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	6859      	ldr	r1, [r3, #4]
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014e1a:	687a      	ldr	r2, [r7, #4]
 8014e1c:	6892      	ldr	r2, [r2, #8]
 8014e1e:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8014e22:	9201      	str	r2, [sp, #4]
 8014e24:	9300      	str	r3, [sp, #0]
 8014e26:	462b      	mov	r3, r5
 8014e28:	4622      	mov	r2, r4
 8014e2a:	f7ff fa92 	bl	8014352 <RegionCommonChanVerifyDr>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	f083 0301 	eor.w	r3, r3, #1
 8014e34:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d1da      	bne.n	8014df0 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8014e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8014e3e:	4618      	mov	r0, r3
 8014e40:	3710      	adds	r7, #16
 8014e42:	46bd      	mov	sp, r7
 8014e44:	bdb0      	pop	{r4, r5, r7, pc}

08014e46 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8014e46:	b480      	push	{r7}
 8014e48:	b083      	sub	sp, #12
 8014e4a:	af00      	add	r7, sp, #0
 8014e4c:	4603      	mov	r3, r0
 8014e4e:	460a      	mov	r2, r1
 8014e50:	71fb      	strb	r3, [r7, #7]
 8014e52:	4613      	mov	r3, r2
 8014e54:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8014e56:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014e5e:	4293      	cmp	r3, r2
 8014e60:	bfb8      	it	lt
 8014e62:	4613      	movlt	r3, r2
 8014e64:	b25b      	sxtb	r3, r3
}
 8014e66:	4618      	mov	r0, r3
 8014e68:	370c      	adds	r7, #12
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	bc80      	pop	{r7}
 8014e6e:	4770      	bx	lr

08014e70 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8014e70:	b480      	push	{r7}
 8014e72:	b083      	sub	sp, #12
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	6078      	str	r0, [r7, #4]
 8014e78:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	009b      	lsls	r3, r3, #2
 8014e7e:	683a      	ldr	r2, [r7, #0]
 8014e80:	4413      	add	r3, r2
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	4a07      	ldr	r2, [pc, #28]	; (8014ea4 <RegionCommonGetBandwidth+0x34>)
 8014e86:	4293      	cmp	r3, r2
 8014e88:	d004      	beq.n	8014e94 <RegionCommonGetBandwidth+0x24>
 8014e8a:	4a07      	ldr	r2, [pc, #28]	; (8014ea8 <RegionCommonGetBandwidth+0x38>)
 8014e8c:	4293      	cmp	r3, r2
 8014e8e:	d003      	beq.n	8014e98 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8014e90:	2300      	movs	r3, #0
 8014e92:	e002      	b.n	8014e9a <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8014e94:	2301      	movs	r3, #1
 8014e96:	e000      	b.n	8014e9a <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8014e98:	2302      	movs	r3, #2
    }
}
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	370c      	adds	r7, #12
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	bc80      	pop	{r7}
 8014ea2:	4770      	bx	lr
 8014ea4:	0003d090 	.word	0x0003d090
 8014ea8:	0007a120 	.word	0x0007a120

08014eac <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b086      	sub	sp, #24
 8014eb0:	af04      	add	r7, sp, #16
 8014eb2:	4603      	mov	r3, r0
 8014eb4:	6039      	str	r1, [r7, #0]
 8014eb6:	71fb      	strb	r3, [r7, #7]
 8014eb8:	4613      	mov	r3, r2
 8014eba:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8014ebc:	79fb      	ldrb	r3, [r7, #7]
 8014ebe:	2b05      	cmp	r3, #5
 8014ec0:	d810      	bhi.n	8014ee4 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8014ec2:	79fb      	ldrb	r3, [r7, #7]
 8014ec4:	4a0f      	ldr	r2, [pc, #60]	; (8014f04 <RegionCommonRxConfigPrint+0x58>)
 8014ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014eca:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014ece:	9202      	str	r2, [sp, #8]
 8014ed0:	683a      	ldr	r2, [r7, #0]
 8014ed2:	9201      	str	r2, [sp, #4]
 8014ed4:	9300      	str	r3, [sp, #0]
 8014ed6:	4b0c      	ldr	r3, [pc, #48]	; (8014f08 <RegionCommonRxConfigPrint+0x5c>)
 8014ed8:	2201      	movs	r2, #1
 8014eda:	2100      	movs	r1, #0
 8014edc:	2002      	movs	r0, #2
 8014ede:	f005 fdbb 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8014ee2:	e00a      	b.n	8014efa <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8014ee4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014ee8:	9301      	str	r3, [sp, #4]
 8014eea:	683b      	ldr	r3, [r7, #0]
 8014eec:	9300      	str	r3, [sp, #0]
 8014eee:	4b07      	ldr	r3, [pc, #28]	; (8014f0c <RegionCommonRxConfigPrint+0x60>)
 8014ef0:	2201      	movs	r2, #1
 8014ef2:	2100      	movs	r1, #0
 8014ef4:	2002      	movs	r0, #2
 8014ef6:	f005 fdaf 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
}
 8014efa:	bf00      	nop
 8014efc:	3708      	adds	r7, #8
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}
 8014f02:	bf00      	nop
 8014f04:	2000011c 	.word	0x2000011c
 8014f08:	0801b41c 	.word	0x0801b41c
 8014f0c:	0801b43c 	.word	0x0801b43c

08014f10 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b084      	sub	sp, #16
 8014f14:	af02      	add	r7, sp, #8
 8014f16:	6078      	str	r0, [r7, #4]
 8014f18:	460b      	mov	r3, r1
 8014f1a:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8014f1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014f20:	9301      	str	r3, [sp, #4]
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	9300      	str	r3, [sp, #0]
 8014f26:	4b05      	ldr	r3, [pc, #20]	; (8014f3c <RegionCommonTxConfigPrint+0x2c>)
 8014f28:	2201      	movs	r2, #1
 8014f2a:	2100      	movs	r1, #0
 8014f2c:	2002      	movs	r0, #2
 8014f2e:	f005 fd93 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
}
 8014f32:	bf00      	nop
 8014f34:	3708      	adds	r7, #8
 8014f36:	46bd      	mov	sp, r7
 8014f38:	bd80      	pop	{r7, pc}
 8014f3a:	bf00      	nop
 8014f3c:	0801b458 	.word	0x0801b458

08014f40 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b082      	sub	sp, #8
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
 8014f48:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8014f4a:	4b2d      	ldr	r3, [pc, #180]	; (8015000 <VerifyRfFreq+0xc0>)
 8014f4c:	6a1b      	ldr	r3, [r3, #32]
 8014f4e:	6878      	ldr	r0, [r7, #4]
 8014f50:	4798      	blx	r3
 8014f52:	4603      	mov	r3, r0
 8014f54:	f083 0301 	eor.w	r3, r3, #1
 8014f58:	b2db      	uxtb	r3, r3
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d001      	beq.n	8014f62 <VerifyRfFreq+0x22>
    {
        return false;
 8014f5e:	2300      	movs	r3, #0
 8014f60:	e04a      	b.n	8014ff8 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	4a27      	ldr	r2, [pc, #156]	; (8015004 <VerifyRfFreq+0xc4>)
 8014f66:	4293      	cmp	r3, r2
 8014f68:	d307      	bcc.n	8014f7a <VerifyRfFreq+0x3a>
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	4a26      	ldr	r2, [pc, #152]	; (8015008 <VerifyRfFreq+0xc8>)
 8014f6e:	4293      	cmp	r3, r2
 8014f70:	d803      	bhi.n	8014f7a <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8014f72:	683b      	ldr	r3, [r7, #0]
 8014f74:	2202      	movs	r2, #2
 8014f76:	701a      	strb	r2, [r3, #0]
 8014f78:	e03d      	b.n	8014ff6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	4a22      	ldr	r2, [pc, #136]	; (8015008 <VerifyRfFreq+0xc8>)
 8014f7e:	4293      	cmp	r3, r2
 8014f80:	d907      	bls.n	8014f92 <VerifyRfFreq+0x52>
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	4a21      	ldr	r2, [pc, #132]	; (801500c <VerifyRfFreq+0xcc>)
 8014f86:	4293      	cmp	r3, r2
 8014f88:	d803      	bhi.n	8014f92 <VerifyRfFreq+0x52>
    {
        *band = 0;
 8014f8a:	683b      	ldr	r3, [r7, #0]
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	701a      	strb	r2, [r3, #0]
 8014f90:	e031      	b.n	8014ff6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	4a1d      	ldr	r2, [pc, #116]	; (801500c <VerifyRfFreq+0xcc>)
 8014f96:	4293      	cmp	r3, r2
 8014f98:	d907      	bls.n	8014faa <VerifyRfFreq+0x6a>
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	4a1c      	ldr	r2, [pc, #112]	; (8015010 <VerifyRfFreq+0xd0>)
 8014f9e:	4293      	cmp	r3, r2
 8014fa0:	d803      	bhi.n	8014faa <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8014fa2:	683b      	ldr	r3, [r7, #0]
 8014fa4:	2201      	movs	r2, #1
 8014fa6:	701a      	strb	r2, [r3, #0]
 8014fa8:	e025      	b.n	8014ff6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	4a19      	ldr	r2, [pc, #100]	; (8015014 <VerifyRfFreq+0xd4>)
 8014fae:	4293      	cmp	r3, r2
 8014fb0:	d907      	bls.n	8014fc2 <VerifyRfFreq+0x82>
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	4a18      	ldr	r2, [pc, #96]	; (8015018 <VerifyRfFreq+0xd8>)
 8014fb6:	4293      	cmp	r3, r2
 8014fb8:	d803      	bhi.n	8014fc2 <VerifyRfFreq+0x82>
    {
        *band = 5;
 8014fba:	683b      	ldr	r3, [r7, #0]
 8014fbc:	2205      	movs	r2, #5
 8014fbe:	701a      	strb	r2, [r3, #0]
 8014fc0:	e019      	b.n	8014ff6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	4a15      	ldr	r2, [pc, #84]	; (801501c <VerifyRfFreq+0xdc>)
 8014fc6:	4293      	cmp	r3, r2
 8014fc8:	d907      	bls.n	8014fda <VerifyRfFreq+0x9a>
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	4a14      	ldr	r2, [pc, #80]	; (8015020 <VerifyRfFreq+0xe0>)
 8014fce:	4293      	cmp	r3, r2
 8014fd0:	d803      	bhi.n	8014fda <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8014fd2:	683b      	ldr	r3, [r7, #0]
 8014fd4:	2203      	movs	r2, #3
 8014fd6:	701a      	strb	r2, [r3, #0]
 8014fd8:	e00d      	b.n	8014ff6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	4a11      	ldr	r2, [pc, #68]	; (8015024 <VerifyRfFreq+0xe4>)
 8014fde:	4293      	cmp	r3, r2
 8014fe0:	d307      	bcc.n	8014ff2 <VerifyRfFreq+0xb2>
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	4a10      	ldr	r2, [pc, #64]	; (8015028 <VerifyRfFreq+0xe8>)
 8014fe6:	4293      	cmp	r3, r2
 8014fe8:	d803      	bhi.n	8014ff2 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8014fea:	683b      	ldr	r3, [r7, #0]
 8014fec:	2204      	movs	r2, #4
 8014fee:	701a      	strb	r2, [r3, #0]
 8014ff0:	e001      	b.n	8014ff6 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	e000      	b.n	8014ff8 <VerifyRfFreq+0xb8>
    }
    return true;
 8014ff6:	2301      	movs	r3, #1
}
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	3708      	adds	r7, #8
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	bd80      	pop	{r7, pc}
 8015000:	0801b9f8 	.word	0x0801b9f8
 8015004:	337055c0 	.word	0x337055c0
 8015008:	338eda3f 	.word	0x338eda3f
 801500c:	33bca100 	.word	0x33bca100
 8015010:	33c5c8c0 	.word	0x33c5c8c0
 8015014:	33c74f5f 	.word	0x33c74f5f
 8015018:	33cef080 	.word	0x33cef080
 801501c:	33d1fdbf 	.word	0x33d1fdbf
 8015020:	33d5ce50 	.word	0x33d5ce50
 8015024:	33d691a0 	.word	0x33d691a0
 8015028:	33db2580 	.word	0x33db2580

0801502c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801502c:	b590      	push	{r4, r7, lr}
 801502e:	b08b      	sub	sp, #44	; 0x2c
 8015030:	af04      	add	r7, sp, #16
 8015032:	4603      	mov	r3, r0
 8015034:	460a      	mov	r2, r1
 8015036:	71fb      	strb	r3, [r7, #7]
 8015038:	4613      	mov	r3, r2
 801503a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 801503c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015040:	4a1f      	ldr	r2, [pc, #124]	; (80150c0 <GetTimeOnAir+0x94>)
 8015042:	5cd3      	ldrb	r3, [r2, r3]
 8015044:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8015046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801504a:	491e      	ldr	r1, [pc, #120]	; (80150c4 <GetTimeOnAir+0x98>)
 801504c:	4618      	mov	r0, r3
 801504e:	f7ff ff0f 	bl	8014e70 <RegionCommonGetBandwidth>
 8015052:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8015054:	2300      	movs	r3, #0
 8015056:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8015058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801505c:	2b07      	cmp	r3, #7
 801505e:	d118      	bne.n	8015092 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8015060:	4b19      	ldr	r3, [pc, #100]	; (80150c8 <GetTimeOnAir+0x9c>)
 8015062:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015064:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015068:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801506c:	fb02 f303 	mul.w	r3, r2, r3
 8015070:	4619      	mov	r1, r3
 8015072:	88bb      	ldrh	r3, [r7, #4]
 8015074:	b2db      	uxtb	r3, r3
 8015076:	2201      	movs	r2, #1
 8015078:	9203      	str	r2, [sp, #12]
 801507a:	9302      	str	r3, [sp, #8]
 801507c:	2300      	movs	r3, #0
 801507e:	9301      	str	r3, [sp, #4]
 8015080:	2305      	movs	r3, #5
 8015082:	9300      	str	r3, [sp, #0]
 8015084:	2300      	movs	r3, #0
 8015086:	460a      	mov	r2, r1
 8015088:	68f9      	ldr	r1, [r7, #12]
 801508a:	2000      	movs	r0, #0
 801508c:	47a0      	blx	r4
 801508e:	6178      	str	r0, [r7, #20]
 8015090:	e011      	b.n	80150b6 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8015092:	4b0d      	ldr	r3, [pc, #52]	; (80150c8 <GetTimeOnAir+0x9c>)
 8015094:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015096:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801509a:	88bb      	ldrh	r3, [r7, #4]
 801509c:	b2db      	uxtb	r3, r3
 801509e:	2101      	movs	r1, #1
 80150a0:	9103      	str	r1, [sp, #12]
 80150a2:	9302      	str	r3, [sp, #8]
 80150a4:	2300      	movs	r3, #0
 80150a6:	9301      	str	r3, [sp, #4]
 80150a8:	2308      	movs	r3, #8
 80150aa:	9300      	str	r3, [sp, #0]
 80150ac:	2301      	movs	r3, #1
 80150ae:	68f9      	ldr	r1, [r7, #12]
 80150b0:	2001      	movs	r0, #1
 80150b2:	47a0      	blx	r4
 80150b4:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80150b6:	697b      	ldr	r3, [r7, #20]
}
 80150b8:	4618      	mov	r0, r3
 80150ba:	371c      	adds	r7, #28
 80150bc:	46bd      	mov	sp, r7
 80150be:	bd90      	pop	{r4, r7, pc}
 80150c0:	0801b9c0 	.word	0x0801b9c0
 80150c4:	0801b9c8 	.word	0x0801b9c8
 80150c8:	0801b9f8 	.word	0x0801b9f8

080150cc <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b088      	sub	sp, #32
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80150d4:	2300      	movs	r3, #0
 80150d6:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	781b      	ldrb	r3, [r3, #0]
 80150dc:	3b01      	subs	r3, #1
 80150de:	2b38      	cmp	r3, #56	; 0x38
 80150e0:	f200 8128 	bhi.w	8015334 <RegionEU868GetPhyParam+0x268>
 80150e4:	a201      	add	r2, pc, #4	; (adr r2, 80150ec <RegionEU868GetPhyParam+0x20>)
 80150e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150ea:	bf00      	nop
 80150ec:	080151d1 	.word	0x080151d1
 80150f0:	080151d7 	.word	0x080151d7
 80150f4:	08015335 	.word	0x08015335
 80150f8:	08015335 	.word	0x08015335
 80150fc:	08015335 	.word	0x08015335
 8015100:	080151dd 	.word	0x080151dd
 8015104:	08015335 	.word	0x08015335
 8015108:	08015217 	.word	0x08015217
 801510c:	08015335 	.word	0x08015335
 8015110:	0801521d 	.word	0x0801521d
 8015114:	08015223 	.word	0x08015223
 8015118:	08015229 	.word	0x08015229
 801511c:	0801522f 	.word	0x0801522f
 8015120:	0801523f 	.word	0x0801523f
 8015124:	0801524f 	.word	0x0801524f
 8015128:	08015255 	.word	0x08015255
 801512c:	0801525d 	.word	0x0801525d
 8015130:	08015265 	.word	0x08015265
 8015134:	0801526d 	.word	0x0801526d
 8015138:	08015275 	.word	0x08015275
 801513c:	0801527d 	.word	0x0801527d
 8015140:	08015285 	.word	0x08015285
 8015144:	08015299 	.word	0x08015299
 8015148:	0801529f 	.word	0x0801529f
 801514c:	080152a5 	.word	0x080152a5
 8015150:	080152ab 	.word	0x080152ab
 8015154:	080152b7 	.word	0x080152b7
 8015158:	080152c3 	.word	0x080152c3
 801515c:	080152c9 	.word	0x080152c9
 8015160:	080152d1 	.word	0x080152d1
 8015164:	080152d7 	.word	0x080152d7
 8015168:	080152dd 	.word	0x080152dd
 801516c:	080152e5 	.word	0x080152e5
 8015170:	080151e3 	.word	0x080151e3
 8015174:	08015335 	.word	0x08015335
 8015178:	08015335 	.word	0x08015335
 801517c:	08015335 	.word	0x08015335
 8015180:	08015335 	.word	0x08015335
 8015184:	08015335 	.word	0x08015335
 8015188:	08015335 	.word	0x08015335
 801518c:	08015335 	.word	0x08015335
 8015190:	08015335 	.word	0x08015335
 8015194:	08015335 	.word	0x08015335
 8015198:	08015335 	.word	0x08015335
 801519c:	08015335 	.word	0x08015335
 80151a0:	08015335 	.word	0x08015335
 80151a4:	08015335 	.word	0x08015335
 80151a8:	080152eb 	.word	0x080152eb
 80151ac:	080152f1 	.word	0x080152f1
 80151b0:	080152ff 	.word	0x080152ff
 80151b4:	08015335 	.word	0x08015335
 80151b8:	08015335 	.word	0x08015335
 80151bc:	08015305 	.word	0x08015305
 80151c0:	0801530b 	.word	0x0801530b
 80151c4:	08015335 	.word	0x08015335
 80151c8:	08015311 	.word	0x08015311
 80151cc:	08015321 	.word	0x08015321
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 80151d0:	2300      	movs	r3, #0
 80151d2:	61bb      	str	r3, [r7, #24]
            break;
 80151d4:	e0af      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 80151d6:	2300      	movs	r3, #0
 80151d8:	61bb      	str	r3, [r7, #24]
            break;
 80151da:	e0ac      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 80151dc:	2300      	movs	r3, #0
 80151de:	61bb      	str	r3, [r7, #24]
            break;
 80151e0:	e0a9      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80151e8:	733b      	strb	r3, [r7, #12]
 80151ea:	2307      	movs	r3, #7
 80151ec:	737b      	strb	r3, [r7, #13]
 80151ee:	2300      	movs	r3, #0
 80151f0:	73bb      	strb	r3, [r7, #14]
 80151f2:	2310      	movs	r3, #16
 80151f4:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80151f6:	4b53      	ldr	r3, [pc, #332]	; (8015344 <RegionEU868GetPhyParam+0x278>)
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80151fe:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8015200:	4b50      	ldr	r3, [pc, #320]	; (8015344 <RegionEU868GetPhyParam+0x278>)
 8015202:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015204:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8015206:	f107 030c 	add.w	r3, r7, #12
 801520a:	4618      	mov	r0, r3
 801520c:	f7ff fddd 	bl	8014dca <RegionCommonGetNextLowerTxDr>
 8015210:	4603      	mov	r3, r0
 8015212:	61bb      	str	r3, [r7, #24]
            break;
 8015214:	e08f      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8015216:	2300      	movs	r3, #0
 8015218:	61bb      	str	r3, [r7, #24]
            break;
 801521a:	e08c      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 801521c:	2300      	movs	r3, #0
 801521e:	61bb      	str	r3, [r7, #24]
            break;
 8015220:	e089      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8015222:	2340      	movs	r3, #64	; 0x40
 8015224:	61bb      	str	r3, [r7, #24]
            break;
 8015226:	e086      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8015228:	2320      	movs	r3, #32
 801522a:	61bb      	str	r3, [r7, #24]
            break;
 801522c:	e083      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015234:	461a      	mov	r2, r3
 8015236:	4b44      	ldr	r3, [pc, #272]	; (8015348 <RegionEU868GetPhyParam+0x27c>)
 8015238:	5c9b      	ldrb	r3, [r3, r2]
 801523a:	61bb      	str	r3, [r7, #24]
            break;
 801523c:	e07b      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015244:	461a      	mov	r2, r3
 8015246:	4b41      	ldr	r3, [pc, #260]	; (801534c <RegionEU868GetPhyParam+0x280>)
 8015248:	5c9b      	ldrb	r3, [r3, r2]
 801524a:	61bb      	str	r3, [r7, #24]
            break;
 801524c:	e073      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 801524e:	2301      	movs	r3, #1
 8015250:	61bb      	str	r3, [r7, #24]
            break;
 8015252:	e070      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8015254:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8015258:	61bb      	str	r3, [r7, #24]
            break;
 801525a:	e06c      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801525c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015260:	61bb      	str	r3, [r7, #24]
            break;
 8015262:	e068      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8015264:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8015268:	61bb      	str	r3, [r7, #24]
            break;
 801526a:	e064      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801526c:	f241 3388 	movw	r3, #5000	; 0x1388
 8015270:	61bb      	str	r3, [r7, #24]
            break;
 8015272:	e060      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8015274:	f241 7370 	movw	r3, #6000	; 0x1770
 8015278:	61bb      	str	r3, [r7, #24]
            break;
 801527a:	e05c      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801527c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8015280:	61bb      	str	r3, [r7, #24]
            break;
 8015282:	e058      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8015284:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015288:	4831      	ldr	r0, [pc, #196]	; (8015350 <RegionEU868GetPhyParam+0x284>)
 801528a:	f001 f879 	bl	8016380 <randr>
 801528e:	4603      	mov	r3, r0
 8015290:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8015294:	61bb      	str	r3, [r7, #24]
            break;
 8015296:	e04e      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8015298:	2300      	movs	r3, #0
 801529a:	61bb      	str	r3, [r7, #24]
            break;
 801529c:	e04b      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801529e:	4b2d      	ldr	r3, [pc, #180]	; (8015354 <RegionEU868GetPhyParam+0x288>)
 80152a0:	61bb      	str	r3, [r7, #24]
            break;
 80152a2:	e048      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 80152a4:	2300      	movs	r3, #0
 80152a6:	61bb      	str	r3, [r7, #24]
            break;
 80152a8:	e045      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80152aa:	4b26      	ldr	r3, [pc, #152]	; (8015344 <RegionEU868GetPhyParam+0x278>)
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80152b2:	61bb      	str	r3, [r7, #24]
            break;
 80152b4:	e03f      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80152b6:	4b23      	ldr	r3, [pc, #140]	; (8015344 <RegionEU868GetPhyParam+0x278>)
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 80152be:	61bb      	str	r3, [r7, #24]
            break;
 80152c0:	e039      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80152c2:	2310      	movs	r3, #16
 80152c4:	61bb      	str	r3, [r7, #24]
            break;
 80152c6:	e036      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 80152c8:	4b1e      	ldr	r3, [pc, #120]	; (8015344 <RegionEU868GetPhyParam+0x278>)
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	61bb      	str	r3, [r7, #24]
            break;
 80152ce:	e032      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 80152d0:	2300      	movs	r3, #0
 80152d2:	61bb      	str	r3, [r7, #24]
            break;
 80152d4:	e02f      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 80152d6:	2300      	movs	r3, #0
 80152d8:	61bb      	str	r3, [r7, #24]
            break;
 80152da:	e02c      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 80152dc:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80152e0:	61bb      	str	r3, [r7, #24]
            break;
 80152e2:	e028      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80152e4:	4b1c      	ldr	r3, [pc, #112]	; (8015358 <RegionEU868GetPhyParam+0x28c>)
 80152e6:	61bb      	str	r3, [r7, #24]
            break;
 80152e8:	e025      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80152ea:	4b1a      	ldr	r3, [pc, #104]	; (8015354 <RegionEU868GetPhyParam+0x288>)
 80152ec:	61bb      	str	r3, [r7, #24]
            break;
 80152ee:	e022      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80152f0:	2311      	movs	r3, #17
 80152f2:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80152f4:	2302      	movs	r3, #2
 80152f6:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80152f8:	2300      	movs	r3, #0
 80152fa:	76bb      	strb	r3, [r7, #26]
            break;
 80152fc:	e01b      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80152fe:	2303      	movs	r3, #3
 8015300:	61bb      	str	r3, [r7, #24]
            break;
 8015302:	e018      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8015304:	4b13      	ldr	r3, [pc, #76]	; (8015354 <RegionEU868GetPhyParam+0x288>)
 8015306:	61bb      	str	r3, [r7, #24]
            break;
 8015308:	e015      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 801530a:	2303      	movs	r3, #3
 801530c:	61bb      	str	r3, [r7, #24]
            break;
 801530e:	e012      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015316:	461a      	mov	r2, r3
 8015318:	4b10      	ldr	r3, [pc, #64]	; (801535c <RegionEU868GetPhyParam+0x290>)
 801531a:	5c9b      	ldrb	r3, [r3, r2]
 801531c:	61bb      	str	r3, [r7, #24]
            break;
 801531e:	e00a      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015326:	490e      	ldr	r1, [pc, #56]	; (8015360 <RegionEU868GetPhyParam+0x294>)
 8015328:	4618      	mov	r0, r3
 801532a:	f7ff fda1 	bl	8014e70 <RegionCommonGetBandwidth>
 801532e:	4603      	mov	r3, r0
 8015330:	61bb      	str	r3, [r7, #24]
            break;
 8015332:	e000      	b.n	8015336 <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8015334:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8015336:	69bb      	ldr	r3, [r7, #24]
 8015338:	61fb      	str	r3, [r7, #28]
 801533a:	69fb      	ldr	r3, [r7, #28]
}
 801533c:	4618      	mov	r0, r3
 801533e:	3720      	adds	r7, #32
 8015340:	46bd      	mov	sp, r7
 8015342:	bd80      	pop	{r7, pc}
 8015344:	20001b24 	.word	0x20001b24
 8015348:	0801b9e8 	.word	0x0801b9e8
 801534c:	0801b9f0 	.word	0x0801b9f0
 8015350:	fffffc18 	.word	0xfffffc18
 8015354:	33d3e608 	.word	0x33d3e608
 8015358:	4009999a 	.word	0x4009999a
 801535c:	0801b9c0 	.word	0x0801b9c0
 8015360:	0801b9c8 	.word	0x0801b9c8

08015364 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8015364:	b590      	push	{r4, r7, lr}
 8015366:	b085      	sub	sp, #20
 8015368:	af02      	add	r7, sp, #8
 801536a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801536c:	4b11      	ldr	r3, [pc, #68]	; (80153b4 <RegionEU868SetBandTxDone+0x50>)
 801536e:	681a      	ldr	r2, [r3, #0]
 8015370:	4b11      	ldr	r3, [pc, #68]	; (80153b8 <RegionEU868SetBandTxDone+0x54>)
 8015372:	6819      	ldr	r1, [r3, #0]
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	781b      	ldrb	r3, [r3, #0]
 8015378:	4618      	mov	r0, r3
 801537a:	4603      	mov	r3, r0
 801537c:	005b      	lsls	r3, r3, #1
 801537e:	4403      	add	r3, r0
 8015380:	009b      	lsls	r3, r3, #2
 8015382:	440b      	add	r3, r1
 8015384:	3309      	adds	r3, #9
 8015386:	781b      	ldrb	r3, [r3, #0]
 8015388:	4619      	mov	r1, r3
 801538a:	460b      	mov	r3, r1
 801538c:	005b      	lsls	r3, r3, #1
 801538e:	440b      	add	r3, r1
 8015390:	00db      	lsls	r3, r3, #3
 8015392:	18d0      	adds	r0, r2, r3
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	6899      	ldr	r1, [r3, #8]
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	785c      	ldrb	r4, [r3, #1]
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	691a      	ldr	r2, [r3, #16]
 80153a0:	9200      	str	r2, [sp, #0]
 80153a2:	68db      	ldr	r3, [r3, #12]
 80153a4:	4622      	mov	r2, r4
 80153a6:	f7ff f8e9 	bl	801457c <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 80153aa:	bf00      	nop
 80153ac:	370c      	adds	r7, #12
 80153ae:	46bd      	mov	sp, r7
 80153b0:	bd90      	pop	{r4, r7, pc}
 80153b2:	bf00      	nop
 80153b4:	20001b20 	.word	0x20001b20
 80153b8:	20001b24 	.word	0x20001b24

080153bc <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b0b0      	sub	sp, #192	; 0xc0
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 80153c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80153c8:	2290      	movs	r2, #144	; 0x90
 80153ca:	2100      	movs	r1, #0
 80153cc:	4618      	mov	r0, r3
 80153ce:	f005 fddf 	bl	801af90 <memset>
 80153d2:	2364      	movs	r3, #100	; 0x64
 80153d4:	863b      	strh	r3, [r7, #48]	; 0x30
 80153d6:	2364      	movs	r3, #100	; 0x64
 80153d8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80153dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80153e0:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 80153e4:	230a      	movs	r3, #10
 80153e6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80153ea:	2364      	movs	r3, #100	; 0x64
 80153ec:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80153f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80153f4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	7a1b      	ldrb	r3, [r3, #8]
 80153fc:	2b02      	cmp	r3, #2
 80153fe:	d05e      	beq.n	80154be <RegionEU868InitDefaults+0x102>
 8015400:	2b02      	cmp	r3, #2
 8015402:	dc6b      	bgt.n	80154dc <RegionEU868InitDefaults+0x120>
 8015404:	2b00      	cmp	r3, #0
 8015406:	d002      	beq.n	801540e <RegionEU868InitDefaults+0x52>
 8015408:	2b01      	cmp	r3, #1
 801540a:	d03f      	beq.n	801548c <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 801540c:	e066      	b.n	80154dc <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d063      	beq.n	80154de <RegionEU868InitDefaults+0x122>
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	685b      	ldr	r3, [r3, #4]
 801541a:	2b00      	cmp	r3, #0
 801541c:	d05f      	beq.n	80154de <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	4a30      	ldr	r2, [pc, #192]	; (80154e4 <RegionEU868InitDefaults+0x128>)
 8015424:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	685b      	ldr	r3, [r3, #4]
 801542a:	4a2f      	ldr	r2, [pc, #188]	; (80154e8 <RegionEU868InitDefaults+0x12c>)
 801542c:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 801542e:	4b2d      	ldr	r3, [pc, #180]	; (80154e4 <RegionEU868InitDefaults+0x128>)
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	4618      	mov	r0, r3
 8015434:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015438:	2290      	movs	r2, #144	; 0x90
 801543a:	4619      	mov	r1, r3
 801543c:	f000 ffb7 	bl	80163ae <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8015440:	4b29      	ldr	r3, [pc, #164]	; (80154e8 <RegionEU868InitDefaults+0x12c>)
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	4a29      	ldr	r2, [pc, #164]	; (80154ec <RegionEU868InitDefaults+0x130>)
 8015446:	ca07      	ldmia	r2, {r0, r1, r2}
 8015448:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 801544c:	4b26      	ldr	r3, [pc, #152]	; (80154e8 <RegionEU868InitDefaults+0x12c>)
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	4a27      	ldr	r2, [pc, #156]	; (80154f0 <RegionEU868InitDefaults+0x134>)
 8015452:	330c      	adds	r3, #12
 8015454:	ca07      	ldmia	r2, {r0, r1, r2}
 8015456:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 801545a:	4b23      	ldr	r3, [pc, #140]	; (80154e8 <RegionEU868InitDefaults+0x12c>)
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	4a25      	ldr	r2, [pc, #148]	; (80154f4 <RegionEU868InitDefaults+0x138>)
 8015460:	3318      	adds	r3, #24
 8015462:	ca07      	ldmia	r2, {r0, r1, r2}
 8015464:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8015468:	4b1f      	ldr	r3, [pc, #124]	; (80154e8 <RegionEU868InitDefaults+0x12c>)
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	2207      	movs	r2, #7
 801546e:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015472:	4b1d      	ldr	r3, [pc, #116]	; (80154e8 <RegionEU868InitDefaults+0x12c>)
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 801547a:	4b1b      	ldr	r3, [pc, #108]	; (80154e8 <RegionEU868InitDefaults+0x12c>)
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8015482:	2201      	movs	r2, #1
 8015484:	4619      	mov	r1, r3
 8015486:	f7ff f853 	bl	8014530 <RegionCommonChanMaskCopy>
 801548a:	e028      	b.n	80154de <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 801548c:	4b16      	ldr	r3, [pc, #88]	; (80154e8 <RegionEU868InitDefaults+0x12c>)
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	2200      	movs	r2, #0
 8015492:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8015494:	4b14      	ldr	r3, [pc, #80]	; (80154e8 <RegionEU868InitDefaults+0x12c>)
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	2200      	movs	r2, #0
 801549a:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 801549c:	4b12      	ldr	r3, [pc, #72]	; (80154e8 <RegionEU868InitDefaults+0x12c>)
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	2200      	movs	r2, #0
 80154a2:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80154a4:	4b10      	ldr	r3, [pc, #64]	; (80154e8 <RegionEU868InitDefaults+0x12c>)
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 80154ac:	4b0e      	ldr	r3, [pc, #56]	; (80154e8 <RegionEU868InitDefaults+0x12c>)
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 80154b4:	2201      	movs	r2, #1
 80154b6:	4619      	mov	r1, r3
 80154b8:	f7ff f83a 	bl	8014530 <RegionCommonChanMaskCopy>
            break;
 80154bc:	e00f      	b.n	80154de <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 80154be:	4b0a      	ldr	r3, [pc, #40]	; (80154e8 <RegionEU868InitDefaults+0x12c>)
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 80154c6:	4b08      	ldr	r3, [pc, #32]	; (80154e8 <RegionEU868InitDefaults+0x12c>)
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 80154ce:	4b06      	ldr	r3, [pc, #24]	; (80154e8 <RegionEU868InitDefaults+0x12c>)
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	430a      	orrs	r2, r1
 80154d4:	b292      	uxth	r2, r2
 80154d6:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 80154da:	e000      	b.n	80154de <RegionEU868InitDefaults+0x122>
            break;
 80154dc:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80154de:	37c0      	adds	r7, #192	; 0xc0
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd80      	pop	{r7, pc}
 80154e4:	20001b20 	.word	0x20001b20
 80154e8:	20001b24 	.word	0x20001b24
 80154ec:	0801b474 	.word	0x0801b474
 80154f0:	0801b480 	.word	0x0801b480
 80154f4:	0801b48c 	.word	0x0801b48c

080154f8 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b084      	sub	sp, #16
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	6078      	str	r0, [r7, #4]
 8015500:	460b      	mov	r3, r1
 8015502:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8015504:	78fb      	ldrb	r3, [r7, #3]
 8015506:	2b0f      	cmp	r3, #15
 8015508:	d86c      	bhi.n	80155e4 <RegionEU868Verify+0xec>
 801550a:	a201      	add	r2, pc, #4	; (adr r2, 8015510 <RegionEU868Verify+0x18>)
 801550c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015510:	08015551 	.word	0x08015551
 8015514:	080155e5 	.word	0x080155e5
 8015518:	080155e5 	.word	0x080155e5
 801551c:	080155e5 	.word	0x080155e5
 8015520:	080155e5 	.word	0x080155e5
 8015524:	08015569 	.word	0x08015569
 8015528:	08015587 	.word	0x08015587
 801552c:	080155a5 	.word	0x080155a5
 8015530:	080155e5 	.word	0x080155e5
 8015534:	080155c3 	.word	0x080155c3
 8015538:	080155c3 	.word	0x080155c3
 801553c:	080155e5 	.word	0x080155e5
 8015540:	080155e5 	.word	0x080155e5
 8015544:	080155e5 	.word	0x080155e5
 8015548:	080155e5 	.word	0x080155e5
 801554c:	080155e1 	.word	0x080155e1
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8015550:	2300      	movs	r3, #0
 8015552:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	f107 020f 	add.w	r2, r7, #15
 801555c:	4611      	mov	r1, r2
 801555e:	4618      	mov	r0, r3
 8015560:	f7ff fcee 	bl	8014f40 <VerifyRfFreq>
 8015564:	4603      	mov	r3, r0
 8015566:	e03e      	b.n	80155e6 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	f993 3000 	ldrsb.w	r3, [r3]
 801556e:	2207      	movs	r2, #7
 8015570:	2100      	movs	r1, #0
 8015572:	4618      	mov	r0, r3
 8015574:	f7fe ff5f 	bl	8014436 <RegionCommonValueInRange>
 8015578:	4603      	mov	r3, r0
 801557a:	2b00      	cmp	r3, #0
 801557c:	bf14      	ite	ne
 801557e:	2301      	movne	r3, #1
 8015580:	2300      	moveq	r3, #0
 8015582:	b2db      	uxtb	r3, r3
 8015584:	e02f      	b.n	80155e6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	f993 3000 	ldrsb.w	r3, [r3]
 801558c:	2205      	movs	r2, #5
 801558e:	2100      	movs	r1, #0
 8015590:	4618      	mov	r0, r3
 8015592:	f7fe ff50 	bl	8014436 <RegionCommonValueInRange>
 8015596:	4603      	mov	r3, r0
 8015598:	2b00      	cmp	r3, #0
 801559a:	bf14      	ite	ne
 801559c:	2301      	movne	r3, #1
 801559e:	2300      	moveq	r3, #0
 80155a0:	b2db      	uxtb	r3, r3
 80155a2:	e020      	b.n	80155e6 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	f993 3000 	ldrsb.w	r3, [r3]
 80155aa:	2207      	movs	r2, #7
 80155ac:	2100      	movs	r1, #0
 80155ae:	4618      	mov	r0, r3
 80155b0:	f7fe ff41 	bl	8014436 <RegionCommonValueInRange>
 80155b4:	4603      	mov	r3, r0
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	bf14      	ite	ne
 80155ba:	2301      	movne	r3, #1
 80155bc:	2300      	moveq	r3, #0
 80155be:	b2db      	uxtb	r3, r3
 80155c0:	e011      	b.n	80155e6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	f993 3000 	ldrsb.w	r3, [r3]
 80155c8:	2207      	movs	r2, #7
 80155ca:	2100      	movs	r1, #0
 80155cc:	4618      	mov	r0, r3
 80155ce:	f7fe ff32 	bl	8014436 <RegionCommonValueInRange>
 80155d2:	4603      	mov	r3, r0
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	bf14      	ite	ne
 80155d8:	2301      	movne	r3, #1
 80155da:	2300      	moveq	r3, #0
 80155dc:	b2db      	uxtb	r3, r3
 80155de:	e002      	b.n	80155e6 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 80155e0:	2301      	movs	r3, #1
 80155e2:	e000      	b.n	80155e6 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 80155e4:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 80155e6:	4618      	mov	r0, r3
 80155e8:	3710      	adds	r7, #16
 80155ea:	46bd      	mov	sp, r7
 80155ec:	bd80      	pop	{r7, pc}
 80155ee:	bf00      	nop

080155f0 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b08a      	sub	sp, #40	; 0x28
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80155f8:	2350      	movs	r3, #80	; 0x50
 80155fa:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	791b      	ldrb	r3, [r3, #4]
 8015602:	2b10      	cmp	r3, #16
 8015604:	d162      	bne.n	80156cc <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	330f      	adds	r3, #15
 801560c:	781b      	ldrb	r3, [r3, #0]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d15e      	bne.n	80156d0 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015612:	2300      	movs	r3, #0
 8015614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015618:	2303      	movs	r3, #3
 801561a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801561e:	e050      	b.n	80156c2 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8015620:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015624:	2b07      	cmp	r3, #7
 8015626:	d824      	bhi.n	8015672 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	681a      	ldr	r2, [r3, #0]
 801562c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015630:	4413      	add	r3, r2
 8015632:	781b      	ldrb	r3, [r3, #0]
 8015634:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8015636:	69ba      	ldr	r2, [r7, #24]
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	6819      	ldr	r1, [r3, #0]
 801563c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015640:	3301      	adds	r3, #1
 8015642:	440b      	add	r3, r1
 8015644:	781b      	ldrb	r3, [r3, #0]
 8015646:	021b      	lsls	r3, r3, #8
 8015648:	4313      	orrs	r3, r2
 801564a:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801564c:	69ba      	ldr	r2, [r7, #24]
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	6819      	ldr	r1, [r3, #0]
 8015652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015656:	3302      	adds	r3, #2
 8015658:	440b      	add	r3, r1
 801565a:	781b      	ldrb	r3, [r3, #0]
 801565c:	041b      	lsls	r3, r3, #16
 801565e:	4313      	orrs	r3, r2
 8015660:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8015662:	69bb      	ldr	r3, [r7, #24]
 8015664:	2264      	movs	r2, #100	; 0x64
 8015666:	fb02 f303 	mul.w	r3, r2, r3
 801566a:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 801566c:	2300      	movs	r3, #0
 801566e:	61fb      	str	r3, [r7, #28]
 8015670:	e006      	b.n	8015680 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8015672:	2300      	movs	r3, #0
 8015674:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8015676:	2300      	movs	r3, #0
 8015678:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 801567c:	2300      	movs	r3, #0
 801567e:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8015680:	69bb      	ldr	r3, [r7, #24]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d00b      	beq.n	801569e <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8015686:	f107 0318 	add.w	r3, r7, #24
 801568a:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 801568c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015690:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8015692:	f107 0310 	add.w	r3, r7, #16
 8015696:	4618      	mov	r0, r3
 8015698:	f000 fd0e 	bl	80160b8 <RegionEU868ChannelAdd>
 801569c:	e007      	b.n	80156ae <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801569e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80156a2:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 80156a4:	f107 030c 	add.w	r3, r7, #12
 80156a8:	4618      	mov	r0, r3
 80156aa:	f000 fda7 	bl	80161fc <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80156ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156b2:	3303      	adds	r3, #3
 80156b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80156b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80156bc:	3301      	adds	r3, #1
 80156be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80156c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80156c6:	2b0f      	cmp	r3, #15
 80156c8:	d9aa      	bls.n	8015620 <RegionEU868ApplyCFList+0x30>
 80156ca:	e002      	b.n	80156d2 <RegionEU868ApplyCFList+0xe2>
        return;
 80156cc:	bf00      	nop
 80156ce:	e000      	b.n	80156d2 <RegionEU868ApplyCFList+0xe2>
        return;
 80156d0:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80156d2:	3728      	adds	r7, #40	; 0x28
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd80      	pop	{r7, pc}

080156d8 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b082      	sub	sp, #8
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	791b      	ldrb	r3, [r3, #4]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d002      	beq.n	80156ee <RegionEU868ChanMaskSet+0x16>
 80156e8:	2b01      	cmp	r3, #1
 80156ea:	d00b      	beq.n	8015704 <RegionEU868ChanMaskSet+0x2c>
 80156ec:	e015      	b.n	801571a <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80156ee:	4b0e      	ldr	r3, [pc, #56]	; (8015728 <RegionEU868ChanMaskSet+0x50>)
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	2201      	movs	r2, #1
 80156fc:	4619      	mov	r1, r3
 80156fe:	f7fe ff17 	bl	8014530 <RegionCommonChanMaskCopy>
            break;
 8015702:	e00c      	b.n	801571e <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015704:	4b08      	ldr	r3, [pc, #32]	; (8015728 <RegionEU868ChanMaskSet+0x50>)
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	2201      	movs	r2, #1
 8015712:	4619      	mov	r1, r3
 8015714:	f7fe ff0c 	bl	8014530 <RegionCommonChanMaskCopy>
            break;
 8015718:	e001      	b.n	801571e <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 801571a:	2300      	movs	r3, #0
 801571c:	e000      	b.n	8015720 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 801571e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015720:	4618      	mov	r0, r3
 8015722:	3708      	adds	r7, #8
 8015724:	46bd      	mov	sp, r7
 8015726:	bd80      	pop	{r7, pc}
 8015728:	20001b24 	.word	0x20001b24

0801572c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801572c:	b580      	push	{r7, lr}
 801572e:	b088      	sub	sp, #32
 8015730:	af02      	add	r7, sp, #8
 8015732:	60ba      	str	r2, [r7, #8]
 8015734:	607b      	str	r3, [r7, #4]
 8015736:	4603      	mov	r3, r0
 8015738:	73fb      	strb	r3, [r7, #15]
 801573a:	460b      	mov	r3, r1
 801573c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 801573e:	2300      	movs	r3, #0
 8015740:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8015742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015746:	2b07      	cmp	r3, #7
 8015748:	bfa8      	it	ge
 801574a:	2307      	movge	r3, #7
 801574c:	b25a      	sxtb	r2, r3
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015758:	491e      	ldr	r1, [pc, #120]	; (80157d4 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801575a:	4618      	mov	r0, r3
 801575c:	f7ff fb88 	bl	8014e70 <RegionCommonGetBandwidth>
 8015760:	4603      	mov	r3, r0
 8015762:	b2da      	uxtb	r2, r3
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801576e:	2b07      	cmp	r3, #7
 8015770:	d10a      	bne.n	8015788 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015778:	461a      	mov	r2, r3
 801577a:	4b17      	ldr	r3, [pc, #92]	; (80157d8 <RegionEU868ComputeRxWindowParameters+0xac>)
 801577c:	5c9b      	ldrb	r3, [r3, r2]
 801577e:	4618      	mov	r0, r3
 8015780:	f7ff f90a 	bl	8014998 <RegionCommonComputeSymbolTimeFsk>
 8015784:	6178      	str	r0, [r7, #20]
 8015786:	e011      	b.n	80157ac <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801578e:	461a      	mov	r2, r3
 8015790:	4b11      	ldr	r3, [pc, #68]	; (80157d8 <RegionEU868ComputeRxWindowParameters+0xac>)
 8015792:	5c9a      	ldrb	r2, [r3, r2]
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801579a:	4619      	mov	r1, r3
 801579c:	4b0d      	ldr	r3, [pc, #52]	; (80157d4 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801579e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80157a2:	4619      	mov	r1, r3
 80157a4:	4610      	mov	r0, r2
 80157a6:	f7ff f8e1 	bl	801496c <RegionCommonComputeSymbolTimeLoRa>
 80157aa:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80157ac:	4b0b      	ldr	r3, [pc, #44]	; (80157dc <RegionEU868ComputeRxWindowParameters+0xb0>)
 80157ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80157b0:	4798      	blx	r3
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	3308      	adds	r3, #8
 80157b6:	687a      	ldr	r2, [r7, #4]
 80157b8:	320c      	adds	r2, #12
 80157ba:	7bb9      	ldrb	r1, [r7, #14]
 80157bc:	9201      	str	r2, [sp, #4]
 80157be:	9300      	str	r3, [sp, #0]
 80157c0:	4603      	mov	r3, r0
 80157c2:	68ba      	ldr	r2, [r7, #8]
 80157c4:	6978      	ldr	r0, [r7, #20]
 80157c6:	f7ff f8f7 	bl	80149b8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 80157ca:	bf00      	nop
 80157cc:	3718      	adds	r7, #24
 80157ce:	46bd      	mov	sp, r7
 80157d0:	bd80      	pop	{r7, pc}
 80157d2:	bf00      	nop
 80157d4:	0801b9c8 	.word	0x0801b9c8
 80157d8:	0801b9c0 	.word	0x0801b9c0
 80157dc:	0801b9f8 	.word	0x0801b9f8

080157e0 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80157e0:	b5b0      	push	{r4, r5, r7, lr}
 80157e2:	b090      	sub	sp, #64	; 0x40
 80157e4:	af0a      	add	r7, sp, #40	; 0x28
 80157e6:	6078      	str	r0, [r7, #4]
 80157e8:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	785b      	ldrb	r3, [r3, #1]
 80157ee:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80157f0:	2300      	movs	r3, #0
 80157f2:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 80157f4:	2300      	movs	r3, #0
 80157f6:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	685b      	ldr	r3, [r3, #4]
 80157fc:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80157fe:	4b5a      	ldr	r3, [pc, #360]	; (8015968 <RegionEU868RxConfig+0x188>)
 8015800:	685b      	ldr	r3, [r3, #4]
 8015802:	4798      	blx	r3
 8015804:	4603      	mov	r3, r0
 8015806:	2b00      	cmp	r3, #0
 8015808:	d001      	beq.n	801580e <RegionEU868RxConfig+0x2e>
    {
        return false;
 801580a:	2300      	movs	r3, #0
 801580c:	e0a8      	b.n	8015960 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	7cdb      	ldrb	r3, [r3, #19]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d126      	bne.n	8015864 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8015816:	4b55      	ldr	r3, [pc, #340]	; (801596c <RegionEU868RxConfig+0x18c>)
 8015818:	681a      	ldr	r2, [r3, #0]
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	781b      	ldrb	r3, [r3, #0]
 801581e:	4619      	mov	r1, r3
 8015820:	460b      	mov	r3, r1
 8015822:	005b      	lsls	r3, r3, #1
 8015824:	440b      	add	r3, r1
 8015826:	009b      	lsls	r3, r3, #2
 8015828:	4413      	add	r3, r2
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801582e:	4b4f      	ldr	r3, [pc, #316]	; (801596c <RegionEU868RxConfig+0x18c>)
 8015830:	681a      	ldr	r2, [r3, #0]
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	781b      	ldrb	r3, [r3, #0]
 8015836:	4619      	mov	r1, r3
 8015838:	460b      	mov	r3, r1
 801583a:	005b      	lsls	r3, r3, #1
 801583c:	440b      	add	r3, r1
 801583e:	009b      	lsls	r3, r3, #2
 8015840:	4413      	add	r3, r2
 8015842:	3304      	adds	r3, #4
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d00c      	beq.n	8015864 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801584a:	4b48      	ldr	r3, [pc, #288]	; (801596c <RegionEU868RxConfig+0x18c>)
 801584c:	681a      	ldr	r2, [r3, #0]
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	781b      	ldrb	r3, [r3, #0]
 8015852:	4619      	mov	r1, r3
 8015854:	460b      	mov	r3, r1
 8015856:	005b      	lsls	r3, r3, #1
 8015858:	440b      	add	r3, r1
 801585a:	009b      	lsls	r3, r3, #2
 801585c:	4413      	add	r3, r2
 801585e:	3304      	adds	r3, #4
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8015864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015868:	4a41      	ldr	r2, [pc, #260]	; (8015970 <RegionEU868RxConfig+0x190>)
 801586a:	5cd3      	ldrb	r3, [r2, r3]
 801586c:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801586e:	4b3e      	ldr	r3, [pc, #248]	; (8015968 <RegionEU868RxConfig+0x188>)
 8015870:	68db      	ldr	r3, [r3, #12]
 8015872:	6938      	ldr	r0, [r7, #16]
 8015874:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8015876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801587a:	2b07      	cmp	r3, #7
 801587c:	d128      	bne.n	80158d0 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801587e:	2300      	movs	r3, #0
 8015880:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8015882:	4b39      	ldr	r3, [pc, #228]	; (8015968 <RegionEU868RxConfig+0x188>)
 8015884:	699c      	ldr	r4, [r3, #24]
 8015886:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801588a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801588e:	fb02 f303 	mul.w	r3, r2, r3
 8015892:	4619      	mov	r1, r3
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	689b      	ldr	r3, [r3, #8]
 8015898:	b29b      	uxth	r3, r3
 801589a:	687a      	ldr	r2, [r7, #4]
 801589c:	7c92      	ldrb	r2, [r2, #18]
 801589e:	7df8      	ldrb	r0, [r7, #23]
 80158a0:	9209      	str	r2, [sp, #36]	; 0x24
 80158a2:	2200      	movs	r2, #0
 80158a4:	9208      	str	r2, [sp, #32]
 80158a6:	2200      	movs	r2, #0
 80158a8:	9207      	str	r2, [sp, #28]
 80158aa:	2200      	movs	r2, #0
 80158ac:	9206      	str	r2, [sp, #24]
 80158ae:	2201      	movs	r2, #1
 80158b0:	9205      	str	r2, [sp, #20]
 80158b2:	2200      	movs	r2, #0
 80158b4:	9204      	str	r2, [sp, #16]
 80158b6:	2200      	movs	r2, #0
 80158b8:	9203      	str	r2, [sp, #12]
 80158ba:	9302      	str	r3, [sp, #8]
 80158bc:	2305      	movs	r3, #5
 80158be:	9301      	str	r3, [sp, #4]
 80158c0:	4b2c      	ldr	r3, [pc, #176]	; (8015974 <RegionEU868RxConfig+0x194>)
 80158c2:	9300      	str	r3, [sp, #0]
 80158c4:	2300      	movs	r3, #0
 80158c6:	460a      	mov	r2, r1
 80158c8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80158cc:	47a0      	blx	r4
 80158ce:	e024      	b.n	801591a <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 80158d0:	2301      	movs	r3, #1
 80158d2:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80158d4:	4b24      	ldr	r3, [pc, #144]	; (8015968 <RegionEU868RxConfig+0x188>)
 80158d6:	699c      	ldr	r4, [r3, #24]
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	789b      	ldrb	r3, [r3, #2]
 80158dc:	461d      	mov	r5, r3
 80158de:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	689b      	ldr	r3, [r3, #8]
 80158e6:	b29b      	uxth	r3, r3
 80158e8:	687a      	ldr	r2, [r7, #4]
 80158ea:	7c92      	ldrb	r2, [r2, #18]
 80158ec:	7df8      	ldrb	r0, [r7, #23]
 80158ee:	9209      	str	r2, [sp, #36]	; 0x24
 80158f0:	2201      	movs	r2, #1
 80158f2:	9208      	str	r2, [sp, #32]
 80158f4:	2200      	movs	r2, #0
 80158f6:	9207      	str	r2, [sp, #28]
 80158f8:	2200      	movs	r2, #0
 80158fa:	9206      	str	r2, [sp, #24]
 80158fc:	2200      	movs	r2, #0
 80158fe:	9205      	str	r2, [sp, #20]
 8015900:	2200      	movs	r2, #0
 8015902:	9204      	str	r2, [sp, #16]
 8015904:	2200      	movs	r2, #0
 8015906:	9203      	str	r2, [sp, #12]
 8015908:	9302      	str	r3, [sp, #8]
 801590a:	2308      	movs	r3, #8
 801590c:	9301      	str	r3, [sp, #4]
 801590e:	2300      	movs	r3, #0
 8015910:	9300      	str	r3, [sp, #0]
 8015912:	2301      	movs	r3, #1
 8015914:	460a      	mov	r2, r1
 8015916:	4629      	mov	r1, r5
 8015918:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	7c5b      	ldrb	r3, [r3, #17]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d005      	beq.n	801592e <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8015922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015926:	4a14      	ldr	r2, [pc, #80]	; (8015978 <RegionEU868RxConfig+0x198>)
 8015928:	5cd3      	ldrb	r3, [r2, r3]
 801592a:	75bb      	strb	r3, [r7, #22]
 801592c:	e004      	b.n	8015938 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801592e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015932:	4a12      	ldr	r2, [pc, #72]	; (801597c <RegionEU868RxConfig+0x19c>)
 8015934:	5cd3      	ldrb	r3, [r2, r3]
 8015936:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8015938:	4b0b      	ldr	r3, [pc, #44]	; (8015968 <RegionEU868RxConfig+0x188>)
 801593a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801593c:	7dba      	ldrb	r2, [r7, #22]
 801593e:	320d      	adds	r2, #13
 8015940:	b2d1      	uxtb	r1, r2
 8015942:	7dfa      	ldrb	r2, [r7, #23]
 8015944:	4610      	mov	r0, r2
 8015946:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	7cdb      	ldrb	r3, [r3, #19]
 801594c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015950:	6939      	ldr	r1, [r7, #16]
 8015952:	4618      	mov	r0, r3
 8015954:	f7ff faaa 	bl	8014eac <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8015958:	683b      	ldr	r3, [r7, #0]
 801595a:	7bfa      	ldrb	r2, [r7, #15]
 801595c:	701a      	strb	r2, [r3, #0]
    return true;
 801595e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015960:	4618      	mov	r0, r3
 8015962:	3718      	adds	r7, #24
 8015964:	46bd      	mov	sp, r7
 8015966:	bdb0      	pop	{r4, r5, r7, pc}
 8015968:	0801b9f8 	.word	0x0801b9f8
 801596c:	20001b24 	.word	0x20001b24
 8015970:	0801b9c0 	.word	0x0801b9c0
 8015974:	00014585 	.word	0x00014585
 8015978:	0801b9f0 	.word	0x0801b9f0
 801597c:	0801b9e8 	.word	0x0801b9e8

08015980 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015980:	b590      	push	{r4, r7, lr}
 8015982:	b093      	sub	sp, #76	; 0x4c
 8015984:	af0a      	add	r7, sp, #40	; 0x28
 8015986:	60f8      	str	r0, [r7, #12]
 8015988:	60b9      	str	r1, [r7, #8]
 801598a:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015992:	461a      	mov	r2, r3
 8015994:	4b5d      	ldr	r3, [pc, #372]	; (8015b0c <RegionEU868TxConfig+0x18c>)
 8015996:	5c9b      	ldrb	r3, [r3, r2]
 8015998:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80159a0:	4b5b      	ldr	r3, [pc, #364]	; (8015b10 <RegionEU868TxConfig+0x190>)
 80159a2:	681a      	ldr	r2, [r3, #0]
 80159a4:	4b5b      	ldr	r3, [pc, #364]	; (8015b14 <RegionEU868TxConfig+0x194>)
 80159a6:	6819      	ldr	r1, [r3, #0]
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	781b      	ldrb	r3, [r3, #0]
 80159ac:	461c      	mov	r4, r3
 80159ae:	4623      	mov	r3, r4
 80159b0:	005b      	lsls	r3, r3, #1
 80159b2:	4423      	add	r3, r4
 80159b4:	009b      	lsls	r3, r3, #2
 80159b6:	440b      	add	r3, r1
 80159b8:	3309      	adds	r3, #9
 80159ba:	781b      	ldrb	r3, [r3, #0]
 80159bc:	4619      	mov	r1, r3
 80159be:	460b      	mov	r3, r1
 80159c0:	005b      	lsls	r3, r3, #1
 80159c2:	440b      	add	r3, r1
 80159c4:	00db      	lsls	r3, r3, #3
 80159c6:	4413      	add	r3, r2
 80159c8:	3302      	adds	r3, #2
 80159ca:	f993 3000 	ldrsb.w	r3, [r3]
 80159ce:	4619      	mov	r1, r3
 80159d0:	f7ff fa39 	bl	8014e46 <RegionCommonLimitTxPower>
 80159d4:	4603      	mov	r3, r0
 80159d6:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80159de:	494e      	ldr	r1, [pc, #312]	; (8015b18 <RegionEU868TxConfig+0x198>)
 80159e0:	4618      	mov	r0, r3
 80159e2:	f7ff fa45 	bl	8014e70 <RegionCommonGetBandwidth>
 80159e6:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80159e8:	2300      	movs	r3, #0
 80159ea:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	6859      	ldr	r1, [r3, #4]
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	689a      	ldr	r2, [r3, #8]
 80159f4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80159f8:	4618      	mov	r0, r3
 80159fa:	f7ff f895 	bl	8014b28 <RegionCommonComputeTxPower>
 80159fe:	4603      	mov	r3, r0
 8015a00:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8015a02:	4b46      	ldr	r3, [pc, #280]	; (8015b1c <RegionEU868TxConfig+0x19c>)
 8015a04:	68da      	ldr	r2, [r3, #12]
 8015a06:	4b43      	ldr	r3, [pc, #268]	; (8015b14 <RegionEU868TxConfig+0x194>)
 8015a08:	6819      	ldr	r1, [r3, #0]
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	781b      	ldrb	r3, [r3, #0]
 8015a0e:	4618      	mov	r0, r3
 8015a10:	4603      	mov	r3, r0
 8015a12:	005b      	lsls	r3, r3, #1
 8015a14:	4403      	add	r3, r0
 8015a16:	009b      	lsls	r3, r3, #2
 8015a18:	440b      	add	r3, r1
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a26:	2b07      	cmp	r3, #7
 8015a28:	d124      	bne.n	8015a74 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8015a2e:	4b3b      	ldr	r3, [pc, #236]	; (8015b1c <RegionEU868TxConfig+0x19c>)
 8015a30:	69dc      	ldr	r4, [r3, #28]
 8015a32:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015a36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015a3a:	fb02 f303 	mul.w	r3, r2, r3
 8015a3e:	461a      	mov	r2, r3
 8015a40:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015a44:	7ff8      	ldrb	r0, [r7, #31]
 8015a46:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8015a4a:	9308      	str	r3, [sp, #32]
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	9307      	str	r3, [sp, #28]
 8015a50:	2300      	movs	r3, #0
 8015a52:	9306      	str	r3, [sp, #24]
 8015a54:	2300      	movs	r3, #0
 8015a56:	9305      	str	r3, [sp, #20]
 8015a58:	2301      	movs	r3, #1
 8015a5a:	9304      	str	r3, [sp, #16]
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	9303      	str	r3, [sp, #12]
 8015a60:	2305      	movs	r3, #5
 8015a62:	9302      	str	r3, [sp, #8]
 8015a64:	2300      	movs	r3, #0
 8015a66:	9301      	str	r3, [sp, #4]
 8015a68:	9200      	str	r2, [sp, #0]
 8015a6a:	69bb      	ldr	r3, [r7, #24]
 8015a6c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8015a70:	47a0      	blx	r4
 8015a72:	e01d      	b.n	8015ab0 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8015a74:	2301      	movs	r3, #1
 8015a76:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8015a78:	4b28      	ldr	r3, [pc, #160]	; (8015b1c <RegionEU868TxConfig+0x19c>)
 8015a7a:	69dc      	ldr	r4, [r3, #28]
 8015a7c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015a80:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015a84:	7ff8      	ldrb	r0, [r7, #31]
 8015a86:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8015a8a:	9208      	str	r2, [sp, #32]
 8015a8c:	2200      	movs	r2, #0
 8015a8e:	9207      	str	r2, [sp, #28]
 8015a90:	2200      	movs	r2, #0
 8015a92:	9206      	str	r2, [sp, #24]
 8015a94:	2200      	movs	r2, #0
 8015a96:	9205      	str	r2, [sp, #20]
 8015a98:	2201      	movs	r2, #1
 8015a9a:	9204      	str	r2, [sp, #16]
 8015a9c:	2200      	movs	r2, #0
 8015a9e:	9203      	str	r2, [sp, #12]
 8015aa0:	2208      	movs	r2, #8
 8015aa2:	9202      	str	r2, [sp, #8]
 8015aa4:	2201      	movs	r2, #1
 8015aa6:	9201      	str	r2, [sp, #4]
 8015aa8:	9300      	str	r3, [sp, #0]
 8015aaa:	69bb      	ldr	r3, [r7, #24]
 8015aac:	2200      	movs	r2, #0
 8015aae:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8015ab0:	4b18      	ldr	r3, [pc, #96]	; (8015b14 <RegionEU868TxConfig+0x194>)
 8015ab2:	681a      	ldr	r2, [r3, #0]
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	781b      	ldrb	r3, [r3, #0]
 8015ab8:	4619      	mov	r1, r3
 8015aba:	460b      	mov	r3, r1
 8015abc:	005b      	lsls	r3, r3, #1
 8015abe:	440b      	add	r3, r1
 8015ac0:	009b      	lsls	r3, r3, #2
 8015ac2:	4413      	add	r3, r2
 8015ac4:	681a      	ldr	r2, [r3, #0]
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015acc:	4619      	mov	r1, r3
 8015ace:	4610      	mov	r0, r2
 8015ad0:	f7ff fa1e 	bl	8014f10 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	899b      	ldrh	r3, [r3, #12]
 8015ade:	4619      	mov	r1, r3
 8015ae0:	4610      	mov	r0, r2
 8015ae2:	f7ff faa3 	bl	801502c <GetTimeOnAir>
 8015ae6:	4602      	mov	r2, r0
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8015aec:	4b0b      	ldr	r3, [pc, #44]	; (8015b1c <RegionEU868TxConfig+0x19c>)
 8015aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015af0:	68fa      	ldr	r2, [r7, #12]
 8015af2:	8992      	ldrh	r2, [r2, #12]
 8015af4:	b2d1      	uxtb	r1, r2
 8015af6:	7ffa      	ldrb	r2, [r7, #31]
 8015af8:	4610      	mov	r0, r2
 8015afa:	4798      	blx	r3

    *txPower = txPowerLimited;
 8015afc:	68bb      	ldr	r3, [r7, #8]
 8015afe:	7f7a      	ldrb	r2, [r7, #29]
 8015b00:	701a      	strb	r2, [r3, #0]
    return true;
 8015b02:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015b04:	4618      	mov	r0, r3
 8015b06:	3724      	adds	r7, #36	; 0x24
 8015b08:	46bd      	mov	sp, r7
 8015b0a:	bd90      	pop	{r4, r7, pc}
 8015b0c:	0801b9c0 	.word	0x0801b9c0
 8015b10:	20001b20 	.word	0x20001b20
 8015b14:	20001b24 	.word	0x20001b24
 8015b18:	0801b9c8 	.word	0x0801b9c8
 8015b1c:	0801b9f8 	.word	0x0801b9f8

08015b20 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015b20:	b590      	push	{r4, r7, lr}
 8015b22:	b093      	sub	sp, #76	; 0x4c
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	60f8      	str	r0, [r7, #12]
 8015b28:	60b9      	str	r1, [r7, #8]
 8015b2a:	607a      	str	r2, [r7, #4]
 8015b2c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8015b2e:	2307      	movs	r3, #7
 8015b30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015b34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015b38:	2200      	movs	r2, #0
 8015b3a:	601a      	str	r2, [r3, #0]
 8015b3c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015b3e:	2300      	movs	r3, #0
 8015b40:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8015b44:	2300      	movs	r3, #0
 8015b46:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015b4e:	e085      	b.n	8015c5c <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	685a      	ldr	r2, [r3, #4]
 8015b54:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015b58:	4413      	add	r3, r2
 8015b5a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015b5e:	4611      	mov	r1, r2
 8015b60:	4618      	mov	r0, r3
 8015b62:	f7fe fe29 	bl	80147b8 <RegionCommonParseLinkAdrReq>
 8015b66:	4603      	mov	r3, r0
 8015b68:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8015b6c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d07b      	beq.n	8015c6c <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015b74:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015b78:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015b7c:	4413      	add	r3, r2
 8015b7e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015b82:	2307      	movs	r3, #7
 8015b84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015b88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015b8c:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8015b8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d109      	bne.n	8015baa <RegionEU868LinkAdrReq+0x8a>
 8015b96:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d106      	bne.n	8015baa <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8015b9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015ba0:	f023 0301 	bic.w	r3, r3, #1
 8015ba4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015ba8:	e058      	b.n	8015c5c <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015baa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d003      	beq.n	8015bba <RegionEU868LinkAdrReq+0x9a>
 8015bb2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015bb6:	2b05      	cmp	r3, #5
 8015bb8:	d903      	bls.n	8015bc2 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8015bba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015bbe:	2b06      	cmp	r3, #6
 8015bc0:	d906      	bls.n	8015bd0 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8015bc2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015bc6:	f023 0301 	bic.w	r3, r3, #1
 8015bca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015bce:	e045      	b.n	8015c5c <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015bd6:	e03d      	b.n	8015c54 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8015bd8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015bdc:	2b06      	cmp	r3, #6
 8015bde:	d118      	bne.n	8015c12 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8015be0:	4b5f      	ldr	r3, [pc, #380]	; (8015d60 <RegionEU868LinkAdrReq+0x240>)
 8015be2:	6819      	ldr	r1, [r3, #0]
 8015be4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015be8:	4613      	mov	r3, r2
 8015bea:	005b      	lsls	r3, r3, #1
 8015bec:	4413      	add	r3, r2
 8015bee:	009b      	lsls	r3, r3, #2
 8015bf0:	440b      	add	r3, r1
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d028      	beq.n	8015c4a <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8015bf8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015bfc:	2201      	movs	r2, #1
 8015bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8015c02:	b21a      	sxth	r2, r3
 8015c04:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015c06:	b21b      	sxth	r3, r3
 8015c08:	4313      	orrs	r3, r2
 8015c0a:	b21b      	sxth	r3, r3
 8015c0c:	b29b      	uxth	r3, r3
 8015c0e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015c10:	e01b      	b.n	8015c4a <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015c12:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015c14:	461a      	mov	r2, r3
 8015c16:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015c1a:	fa42 f303 	asr.w	r3, r2, r3
 8015c1e:	f003 0301 	and.w	r3, r3, #1
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d011      	beq.n	8015c4a <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8015c26:	4b4e      	ldr	r3, [pc, #312]	; (8015d60 <RegionEU868LinkAdrReq+0x240>)
 8015c28:	6819      	ldr	r1, [r3, #0]
 8015c2a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015c2e:	4613      	mov	r3, r2
 8015c30:	005b      	lsls	r3, r3, #1
 8015c32:	4413      	add	r3, r2
 8015c34:	009b      	lsls	r3, r3, #2
 8015c36:	440b      	add	r3, r1
 8015c38:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d105      	bne.n	8015c4a <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8015c3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015c42:	f023 0301 	bic.w	r3, r3, #1
 8015c46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015c4a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015c4e:	3301      	adds	r3, #1
 8015c50:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015c54:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015c58:	2b0f      	cmp	r3, #15
 8015c5a:	d9bd      	bls.n	8015bd8 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	7a1b      	ldrb	r3, [r3, #8]
 8015c60:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015c64:	429a      	cmp	r2, r3
 8015c66:	f4ff af73 	bcc.w	8015b50 <RegionEU868LinkAdrReq+0x30>
 8015c6a:	e000      	b.n	8015c6e <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8015c6c:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015c6e:	2302      	movs	r3, #2
 8015c70:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	7a5b      	ldrb	r3, [r3, #9]
 8015c78:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8015c7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015c80:	4618      	mov	r0, r3
 8015c82:	f7ff fa23 	bl	80150cc <RegionEU868GetPhyParam>
 8015c86:	4603      	mov	r3, r0
 8015c88:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8015c8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015c8e:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	7a9b      	ldrb	r3, [r3, #10]
 8015c94:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015c96:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8015c9a:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015c9c:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8015ca0:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015ca2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015ca6:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015cae:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015cb6:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	7b5b      	ldrb	r3, [r3, #13]
 8015cbc:	b25b      	sxtb	r3, r3
 8015cbe:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8015cc0:	2310      	movs	r3, #16
 8015cc2:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8015cc4:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8015cc8:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8015cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ccc:	b25b      	sxtb	r3, r3
 8015cce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8015cd2:	2307      	movs	r3, #7
 8015cd4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8015cd8:	4b21      	ldr	r3, [pc, #132]	; (8015d60 <RegionEU868LinkAdrReq+0x240>)
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8015cde:	2307      	movs	r3, #7
 8015ce0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8015cf0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8015cf4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015cf8:	1c9a      	adds	r2, r3, #2
 8015cfa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015cfe:	1c59      	adds	r1, r3, #1
 8015d00:	f107 0010 	add.w	r0, r7, #16
 8015d04:	4623      	mov	r3, r4
 8015d06:	f7fe fda8 	bl	801485a <RegionCommonLinkAdrReqVerifyParams>
 8015d0a:	4603      	mov	r3, r0
 8015d0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015d10:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015d14:	2b07      	cmp	r3, #7
 8015d16:	d10d      	bne.n	8015d34 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8015d18:	4b11      	ldr	r3, [pc, #68]	; (8015d60 <RegionEU868LinkAdrReq+0x240>)
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8015d20:	220c      	movs	r2, #12
 8015d22:	2100      	movs	r1, #0
 8015d24:	4618      	mov	r0, r3
 8015d26:	f000 fb7d 	bl	8016424 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8015d2a:	4b0d      	ldr	r3, [pc, #52]	; (8015d60 <RegionEU868LinkAdrReq+0x240>)
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015d30:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015d34:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8015d38:	68bb      	ldr	r3, [r7, #8]
 8015d3a:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015d3c:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015d44:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8015d48:	683b      	ldr	r3, [r7, #0]
 8015d4a:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8015d4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015d4e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015d52:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8015d54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8015d58:	4618      	mov	r0, r3
 8015d5a:	374c      	adds	r7, #76	; 0x4c
 8015d5c:	46bd      	mov	sp, r7
 8015d5e:	bd90      	pop	{r4, r7, pc}
 8015d60:	20001b24 	.word	0x20001b24

08015d64 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015d64:	b580      	push	{r7, lr}
 8015d66:	b084      	sub	sp, #16
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8015d6c:	2307      	movs	r3, #7
 8015d6e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015d70:	2300      	movs	r3, #0
 8015d72:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	685b      	ldr	r3, [r3, #4]
 8015d78:	f107 020e 	add.w	r2, r7, #14
 8015d7c:	4611      	mov	r1, r2
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f7ff f8de 	bl	8014f40 <VerifyRfFreq>
 8015d84:	4603      	mov	r3, r0
 8015d86:	f083 0301 	eor.w	r3, r3, #1
 8015d8a:	b2db      	uxtb	r3, r3
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d003      	beq.n	8015d98 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8015d90:	7bfb      	ldrb	r3, [r7, #15]
 8015d92:	f023 0301 	bic.w	r3, r3, #1
 8015d96:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	f993 3000 	ldrsb.w	r3, [r3]
 8015d9e:	2207      	movs	r2, #7
 8015da0:	2100      	movs	r1, #0
 8015da2:	4618      	mov	r0, r3
 8015da4:	f7fe fb47 	bl	8014436 <RegionCommonValueInRange>
 8015da8:	4603      	mov	r3, r0
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d103      	bne.n	8015db6 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8015dae:	7bfb      	ldrb	r3, [r7, #15]
 8015db0:	f023 0302 	bic.w	r3, r3, #2
 8015db4:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015dbc:	2205      	movs	r2, #5
 8015dbe:	2100      	movs	r1, #0
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	f7fe fb38 	bl	8014436 <RegionCommonValueInRange>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d103      	bne.n	8015dd4 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8015dcc:	7bfb      	ldrb	r3, [r7, #15]
 8015dce:	f023 0304 	bic.w	r3, r3, #4
 8015dd2:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8015dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	3710      	adds	r7, #16
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	bd80      	pop	{r7, pc}
	...

08015de0 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b086      	sub	sp, #24
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015de8:	2303      	movs	r3, #3
 8015dea:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d114      	bne.n	8015e20 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015dfc:	b2db      	uxtb	r3, r3
 8015dfe:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8015e00:	f107 0308 	add.w	r3, r7, #8
 8015e04:	4618      	mov	r0, r3
 8015e06:	f000 f9f9 	bl	80161fc <RegionEU868ChannelsRemove>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	f083 0301 	eor.w	r3, r3, #1
 8015e10:	b2db      	uxtb	r3, r3
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d03b      	beq.n	8015e8e <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8015e16:	7dfb      	ldrb	r3, [r7, #23]
 8015e18:	f023 0303 	bic.w	r3, r3, #3
 8015e1c:	75fb      	strb	r3, [r7, #23]
 8015e1e:	e036      	b.n	8015e8e <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015e2c:	b2db      	uxtb	r3, r3
 8015e2e:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8015e30:	f107 030c 	add.w	r3, r7, #12
 8015e34:	4618      	mov	r0, r3
 8015e36:	f000 f93f 	bl	80160b8 <RegionEU868ChannelAdd>
 8015e3a:	4603      	mov	r3, r0
 8015e3c:	2b06      	cmp	r3, #6
 8015e3e:	d820      	bhi.n	8015e82 <RegionEU868NewChannelReq+0xa2>
 8015e40:	a201      	add	r2, pc, #4	; (adr r2, 8015e48 <RegionEU868NewChannelReq+0x68>)
 8015e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e46:	bf00      	nop
 8015e48:	08015e8d 	.word	0x08015e8d
 8015e4c:	08015e83 	.word	0x08015e83
 8015e50:	08015e83 	.word	0x08015e83
 8015e54:	08015e83 	.word	0x08015e83
 8015e58:	08015e65 	.word	0x08015e65
 8015e5c:	08015e6f 	.word	0x08015e6f
 8015e60:	08015e79 	.word	0x08015e79
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8015e64:	7dfb      	ldrb	r3, [r7, #23]
 8015e66:	f023 0301 	bic.w	r3, r3, #1
 8015e6a:	75fb      	strb	r3, [r7, #23]
                break;
 8015e6c:	e00f      	b.n	8015e8e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8015e6e:	7dfb      	ldrb	r3, [r7, #23]
 8015e70:	f023 0302 	bic.w	r3, r3, #2
 8015e74:	75fb      	strb	r3, [r7, #23]
                break;
 8015e76:	e00a      	b.n	8015e8e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8015e78:	7dfb      	ldrb	r3, [r7, #23]
 8015e7a:	f023 0303 	bic.w	r3, r3, #3
 8015e7e:	75fb      	strb	r3, [r7, #23]
                break;
 8015e80:	e005      	b.n	8015e8e <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8015e82:	7dfb      	ldrb	r3, [r7, #23]
 8015e84:	f023 0303 	bic.w	r3, r3, #3
 8015e88:	75fb      	strb	r3, [r7, #23]
                break;
 8015e8a:	e000      	b.n	8015e8e <RegionEU868NewChannelReq+0xae>
                break;
 8015e8c:	bf00      	nop
            }
        }
    }

    return status;
 8015e8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015e92:	4618      	mov	r0, r3
 8015e94:	3718      	adds	r7, #24
 8015e96:	46bd      	mov	sp, r7
 8015e98:	bd80      	pop	{r7, pc}
 8015e9a:	bf00      	nop

08015e9c <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015e9c:	b480      	push	{r7}
 8015e9e:	b083      	sub	sp, #12
 8015ea0:	af00      	add	r7, sp, #0
 8015ea2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8015ea4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	370c      	adds	r7, #12
 8015eac:	46bd      	mov	sp, r7
 8015eae:	bc80      	pop	{r7}
 8015eb0:	4770      	bx	lr
	...

08015eb4 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8015eb4:	b580      	push	{r7, lr}
 8015eb6:	b084      	sub	sp, #16
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015ebc:	2303      	movs	r3, #3
 8015ebe:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	685b      	ldr	r3, [r3, #4]
 8015ec8:	f107 020e 	add.w	r2, r7, #14
 8015ecc:	4611      	mov	r1, r2
 8015ece:	4618      	mov	r0, r3
 8015ed0:	f7ff f836 	bl	8014f40 <VerifyRfFreq>
 8015ed4:	4603      	mov	r3, r0
 8015ed6:	f083 0301 	eor.w	r3, r3, #1
 8015eda:	b2db      	uxtb	r3, r3
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d003      	beq.n	8015ee8 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8015ee0:	7bfb      	ldrb	r3, [r7, #15]
 8015ee2:	f023 0301 	bic.w	r3, r3, #1
 8015ee6:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8015ee8:	4b13      	ldr	r3, [pc, #76]	; (8015f38 <RegionEU868DlChannelReq+0x84>)
 8015eea:	681a      	ldr	r2, [r3, #0]
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	781b      	ldrb	r3, [r3, #0]
 8015ef0:	4619      	mov	r1, r3
 8015ef2:	460b      	mov	r3, r1
 8015ef4:	005b      	lsls	r3, r3, #1
 8015ef6:	440b      	add	r3, r1
 8015ef8:	009b      	lsls	r3, r3, #2
 8015efa:	4413      	add	r3, r2
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d103      	bne.n	8015f0a <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8015f02:	7bfb      	ldrb	r3, [r7, #15]
 8015f04:	f023 0302 	bic.w	r3, r3, #2
 8015f08:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8015f0a:	7bfb      	ldrb	r3, [r7, #15]
 8015f0c:	2b03      	cmp	r3, #3
 8015f0e:	d10d      	bne.n	8015f2c <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8015f10:	4b09      	ldr	r3, [pc, #36]	; (8015f38 <RegionEU868DlChannelReq+0x84>)
 8015f12:	6819      	ldr	r1, [r3, #0]
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	781b      	ldrb	r3, [r3, #0]
 8015f18:	4618      	mov	r0, r3
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	685a      	ldr	r2, [r3, #4]
 8015f1e:	4603      	mov	r3, r0
 8015f20:	005b      	lsls	r3, r3, #1
 8015f22:	4403      	add	r3, r0
 8015f24:	009b      	lsls	r3, r3, #2
 8015f26:	440b      	add	r3, r1
 8015f28:	3304      	adds	r3, #4
 8015f2a:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8015f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015f30:	4618      	mov	r0, r3
 8015f32:	3710      	adds	r7, #16
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bd80      	pop	{r7, pc}
 8015f38:	20001b24 	.word	0x20001b24

08015f3c <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8015f3c:	b480      	push	{r7}
 8015f3e:	b083      	sub	sp, #12
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	4603      	mov	r3, r0
 8015f44:	460a      	mov	r2, r1
 8015f46:	71fb      	strb	r3, [r7, #7]
 8015f48:	4613      	mov	r3, r2
 8015f4a:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8015f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8015f50:	4618      	mov	r0, r3
 8015f52:	370c      	adds	r7, #12
 8015f54:	46bd      	mov	sp, r7
 8015f56:	bc80      	pop	{r7}
 8015f58:	4770      	bx	lr
	...

08015f5c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b09a      	sub	sp, #104	; 0x68
 8015f60:	af02      	add	r7, sp, #8
 8015f62:	60f8      	str	r0, [r7, #12]
 8015f64:	60b9      	str	r1, [r7, #8]
 8015f66:	607a      	str	r2, [r7, #4]
 8015f68:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8015f6a:	2300      	movs	r3, #0
 8015f6c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8015f70:	2300      	movs	r3, #0
 8015f72:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8015f76:	2300      	movs	r3, #0
 8015f78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015f7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015f7e:	2200      	movs	r2, #0
 8015f80:	601a      	str	r2, [r3, #0]
 8015f82:	605a      	str	r2, [r3, #4]
 8015f84:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015f86:	230c      	movs	r3, #12
 8015f88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8015f8c:	2307      	movs	r3, #7
 8015f8e:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8015f90:	4b47      	ldr	r3, [pc, #284]	; (80160b0 <RegionEU868NextChannel+0x154>)
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8015f98:	2201      	movs	r2, #1
 8015f9a:	2100      	movs	r1, #0
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	f7fe fa9b 	bl	80144d8 <RegionCommonCountChannels>
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d10a      	bne.n	8015fbe <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8015fa8:	4b41      	ldr	r3, [pc, #260]	; (80160b0 <RegionEU868NextChannel+0x154>)
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8015fb0:	4b3f      	ldr	r3, [pc, #252]	; (80160b0 <RegionEU868NextChannel+0x154>)
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	f042 0207 	orr.w	r2, r2, #7
 8015fb8:	b292      	uxth	r2, r2
 8015fba:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	7a5b      	ldrb	r3, [r3, #9]
 8015fc2:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015fca:	b2db      	uxtb	r3, r3
 8015fcc:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015fce:	4b38      	ldr	r3, [pc, #224]	; (80160b0 <RegionEU868NextChannel+0x154>)
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8015fd6:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8015fd8:	4b35      	ldr	r3, [pc, #212]	; (80160b0 <RegionEU868NextChannel+0x154>)
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8015fde:	4b35      	ldr	r3, [pc, #212]	; (80160b4 <RegionEU868NextChannel+0x158>)
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8015fe4:	2310      	movs	r3, #16
 8015fe6:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8015fe8:	f107 0312 	add.w	r3, r7, #18
 8015fec:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	685b      	ldr	r3, [r3, #4]
 8015ff8:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	7a9b      	ldrb	r3, [r3, #10]
 8015ffe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8016002:	2306      	movs	r3, #6
 8016004:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8016008:	68fa      	ldr	r2, [r7, #12]
 801600a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801600e:	320c      	adds	r2, #12
 8016010:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016014:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	7d1b      	ldrb	r3, [r3, #20]
 801601c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	8adb      	ldrh	r3, [r3, #22]
 801602a:	4619      	mov	r1, r3
 801602c:	4610      	mov	r0, r2
 801602e:	f7fe fffd 	bl	801502c <GetTimeOnAir>
 8016032:	4603      	mov	r3, r0
 8016034:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8016036:	f107 0314 	add.w	r3, r7, #20
 801603a:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801603c:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8016040:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8016044:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	9301      	str	r3, [sp, #4]
 801604c:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8016050:	9300      	str	r3, [sp, #0]
 8016052:	460b      	mov	r3, r1
 8016054:	6839      	ldr	r1, [r7, #0]
 8016056:	f7fe fe56 	bl	8014d06 <RegionCommonIdentifyChannels>
 801605a:	4603      	mov	r3, r0
 801605c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8016060:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016064:	2b00      	cmp	r3, #0
 8016066:	d10e      	bne.n	8016086 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8016068:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 801606c:	3b01      	subs	r3, #1
 801606e:	4619      	mov	r1, r3
 8016070:	2000      	movs	r0, #0
 8016072:	f000 f985 	bl	8016380 <randr>
 8016076:	4603      	mov	r3, r0
 8016078:	3360      	adds	r3, #96	; 0x60
 801607a:	443b      	add	r3, r7
 801607c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8016080:	68bb      	ldr	r3, [r7, #8]
 8016082:	701a      	strb	r2, [r3, #0]
 8016084:	e00e      	b.n	80160a4 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8016086:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801608a:	2b0c      	cmp	r3, #12
 801608c:	d10a      	bne.n	80160a4 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801608e:	4b08      	ldr	r3, [pc, #32]	; (80160b0 <RegionEU868NextChannel+0x154>)
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8016096:	4b06      	ldr	r3, [pc, #24]	; (80160b0 <RegionEU868NextChannel+0x154>)
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	f042 0207 	orr.w	r2, r2, #7
 801609e:	b292      	uxth	r2, r2
 80160a0:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 80160a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80160a8:	4618      	mov	r0, r3
 80160aa:	3760      	adds	r7, #96	; 0x60
 80160ac:	46bd      	mov	sp, r7
 80160ae:	bd80      	pop	{r7, pc}
 80160b0:	20001b24 	.word	0x20001b24
 80160b4:	20001b20 	.word	0x20001b20

080160b8 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80160b8:	b580      	push	{r7, lr}
 80160ba:	b084      	sub	sp, #16
 80160bc:	af00      	add	r7, sp, #0
 80160be:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80160c0:	2300      	movs	r3, #0
 80160c2:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 80160c4:	2300      	movs	r3, #0
 80160c6:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80160c8:	2300      	movs	r3, #0
 80160ca:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	791b      	ldrb	r3, [r3, #4]
 80160d0:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80160d2:	7b7b      	ldrb	r3, [r7, #13]
 80160d4:	2b02      	cmp	r3, #2
 80160d6:	d801      	bhi.n	80160dc <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80160d8:	2306      	movs	r3, #6
 80160da:	e089      	b.n	80161f0 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80160dc:	7b7b      	ldrb	r3, [r7, #13]
 80160de:	2b0f      	cmp	r3, #15
 80160e0:	d901      	bls.n	80160e6 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80160e2:	2303      	movs	r3, #3
 80160e4:	e084      	b.n	80161f0 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	7a1b      	ldrb	r3, [r3, #8]
 80160ec:	f343 0303 	sbfx	r3, r3, #0, #4
 80160f0:	b25b      	sxtb	r3, r3
 80160f2:	2207      	movs	r2, #7
 80160f4:	2100      	movs	r1, #0
 80160f6:	4618      	mov	r0, r3
 80160f8:	f7fe f99d 	bl	8014436 <RegionCommonValueInRange>
 80160fc:	4603      	mov	r3, r0
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d101      	bne.n	8016106 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8016102:	2301      	movs	r3, #1
 8016104:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	7a1b      	ldrb	r3, [r3, #8]
 801610c:	f343 1303 	sbfx	r3, r3, #4, #4
 8016110:	b25b      	sxtb	r3, r3
 8016112:	2207      	movs	r2, #7
 8016114:	2100      	movs	r1, #0
 8016116:	4618      	mov	r0, r3
 8016118:	f7fe f98d 	bl	8014436 <RegionCommonValueInRange>
 801611c:	4603      	mov	r3, r0
 801611e:	2b00      	cmp	r3, #0
 8016120:	d101      	bne.n	8016126 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8016122:	2301      	movs	r3, #1
 8016124:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	7a1b      	ldrb	r3, [r3, #8]
 801612c:	f343 0303 	sbfx	r3, r3, #0, #4
 8016130:	b25a      	sxtb	r2, r3
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	7a1b      	ldrb	r3, [r3, #8]
 8016138:	f343 1303 	sbfx	r3, r3, #4, #4
 801613c:	b25b      	sxtb	r3, r3
 801613e:	429a      	cmp	r2, r3
 8016140:	dd01      	ble.n	8016146 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8016142:	2301      	movs	r3, #1
 8016144:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8016146:	7bbb      	ldrb	r3, [r7, #14]
 8016148:	f083 0301 	eor.w	r3, r3, #1
 801614c:	b2db      	uxtb	r3, r3
 801614e:	2b00      	cmp	r3, #0
 8016150:	d010      	beq.n	8016174 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	f107 020c 	add.w	r2, r7, #12
 801615c:	4611      	mov	r1, r2
 801615e:	4618      	mov	r0, r3
 8016160:	f7fe feee 	bl	8014f40 <VerifyRfFreq>
 8016164:	4603      	mov	r3, r0
 8016166:	f083 0301 	eor.w	r3, r3, #1
 801616a:	b2db      	uxtb	r3, r3
 801616c:	2b00      	cmp	r3, #0
 801616e:	d001      	beq.n	8016174 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8016170:	2301      	movs	r3, #1
 8016172:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8016174:	7bfb      	ldrb	r3, [r7, #15]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d004      	beq.n	8016184 <RegionEU868ChannelAdd+0xcc>
 801617a:	7bbb      	ldrb	r3, [r7, #14]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d001      	beq.n	8016184 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016180:	2306      	movs	r3, #6
 8016182:	e035      	b.n	80161f0 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8016184:	7bfb      	ldrb	r3, [r7, #15]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d001      	beq.n	801618e <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801618a:	2305      	movs	r3, #5
 801618c:	e030      	b.n	80161f0 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 801618e:	7bbb      	ldrb	r3, [r7, #14]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d001      	beq.n	8016198 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8016194:	2304      	movs	r3, #4
 8016196:	e02b      	b.n	80161f0 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8016198:	4b17      	ldr	r3, [pc, #92]	; (80161f8 <RegionEU868ChannelAdd+0x140>)
 801619a:	6819      	ldr	r1, [r3, #0]
 801619c:	7b7a      	ldrb	r2, [r7, #13]
 801619e:	4613      	mov	r3, r2
 80161a0:	005b      	lsls	r3, r3, #1
 80161a2:	4413      	add	r3, r2
 80161a4:	009b      	lsls	r3, r3, #2
 80161a6:	18c8      	adds	r0, r1, r3
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	681b      	ldr	r3, [r3, #0]
 80161ac:	220c      	movs	r2, #12
 80161ae:	4619      	mov	r1, r3
 80161b0:	f000 f8fd 	bl	80163ae <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80161b4:	4b10      	ldr	r3, [pc, #64]	; (80161f8 <RegionEU868ChannelAdd+0x140>)
 80161b6:	6819      	ldr	r1, [r3, #0]
 80161b8:	7b7a      	ldrb	r2, [r7, #13]
 80161ba:	7b38      	ldrb	r0, [r7, #12]
 80161bc:	4613      	mov	r3, r2
 80161be:	005b      	lsls	r3, r3, #1
 80161c0:	4413      	add	r3, r2
 80161c2:	009b      	lsls	r3, r3, #2
 80161c4:	440b      	add	r3, r1
 80161c6:	3309      	adds	r3, #9
 80161c8:	4602      	mov	r2, r0
 80161ca:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80161cc:	4b0a      	ldr	r3, [pc, #40]	; (80161f8 <RegionEU868ChannelAdd+0x140>)
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 80161d4:	b21a      	sxth	r2, r3
 80161d6:	7b7b      	ldrb	r3, [r7, #13]
 80161d8:	2101      	movs	r1, #1
 80161da:	fa01 f303 	lsl.w	r3, r1, r3
 80161de:	b21b      	sxth	r3, r3
 80161e0:	4313      	orrs	r3, r2
 80161e2:	b21a      	sxth	r2, r3
 80161e4:	4b04      	ldr	r3, [pc, #16]	; (80161f8 <RegionEU868ChannelAdd+0x140>)
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	b292      	uxth	r2, r2
 80161ea:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 80161ee:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80161f0:	4618      	mov	r0, r3
 80161f2:	3710      	adds	r7, #16
 80161f4:	46bd      	mov	sp, r7
 80161f6:	bd80      	pop	{r7, pc}
 80161f8:	20001b24 	.word	0x20001b24

080161fc <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80161fc:	b580      	push	{r7, lr}
 80161fe:	b086      	sub	sp, #24
 8016200:	af00      	add	r7, sp, #0
 8016202:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	781b      	ldrb	r3, [r3, #0]
 8016208:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801620a:	7dfb      	ldrb	r3, [r7, #23]
 801620c:	2b02      	cmp	r3, #2
 801620e:	d801      	bhi.n	8016214 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8016210:	2300      	movs	r3, #0
 8016212:	e016      	b.n	8016242 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8016214:	4b0d      	ldr	r3, [pc, #52]	; (801624c <RegionEU868ChannelsRemove+0x50>)
 8016216:	6819      	ldr	r1, [r3, #0]
 8016218:	7dfa      	ldrb	r2, [r7, #23]
 801621a:	4613      	mov	r3, r2
 801621c:	005b      	lsls	r3, r3, #1
 801621e:	4413      	add	r3, r2
 8016220:	009b      	lsls	r3, r3, #2
 8016222:	440b      	add	r3, r1
 8016224:	461a      	mov	r2, r3
 8016226:	2300      	movs	r3, #0
 8016228:	6013      	str	r3, [r2, #0]
 801622a:	6053      	str	r3, [r2, #4]
 801622c:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801622e:	4b07      	ldr	r3, [pc, #28]	; (801624c <RegionEU868ChannelsRemove+0x50>)
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8016236:	7df9      	ldrb	r1, [r7, #23]
 8016238:	2210      	movs	r2, #16
 801623a:	4618      	mov	r0, r3
 801623c:	f7fe f918 	bl	8014470 <RegionCommonChanDisable>
 8016240:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8016242:	4618      	mov	r0, r3
 8016244:	3718      	adds	r7, #24
 8016246:	46bd      	mov	sp, r7
 8016248:	bd80      	pop	{r7, pc}
 801624a:	bf00      	nop
 801624c:	20001b24 	.word	0x20001b24

08016250 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8016250:	b590      	push	{r4, r7, lr}
 8016252:	b085      	sub	sp, #20
 8016254:	af00      	add	r7, sp, #0
 8016256:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801625e:	4b20      	ldr	r3, [pc, #128]	; (80162e0 <RegionEU868SetContinuousWave+0x90>)
 8016260:	681a      	ldr	r2, [r3, #0]
 8016262:	4b20      	ldr	r3, [pc, #128]	; (80162e4 <RegionEU868SetContinuousWave+0x94>)
 8016264:	6819      	ldr	r1, [r3, #0]
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	781b      	ldrb	r3, [r3, #0]
 801626a:	461c      	mov	r4, r3
 801626c:	4623      	mov	r3, r4
 801626e:	005b      	lsls	r3, r3, #1
 8016270:	4423      	add	r3, r4
 8016272:	009b      	lsls	r3, r3, #2
 8016274:	440b      	add	r3, r1
 8016276:	3309      	adds	r3, #9
 8016278:	781b      	ldrb	r3, [r3, #0]
 801627a:	4619      	mov	r1, r3
 801627c:	460b      	mov	r3, r1
 801627e:	005b      	lsls	r3, r3, #1
 8016280:	440b      	add	r3, r1
 8016282:	00db      	lsls	r3, r3, #3
 8016284:	4413      	add	r3, r2
 8016286:	3302      	adds	r3, #2
 8016288:	f993 3000 	ldrsb.w	r3, [r3]
 801628c:	4619      	mov	r1, r3
 801628e:	f7fe fdda 	bl	8014e46 <RegionCommonLimitTxPower>
 8016292:	4603      	mov	r3, r0
 8016294:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8016296:	2300      	movs	r3, #0
 8016298:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801629a:	4b12      	ldr	r3, [pc, #72]	; (80162e4 <RegionEU868SetContinuousWave+0x94>)
 801629c:	681a      	ldr	r2, [r3, #0]
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	781b      	ldrb	r3, [r3, #0]
 80162a2:	4619      	mov	r1, r3
 80162a4:	460b      	mov	r3, r1
 80162a6:	005b      	lsls	r3, r3, #1
 80162a8:	440b      	add	r3, r1
 80162aa:	009b      	lsls	r3, r3, #2
 80162ac:	4413      	add	r3, r2
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	6859      	ldr	r1, [r3, #4]
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	689a      	ldr	r2, [r3, #8]
 80162ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80162be:	4618      	mov	r0, r3
 80162c0:	f7fe fc32 	bl	8014b28 <RegionCommonComputeTxPower>
 80162c4:	4603      	mov	r3, r0
 80162c6:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80162c8:	4b07      	ldr	r3, [pc, #28]	; (80162e8 <RegionEU868SetContinuousWave+0x98>)
 80162ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80162cc:	687a      	ldr	r2, [r7, #4]
 80162ce:	8992      	ldrh	r2, [r2, #12]
 80162d0:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80162d4:	68b8      	ldr	r0, [r7, #8]
 80162d6:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 80162d8:	bf00      	nop
 80162da:	3714      	adds	r7, #20
 80162dc:	46bd      	mov	sp, r7
 80162de:	bd90      	pop	{r4, r7, pc}
 80162e0:	20001b20 	.word	0x20001b20
 80162e4:	20001b24 	.word	0x20001b24
 80162e8:	0801b9f8 	.word	0x0801b9f8

080162ec <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80162ec:	b480      	push	{r7}
 80162ee:	b085      	sub	sp, #20
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	4603      	mov	r3, r0
 80162f4:	71fb      	strb	r3, [r7, #7]
 80162f6:	460b      	mov	r3, r1
 80162f8:	71bb      	strb	r3, [r7, #6]
 80162fa:	4613      	mov	r3, r2
 80162fc:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 80162fe:	79ba      	ldrb	r2, [r7, #6]
 8016300:	797b      	ldrb	r3, [r7, #5]
 8016302:	1ad3      	subs	r3, r2, r3
 8016304:	b2db      	uxtb	r3, r3
 8016306:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8016308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801630c:	2b00      	cmp	r3, #0
 801630e:	da01      	bge.n	8016314 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8016310:	2300      	movs	r3, #0
 8016312:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8016314:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8016316:	4618      	mov	r0, r3
 8016318:	3714      	adds	r7, #20
 801631a:	46bd      	mov	sp, r7
 801631c:	bc80      	pop	{r7}
 801631e:	4770      	bx	lr

08016320 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8016320:	b480      	push	{r7}
 8016322:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8016324:	4b0d      	ldr	r3, [pc, #52]	; (801635c <rand1+0x3c>)
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	4a0d      	ldr	r2, [pc, #52]	; (8016360 <rand1+0x40>)
 801632a:	fb02 f303 	mul.w	r3, r2, r3
 801632e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016332:	3339      	adds	r3, #57	; 0x39
 8016334:	4a09      	ldr	r2, [pc, #36]	; (801635c <rand1+0x3c>)
 8016336:	6013      	str	r3, [r2, #0]
 8016338:	4b08      	ldr	r3, [pc, #32]	; (801635c <rand1+0x3c>)
 801633a:	681a      	ldr	r2, [r3, #0]
 801633c:	2303      	movs	r3, #3
 801633e:	fba3 1302 	umull	r1, r3, r3, r2
 8016342:	1ad1      	subs	r1, r2, r3
 8016344:	0849      	lsrs	r1, r1, #1
 8016346:	440b      	add	r3, r1
 8016348:	0f99      	lsrs	r1, r3, #30
 801634a:	460b      	mov	r3, r1
 801634c:	07db      	lsls	r3, r3, #31
 801634e:	1a5b      	subs	r3, r3, r1
 8016350:	1ad1      	subs	r1, r2, r3
 8016352:	460b      	mov	r3, r1
}
 8016354:	4618      	mov	r0, r3
 8016356:	46bd      	mov	sp, r7
 8016358:	bc80      	pop	{r7}
 801635a:	4770      	bx	lr
 801635c:	20000134 	.word	0x20000134
 8016360:	41c64e6d 	.word	0x41c64e6d

08016364 <srand1>:

void srand1( uint32_t seed )
{
 8016364:	b480      	push	{r7}
 8016366:	b083      	sub	sp, #12
 8016368:	af00      	add	r7, sp, #0
 801636a:	6078      	str	r0, [r7, #4]
    next = seed;
 801636c:	4a03      	ldr	r2, [pc, #12]	; (801637c <srand1+0x18>)
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	6013      	str	r3, [r2, #0]
}
 8016372:	bf00      	nop
 8016374:	370c      	adds	r7, #12
 8016376:	46bd      	mov	sp, r7
 8016378:	bc80      	pop	{r7}
 801637a:	4770      	bx	lr
 801637c:	20000134 	.word	0x20000134

08016380 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b082      	sub	sp, #8
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
 8016388:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801638a:	f7ff ffc9 	bl	8016320 <rand1>
 801638e:	4602      	mov	r2, r0
 8016390:	6839      	ldr	r1, [r7, #0]
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	1acb      	subs	r3, r1, r3
 8016396:	3301      	adds	r3, #1
 8016398:	fb92 f1f3 	sdiv	r1, r2, r3
 801639c:	fb01 f303 	mul.w	r3, r1, r3
 80163a0:	1ad2      	subs	r2, r2, r3
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	4413      	add	r3, r2
}
 80163a6:	4618      	mov	r0, r3
 80163a8:	3708      	adds	r7, #8
 80163aa:	46bd      	mov	sp, r7
 80163ac:	bd80      	pop	{r7, pc}

080163ae <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80163ae:	b480      	push	{r7}
 80163b0:	b085      	sub	sp, #20
 80163b2:	af00      	add	r7, sp, #0
 80163b4:	60f8      	str	r0, [r7, #12]
 80163b6:	60b9      	str	r1, [r7, #8]
 80163b8:	4613      	mov	r3, r2
 80163ba:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80163bc:	e007      	b.n	80163ce <memcpy1+0x20>
    {
        *dst++ = *src++;
 80163be:	68ba      	ldr	r2, [r7, #8]
 80163c0:	1c53      	adds	r3, r2, #1
 80163c2:	60bb      	str	r3, [r7, #8]
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	1c59      	adds	r1, r3, #1
 80163c8:	60f9      	str	r1, [r7, #12]
 80163ca:	7812      	ldrb	r2, [r2, #0]
 80163cc:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80163ce:	88fb      	ldrh	r3, [r7, #6]
 80163d0:	1e5a      	subs	r2, r3, #1
 80163d2:	80fa      	strh	r2, [r7, #6]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d1f2      	bne.n	80163be <memcpy1+0x10>
    }
}
 80163d8:	bf00      	nop
 80163da:	bf00      	nop
 80163dc:	3714      	adds	r7, #20
 80163de:	46bd      	mov	sp, r7
 80163e0:	bc80      	pop	{r7}
 80163e2:	4770      	bx	lr

080163e4 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80163e4:	b480      	push	{r7}
 80163e6:	b085      	sub	sp, #20
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	60f8      	str	r0, [r7, #12]
 80163ec:	60b9      	str	r1, [r7, #8]
 80163ee:	4613      	mov	r3, r2
 80163f0:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 80163f2:	88fb      	ldrh	r3, [r7, #6]
 80163f4:	3b01      	subs	r3, #1
 80163f6:	68fa      	ldr	r2, [r7, #12]
 80163f8:	4413      	add	r3, r2
 80163fa:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80163fc:	e007      	b.n	801640e <memcpyr+0x2a>
    {
        *dst-- = *src++;
 80163fe:	68ba      	ldr	r2, [r7, #8]
 8016400:	1c53      	adds	r3, r2, #1
 8016402:	60bb      	str	r3, [r7, #8]
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	1e59      	subs	r1, r3, #1
 8016408:	60f9      	str	r1, [r7, #12]
 801640a:	7812      	ldrb	r2, [r2, #0]
 801640c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801640e:	88fb      	ldrh	r3, [r7, #6]
 8016410:	1e5a      	subs	r2, r3, #1
 8016412:	80fa      	strh	r2, [r7, #6]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d1f2      	bne.n	80163fe <memcpyr+0x1a>
    }
}
 8016418:	bf00      	nop
 801641a:	bf00      	nop
 801641c:	3714      	adds	r7, #20
 801641e:	46bd      	mov	sp, r7
 8016420:	bc80      	pop	{r7}
 8016422:	4770      	bx	lr

08016424 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8016424:	b480      	push	{r7}
 8016426:	b083      	sub	sp, #12
 8016428:	af00      	add	r7, sp, #0
 801642a:	6078      	str	r0, [r7, #4]
 801642c:	460b      	mov	r3, r1
 801642e:	70fb      	strb	r3, [r7, #3]
 8016430:	4613      	mov	r3, r2
 8016432:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8016434:	e004      	b.n	8016440 <memset1+0x1c>
    {
        *dst++ = value;
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	1c5a      	adds	r2, r3, #1
 801643a:	607a      	str	r2, [r7, #4]
 801643c:	78fa      	ldrb	r2, [r7, #3]
 801643e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016440:	883b      	ldrh	r3, [r7, #0]
 8016442:	1e5a      	subs	r2, r3, #1
 8016444:	803a      	strh	r2, [r7, #0]
 8016446:	2b00      	cmp	r3, #0
 8016448:	d1f5      	bne.n	8016436 <memset1+0x12>
    }
}
 801644a:	bf00      	nop
 801644c:	bf00      	nop
 801644e:	370c      	adds	r7, #12
 8016450:	46bd      	mov	sp, r7
 8016452:	bc80      	pop	{r7}
 8016454:	4770      	bx	lr
	...

08016458 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8016458:	b480      	push	{r7}
 801645a:	b085      	sub	sp, #20
 801645c:	af00      	add	r7, sp, #0
 801645e:	6078      	str	r0, [r7, #4]
 8016460:	460b      	mov	r3, r1
 8016462:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8016464:	f04f 33ff 	mov.w	r3, #4294967295
 8016468:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	2b00      	cmp	r3, #0
 801646e:	d101      	bne.n	8016474 <Crc32+0x1c>
    {
        return 0;
 8016470:	2300      	movs	r3, #0
 8016472:	e026      	b.n	80164c2 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8016474:	2300      	movs	r3, #0
 8016476:	817b      	strh	r3, [r7, #10]
 8016478:	e01d      	b.n	80164b6 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801647a:	897b      	ldrh	r3, [r7, #10]
 801647c:	687a      	ldr	r2, [r7, #4]
 801647e:	4413      	add	r3, r2
 8016480:	781b      	ldrb	r3, [r3, #0]
 8016482:	461a      	mov	r2, r3
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	4053      	eors	r3, r2
 8016488:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801648a:	2300      	movs	r3, #0
 801648c:	813b      	strh	r3, [r7, #8]
 801648e:	e00c      	b.n	80164aa <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	085a      	lsrs	r2, r3, #1
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	f003 0301 	and.w	r3, r3, #1
 801649a:	425b      	negs	r3, r3
 801649c:	490b      	ldr	r1, [pc, #44]	; (80164cc <Crc32+0x74>)
 801649e:	400b      	ands	r3, r1
 80164a0:	4053      	eors	r3, r2
 80164a2:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80164a4:	893b      	ldrh	r3, [r7, #8]
 80164a6:	3301      	adds	r3, #1
 80164a8:	813b      	strh	r3, [r7, #8]
 80164aa:	893b      	ldrh	r3, [r7, #8]
 80164ac:	2b07      	cmp	r3, #7
 80164ae:	d9ef      	bls.n	8016490 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 80164b0:	897b      	ldrh	r3, [r7, #10]
 80164b2:	3301      	adds	r3, #1
 80164b4:	817b      	strh	r3, [r7, #10]
 80164b6:	897a      	ldrh	r2, [r7, #10]
 80164b8:	887b      	ldrh	r3, [r7, #2]
 80164ba:	429a      	cmp	r2, r3
 80164bc:	d3dd      	bcc.n	801647a <Crc32+0x22>
        }
    }

    return ~crc;
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	43db      	mvns	r3, r3
}
 80164c2:	4618      	mov	r0, r3
 80164c4:	3714      	adds	r7, #20
 80164c6:	46bd      	mov	sp, r7
 80164c8:	bc80      	pop	{r7}
 80164ca:	4770      	bx	lr
 80164cc:	edb88320 	.word	0xedb88320

080164d0 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80164d0:	b580      	push	{r7, lr}
 80164d2:	b084      	sub	sp, #16
 80164d4:	af02      	add	r7, sp, #8
 80164d6:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80164d8:	4a24      	ldr	r2, [pc, #144]	; (801656c <RadioInit+0x9c>)
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80164de:	4b24      	ldr	r3, [pc, #144]	; (8016570 <RadioInit+0xa0>)
 80164e0:	2200      	movs	r2, #0
 80164e2:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80164e4:	4b22      	ldr	r3, [pc, #136]	; (8016570 <RadioInit+0xa0>)
 80164e6:	2200      	movs	r2, #0
 80164e8:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80164ea:	4b21      	ldr	r3, [pc, #132]	; (8016570 <RadioInit+0xa0>)
 80164ec:	2200      	movs	r2, #0
 80164ee:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80164f0:	4b1f      	ldr	r3, [pc, #124]	; (8016570 <RadioInit+0xa0>)
 80164f2:	2200      	movs	r2, #0
 80164f4:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 80164f6:	481f      	ldr	r0, [pc, #124]	; (8016574 <RadioInit+0xa4>)
 80164f8:	f001 ff88 	bl	801840c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80164fc:	4b1c      	ldr	r3, [pc, #112]	; (8016570 <RadioInit+0xa0>)
 80164fe:	2200      	movs	r2, #0
 8016500:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8016502:	4b1b      	ldr	r3, [pc, #108]	; (8016570 <RadioInit+0xa0>)
 8016504:	2200      	movs	r2, #0
 8016506:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8016508:	f002 fa16 	bl	8018938 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801650c:	2100      	movs	r1, #0
 801650e:	2000      	movs	r0, #0
 8016510:	f002 fdde 	bl	80190d0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8016514:	2204      	movs	r2, #4
 8016516:	2100      	movs	r1, #0
 8016518:	2001      	movs	r0, #1
 801651a:	f002 fb9b 	bl	8018c54 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801651e:	2300      	movs	r3, #0
 8016520:	2200      	movs	r2, #0
 8016522:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016526:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801652a:	f002 facb 	bl	8018ac4 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 801652e:	f000 fe83 	bl	8017238 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8016532:	2300      	movs	r3, #0
 8016534:	9300      	str	r3, [sp, #0]
 8016536:	4b10      	ldr	r3, [pc, #64]	; (8016578 <RadioInit+0xa8>)
 8016538:	2200      	movs	r2, #0
 801653a:	f04f 31ff 	mov.w	r1, #4294967295
 801653e:	480f      	ldr	r0, [pc, #60]	; (801657c <RadioInit+0xac>)
 8016540:	f003 ffdc 	bl	801a4fc <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8016544:	2300      	movs	r3, #0
 8016546:	9300      	str	r3, [sp, #0]
 8016548:	4b0d      	ldr	r3, [pc, #52]	; (8016580 <RadioInit+0xb0>)
 801654a:	2200      	movs	r2, #0
 801654c:	f04f 31ff 	mov.w	r1, #4294967295
 8016550:	480c      	ldr	r0, [pc, #48]	; (8016584 <RadioInit+0xb4>)
 8016552:	f003 ffd3 	bl	801a4fc <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8016556:	4809      	ldr	r0, [pc, #36]	; (801657c <RadioInit+0xac>)
 8016558:	f004 f874 	bl	801a644 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801655c:	4809      	ldr	r0, [pc, #36]	; (8016584 <RadioInit+0xb4>)
 801655e:	f004 f871 	bl	801a644 <UTIL_TIMER_Stop>
}
 8016562:	bf00      	nop
 8016564:	3708      	adds	r7, #8
 8016566:	46bd      	mov	sp, r7
 8016568:	bd80      	pop	{r7, pc}
 801656a:	bf00      	nop
 801656c:	20001c28 	.word	0x20001c28
 8016570:	20001c2c 	.word	0x20001c2c
 8016574:	08017625 	.word	0x08017625
 8016578:	080175ad 	.word	0x080175ad
 801657c:	20001c88 	.word	0x20001c88
 8016580:	080175c1 	.word	0x080175c1
 8016584:	20001ca0 	.word	0x20001ca0

08016588 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8016588:	b580      	push	{r7, lr}
 801658a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801658c:	f001 ff80 	bl	8018490 <SUBGRF_GetOperatingMode>
 8016590:	4603      	mov	r3, r0
 8016592:	2b07      	cmp	r3, #7
 8016594:	d00a      	beq.n	80165ac <RadioGetStatus+0x24>
 8016596:	2b07      	cmp	r3, #7
 8016598:	dc0a      	bgt.n	80165b0 <RadioGetStatus+0x28>
 801659a:	2b04      	cmp	r3, #4
 801659c:	d002      	beq.n	80165a4 <RadioGetStatus+0x1c>
 801659e:	2b05      	cmp	r3, #5
 80165a0:	d002      	beq.n	80165a8 <RadioGetStatus+0x20>
 80165a2:	e005      	b.n	80165b0 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80165a4:	2302      	movs	r3, #2
 80165a6:	e004      	b.n	80165b2 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80165a8:	2301      	movs	r3, #1
 80165aa:	e002      	b.n	80165b2 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80165ac:	2303      	movs	r3, #3
 80165ae:	e000      	b.n	80165b2 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80165b0:	2300      	movs	r3, #0
    }
}
 80165b2:	4618      	mov	r0, r3
 80165b4:	bd80      	pop	{r7, pc}
	...

080165b8 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b082      	sub	sp, #8
 80165bc:	af00      	add	r7, sp, #0
 80165be:	4603      	mov	r3, r0
 80165c0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80165c2:	4a2a      	ldr	r2, [pc, #168]	; (801666c <RadioSetModem+0xb4>)
 80165c4:	79fb      	ldrb	r3, [r7, #7]
 80165c6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80165c8:	79fb      	ldrb	r3, [r7, #7]
 80165ca:	4618      	mov	r0, r3
 80165cc:	f003 f943 	bl	8019856 <RFW_SetRadioModem>
    switch( modem )
 80165d0:	79fb      	ldrb	r3, [r7, #7]
 80165d2:	2b05      	cmp	r3, #5
 80165d4:	d80e      	bhi.n	80165f4 <RadioSetModem+0x3c>
 80165d6:	a201      	add	r2, pc, #4	; (adr r2, 80165dc <RadioSetModem+0x24>)
 80165d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165dc:	08016603 	.word	0x08016603
 80165e0:	08016611 	.word	0x08016611
 80165e4:	080165f5 	.word	0x080165f5
 80165e8:	08016637 	.word	0x08016637
 80165ec:	08016645 	.word	0x08016645
 80165f0:	08016653 	.word	0x08016653
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80165f4:	2003      	movs	r0, #3
 80165f6:	f002 fb07 	bl	8018c08 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80165fa:	4b1c      	ldr	r3, [pc, #112]	; (801666c <RadioSetModem+0xb4>)
 80165fc:	2200      	movs	r2, #0
 80165fe:	735a      	strb	r2, [r3, #13]
        break;
 8016600:	e02f      	b.n	8016662 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016602:	2000      	movs	r0, #0
 8016604:	f002 fb00 	bl	8018c08 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016608:	4b18      	ldr	r3, [pc, #96]	; (801666c <RadioSetModem+0xb4>)
 801660a:	2200      	movs	r2, #0
 801660c:	735a      	strb	r2, [r3, #13]
        break;
 801660e:	e028      	b.n	8016662 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8016610:	2001      	movs	r0, #1
 8016612:	f002 faf9 	bl	8018c08 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8016616:	4b15      	ldr	r3, [pc, #84]	; (801666c <RadioSetModem+0xb4>)
 8016618:	7b5a      	ldrb	r2, [r3, #13]
 801661a:	4b14      	ldr	r3, [pc, #80]	; (801666c <RadioSetModem+0xb4>)
 801661c:	7b1b      	ldrb	r3, [r3, #12]
 801661e:	429a      	cmp	r2, r3
 8016620:	d01e      	beq.n	8016660 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8016622:	4b12      	ldr	r3, [pc, #72]	; (801666c <RadioSetModem+0xb4>)
 8016624:	7b1a      	ldrb	r2, [r3, #12]
 8016626:	4b11      	ldr	r3, [pc, #68]	; (801666c <RadioSetModem+0xb4>)
 8016628:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801662a:	4b10      	ldr	r3, [pc, #64]	; (801666c <RadioSetModem+0xb4>)
 801662c:	7b5b      	ldrb	r3, [r3, #13]
 801662e:	4618      	mov	r0, r3
 8016630:	f000 ff86 	bl	8017540 <RadioSetPublicNetwork>
        }
        break;
 8016634:	e014      	b.n	8016660 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016636:	2002      	movs	r0, #2
 8016638:	f002 fae6 	bl	8018c08 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801663c:	4b0b      	ldr	r3, [pc, #44]	; (801666c <RadioSetModem+0xb4>)
 801663e:	2200      	movs	r2, #0
 8016640:	735a      	strb	r2, [r3, #13]
        break;
 8016642:	e00e      	b.n	8016662 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016644:	2002      	movs	r0, #2
 8016646:	f002 fadf 	bl	8018c08 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801664a:	4b08      	ldr	r3, [pc, #32]	; (801666c <RadioSetModem+0xb4>)
 801664c:	2200      	movs	r2, #0
 801664e:	735a      	strb	r2, [r3, #13]
        break;
 8016650:	e007      	b.n	8016662 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016652:	2000      	movs	r0, #0
 8016654:	f002 fad8 	bl	8018c08 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016658:	4b04      	ldr	r3, [pc, #16]	; (801666c <RadioSetModem+0xb4>)
 801665a:	2200      	movs	r2, #0
 801665c:	735a      	strb	r2, [r3, #13]
        break;
 801665e:	e000      	b.n	8016662 <RadioSetModem+0xaa>
        break;
 8016660:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8016662:	bf00      	nop
 8016664:	3708      	adds	r7, #8
 8016666:	46bd      	mov	sp, r7
 8016668:	bd80      	pop	{r7, pc}
 801666a:	bf00      	nop
 801666c:	20001c2c 	.word	0x20001c2c

08016670 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8016670:	b580      	push	{r7, lr}
 8016672:	b082      	sub	sp, #8
 8016674:	af00      	add	r7, sp, #0
 8016676:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8016678:	6878      	ldr	r0, [r7, #4]
 801667a:	f002 fa7f 	bl	8018b7c <SUBGRF_SetRfFrequency>
}
 801667e:	bf00      	nop
 8016680:	3708      	adds	r7, #8
 8016682:	46bd      	mov	sp, r7
 8016684:	bd80      	pop	{r7, pc}

08016686 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8016686:	b580      	push	{r7, lr}
 8016688:	b090      	sub	sp, #64	; 0x40
 801668a:	af0a      	add	r7, sp, #40	; 0x28
 801668c:	60f8      	str	r0, [r7, #12]
 801668e:	60b9      	str	r1, [r7, #8]
 8016690:	603b      	str	r3, [r7, #0]
 8016692:	4613      	mov	r3, r2
 8016694:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8016696:	2301      	movs	r3, #1
 8016698:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801669a:	2300      	movs	r3, #0
 801669c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801669e:	2300      	movs	r3, #0
 80166a0:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 80166a2:	f000 fddc 	bl	801725e <RadioStandby>

    RadioSetModem( MODEM_FSK );
 80166a6:	2000      	movs	r0, #0
 80166a8:	f7ff ff86 	bl	80165b8 <RadioSetModem>

    RadioSetChannel( freq );
 80166ac:	68f8      	ldr	r0, [r7, #12]
 80166ae:	f7ff ffdf 	bl	8016670 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80166b2:	2301      	movs	r3, #1
 80166b4:	9309      	str	r3, [sp, #36]	; 0x24
 80166b6:	2300      	movs	r3, #0
 80166b8:	9308      	str	r3, [sp, #32]
 80166ba:	2300      	movs	r3, #0
 80166bc:	9307      	str	r3, [sp, #28]
 80166be:	2300      	movs	r3, #0
 80166c0:	9306      	str	r3, [sp, #24]
 80166c2:	2300      	movs	r3, #0
 80166c4:	9305      	str	r3, [sp, #20]
 80166c6:	2300      	movs	r3, #0
 80166c8:	9304      	str	r3, [sp, #16]
 80166ca:	2300      	movs	r3, #0
 80166cc:	9303      	str	r3, [sp, #12]
 80166ce:	2300      	movs	r3, #0
 80166d0:	9302      	str	r3, [sp, #8]
 80166d2:	2303      	movs	r3, #3
 80166d4:	9301      	str	r3, [sp, #4]
 80166d6:	68bb      	ldr	r3, [r7, #8]
 80166d8:	9300      	str	r3, [sp, #0]
 80166da:	2300      	movs	r3, #0
 80166dc:	f44f 7216 	mov.w	r2, #600	; 0x258
 80166e0:	68b9      	ldr	r1, [r7, #8]
 80166e2:	2000      	movs	r0, #0
 80166e4:	f000 f83c 	bl	8016760 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80166e8:	2000      	movs	r0, #0
 80166ea:	f000 fdbf 	bl	801726c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80166ee:	f000 ff55 	bl	801759c <RadioGetWakeupTime>
 80166f2:	4603      	mov	r3, r0
 80166f4:	4618      	mov	r0, r3
 80166f6:	f7eb fb33 	bl	8001d60 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80166fa:	f004 f8bd 	bl	801a878 <UTIL_TIMER_GetCurrentTime>
 80166fe:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016700:	e00d      	b.n	801671e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8016702:	2000      	movs	r0, #0
 8016704:	f000 fe9a 	bl	801743c <RadioRssi>
 8016708:	4603      	mov	r3, r0
 801670a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801670c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8016710:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016714:	429a      	cmp	r2, r3
 8016716:	dd02      	ble.n	801671e <RadioIsChannelFree+0x98>
        {
            status = false;
 8016718:	2300      	movs	r3, #0
 801671a:	75fb      	strb	r3, [r7, #23]
            break;
 801671c:	e006      	b.n	801672c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801671e:	6938      	ldr	r0, [r7, #16]
 8016720:	f004 f8bc 	bl	801a89c <UTIL_TIMER_GetElapsedTime>
 8016724:	4602      	mov	r2, r0
 8016726:	683b      	ldr	r3, [r7, #0]
 8016728:	4293      	cmp	r3, r2
 801672a:	d8ea      	bhi.n	8016702 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 801672c:	f000 fd97 	bl	801725e <RadioStandby>

    return status;
 8016730:	7dfb      	ldrb	r3, [r7, #23]
}
 8016732:	4618      	mov	r0, r3
 8016734:	3718      	adds	r7, #24
 8016736:	46bd      	mov	sp, r7
 8016738:	bd80      	pop	{r7, pc}

0801673a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801673a:	b580      	push	{r7, lr}
 801673c:	b082      	sub	sp, #8
 801673e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8016740:	2300      	movs	r3, #0
 8016742:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016744:	2300      	movs	r3, #0
 8016746:	2200      	movs	r2, #0
 8016748:	2100      	movs	r1, #0
 801674a:	2000      	movs	r0, #0
 801674c:	f002 f9ba 	bl	8018ac4 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8016750:	f001 ff6f 	bl	8018632 <SUBGRF_GetRandom>
 8016754:	6078      	str	r0, [r7, #4]

    return rnd;
 8016756:	687b      	ldr	r3, [r7, #4]
}
 8016758:	4618      	mov	r0, r3
 801675a:	3708      	adds	r7, #8
 801675c:	46bd      	mov	sp, r7
 801675e:	bd80      	pop	{r7, pc}

08016760 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8016760:	b580      	push	{r7, lr}
 8016762:	b08a      	sub	sp, #40	; 0x28
 8016764:	af00      	add	r7, sp, #0
 8016766:	60b9      	str	r1, [r7, #8]
 8016768:	607a      	str	r2, [r7, #4]
 801676a:	461a      	mov	r2, r3
 801676c:	4603      	mov	r3, r0
 801676e:	73fb      	strb	r3, [r7, #15]
 8016770:	4613      	mov	r3, r2
 8016772:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8016774:	4ab9      	ldr	r2, [pc, #740]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 8016776:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801677a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801677c:	f003 f829 	bl	80197d2 <RFW_DeInit>
    if( rxContinuous == true )
 8016780:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016784:	2b00      	cmp	r3, #0
 8016786:	d001      	beq.n	801678c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8016788:	2300      	movs	r3, #0
 801678a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801678c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016790:	2b00      	cmp	r3, #0
 8016792:	d004      	beq.n	801679e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8016794:	4ab2      	ldr	r2, [pc, #712]	; (8016a60 <RadioSetRxConfig+0x300>)
 8016796:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801679a:	7013      	strb	r3, [r2, #0]
 801679c:	e002      	b.n	80167a4 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801679e:	4bb0      	ldr	r3, [pc, #704]	; (8016a60 <RadioSetRxConfig+0x300>)
 80167a0:	22ff      	movs	r2, #255	; 0xff
 80167a2:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80167a4:	7bfb      	ldrb	r3, [r7, #15]
 80167a6:	2b05      	cmp	r3, #5
 80167a8:	d009      	beq.n	80167be <RadioSetRxConfig+0x5e>
 80167aa:	2b05      	cmp	r3, #5
 80167ac:	f300 81ca 	bgt.w	8016b44 <RadioSetRxConfig+0x3e4>
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	f000 80bf 	beq.w	8016934 <RadioSetRxConfig+0x1d4>
 80167b6:	2b01      	cmp	r3, #1
 80167b8:	f000 8124 	beq.w	8016a04 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80167bc:	e1c2      	b.n	8016b44 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80167be:	2001      	movs	r0, #1
 80167c0:	f002 f87c 	bl	80188bc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80167c4:	4ba5      	ldr	r3, [pc, #660]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 80167c6:	2200      	movs	r2, #0
 80167c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80167cc:	4aa3      	ldr	r2, [pc, #652]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80167d2:	4ba2      	ldr	r3, [pc, #648]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 80167d4:	2209      	movs	r2, #9
 80167d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80167da:	4ba0      	ldr	r3, [pc, #640]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 80167dc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80167e0:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80167e2:	68b8      	ldr	r0, [r7, #8]
 80167e4:	f002 ff28 	bl	8019638 <SUBGRF_GetFskBandwidthRegValue>
 80167e8:	4603      	mov	r3, r0
 80167ea:	461a      	mov	r2, r3
 80167ec:	4b9b      	ldr	r3, [pc, #620]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 80167ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80167f2:	4b9a      	ldr	r3, [pc, #616]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 80167f4:	2200      	movs	r2, #0
 80167f6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80167f8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80167fa:	00db      	lsls	r3, r3, #3
 80167fc:	b29a      	uxth	r2, r3
 80167fe:	4b97      	ldr	r3, [pc, #604]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 8016800:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8016802:	4b96      	ldr	r3, [pc, #600]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 8016804:	2200      	movs	r2, #0
 8016806:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8016808:	4b94      	ldr	r3, [pc, #592]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 801680a:	2210      	movs	r2, #16
 801680c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801680e:	4b93      	ldr	r3, [pc, #588]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 8016810:	2200      	movs	r2, #0
 8016812:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8016814:	4b91      	ldr	r3, [pc, #580]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 8016816:	2200      	movs	r2, #0
 8016818:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801681a:	4b91      	ldr	r3, [pc, #580]	; (8016a60 <RadioSetRxConfig+0x300>)
 801681c:	781a      	ldrb	r2, [r3, #0]
 801681e:	4b8f      	ldr	r3, [pc, #572]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 8016820:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016822:	4b8e      	ldr	r3, [pc, #568]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 8016824:	2201      	movs	r2, #1
 8016826:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8016828:	4b8c      	ldr	r3, [pc, #560]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 801682a:	2200      	movs	r2, #0
 801682c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801682e:	2005      	movs	r0, #5
 8016830:	f7ff fec2 	bl	80165b8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016834:	488b      	ldr	r0, [pc, #556]	; (8016a64 <RadioSetRxConfig+0x304>)
 8016836:	f002 fadb 	bl	8018df0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801683a:	488b      	ldr	r0, [pc, #556]	; (8016a68 <RadioSetRxConfig+0x308>)
 801683c:	f002 fbaa 	bl	8018f94 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016840:	4a8a      	ldr	r2, [pc, #552]	; (8016a6c <RadioSetRxConfig+0x30c>)
 8016842:	f107 031c 	add.w	r3, r7, #28
 8016846:	e892 0003 	ldmia.w	r2, {r0, r1}
 801684a:	e883 0003 	stmia.w	r3, {r0, r1}
 801684e:	f107 031c 	add.w	r3, r7, #28
 8016852:	4618      	mov	r0, r3
 8016854:	f001 fe6b 	bl	801852e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016858:	f240 10ff 	movw	r0, #511	; 0x1ff
 801685c:	f001 feb6 	bl	80185cc <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8016860:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8016864:	f000 fe09 	bl	801747a <RadioRead>
 8016868:	4603      	mov	r3, r0
 801686a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801686e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016872:	f023 0310 	bic.w	r3, r3, #16
 8016876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801687a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801687e:	4619      	mov	r1, r3
 8016880:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8016884:	f000 fde7 	bl	8017456 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8016888:	2104      	movs	r1, #4
 801688a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801688e:	f000 fde2 	bl	8017456 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8016892:	f640 009b 	movw	r0, #2203	; 0x89b
 8016896:	f000 fdf0 	bl	801747a <RadioRead>
 801689a:	4603      	mov	r3, r0
 801689c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80168a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168a4:	f023 031c 	bic.w	r3, r3, #28
 80168a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80168ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168b0:	f043 0308 	orr.w	r3, r3, #8
 80168b4:	b2db      	uxtb	r3, r3
 80168b6:	4619      	mov	r1, r3
 80168b8:	f640 009b 	movw	r0, #2203	; 0x89b
 80168bc:	f000 fdcb 	bl	8017456 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80168c0:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80168c4:	f000 fdd9 	bl	801747a <RadioRead>
 80168c8:	4603      	mov	r3, r0
 80168ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80168ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168d2:	f023 0318 	bic.w	r3, r3, #24
 80168d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80168da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168de:	f043 0318 	orr.w	r3, r3, #24
 80168e2:	b2db      	uxtb	r3, r3
 80168e4:	4619      	mov	r1, r3
 80168e6:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80168ea:	f000 fdb4 	bl	8017456 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80168ee:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80168f2:	f000 fdc2 	bl	801747a <RadioRead>
 80168f6:	4603      	mov	r3, r0
 80168f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80168fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8016908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801690c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8016910:	b2db      	uxtb	r3, r3
 8016912:	4619      	mov	r1, r3
 8016914:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8016918:	f000 fd9d 	bl	8017456 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801691c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801691e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016922:	fb02 f303 	mul.w	r3, r2, r3
 8016926:	461a      	mov	r2, r3
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	fbb2 f3f3 	udiv	r3, r2, r3
 801692e:	4a4b      	ldr	r2, [pc, #300]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 8016930:	6093      	str	r3, [r2, #8]
            break;
 8016932:	e108      	b.n	8016b46 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016934:	2000      	movs	r0, #0
 8016936:	f001 ffc1 	bl	80188bc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801693a:	4b48      	ldr	r3, [pc, #288]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 801693c:	2200      	movs	r2, #0
 801693e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016942:	4a46      	ldr	r2, [pc, #280]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016948:	4b44      	ldr	r3, [pc, #272]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 801694a:	220b      	movs	r2, #11
 801694c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016950:	68b8      	ldr	r0, [r7, #8]
 8016952:	f002 fe71 	bl	8019638 <SUBGRF_GetFskBandwidthRegValue>
 8016956:	4603      	mov	r3, r0
 8016958:	461a      	mov	r2, r3
 801695a:	4b40      	ldr	r3, [pc, #256]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 801695c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016960:	4b3e      	ldr	r3, [pc, #248]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 8016962:	2200      	movs	r2, #0
 8016964:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016966:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016968:	00db      	lsls	r3, r3, #3
 801696a:	b29a      	uxth	r2, r3
 801696c:	4b3b      	ldr	r3, [pc, #236]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 801696e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016970:	4b3a      	ldr	r3, [pc, #232]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 8016972:	2204      	movs	r2, #4
 8016974:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8016976:	4b39      	ldr	r3, [pc, #228]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 8016978:	2218      	movs	r2, #24
 801697a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801697c:	4b37      	ldr	r3, [pc, #220]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 801697e:	2200      	movs	r2, #0
 8016980:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016982:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016986:	f083 0301 	eor.w	r3, r3, #1
 801698a:	b2db      	uxtb	r3, r3
 801698c:	461a      	mov	r2, r3
 801698e:	4b33      	ldr	r3, [pc, #204]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 8016990:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016992:	4b33      	ldr	r3, [pc, #204]	; (8016a60 <RadioSetRxConfig+0x300>)
 8016994:	781a      	ldrb	r2, [r3, #0]
 8016996:	4b31      	ldr	r3, [pc, #196]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 8016998:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801699a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d003      	beq.n	80169aa <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80169a2:	4b2e      	ldr	r3, [pc, #184]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 80169a4:	22f2      	movs	r2, #242	; 0xf2
 80169a6:	75da      	strb	r2, [r3, #23]
 80169a8:	e002      	b.n	80169b0 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80169aa:	4b2c      	ldr	r3, [pc, #176]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 80169ac:	2201      	movs	r2, #1
 80169ae:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80169b0:	4b2a      	ldr	r3, [pc, #168]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 80169b2:	2201      	movs	r2, #1
 80169b4:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80169b6:	f000 fc52 	bl	801725e <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80169ba:	2000      	movs	r0, #0
 80169bc:	f7ff fdfc 	bl	80165b8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80169c0:	4828      	ldr	r0, [pc, #160]	; (8016a64 <RadioSetRxConfig+0x304>)
 80169c2:	f002 fa15 	bl	8018df0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80169c6:	4828      	ldr	r0, [pc, #160]	; (8016a68 <RadioSetRxConfig+0x308>)
 80169c8:	f002 fae4 	bl	8018f94 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80169cc:	4a28      	ldr	r2, [pc, #160]	; (8016a70 <RadioSetRxConfig+0x310>)
 80169ce:	f107 0314 	add.w	r3, r7, #20
 80169d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80169d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80169da:	f107 0314 	add.w	r3, r7, #20
 80169de:	4618      	mov	r0, r3
 80169e0:	f001 fda5 	bl	801852e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80169e4:	f240 10ff 	movw	r0, #511	; 0x1ff
 80169e8:	f001 fdf0 	bl	80185cc <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80169ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80169ee:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80169f2:	fb02 f303 	mul.w	r3, r2, r3
 80169f6:	461a      	mov	r2, r3
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80169fe:	4a17      	ldr	r2, [pc, #92]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 8016a00:	6093      	str	r3, [r2, #8]
            break;
 8016a02:	e0a0      	b.n	8016b46 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016a04:	2000      	movs	r0, #0
 8016a06:	f001 ff59 	bl	80188bc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016a0a:	4b14      	ldr	r3, [pc, #80]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 8016a0c:	2201      	movs	r2, #1
 8016a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	b2da      	uxtb	r2, r3
 8016a16:	4b11      	ldr	r3, [pc, #68]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 8016a18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8016a1c:	4a15      	ldr	r2, [pc, #84]	; (8016a74 <RadioSetRxConfig+0x314>)
 8016a1e:	68bb      	ldr	r3, [r7, #8]
 8016a20:	4413      	add	r3, r2
 8016a22:	781a      	ldrb	r2, [r3, #0]
 8016a24:	4b0d      	ldr	r3, [pc, #52]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 8016a26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8016a2a:	4a0c      	ldr	r2, [pc, #48]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 8016a2c:	7bbb      	ldrb	r3, [r7, #14]
 8016a2e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016a32:	68bb      	ldr	r3, [r7, #8]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d105      	bne.n	8016a44 <RadioSetRxConfig+0x2e4>
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	2b0b      	cmp	r3, #11
 8016a3c:	d008      	beq.n	8016a50 <RadioSetRxConfig+0x2f0>
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	2b0c      	cmp	r3, #12
 8016a42:	d005      	beq.n	8016a50 <RadioSetRxConfig+0x2f0>
 8016a44:	68bb      	ldr	r3, [r7, #8]
 8016a46:	2b01      	cmp	r3, #1
 8016a48:	d116      	bne.n	8016a78 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	2b0c      	cmp	r3, #12
 8016a4e:	d113      	bne.n	8016a78 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016a50:	4b02      	ldr	r3, [pc, #8]	; (8016a5c <RadioSetRxConfig+0x2fc>)
 8016a52:	2201      	movs	r2, #1
 8016a54:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016a58:	e012      	b.n	8016a80 <RadioSetRxConfig+0x320>
 8016a5a:	bf00      	nop
 8016a5c:	20001c2c 	.word	0x20001c2c
 8016a60:	20000138 	.word	0x20000138
 8016a64:	20001c64 	.word	0x20001c64
 8016a68:	20001c3a 	.word	0x20001c3a
 8016a6c:	0801b498 	.word	0x0801b498
 8016a70:	0801b4a0 	.word	0x0801b4a0
 8016a74:	0801ba7c 	.word	0x0801ba7c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016a78:	4b35      	ldr	r3, [pc, #212]	; (8016b50 <RadioSetRxConfig+0x3f0>)
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016a80:	4b33      	ldr	r3, [pc, #204]	; (8016b50 <RadioSetRxConfig+0x3f0>)
 8016a82:	2201      	movs	r2, #1
 8016a84:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016a86:	4b32      	ldr	r3, [pc, #200]	; (8016b50 <RadioSetRxConfig+0x3f0>)
 8016a88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016a8c:	2b05      	cmp	r3, #5
 8016a8e:	d004      	beq.n	8016a9a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016a90:	4b2f      	ldr	r3, [pc, #188]	; (8016b50 <RadioSetRxConfig+0x3f0>)
 8016a92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016a96:	2b06      	cmp	r3, #6
 8016a98:	d10a      	bne.n	8016ab0 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8016a9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016a9c:	2b0b      	cmp	r3, #11
 8016a9e:	d803      	bhi.n	8016aa8 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016aa0:	4b2b      	ldr	r3, [pc, #172]	; (8016b50 <RadioSetRxConfig+0x3f0>)
 8016aa2:	220c      	movs	r2, #12
 8016aa4:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016aa6:	e006      	b.n	8016ab6 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016aa8:	4a29      	ldr	r2, [pc, #164]	; (8016b50 <RadioSetRxConfig+0x3f0>)
 8016aaa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016aac:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016aae:	e002      	b.n	8016ab6 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016ab0:	4a27      	ldr	r2, [pc, #156]	; (8016b50 <RadioSetRxConfig+0x3f0>)
 8016ab2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016ab4:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016ab6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016aba:	4b25      	ldr	r3, [pc, #148]	; (8016b50 <RadioSetRxConfig+0x3f0>)
 8016abc:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016abe:	4b25      	ldr	r3, [pc, #148]	; (8016b54 <RadioSetRxConfig+0x3f4>)
 8016ac0:	781a      	ldrb	r2, [r3, #0]
 8016ac2:	4b23      	ldr	r3, [pc, #140]	; (8016b50 <RadioSetRxConfig+0x3f0>)
 8016ac4:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016ac6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8016aca:	4b21      	ldr	r3, [pc, #132]	; (8016b50 <RadioSetRxConfig+0x3f0>)
 8016acc:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016ad0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8016ad4:	4b1e      	ldr	r3, [pc, #120]	; (8016b50 <RadioSetRxConfig+0x3f0>)
 8016ad6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8016ada:	f000 fbc0 	bl	801725e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8016ade:	2001      	movs	r0, #1
 8016ae0:	f7ff fd6a 	bl	80165b8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016ae4:	481c      	ldr	r0, [pc, #112]	; (8016b58 <RadioSetRxConfig+0x3f8>)
 8016ae6:	f002 f983 	bl	8018df0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016aea:	481c      	ldr	r0, [pc, #112]	; (8016b5c <RadioSetRxConfig+0x3fc>)
 8016aec:	f002 fa52 	bl	8018f94 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8016af0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016af2:	b2db      	uxtb	r3, r3
 8016af4:	4618      	mov	r0, r3
 8016af6:	f001 fef0 	bl	80188da <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8016afa:	4b15      	ldr	r3, [pc, #84]	; (8016b50 <RadioSetRxConfig+0x3f0>)
 8016afc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016b00:	2b01      	cmp	r3, #1
 8016b02:	d10d      	bne.n	8016b20 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8016b04:	f240 7036 	movw	r0, #1846	; 0x736
 8016b08:	f002 fba0 	bl	801924c <SUBGRF_ReadRegister>
 8016b0c:	4603      	mov	r3, r0
 8016b0e:	f023 0304 	bic.w	r3, r3, #4
 8016b12:	b2db      	uxtb	r3, r3
 8016b14:	4619      	mov	r1, r3
 8016b16:	f240 7036 	movw	r0, #1846	; 0x736
 8016b1a:	f002 fb83 	bl	8019224 <SUBGRF_WriteRegister>
 8016b1e:	e00c      	b.n	8016b3a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8016b20:	f240 7036 	movw	r0, #1846	; 0x736
 8016b24:	f002 fb92 	bl	801924c <SUBGRF_ReadRegister>
 8016b28:	4603      	mov	r3, r0
 8016b2a:	f043 0304 	orr.w	r3, r3, #4
 8016b2e:	b2db      	uxtb	r3, r3
 8016b30:	4619      	mov	r1, r3
 8016b32:	f240 7036 	movw	r0, #1846	; 0x736
 8016b36:	f002 fb75 	bl	8019224 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8016b3a:	4b05      	ldr	r3, [pc, #20]	; (8016b50 <RadioSetRxConfig+0x3f0>)
 8016b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016b40:	609a      	str	r2, [r3, #8]
            break;
 8016b42:	e000      	b.n	8016b46 <RadioSetRxConfig+0x3e6>
            break;
 8016b44:	bf00      	nop
    }
}
 8016b46:	bf00      	nop
 8016b48:	3728      	adds	r7, #40	; 0x28
 8016b4a:	46bd      	mov	sp, r7
 8016b4c:	bd80      	pop	{r7, pc}
 8016b4e:	bf00      	nop
 8016b50:	20001c2c 	.word	0x20001c2c
 8016b54:	20000138 	.word	0x20000138
 8016b58:	20001c64 	.word	0x20001c64
 8016b5c:	20001c3a 	.word	0x20001c3a

08016b60 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b086      	sub	sp, #24
 8016b64:	af00      	add	r7, sp, #0
 8016b66:	60ba      	str	r2, [r7, #8]
 8016b68:	607b      	str	r3, [r7, #4]
 8016b6a:	4603      	mov	r3, r0
 8016b6c:	73fb      	strb	r3, [r7, #15]
 8016b6e:	460b      	mov	r3, r1
 8016b70:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016b72:	f002 fe2e 	bl	80197d2 <RFW_DeInit>
    switch( modem )
 8016b76:	7bfb      	ldrb	r3, [r7, #15]
 8016b78:	2b04      	cmp	r3, #4
 8016b7a:	f000 80c7 	beq.w	8016d0c <RadioSetTxConfig+0x1ac>
 8016b7e:	2b04      	cmp	r3, #4
 8016b80:	f300 80d6 	bgt.w	8016d30 <RadioSetTxConfig+0x1d0>
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d002      	beq.n	8016b8e <RadioSetTxConfig+0x2e>
 8016b88:	2b01      	cmp	r3, #1
 8016b8a:	d059      	beq.n	8016c40 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8016b8c:	e0d0      	b.n	8016d30 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016b8e:	4b74      	ldr	r3, [pc, #464]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016b90:	2200      	movs	r2, #0
 8016b92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016b96:	4a72      	ldr	r2, [pc, #456]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016b98:	6a3b      	ldr	r3, [r7, #32]
 8016b9a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016b9c:	4b70      	ldr	r3, [pc, #448]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016b9e:	220b      	movs	r2, #11
 8016ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016ba4:	6878      	ldr	r0, [r7, #4]
 8016ba6:	f002 fd47 	bl	8019638 <SUBGRF_GetFskBandwidthRegValue>
 8016baa:	4603      	mov	r3, r0
 8016bac:	461a      	mov	r2, r3
 8016bae:	4b6c      	ldr	r3, [pc, #432]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8016bb4:	4a6a      	ldr	r2, [pc, #424]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016bb6:	68bb      	ldr	r3, [r7, #8]
 8016bb8:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016bba:	4b69      	ldr	r3, [pc, #420]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016bbc:	2200      	movs	r2, #0
 8016bbe:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016bc0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016bc2:	00db      	lsls	r3, r3, #3
 8016bc4:	b29a      	uxth	r2, r3
 8016bc6:	4b66      	ldr	r3, [pc, #408]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016bc8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016bca:	4b65      	ldr	r3, [pc, #404]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016bcc:	2204      	movs	r2, #4
 8016bce:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8016bd0:	4b63      	ldr	r3, [pc, #396]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016bd2:	2218      	movs	r2, #24
 8016bd4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016bd6:	4b62      	ldr	r3, [pc, #392]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016bd8:	2200      	movs	r2, #0
 8016bda:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016bdc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016be0:	f083 0301 	eor.w	r3, r3, #1
 8016be4:	b2db      	uxtb	r3, r3
 8016be6:	461a      	mov	r2, r3
 8016be8:	4b5d      	ldr	r3, [pc, #372]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016bea:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8016bec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d003      	beq.n	8016bfc <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016bf4:	4b5a      	ldr	r3, [pc, #360]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016bf6:	22f2      	movs	r2, #242	; 0xf2
 8016bf8:	75da      	strb	r2, [r3, #23]
 8016bfa:	e002      	b.n	8016c02 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016bfc:	4b58      	ldr	r3, [pc, #352]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016bfe:	2201      	movs	r2, #1
 8016c00:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016c02:	4b57      	ldr	r3, [pc, #348]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016c04:	2201      	movs	r2, #1
 8016c06:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016c08:	f000 fb29 	bl	801725e <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8016c0c:	2000      	movs	r0, #0
 8016c0e:	f7ff fcd3 	bl	80165b8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016c12:	4854      	ldr	r0, [pc, #336]	; (8016d64 <RadioSetTxConfig+0x204>)
 8016c14:	f002 f8ec 	bl	8018df0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016c18:	4853      	ldr	r0, [pc, #332]	; (8016d68 <RadioSetTxConfig+0x208>)
 8016c1a:	f002 f9bb 	bl	8018f94 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016c1e:	4a53      	ldr	r2, [pc, #332]	; (8016d6c <RadioSetTxConfig+0x20c>)
 8016c20:	f107 0310 	add.w	r3, r7, #16
 8016c24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016c28:	e883 0003 	stmia.w	r3, {r0, r1}
 8016c2c:	f107 0310 	add.w	r3, r7, #16
 8016c30:	4618      	mov	r0, r3
 8016c32:	f001 fc7c 	bl	801852e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016c36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016c3a:	f001 fcc7 	bl	80185cc <SUBGRF_SetWhiteningSeed>
            break;
 8016c3e:	e078      	b.n	8016d32 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016c40:	4b47      	ldr	r3, [pc, #284]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016c42:	2201      	movs	r2, #1
 8016c44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8016c48:	6a3b      	ldr	r3, [r7, #32]
 8016c4a:	b2da      	uxtb	r2, r3
 8016c4c:	4b44      	ldr	r3, [pc, #272]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8016c52:	4a47      	ldr	r2, [pc, #284]	; (8016d70 <RadioSetTxConfig+0x210>)
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	4413      	add	r3, r2
 8016c58:	781a      	ldrb	r2, [r3, #0]
 8016c5a:	4b41      	ldr	r3, [pc, #260]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016c5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8016c60:	4a3f      	ldr	r2, [pc, #252]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016c62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016c66:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d105      	bne.n	8016c7c <RadioSetTxConfig+0x11c>
 8016c70:	6a3b      	ldr	r3, [r7, #32]
 8016c72:	2b0b      	cmp	r3, #11
 8016c74:	d008      	beq.n	8016c88 <RadioSetTxConfig+0x128>
 8016c76:	6a3b      	ldr	r3, [r7, #32]
 8016c78:	2b0c      	cmp	r3, #12
 8016c7a:	d005      	beq.n	8016c88 <RadioSetTxConfig+0x128>
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	2b01      	cmp	r3, #1
 8016c80:	d107      	bne.n	8016c92 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016c82:	6a3b      	ldr	r3, [r7, #32]
 8016c84:	2b0c      	cmp	r3, #12
 8016c86:	d104      	bne.n	8016c92 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016c88:	4b35      	ldr	r3, [pc, #212]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016c8a:	2201      	movs	r2, #1
 8016c8c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016c90:	e003      	b.n	8016c9a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016c92:	4b33      	ldr	r3, [pc, #204]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016c94:	2200      	movs	r2, #0
 8016c96:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016c9a:	4b31      	ldr	r3, [pc, #196]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016c9c:	2201      	movs	r2, #1
 8016c9e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016ca0:	4b2f      	ldr	r3, [pc, #188]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016ca2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016ca6:	2b05      	cmp	r3, #5
 8016ca8:	d004      	beq.n	8016cb4 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016caa:	4b2d      	ldr	r3, [pc, #180]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016cac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016cb0:	2b06      	cmp	r3, #6
 8016cb2:	d10a      	bne.n	8016cca <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8016cb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016cb6:	2b0b      	cmp	r3, #11
 8016cb8:	d803      	bhi.n	8016cc2 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016cba:	4b29      	ldr	r3, [pc, #164]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016cbc:	220c      	movs	r2, #12
 8016cbe:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016cc0:	e006      	b.n	8016cd0 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016cc2:	4a27      	ldr	r2, [pc, #156]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016cc4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016cc6:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016cc8:	e002      	b.n	8016cd0 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016cca:	4a25      	ldr	r2, [pc, #148]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016ccc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016cce:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016cd0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016cd4:	4b22      	ldr	r3, [pc, #136]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016cd6:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016cd8:	4b26      	ldr	r3, [pc, #152]	; (8016d74 <RadioSetTxConfig+0x214>)
 8016cda:	781a      	ldrb	r2, [r3, #0]
 8016cdc:	4b20      	ldr	r3, [pc, #128]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016cde:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016ce0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8016ce4:	4b1e      	ldr	r3, [pc, #120]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016ce6:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016cea:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016cee:	4b1c      	ldr	r3, [pc, #112]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016cf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8016cf4:	f000 fab3 	bl	801725e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8016cf8:	2001      	movs	r0, #1
 8016cfa:	f7ff fc5d 	bl	80165b8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016cfe:	4819      	ldr	r0, [pc, #100]	; (8016d64 <RadioSetTxConfig+0x204>)
 8016d00:	f002 f876 	bl	8018df0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016d04:	4818      	ldr	r0, [pc, #96]	; (8016d68 <RadioSetTxConfig+0x208>)
 8016d06:	f002 f945 	bl	8018f94 <SUBGRF_SetPacketParams>
            break;
 8016d0a:	e012      	b.n	8016d32 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8016d0c:	2004      	movs	r0, #4
 8016d0e:	f7ff fc53 	bl	80165b8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8016d12:	4b13      	ldr	r3, [pc, #76]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016d14:	2202      	movs	r2, #2
 8016d16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8016d1a:	4a11      	ldr	r2, [pc, #68]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016d1c:	6a3b      	ldr	r3, [r7, #32]
 8016d1e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8016d20:	4b0f      	ldr	r3, [pc, #60]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016d22:	2216      	movs	r2, #22
 8016d24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016d28:	480e      	ldr	r0, [pc, #56]	; (8016d64 <RadioSetTxConfig+0x204>)
 8016d2a:	f002 f861 	bl	8018df0 <SUBGRF_SetModulationParams>
            break;
 8016d2e:	e000      	b.n	8016d32 <RadioSetTxConfig+0x1d2>
            break;
 8016d30:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8016d32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016d36:	4618      	mov	r0, r3
 8016d38:	f002 fb90 	bl	801945c <SUBGRF_SetRfTxPower>
 8016d3c:	4603      	mov	r3, r0
 8016d3e:	461a      	mov	r2, r3
 8016d40:	4b07      	ldr	r3, [pc, #28]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016d42:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8016d46:	4b06      	ldr	r3, [pc, #24]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016d48:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	f002 fd54 	bl	80197fa <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8016d52:	4a03      	ldr	r2, [pc, #12]	; (8016d60 <RadioSetTxConfig+0x200>)
 8016d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016d56:	6053      	str	r3, [r2, #4]
}
 8016d58:	bf00      	nop
 8016d5a:	3718      	adds	r7, #24
 8016d5c:	46bd      	mov	sp, r7
 8016d5e:	bd80      	pop	{r7, pc}
 8016d60:	20001c2c 	.word	0x20001c2c
 8016d64:	20001c64 	.word	0x20001c64
 8016d68:	20001c3a 	.word	0x20001c3a
 8016d6c:	0801b4a0 	.word	0x0801b4a0
 8016d70:	0801ba7c 	.word	0x0801ba7c
 8016d74:	20000138 	.word	0x20000138

08016d78 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8016d78:	b480      	push	{r7}
 8016d7a:	b083      	sub	sp, #12
 8016d7c:	af00      	add	r7, sp, #0
 8016d7e:	6078      	str	r0, [r7, #4]
    return true;
 8016d80:	2301      	movs	r3, #1
}
 8016d82:	4618      	mov	r0, r3
 8016d84:	370c      	adds	r7, #12
 8016d86:	46bd      	mov	sp, r7
 8016d88:	bc80      	pop	{r7}
 8016d8a:	4770      	bx	lr

08016d8c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8016d8c:	b480      	push	{r7}
 8016d8e:	b085      	sub	sp, #20
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	4603      	mov	r3, r0
 8016d94:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8016d96:	2300      	movs	r3, #0
 8016d98:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8016d9a:	79fb      	ldrb	r3, [r7, #7]
 8016d9c:	2b0a      	cmp	r3, #10
 8016d9e:	d83e      	bhi.n	8016e1e <RadioGetLoRaBandwidthInHz+0x92>
 8016da0:	a201      	add	r2, pc, #4	; (adr r2, 8016da8 <RadioGetLoRaBandwidthInHz+0x1c>)
 8016da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016da6:	bf00      	nop
 8016da8:	08016dd5 	.word	0x08016dd5
 8016dac:	08016de5 	.word	0x08016de5
 8016db0:	08016df5 	.word	0x08016df5
 8016db4:	08016e05 	.word	0x08016e05
 8016db8:	08016e0d 	.word	0x08016e0d
 8016dbc:	08016e13 	.word	0x08016e13
 8016dc0:	08016e19 	.word	0x08016e19
 8016dc4:	08016e1f 	.word	0x08016e1f
 8016dc8:	08016ddd 	.word	0x08016ddd
 8016dcc:	08016ded 	.word	0x08016ded
 8016dd0:	08016dfd 	.word	0x08016dfd
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8016dd4:	f641 6384 	movw	r3, #7812	; 0x1e84
 8016dd8:	60fb      	str	r3, [r7, #12]
        break;
 8016dda:	e020      	b.n	8016e1e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8016ddc:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8016de0:	60fb      	str	r3, [r7, #12]
        break;
 8016de2:	e01c      	b.n	8016e1e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8016de4:	f643 5309 	movw	r3, #15625	; 0x3d09
 8016de8:	60fb      	str	r3, [r7, #12]
        break;
 8016dea:	e018      	b.n	8016e1e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8016dec:	f245 1361 	movw	r3, #20833	; 0x5161
 8016df0:	60fb      	str	r3, [r7, #12]
        break;
 8016df2:	e014      	b.n	8016e1e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8016df4:	f647 2312 	movw	r3, #31250	; 0x7a12
 8016df8:	60fb      	str	r3, [r7, #12]
        break;
 8016dfa:	e010      	b.n	8016e1e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8016dfc:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8016e00:	60fb      	str	r3, [r7, #12]
        break;
 8016e02:	e00c      	b.n	8016e1e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8016e04:	f24f 4324 	movw	r3, #62500	; 0xf424
 8016e08:	60fb      	str	r3, [r7, #12]
        break;
 8016e0a:	e008      	b.n	8016e1e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8016e0c:	4b07      	ldr	r3, [pc, #28]	; (8016e2c <RadioGetLoRaBandwidthInHz+0xa0>)
 8016e0e:	60fb      	str	r3, [r7, #12]
        break;
 8016e10:	e005      	b.n	8016e1e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8016e12:	4b07      	ldr	r3, [pc, #28]	; (8016e30 <RadioGetLoRaBandwidthInHz+0xa4>)
 8016e14:	60fb      	str	r3, [r7, #12]
        break;
 8016e16:	e002      	b.n	8016e1e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8016e18:	4b06      	ldr	r3, [pc, #24]	; (8016e34 <RadioGetLoRaBandwidthInHz+0xa8>)
 8016e1a:	60fb      	str	r3, [r7, #12]
        break;
 8016e1c:	bf00      	nop
    }

    return bandwidthInHz;
 8016e1e:	68fb      	ldr	r3, [r7, #12]
}
 8016e20:	4618      	mov	r0, r3
 8016e22:	3714      	adds	r7, #20
 8016e24:	46bd      	mov	sp, r7
 8016e26:	bc80      	pop	{r7}
 8016e28:	4770      	bx	lr
 8016e2a:	bf00      	nop
 8016e2c:	0001e848 	.word	0x0001e848
 8016e30:	0003d090 	.word	0x0003d090
 8016e34:	0007a120 	.word	0x0007a120

08016e38 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8016e38:	b480      	push	{r7}
 8016e3a:	b083      	sub	sp, #12
 8016e3c:	af00      	add	r7, sp, #0
 8016e3e:	6078      	str	r0, [r7, #4]
 8016e40:	4608      	mov	r0, r1
 8016e42:	4611      	mov	r1, r2
 8016e44:	461a      	mov	r2, r3
 8016e46:	4603      	mov	r3, r0
 8016e48:	70fb      	strb	r3, [r7, #3]
 8016e4a:	460b      	mov	r3, r1
 8016e4c:	803b      	strh	r3, [r7, #0]
 8016e4e:	4613      	mov	r3, r2
 8016e50:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8016e52:	883b      	ldrh	r3, [r7, #0]
 8016e54:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016e56:	78ba      	ldrb	r2, [r7, #2]
 8016e58:	f082 0201 	eor.w	r2, r2, #1
 8016e5c:	b2d2      	uxtb	r2, r2
 8016e5e:	2a00      	cmp	r2, #0
 8016e60:	d001      	beq.n	8016e66 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8016e62:	2208      	movs	r2, #8
 8016e64:	e000      	b.n	8016e68 <RadioGetGfskTimeOnAirNumerator+0x30>
 8016e66:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8016e68:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016e6a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8016e6e:	7c3b      	ldrb	r3, [r7, #16]
 8016e70:	7d39      	ldrb	r1, [r7, #20]
 8016e72:	2900      	cmp	r1, #0
 8016e74:	d001      	beq.n	8016e7a <RadioGetGfskTimeOnAirNumerator+0x42>
 8016e76:	2102      	movs	r1, #2
 8016e78:	e000      	b.n	8016e7c <RadioGetGfskTimeOnAirNumerator+0x44>
 8016e7a:	2100      	movs	r1, #0
 8016e7c:	440b      	add	r3, r1
 8016e7e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016e80:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8016e82:	4618      	mov	r0, r3
 8016e84:	370c      	adds	r7, #12
 8016e86:	46bd      	mov	sp, r7
 8016e88:	bc80      	pop	{r7}
 8016e8a:	4770      	bx	lr

08016e8c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8016e8c:	b480      	push	{r7}
 8016e8e:	b08b      	sub	sp, #44	; 0x2c
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	60f8      	str	r0, [r7, #12]
 8016e94:	60b9      	str	r1, [r7, #8]
 8016e96:	4611      	mov	r1, r2
 8016e98:	461a      	mov	r2, r3
 8016e9a:	460b      	mov	r3, r1
 8016e9c:	71fb      	strb	r3, [r7, #7]
 8016e9e:	4613      	mov	r3, r2
 8016ea0:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8016ea2:	79fb      	ldrb	r3, [r7, #7]
 8016ea4:	3304      	adds	r3, #4
 8016ea6:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8016eae:	68bb      	ldr	r3, [r7, #8]
 8016eb0:	2b05      	cmp	r3, #5
 8016eb2:	d002      	beq.n	8016eba <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8016eb4:	68bb      	ldr	r3, [r7, #8]
 8016eb6:	2b06      	cmp	r3, #6
 8016eb8:	d104      	bne.n	8016ec4 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8016eba:	88bb      	ldrh	r3, [r7, #4]
 8016ebc:	2b0b      	cmp	r3, #11
 8016ebe:	d801      	bhi.n	8016ec4 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8016ec0:	230c      	movs	r3, #12
 8016ec2:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d105      	bne.n	8016ed6 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8016eca:	68bb      	ldr	r3, [r7, #8]
 8016ecc:	2b0b      	cmp	r3, #11
 8016ece:	d008      	beq.n	8016ee2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8016ed0:	68bb      	ldr	r3, [r7, #8]
 8016ed2:	2b0c      	cmp	r3, #12
 8016ed4:	d005      	beq.n	8016ee2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8016ed6:	68fb      	ldr	r3, [r7, #12]
 8016ed8:	2b01      	cmp	r3, #1
 8016eda:	d105      	bne.n	8016ee8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016edc:	68bb      	ldr	r3, [r7, #8]
 8016ede:	2b0c      	cmp	r3, #12
 8016ee0:	d102      	bne.n	8016ee8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8016ee2:	2301      	movs	r3, #1
 8016ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016ee8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016eec:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8016eee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016ef2:	2a00      	cmp	r2, #0
 8016ef4:	d001      	beq.n	8016efa <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8016ef6:	2210      	movs	r2, #16
 8016ef8:	e000      	b.n	8016efc <RadioGetLoRaTimeOnAirNumerator+0x70>
 8016efa:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016efc:	4413      	add	r3, r2
 8016efe:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8016f00:	68bb      	ldr	r3, [r7, #8]
 8016f02:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8016f04:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8016f06:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8016f0a:	2a00      	cmp	r2, #0
 8016f0c:	d001      	beq.n	8016f12 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8016f0e:	2200      	movs	r2, #0
 8016f10:	e000      	b.n	8016f14 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8016f12:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8016f14:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016f16:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8016f18:	68bb      	ldr	r3, [r7, #8]
 8016f1a:	2b06      	cmp	r3, #6
 8016f1c:	d803      	bhi.n	8016f26 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8016f1e:	68bb      	ldr	r3, [r7, #8]
 8016f20:	009b      	lsls	r3, r3, #2
 8016f22:	623b      	str	r3, [r7, #32]
 8016f24:	e00e      	b.n	8016f44 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8016f26:	69fb      	ldr	r3, [r7, #28]
 8016f28:	3308      	adds	r3, #8
 8016f2a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8016f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d004      	beq.n	8016f3e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8016f34:	68bb      	ldr	r3, [r7, #8]
 8016f36:	3b02      	subs	r3, #2
 8016f38:	009b      	lsls	r3, r3, #2
 8016f3a:	623b      	str	r3, [r7, #32]
 8016f3c:	e002      	b.n	8016f44 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8016f3e:	68bb      	ldr	r3, [r7, #8]
 8016f40:	009b      	lsls	r3, r3, #2
 8016f42:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8016f44:	69fb      	ldr	r3, [r7, #28]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	da01      	bge.n	8016f4e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8016f4a:	2300      	movs	r3, #0
 8016f4c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8016f4e:	69fa      	ldr	r2, [r7, #28]
 8016f50:	6a3b      	ldr	r3, [r7, #32]
 8016f52:	4413      	add	r3, r2
 8016f54:	1e5a      	subs	r2, r3, #1
 8016f56:	6a3b      	ldr	r3, [r7, #32]
 8016f58:	fb92 f3f3 	sdiv	r3, r2, r3
 8016f5c:	697a      	ldr	r2, [r7, #20]
 8016f5e:	fb03 f202 	mul.w	r2, r3, r2
 8016f62:	88bb      	ldrh	r3, [r7, #4]
 8016f64:	4413      	add	r3, r2
    int32_t intermediate =
 8016f66:	330c      	adds	r3, #12
 8016f68:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8016f6a:	68bb      	ldr	r3, [r7, #8]
 8016f6c:	2b06      	cmp	r3, #6
 8016f6e:	d802      	bhi.n	8016f76 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8016f70:	69bb      	ldr	r3, [r7, #24]
 8016f72:	3302      	adds	r3, #2
 8016f74:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8016f76:	69bb      	ldr	r3, [r7, #24]
 8016f78:	009b      	lsls	r3, r3, #2
 8016f7a:	1c5a      	adds	r2, r3, #1
 8016f7c:	68bb      	ldr	r3, [r7, #8]
 8016f7e:	3b02      	subs	r3, #2
 8016f80:	fa02 f303 	lsl.w	r3, r2, r3
}
 8016f84:	4618      	mov	r0, r3
 8016f86:	372c      	adds	r7, #44	; 0x2c
 8016f88:	46bd      	mov	sp, r7
 8016f8a:	bc80      	pop	{r7}
 8016f8c:	4770      	bx	lr
	...

08016f90 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8016f90:	b580      	push	{r7, lr}
 8016f92:	b08a      	sub	sp, #40	; 0x28
 8016f94:	af04      	add	r7, sp, #16
 8016f96:	60b9      	str	r1, [r7, #8]
 8016f98:	607a      	str	r2, [r7, #4]
 8016f9a:	461a      	mov	r2, r3
 8016f9c:	4603      	mov	r3, r0
 8016f9e:	73fb      	strb	r3, [r7, #15]
 8016fa0:	4613      	mov	r3, r2
 8016fa2:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8016fa4:	2300      	movs	r3, #0
 8016fa6:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8016fa8:	2301      	movs	r3, #1
 8016faa:	613b      	str	r3, [r7, #16]

    switch( modem )
 8016fac:	7bfb      	ldrb	r3, [r7, #15]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d002      	beq.n	8016fb8 <RadioTimeOnAir+0x28>
 8016fb2:	2b01      	cmp	r3, #1
 8016fb4:	d017      	beq.n	8016fe6 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8016fb6:	e035      	b.n	8017024 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8016fb8:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8016fbc:	8c3a      	ldrh	r2, [r7, #32]
 8016fbe:	7bb9      	ldrb	r1, [r7, #14]
 8016fc0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016fc4:	9301      	str	r3, [sp, #4]
 8016fc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016fca:	9300      	str	r3, [sp, #0]
 8016fcc:	4603      	mov	r3, r0
 8016fce:	6878      	ldr	r0, [r7, #4]
 8016fd0:	f7ff ff32 	bl	8016e38 <RadioGetGfskTimeOnAirNumerator>
 8016fd4:	4603      	mov	r3, r0
 8016fd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016fda:	fb02 f303 	mul.w	r3, r2, r3
 8016fde:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	613b      	str	r3, [r7, #16]
        break;
 8016fe4:	e01e      	b.n	8017024 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8016fe6:	8c39      	ldrh	r1, [r7, #32]
 8016fe8:	7bba      	ldrb	r2, [r7, #14]
 8016fea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016fee:	9302      	str	r3, [sp, #8]
 8016ff0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016ff4:	9301      	str	r3, [sp, #4]
 8016ff6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016ffa:	9300      	str	r3, [sp, #0]
 8016ffc:	460b      	mov	r3, r1
 8016ffe:	6879      	ldr	r1, [r7, #4]
 8017000:	68b8      	ldr	r0, [r7, #8]
 8017002:	f7ff ff43 	bl	8016e8c <RadioGetLoRaTimeOnAirNumerator>
 8017006:	4603      	mov	r3, r0
 8017008:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801700c:	fb02 f303 	mul.w	r3, r2, r3
 8017010:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8017012:	4a0a      	ldr	r2, [pc, #40]	; (801703c <RadioTimeOnAir+0xac>)
 8017014:	68bb      	ldr	r3, [r7, #8]
 8017016:	4413      	add	r3, r2
 8017018:	781b      	ldrb	r3, [r3, #0]
 801701a:	4618      	mov	r0, r3
 801701c:	f7ff feb6 	bl	8016d8c <RadioGetLoRaBandwidthInHz>
 8017020:	6138      	str	r0, [r7, #16]
        break;
 8017022:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8017024:	697a      	ldr	r2, [r7, #20]
 8017026:	693b      	ldr	r3, [r7, #16]
 8017028:	4413      	add	r3, r2
 801702a:	1e5a      	subs	r2, r3, #1
 801702c:	693b      	ldr	r3, [r7, #16]
 801702e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017032:	4618      	mov	r0, r3
 8017034:	3718      	adds	r7, #24
 8017036:	46bd      	mov	sp, r7
 8017038:	bd80      	pop	{r7, pc}
 801703a:	bf00      	nop
 801703c:	0801ba7c 	.word	0x0801ba7c

08017040 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8017040:	b580      	push	{r7, lr}
 8017042:	b084      	sub	sp, #16
 8017044:	af00      	add	r7, sp, #0
 8017046:	6078      	str	r0, [r7, #4]
 8017048:	460b      	mov	r3, r1
 801704a:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801704c:	2300      	movs	r3, #0
 801704e:	2200      	movs	r2, #0
 8017050:	f240 2101 	movw	r1, #513	; 0x201
 8017054:	f240 2001 	movw	r0, #513	; 0x201
 8017058:	f001 fd34 	bl	8018ac4 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801705c:	4b71      	ldr	r3, [pc, #452]	; (8017224 <RadioSend+0x1e4>)
 801705e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017062:	2101      	movs	r1, #1
 8017064:	4618      	mov	r0, r3
 8017066:	f002 f9d1 	bl	801940c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801706a:	4b6e      	ldr	r3, [pc, #440]	; (8017224 <RadioSend+0x1e4>)
 801706c:	781b      	ldrb	r3, [r3, #0]
 801706e:	2b01      	cmp	r3, #1
 8017070:	d112      	bne.n	8017098 <RadioSend+0x58>
 8017072:	4b6c      	ldr	r3, [pc, #432]	; (8017224 <RadioSend+0x1e4>)
 8017074:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8017078:	2b06      	cmp	r3, #6
 801707a:	d10d      	bne.n	8017098 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801707c:	f640 0089 	movw	r0, #2185	; 0x889
 8017080:	f002 f8e4 	bl	801924c <SUBGRF_ReadRegister>
 8017084:	4603      	mov	r3, r0
 8017086:	f023 0304 	bic.w	r3, r3, #4
 801708a:	b2db      	uxtb	r3, r3
 801708c:	4619      	mov	r1, r3
 801708e:	f640 0089 	movw	r0, #2185	; 0x889
 8017092:	f002 f8c7 	bl	8019224 <SUBGRF_WriteRegister>
 8017096:	e00c      	b.n	80170b2 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8017098:	f640 0089 	movw	r0, #2185	; 0x889
 801709c:	f002 f8d6 	bl	801924c <SUBGRF_ReadRegister>
 80170a0:	4603      	mov	r3, r0
 80170a2:	f043 0304 	orr.w	r3, r3, #4
 80170a6:	b2db      	uxtb	r3, r3
 80170a8:	4619      	mov	r1, r3
 80170aa:	f640 0089 	movw	r0, #2185	; 0x889
 80170ae:	f002 f8b9 	bl	8019224 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 80170b2:	4b5c      	ldr	r3, [pc, #368]	; (8017224 <RadioSend+0x1e4>)
 80170b4:	781b      	ldrb	r3, [r3, #0]
 80170b6:	2b04      	cmp	r3, #4
 80170b8:	f200 80a7 	bhi.w	801720a <RadioSend+0x1ca>
 80170bc:	a201      	add	r2, pc, #4	; (adr r2, 80170c4 <RadioSend+0x84>)
 80170be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170c2:	bf00      	nop
 80170c4:	080170f3 	.word	0x080170f3
 80170c8:	080170d9 	.word	0x080170d9
 80170cc:	080170f3 	.word	0x080170f3
 80170d0:	08017153 	.word	0x08017153
 80170d4:	08017173 	.word	0x08017173
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80170d8:	4a52      	ldr	r2, [pc, #328]	; (8017224 <RadioSend+0x1e4>)
 80170da:	78fb      	ldrb	r3, [r7, #3]
 80170dc:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80170de:	4852      	ldr	r0, [pc, #328]	; (8017228 <RadioSend+0x1e8>)
 80170e0:	f001 ff58 	bl	8018f94 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80170e4:	78fb      	ldrb	r3, [r7, #3]
 80170e6:	2200      	movs	r2, #0
 80170e8:	4619      	mov	r1, r3
 80170ea:	6878      	ldr	r0, [r7, #4]
 80170ec:	f001 fa0c 	bl	8018508 <SUBGRF_SendPayload>
            break;
 80170f0:	e08c      	b.n	801720c <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80170f2:	f002 fb74 	bl	80197de <RFW_Is_Init>
 80170f6:	4603      	mov	r3, r0
 80170f8:	2b01      	cmp	r3, #1
 80170fa:	d11d      	bne.n	8017138 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80170fc:	f107 020d 	add.w	r2, r7, #13
 8017100:	78fb      	ldrb	r3, [r7, #3]
 8017102:	4619      	mov	r1, r3
 8017104:	6878      	ldr	r0, [r7, #4]
 8017106:	f002 fb82 	bl	801980e <RFW_TransmitInit>
 801710a:	4603      	mov	r3, r0
 801710c:	2b00      	cmp	r3, #0
 801710e:	d10c      	bne.n	801712a <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8017110:	7b7a      	ldrb	r2, [r7, #13]
 8017112:	4b44      	ldr	r3, [pc, #272]	; (8017224 <RadioSend+0x1e4>)
 8017114:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017116:	4844      	ldr	r0, [pc, #272]	; (8017228 <RadioSend+0x1e8>)
 8017118:	f001 ff3c 	bl	8018f94 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 801711c:	7b7b      	ldrb	r3, [r7, #13]
 801711e:	2200      	movs	r2, #0
 8017120:	4619      	mov	r1, r3
 8017122:	6878      	ldr	r0, [r7, #4]
 8017124:	f001 f9f0 	bl	8018508 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8017128:	e070      	b.n	801720c <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 801712a:	4b40      	ldr	r3, [pc, #256]	; (801722c <RadioSend+0x1ec>)
 801712c:	2201      	movs	r2, #1
 801712e:	2100      	movs	r1, #0
 8017130:	2002      	movs	r0, #2
 8017132:	f003 fc91 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
 8017136:	e072      	b.n	801721e <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8017138:	4a3a      	ldr	r2, [pc, #232]	; (8017224 <RadioSend+0x1e4>)
 801713a:	78fb      	ldrb	r3, [r7, #3]
 801713c:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801713e:	483a      	ldr	r0, [pc, #232]	; (8017228 <RadioSend+0x1e8>)
 8017140:	f001 ff28 	bl	8018f94 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8017144:	78fb      	ldrb	r3, [r7, #3]
 8017146:	2200      	movs	r2, #0
 8017148:	4619      	mov	r1, r3
 801714a:	6878      	ldr	r0, [r7, #4]
 801714c:	f001 f9dc 	bl	8018508 <SUBGRF_SendPayload>
            break;
 8017150:	e05c      	b.n	801720c <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017152:	4b34      	ldr	r3, [pc, #208]	; (8017224 <RadioSend+0x1e4>)
 8017154:	2202      	movs	r2, #2
 8017156:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8017158:	4a32      	ldr	r2, [pc, #200]	; (8017224 <RadioSend+0x1e4>)
 801715a:	78fb      	ldrb	r3, [r7, #3]
 801715c:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801715e:	4832      	ldr	r0, [pc, #200]	; (8017228 <RadioSend+0x1e8>)
 8017160:	f001 ff18 	bl	8018f94 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017164:	78fb      	ldrb	r3, [r7, #3]
 8017166:	2200      	movs	r2, #0
 8017168:	4619      	mov	r1, r3
 801716a:	6878      	ldr	r0, [r7, #4]
 801716c:	f001 f9cc 	bl	8018508 <SUBGRF_SendPayload>
            break;
 8017170:	e04c      	b.n	801720c <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8017172:	78fb      	ldrb	r3, [r7, #3]
 8017174:	461a      	mov	r2, r3
 8017176:	6879      	ldr	r1, [r7, #4]
 8017178:	482d      	ldr	r0, [pc, #180]	; (8017230 <RadioSend+0x1f0>)
 801717a:	f000 fcbc 	bl	8017af6 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801717e:	4b29      	ldr	r3, [pc, #164]	; (8017224 <RadioSend+0x1e4>)
 8017180:	2202      	movs	r2, #2
 8017182:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8017184:	78fb      	ldrb	r3, [r7, #3]
 8017186:	3301      	adds	r3, #1
 8017188:	b2da      	uxtb	r2, r3
 801718a:	4b26      	ldr	r3, [pc, #152]	; (8017224 <RadioSend+0x1e4>)
 801718c:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801718e:	4826      	ldr	r0, [pc, #152]	; (8017228 <RadioSend+0x1e8>)
 8017190:	f001 ff00 	bl	8018f94 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8017194:	2100      	movs	r1, #0
 8017196:	20f1      	movs	r0, #241	; 0xf1
 8017198:	f000 f95d 	bl	8017456 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801719c:	2100      	movs	r1, #0
 801719e:	20f0      	movs	r0, #240	; 0xf0
 80171a0:	f000 f959 	bl	8017456 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80171a4:	4b1f      	ldr	r3, [pc, #124]	; (8017224 <RadioSend+0x1e4>)
 80171a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80171a8:	2b64      	cmp	r3, #100	; 0x64
 80171aa:	d108      	bne.n	80171be <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 80171ac:	2170      	movs	r1, #112	; 0x70
 80171ae:	20f3      	movs	r0, #243	; 0xf3
 80171b0:	f000 f951 	bl	8017456 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 80171b4:	211d      	movs	r1, #29
 80171b6:	20f2      	movs	r0, #242	; 0xf2
 80171b8:	f000 f94d 	bl	8017456 <RadioWrite>
 80171bc:	e007      	b.n	80171ce <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 80171be:	21e1      	movs	r1, #225	; 0xe1
 80171c0:	20f3      	movs	r0, #243	; 0xf3
 80171c2:	f000 f948 	bl	8017456 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 80171c6:	2104      	movs	r1, #4
 80171c8:	20f2      	movs	r0, #242	; 0xf2
 80171ca:	f000 f944 	bl	8017456 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80171ce:	78fb      	ldrb	r3, [r7, #3]
 80171d0:	b29b      	uxth	r3, r3
 80171d2:	00db      	lsls	r3, r3, #3
 80171d4:	b29b      	uxth	r3, r3
 80171d6:	3302      	adds	r3, #2
 80171d8:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80171da:	89fb      	ldrh	r3, [r7, #14]
 80171dc:	0a1b      	lsrs	r3, r3, #8
 80171de:	b29b      	uxth	r3, r3
 80171e0:	b2db      	uxtb	r3, r3
 80171e2:	4619      	mov	r1, r3
 80171e4:	20f4      	movs	r0, #244	; 0xf4
 80171e6:	f000 f936 	bl	8017456 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 80171ea:	89fb      	ldrh	r3, [r7, #14]
 80171ec:	b2db      	uxtb	r3, r3
 80171ee:	4619      	mov	r1, r3
 80171f0:	20f5      	movs	r0, #245	; 0xf5
 80171f2:	f000 f930 	bl	8017456 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 80171f6:	78fb      	ldrb	r3, [r7, #3]
 80171f8:	3301      	adds	r3, #1
 80171fa:	b2db      	uxtb	r3, r3
 80171fc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8017200:	4619      	mov	r1, r3
 8017202:	480b      	ldr	r0, [pc, #44]	; (8017230 <RadioSend+0x1f0>)
 8017204:	f001 f980 	bl	8018508 <SUBGRF_SendPayload>
            break;
 8017208:	e000      	b.n	801720c <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801720a:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801720c:	4b05      	ldr	r3, [pc, #20]	; (8017224 <RadioSend+0x1e4>)
 801720e:	685b      	ldr	r3, [r3, #4]
 8017210:	4619      	mov	r1, r3
 8017212:	4808      	ldr	r0, [pc, #32]	; (8017234 <RadioSend+0x1f4>)
 8017214:	f003 fa86 	bl	801a724 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017218:	4806      	ldr	r0, [pc, #24]	; (8017234 <RadioSend+0x1f4>)
 801721a:	f003 f9a5 	bl	801a568 <UTIL_TIMER_Start>
}
 801721e:	3710      	adds	r7, #16
 8017220:	46bd      	mov	sp, r7
 8017222:	bd80      	pop	{r7, pc}
 8017224:	20001c2c 	.word	0x20001c2c
 8017228:	20001c3a 	.word	0x20001c3a
 801722c:	0801b4a8 	.word	0x0801b4a8
 8017230:	20001b28 	.word	0x20001b28
 8017234:	20001c88 	.word	0x20001c88

08017238 <RadioSleep>:

static void RadioSleep( void )
{
 8017238:	b580      	push	{r7, lr}
 801723a:	b082      	sub	sp, #8
 801723c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801723e:	2300      	movs	r3, #0
 8017240:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8017242:	793b      	ldrb	r3, [r7, #4]
 8017244:	f043 0304 	orr.w	r3, r3, #4
 8017248:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801724a:	7938      	ldrb	r0, [r7, #4]
 801724c:	f001 fa38 	bl	80186c0 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8017250:	2002      	movs	r0, #2
 8017252:	f7ea fd85 	bl	8001d60 <HAL_Delay>
}
 8017256:	bf00      	nop
 8017258:	3708      	adds	r7, #8
 801725a:	46bd      	mov	sp, r7
 801725c:	bd80      	pop	{r7, pc}

0801725e <RadioStandby>:

static void RadioStandby( void )
{
 801725e:	b580      	push	{r7, lr}
 8017260:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8017262:	2000      	movs	r0, #0
 8017264:	f001 fa5e 	bl	8018724 <SUBGRF_SetStandby>
}
 8017268:	bf00      	nop
 801726a:	bd80      	pop	{r7, pc}

0801726c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801726c:	b580      	push	{r7, lr}
 801726e:	b082      	sub	sp, #8
 8017270:	af00      	add	r7, sp, #0
 8017272:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 8017274:	f002 fab3 	bl	80197de <RFW_Is_Init>
 8017278:	4603      	mov	r3, r0
 801727a:	2b01      	cmp	r3, #1
 801727c:	d102      	bne.n	8017284 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801727e:	f002 fad6 	bl	801982e <RFW_ReceiveInit>
 8017282:	e007      	b.n	8017294 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017284:	2300      	movs	r3, #0
 8017286:	2200      	movs	r2, #0
 8017288:	f240 2162 	movw	r1, #610	; 0x262
 801728c:	f240 2062 	movw	r0, #610	; 0x262
 8017290:	f001 fc18 	bl	8018ac4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	2b00      	cmp	r3, #0
 8017298:	d006      	beq.n	80172a8 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801729a:	6879      	ldr	r1, [r7, #4]
 801729c:	4811      	ldr	r0, [pc, #68]	; (80172e4 <RadioRx+0x78>)
 801729e:	f003 fa41 	bl	801a724 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80172a2:	4810      	ldr	r0, [pc, #64]	; (80172e4 <RadioRx+0x78>)
 80172a4:	f003 f960 	bl	801a568 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80172a8:	4b0f      	ldr	r3, [pc, #60]	; (80172e8 <RadioRx+0x7c>)
 80172aa:	2200      	movs	r2, #0
 80172ac:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80172ae:	4b0e      	ldr	r3, [pc, #56]	; (80172e8 <RadioRx+0x7c>)
 80172b0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80172b4:	2100      	movs	r1, #0
 80172b6:	4618      	mov	r0, r3
 80172b8:	f002 f8a8 	bl	801940c <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80172bc:	4b0a      	ldr	r3, [pc, #40]	; (80172e8 <RadioRx+0x7c>)
 80172be:	785b      	ldrb	r3, [r3, #1]
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d004      	beq.n	80172ce <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80172c4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80172c8:	f001 fa68 	bl	801879c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 80172cc:	e005      	b.n	80172da <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80172ce:	4b06      	ldr	r3, [pc, #24]	; (80172e8 <RadioRx+0x7c>)
 80172d0:	689b      	ldr	r3, [r3, #8]
 80172d2:	019b      	lsls	r3, r3, #6
 80172d4:	4618      	mov	r0, r3
 80172d6:	f001 fa61 	bl	801879c <SUBGRF_SetRx>
}
 80172da:	bf00      	nop
 80172dc:	3708      	adds	r7, #8
 80172de:	46bd      	mov	sp, r7
 80172e0:	bd80      	pop	{r7, pc}
 80172e2:	bf00      	nop
 80172e4:	20001ca0 	.word	0x20001ca0
 80172e8:	20001c2c 	.word	0x20001c2c

080172ec <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80172ec:	b580      	push	{r7, lr}
 80172ee:	b082      	sub	sp, #8
 80172f0:	af00      	add	r7, sp, #0
 80172f2:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 80172f4:	f002 fa73 	bl	80197de <RFW_Is_Init>
 80172f8:	4603      	mov	r3, r0
 80172fa:	2b01      	cmp	r3, #1
 80172fc:	d102      	bne.n	8017304 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 80172fe:	f002 fa96 	bl	801982e <RFW_ReceiveInit>
 8017302:	e007      	b.n	8017314 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017304:	2300      	movs	r3, #0
 8017306:	2200      	movs	r2, #0
 8017308:	f240 2162 	movw	r1, #610	; 0x262
 801730c:	f240 2062 	movw	r0, #610	; 0x262
 8017310:	f001 fbd8 	bl	8018ac4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	2b00      	cmp	r3, #0
 8017318:	d006      	beq.n	8017328 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801731a:	6879      	ldr	r1, [r7, #4]
 801731c:	4811      	ldr	r0, [pc, #68]	; (8017364 <RadioRxBoosted+0x78>)
 801731e:	f003 fa01 	bl	801a724 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8017322:	4810      	ldr	r0, [pc, #64]	; (8017364 <RadioRxBoosted+0x78>)
 8017324:	f003 f920 	bl	801a568 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017328:	4b0f      	ldr	r3, [pc, #60]	; (8017368 <RadioRxBoosted+0x7c>)
 801732a:	2200      	movs	r2, #0
 801732c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801732e:	4b0e      	ldr	r3, [pc, #56]	; (8017368 <RadioRxBoosted+0x7c>)
 8017330:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017334:	2100      	movs	r1, #0
 8017336:	4618      	mov	r0, r3
 8017338:	f002 f868 	bl	801940c <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801733c:	4b0a      	ldr	r3, [pc, #40]	; (8017368 <RadioRxBoosted+0x7c>)
 801733e:	785b      	ldrb	r3, [r3, #1]
 8017340:	2b00      	cmp	r3, #0
 8017342:	d004      	beq.n	801734e <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8017344:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017348:	f001 fa48 	bl	80187dc <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801734c:	e005      	b.n	801735a <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801734e:	4b06      	ldr	r3, [pc, #24]	; (8017368 <RadioRxBoosted+0x7c>)
 8017350:	689b      	ldr	r3, [r3, #8]
 8017352:	019b      	lsls	r3, r3, #6
 8017354:	4618      	mov	r0, r3
 8017356:	f001 fa41 	bl	80187dc <SUBGRF_SetRxBoosted>
}
 801735a:	bf00      	nop
 801735c:	3708      	adds	r7, #8
 801735e:	46bd      	mov	sp, r7
 8017360:	bd80      	pop	{r7, pc}
 8017362:	bf00      	nop
 8017364:	20001ca0 	.word	0x20001ca0
 8017368:	20001c2c 	.word	0x20001c2c

0801736c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801736c:	b580      	push	{r7, lr}
 801736e:	b082      	sub	sp, #8
 8017370:	af00      	add	r7, sp, #0
 8017372:	6078      	str	r0, [r7, #4]
 8017374:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	005a      	lsls	r2, r3, #1
 801737a:	683b      	ldr	r3, [r7, #0]
 801737c:	4413      	add	r3, r2
 801737e:	4a0c      	ldr	r2, [pc, #48]	; (80173b0 <RadioSetRxDutyCycle+0x44>)
 8017380:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017382:	2300      	movs	r3, #0
 8017384:	2200      	movs	r2, #0
 8017386:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801738a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801738e:	f001 fb99 	bl	8018ac4 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017392:	4b07      	ldr	r3, [pc, #28]	; (80173b0 <RadioSetRxDutyCycle+0x44>)
 8017394:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017398:	2100      	movs	r1, #0
 801739a:	4618      	mov	r0, r3
 801739c:	f002 f836 	bl	801940c <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80173a0:	6839      	ldr	r1, [r7, #0]
 80173a2:	6878      	ldr	r0, [r7, #4]
 80173a4:	f001 fa3e 	bl	8018824 <SUBGRF_SetRxDutyCycle>
}
 80173a8:	bf00      	nop
 80173aa:	3708      	adds	r7, #8
 80173ac:	46bd      	mov	sp, r7
 80173ae:	bd80      	pop	{r7, pc}
 80173b0:	20001c2c 	.word	0x20001c2c

080173b4 <RadioStartCad>:

static void RadioStartCad( void )
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80173b8:	4b09      	ldr	r3, [pc, #36]	; (80173e0 <RadioStartCad+0x2c>)
 80173ba:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80173be:	2100      	movs	r1, #0
 80173c0:	4618      	mov	r0, r3
 80173c2:	f002 f823 	bl	801940c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80173c6:	2300      	movs	r3, #0
 80173c8:	2200      	movs	r2, #0
 80173ca:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80173ce:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80173d2:	f001 fb77 	bl	8018ac4 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80173d6:	f001 fa51 	bl	801887c <SUBGRF_SetCad>
}
 80173da:	bf00      	nop
 80173dc:	bd80      	pop	{r7, pc}
 80173de:	bf00      	nop
 80173e0:	20001c2c 	.word	0x20001c2c

080173e4 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80173e4:	b580      	push	{r7, lr}
 80173e6:	b084      	sub	sp, #16
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	6078      	str	r0, [r7, #4]
 80173ec:	460b      	mov	r3, r1
 80173ee:	70fb      	strb	r3, [r7, #3]
 80173f0:	4613      	mov	r3, r2
 80173f2:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 80173f4:	883b      	ldrh	r3, [r7, #0]
 80173f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80173fa:	fb02 f303 	mul.w	r3, r2, r3
 80173fe:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8017400:	6878      	ldr	r0, [r7, #4]
 8017402:	f001 fbbb 	bl	8018b7c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8017406:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801740a:	4618      	mov	r0, r3
 801740c:	f002 f826 	bl	801945c <SUBGRF_SetRfTxPower>
 8017410:	4603      	mov	r3, r0
 8017412:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8017414:	7afb      	ldrb	r3, [r7, #11]
 8017416:	2101      	movs	r1, #1
 8017418:	4618      	mov	r0, r3
 801741a:	f001 fff7 	bl	801940c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801741e:	f001 fa3b 	bl	8018898 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8017422:	68f9      	ldr	r1, [r7, #12]
 8017424:	4804      	ldr	r0, [pc, #16]	; (8017438 <RadioSetTxContinuousWave+0x54>)
 8017426:	f003 f97d 	bl	801a724 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801742a:	4803      	ldr	r0, [pc, #12]	; (8017438 <RadioSetTxContinuousWave+0x54>)
 801742c:	f003 f89c 	bl	801a568 <UTIL_TIMER_Start>
}
 8017430:	bf00      	nop
 8017432:	3710      	adds	r7, #16
 8017434:	46bd      	mov	sp, r7
 8017436:	bd80      	pop	{r7, pc}
 8017438:	20001c88 	.word	0x20001c88

0801743c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801743c:	b580      	push	{r7, lr}
 801743e:	b082      	sub	sp, #8
 8017440:	af00      	add	r7, sp, #0
 8017442:	4603      	mov	r3, r0
 8017444:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8017446:	f001 fe5a 	bl	80190fe <SUBGRF_GetRssiInst>
 801744a:	4603      	mov	r3, r0
 801744c:	b21b      	sxth	r3, r3
}
 801744e:	4618      	mov	r0, r3
 8017450:	3708      	adds	r7, #8
 8017452:	46bd      	mov	sp, r7
 8017454:	bd80      	pop	{r7, pc}

08017456 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8017456:	b580      	push	{r7, lr}
 8017458:	b082      	sub	sp, #8
 801745a:	af00      	add	r7, sp, #0
 801745c:	4603      	mov	r3, r0
 801745e:	460a      	mov	r2, r1
 8017460:	80fb      	strh	r3, [r7, #6]
 8017462:	4613      	mov	r3, r2
 8017464:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8017466:	797a      	ldrb	r2, [r7, #5]
 8017468:	88fb      	ldrh	r3, [r7, #6]
 801746a:	4611      	mov	r1, r2
 801746c:	4618      	mov	r0, r3
 801746e:	f001 fed9 	bl	8019224 <SUBGRF_WriteRegister>
}
 8017472:	bf00      	nop
 8017474:	3708      	adds	r7, #8
 8017476:	46bd      	mov	sp, r7
 8017478:	bd80      	pop	{r7, pc}

0801747a <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801747a:	b580      	push	{r7, lr}
 801747c:	b082      	sub	sp, #8
 801747e:	af00      	add	r7, sp, #0
 8017480:	4603      	mov	r3, r0
 8017482:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8017484:	88fb      	ldrh	r3, [r7, #6]
 8017486:	4618      	mov	r0, r3
 8017488:	f001 fee0 	bl	801924c <SUBGRF_ReadRegister>
 801748c:	4603      	mov	r3, r0
}
 801748e:	4618      	mov	r0, r3
 8017490:	3708      	adds	r7, #8
 8017492:	46bd      	mov	sp, r7
 8017494:	bd80      	pop	{r7, pc}

08017496 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017496:	b580      	push	{r7, lr}
 8017498:	b082      	sub	sp, #8
 801749a:	af00      	add	r7, sp, #0
 801749c:	4603      	mov	r3, r0
 801749e:	6039      	str	r1, [r7, #0]
 80174a0:	80fb      	strh	r3, [r7, #6]
 80174a2:	4613      	mov	r3, r2
 80174a4:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80174a6:	797b      	ldrb	r3, [r7, #5]
 80174a8:	b29a      	uxth	r2, r3
 80174aa:	88fb      	ldrh	r3, [r7, #6]
 80174ac:	6839      	ldr	r1, [r7, #0]
 80174ae:	4618      	mov	r0, r3
 80174b0:	f001 fee0 	bl	8019274 <SUBGRF_WriteRegisters>
}
 80174b4:	bf00      	nop
 80174b6:	3708      	adds	r7, #8
 80174b8:	46bd      	mov	sp, r7
 80174ba:	bd80      	pop	{r7, pc}

080174bc <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b082      	sub	sp, #8
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	4603      	mov	r3, r0
 80174c4:	6039      	str	r1, [r7, #0]
 80174c6:	80fb      	strh	r3, [r7, #6]
 80174c8:	4613      	mov	r3, r2
 80174ca:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80174cc:	797b      	ldrb	r3, [r7, #5]
 80174ce:	b29a      	uxth	r2, r3
 80174d0:	88fb      	ldrh	r3, [r7, #6]
 80174d2:	6839      	ldr	r1, [r7, #0]
 80174d4:	4618      	mov	r0, r3
 80174d6:	f001 feef 	bl	80192b8 <SUBGRF_ReadRegisters>
}
 80174da:	bf00      	nop
 80174dc:	3708      	adds	r7, #8
 80174de:	46bd      	mov	sp, r7
 80174e0:	bd80      	pop	{r7, pc}
	...

080174e4 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b082      	sub	sp, #8
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	4603      	mov	r3, r0
 80174ec:	460a      	mov	r2, r1
 80174ee:	71fb      	strb	r3, [r7, #7]
 80174f0:	4613      	mov	r3, r2
 80174f2:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80174f4:	79fb      	ldrb	r3, [r7, #7]
 80174f6:	2b01      	cmp	r3, #1
 80174f8:	d10a      	bne.n	8017510 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80174fa:	4a0e      	ldr	r2, [pc, #56]	; (8017534 <RadioSetMaxPayloadLength+0x50>)
 80174fc:	79bb      	ldrb	r3, [r7, #6]
 80174fe:	7013      	strb	r3, [r2, #0]
 8017500:	4b0c      	ldr	r3, [pc, #48]	; (8017534 <RadioSetMaxPayloadLength+0x50>)
 8017502:	781a      	ldrb	r2, [r3, #0]
 8017504:	4b0c      	ldr	r3, [pc, #48]	; (8017538 <RadioSetMaxPayloadLength+0x54>)
 8017506:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017508:	480c      	ldr	r0, [pc, #48]	; (801753c <RadioSetMaxPayloadLength+0x58>)
 801750a:	f001 fd43 	bl	8018f94 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801750e:	e00d      	b.n	801752c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8017510:	4b09      	ldr	r3, [pc, #36]	; (8017538 <RadioSetMaxPayloadLength+0x54>)
 8017512:	7d5b      	ldrb	r3, [r3, #21]
 8017514:	2b01      	cmp	r3, #1
 8017516:	d109      	bne.n	801752c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8017518:	4a06      	ldr	r2, [pc, #24]	; (8017534 <RadioSetMaxPayloadLength+0x50>)
 801751a:	79bb      	ldrb	r3, [r7, #6]
 801751c:	7013      	strb	r3, [r2, #0]
 801751e:	4b05      	ldr	r3, [pc, #20]	; (8017534 <RadioSetMaxPayloadLength+0x50>)
 8017520:	781a      	ldrb	r2, [r3, #0]
 8017522:	4b05      	ldr	r3, [pc, #20]	; (8017538 <RadioSetMaxPayloadLength+0x54>)
 8017524:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017526:	4805      	ldr	r0, [pc, #20]	; (801753c <RadioSetMaxPayloadLength+0x58>)
 8017528:	f001 fd34 	bl	8018f94 <SUBGRF_SetPacketParams>
}
 801752c:	bf00      	nop
 801752e:	3708      	adds	r7, #8
 8017530:	46bd      	mov	sp, r7
 8017532:	bd80      	pop	{r7, pc}
 8017534:	20000138 	.word	0x20000138
 8017538:	20001c2c 	.word	0x20001c2c
 801753c:	20001c3a 	.word	0x20001c3a

08017540 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8017540:	b580      	push	{r7, lr}
 8017542:	b082      	sub	sp, #8
 8017544:	af00      	add	r7, sp, #0
 8017546:	4603      	mov	r3, r0
 8017548:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801754a:	4a13      	ldr	r2, [pc, #76]	; (8017598 <RadioSetPublicNetwork+0x58>)
 801754c:	79fb      	ldrb	r3, [r7, #7]
 801754e:	7313      	strb	r3, [r2, #12]
 8017550:	4b11      	ldr	r3, [pc, #68]	; (8017598 <RadioSetPublicNetwork+0x58>)
 8017552:	7b1a      	ldrb	r2, [r3, #12]
 8017554:	4b10      	ldr	r3, [pc, #64]	; (8017598 <RadioSetPublicNetwork+0x58>)
 8017556:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8017558:	2001      	movs	r0, #1
 801755a:	f7ff f82d 	bl	80165b8 <RadioSetModem>
    if( enable == true )
 801755e:	79fb      	ldrb	r3, [r7, #7]
 8017560:	2b00      	cmp	r3, #0
 8017562:	d00a      	beq.n	801757a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8017564:	2134      	movs	r1, #52	; 0x34
 8017566:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801756a:	f001 fe5b 	bl	8019224 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801756e:	2144      	movs	r1, #68	; 0x44
 8017570:	f240 7041 	movw	r0, #1857	; 0x741
 8017574:	f001 fe56 	bl	8019224 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8017578:	e009      	b.n	801758e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801757a:	2114      	movs	r1, #20
 801757c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8017580:	f001 fe50 	bl	8019224 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8017584:	2124      	movs	r1, #36	; 0x24
 8017586:	f240 7041 	movw	r0, #1857	; 0x741
 801758a:	f001 fe4b 	bl	8019224 <SUBGRF_WriteRegister>
}
 801758e:	bf00      	nop
 8017590:	3708      	adds	r7, #8
 8017592:	46bd      	mov	sp, r7
 8017594:	bd80      	pop	{r7, pc}
 8017596:	bf00      	nop
 8017598:	20001c2c 	.word	0x20001c2c

0801759c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801759c:	b580      	push	{r7, lr}
 801759e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80175a0:	f001 ff90 	bl	80194c4 <SUBGRF_GetRadioWakeUpTime>
 80175a4:	4603      	mov	r3, r0
 80175a6:	3303      	adds	r3, #3
}
 80175a8:	4618      	mov	r0, r3
 80175aa:	bd80      	pop	{r7, pc}

080175ac <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b082      	sub	sp, #8
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80175b4:	f000 f80e 	bl	80175d4 <RadioOnTxTimeoutProcess>
}
 80175b8:	bf00      	nop
 80175ba:	3708      	adds	r7, #8
 80175bc:	46bd      	mov	sp, r7
 80175be:	bd80      	pop	{r7, pc}

080175c0 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80175c0:	b580      	push	{r7, lr}
 80175c2:	b082      	sub	sp, #8
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80175c8:	f000 f818 	bl	80175fc <RadioOnRxTimeoutProcess>
}
 80175cc:	bf00      	nop
 80175ce:	3708      	adds	r7, #8
 80175d0:	46bd      	mov	sp, r7
 80175d2:	bd80      	pop	{r7, pc}

080175d4 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80175d8:	4b07      	ldr	r3, [pc, #28]	; (80175f8 <RadioOnTxTimeoutProcess+0x24>)
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d008      	beq.n	80175f2 <RadioOnTxTimeoutProcess+0x1e>
 80175e0:	4b05      	ldr	r3, [pc, #20]	; (80175f8 <RadioOnTxTimeoutProcess+0x24>)
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	685b      	ldr	r3, [r3, #4]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d003      	beq.n	80175f2 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 80175ea:	4b03      	ldr	r3, [pc, #12]	; (80175f8 <RadioOnTxTimeoutProcess+0x24>)
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	685b      	ldr	r3, [r3, #4]
 80175f0:	4798      	blx	r3
    }
}
 80175f2:	bf00      	nop
 80175f4:	bd80      	pop	{r7, pc}
 80175f6:	bf00      	nop
 80175f8:	20001c28 	.word	0x20001c28

080175fc <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80175fc:	b580      	push	{r7, lr}
 80175fe:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017600:	4b07      	ldr	r3, [pc, #28]	; (8017620 <RadioOnRxTimeoutProcess+0x24>)
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d008      	beq.n	801761a <RadioOnRxTimeoutProcess+0x1e>
 8017608:	4b05      	ldr	r3, [pc, #20]	; (8017620 <RadioOnRxTimeoutProcess+0x24>)
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	68db      	ldr	r3, [r3, #12]
 801760e:	2b00      	cmp	r3, #0
 8017610:	d003      	beq.n	801761a <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8017612:	4b03      	ldr	r3, [pc, #12]	; (8017620 <RadioOnRxTimeoutProcess+0x24>)
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	68db      	ldr	r3, [r3, #12]
 8017618:	4798      	blx	r3
    }
}
 801761a:	bf00      	nop
 801761c:	bd80      	pop	{r7, pc}
 801761e:	bf00      	nop
 8017620:	20001c28 	.word	0x20001c28

08017624 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8017624:	b580      	push	{r7, lr}
 8017626:	b082      	sub	sp, #8
 8017628:	af00      	add	r7, sp, #0
 801762a:	4603      	mov	r3, r0
 801762c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801762e:	4a05      	ldr	r2, [pc, #20]	; (8017644 <RadioOnDioIrq+0x20>)
 8017630:	88fb      	ldrh	r3, [r7, #6]
 8017632:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8017636:	f000 f807 	bl	8017648 <RadioIrqProcess>
}
 801763a:	bf00      	nop
 801763c:	3708      	adds	r7, #8
 801763e:	46bd      	mov	sp, r7
 8017640:	bd80      	pop	{r7, pc}
 8017642:	bf00      	nop
 8017644:	20001c2c 	.word	0x20001c2c

08017648 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8017648:	b590      	push	{r4, r7, lr}
 801764a:	b083      	sub	sp, #12
 801764c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801764e:	2300      	movs	r3, #0
 8017650:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8017652:	2300      	movs	r3, #0
 8017654:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8017656:	4ba8      	ldr	r3, [pc, #672]	; (80178f8 <RadioIrqProcess+0x2b0>)
 8017658:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801765c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017660:	f000 810c 	beq.w	801787c <RadioIrqProcess+0x234>
 8017664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017668:	f300 81e8 	bgt.w	8017a3c <RadioIrqProcess+0x3f4>
 801766c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017670:	f000 80f0 	beq.w	8017854 <RadioIrqProcess+0x20c>
 8017674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017678:	f300 81e0 	bgt.w	8017a3c <RadioIrqProcess+0x3f4>
 801767c:	2b80      	cmp	r3, #128	; 0x80
 801767e:	f000 80d5 	beq.w	801782c <RadioIrqProcess+0x1e4>
 8017682:	2b80      	cmp	r3, #128	; 0x80
 8017684:	f300 81da 	bgt.w	8017a3c <RadioIrqProcess+0x3f4>
 8017688:	2b20      	cmp	r3, #32
 801768a:	dc49      	bgt.n	8017720 <RadioIrqProcess+0xd8>
 801768c:	2b00      	cmp	r3, #0
 801768e:	f340 81d5 	ble.w	8017a3c <RadioIrqProcess+0x3f4>
 8017692:	3b01      	subs	r3, #1
 8017694:	2b1f      	cmp	r3, #31
 8017696:	f200 81d1 	bhi.w	8017a3c <RadioIrqProcess+0x3f4>
 801769a:	a201      	add	r2, pc, #4	; (adr r2, 80176a0 <RadioIrqProcess+0x58>)
 801769c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80176a0:	08017729 	.word	0x08017729
 80176a4:	08017763 	.word	0x08017763
 80176a8:	08017a3d 	.word	0x08017a3d
 80176ac:	08017919 	.word	0x08017919
 80176b0:	08017a3d 	.word	0x08017a3d
 80176b4:	08017a3d 	.word	0x08017a3d
 80176b8:	08017a3d 	.word	0x08017a3d
 80176bc:	08017995 	.word	0x08017995
 80176c0:	08017a3d 	.word	0x08017a3d
 80176c4:	08017a3d 	.word	0x08017a3d
 80176c8:	08017a3d 	.word	0x08017a3d
 80176cc:	08017a3d 	.word	0x08017a3d
 80176d0:	08017a3d 	.word	0x08017a3d
 80176d4:	08017a3d 	.word	0x08017a3d
 80176d8:	08017a3d 	.word	0x08017a3d
 80176dc:	080179b1 	.word	0x080179b1
 80176e0:	08017a3d 	.word	0x08017a3d
 80176e4:	08017a3d 	.word	0x08017a3d
 80176e8:	08017a3d 	.word	0x08017a3d
 80176ec:	08017a3d 	.word	0x08017a3d
 80176f0:	08017a3d 	.word	0x08017a3d
 80176f4:	08017a3d 	.word	0x08017a3d
 80176f8:	08017a3d 	.word	0x08017a3d
 80176fc:	08017a3d 	.word	0x08017a3d
 8017700:	08017a3d 	.word	0x08017a3d
 8017704:	08017a3d 	.word	0x08017a3d
 8017708:	08017a3d 	.word	0x08017a3d
 801770c:	08017a3d 	.word	0x08017a3d
 8017710:	08017a3d 	.word	0x08017a3d
 8017714:	08017a3d 	.word	0x08017a3d
 8017718:	08017a3d 	.word	0x08017a3d
 801771c:	080179bf 	.word	0x080179bf
 8017720:	2b40      	cmp	r3, #64	; 0x40
 8017722:	f000 816d 	beq.w	8017a00 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8017726:	e189      	b.n	8017a3c <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8017728:	4874      	ldr	r0, [pc, #464]	; (80178fc <RadioIrqProcess+0x2b4>)
 801772a:	f002 ff8b 	bl	801a644 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801772e:	2000      	movs	r0, #0
 8017730:	f000 fff8 	bl	8018724 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8017734:	f002 f85a 	bl	80197ec <RFW_Is_LongPacketModeEnabled>
 8017738:	4603      	mov	r3, r0
 801773a:	2b01      	cmp	r3, #1
 801773c:	d101      	bne.n	8017742 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801773e:	f002 f87e 	bl	801983e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8017742:	4b6f      	ldr	r3, [pc, #444]	; (8017900 <RadioIrqProcess+0x2b8>)
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	2b00      	cmp	r3, #0
 8017748:	f000 817a 	beq.w	8017a40 <RadioIrqProcess+0x3f8>
 801774c:	4b6c      	ldr	r3, [pc, #432]	; (8017900 <RadioIrqProcess+0x2b8>)
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	2b00      	cmp	r3, #0
 8017754:	f000 8174 	beq.w	8017a40 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8017758:	4b69      	ldr	r3, [pc, #420]	; (8017900 <RadioIrqProcess+0x2b8>)
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	4798      	blx	r3
        break;
 8017760:	e16e      	b.n	8017a40 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8017762:	4868      	ldr	r0, [pc, #416]	; (8017904 <RadioIrqProcess+0x2bc>)
 8017764:	f002 ff6e 	bl	801a644 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017768:	4b63      	ldr	r3, [pc, #396]	; (80178f8 <RadioIrqProcess+0x2b0>)
 801776a:	785b      	ldrb	r3, [r3, #1]
 801776c:	f083 0301 	eor.w	r3, r3, #1
 8017770:	b2db      	uxtb	r3, r3
 8017772:	2b00      	cmp	r3, #0
 8017774:	d014      	beq.n	80177a0 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8017776:	2000      	movs	r0, #0
 8017778:	f000 ffd4 	bl	8018724 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801777c:	2100      	movs	r1, #0
 801777e:	f640 1002 	movw	r0, #2306	; 0x902
 8017782:	f001 fd4f 	bl	8019224 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8017786:	f640 1044 	movw	r0, #2372	; 0x944
 801778a:	f001 fd5f 	bl	801924c <SUBGRF_ReadRegister>
 801778e:	4603      	mov	r3, r0
 8017790:	f043 0302 	orr.w	r3, r3, #2
 8017794:	b2db      	uxtb	r3, r3
 8017796:	4619      	mov	r1, r3
 8017798:	f640 1044 	movw	r0, #2372	; 0x944
 801779c:	f001 fd42 	bl	8019224 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80177a0:	1dfb      	adds	r3, r7, #7
 80177a2:	22ff      	movs	r2, #255	; 0xff
 80177a4:	4619      	mov	r1, r3
 80177a6:	4858      	ldr	r0, [pc, #352]	; (8017908 <RadioIrqProcess+0x2c0>)
 80177a8:	f000 fe8c 	bl	80184c4 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80177ac:	4857      	ldr	r0, [pc, #348]	; (801790c <RadioIrqProcess+0x2c4>)
 80177ae:	f001 fce7 	bl	8019180 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80177b2:	4b53      	ldr	r3, [pc, #332]	; (8017900 <RadioIrqProcess+0x2b8>)
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d036      	beq.n	8017828 <RadioIrqProcess+0x1e0>
 80177ba:	4b51      	ldr	r3, [pc, #324]	; (8017900 <RadioIrqProcess+0x2b8>)
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	689b      	ldr	r3, [r3, #8]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d031      	beq.n	8017828 <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 80177c4:	4b4c      	ldr	r3, [pc, #304]	; (80178f8 <RadioIrqProcess+0x2b0>)
 80177c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80177ca:	2b01      	cmp	r3, #1
 80177cc:	d10e      	bne.n	80177ec <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 80177ce:	4b4c      	ldr	r3, [pc, #304]	; (8017900 <RadioIrqProcess+0x2b8>)
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	689c      	ldr	r4, [r3, #8]
 80177d4:	79fb      	ldrb	r3, [r7, #7]
 80177d6:	b299      	uxth	r1, r3
 80177d8:	4b47      	ldr	r3, [pc, #284]	; (80178f8 <RadioIrqProcess+0x2b0>)
 80177da:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80177de:	b21a      	sxth	r2, r3
 80177e0:	4b45      	ldr	r3, [pc, #276]	; (80178f8 <RadioIrqProcess+0x2b0>)
 80177e2:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80177e6:	4848      	ldr	r0, [pc, #288]	; (8017908 <RadioIrqProcess+0x2c0>)
 80177e8:	47a0      	blx	r4
                break;
 80177ea:	e01e      	b.n	801782a <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80177ec:	4b42      	ldr	r3, [pc, #264]	; (80178f8 <RadioIrqProcess+0x2b0>)
 80177ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80177f0:	463a      	mov	r2, r7
 80177f2:	4611      	mov	r1, r2
 80177f4:	4618      	mov	r0, r3
 80177f6:	f001 ff47 	bl	8019688 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 80177fa:	4b41      	ldr	r3, [pc, #260]	; (8017900 <RadioIrqProcess+0x2b8>)
 80177fc:	681b      	ldr	r3, [r3, #0]
 80177fe:	689c      	ldr	r4, [r3, #8]
 8017800:	79fb      	ldrb	r3, [r7, #7]
 8017802:	b299      	uxth	r1, r3
 8017804:	4b3c      	ldr	r3, [pc, #240]	; (80178f8 <RadioIrqProcess+0x2b0>)
 8017806:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801780a:	b218      	sxth	r0, r3
 801780c:	683b      	ldr	r3, [r7, #0]
 801780e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8017812:	4a3f      	ldr	r2, [pc, #252]	; (8017910 <RadioIrqProcess+0x2c8>)
 8017814:	fb82 c203 	smull	ip, r2, r2, r3
 8017818:	1192      	asrs	r2, r2, #6
 801781a:	17db      	asrs	r3, r3, #31
 801781c:	1ad3      	subs	r3, r2, r3
 801781e:	b25b      	sxtb	r3, r3
 8017820:	4602      	mov	r2, r0
 8017822:	4839      	ldr	r0, [pc, #228]	; (8017908 <RadioIrqProcess+0x2c0>)
 8017824:	47a0      	blx	r4
                break;
 8017826:	e000      	b.n	801782a <RadioIrqProcess+0x1e2>
        }
 8017828:	bf00      	nop
        break;
 801782a:	e118      	b.n	8017a5e <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 801782c:	2000      	movs	r0, #0
 801782e:	f000 ff79 	bl	8018724 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017832:	4b33      	ldr	r3, [pc, #204]	; (8017900 <RadioIrqProcess+0x2b8>)
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	2b00      	cmp	r3, #0
 8017838:	f000 8104 	beq.w	8017a44 <RadioIrqProcess+0x3fc>
 801783c:	4b30      	ldr	r3, [pc, #192]	; (8017900 <RadioIrqProcess+0x2b8>)
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	699b      	ldr	r3, [r3, #24]
 8017842:	2b00      	cmp	r3, #0
 8017844:	f000 80fe 	beq.w	8017a44 <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 8017848:	4b2d      	ldr	r3, [pc, #180]	; (8017900 <RadioIrqProcess+0x2b8>)
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	699b      	ldr	r3, [r3, #24]
 801784e:	2000      	movs	r0, #0
 8017850:	4798      	blx	r3
        break;
 8017852:	e0f7      	b.n	8017a44 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8017854:	2000      	movs	r0, #0
 8017856:	f000 ff65 	bl	8018724 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801785a:	4b29      	ldr	r3, [pc, #164]	; (8017900 <RadioIrqProcess+0x2b8>)
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	2b00      	cmp	r3, #0
 8017860:	f000 80f2 	beq.w	8017a48 <RadioIrqProcess+0x400>
 8017864:	4b26      	ldr	r3, [pc, #152]	; (8017900 <RadioIrqProcess+0x2b8>)
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	699b      	ldr	r3, [r3, #24]
 801786a:	2b00      	cmp	r3, #0
 801786c:	f000 80ec 	beq.w	8017a48 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 8017870:	4b23      	ldr	r3, [pc, #140]	; (8017900 <RadioIrqProcess+0x2b8>)
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	699b      	ldr	r3, [r3, #24]
 8017876:	2001      	movs	r0, #1
 8017878:	4798      	blx	r3
        break;
 801787a:	e0e5      	b.n	8017a48 <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801787c:	4b25      	ldr	r3, [pc, #148]	; (8017914 <RadioIrqProcess+0x2cc>)
 801787e:	2201      	movs	r2, #1
 8017880:	2100      	movs	r1, #0
 8017882:	2002      	movs	r0, #2
 8017884:	f003 f8e8 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8017888:	f000 fe02 	bl	8018490 <SUBGRF_GetOperatingMode>
 801788c:	4603      	mov	r3, r0
 801788e:	2b04      	cmp	r3, #4
 8017890:	d115      	bne.n	80178be <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 8017892:	481a      	ldr	r0, [pc, #104]	; (80178fc <RadioIrqProcess+0x2b4>)
 8017894:	f002 fed6 	bl	801a644 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017898:	2000      	movs	r0, #0
 801789a:	f000 ff43 	bl	8018724 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801789e:	4b18      	ldr	r3, [pc, #96]	; (8017900 <RadioIrqProcess+0x2b8>)
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	f000 80d2 	beq.w	8017a4c <RadioIrqProcess+0x404>
 80178a8:	4b15      	ldr	r3, [pc, #84]	; (8017900 <RadioIrqProcess+0x2b8>)
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	685b      	ldr	r3, [r3, #4]
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	f000 80cc 	beq.w	8017a4c <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 80178b4:	4b12      	ldr	r3, [pc, #72]	; (8017900 <RadioIrqProcess+0x2b8>)
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	685b      	ldr	r3, [r3, #4]
 80178ba:	4798      	blx	r3
        break;
 80178bc:	e0c6      	b.n	8017a4c <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80178be:	f000 fde7 	bl	8018490 <SUBGRF_GetOperatingMode>
 80178c2:	4603      	mov	r3, r0
 80178c4:	2b05      	cmp	r3, #5
 80178c6:	f040 80c1 	bne.w	8017a4c <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 80178ca:	480e      	ldr	r0, [pc, #56]	; (8017904 <RadioIrqProcess+0x2bc>)
 80178cc:	f002 feba 	bl	801a644 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80178d0:	2000      	movs	r0, #0
 80178d2:	f000 ff27 	bl	8018724 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80178d6:	4b0a      	ldr	r3, [pc, #40]	; (8017900 <RadioIrqProcess+0x2b8>)
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	f000 80b6 	beq.w	8017a4c <RadioIrqProcess+0x404>
 80178e0:	4b07      	ldr	r3, [pc, #28]	; (8017900 <RadioIrqProcess+0x2b8>)
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	68db      	ldr	r3, [r3, #12]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	f000 80b0 	beq.w	8017a4c <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 80178ec:	4b04      	ldr	r3, [pc, #16]	; (8017900 <RadioIrqProcess+0x2b8>)
 80178ee:	681b      	ldr	r3, [r3, #0]
 80178f0:	68db      	ldr	r3, [r3, #12]
 80178f2:	4798      	blx	r3
        break;
 80178f4:	e0aa      	b.n	8017a4c <RadioIrqProcess+0x404>
 80178f6:	bf00      	nop
 80178f8:	20001c2c 	.word	0x20001c2c
 80178fc:	20001c88 	.word	0x20001c88
 8017900:	20001c28 	.word	0x20001c28
 8017904:	20001ca0 	.word	0x20001ca0
 8017908:	20001b28 	.word	0x20001b28
 801790c:	20001c50 	.word	0x20001c50
 8017910:	10624dd3 	.word	0x10624dd3
 8017914:	0801b4c0 	.word	0x0801b4c0
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8017918:	4b53      	ldr	r3, [pc, #332]	; (8017a68 <RadioIrqProcess+0x420>)
 801791a:	2201      	movs	r2, #1
 801791c:	2100      	movs	r1, #0
 801791e:	2002      	movs	r0, #2
 8017920:	f003 f89a 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8017924:	4b51      	ldr	r3, [pc, #324]	; (8017a6c <RadioIrqProcess+0x424>)
 8017926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017928:	2b00      	cmp	r3, #0
 801792a:	f000 8091 	beq.w	8017a50 <RadioIrqProcess+0x408>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 801792e:	4a50      	ldr	r2, [pc, #320]	; (8017a70 <RadioIrqProcess+0x428>)
 8017930:	4b4e      	ldr	r3, [pc, #312]	; (8017a6c <RadioIrqProcess+0x424>)
 8017932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017934:	0c1b      	lsrs	r3, r3, #16
 8017936:	b2db      	uxtb	r3, r3
 8017938:	4619      	mov	r1, r3
 801793a:	f640 1003 	movw	r0, #2307	; 0x903
 801793e:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8017940:	4a4b      	ldr	r2, [pc, #300]	; (8017a70 <RadioIrqProcess+0x428>)
 8017942:	4b4a      	ldr	r3, [pc, #296]	; (8017a6c <RadioIrqProcess+0x424>)
 8017944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017946:	0a1b      	lsrs	r3, r3, #8
 8017948:	b2db      	uxtb	r3, r3
 801794a:	4619      	mov	r1, r3
 801794c:	f640 1004 	movw	r0, #2308	; 0x904
 8017950:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 8017952:	4a47      	ldr	r2, [pc, #284]	; (8017a70 <RadioIrqProcess+0x428>)
 8017954:	4b45      	ldr	r3, [pc, #276]	; (8017a6c <RadioIrqProcess+0x424>)
 8017956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017958:	b2db      	uxtb	r3, r3
 801795a:	4619      	mov	r1, r3
 801795c:	f640 1005 	movw	r0, #2309	; 0x905
 8017960:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 8017962:	4c43      	ldr	r4, [pc, #268]	; (8017a70 <RadioIrqProcess+0x428>)
 8017964:	4b43      	ldr	r3, [pc, #268]	; (8017a74 <RadioIrqProcess+0x42c>)
 8017966:	f640 1002 	movw	r0, #2306	; 0x902
 801796a:	4798      	blx	r3
 801796c:	4603      	mov	r3, r0
 801796e:	f043 0301 	orr.w	r3, r3, #1
 8017972:	b2db      	uxtb	r3, r3
 8017974:	4619      	mov	r1, r3
 8017976:	f640 1002 	movw	r0, #2306	; 0x902
 801797a:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 801797c:	4b3b      	ldr	r3, [pc, #236]	; (8017a6c <RadioIrqProcess+0x424>)
 801797e:	2200      	movs	r2, #0
 8017980:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017982:	2300      	movs	r3, #0
 8017984:	2200      	movs	r2, #0
 8017986:	f240 2162 	movw	r1, #610	; 0x262
 801798a:	f240 2062 	movw	r0, #610	; 0x262
 801798e:	f001 f899 	bl	8018ac4 <SUBGRF_SetDioIrqParams>
        break;
 8017992:	e05d      	b.n	8017a50 <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8017994:	4b38      	ldr	r3, [pc, #224]	; (8017a78 <RadioIrqProcess+0x430>)
 8017996:	2201      	movs	r2, #1
 8017998:	2100      	movs	r1, #0
 801799a:	2002      	movs	r0, #2
 801799c:	f003 f85c 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 80179a0:	f001 ff1d 	bl	80197de <RFW_Is_Init>
 80179a4:	4603      	mov	r3, r0
 80179a6:	2b01      	cmp	r3, #1
 80179a8:	d154      	bne.n	8017a54 <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 80179aa:	f001 ff4e 	bl	801984a <RFW_ReceivePayload>
        break;
 80179ae:	e051      	b.n	8017a54 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80179b0:	4b32      	ldr	r3, [pc, #200]	; (8017a7c <RadioIrqProcess+0x434>)
 80179b2:	2201      	movs	r2, #1
 80179b4:	2100      	movs	r1, #0
 80179b6:	2002      	movs	r0, #2
 80179b8:	f003 f84e 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80179bc:	e04f      	b.n	8017a5e <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 80179be:	4830      	ldr	r0, [pc, #192]	; (8017a80 <RadioIrqProcess+0x438>)
 80179c0:	f002 fe40 	bl	801a644 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80179c4:	4b29      	ldr	r3, [pc, #164]	; (8017a6c <RadioIrqProcess+0x424>)
 80179c6:	785b      	ldrb	r3, [r3, #1]
 80179c8:	f083 0301 	eor.w	r3, r3, #1
 80179cc:	b2db      	uxtb	r3, r3
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d002      	beq.n	80179d8 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 80179d2:	2000      	movs	r0, #0
 80179d4:	f000 fea6 	bl	8018724 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80179d8:	4b2a      	ldr	r3, [pc, #168]	; (8017a84 <RadioIrqProcess+0x43c>)
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d03b      	beq.n	8017a58 <RadioIrqProcess+0x410>
 80179e0:	4b28      	ldr	r3, [pc, #160]	; (8017a84 <RadioIrqProcess+0x43c>)
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	68db      	ldr	r3, [r3, #12]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d036      	beq.n	8017a58 <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 80179ea:	4b26      	ldr	r3, [pc, #152]	; (8017a84 <RadioIrqProcess+0x43c>)
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	68db      	ldr	r3, [r3, #12]
 80179f0:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 80179f2:	4b25      	ldr	r3, [pc, #148]	; (8017a88 <RadioIrqProcess+0x440>)
 80179f4:	2201      	movs	r2, #1
 80179f6:	2100      	movs	r1, #0
 80179f8:	2002      	movs	r0, #2
 80179fa:	f003 f82d 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80179fe:	e02b      	b.n	8017a58 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8017a00:	4b22      	ldr	r3, [pc, #136]	; (8017a8c <RadioIrqProcess+0x444>)
 8017a02:	2201      	movs	r2, #1
 8017a04:	2100      	movs	r1, #0
 8017a06:	2002      	movs	r0, #2
 8017a08:	f003 f826 	bl	801aa58 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8017a0c:	4b17      	ldr	r3, [pc, #92]	; (8017a6c <RadioIrqProcess+0x424>)
 8017a0e:	785b      	ldrb	r3, [r3, #1]
 8017a10:	f083 0301 	eor.w	r3, r3, #1
 8017a14:	b2db      	uxtb	r3, r3
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d002      	beq.n	8017a20 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8017a1a:	2000      	movs	r0, #0
 8017a1c:	f000 fe82 	bl	8018724 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8017a20:	4b18      	ldr	r3, [pc, #96]	; (8017a84 <RadioIrqProcess+0x43c>)
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d019      	beq.n	8017a5c <RadioIrqProcess+0x414>
 8017a28:	4b16      	ldr	r3, [pc, #88]	; (8017a84 <RadioIrqProcess+0x43c>)
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	691b      	ldr	r3, [r3, #16]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d014      	beq.n	8017a5c <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 8017a32:	4b14      	ldr	r3, [pc, #80]	; (8017a84 <RadioIrqProcess+0x43c>)
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	691b      	ldr	r3, [r3, #16]
 8017a38:	4798      	blx	r3
        break;
 8017a3a:	e00f      	b.n	8017a5c <RadioIrqProcess+0x414>
        break;
 8017a3c:	bf00      	nop
 8017a3e:	e00e      	b.n	8017a5e <RadioIrqProcess+0x416>
        break;
 8017a40:	bf00      	nop
 8017a42:	e00c      	b.n	8017a5e <RadioIrqProcess+0x416>
        break;
 8017a44:	bf00      	nop
 8017a46:	e00a      	b.n	8017a5e <RadioIrqProcess+0x416>
        break;
 8017a48:	bf00      	nop
 8017a4a:	e008      	b.n	8017a5e <RadioIrqProcess+0x416>
        break;
 8017a4c:	bf00      	nop
 8017a4e:	e006      	b.n	8017a5e <RadioIrqProcess+0x416>
        break;
 8017a50:	bf00      	nop
 8017a52:	e004      	b.n	8017a5e <RadioIrqProcess+0x416>
        break;
 8017a54:	bf00      	nop
 8017a56:	e002      	b.n	8017a5e <RadioIrqProcess+0x416>
        break;
 8017a58:	bf00      	nop
 8017a5a:	e000      	b.n	8017a5e <RadioIrqProcess+0x416>
        break;
 8017a5c:	bf00      	nop
    }
}
 8017a5e:	bf00      	nop
 8017a60:	370c      	adds	r7, #12
 8017a62:	46bd      	mov	sp, r7
 8017a64:	bd90      	pop	{r4, r7, pc}
 8017a66:	bf00      	nop
 8017a68:	0801b4d4 	.word	0x0801b4d4
 8017a6c:	20001c2c 	.word	0x20001c2c
 8017a70:	08017457 	.word	0x08017457
 8017a74:	0801747b 	.word	0x0801747b
 8017a78:	0801b4e0 	.word	0x0801b4e0
 8017a7c:	0801b4ec 	.word	0x0801b4ec
 8017a80:	20001ca0 	.word	0x20001ca0
 8017a84:	20001c28 	.word	0x20001c28
 8017a88:	0801b4f8 	.word	0x0801b4f8
 8017a8c:	0801b504 	.word	0x0801b504

08017a90 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017a94:	4b09      	ldr	r3, [pc, #36]	; (8017abc <RadioTxPrbs+0x2c>)
 8017a96:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017a9a:	2101      	movs	r1, #1
 8017a9c:	4618      	mov	r0, r3
 8017a9e:	f001 fcb5 	bl	801940c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8017aa2:	4b07      	ldr	r3, [pc, #28]	; (8017ac0 <RadioTxPrbs+0x30>)
 8017aa4:	212d      	movs	r1, #45	; 0x2d
 8017aa6:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8017aaa:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8017aac:	f000 fefd 	bl	80188aa <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8017ab0:	4804      	ldr	r0, [pc, #16]	; (8017ac4 <RadioTxPrbs+0x34>)
 8017ab2:	f000 fe53 	bl	801875c <SUBGRF_SetTx>
}
 8017ab6:	bf00      	nop
 8017ab8:	bd80      	pop	{r7, pc}
 8017aba:	bf00      	nop
 8017abc:	20001c2c 	.word	0x20001c2c
 8017ac0:	08017457 	.word	0x08017457
 8017ac4:	000fffff 	.word	0x000fffff

08017ac8 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b084      	sub	sp, #16
 8017acc:	af00      	add	r7, sp, #0
 8017ace:	4603      	mov	r3, r0
 8017ad0:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8017ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	f001 fcc0 	bl	801945c <SUBGRF_SetRfTxPower>
 8017adc:	4603      	mov	r3, r0
 8017ade:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8017ae0:	7bfb      	ldrb	r3, [r7, #15]
 8017ae2:	2101      	movs	r1, #1
 8017ae4:	4618      	mov	r0, r3
 8017ae6:	f001 fc91 	bl	801940c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8017aea:	f000 fed5 	bl	8018898 <SUBGRF_SetTxContinuousWave>
}
 8017aee:	bf00      	nop
 8017af0:	3710      	adds	r7, #16
 8017af2:	46bd      	mov	sp, r7
 8017af4:	bd80      	pop	{r7, pc}

08017af6 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8017af6:	b480      	push	{r7}
 8017af8:	b089      	sub	sp, #36	; 0x24
 8017afa:	af00      	add	r7, sp, #0
 8017afc:	60f8      	str	r0, [r7, #12]
 8017afe:	60b9      	str	r1, [r7, #8]
 8017b00:	4613      	mov	r3, r2
 8017b02:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8017b04:	2300      	movs	r3, #0
 8017b06:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8017b08:	2300      	movs	r3, #0
 8017b0a:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	61bb      	str	r3, [r7, #24]
 8017b10:	e011      	b.n	8017b36 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8017b12:	69bb      	ldr	r3, [r7, #24]
 8017b14:	68ba      	ldr	r2, [r7, #8]
 8017b16:	4413      	add	r3, r2
 8017b18:	781a      	ldrb	r2, [r3, #0]
 8017b1a:	69bb      	ldr	r3, [r7, #24]
 8017b1c:	68b9      	ldr	r1, [r7, #8]
 8017b1e:	440b      	add	r3, r1
 8017b20:	43d2      	mvns	r2, r2
 8017b22:	b2d2      	uxtb	r2, r2
 8017b24:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8017b26:	69bb      	ldr	r3, [r7, #24]
 8017b28:	68fa      	ldr	r2, [r7, #12]
 8017b2a:	4413      	add	r3, r2
 8017b2c:	2200      	movs	r2, #0
 8017b2e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8017b30:	69bb      	ldr	r3, [r7, #24]
 8017b32:	3301      	adds	r3, #1
 8017b34:	61bb      	str	r3, [r7, #24]
 8017b36:	79fb      	ldrb	r3, [r7, #7]
 8017b38:	69ba      	ldr	r2, [r7, #24]
 8017b3a:	429a      	cmp	r2, r3
 8017b3c:	dbe9      	blt.n	8017b12 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8017b3e:	2300      	movs	r3, #0
 8017b40:	61bb      	str	r3, [r7, #24]
 8017b42:	e049      	b.n	8017bd8 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8017b44:	69bb      	ldr	r3, [r7, #24]
 8017b46:	425a      	negs	r2, r3
 8017b48:	f003 0307 	and.w	r3, r3, #7
 8017b4c:	f002 0207 	and.w	r2, r2, #7
 8017b50:	bf58      	it	pl
 8017b52:	4253      	negpl	r3, r2
 8017b54:	b2db      	uxtb	r3, r3
 8017b56:	f1c3 0307 	rsb	r3, r3, #7
 8017b5a:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8017b5c:	69bb      	ldr	r3, [r7, #24]
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	da00      	bge.n	8017b64 <payload_integration+0x6e>
 8017b62:	3307      	adds	r3, #7
 8017b64:	10db      	asrs	r3, r3, #3
 8017b66:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8017b68:	69bb      	ldr	r3, [r7, #24]
 8017b6a:	3301      	adds	r3, #1
 8017b6c:	425a      	negs	r2, r3
 8017b6e:	f003 0307 	and.w	r3, r3, #7
 8017b72:	f002 0207 	and.w	r2, r2, #7
 8017b76:	bf58      	it	pl
 8017b78:	4253      	negpl	r3, r2
 8017b7a:	b2db      	uxtb	r3, r3
 8017b7c:	f1c3 0307 	rsb	r3, r3, #7
 8017b80:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8017b82:	69bb      	ldr	r3, [r7, #24]
 8017b84:	3301      	adds	r3, #1
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	da00      	bge.n	8017b8c <payload_integration+0x96>
 8017b8a:	3307      	adds	r3, #7
 8017b8c:	10db      	asrs	r3, r3, #3
 8017b8e:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8017b90:	7dbb      	ldrb	r3, [r7, #22]
 8017b92:	68ba      	ldr	r2, [r7, #8]
 8017b94:	4413      	add	r3, r2
 8017b96:	781b      	ldrb	r3, [r3, #0]
 8017b98:	461a      	mov	r2, r3
 8017b9a:	7dfb      	ldrb	r3, [r7, #23]
 8017b9c:	fa42 f303 	asr.w	r3, r2, r3
 8017ba0:	b2db      	uxtb	r3, r3
 8017ba2:	f003 0301 	and.w	r3, r3, #1
 8017ba6:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8017ba8:	7ffa      	ldrb	r2, [r7, #31]
 8017baa:	7cfb      	ldrb	r3, [r7, #19]
 8017bac:	4053      	eors	r3, r2
 8017bae:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8017bb0:	7d3b      	ldrb	r3, [r7, #20]
 8017bb2:	68fa      	ldr	r2, [r7, #12]
 8017bb4:	4413      	add	r3, r2
 8017bb6:	781b      	ldrb	r3, [r3, #0]
 8017bb8:	b25a      	sxtb	r2, r3
 8017bba:	7ff9      	ldrb	r1, [r7, #31]
 8017bbc:	7d7b      	ldrb	r3, [r7, #21]
 8017bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8017bc2:	b25b      	sxtb	r3, r3
 8017bc4:	4313      	orrs	r3, r2
 8017bc6:	b259      	sxtb	r1, r3
 8017bc8:	7d3b      	ldrb	r3, [r7, #20]
 8017bca:	68fa      	ldr	r2, [r7, #12]
 8017bcc:	4413      	add	r3, r2
 8017bce:	b2ca      	uxtb	r2, r1
 8017bd0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8017bd2:	69bb      	ldr	r3, [r7, #24]
 8017bd4:	3301      	adds	r3, #1
 8017bd6:	61bb      	str	r3, [r7, #24]
 8017bd8:	79fb      	ldrb	r3, [r7, #7]
 8017bda:	00db      	lsls	r3, r3, #3
 8017bdc:	69ba      	ldr	r2, [r7, #24]
 8017bde:	429a      	cmp	r2, r3
 8017be0:	dbb0      	blt.n	8017b44 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8017be2:	7ffb      	ldrb	r3, [r7, #31]
 8017be4:	01db      	lsls	r3, r3, #7
 8017be6:	b25a      	sxtb	r2, r3
 8017be8:	7ffb      	ldrb	r3, [r7, #31]
 8017bea:	019b      	lsls	r3, r3, #6
 8017bec:	b25b      	sxtb	r3, r3
 8017bee:	4313      	orrs	r3, r2
 8017bf0:	b25b      	sxtb	r3, r3
 8017bf2:	7ffa      	ldrb	r2, [r7, #31]
 8017bf4:	2a00      	cmp	r2, #0
 8017bf6:	d101      	bne.n	8017bfc <payload_integration+0x106>
 8017bf8:	2220      	movs	r2, #32
 8017bfa:	e000      	b.n	8017bfe <payload_integration+0x108>
 8017bfc:	2200      	movs	r2, #0
 8017bfe:	4313      	orrs	r3, r2
 8017c00:	b259      	sxtb	r1, r3
 8017c02:	79fb      	ldrb	r3, [r7, #7]
 8017c04:	68fa      	ldr	r2, [r7, #12]
 8017c06:	4413      	add	r3, r2
 8017c08:	b2ca      	uxtb	r2, r1
 8017c0a:	701a      	strb	r2, [r3, #0]
}
 8017c0c:	bf00      	nop
 8017c0e:	3724      	adds	r7, #36	; 0x24
 8017c10:	46bd      	mov	sp, r7
 8017c12:	bc80      	pop	{r7}
 8017c14:	4770      	bx	lr
	...

08017c18 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b08c      	sub	sp, #48	; 0x30
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	60b9      	str	r1, [r7, #8]
 8017c20:	607a      	str	r2, [r7, #4]
 8017c22:	603b      	str	r3, [r7, #0]
 8017c24:	4603      	mov	r3, r0
 8017c26:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8017c28:	2300      	movs	r3, #0
 8017c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8017c2c:	2300      	movs	r3, #0
 8017c2e:	623b      	str	r3, [r7, #32]
 8017c30:	2300      	movs	r3, #0
 8017c32:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8017c34:	f001 fdcd 	bl	80197d2 <RFW_DeInit>

    if( rxContinuous != 0 )
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d001      	beq.n	8017c42 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8017c3e:	2300      	movs	r3, #0
 8017c40:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	bf14      	ite	ne
 8017c48:	2301      	movne	r3, #1
 8017c4a:	2300      	moveq	r3, #0
 8017c4c:	b2da      	uxtb	r2, r3
 8017c4e:	4ba3      	ldr	r3, [pc, #652]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017c50:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8017c52:	7bfb      	ldrb	r3, [r7, #15]
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d003      	beq.n	8017c60 <RadioSetRxGenericConfig+0x48>
 8017c58:	2b01      	cmp	r3, #1
 8017c5a:	f000 80dc 	beq.w	8017e16 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8017c5e:	e194      	b.n	8017f8a <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8017c60:	68bb      	ldr	r3, [r7, #8]
 8017c62:	689b      	ldr	r3, [r3, #8]
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d003      	beq.n	8017c70 <RadioSetRxGenericConfig+0x58>
 8017c68:	68bb      	ldr	r3, [r7, #8]
 8017c6a:	68db      	ldr	r3, [r3, #12]
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d102      	bne.n	8017c76 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8017c70:	f04f 33ff 	mov.w	r3, #4294967295
 8017c74:	e18a      	b.n	8017f8c <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8017c76:	68bb      	ldr	r3, [r7, #8]
 8017c78:	7f9b      	ldrb	r3, [r3, #30]
 8017c7a:	2b08      	cmp	r3, #8
 8017c7c:	d902      	bls.n	8017c84 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8017c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8017c82:	e183      	b.n	8017f8c <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8017c84:	68bb      	ldr	r3, [r7, #8]
 8017c86:	6919      	ldr	r1, [r3, #16]
 8017c88:	68bb      	ldr	r3, [r7, #8]
 8017c8a:	7f9b      	ldrb	r3, [r3, #30]
 8017c8c:	b29a      	uxth	r2, r3
 8017c8e:	f107 0320 	add.w	r3, r7, #32
 8017c92:	4618      	mov	r0, r3
 8017c94:	f001 fe90 	bl	80199b8 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017c98:	68bb      	ldr	r3, [r7, #8]
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	bf14      	ite	ne
 8017ca0:	2301      	movne	r3, #1
 8017ca2:	2300      	moveq	r3, #0
 8017ca4:	b2db      	uxtb	r3, r3
 8017ca6:	4618      	mov	r0, r3
 8017ca8:	f000 fe08 	bl	80188bc <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017cac:	4b8b      	ldr	r3, [pc, #556]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017cae:	2200      	movs	r2, #0
 8017cb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8017cb4:	68bb      	ldr	r3, [r7, #8]
 8017cb6:	689b      	ldr	r3, [r3, #8]
 8017cb8:	4a88      	ldr	r2, [pc, #544]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017cba:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8017cbc:	68bb      	ldr	r3, [r7, #8]
 8017cbe:	f893 2020 	ldrb.w	r2, [r3, #32]
 8017cc2:	4b86      	ldr	r3, [pc, #536]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8017cc8:	68bb      	ldr	r3, [r7, #8]
 8017cca:	685b      	ldr	r3, [r3, #4]
 8017ccc:	4618      	mov	r0, r3
 8017cce:	f001 fcb3 	bl	8019638 <SUBGRF_GetFskBandwidthRegValue>
 8017cd2:	4603      	mov	r3, r0
 8017cd4:	461a      	mov	r2, r3
 8017cd6:	4b81      	ldr	r3, [pc, #516]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017cdc:	4b7f      	ldr	r3, [pc, #508]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017cde:	2200      	movs	r2, #0
 8017ce0:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8017ce2:	68bb      	ldr	r3, [r7, #8]
 8017ce4:	68db      	ldr	r3, [r3, #12]
 8017ce6:	b29b      	uxth	r3, r3
 8017ce8:	00db      	lsls	r3, r3, #3
 8017cea:	b29a      	uxth	r2, r3
 8017cec:	4b7b      	ldr	r3, [pc, #492]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017cee:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8017cf0:	68bb      	ldr	r3, [r7, #8]
 8017cf2:	7fda      	ldrb	r2, [r3, #31]
 8017cf4:	4b79      	ldr	r3, [pc, #484]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017cf6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8017cf8:	68bb      	ldr	r3, [r7, #8]
 8017cfa:	7f9b      	ldrb	r3, [r3, #30]
 8017cfc:	00db      	lsls	r3, r3, #3
 8017cfe:	b2da      	uxtb	r2, r3
 8017d00:	4b76      	ldr	r3, [pc, #472]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017d02:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8017d04:	68bb      	ldr	r3, [r7, #8]
 8017d06:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8017d0a:	4b74      	ldr	r3, [pc, #464]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017d0c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8017d0e:	68bb      	ldr	r3, [r7, #8]
 8017d10:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d105      	bne.n	8017d24 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8017d18:	68bb      	ldr	r3, [r7, #8]
 8017d1a:	695b      	ldr	r3, [r3, #20]
 8017d1c:	b2da      	uxtb	r2, r3
 8017d1e:	4b6f      	ldr	r3, [pc, #444]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017d20:	759a      	strb	r2, [r3, #22]
 8017d22:	e00b      	b.n	8017d3c <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8017d24:	68bb      	ldr	r3, [r7, #8]
 8017d26:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8017d2a:	2b02      	cmp	r3, #2
 8017d2c:	d103      	bne.n	8017d36 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8017d2e:	4b6b      	ldr	r3, [pc, #428]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017d30:	22ff      	movs	r2, #255	; 0xff
 8017d32:	759a      	strb	r2, [r3, #22]
 8017d34:	e002      	b.n	8017d3c <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8017d36:	4b69      	ldr	r3, [pc, #420]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017d38:	22ff      	movs	r2, #255	; 0xff
 8017d3a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8017d3c:	68bb      	ldr	r3, [r7, #8]
 8017d3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017d42:	2b02      	cmp	r3, #2
 8017d44:	d004      	beq.n	8017d50 <RadioSetRxGenericConfig+0x138>
 8017d46:	68bb      	ldr	r3, [r7, #8]
 8017d48:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8017d4c:	2b02      	cmp	r3, #2
 8017d4e:	d12d      	bne.n	8017dac <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8017d50:	68bb      	ldr	r3, [r7, #8]
 8017d52:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017d56:	2bf1      	cmp	r3, #241	; 0xf1
 8017d58:	d00c      	beq.n	8017d74 <RadioSetRxGenericConfig+0x15c>
 8017d5a:	68bb      	ldr	r3, [r7, #8]
 8017d5c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017d60:	2bf2      	cmp	r3, #242	; 0xf2
 8017d62:	d007      	beq.n	8017d74 <RadioSetRxGenericConfig+0x15c>
 8017d64:	68bb      	ldr	r3, [r7, #8]
 8017d66:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017d6a:	2b01      	cmp	r3, #1
 8017d6c:	d002      	beq.n	8017d74 <RadioSetRxGenericConfig+0x15c>
            return -1;
 8017d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8017d72:	e10b      	b.n	8017f8c <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8017d74:	2300      	movs	r3, #0
 8017d76:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8017d78:	68bb      	ldr	r3, [r7, #8]
 8017d7a:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8017d7c:	4b58      	ldr	r3, [pc, #352]	; (8017ee0 <RadioSetRxGenericConfig+0x2c8>)
 8017d7e:	6819      	ldr	r1, [r3, #0]
 8017d80:	f107 0314 	add.w	r3, r7, #20
 8017d84:	4a57      	ldr	r2, [pc, #348]	; (8017ee4 <RadioSetRxGenericConfig+0x2cc>)
 8017d86:	4618      	mov	r0, r3
 8017d88:	f001 fd16 	bl	80197b8 <RFW_Init>
 8017d8c:	4603      	mov	r3, r0
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d002      	beq.n	8017d98 <RadioSetRxGenericConfig+0x180>
            return -1;
 8017d92:	f04f 33ff 	mov.w	r3, #4294967295
 8017d96:	e0f9      	b.n	8017f8c <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8017d98:	4b50      	ldr	r3, [pc, #320]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017d9a:	2200      	movs	r2, #0
 8017d9c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8017d9e:	4b4f      	ldr	r3, [pc, #316]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017da0:	2201      	movs	r2, #1
 8017da2:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8017da4:	4b4d      	ldr	r3, [pc, #308]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017da6:	2200      	movs	r2, #0
 8017da8:	755a      	strb	r2, [r3, #21]
        {
 8017daa:	e00e      	b.n	8017dca <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8017dac:	68bb      	ldr	r3, [r7, #8]
 8017dae:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8017db2:	4b4a      	ldr	r3, [pc, #296]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017db4:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8017db6:	68bb      	ldr	r3, [r7, #8]
 8017db8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8017dbc:	4b47      	ldr	r3, [pc, #284]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017dbe:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8017dc0:	68bb      	ldr	r3, [r7, #8]
 8017dc2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8017dc6:	4b45      	ldr	r3, [pc, #276]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017dc8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8017dca:	f7ff fa48 	bl	801725e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8017dce:	2000      	movs	r0, #0
 8017dd0:	f7fe fbf2 	bl	80165b8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017dd4:	4844      	ldr	r0, [pc, #272]	; (8017ee8 <RadioSetRxGenericConfig+0x2d0>)
 8017dd6:	f001 f80b 	bl	8018df0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017dda:	4844      	ldr	r0, [pc, #272]	; (8017eec <RadioSetRxGenericConfig+0x2d4>)
 8017ddc:	f001 f8da 	bl	8018f94 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8017de0:	f107 0320 	add.w	r3, r7, #32
 8017de4:	4618      	mov	r0, r3
 8017de6:	f000 fba2 	bl	801852e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8017dea:	68bb      	ldr	r3, [r7, #8]
 8017dec:	8b9b      	ldrh	r3, [r3, #28]
 8017dee:	4618      	mov	r0, r3
 8017df0:	f000 fbec 	bl	80185cc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8017df4:	68bb      	ldr	r3, [r7, #8]
 8017df6:	8b1b      	ldrh	r3, [r3, #24]
 8017df8:	4618      	mov	r0, r3
 8017dfa:	f000 fbc7 	bl	801858c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8017dfe:	683b      	ldr	r3, [r7, #0]
 8017e00:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8017e04:	fb03 f202 	mul.w	r2, r3, r2
 8017e08:	68bb      	ldr	r3, [r7, #8]
 8017e0a:	689b      	ldr	r3, [r3, #8]
 8017e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8017e10:	4a32      	ldr	r2, [pc, #200]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017e12:	6093      	str	r3, [r2, #8]
        break;
 8017e14:	e0b9      	b.n	8017f8a <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8017e16:	68bb      	ldr	r3, [r7, #8]
 8017e18:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d102      	bne.n	8017e24 <RadioSetRxGenericConfig+0x20c>
            return -1;
 8017e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8017e22:	e0b3      	b.n	8017f8c <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8017e24:	68bb      	ldr	r3, [r7, #8]
 8017e26:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8017e2a:	2b01      	cmp	r3, #1
 8017e2c:	d104      	bne.n	8017e38 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8017e2e:	68bb      	ldr	r3, [r7, #8]
 8017e30:	695b      	ldr	r3, [r3, #20]
 8017e32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8017e36:	e002      	b.n	8017e3e <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8017e38:	23ff      	movs	r3, #255	; 0xff
 8017e3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017e3e:	68bb      	ldr	r3, [r7, #8]
 8017e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	bf14      	ite	ne
 8017e46:	2301      	movne	r3, #1
 8017e48:	2300      	moveq	r3, #0
 8017e4a:	b2db      	uxtb	r3, r3
 8017e4c:	4618      	mov	r0, r3
 8017e4e:	f000 fd35 	bl	80188bc <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8017e52:	683b      	ldr	r3, [r7, #0]
 8017e54:	b2db      	uxtb	r3, r3
 8017e56:	4618      	mov	r0, r3
 8017e58:	f000 fd3f 	bl	80188da <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017e5c:	4b1f      	ldr	r3, [pc, #124]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017e5e:	2201      	movs	r2, #1
 8017e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8017e64:	68bb      	ldr	r3, [r7, #8]
 8017e66:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8017e6a:	4b1c      	ldr	r3, [pc, #112]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017e6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8017e70:	68bb      	ldr	r3, [r7, #8]
 8017e72:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8017e76:	4b19      	ldr	r3, [pc, #100]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8017e7c:	68bb      	ldr	r3, [r7, #8]
 8017e7e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8017e82:	4b16      	ldr	r3, [pc, #88]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017e84:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8017e88:	68bb      	ldr	r3, [r7, #8]
 8017e8a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017e8e:	2b02      	cmp	r3, #2
 8017e90:	d010      	beq.n	8017eb4 <RadioSetRxGenericConfig+0x29c>
 8017e92:	2b02      	cmp	r3, #2
 8017e94:	dc2c      	bgt.n	8017ef0 <RadioSetRxGenericConfig+0x2d8>
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d002      	beq.n	8017ea0 <RadioSetRxGenericConfig+0x288>
 8017e9a:	2b01      	cmp	r3, #1
 8017e9c:	d005      	beq.n	8017eaa <RadioSetRxGenericConfig+0x292>
            break;
 8017e9e:	e027      	b.n	8017ef0 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8017ea0:	4b0e      	ldr	r3, [pc, #56]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017ea2:	2200      	movs	r2, #0
 8017ea4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017ea8:	e023      	b.n	8017ef2 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8017eaa:	4b0c      	ldr	r3, [pc, #48]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017eac:	2201      	movs	r2, #1
 8017eae:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017eb2:	e01e      	b.n	8017ef2 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8017eb4:	68bb      	ldr	r3, [r7, #8]
 8017eb6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017eba:	2b0b      	cmp	r3, #11
 8017ebc:	d004      	beq.n	8017ec8 <RadioSetRxGenericConfig+0x2b0>
 8017ebe:	68bb      	ldr	r3, [r7, #8]
 8017ec0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017ec4:	2b0c      	cmp	r3, #12
 8017ec6:	d104      	bne.n	8017ed2 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8017ec8:	4b04      	ldr	r3, [pc, #16]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017eca:	2201      	movs	r2, #1
 8017ecc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017ed0:	e00f      	b.n	8017ef2 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8017ed2:	4b02      	ldr	r3, [pc, #8]	; (8017edc <RadioSetRxGenericConfig+0x2c4>)
 8017ed4:	2200      	movs	r2, #0
 8017ed6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017eda:	e00a      	b.n	8017ef2 <RadioSetRxGenericConfig+0x2da>
 8017edc:	20001c2c 	.word	0x20001c2c
 8017ee0:	20001c28 	.word	0x20001c28
 8017ee4:	20001ca0 	.word	0x20001ca0
 8017ee8:	20001c64 	.word	0x20001c64
 8017eec:	20001c3a 	.word	0x20001c3a
            break;
 8017ef0:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017ef2:	4b28      	ldr	r3, [pc, #160]	; (8017f94 <RadioSetRxGenericConfig+0x37c>)
 8017ef4:	2201      	movs	r2, #1
 8017ef6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8017ef8:	68bb      	ldr	r3, [r7, #8]
 8017efa:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8017efc:	4b25      	ldr	r3, [pc, #148]	; (8017f94 <RadioSetRxGenericConfig+0x37c>)
 8017efe:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8017f00:	68bb      	ldr	r3, [r7, #8]
 8017f02:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8017f06:	4b23      	ldr	r3, [pc, #140]	; (8017f94 <RadioSetRxGenericConfig+0x37c>)
 8017f08:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017f0a:	4a22      	ldr	r2, [pc, #136]	; (8017f94 <RadioSetRxGenericConfig+0x37c>)
 8017f0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017f10:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8017f12:	68bb      	ldr	r3, [r7, #8]
 8017f14:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8017f18:	4b1e      	ldr	r3, [pc, #120]	; (8017f94 <RadioSetRxGenericConfig+0x37c>)
 8017f1a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8017f1e:	68bb      	ldr	r3, [r7, #8]
 8017f20:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8017f24:	4b1b      	ldr	r3, [pc, #108]	; (8017f94 <RadioSetRxGenericConfig+0x37c>)
 8017f26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8017f2a:	f7ff f998 	bl	801725e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8017f2e:	2001      	movs	r0, #1
 8017f30:	f7fe fb42 	bl	80165b8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017f34:	4818      	ldr	r0, [pc, #96]	; (8017f98 <RadioSetRxGenericConfig+0x380>)
 8017f36:	f000 ff5b 	bl	8018df0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017f3a:	4818      	ldr	r0, [pc, #96]	; (8017f9c <RadioSetRxGenericConfig+0x384>)
 8017f3c:	f001 f82a 	bl	8018f94 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8017f40:	4b14      	ldr	r3, [pc, #80]	; (8017f94 <RadioSetRxGenericConfig+0x37c>)
 8017f42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8017f46:	2b01      	cmp	r3, #1
 8017f48:	d10d      	bne.n	8017f66 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8017f4a:	f240 7036 	movw	r0, #1846	; 0x736
 8017f4e:	f001 f97d 	bl	801924c <SUBGRF_ReadRegister>
 8017f52:	4603      	mov	r3, r0
 8017f54:	f023 0304 	bic.w	r3, r3, #4
 8017f58:	b2db      	uxtb	r3, r3
 8017f5a:	4619      	mov	r1, r3
 8017f5c:	f240 7036 	movw	r0, #1846	; 0x736
 8017f60:	f001 f960 	bl	8019224 <SUBGRF_WriteRegister>
 8017f64:	e00c      	b.n	8017f80 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8017f66:	f240 7036 	movw	r0, #1846	; 0x736
 8017f6a:	f001 f96f 	bl	801924c <SUBGRF_ReadRegister>
 8017f6e:	4603      	mov	r3, r0
 8017f70:	f043 0304 	orr.w	r3, r3, #4
 8017f74:	b2db      	uxtb	r3, r3
 8017f76:	4619      	mov	r1, r3
 8017f78:	f240 7036 	movw	r0, #1846	; 0x736
 8017f7c:	f001 f952 	bl	8019224 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8017f80:	4b04      	ldr	r3, [pc, #16]	; (8017f94 <RadioSetRxGenericConfig+0x37c>)
 8017f82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017f86:	609a      	str	r2, [r3, #8]
        break;
 8017f88:	bf00      	nop
    }
    return status;
 8017f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	3730      	adds	r7, #48	; 0x30
 8017f90:	46bd      	mov	sp, r7
 8017f92:	bd80      	pop	{r7, pc}
 8017f94:	20001c2c 	.word	0x20001c2c
 8017f98:	20001c64 	.word	0x20001c64
 8017f9c:	20001c3a 	.word	0x20001c3a

08017fa0 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b08e      	sub	sp, #56	; 0x38
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	60b9      	str	r1, [r7, #8]
 8017fa8:	607b      	str	r3, [r7, #4]
 8017faa:	4603      	mov	r3, r0
 8017fac:	73fb      	strb	r3, [r7, #15]
 8017fae:	4613      	mov	r3, r2
 8017fb0:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8017fb2:	2300      	movs	r3, #0
 8017fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017fb6:	2300      	movs	r3, #0
 8017fb8:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8017fba:	f001 fc0a 	bl	80197d2 <RFW_DeInit>
    switch( modem )
 8017fbe:	7bfb      	ldrb	r3, [r7, #15]
 8017fc0:	2b03      	cmp	r3, #3
 8017fc2:	f200 8204 	bhi.w	80183ce <RadioSetTxGenericConfig+0x42e>
 8017fc6:	a201      	add	r2, pc, #4	; (adr r2, 8017fcc <RadioSetTxGenericConfig+0x2c>)
 8017fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017fcc:	08018151 	.word	0x08018151
 8017fd0:	08018299 	.word	0x08018299
 8017fd4:	08018391 	.word	0x08018391
 8017fd8:	08017fdd 	.word	0x08017fdd
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8017fdc:	68bb      	ldr	r3, [r7, #8]
 8017fde:	7c9b      	ldrb	r3, [r3, #18]
 8017fe0:	2b08      	cmp	r3, #8
 8017fe2:	d902      	bls.n	8017fea <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8017fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8017fe8:	e206      	b.n	80183f8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 8017fea:	68bb      	ldr	r3, [r7, #8]
 8017fec:	6899      	ldr	r1, [r3, #8]
 8017fee:	68bb      	ldr	r3, [r7, #8]
 8017ff0:	7c9b      	ldrb	r3, [r3, #18]
 8017ff2:	b29a      	uxth	r2, r3
 8017ff4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	f001 fcdd 	bl	80199b8 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8017ffe:	68bb      	ldr	r3, [r7, #8]
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	2b00      	cmp	r3, #0
 8018004:	d102      	bne.n	801800c <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8018006:	f04f 33ff 	mov.w	r3, #4294967295
 801800a:	e1f5      	b.n	80183f8 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 801800c:	68bb      	ldr	r3, [r7, #8]
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	f242 7210 	movw	r2, #10000	; 0x2710
 8018014:	4293      	cmp	r3, r2
 8018016:	d813      	bhi.n	8018040 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 8018018:	2302      	movs	r3, #2
 801801a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801801e:	4b99      	ldr	r3, [pc, #612]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 8018020:	2203      	movs	r2, #3
 8018022:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8018024:	4b97      	ldr	r3, [pc, #604]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 8018026:	2203      	movs	r2, #3
 8018028:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801802c:	68bb      	ldr	r3, [r7, #8]
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	4a94      	ldr	r2, [pc, #592]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 8018032:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8018034:	68bb      	ldr	r3, [r7, #8]
 8018036:	7cda      	ldrb	r2, [r3, #19]
 8018038:	4b92      	ldr	r3, [pc, #584]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 801803a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801803e:	e017      	b.n	8018070 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 8018040:	2300      	movs	r3, #0
 8018042:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018046:	4b8f      	ldr	r3, [pc, #572]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 8018048:	2200      	movs	r2, #0
 801804a:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801804c:	4b8d      	ldr	r3, [pc, #564]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 801804e:	2200      	movs	r2, #0
 8018050:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8018054:	68bb      	ldr	r3, [r7, #8]
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	4a8a      	ldr	r2, [pc, #552]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 801805a:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801805c:	68bb      	ldr	r3, [r7, #8]
 801805e:	7cda      	ldrb	r2, [r3, #19]
 8018060:	4b88      	ldr	r3, [pc, #544]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 8018062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8018066:	68bb      	ldr	r3, [r7, #8]
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	089b      	lsrs	r3, r3, #2
 801806c:	4a85      	ldr	r2, [pc, #532]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 801806e:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8018070:	68bb      	ldr	r3, [r7, #8]
 8018072:	685b      	ldr	r3, [r3, #4]
 8018074:	b29b      	uxth	r3, r3
 8018076:	00db      	lsls	r3, r3, #3
 8018078:	b29a      	uxth	r2, r3
 801807a:	4b82      	ldr	r3, [pc, #520]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 801807c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801807e:	4b81      	ldr	r3, [pc, #516]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 8018080:	2204      	movs	r2, #4
 8018082:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8018084:	68bb      	ldr	r3, [r7, #8]
 8018086:	7c9b      	ldrb	r3, [r3, #18]
 8018088:	00db      	lsls	r3, r3, #3
 801808a:	b2da      	uxtb	r2, r3
 801808c:	4b7d      	ldr	r3, [pc, #500]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 801808e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018090:	4b7c      	ldr	r3, [pc, #496]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 8018092:	2200      	movs	r2, #0
 8018094:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018096:	68bb      	ldr	r3, [r7, #8]
 8018098:	7d9b      	ldrb	r3, [r3, #22]
 801809a:	2b02      	cmp	r3, #2
 801809c:	d003      	beq.n	80180a6 <RadioSetTxGenericConfig+0x106>
 801809e:	68bb      	ldr	r3, [r7, #8]
 80180a0:	7d1b      	ldrb	r3, [r3, #20]
 80180a2:	2b02      	cmp	r3, #2
 80180a4:	d12b      	bne.n	80180fe <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80180a6:	68bb      	ldr	r3, [r7, #8]
 80180a8:	7d5b      	ldrb	r3, [r3, #21]
 80180aa:	2bf1      	cmp	r3, #241	; 0xf1
 80180ac:	d00a      	beq.n	80180c4 <RadioSetTxGenericConfig+0x124>
 80180ae:	68bb      	ldr	r3, [r7, #8]
 80180b0:	7d5b      	ldrb	r3, [r3, #21]
 80180b2:	2bf2      	cmp	r3, #242	; 0xf2
 80180b4:	d006      	beq.n	80180c4 <RadioSetTxGenericConfig+0x124>
 80180b6:	68bb      	ldr	r3, [r7, #8]
 80180b8:	7d5b      	ldrb	r3, [r3, #21]
 80180ba:	2b01      	cmp	r3, #1
 80180bc:	d002      	beq.n	80180c4 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 80180be:	f04f 33ff 	mov.w	r3, #4294967295
 80180c2:	e199      	b.n	80183f8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 80180c4:	68bb      	ldr	r3, [r7, #8]
 80180c6:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 80180c8:	2301      	movs	r3, #1
 80180ca:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80180ce:	4b6e      	ldr	r3, [pc, #440]	; (8018288 <RadioSetTxGenericConfig+0x2e8>)
 80180d0:	6819      	ldr	r1, [r3, #0]
 80180d2:	f107 0320 	add.w	r3, r7, #32
 80180d6:	4a6d      	ldr	r2, [pc, #436]	; (801828c <RadioSetTxGenericConfig+0x2ec>)
 80180d8:	4618      	mov	r0, r3
 80180da:	f001 fb6d 	bl	80197b8 <RFW_Init>
 80180de:	4603      	mov	r3, r0
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d002      	beq.n	80180ea <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 80180e4:	f04f 33ff 	mov.w	r3, #4294967295
 80180e8:	e186      	b.n	80183f8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80180ea:	4b66      	ldr	r3, [pc, #408]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 80180ec:	2200      	movs	r2, #0
 80180ee:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80180f0:	4b64      	ldr	r3, [pc, #400]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 80180f2:	2201      	movs	r2, #1
 80180f4:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80180f6:	4b63      	ldr	r3, [pc, #396]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 80180f8:	2200      	movs	r2, #0
 80180fa:	755a      	strb	r2, [r3, #21]
        {
 80180fc:	e00b      	b.n	8018116 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 80180fe:	68bb      	ldr	r3, [r7, #8]
 8018100:	7d5a      	ldrb	r2, [r3, #21]
 8018102:	4b60      	ldr	r3, [pc, #384]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 8018104:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8018106:	68bb      	ldr	r3, [r7, #8]
 8018108:	7d9a      	ldrb	r2, [r3, #22]
 801810a:	4b5e      	ldr	r3, [pc, #376]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 801810c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801810e:	68bb      	ldr	r3, [r7, #8]
 8018110:	7d1a      	ldrb	r2, [r3, #20]
 8018112:	4b5c      	ldr	r3, [pc, #368]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 8018114:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8018116:	f7ff f8a2 	bl	801725e <RadioStandby>
        RadioSetModem( radio_modem );
 801811a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801811e:	4618      	mov	r0, r3
 8018120:	f7fe fa4a 	bl	80165b8 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018124:	485a      	ldr	r0, [pc, #360]	; (8018290 <RadioSetTxGenericConfig+0x2f0>)
 8018126:	f000 fe63 	bl	8018df0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801812a:	485a      	ldr	r0, [pc, #360]	; (8018294 <RadioSetTxGenericConfig+0x2f4>)
 801812c:	f000 ff32 	bl	8018f94 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018130:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018134:	4618      	mov	r0, r3
 8018136:	f000 f9fa 	bl	801852e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801813a:	68bb      	ldr	r3, [r7, #8]
 801813c:	8a1b      	ldrh	r3, [r3, #16]
 801813e:	4618      	mov	r0, r3
 8018140:	f000 fa44 	bl	80185cc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 8018144:	68bb      	ldr	r3, [r7, #8]
 8018146:	899b      	ldrh	r3, [r3, #12]
 8018148:	4618      	mov	r0, r3
 801814a:	f000 fa1f 	bl	801858c <SUBGRF_SetCrcPolynomial>
        break;
 801814e:	e13f      	b.n	80183d0 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8018150:	68bb      	ldr	r3, [r7, #8]
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	2b00      	cmp	r3, #0
 8018156:	d102      	bne.n	801815e <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8018158:	f04f 33ff 	mov.w	r3, #4294967295
 801815c:	e14c      	b.n	80183f8 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801815e:	68bb      	ldr	r3, [r7, #8]
 8018160:	7c9b      	ldrb	r3, [r3, #18]
 8018162:	2b08      	cmp	r3, #8
 8018164:	d902      	bls.n	801816c <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8018166:	f04f 33ff 	mov.w	r3, #4294967295
 801816a:	e145      	b.n	80183f8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 801816c:	68bb      	ldr	r3, [r7, #8]
 801816e:	6899      	ldr	r1, [r3, #8]
 8018170:	68bb      	ldr	r3, [r7, #8]
 8018172:	7c9b      	ldrb	r3, [r3, #18]
 8018174:	b29a      	uxth	r2, r3
 8018176:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801817a:	4618      	mov	r0, r3
 801817c:	f001 fc1c 	bl	80199b8 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018180:	4b40      	ldr	r3, [pc, #256]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 8018182:	2200      	movs	r2, #0
 8018184:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018188:	68bb      	ldr	r3, [r7, #8]
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	4a3d      	ldr	r2, [pc, #244]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 801818e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8018190:	68bb      	ldr	r3, [r7, #8]
 8018192:	7cda      	ldrb	r2, [r3, #19]
 8018194:	4b3b      	ldr	r3, [pc, #236]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 8018196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801819a:	68bb      	ldr	r3, [r7, #8]
 801819c:	699b      	ldr	r3, [r3, #24]
 801819e:	4a39      	ldr	r2, [pc, #228]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 80181a0:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80181a2:	4b38      	ldr	r3, [pc, #224]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 80181a4:	2200      	movs	r2, #0
 80181a6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80181a8:	68bb      	ldr	r3, [r7, #8]
 80181aa:	685b      	ldr	r3, [r3, #4]
 80181ac:	b29b      	uxth	r3, r3
 80181ae:	00db      	lsls	r3, r3, #3
 80181b0:	b29a      	uxth	r2, r3
 80181b2:	4b34      	ldr	r3, [pc, #208]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 80181b4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80181b6:	4b33      	ldr	r3, [pc, #204]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 80181b8:	2204      	movs	r2, #4
 80181ba:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80181bc:	68bb      	ldr	r3, [r7, #8]
 80181be:	7c9b      	ldrb	r3, [r3, #18]
 80181c0:	00db      	lsls	r3, r3, #3
 80181c2:	b2da      	uxtb	r2, r3
 80181c4:	4b2f      	ldr	r3, [pc, #188]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 80181c6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80181c8:	4b2e      	ldr	r3, [pc, #184]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 80181ca:	2200      	movs	r2, #0
 80181cc:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80181ce:	68bb      	ldr	r3, [r7, #8]
 80181d0:	7d9b      	ldrb	r3, [r3, #22]
 80181d2:	2b02      	cmp	r3, #2
 80181d4:	d003      	beq.n	80181de <RadioSetTxGenericConfig+0x23e>
 80181d6:	68bb      	ldr	r3, [r7, #8]
 80181d8:	7d1b      	ldrb	r3, [r3, #20]
 80181da:	2b02      	cmp	r3, #2
 80181dc:	d12a      	bne.n	8018234 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80181de:	68bb      	ldr	r3, [r7, #8]
 80181e0:	7d5b      	ldrb	r3, [r3, #21]
 80181e2:	2bf1      	cmp	r3, #241	; 0xf1
 80181e4:	d00a      	beq.n	80181fc <RadioSetTxGenericConfig+0x25c>
 80181e6:	68bb      	ldr	r3, [r7, #8]
 80181e8:	7d5b      	ldrb	r3, [r3, #21]
 80181ea:	2bf2      	cmp	r3, #242	; 0xf2
 80181ec:	d006      	beq.n	80181fc <RadioSetTxGenericConfig+0x25c>
 80181ee:	68bb      	ldr	r3, [r7, #8]
 80181f0:	7d5b      	ldrb	r3, [r3, #21]
 80181f2:	2b01      	cmp	r3, #1
 80181f4:	d002      	beq.n	80181fc <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 80181f6:	f04f 33ff 	mov.w	r3, #4294967295
 80181fa:	e0fd      	b.n	80183f8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 80181fc:	2301      	movs	r3, #1
 80181fe:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8018200:	68bb      	ldr	r3, [r7, #8]
 8018202:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8018204:	4b20      	ldr	r3, [pc, #128]	; (8018288 <RadioSetTxGenericConfig+0x2e8>)
 8018206:	6819      	ldr	r1, [r3, #0]
 8018208:	f107 0314 	add.w	r3, r7, #20
 801820c:	4a1f      	ldr	r2, [pc, #124]	; (801828c <RadioSetTxGenericConfig+0x2ec>)
 801820e:	4618      	mov	r0, r3
 8018210:	f001 fad2 	bl	80197b8 <RFW_Init>
 8018214:	4603      	mov	r3, r0
 8018216:	2b00      	cmp	r3, #0
 8018218:	d002      	beq.n	8018220 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 801821a:	f04f 33ff 	mov.w	r3, #4294967295
 801821e:	e0eb      	b.n	80183f8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018220:	4b18      	ldr	r3, [pc, #96]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 8018222:	2200      	movs	r2, #0
 8018224:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8018226:	4b17      	ldr	r3, [pc, #92]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 8018228:	2201      	movs	r2, #1
 801822a:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801822c:	4b15      	ldr	r3, [pc, #84]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 801822e:	2200      	movs	r2, #0
 8018230:	755a      	strb	r2, [r3, #21]
        {
 8018232:	e00b      	b.n	801824c <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018234:	68bb      	ldr	r3, [r7, #8]
 8018236:	7d5a      	ldrb	r2, [r3, #21]
 8018238:	4b12      	ldr	r3, [pc, #72]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 801823a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801823c:	68bb      	ldr	r3, [r7, #8]
 801823e:	7d9a      	ldrb	r2, [r3, #22]
 8018240:	4b10      	ldr	r3, [pc, #64]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 8018242:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8018244:	68bb      	ldr	r3, [r7, #8]
 8018246:	7d1a      	ldrb	r2, [r3, #20]
 8018248:	4b0e      	ldr	r3, [pc, #56]	; (8018284 <RadioSetTxGenericConfig+0x2e4>)
 801824a:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801824c:	f7ff f807 	bl	801725e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018250:	2000      	movs	r0, #0
 8018252:	f7fe f9b1 	bl	80165b8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018256:	480e      	ldr	r0, [pc, #56]	; (8018290 <RadioSetTxGenericConfig+0x2f0>)
 8018258:	f000 fdca 	bl	8018df0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801825c:	480d      	ldr	r0, [pc, #52]	; (8018294 <RadioSetTxGenericConfig+0x2f4>)
 801825e:	f000 fe99 	bl	8018f94 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018266:	4618      	mov	r0, r3
 8018268:	f000 f961 	bl	801852e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801826c:	68bb      	ldr	r3, [r7, #8]
 801826e:	8a1b      	ldrh	r3, [r3, #16]
 8018270:	4618      	mov	r0, r3
 8018272:	f000 f9ab 	bl	80185cc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8018276:	68bb      	ldr	r3, [r7, #8]
 8018278:	899b      	ldrh	r3, [r3, #12]
 801827a:	4618      	mov	r0, r3
 801827c:	f000 f986 	bl	801858c <SUBGRF_SetCrcPolynomial>
        break;
 8018280:	e0a6      	b.n	80183d0 <RadioSetTxGenericConfig+0x430>
 8018282:	bf00      	nop
 8018284:	20001c2c 	.word	0x20001c2c
 8018288:	20001c28 	.word	0x20001c28
 801828c:	20001c88 	.word	0x20001c88
 8018290:	20001c64 	.word	0x20001c64
 8018294:	20001c3a 	.word	0x20001c3a
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018298:	4b59      	ldr	r3, [pc, #356]	; (8018400 <RadioSetTxGenericConfig+0x460>)
 801829a:	2201      	movs	r2, #1
 801829c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80182a0:	68bb      	ldr	r3, [r7, #8]
 80182a2:	781a      	ldrb	r2, [r3, #0]
 80182a4:	4b56      	ldr	r3, [pc, #344]	; (8018400 <RadioSetTxGenericConfig+0x460>)
 80182a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80182aa:	68bb      	ldr	r3, [r7, #8]
 80182ac:	785a      	ldrb	r2, [r3, #1]
 80182ae:	4b54      	ldr	r3, [pc, #336]	; (8018400 <RadioSetTxGenericConfig+0x460>)
 80182b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80182b4:	68bb      	ldr	r3, [r7, #8]
 80182b6:	789a      	ldrb	r2, [r3, #2]
 80182b8:	4b51      	ldr	r3, [pc, #324]	; (8018400 <RadioSetTxGenericConfig+0x460>)
 80182ba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80182be:	68bb      	ldr	r3, [r7, #8]
 80182c0:	78db      	ldrb	r3, [r3, #3]
 80182c2:	2b02      	cmp	r3, #2
 80182c4:	d010      	beq.n	80182e8 <RadioSetTxGenericConfig+0x348>
 80182c6:	2b02      	cmp	r3, #2
 80182c8:	dc20      	bgt.n	801830c <RadioSetTxGenericConfig+0x36c>
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d002      	beq.n	80182d4 <RadioSetTxGenericConfig+0x334>
 80182ce:	2b01      	cmp	r3, #1
 80182d0:	d005      	beq.n	80182de <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 80182d2:	e01b      	b.n	801830c <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80182d4:	4b4a      	ldr	r3, [pc, #296]	; (8018400 <RadioSetTxGenericConfig+0x460>)
 80182d6:	2200      	movs	r2, #0
 80182d8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80182dc:	e017      	b.n	801830e <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80182de:	4b48      	ldr	r3, [pc, #288]	; (8018400 <RadioSetTxGenericConfig+0x460>)
 80182e0:	2201      	movs	r2, #1
 80182e2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80182e6:	e012      	b.n	801830e <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80182e8:	68bb      	ldr	r3, [r7, #8]
 80182ea:	781b      	ldrb	r3, [r3, #0]
 80182ec:	2b0b      	cmp	r3, #11
 80182ee:	d003      	beq.n	80182f8 <RadioSetTxGenericConfig+0x358>
 80182f0:	68bb      	ldr	r3, [r7, #8]
 80182f2:	781b      	ldrb	r3, [r3, #0]
 80182f4:	2b0c      	cmp	r3, #12
 80182f6:	d104      	bne.n	8018302 <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80182f8:	4b41      	ldr	r3, [pc, #260]	; (8018400 <RadioSetTxGenericConfig+0x460>)
 80182fa:	2201      	movs	r2, #1
 80182fc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018300:	e005      	b.n	801830e <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018302:	4b3f      	ldr	r3, [pc, #252]	; (8018400 <RadioSetTxGenericConfig+0x460>)
 8018304:	2200      	movs	r2, #0
 8018306:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801830a:	e000      	b.n	801830e <RadioSetTxGenericConfig+0x36e>
            break;
 801830c:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801830e:	4b3c      	ldr	r3, [pc, #240]	; (8018400 <RadioSetTxGenericConfig+0x460>)
 8018310:	2201      	movs	r2, #1
 8018312:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8018314:	68bb      	ldr	r3, [r7, #8]
 8018316:	889a      	ldrh	r2, [r3, #4]
 8018318:	4b39      	ldr	r3, [pc, #228]	; (8018400 <RadioSetTxGenericConfig+0x460>)
 801831a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801831c:	68bb      	ldr	r3, [r7, #8]
 801831e:	799a      	ldrb	r2, [r3, #6]
 8018320:	4b37      	ldr	r3, [pc, #220]	; (8018400 <RadioSetTxGenericConfig+0x460>)
 8018322:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8018324:	68bb      	ldr	r3, [r7, #8]
 8018326:	79da      	ldrb	r2, [r3, #7]
 8018328:	4b35      	ldr	r3, [pc, #212]	; (8018400 <RadioSetTxGenericConfig+0x460>)
 801832a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801832e:	68bb      	ldr	r3, [r7, #8]
 8018330:	7a1a      	ldrb	r2, [r3, #8]
 8018332:	4b33      	ldr	r3, [pc, #204]	; (8018400 <RadioSetTxGenericConfig+0x460>)
 8018334:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8018338:	f7fe ff91 	bl	801725e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801833c:	2001      	movs	r0, #1
 801833e:	f7fe f93b 	bl	80165b8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018342:	4830      	ldr	r0, [pc, #192]	; (8018404 <RadioSetTxGenericConfig+0x464>)
 8018344:	f000 fd54 	bl	8018df0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018348:	482f      	ldr	r0, [pc, #188]	; (8018408 <RadioSetTxGenericConfig+0x468>)
 801834a:	f000 fe23 	bl	8018f94 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801834e:	4b2c      	ldr	r3, [pc, #176]	; (8018400 <RadioSetTxGenericConfig+0x460>)
 8018350:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8018354:	2b06      	cmp	r3, #6
 8018356:	d10d      	bne.n	8018374 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8018358:	f640 0089 	movw	r0, #2185	; 0x889
 801835c:	f000 ff76 	bl	801924c <SUBGRF_ReadRegister>
 8018360:	4603      	mov	r3, r0
 8018362:	f023 0304 	bic.w	r3, r3, #4
 8018366:	b2db      	uxtb	r3, r3
 8018368:	4619      	mov	r1, r3
 801836a:	f640 0089 	movw	r0, #2185	; 0x889
 801836e:	f000 ff59 	bl	8019224 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 8018372:	e02d      	b.n	80183d0 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8018374:	f640 0089 	movw	r0, #2185	; 0x889
 8018378:	f000 ff68 	bl	801924c <SUBGRF_ReadRegister>
 801837c:	4603      	mov	r3, r0
 801837e:	f043 0304 	orr.w	r3, r3, #4
 8018382:	b2db      	uxtb	r3, r3
 8018384:	4619      	mov	r1, r3
 8018386:	f640 0089 	movw	r0, #2185	; 0x889
 801838a:	f000 ff4b 	bl	8019224 <SUBGRF_WriteRegister>
        break;
 801838e:	e01f      	b.n	80183d0 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8018390:	68bb      	ldr	r3, [r7, #8]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	2b00      	cmp	r3, #0
 8018396:	d004      	beq.n	80183a2 <RadioSetTxGenericConfig+0x402>
 8018398:	68bb      	ldr	r3, [r7, #8]
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80183a0:	d902      	bls.n	80183a8 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 80183a2:	f04f 33ff 	mov.w	r3, #4294967295
 80183a6:	e027      	b.n	80183f8 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 80183a8:	2003      	movs	r0, #3
 80183aa:	f7fe f905 	bl	80165b8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80183ae:	4b14      	ldr	r3, [pc, #80]	; (8018400 <RadioSetTxGenericConfig+0x460>)
 80183b0:	2202      	movs	r2, #2
 80183b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80183b6:	68bb      	ldr	r3, [r7, #8]
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	4a11      	ldr	r2, [pc, #68]	; (8018400 <RadioSetTxGenericConfig+0x460>)
 80183bc:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80183be:	4b10      	ldr	r3, [pc, #64]	; (8018400 <RadioSetTxGenericConfig+0x460>)
 80183c0:	2216      	movs	r2, #22
 80183c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80183c6:	480f      	ldr	r0, [pc, #60]	; (8018404 <RadioSetTxGenericConfig+0x464>)
 80183c8:	f000 fd12 	bl	8018df0 <SUBGRF_SetModulationParams>
        break;
 80183cc:	e000      	b.n	80183d0 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 80183ce:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80183d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80183d4:	4618      	mov	r0, r3
 80183d6:	f001 f841 	bl	801945c <SUBGRF_SetRfTxPower>
 80183da:	4603      	mov	r3, r0
 80183dc:	461a      	mov	r2, r3
 80183de:	4b08      	ldr	r3, [pc, #32]	; (8018400 <RadioSetTxGenericConfig+0x460>)
 80183e0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80183e4:	4b06      	ldr	r3, [pc, #24]	; (8018400 <RadioSetTxGenericConfig+0x460>)
 80183e6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80183ea:	4618      	mov	r0, r3
 80183ec:	f001 fa05 	bl	80197fa <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80183f0:	4a03      	ldr	r2, [pc, #12]	; (8018400 <RadioSetTxGenericConfig+0x460>)
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	6053      	str	r3, [r2, #4]
    return 0;
 80183f6:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80183f8:	4618      	mov	r0, r3
 80183fa:	3738      	adds	r7, #56	; 0x38
 80183fc:	46bd      	mov	sp, r7
 80183fe:	bd80      	pop	{r7, pc}
 8018400:	20001c2c 	.word	0x20001c2c
 8018404:	20001c64 	.word	0x20001c64
 8018408:	20001c3a 	.word	0x20001c3a

0801840c <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801840c:	b580      	push	{r7, lr}
 801840e:	b084      	sub	sp, #16
 8018410:	af00      	add	r7, sp, #0
 8018412:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	2b00      	cmp	r3, #0
 8018418:	d002      	beq.n	8018420 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801841a:	4a1a      	ldr	r2, [pc, #104]	; (8018484 <SUBGRF_Init+0x78>)
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8018420:	f7e9 fad0 	bl	80019c4 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018424:	2002      	movs	r0, #2
 8018426:	f001 f8e5 	bl	80195f4 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801842a:	4b17      	ldr	r3, [pc, #92]	; (8018488 <SUBGRF_Init+0x7c>)
 801842c:	2200      	movs	r2, #0
 801842e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8018430:	2000      	movs	r0, #0
 8018432:	f000 f977 	bl	8018724 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8018436:	f7f2 f847 	bl	800a4c8 <RBI_IsTCXO>
 801843a:	4603      	mov	r3, r0
 801843c:	2b01      	cmp	r3, #1
 801843e:	d10e      	bne.n	801845e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8018440:	2140      	movs	r1, #64	; 0x40
 8018442:	2001      	movs	r0, #1
 8018444:	f000 fb78 	bl	8018b38 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8018448:	2100      	movs	r1, #0
 801844a:	f640 1011 	movw	r0, #2321	; 0x911
 801844e:	f000 fee9 	bl	8019224 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8018452:	237f      	movs	r3, #127	; 0x7f
 8018454:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8018456:	7b38      	ldrb	r0, [r7, #12]
 8018458:	f000 fa85 	bl	8018966 <SUBGRF_Calibrate>
 801845c:	e009      	b.n	8018472 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801845e:	2120      	movs	r1, #32
 8018460:	f640 1011 	movw	r0, #2321	; 0x911
 8018464:	f000 fede 	bl	8019224 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018468:	2120      	movs	r1, #32
 801846a:	f640 1012 	movw	r0, #2322	; 0x912
 801846e:	f000 fed9 	bl	8019224 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8018472:	f7f2 f80d 	bl	800a490 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8018476:	4b05      	ldr	r3, [pc, #20]	; (801848c <SUBGRF_Init+0x80>)
 8018478:	2201      	movs	r2, #1
 801847a:	701a      	strb	r2, [r3, #0]
}
 801847c:	bf00      	nop
 801847e:	3710      	adds	r7, #16
 8018480:	46bd      	mov	sp, r7
 8018482:	bd80      	pop	{r7, pc}
 8018484:	20001cc4 	.word	0x20001cc4
 8018488:	20001cc0 	.word	0x20001cc0
 801848c:	20001cb8 	.word	0x20001cb8

08018490 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8018490:	b480      	push	{r7}
 8018492:	af00      	add	r7, sp, #0
    return OperatingMode;
 8018494:	4b02      	ldr	r3, [pc, #8]	; (80184a0 <SUBGRF_GetOperatingMode+0x10>)
 8018496:	781b      	ldrb	r3, [r3, #0]
}
 8018498:	4618      	mov	r0, r3
 801849a:	46bd      	mov	sp, r7
 801849c:	bc80      	pop	{r7}
 801849e:	4770      	bx	lr
 80184a0:	20001cb8 	.word	0x20001cb8

080184a4 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 80184a4:	b580      	push	{r7, lr}
 80184a6:	b082      	sub	sp, #8
 80184a8:	af00      	add	r7, sp, #0
 80184aa:	6078      	str	r0, [r7, #4]
 80184ac:	460b      	mov	r3, r1
 80184ae:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80184b0:	78fb      	ldrb	r3, [r7, #3]
 80184b2:	461a      	mov	r2, r3
 80184b4:	6879      	ldr	r1, [r7, #4]
 80184b6:	2000      	movs	r0, #0
 80184b8:	f000 ff20 	bl	80192fc <SUBGRF_WriteBuffer>
}
 80184bc:	bf00      	nop
 80184be:	3708      	adds	r7, #8
 80184c0:	46bd      	mov	sp, r7
 80184c2:	bd80      	pop	{r7, pc}

080184c4 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80184c4:	b580      	push	{r7, lr}
 80184c6:	b086      	sub	sp, #24
 80184c8:	af00      	add	r7, sp, #0
 80184ca:	60f8      	str	r0, [r7, #12]
 80184cc:	60b9      	str	r1, [r7, #8]
 80184ce:	4613      	mov	r3, r2
 80184d0:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80184d2:	2300      	movs	r3, #0
 80184d4:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 80184d6:	f107 0317 	add.w	r3, r7, #23
 80184da:	4619      	mov	r1, r3
 80184dc:	68b8      	ldr	r0, [r7, #8]
 80184de:	f000 fe23 	bl	8019128 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80184e2:	68bb      	ldr	r3, [r7, #8]
 80184e4:	781b      	ldrb	r3, [r3, #0]
 80184e6:	79fa      	ldrb	r2, [r7, #7]
 80184e8:	429a      	cmp	r2, r3
 80184ea:	d201      	bcs.n	80184f0 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80184ec:	2301      	movs	r3, #1
 80184ee:	e007      	b.n	8018500 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80184f0:	7df8      	ldrb	r0, [r7, #23]
 80184f2:	68bb      	ldr	r3, [r7, #8]
 80184f4:	781b      	ldrb	r3, [r3, #0]
 80184f6:	461a      	mov	r2, r3
 80184f8:	68f9      	ldr	r1, [r7, #12]
 80184fa:	f000 ff21 	bl	8019340 <SUBGRF_ReadBuffer>

    return 0;
 80184fe:	2300      	movs	r3, #0
}
 8018500:	4618      	mov	r0, r3
 8018502:	3718      	adds	r7, #24
 8018504:	46bd      	mov	sp, r7
 8018506:	bd80      	pop	{r7, pc}

08018508 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8018508:	b580      	push	{r7, lr}
 801850a:	b084      	sub	sp, #16
 801850c:	af00      	add	r7, sp, #0
 801850e:	60f8      	str	r0, [r7, #12]
 8018510:	460b      	mov	r3, r1
 8018512:	607a      	str	r2, [r7, #4]
 8018514:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8018516:	7afb      	ldrb	r3, [r7, #11]
 8018518:	4619      	mov	r1, r3
 801851a:	68f8      	ldr	r0, [r7, #12]
 801851c:	f7ff ffc2 	bl	80184a4 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8018520:	6878      	ldr	r0, [r7, #4]
 8018522:	f000 f91b 	bl	801875c <SUBGRF_SetTx>
}
 8018526:	bf00      	nop
 8018528:	3710      	adds	r7, #16
 801852a:	46bd      	mov	sp, r7
 801852c:	bd80      	pop	{r7, pc}

0801852e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801852e:	b580      	push	{r7, lr}
 8018530:	b082      	sub	sp, #8
 8018532:	af00      	add	r7, sp, #0
 8018534:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8018536:	2208      	movs	r2, #8
 8018538:	6879      	ldr	r1, [r7, #4]
 801853a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801853e:	f000 fe99 	bl	8019274 <SUBGRF_WriteRegisters>
    return 0;
 8018542:	2300      	movs	r3, #0
}
 8018544:	4618      	mov	r0, r3
 8018546:	3708      	adds	r7, #8
 8018548:	46bd      	mov	sp, r7
 801854a:	bd80      	pop	{r7, pc}

0801854c <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801854c:	b580      	push	{r7, lr}
 801854e:	b084      	sub	sp, #16
 8018550:	af00      	add	r7, sp, #0
 8018552:	4603      	mov	r3, r0
 8018554:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8018556:	88fb      	ldrh	r3, [r7, #6]
 8018558:	0a1b      	lsrs	r3, r3, #8
 801855a:	b29b      	uxth	r3, r3
 801855c:	b2db      	uxtb	r3, r3
 801855e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8018560:	88fb      	ldrh	r3, [r7, #6]
 8018562:	b2db      	uxtb	r3, r3
 8018564:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018566:	f000 fb6b 	bl	8018c40 <SUBGRF_GetPacketType>
 801856a:	4603      	mov	r3, r0
 801856c:	2b00      	cmp	r3, #0
 801856e:	d108      	bne.n	8018582 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8018570:	f107 030c 	add.w	r3, r7, #12
 8018574:	2202      	movs	r2, #2
 8018576:	4619      	mov	r1, r3
 8018578:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801857c:	f000 fe7a 	bl	8019274 <SUBGRF_WriteRegisters>
            break;
 8018580:	e000      	b.n	8018584 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8018582:	bf00      	nop
    }
}
 8018584:	bf00      	nop
 8018586:	3710      	adds	r7, #16
 8018588:	46bd      	mov	sp, r7
 801858a:	bd80      	pop	{r7, pc}

0801858c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801858c:	b580      	push	{r7, lr}
 801858e:	b084      	sub	sp, #16
 8018590:	af00      	add	r7, sp, #0
 8018592:	4603      	mov	r3, r0
 8018594:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8018596:	88fb      	ldrh	r3, [r7, #6]
 8018598:	0a1b      	lsrs	r3, r3, #8
 801859a:	b29b      	uxth	r3, r3
 801859c:	b2db      	uxtb	r3, r3
 801859e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80185a0:	88fb      	ldrh	r3, [r7, #6]
 80185a2:	b2db      	uxtb	r3, r3
 80185a4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80185a6:	f000 fb4b 	bl	8018c40 <SUBGRF_GetPacketType>
 80185aa:	4603      	mov	r3, r0
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	d108      	bne.n	80185c2 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80185b0:	f107 030c 	add.w	r3, r7, #12
 80185b4:	2202      	movs	r2, #2
 80185b6:	4619      	mov	r1, r3
 80185b8:	f240 60be 	movw	r0, #1726	; 0x6be
 80185bc:	f000 fe5a 	bl	8019274 <SUBGRF_WriteRegisters>
            break;
 80185c0:	e000      	b.n	80185c4 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80185c2:	bf00      	nop
    }
}
 80185c4:	bf00      	nop
 80185c6:	3710      	adds	r7, #16
 80185c8:	46bd      	mov	sp, r7
 80185ca:	bd80      	pop	{r7, pc}

080185cc <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 80185cc:	b580      	push	{r7, lr}
 80185ce:	b084      	sub	sp, #16
 80185d0:	af00      	add	r7, sp, #0
 80185d2:	4603      	mov	r3, r0
 80185d4:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 80185d6:	2300      	movs	r3, #0
 80185d8:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 80185da:	f000 fb31 	bl	8018c40 <SUBGRF_GetPacketType>
 80185de:	4603      	mov	r3, r0
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d121      	bne.n	8018628 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80185e4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80185e8:	f000 fe30 	bl	801924c <SUBGRF_ReadRegister>
 80185ec:	4603      	mov	r3, r0
 80185ee:	f023 0301 	bic.w	r3, r3, #1
 80185f2:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80185f4:	88fb      	ldrh	r3, [r7, #6]
 80185f6:	0a1b      	lsrs	r3, r3, #8
 80185f8:	b29b      	uxth	r3, r3
 80185fa:	b25b      	sxtb	r3, r3
 80185fc:	f003 0301 	and.w	r3, r3, #1
 8018600:	b25a      	sxtb	r2, r3
 8018602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018606:	4313      	orrs	r3, r2
 8018608:	b25b      	sxtb	r3, r3
 801860a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801860c:	7bfb      	ldrb	r3, [r7, #15]
 801860e:	4619      	mov	r1, r3
 8018610:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8018614:	f000 fe06 	bl	8019224 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8018618:	88fb      	ldrh	r3, [r7, #6]
 801861a:	b2db      	uxtb	r3, r3
 801861c:	4619      	mov	r1, r3
 801861e:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8018622:	f000 fdff 	bl	8019224 <SUBGRF_WriteRegister>
            break;
 8018626:	e000      	b.n	801862a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8018628:	bf00      	nop
    }
}
 801862a:	bf00      	nop
 801862c:	3710      	adds	r7, #16
 801862e:	46bd      	mov	sp, r7
 8018630:	bd80      	pop	{r7, pc}

08018632 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8018632:	b580      	push	{r7, lr}
 8018634:	b082      	sub	sp, #8
 8018636:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8018638:	2300      	movs	r3, #0
 801863a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801863c:	2300      	movs	r3, #0
 801863e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8018640:	2300      	movs	r3, #0
 8018642:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8018644:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018648:	f000 fe00 	bl	801924c <SUBGRF_ReadRegister>
 801864c:	4603      	mov	r3, r0
 801864e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8018650:	79fb      	ldrb	r3, [r7, #7]
 8018652:	f023 0301 	bic.w	r3, r3, #1
 8018656:	b2db      	uxtb	r3, r3
 8018658:	4619      	mov	r1, r3
 801865a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801865e:	f000 fde1 	bl	8019224 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8018662:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018666:	f000 fdf1 	bl	801924c <SUBGRF_ReadRegister>
 801866a:	4603      	mov	r3, r0
 801866c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801866e:	79bb      	ldrb	r3, [r7, #6]
 8018670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018674:	b2db      	uxtb	r3, r3
 8018676:	4619      	mov	r1, r3
 8018678:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801867c:	f000 fdd2 	bl	8019224 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8018680:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8018684:	f000 f88a 	bl	801879c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8018688:	463b      	mov	r3, r7
 801868a:	2204      	movs	r2, #4
 801868c:	4619      	mov	r1, r3
 801868e:	f640 0019 	movw	r0, #2073	; 0x819
 8018692:	f000 fe11 	bl	80192b8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8018696:	2000      	movs	r0, #0
 8018698:	f000 f844 	bl	8018724 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801869c:	79fb      	ldrb	r3, [r7, #7]
 801869e:	4619      	mov	r1, r3
 80186a0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80186a4:	f000 fdbe 	bl	8019224 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80186a8:	79bb      	ldrb	r3, [r7, #6]
 80186aa:	4619      	mov	r1, r3
 80186ac:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80186b0:	f000 fdb8 	bl	8019224 <SUBGRF_WriteRegister>

    return number;
 80186b4:	683b      	ldr	r3, [r7, #0]
}
 80186b6:	4618      	mov	r0, r3
 80186b8:	3708      	adds	r7, #8
 80186ba:	46bd      	mov	sp, r7
 80186bc:	bd80      	pop	{r7, pc}
	...

080186c0 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b084      	sub	sp, #16
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80186c8:	2000      	movs	r0, #0
 80186ca:	f7f1 fee8 	bl	800a49e <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80186ce:	2002      	movs	r0, #2
 80186d0:	f000 ff90 	bl	80195f4 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80186d4:	793b      	ldrb	r3, [r7, #4]
 80186d6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80186da:	b2db      	uxtb	r3, r3
 80186dc:	009b      	lsls	r3, r3, #2
 80186de:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80186e0:	793b      	ldrb	r3, [r7, #4]
 80186e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80186e6:	b2db      	uxtb	r3, r3
 80186e8:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80186ea:	b25b      	sxtb	r3, r3
 80186ec:	4313      	orrs	r3, r2
 80186ee:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80186f0:	793b      	ldrb	r3, [r7, #4]
 80186f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80186f6:	b2db      	uxtb	r3, r3
 80186f8:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80186fa:	4313      	orrs	r3, r2
 80186fc:	b25b      	sxtb	r3, r3
 80186fe:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018700:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8018702:	f107 030f 	add.w	r3, r7, #15
 8018706:	2201      	movs	r2, #1
 8018708:	4619      	mov	r1, r3
 801870a:	2084      	movs	r0, #132	; 0x84
 801870c:	f000 fe3a 	bl	8019384 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8018710:	4b03      	ldr	r3, [pc, #12]	; (8018720 <SUBGRF_SetSleep+0x60>)
 8018712:	2200      	movs	r2, #0
 8018714:	701a      	strb	r2, [r3, #0]
}
 8018716:	bf00      	nop
 8018718:	3710      	adds	r7, #16
 801871a:	46bd      	mov	sp, r7
 801871c:	bd80      	pop	{r7, pc}
 801871e:	bf00      	nop
 8018720:	20001cb8 	.word	0x20001cb8

08018724 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8018724:	b580      	push	{r7, lr}
 8018726:	b082      	sub	sp, #8
 8018728:	af00      	add	r7, sp, #0
 801872a:	4603      	mov	r3, r0
 801872c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801872e:	1dfb      	adds	r3, r7, #7
 8018730:	2201      	movs	r2, #1
 8018732:	4619      	mov	r1, r3
 8018734:	2080      	movs	r0, #128	; 0x80
 8018736:	f000 fe25 	bl	8019384 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801873a:	79fb      	ldrb	r3, [r7, #7]
 801873c:	2b00      	cmp	r3, #0
 801873e:	d103      	bne.n	8018748 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8018740:	4b05      	ldr	r3, [pc, #20]	; (8018758 <SUBGRF_SetStandby+0x34>)
 8018742:	2201      	movs	r2, #1
 8018744:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8018746:	e002      	b.n	801874e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8018748:	4b03      	ldr	r3, [pc, #12]	; (8018758 <SUBGRF_SetStandby+0x34>)
 801874a:	2202      	movs	r2, #2
 801874c:	701a      	strb	r2, [r3, #0]
}
 801874e:	bf00      	nop
 8018750:	3708      	adds	r7, #8
 8018752:	46bd      	mov	sp, r7
 8018754:	bd80      	pop	{r7, pc}
 8018756:	bf00      	nop
 8018758:	20001cb8 	.word	0x20001cb8

0801875c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801875c:	b580      	push	{r7, lr}
 801875e:	b084      	sub	sp, #16
 8018760:	af00      	add	r7, sp, #0
 8018762:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8018764:	4b0c      	ldr	r3, [pc, #48]	; (8018798 <SUBGRF_SetTx+0x3c>)
 8018766:	2204      	movs	r2, #4
 8018768:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	0c1b      	lsrs	r3, r3, #16
 801876e:	b2db      	uxtb	r3, r3
 8018770:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	0a1b      	lsrs	r3, r3, #8
 8018776:	b2db      	uxtb	r3, r3
 8018778:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	b2db      	uxtb	r3, r3
 801877e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8018780:	f107 030c 	add.w	r3, r7, #12
 8018784:	2203      	movs	r2, #3
 8018786:	4619      	mov	r1, r3
 8018788:	2083      	movs	r0, #131	; 0x83
 801878a:	f000 fdfb 	bl	8019384 <SUBGRF_WriteCommand>
}
 801878e:	bf00      	nop
 8018790:	3710      	adds	r7, #16
 8018792:	46bd      	mov	sp, r7
 8018794:	bd80      	pop	{r7, pc}
 8018796:	bf00      	nop
 8018798:	20001cb8 	.word	0x20001cb8

0801879c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801879c:	b580      	push	{r7, lr}
 801879e:	b084      	sub	sp, #16
 80187a0:	af00      	add	r7, sp, #0
 80187a2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80187a4:	4b0c      	ldr	r3, [pc, #48]	; (80187d8 <SUBGRF_SetRx+0x3c>)
 80187a6:	2205      	movs	r2, #5
 80187a8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	0c1b      	lsrs	r3, r3, #16
 80187ae:	b2db      	uxtb	r3, r3
 80187b0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	0a1b      	lsrs	r3, r3, #8
 80187b6:	b2db      	uxtb	r3, r3
 80187b8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	b2db      	uxtb	r3, r3
 80187be:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80187c0:	f107 030c 	add.w	r3, r7, #12
 80187c4:	2203      	movs	r2, #3
 80187c6:	4619      	mov	r1, r3
 80187c8:	2082      	movs	r0, #130	; 0x82
 80187ca:	f000 fddb 	bl	8019384 <SUBGRF_WriteCommand>
}
 80187ce:	bf00      	nop
 80187d0:	3710      	adds	r7, #16
 80187d2:	46bd      	mov	sp, r7
 80187d4:	bd80      	pop	{r7, pc}
 80187d6:	bf00      	nop
 80187d8:	20001cb8 	.word	0x20001cb8

080187dc <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 80187dc:	b580      	push	{r7, lr}
 80187de:	b084      	sub	sp, #16
 80187e0:	af00      	add	r7, sp, #0
 80187e2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80187e4:	4b0e      	ldr	r3, [pc, #56]	; (8018820 <SUBGRF_SetRxBoosted+0x44>)
 80187e6:	2205      	movs	r2, #5
 80187e8:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80187ea:	2197      	movs	r1, #151	; 0x97
 80187ec:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80187f0:	f000 fd18 	bl	8019224 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	0c1b      	lsrs	r3, r3, #16
 80187f8:	b2db      	uxtb	r3, r3
 80187fa:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	0a1b      	lsrs	r3, r3, #8
 8018800:	b2db      	uxtb	r3, r3
 8018802:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	b2db      	uxtb	r3, r3
 8018808:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801880a:	f107 030c 	add.w	r3, r7, #12
 801880e:	2203      	movs	r2, #3
 8018810:	4619      	mov	r1, r3
 8018812:	2082      	movs	r0, #130	; 0x82
 8018814:	f000 fdb6 	bl	8019384 <SUBGRF_WriteCommand>
}
 8018818:	bf00      	nop
 801881a:	3710      	adds	r7, #16
 801881c:	46bd      	mov	sp, r7
 801881e:	bd80      	pop	{r7, pc}
 8018820:	20001cb8 	.word	0x20001cb8

08018824 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018824:	b580      	push	{r7, lr}
 8018826:	b084      	sub	sp, #16
 8018828:	af00      	add	r7, sp, #0
 801882a:	6078      	str	r0, [r7, #4]
 801882c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	0c1b      	lsrs	r3, r3, #16
 8018832:	b2db      	uxtb	r3, r3
 8018834:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	0a1b      	lsrs	r3, r3, #8
 801883a:	b2db      	uxtb	r3, r3
 801883c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	b2db      	uxtb	r3, r3
 8018842:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8018844:	683b      	ldr	r3, [r7, #0]
 8018846:	0c1b      	lsrs	r3, r3, #16
 8018848:	b2db      	uxtb	r3, r3
 801884a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801884c:	683b      	ldr	r3, [r7, #0]
 801884e:	0a1b      	lsrs	r3, r3, #8
 8018850:	b2db      	uxtb	r3, r3
 8018852:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8018854:	683b      	ldr	r3, [r7, #0]
 8018856:	b2db      	uxtb	r3, r3
 8018858:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801885a:	f107 0308 	add.w	r3, r7, #8
 801885e:	2206      	movs	r2, #6
 8018860:	4619      	mov	r1, r3
 8018862:	2094      	movs	r0, #148	; 0x94
 8018864:	f000 fd8e 	bl	8019384 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8018868:	4b03      	ldr	r3, [pc, #12]	; (8018878 <SUBGRF_SetRxDutyCycle+0x54>)
 801886a:	2206      	movs	r2, #6
 801886c:	701a      	strb	r2, [r3, #0]
}
 801886e:	bf00      	nop
 8018870:	3710      	adds	r7, #16
 8018872:	46bd      	mov	sp, r7
 8018874:	bd80      	pop	{r7, pc}
 8018876:	bf00      	nop
 8018878:	20001cb8 	.word	0x20001cb8

0801887c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801887c:	b580      	push	{r7, lr}
 801887e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8018880:	2200      	movs	r2, #0
 8018882:	2100      	movs	r1, #0
 8018884:	20c5      	movs	r0, #197	; 0xc5
 8018886:	f000 fd7d 	bl	8019384 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801888a:	4b02      	ldr	r3, [pc, #8]	; (8018894 <SUBGRF_SetCad+0x18>)
 801888c:	2207      	movs	r2, #7
 801888e:	701a      	strb	r2, [r3, #0]
}
 8018890:	bf00      	nop
 8018892:	bd80      	pop	{r7, pc}
 8018894:	20001cb8 	.word	0x20001cb8

08018898 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8018898:	b580      	push	{r7, lr}
 801889a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801889c:	2200      	movs	r2, #0
 801889e:	2100      	movs	r1, #0
 80188a0:	20d1      	movs	r0, #209	; 0xd1
 80188a2:	f000 fd6f 	bl	8019384 <SUBGRF_WriteCommand>
}
 80188a6:	bf00      	nop
 80188a8:	bd80      	pop	{r7, pc}

080188aa <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 80188aa:	b580      	push	{r7, lr}
 80188ac:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80188ae:	2200      	movs	r2, #0
 80188b0:	2100      	movs	r1, #0
 80188b2:	20d2      	movs	r0, #210	; 0xd2
 80188b4:	f000 fd66 	bl	8019384 <SUBGRF_WriteCommand>
}
 80188b8:	bf00      	nop
 80188ba:	bd80      	pop	{r7, pc}

080188bc <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 80188bc:	b580      	push	{r7, lr}
 80188be:	b082      	sub	sp, #8
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	4603      	mov	r3, r0
 80188c4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80188c6:	1dfb      	adds	r3, r7, #7
 80188c8:	2201      	movs	r2, #1
 80188ca:	4619      	mov	r1, r3
 80188cc:	209f      	movs	r0, #159	; 0x9f
 80188ce:	f000 fd59 	bl	8019384 <SUBGRF_WriteCommand>
}
 80188d2:	bf00      	nop
 80188d4:	3708      	adds	r7, #8
 80188d6:	46bd      	mov	sp, r7
 80188d8:	bd80      	pop	{r7, pc}

080188da <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 80188da:	b580      	push	{r7, lr}
 80188dc:	b084      	sub	sp, #16
 80188de:	af00      	add	r7, sp, #0
 80188e0:	4603      	mov	r3, r0
 80188e2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80188e4:	1dfb      	adds	r3, r7, #7
 80188e6:	2201      	movs	r2, #1
 80188e8:	4619      	mov	r1, r3
 80188ea:	20a0      	movs	r0, #160	; 0xa0
 80188ec:	f000 fd4a 	bl	8019384 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 80188f0:	79fb      	ldrb	r3, [r7, #7]
 80188f2:	2b3f      	cmp	r3, #63	; 0x3f
 80188f4:	d91c      	bls.n	8018930 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 80188f6:	79fb      	ldrb	r3, [r7, #7]
 80188f8:	085b      	lsrs	r3, r3, #1
 80188fa:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 80188fc:	2300      	movs	r3, #0
 80188fe:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8018900:	2300      	movs	r3, #0
 8018902:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8018904:	e005      	b.n	8018912 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8018906:	7bfb      	ldrb	r3, [r7, #15]
 8018908:	089b      	lsrs	r3, r3, #2
 801890a:	73fb      	strb	r3, [r7, #15]
            exp++;
 801890c:	7bbb      	ldrb	r3, [r7, #14]
 801890e:	3301      	adds	r3, #1
 8018910:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8018912:	7bfb      	ldrb	r3, [r7, #15]
 8018914:	2b1f      	cmp	r3, #31
 8018916:	d8f6      	bhi.n	8018906 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8018918:	7bfb      	ldrb	r3, [r7, #15]
 801891a:	00db      	lsls	r3, r3, #3
 801891c:	b2da      	uxtb	r2, r3
 801891e:	7bbb      	ldrb	r3, [r7, #14]
 8018920:	4413      	add	r3, r2
 8018922:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8018924:	7b7b      	ldrb	r3, [r7, #13]
 8018926:	4619      	mov	r1, r3
 8018928:	f240 7006 	movw	r0, #1798	; 0x706
 801892c:	f000 fc7a 	bl	8019224 <SUBGRF_WriteRegister>
    }
}
 8018930:	bf00      	nop
 8018932:	3710      	adds	r7, #16
 8018934:	46bd      	mov	sp, r7
 8018936:	bd80      	pop	{r7, pc}

08018938 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8018938:	b580      	push	{r7, lr}
 801893a:	b082      	sub	sp, #8
 801893c:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801893e:	f7f1 fdca 	bl	800a4d6 <RBI_IsDCDC>
 8018942:	4603      	mov	r3, r0
 8018944:	2b01      	cmp	r3, #1
 8018946:	d102      	bne.n	801894e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8018948:	2301      	movs	r3, #1
 801894a:	71fb      	strb	r3, [r7, #7]
 801894c:	e001      	b.n	8018952 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801894e:	2300      	movs	r3, #0
 8018950:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8018952:	1dfb      	adds	r3, r7, #7
 8018954:	2201      	movs	r2, #1
 8018956:	4619      	mov	r1, r3
 8018958:	2096      	movs	r0, #150	; 0x96
 801895a:	f000 fd13 	bl	8019384 <SUBGRF_WriteCommand>
}
 801895e:	bf00      	nop
 8018960:	3708      	adds	r7, #8
 8018962:	46bd      	mov	sp, r7
 8018964:	bd80      	pop	{r7, pc}

08018966 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8018966:	b580      	push	{r7, lr}
 8018968:	b084      	sub	sp, #16
 801896a:	af00      	add	r7, sp, #0
 801896c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801896e:	793b      	ldrb	r3, [r7, #4]
 8018970:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8018974:	b2db      	uxtb	r3, r3
 8018976:	019b      	lsls	r3, r3, #6
 8018978:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801897a:	793b      	ldrb	r3, [r7, #4]
 801897c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8018980:	b2db      	uxtb	r3, r3
 8018982:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018984:	b25b      	sxtb	r3, r3
 8018986:	4313      	orrs	r3, r2
 8018988:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801898a:	793b      	ldrb	r3, [r7, #4]
 801898c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8018990:	b2db      	uxtb	r3, r3
 8018992:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018994:	b25b      	sxtb	r3, r3
 8018996:	4313      	orrs	r3, r2
 8018998:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801899a:	793b      	ldrb	r3, [r7, #4]
 801899c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80189a0:	b2db      	uxtb	r3, r3
 80189a2:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80189a4:	b25b      	sxtb	r3, r3
 80189a6:	4313      	orrs	r3, r2
 80189a8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80189aa:	793b      	ldrb	r3, [r7, #4]
 80189ac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80189b0:	b2db      	uxtb	r3, r3
 80189b2:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80189b4:	b25b      	sxtb	r3, r3
 80189b6:	4313      	orrs	r3, r2
 80189b8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80189ba:	793b      	ldrb	r3, [r7, #4]
 80189bc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80189c0:	b2db      	uxtb	r3, r3
 80189c2:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80189c4:	b25b      	sxtb	r3, r3
 80189c6:	4313      	orrs	r3, r2
 80189c8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80189ca:	793b      	ldrb	r3, [r7, #4]
 80189cc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80189d0:	b2db      	uxtb	r3, r3
 80189d2:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80189d4:	4313      	orrs	r3, r2
 80189d6:	b25b      	sxtb	r3, r3
 80189d8:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80189da:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80189dc:	f107 030f 	add.w	r3, r7, #15
 80189e0:	2201      	movs	r2, #1
 80189e2:	4619      	mov	r1, r3
 80189e4:	2089      	movs	r0, #137	; 0x89
 80189e6:	f000 fccd 	bl	8019384 <SUBGRF_WriteCommand>
}
 80189ea:	bf00      	nop
 80189ec:	3710      	adds	r7, #16
 80189ee:	46bd      	mov	sp, r7
 80189f0:	bd80      	pop	{r7, pc}
	...

080189f4 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80189f4:	b580      	push	{r7, lr}
 80189f6:	b084      	sub	sp, #16
 80189f8:	af00      	add	r7, sp, #0
 80189fa:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	4a1b      	ldr	r2, [pc, #108]	; (8018a6c <SUBGRF_CalibrateImage+0x78>)
 8018a00:	4293      	cmp	r3, r2
 8018a02:	d904      	bls.n	8018a0e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8018a04:	23e1      	movs	r3, #225	; 0xe1
 8018a06:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8018a08:	23e9      	movs	r3, #233	; 0xe9
 8018a0a:	737b      	strb	r3, [r7, #13]
 8018a0c:	e022      	b.n	8018a54 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	4a17      	ldr	r2, [pc, #92]	; (8018a70 <SUBGRF_CalibrateImage+0x7c>)
 8018a12:	4293      	cmp	r3, r2
 8018a14:	d904      	bls.n	8018a20 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8018a16:	23d7      	movs	r3, #215	; 0xd7
 8018a18:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8018a1a:	23db      	movs	r3, #219	; 0xdb
 8018a1c:	737b      	strb	r3, [r7, #13]
 8018a1e:	e019      	b.n	8018a54 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	4a14      	ldr	r2, [pc, #80]	; (8018a74 <SUBGRF_CalibrateImage+0x80>)
 8018a24:	4293      	cmp	r3, r2
 8018a26:	d904      	bls.n	8018a32 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8018a28:	23c1      	movs	r3, #193	; 0xc1
 8018a2a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8018a2c:	23c5      	movs	r3, #197	; 0xc5
 8018a2e:	737b      	strb	r3, [r7, #13]
 8018a30:	e010      	b.n	8018a54 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	4a10      	ldr	r2, [pc, #64]	; (8018a78 <SUBGRF_CalibrateImage+0x84>)
 8018a36:	4293      	cmp	r3, r2
 8018a38:	d904      	bls.n	8018a44 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8018a3a:	2375      	movs	r3, #117	; 0x75
 8018a3c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8018a3e:	2381      	movs	r3, #129	; 0x81
 8018a40:	737b      	strb	r3, [r7, #13]
 8018a42:	e007      	b.n	8018a54 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	4a0d      	ldr	r2, [pc, #52]	; (8018a7c <SUBGRF_CalibrateImage+0x88>)
 8018a48:	4293      	cmp	r3, r2
 8018a4a:	d903      	bls.n	8018a54 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8018a4c:	236b      	movs	r3, #107	; 0x6b
 8018a4e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8018a50:	236f      	movs	r3, #111	; 0x6f
 8018a52:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8018a54:	f107 030c 	add.w	r3, r7, #12
 8018a58:	2202      	movs	r2, #2
 8018a5a:	4619      	mov	r1, r3
 8018a5c:	2098      	movs	r0, #152	; 0x98
 8018a5e:	f000 fc91 	bl	8019384 <SUBGRF_WriteCommand>
}
 8018a62:	bf00      	nop
 8018a64:	3710      	adds	r7, #16
 8018a66:	46bd      	mov	sp, r7
 8018a68:	bd80      	pop	{r7, pc}
 8018a6a:	bf00      	nop
 8018a6c:	35a4e900 	.word	0x35a4e900
 8018a70:	32a9f880 	.word	0x32a9f880
 8018a74:	2de54480 	.word	0x2de54480
 8018a78:	1b6b0b00 	.word	0x1b6b0b00
 8018a7c:	1954fc40 	.word	0x1954fc40

08018a80 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8018a80:	b590      	push	{r4, r7, lr}
 8018a82:	b085      	sub	sp, #20
 8018a84:	af00      	add	r7, sp, #0
 8018a86:	4604      	mov	r4, r0
 8018a88:	4608      	mov	r0, r1
 8018a8a:	4611      	mov	r1, r2
 8018a8c:	461a      	mov	r2, r3
 8018a8e:	4623      	mov	r3, r4
 8018a90:	71fb      	strb	r3, [r7, #7]
 8018a92:	4603      	mov	r3, r0
 8018a94:	71bb      	strb	r3, [r7, #6]
 8018a96:	460b      	mov	r3, r1
 8018a98:	717b      	strb	r3, [r7, #5]
 8018a9a:	4613      	mov	r3, r2
 8018a9c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8018a9e:	79fb      	ldrb	r3, [r7, #7]
 8018aa0:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8018aa2:	79bb      	ldrb	r3, [r7, #6]
 8018aa4:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8018aa6:	797b      	ldrb	r3, [r7, #5]
 8018aa8:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8018aaa:	793b      	ldrb	r3, [r7, #4]
 8018aac:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8018aae:	f107 030c 	add.w	r3, r7, #12
 8018ab2:	2204      	movs	r2, #4
 8018ab4:	4619      	mov	r1, r3
 8018ab6:	2095      	movs	r0, #149	; 0x95
 8018ab8:	f000 fc64 	bl	8019384 <SUBGRF_WriteCommand>
}
 8018abc:	bf00      	nop
 8018abe:	3714      	adds	r7, #20
 8018ac0:	46bd      	mov	sp, r7
 8018ac2:	bd90      	pop	{r4, r7, pc}

08018ac4 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8018ac4:	b590      	push	{r4, r7, lr}
 8018ac6:	b085      	sub	sp, #20
 8018ac8:	af00      	add	r7, sp, #0
 8018aca:	4604      	mov	r4, r0
 8018acc:	4608      	mov	r0, r1
 8018ace:	4611      	mov	r1, r2
 8018ad0:	461a      	mov	r2, r3
 8018ad2:	4623      	mov	r3, r4
 8018ad4:	80fb      	strh	r3, [r7, #6]
 8018ad6:	4603      	mov	r3, r0
 8018ad8:	80bb      	strh	r3, [r7, #4]
 8018ada:	460b      	mov	r3, r1
 8018adc:	807b      	strh	r3, [r7, #2]
 8018ade:	4613      	mov	r3, r2
 8018ae0:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8018ae2:	88fb      	ldrh	r3, [r7, #6]
 8018ae4:	0a1b      	lsrs	r3, r3, #8
 8018ae6:	b29b      	uxth	r3, r3
 8018ae8:	b2db      	uxtb	r3, r3
 8018aea:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8018aec:	88fb      	ldrh	r3, [r7, #6]
 8018aee:	b2db      	uxtb	r3, r3
 8018af0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8018af2:	88bb      	ldrh	r3, [r7, #4]
 8018af4:	0a1b      	lsrs	r3, r3, #8
 8018af6:	b29b      	uxth	r3, r3
 8018af8:	b2db      	uxtb	r3, r3
 8018afa:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8018afc:	88bb      	ldrh	r3, [r7, #4]
 8018afe:	b2db      	uxtb	r3, r3
 8018b00:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8018b02:	887b      	ldrh	r3, [r7, #2]
 8018b04:	0a1b      	lsrs	r3, r3, #8
 8018b06:	b29b      	uxth	r3, r3
 8018b08:	b2db      	uxtb	r3, r3
 8018b0a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8018b0c:	887b      	ldrh	r3, [r7, #2]
 8018b0e:	b2db      	uxtb	r3, r3
 8018b10:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8018b12:	883b      	ldrh	r3, [r7, #0]
 8018b14:	0a1b      	lsrs	r3, r3, #8
 8018b16:	b29b      	uxth	r3, r3
 8018b18:	b2db      	uxtb	r3, r3
 8018b1a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8018b1c:	883b      	ldrh	r3, [r7, #0]
 8018b1e:	b2db      	uxtb	r3, r3
 8018b20:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8018b22:	f107 0308 	add.w	r3, r7, #8
 8018b26:	2208      	movs	r2, #8
 8018b28:	4619      	mov	r1, r3
 8018b2a:	2008      	movs	r0, #8
 8018b2c:	f000 fc2a 	bl	8019384 <SUBGRF_WriteCommand>
}
 8018b30:	bf00      	nop
 8018b32:	3714      	adds	r7, #20
 8018b34:	46bd      	mov	sp, r7
 8018b36:	bd90      	pop	{r4, r7, pc}

08018b38 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8018b38:	b580      	push	{r7, lr}
 8018b3a:	b084      	sub	sp, #16
 8018b3c:	af00      	add	r7, sp, #0
 8018b3e:	4603      	mov	r3, r0
 8018b40:	6039      	str	r1, [r7, #0]
 8018b42:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8018b44:	79fb      	ldrb	r3, [r7, #7]
 8018b46:	f003 0307 	and.w	r3, r3, #7
 8018b4a:	b2db      	uxtb	r3, r3
 8018b4c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018b4e:	683b      	ldr	r3, [r7, #0]
 8018b50:	0c1b      	lsrs	r3, r3, #16
 8018b52:	b2db      	uxtb	r3, r3
 8018b54:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018b56:	683b      	ldr	r3, [r7, #0]
 8018b58:	0a1b      	lsrs	r3, r3, #8
 8018b5a:	b2db      	uxtb	r3, r3
 8018b5c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8018b5e:	683b      	ldr	r3, [r7, #0]
 8018b60:	b2db      	uxtb	r3, r3
 8018b62:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8018b64:	f107 030c 	add.w	r3, r7, #12
 8018b68:	2204      	movs	r2, #4
 8018b6a:	4619      	mov	r1, r3
 8018b6c:	2097      	movs	r0, #151	; 0x97
 8018b6e:	f000 fc09 	bl	8019384 <SUBGRF_WriteCommand>
}
 8018b72:	bf00      	nop
 8018b74:	3710      	adds	r7, #16
 8018b76:	46bd      	mov	sp, r7
 8018b78:	bd80      	pop	{r7, pc}
	...

08018b7c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8018b7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8018b80:	b084      	sub	sp, #16
 8018b82:	af00      	add	r7, sp, #0
 8018b84:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8018b86:	2300      	movs	r3, #0
 8018b88:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8018b8a:	4b1d      	ldr	r3, [pc, #116]	; (8018c00 <SUBGRF_SetRfFrequency+0x84>)
 8018b8c:	781b      	ldrb	r3, [r3, #0]
 8018b8e:	f083 0301 	eor.w	r3, r3, #1
 8018b92:	b2db      	uxtb	r3, r3
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d005      	beq.n	8018ba4 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8018b98:	6878      	ldr	r0, [r7, #4]
 8018b9a:	f7ff ff2b 	bl	80189f4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8018b9e:	4b18      	ldr	r3, [pc, #96]	; (8018c00 <SUBGRF_SetRfFrequency+0x84>)
 8018ba0:	2201      	movs	r2, #1
 8018ba2:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	2200      	movs	r2, #0
 8018ba8:	461c      	mov	r4, r3
 8018baa:	4615      	mov	r5, r2
 8018bac:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8018bb0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8018bb4:	4a13      	ldr	r2, [pc, #76]	; (8018c04 <SUBGRF_SetRfFrequency+0x88>)
 8018bb6:	f04f 0300 	mov.w	r3, #0
 8018bba:	4640      	mov	r0, r8
 8018bbc:	4649      	mov	r1, r9
 8018bbe:	f7e7 fff3 	bl	8000ba8 <__aeabi_uldivmod>
 8018bc2:	4602      	mov	r2, r0
 8018bc4:	460b      	mov	r3, r1
 8018bc6:	4613      	mov	r3, r2
 8018bc8:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	0e1b      	lsrs	r3, r3, #24
 8018bce:	b2db      	uxtb	r3, r3
 8018bd0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	0c1b      	lsrs	r3, r3, #16
 8018bd6:	b2db      	uxtb	r3, r3
 8018bd8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	0a1b      	lsrs	r3, r3, #8
 8018bde:	b2db      	uxtb	r3, r3
 8018be0:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8018be2:	68fb      	ldr	r3, [r7, #12]
 8018be4:	b2db      	uxtb	r3, r3
 8018be6:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8018be8:	f107 0308 	add.w	r3, r7, #8
 8018bec:	2204      	movs	r2, #4
 8018bee:	4619      	mov	r1, r3
 8018bf0:	2086      	movs	r0, #134	; 0x86
 8018bf2:	f000 fbc7 	bl	8019384 <SUBGRF_WriteCommand>
}
 8018bf6:	bf00      	nop
 8018bf8:	3710      	adds	r7, #16
 8018bfa:	46bd      	mov	sp, r7
 8018bfc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8018c00:	20001cc0 	.word	0x20001cc0
 8018c04:	01e84800 	.word	0x01e84800

08018c08 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8018c08:	b580      	push	{r7, lr}
 8018c0a:	b082      	sub	sp, #8
 8018c0c:	af00      	add	r7, sp, #0
 8018c0e:	4603      	mov	r3, r0
 8018c10:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8018c12:	79fa      	ldrb	r2, [r7, #7]
 8018c14:	4b09      	ldr	r3, [pc, #36]	; (8018c3c <SUBGRF_SetPacketType+0x34>)
 8018c16:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8018c18:	79fb      	ldrb	r3, [r7, #7]
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	d104      	bne.n	8018c28 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8018c1e:	2100      	movs	r1, #0
 8018c20:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018c24:	f000 fafe 	bl	8019224 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8018c28:	1dfb      	adds	r3, r7, #7
 8018c2a:	2201      	movs	r2, #1
 8018c2c:	4619      	mov	r1, r3
 8018c2e:	208a      	movs	r0, #138	; 0x8a
 8018c30:	f000 fba8 	bl	8019384 <SUBGRF_WriteCommand>
}
 8018c34:	bf00      	nop
 8018c36:	3708      	adds	r7, #8
 8018c38:	46bd      	mov	sp, r7
 8018c3a:	bd80      	pop	{r7, pc}
 8018c3c:	20001cb9 	.word	0x20001cb9

08018c40 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8018c40:	b480      	push	{r7}
 8018c42:	af00      	add	r7, sp, #0
    return PacketType;
 8018c44:	4b02      	ldr	r3, [pc, #8]	; (8018c50 <SUBGRF_GetPacketType+0x10>)
 8018c46:	781b      	ldrb	r3, [r3, #0]
}
 8018c48:	4618      	mov	r0, r3
 8018c4a:	46bd      	mov	sp, r7
 8018c4c:	bc80      	pop	{r7}
 8018c4e:	4770      	bx	lr
 8018c50:	20001cb9 	.word	0x20001cb9

08018c54 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8018c54:	b580      	push	{r7, lr}
 8018c56:	b084      	sub	sp, #16
 8018c58:	af00      	add	r7, sp, #0
 8018c5a:	4603      	mov	r3, r0
 8018c5c:	71fb      	strb	r3, [r7, #7]
 8018c5e:	460b      	mov	r3, r1
 8018c60:	71bb      	strb	r3, [r7, #6]
 8018c62:	4613      	mov	r3, r2
 8018c64:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8018c66:	79fb      	ldrb	r3, [r7, #7]
 8018c68:	2b01      	cmp	r3, #1
 8018c6a:	d149      	bne.n	8018d00 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8018c6c:	2000      	movs	r0, #0
 8018c6e:	f7f1 fc39 	bl	800a4e4 <RBI_GetRFOMaxPowerConfig>
 8018c72:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8018c74:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018c78:	68fa      	ldr	r2, [r7, #12]
 8018c7a:	429a      	cmp	r2, r3
 8018c7c:	da01      	bge.n	8018c82 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8018c7e:	68fb      	ldr	r3, [r7, #12]
 8018c80:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8018c82:	68fb      	ldr	r3, [r7, #12]
 8018c84:	2b0e      	cmp	r3, #14
 8018c86:	d10e      	bne.n	8018ca6 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8018c88:	2301      	movs	r3, #1
 8018c8a:	2201      	movs	r2, #1
 8018c8c:	2100      	movs	r1, #0
 8018c8e:	2004      	movs	r0, #4
 8018c90:	f7ff fef6 	bl	8018a80 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8018c94:	79ba      	ldrb	r2, [r7, #6]
 8018c96:	68fb      	ldr	r3, [r7, #12]
 8018c98:	b2db      	uxtb	r3, r3
 8018c9a:	1ad3      	subs	r3, r2, r3
 8018c9c:	b2db      	uxtb	r3, r3
 8018c9e:	330e      	adds	r3, #14
 8018ca0:	b2db      	uxtb	r3, r3
 8018ca2:	71bb      	strb	r3, [r7, #6]
 8018ca4:	e01f      	b.n	8018ce6 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8018ca6:	68fb      	ldr	r3, [r7, #12]
 8018ca8:	2b0a      	cmp	r3, #10
 8018caa:	d10e      	bne.n	8018cca <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8018cac:	2301      	movs	r3, #1
 8018cae:	2201      	movs	r2, #1
 8018cb0:	2100      	movs	r1, #0
 8018cb2:	2001      	movs	r0, #1
 8018cb4:	f7ff fee4 	bl	8018a80 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8018cb8:	79ba      	ldrb	r2, [r7, #6]
 8018cba:	68fb      	ldr	r3, [r7, #12]
 8018cbc:	b2db      	uxtb	r3, r3
 8018cbe:	1ad3      	subs	r3, r2, r3
 8018cc0:	b2db      	uxtb	r3, r3
 8018cc2:	330d      	adds	r3, #13
 8018cc4:	b2db      	uxtb	r3, r3
 8018cc6:	71bb      	strb	r3, [r7, #6]
 8018cc8:	e00d      	b.n	8018ce6 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 8018cca:	2301      	movs	r3, #1
 8018ccc:	2201      	movs	r2, #1
 8018cce:	2100      	movs	r1, #0
 8018cd0:	2006      	movs	r0, #6
 8018cd2:	f7ff fed5 	bl	8018a80 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8018cd6:	79ba      	ldrb	r2, [r7, #6]
 8018cd8:	68fb      	ldr	r3, [r7, #12]
 8018cda:	b2db      	uxtb	r3, r3
 8018cdc:	1ad3      	subs	r3, r2, r3
 8018cde:	b2db      	uxtb	r3, r3
 8018ce0:	330e      	adds	r3, #14
 8018ce2:	b2db      	uxtb	r3, r3
 8018ce4:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8018ce6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018cea:	f113 0f11 	cmn.w	r3, #17
 8018cee:	da01      	bge.n	8018cf4 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8018cf0:	23ef      	movs	r3, #239	; 0xef
 8018cf2:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8018cf4:	2118      	movs	r1, #24
 8018cf6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018cfa:	f000 fa93 	bl	8019224 <SUBGRF_WriteRegister>
 8018cfe:	e067      	b.n	8018dd0 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8018d00:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018d04:	f000 faa2 	bl	801924c <SUBGRF_ReadRegister>
 8018d08:	4603      	mov	r3, r0
 8018d0a:	f043 031e 	orr.w	r3, r3, #30
 8018d0e:	b2db      	uxtb	r3, r3
 8018d10:	4619      	mov	r1, r3
 8018d12:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018d16:	f000 fa85 	bl	8019224 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8018d1a:	2001      	movs	r0, #1
 8018d1c:	f7f1 fbe2 	bl	800a4e4 <RBI_GetRFOMaxPowerConfig>
 8018d20:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8018d22:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018d26:	68fa      	ldr	r2, [r7, #12]
 8018d28:	429a      	cmp	r2, r3
 8018d2a:	da01      	bge.n	8018d30 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8018d2c:	68fb      	ldr	r3, [r7, #12]
 8018d2e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8018d30:	68fb      	ldr	r3, [r7, #12]
 8018d32:	2b14      	cmp	r3, #20
 8018d34:	d10e      	bne.n	8018d54 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8018d36:	2301      	movs	r3, #1
 8018d38:	2200      	movs	r2, #0
 8018d3a:	2105      	movs	r1, #5
 8018d3c:	2003      	movs	r0, #3
 8018d3e:	f7ff fe9f 	bl	8018a80 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8018d42:	79ba      	ldrb	r2, [r7, #6]
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	b2db      	uxtb	r3, r3
 8018d48:	1ad3      	subs	r3, r2, r3
 8018d4a:	b2db      	uxtb	r3, r3
 8018d4c:	3316      	adds	r3, #22
 8018d4e:	b2db      	uxtb	r3, r3
 8018d50:	71bb      	strb	r3, [r7, #6]
 8018d52:	e031      	b.n	8018db8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8018d54:	68fb      	ldr	r3, [r7, #12]
 8018d56:	2b11      	cmp	r3, #17
 8018d58:	d10e      	bne.n	8018d78 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8018d5a:	2301      	movs	r3, #1
 8018d5c:	2200      	movs	r2, #0
 8018d5e:	2103      	movs	r1, #3
 8018d60:	2002      	movs	r0, #2
 8018d62:	f7ff fe8d 	bl	8018a80 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8018d66:	79ba      	ldrb	r2, [r7, #6]
 8018d68:	68fb      	ldr	r3, [r7, #12]
 8018d6a:	b2db      	uxtb	r3, r3
 8018d6c:	1ad3      	subs	r3, r2, r3
 8018d6e:	b2db      	uxtb	r3, r3
 8018d70:	3316      	adds	r3, #22
 8018d72:	b2db      	uxtb	r3, r3
 8018d74:	71bb      	strb	r3, [r7, #6]
 8018d76:	e01f      	b.n	8018db8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	2b0e      	cmp	r3, #14
 8018d7c:	d10e      	bne.n	8018d9c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8018d7e:	2301      	movs	r3, #1
 8018d80:	2200      	movs	r2, #0
 8018d82:	2102      	movs	r1, #2
 8018d84:	2002      	movs	r0, #2
 8018d86:	f7ff fe7b 	bl	8018a80 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8018d8a:	79ba      	ldrb	r2, [r7, #6]
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	b2db      	uxtb	r3, r3
 8018d90:	1ad3      	subs	r3, r2, r3
 8018d92:	b2db      	uxtb	r3, r3
 8018d94:	330e      	adds	r3, #14
 8018d96:	b2db      	uxtb	r3, r3
 8018d98:	71bb      	strb	r3, [r7, #6]
 8018d9a:	e00d      	b.n	8018db8 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8018d9c:	2301      	movs	r3, #1
 8018d9e:	2200      	movs	r2, #0
 8018da0:	2107      	movs	r1, #7
 8018da2:	2004      	movs	r0, #4
 8018da4:	f7ff fe6c 	bl	8018a80 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8018da8:	79ba      	ldrb	r2, [r7, #6]
 8018daa:	68fb      	ldr	r3, [r7, #12]
 8018dac:	b2db      	uxtb	r3, r3
 8018dae:	1ad3      	subs	r3, r2, r3
 8018db0:	b2db      	uxtb	r3, r3
 8018db2:	3316      	adds	r3, #22
 8018db4:	b2db      	uxtb	r3, r3
 8018db6:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8018db8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018dbc:	f113 0f09 	cmn.w	r3, #9
 8018dc0:	da01      	bge.n	8018dc6 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8018dc2:	23f7      	movs	r3, #247	; 0xf7
 8018dc4:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8018dc6:	2138      	movs	r1, #56	; 0x38
 8018dc8:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018dcc:	f000 fa2a 	bl	8019224 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8018dd0:	79bb      	ldrb	r3, [r7, #6]
 8018dd2:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8018dd4:	797b      	ldrb	r3, [r7, #5]
 8018dd6:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8018dd8:	f107 0308 	add.w	r3, r7, #8
 8018ddc:	2202      	movs	r2, #2
 8018dde:	4619      	mov	r1, r3
 8018de0:	208e      	movs	r0, #142	; 0x8e
 8018de2:	f000 facf 	bl	8019384 <SUBGRF_WriteCommand>
}
 8018de6:	bf00      	nop
 8018de8:	3710      	adds	r7, #16
 8018dea:	46bd      	mov	sp, r7
 8018dec:	bd80      	pop	{r7, pc}
	...

08018df0 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8018df0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8018df4:	b086      	sub	sp, #24
 8018df6:	af00      	add	r7, sp, #0
 8018df8:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8018dfa:	2300      	movs	r3, #0
 8018dfc:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018dfe:	4a61      	ldr	r2, [pc, #388]	; (8018f84 <SUBGRF_SetModulationParams+0x194>)
 8018e00:	f107 0308 	add.w	r3, r7, #8
 8018e04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018e08:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	781a      	ldrb	r2, [r3, #0]
 8018e10:	4b5d      	ldr	r3, [pc, #372]	; (8018f88 <SUBGRF_SetModulationParams+0x198>)
 8018e12:	781b      	ldrb	r3, [r3, #0]
 8018e14:	429a      	cmp	r2, r3
 8018e16:	d004      	beq.n	8018e22 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	781b      	ldrb	r3, [r3, #0]
 8018e1c:	4618      	mov	r0, r3
 8018e1e:	f7ff fef3 	bl	8018c08 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	781b      	ldrb	r3, [r3, #0]
 8018e26:	2b03      	cmp	r3, #3
 8018e28:	f200 80a5 	bhi.w	8018f76 <SUBGRF_SetModulationParams+0x186>
 8018e2c:	a201      	add	r2, pc, #4	; (adr r2, 8018e34 <SUBGRF_SetModulationParams+0x44>)
 8018e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e32:	bf00      	nop
 8018e34:	08018e45 	.word	0x08018e45
 8018e38:	08018f05 	.word	0x08018f05
 8018e3c:	08018ec7 	.word	0x08018ec7
 8018e40:	08018f33 	.word	0x08018f33
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8018e44:	2308      	movs	r3, #8
 8018e46:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	685b      	ldr	r3, [r3, #4]
 8018e4c:	4a4f      	ldr	r2, [pc, #316]	; (8018f8c <SUBGRF_SetModulationParams+0x19c>)
 8018e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8018e52:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018e54:	697b      	ldr	r3, [r7, #20]
 8018e56:	0c1b      	lsrs	r3, r3, #16
 8018e58:	b2db      	uxtb	r3, r3
 8018e5a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018e5c:	697b      	ldr	r3, [r7, #20]
 8018e5e:	0a1b      	lsrs	r3, r3, #8
 8018e60:	b2db      	uxtb	r3, r3
 8018e62:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018e64:	697b      	ldr	r3, [r7, #20]
 8018e66:	b2db      	uxtb	r3, r3
 8018e68:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	7b1b      	ldrb	r3, [r3, #12]
 8018e6e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	7b5b      	ldrb	r3, [r3, #13]
 8018e74:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	689b      	ldr	r3, [r3, #8]
 8018e7a:	2200      	movs	r2, #0
 8018e7c:	461c      	mov	r4, r3
 8018e7e:	4615      	mov	r5, r2
 8018e80:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8018e84:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8018e88:	4a41      	ldr	r2, [pc, #260]	; (8018f90 <SUBGRF_SetModulationParams+0x1a0>)
 8018e8a:	f04f 0300 	mov.w	r3, #0
 8018e8e:	4640      	mov	r0, r8
 8018e90:	4649      	mov	r1, r9
 8018e92:	f7e7 fe89 	bl	8000ba8 <__aeabi_uldivmod>
 8018e96:	4602      	mov	r2, r0
 8018e98:	460b      	mov	r3, r1
 8018e9a:	4613      	mov	r3, r2
 8018e9c:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8018e9e:	697b      	ldr	r3, [r7, #20]
 8018ea0:	0c1b      	lsrs	r3, r3, #16
 8018ea2:	b2db      	uxtb	r3, r3
 8018ea4:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8018ea6:	697b      	ldr	r3, [r7, #20]
 8018ea8:	0a1b      	lsrs	r3, r3, #8
 8018eaa:	b2db      	uxtb	r3, r3
 8018eac:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8018eae:	697b      	ldr	r3, [r7, #20]
 8018eb0:	b2db      	uxtb	r3, r3
 8018eb2:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018eb4:	7cfb      	ldrb	r3, [r7, #19]
 8018eb6:	b29a      	uxth	r2, r3
 8018eb8:	f107 0308 	add.w	r3, r7, #8
 8018ebc:	4619      	mov	r1, r3
 8018ebe:	208b      	movs	r0, #139	; 0x8b
 8018ec0:	f000 fa60 	bl	8019384 <SUBGRF_WriteCommand>
        break;
 8018ec4:	e058      	b.n	8018f78 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8018ec6:	2304      	movs	r3, #4
 8018ec8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	691b      	ldr	r3, [r3, #16]
 8018ece:	4a2f      	ldr	r2, [pc, #188]	; (8018f8c <SUBGRF_SetModulationParams+0x19c>)
 8018ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8018ed4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018ed6:	697b      	ldr	r3, [r7, #20]
 8018ed8:	0c1b      	lsrs	r3, r3, #16
 8018eda:	b2db      	uxtb	r3, r3
 8018edc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018ede:	697b      	ldr	r3, [r7, #20]
 8018ee0:	0a1b      	lsrs	r3, r3, #8
 8018ee2:	b2db      	uxtb	r3, r3
 8018ee4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018ee6:	697b      	ldr	r3, [r7, #20]
 8018ee8:	b2db      	uxtb	r3, r3
 8018eea:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	7d1b      	ldrb	r3, [r3, #20]
 8018ef0:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018ef2:	7cfb      	ldrb	r3, [r7, #19]
 8018ef4:	b29a      	uxth	r2, r3
 8018ef6:	f107 0308 	add.w	r3, r7, #8
 8018efa:	4619      	mov	r1, r3
 8018efc:	208b      	movs	r0, #139	; 0x8b
 8018efe:	f000 fa41 	bl	8019384 <SUBGRF_WriteCommand>
        break;
 8018f02:	e039      	b.n	8018f78 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8018f04:	2304      	movs	r3, #4
 8018f06:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	7e1b      	ldrb	r3, [r3, #24]
 8018f0c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	7e5b      	ldrb	r3, [r3, #25]
 8018f12:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	7e9b      	ldrb	r3, [r3, #26]
 8018f18:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	7edb      	ldrb	r3, [r3, #27]
 8018f1e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018f20:	7cfb      	ldrb	r3, [r7, #19]
 8018f22:	b29a      	uxth	r2, r3
 8018f24:	f107 0308 	add.w	r3, r7, #8
 8018f28:	4619      	mov	r1, r3
 8018f2a:	208b      	movs	r0, #139	; 0x8b
 8018f2c:	f000 fa2a 	bl	8019384 <SUBGRF_WriteCommand>

        break;
 8018f30:	e022      	b.n	8018f78 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8018f32:	2305      	movs	r3, #5
 8018f34:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	685b      	ldr	r3, [r3, #4]
 8018f3a:	4a14      	ldr	r2, [pc, #80]	; (8018f8c <SUBGRF_SetModulationParams+0x19c>)
 8018f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8018f40:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018f42:	697b      	ldr	r3, [r7, #20]
 8018f44:	0c1b      	lsrs	r3, r3, #16
 8018f46:	b2db      	uxtb	r3, r3
 8018f48:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018f4a:	697b      	ldr	r3, [r7, #20]
 8018f4c:	0a1b      	lsrs	r3, r3, #8
 8018f4e:	b2db      	uxtb	r3, r3
 8018f50:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018f52:	697b      	ldr	r3, [r7, #20]
 8018f54:	b2db      	uxtb	r3, r3
 8018f56:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	7b1b      	ldrb	r3, [r3, #12]
 8018f5c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	7b5b      	ldrb	r3, [r3, #13]
 8018f62:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018f64:	7cfb      	ldrb	r3, [r7, #19]
 8018f66:	b29a      	uxth	r2, r3
 8018f68:	f107 0308 	add.w	r3, r7, #8
 8018f6c:	4619      	mov	r1, r3
 8018f6e:	208b      	movs	r0, #139	; 0x8b
 8018f70:	f000 fa08 	bl	8019384 <SUBGRF_WriteCommand>
        break;
 8018f74:	e000      	b.n	8018f78 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8018f76:	bf00      	nop
    }
}
 8018f78:	bf00      	nop
 8018f7a:	3718      	adds	r7, #24
 8018f7c:	46bd      	mov	sp, r7
 8018f7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8018f82:	bf00      	nop
 8018f84:	0801b514 	.word	0x0801b514
 8018f88:	20001cb9 	.word	0x20001cb9
 8018f8c:	3d090000 	.word	0x3d090000
 8018f90:	01e84800 	.word	0x01e84800

08018f94 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8018f94:	b580      	push	{r7, lr}
 8018f96:	b086      	sub	sp, #24
 8018f98:	af00      	add	r7, sp, #0
 8018f9a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8018f9c:	2300      	movs	r3, #0
 8018f9e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018fa0:	4a48      	ldr	r2, [pc, #288]	; (80190c4 <SUBGRF_SetPacketParams+0x130>)
 8018fa2:	f107 030c 	add.w	r3, r7, #12
 8018fa6:	ca07      	ldmia	r2, {r0, r1, r2}
 8018fa8:	c303      	stmia	r3!, {r0, r1}
 8018faa:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	781a      	ldrb	r2, [r3, #0]
 8018fb0:	4b45      	ldr	r3, [pc, #276]	; (80190c8 <SUBGRF_SetPacketParams+0x134>)
 8018fb2:	781b      	ldrb	r3, [r3, #0]
 8018fb4:	429a      	cmp	r2, r3
 8018fb6:	d004      	beq.n	8018fc2 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	781b      	ldrb	r3, [r3, #0]
 8018fbc:	4618      	mov	r0, r3
 8018fbe:	f7ff fe23 	bl	8018c08 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	781b      	ldrb	r3, [r3, #0]
 8018fc6:	2b03      	cmp	r3, #3
 8018fc8:	d878      	bhi.n	80190bc <SUBGRF_SetPacketParams+0x128>
 8018fca:	a201      	add	r2, pc, #4	; (adr r2, 8018fd0 <SUBGRF_SetPacketParams+0x3c>)
 8018fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fd0:	08018fe1 	.word	0x08018fe1
 8018fd4:	08019071 	.word	0x08019071
 8018fd8:	08019065 	.word	0x08019065
 8018fdc:	08018fe1 	.word	0x08018fe1
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	7a5b      	ldrb	r3, [r3, #9]
 8018fe4:	2bf1      	cmp	r3, #241	; 0xf1
 8018fe6:	d10a      	bne.n	8018ffe <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8018fe8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018fec:	f7ff faae 	bl	801854c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8018ff0:	f248 0005 	movw	r0, #32773	; 0x8005
 8018ff4:	f7ff faca 	bl	801858c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8018ff8:	2302      	movs	r3, #2
 8018ffa:	75bb      	strb	r3, [r7, #22]
 8018ffc:	e011      	b.n	8019022 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	7a5b      	ldrb	r3, [r3, #9]
 8019002:	2bf2      	cmp	r3, #242	; 0xf2
 8019004:	d10a      	bne.n	801901c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8019006:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801900a:	f7ff fa9f 	bl	801854c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801900e:	f241 0021 	movw	r0, #4129	; 0x1021
 8019012:	f7ff fabb 	bl	801858c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8019016:	2306      	movs	r3, #6
 8019018:	75bb      	strb	r3, [r7, #22]
 801901a:	e002      	b.n	8019022 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	7a5b      	ldrb	r3, [r3, #9]
 8019020:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8019022:	2309      	movs	r3, #9
 8019024:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	885b      	ldrh	r3, [r3, #2]
 801902a:	0a1b      	lsrs	r3, r3, #8
 801902c:	b29b      	uxth	r3, r3
 801902e:	b2db      	uxtb	r3, r3
 8019030:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	885b      	ldrh	r3, [r3, #2]
 8019036:	b2db      	uxtb	r3, r3
 8019038:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	791b      	ldrb	r3, [r3, #4]
 801903e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	795b      	ldrb	r3, [r3, #5]
 8019044:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	799b      	ldrb	r3, [r3, #6]
 801904a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	79db      	ldrb	r3, [r3, #7]
 8019050:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	7a1b      	ldrb	r3, [r3, #8]
 8019056:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8019058:	7dbb      	ldrb	r3, [r7, #22]
 801905a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	7a9b      	ldrb	r3, [r3, #10]
 8019060:	753b      	strb	r3, [r7, #20]
        break;
 8019062:	e022      	b.n	80190aa <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8019064:	2301      	movs	r3, #1
 8019066:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	7b1b      	ldrb	r3, [r3, #12]
 801906c:	733b      	strb	r3, [r7, #12]
        break;
 801906e:	e01c      	b.n	80190aa <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8019070:	2306      	movs	r3, #6
 8019072:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	89db      	ldrh	r3, [r3, #14]
 8019078:	0a1b      	lsrs	r3, r3, #8
 801907a:	b29b      	uxth	r3, r3
 801907c:	b2db      	uxtb	r3, r3
 801907e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	89db      	ldrh	r3, [r3, #14]
 8019084:	b2db      	uxtb	r3, r3
 8019086:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	7c1a      	ldrb	r2, [r3, #16]
 801908c:	4b0f      	ldr	r3, [pc, #60]	; (80190cc <SUBGRF_SetPacketParams+0x138>)
 801908e:	4611      	mov	r1, r2
 8019090:	7019      	strb	r1, [r3, #0]
 8019092:	4613      	mov	r3, r2
 8019094:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	7c5b      	ldrb	r3, [r3, #17]
 801909a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	7c9b      	ldrb	r3, [r3, #18]
 80190a0:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	7cdb      	ldrb	r3, [r3, #19]
 80190a6:	747b      	strb	r3, [r7, #17]
        break;
 80190a8:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80190aa:	7dfb      	ldrb	r3, [r7, #23]
 80190ac:	b29a      	uxth	r2, r3
 80190ae:	f107 030c 	add.w	r3, r7, #12
 80190b2:	4619      	mov	r1, r3
 80190b4:	208c      	movs	r0, #140	; 0x8c
 80190b6:	f000 f965 	bl	8019384 <SUBGRF_WriteCommand>
 80190ba:	e000      	b.n	80190be <SUBGRF_SetPacketParams+0x12a>
        return;
 80190bc:	bf00      	nop
}
 80190be:	3718      	adds	r7, #24
 80190c0:	46bd      	mov	sp, r7
 80190c2:	bd80      	pop	{r7, pc}
 80190c4:	0801b51c 	.word	0x0801b51c
 80190c8:	20001cb9 	.word	0x20001cb9
 80190cc:	20001cba 	.word	0x20001cba

080190d0 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80190d0:	b580      	push	{r7, lr}
 80190d2:	b084      	sub	sp, #16
 80190d4:	af00      	add	r7, sp, #0
 80190d6:	4603      	mov	r3, r0
 80190d8:	460a      	mov	r2, r1
 80190da:	71fb      	strb	r3, [r7, #7]
 80190dc:	4613      	mov	r3, r2
 80190de:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 80190e0:	79fb      	ldrb	r3, [r7, #7]
 80190e2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 80190e4:	79bb      	ldrb	r3, [r7, #6]
 80190e6:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80190e8:	f107 030c 	add.w	r3, r7, #12
 80190ec:	2202      	movs	r2, #2
 80190ee:	4619      	mov	r1, r3
 80190f0:	208f      	movs	r0, #143	; 0x8f
 80190f2:	f000 f947 	bl	8019384 <SUBGRF_WriteCommand>
}
 80190f6:	bf00      	nop
 80190f8:	3710      	adds	r7, #16
 80190fa:	46bd      	mov	sp, r7
 80190fc:	bd80      	pop	{r7, pc}

080190fe <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 80190fe:	b580      	push	{r7, lr}
 8019100:	b082      	sub	sp, #8
 8019102:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8019104:	2300      	movs	r3, #0
 8019106:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8019108:	1d3b      	adds	r3, r7, #4
 801910a:	2201      	movs	r2, #1
 801910c:	4619      	mov	r1, r3
 801910e:	2015      	movs	r0, #21
 8019110:	f000 f95a 	bl	80193c8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8019114:	793b      	ldrb	r3, [r7, #4]
 8019116:	425b      	negs	r3, r3
 8019118:	105b      	asrs	r3, r3, #1
 801911a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801911c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019120:	4618      	mov	r0, r3
 8019122:	3708      	adds	r7, #8
 8019124:	46bd      	mov	sp, r7
 8019126:	bd80      	pop	{r7, pc}

08019128 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8019128:	b580      	push	{r7, lr}
 801912a:	b084      	sub	sp, #16
 801912c:	af00      	add	r7, sp, #0
 801912e:	6078      	str	r0, [r7, #4]
 8019130:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8019132:	f107 030c 	add.w	r3, r7, #12
 8019136:	2202      	movs	r2, #2
 8019138:	4619      	mov	r1, r3
 801913a:	2013      	movs	r0, #19
 801913c:	f000 f944 	bl	80193c8 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8019140:	f7ff fd7e 	bl	8018c40 <SUBGRF_GetPacketType>
 8019144:	4603      	mov	r3, r0
 8019146:	2b01      	cmp	r3, #1
 8019148:	d10d      	bne.n	8019166 <SUBGRF_GetRxBufferStatus+0x3e>
 801914a:	4b0c      	ldr	r3, [pc, #48]	; (801917c <SUBGRF_GetRxBufferStatus+0x54>)
 801914c:	781b      	ldrb	r3, [r3, #0]
 801914e:	b2db      	uxtb	r3, r3
 8019150:	2b01      	cmp	r3, #1
 8019152:	d108      	bne.n	8019166 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8019154:	f240 7002 	movw	r0, #1794	; 0x702
 8019158:	f000 f878 	bl	801924c <SUBGRF_ReadRegister>
 801915c:	4603      	mov	r3, r0
 801915e:	461a      	mov	r2, r3
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	701a      	strb	r2, [r3, #0]
 8019164:	e002      	b.n	801916c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8019166:	7b3a      	ldrb	r2, [r7, #12]
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801916c:	7b7a      	ldrb	r2, [r7, #13]
 801916e:	683b      	ldr	r3, [r7, #0]
 8019170:	701a      	strb	r2, [r3, #0]
}
 8019172:	bf00      	nop
 8019174:	3710      	adds	r7, #16
 8019176:	46bd      	mov	sp, r7
 8019178:	bd80      	pop	{r7, pc}
 801917a:	bf00      	nop
 801917c:	20001cba 	.word	0x20001cba

08019180 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8019180:	b580      	push	{r7, lr}
 8019182:	b084      	sub	sp, #16
 8019184:	af00      	add	r7, sp, #0
 8019186:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8019188:	f107 030c 	add.w	r3, r7, #12
 801918c:	2203      	movs	r2, #3
 801918e:	4619      	mov	r1, r3
 8019190:	2014      	movs	r0, #20
 8019192:	f000 f919 	bl	80193c8 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8019196:	f7ff fd53 	bl	8018c40 <SUBGRF_GetPacketType>
 801919a:	4603      	mov	r3, r0
 801919c:	461a      	mov	r2, r3
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	781b      	ldrb	r3, [r3, #0]
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d002      	beq.n	80191b0 <SUBGRF_GetPacketStatus+0x30>
 80191aa:	2b01      	cmp	r3, #1
 80191ac:	d013      	beq.n	80191d6 <SUBGRF_GetPacketStatus+0x56>
 80191ae:	e02a      	b.n	8019206 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80191b0:	7b3a      	ldrb	r2, [r7, #12]
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80191b6:	7b7b      	ldrb	r3, [r7, #13]
 80191b8:	425b      	negs	r3, r3
 80191ba:	105b      	asrs	r3, r3, #1
 80191bc:	b25a      	sxtb	r2, r3
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80191c2:	7bbb      	ldrb	r3, [r7, #14]
 80191c4:	425b      	negs	r3, r3
 80191c6:	105b      	asrs	r3, r3, #1
 80191c8:	b25a      	sxtb	r2, r3
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	2200      	movs	r2, #0
 80191d2:	609a      	str	r2, [r3, #8]
            break;
 80191d4:	e020      	b.n	8019218 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80191d6:	7b3b      	ldrb	r3, [r7, #12]
 80191d8:	425b      	negs	r3, r3
 80191da:	105b      	asrs	r3, r3, #1
 80191dc:	b25a      	sxtb	r2, r3
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80191e2:	7b7b      	ldrb	r3, [r7, #13]
 80191e4:	b25b      	sxtb	r3, r3
 80191e6:	3302      	adds	r3, #2
 80191e8:	109b      	asrs	r3, r3, #2
 80191ea:	b25a      	sxtb	r2, r3
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80191f0:	7bbb      	ldrb	r3, [r7, #14]
 80191f2:	425b      	negs	r3, r3
 80191f4:	105b      	asrs	r3, r3, #1
 80191f6:	b25a      	sxtb	r2, r3
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80191fc:	4b08      	ldr	r3, [pc, #32]	; (8019220 <SUBGRF_GetPacketStatus+0xa0>)
 80191fe:	681a      	ldr	r2, [r3, #0]
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	611a      	str	r2, [r3, #16]
            break;
 8019204:	e008      	b.n	8019218 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8019206:	2214      	movs	r2, #20
 8019208:	2100      	movs	r1, #0
 801920a:	6878      	ldr	r0, [r7, #4]
 801920c:	f000 fbf3 	bl	80199f6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	220f      	movs	r2, #15
 8019214:	701a      	strb	r2, [r3, #0]
            break;
 8019216:	bf00      	nop
    }
}
 8019218:	bf00      	nop
 801921a:	3710      	adds	r7, #16
 801921c:	46bd      	mov	sp, r7
 801921e:	bd80      	pop	{r7, pc}
 8019220:	20001cbc 	.word	0x20001cbc

08019224 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8019224:	b580      	push	{r7, lr}
 8019226:	b082      	sub	sp, #8
 8019228:	af00      	add	r7, sp, #0
 801922a:	4603      	mov	r3, r0
 801922c:	460a      	mov	r2, r1
 801922e:	80fb      	strh	r3, [r7, #6]
 8019230:	4613      	mov	r3, r2
 8019232:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8019234:	1d7a      	adds	r2, r7, #5
 8019236:	88f9      	ldrh	r1, [r7, #6]
 8019238:	2301      	movs	r3, #1
 801923a:	4803      	ldr	r0, [pc, #12]	; (8019248 <SUBGRF_WriteRegister+0x24>)
 801923c:	f7ed ff9c 	bl	8007178 <HAL_SUBGHZ_WriteRegisters>
}
 8019240:	bf00      	nop
 8019242:	3708      	adds	r7, #8
 8019244:	46bd      	mov	sp, r7
 8019246:	bd80      	pop	{r7, pc}
 8019248:	20000204 	.word	0x20000204

0801924c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801924c:	b580      	push	{r7, lr}
 801924e:	b084      	sub	sp, #16
 8019250:	af00      	add	r7, sp, #0
 8019252:	4603      	mov	r3, r0
 8019254:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8019256:	f107 020f 	add.w	r2, r7, #15
 801925a:	88f9      	ldrh	r1, [r7, #6]
 801925c:	2301      	movs	r3, #1
 801925e:	4804      	ldr	r0, [pc, #16]	; (8019270 <SUBGRF_ReadRegister+0x24>)
 8019260:	f7ed ffe9 	bl	8007236 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8019264:	7bfb      	ldrb	r3, [r7, #15]
}
 8019266:	4618      	mov	r0, r3
 8019268:	3710      	adds	r7, #16
 801926a:	46bd      	mov	sp, r7
 801926c:	bd80      	pop	{r7, pc}
 801926e:	bf00      	nop
 8019270:	20000204 	.word	0x20000204

08019274 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019274:	b580      	push	{r7, lr}
 8019276:	b086      	sub	sp, #24
 8019278:	af00      	add	r7, sp, #0
 801927a:	4603      	mov	r3, r0
 801927c:	6039      	str	r1, [r7, #0]
 801927e:	80fb      	strh	r3, [r7, #6]
 8019280:	4613      	mov	r3, r2
 8019282:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019284:	f3ef 8310 	mrs	r3, PRIMASK
 8019288:	60fb      	str	r3, [r7, #12]
  return(result);
 801928a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801928c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801928e:	b672      	cpsid	i
}
 8019290:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8019292:	88bb      	ldrh	r3, [r7, #4]
 8019294:	88f9      	ldrh	r1, [r7, #6]
 8019296:	683a      	ldr	r2, [r7, #0]
 8019298:	4806      	ldr	r0, [pc, #24]	; (80192b4 <SUBGRF_WriteRegisters+0x40>)
 801929a:	f7ed ff6d 	bl	8007178 <HAL_SUBGHZ_WriteRegisters>
 801929e:	697b      	ldr	r3, [r7, #20]
 80192a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192a2:	693b      	ldr	r3, [r7, #16]
 80192a4:	f383 8810 	msr	PRIMASK, r3
}
 80192a8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80192aa:	bf00      	nop
 80192ac:	3718      	adds	r7, #24
 80192ae:	46bd      	mov	sp, r7
 80192b0:	bd80      	pop	{r7, pc}
 80192b2:	bf00      	nop
 80192b4:	20000204 	.word	0x20000204

080192b8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80192b8:	b580      	push	{r7, lr}
 80192ba:	b086      	sub	sp, #24
 80192bc:	af00      	add	r7, sp, #0
 80192be:	4603      	mov	r3, r0
 80192c0:	6039      	str	r1, [r7, #0]
 80192c2:	80fb      	strh	r3, [r7, #6]
 80192c4:	4613      	mov	r3, r2
 80192c6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80192c8:	f3ef 8310 	mrs	r3, PRIMASK
 80192cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80192ce:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80192d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80192d2:	b672      	cpsid	i
}
 80192d4:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80192d6:	88bb      	ldrh	r3, [r7, #4]
 80192d8:	88f9      	ldrh	r1, [r7, #6]
 80192da:	683a      	ldr	r2, [r7, #0]
 80192dc:	4806      	ldr	r0, [pc, #24]	; (80192f8 <SUBGRF_ReadRegisters+0x40>)
 80192de:	f7ed ffaa 	bl	8007236 <HAL_SUBGHZ_ReadRegisters>
 80192e2:	697b      	ldr	r3, [r7, #20]
 80192e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192e6:	693b      	ldr	r3, [r7, #16]
 80192e8:	f383 8810 	msr	PRIMASK, r3
}
 80192ec:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80192ee:	bf00      	nop
 80192f0:	3718      	adds	r7, #24
 80192f2:	46bd      	mov	sp, r7
 80192f4:	bd80      	pop	{r7, pc}
 80192f6:	bf00      	nop
 80192f8:	20000204 	.word	0x20000204

080192fc <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80192fc:	b580      	push	{r7, lr}
 80192fe:	b086      	sub	sp, #24
 8019300:	af00      	add	r7, sp, #0
 8019302:	4603      	mov	r3, r0
 8019304:	6039      	str	r1, [r7, #0]
 8019306:	71fb      	strb	r3, [r7, #7]
 8019308:	4613      	mov	r3, r2
 801930a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801930c:	f3ef 8310 	mrs	r3, PRIMASK
 8019310:	60fb      	str	r3, [r7, #12]
  return(result);
 8019312:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019314:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019316:	b672      	cpsid	i
}
 8019318:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801931a:	79bb      	ldrb	r3, [r7, #6]
 801931c:	b29b      	uxth	r3, r3
 801931e:	79f9      	ldrb	r1, [r7, #7]
 8019320:	683a      	ldr	r2, [r7, #0]
 8019322:	4806      	ldr	r0, [pc, #24]	; (801933c <SUBGRF_WriteBuffer+0x40>)
 8019324:	f7ee f89b 	bl	800745e <HAL_SUBGHZ_WriteBuffer>
 8019328:	697b      	ldr	r3, [r7, #20]
 801932a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801932c:	693b      	ldr	r3, [r7, #16]
 801932e:	f383 8810 	msr	PRIMASK, r3
}
 8019332:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019334:	bf00      	nop
 8019336:	3718      	adds	r7, #24
 8019338:	46bd      	mov	sp, r7
 801933a:	bd80      	pop	{r7, pc}
 801933c:	20000204 	.word	0x20000204

08019340 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019340:	b580      	push	{r7, lr}
 8019342:	b086      	sub	sp, #24
 8019344:	af00      	add	r7, sp, #0
 8019346:	4603      	mov	r3, r0
 8019348:	6039      	str	r1, [r7, #0]
 801934a:	71fb      	strb	r3, [r7, #7]
 801934c:	4613      	mov	r3, r2
 801934e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019350:	f3ef 8310 	mrs	r3, PRIMASK
 8019354:	60fb      	str	r3, [r7, #12]
  return(result);
 8019356:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019358:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801935a:	b672      	cpsid	i
}
 801935c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801935e:	79bb      	ldrb	r3, [r7, #6]
 8019360:	b29b      	uxth	r3, r3
 8019362:	79f9      	ldrb	r1, [r7, #7]
 8019364:	683a      	ldr	r2, [r7, #0]
 8019366:	4806      	ldr	r0, [pc, #24]	; (8019380 <SUBGRF_ReadBuffer+0x40>)
 8019368:	f7ee f8cc 	bl	8007504 <HAL_SUBGHZ_ReadBuffer>
 801936c:	697b      	ldr	r3, [r7, #20]
 801936e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019370:	693b      	ldr	r3, [r7, #16]
 8019372:	f383 8810 	msr	PRIMASK, r3
}
 8019376:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019378:	bf00      	nop
 801937a:	3718      	adds	r7, #24
 801937c:	46bd      	mov	sp, r7
 801937e:	bd80      	pop	{r7, pc}
 8019380:	20000204 	.word	0x20000204

08019384 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019384:	b580      	push	{r7, lr}
 8019386:	b086      	sub	sp, #24
 8019388:	af00      	add	r7, sp, #0
 801938a:	4603      	mov	r3, r0
 801938c:	6039      	str	r1, [r7, #0]
 801938e:	71fb      	strb	r3, [r7, #7]
 8019390:	4613      	mov	r3, r2
 8019392:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019394:	f3ef 8310 	mrs	r3, PRIMASK
 8019398:	60fb      	str	r3, [r7, #12]
  return(result);
 801939a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801939c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801939e:	b672      	cpsid	i
}
 80193a0:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80193a2:	88bb      	ldrh	r3, [r7, #4]
 80193a4:	79f9      	ldrb	r1, [r7, #7]
 80193a6:	683a      	ldr	r2, [r7, #0]
 80193a8:	4806      	ldr	r0, [pc, #24]	; (80193c4 <SUBGRF_WriteCommand+0x40>)
 80193aa:	f7ed ffa5 	bl	80072f8 <HAL_SUBGHZ_ExecSetCmd>
 80193ae:	697b      	ldr	r3, [r7, #20]
 80193b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193b2:	693b      	ldr	r3, [r7, #16]
 80193b4:	f383 8810 	msr	PRIMASK, r3
}
 80193b8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80193ba:	bf00      	nop
 80193bc:	3718      	adds	r7, #24
 80193be:	46bd      	mov	sp, r7
 80193c0:	bd80      	pop	{r7, pc}
 80193c2:	bf00      	nop
 80193c4:	20000204 	.word	0x20000204

080193c8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80193c8:	b580      	push	{r7, lr}
 80193ca:	b086      	sub	sp, #24
 80193cc:	af00      	add	r7, sp, #0
 80193ce:	4603      	mov	r3, r0
 80193d0:	6039      	str	r1, [r7, #0]
 80193d2:	71fb      	strb	r3, [r7, #7]
 80193d4:	4613      	mov	r3, r2
 80193d6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80193d8:	f3ef 8310 	mrs	r3, PRIMASK
 80193dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80193de:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80193e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80193e2:	b672      	cpsid	i
}
 80193e4:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80193e6:	88bb      	ldrh	r3, [r7, #4]
 80193e8:	79f9      	ldrb	r1, [r7, #7]
 80193ea:	683a      	ldr	r2, [r7, #0]
 80193ec:	4806      	ldr	r0, [pc, #24]	; (8019408 <SUBGRF_ReadCommand+0x40>)
 80193ee:	f7ed ffe2 	bl	80073b6 <HAL_SUBGHZ_ExecGetCmd>
 80193f2:	697b      	ldr	r3, [r7, #20]
 80193f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193f6:	693b      	ldr	r3, [r7, #16]
 80193f8:	f383 8810 	msr	PRIMASK, r3
}
 80193fc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80193fe:	bf00      	nop
 8019400:	3718      	adds	r7, #24
 8019402:	46bd      	mov	sp, r7
 8019404:	bd80      	pop	{r7, pc}
 8019406:	bf00      	nop
 8019408:	20000204 	.word	0x20000204

0801940c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801940c:	b580      	push	{r7, lr}
 801940e:	b084      	sub	sp, #16
 8019410:	af00      	add	r7, sp, #0
 8019412:	4603      	mov	r3, r0
 8019414:	460a      	mov	r2, r1
 8019416:	71fb      	strb	r3, [r7, #7]
 8019418:	4613      	mov	r3, r2
 801941a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801941c:	2301      	movs	r3, #1
 801941e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8019420:	79bb      	ldrb	r3, [r7, #6]
 8019422:	2b01      	cmp	r3, #1
 8019424:	d10d      	bne.n	8019442 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8019426:	79fb      	ldrb	r3, [r7, #7]
 8019428:	2b01      	cmp	r3, #1
 801942a:	d104      	bne.n	8019436 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801942c:	2302      	movs	r3, #2
 801942e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8019430:	2004      	movs	r0, #4
 8019432:	f000 f8df 	bl	80195f4 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8019436:	79fb      	ldrb	r3, [r7, #7]
 8019438:	2b02      	cmp	r3, #2
 801943a:	d107      	bne.n	801944c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801943c:	2303      	movs	r3, #3
 801943e:	73fb      	strb	r3, [r7, #15]
 8019440:	e004      	b.n	801944c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8019442:	79bb      	ldrb	r3, [r7, #6]
 8019444:	2b00      	cmp	r3, #0
 8019446:	d101      	bne.n	801944c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8019448:	2301      	movs	r3, #1
 801944a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801944c:	7bfb      	ldrb	r3, [r7, #15]
 801944e:	4618      	mov	r0, r3
 8019450:	f7f1 f825 	bl	800a49e <RBI_ConfigRFSwitch>
}
 8019454:	bf00      	nop
 8019456:	3710      	adds	r7, #16
 8019458:	46bd      	mov	sp, r7
 801945a:	bd80      	pop	{r7, pc}

0801945c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801945c:	b580      	push	{r7, lr}
 801945e:	b084      	sub	sp, #16
 8019460:	af00      	add	r7, sp, #0
 8019462:	4603      	mov	r3, r0
 8019464:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8019466:	2301      	movs	r3, #1
 8019468:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801946a:	f7f1 f826 	bl	800a4ba <RBI_GetTxConfig>
 801946e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8019470:	68bb      	ldr	r3, [r7, #8]
 8019472:	2b02      	cmp	r3, #2
 8019474:	d016      	beq.n	80194a4 <SUBGRF_SetRfTxPower+0x48>
 8019476:	68bb      	ldr	r3, [r7, #8]
 8019478:	2b02      	cmp	r3, #2
 801947a:	dc16      	bgt.n	80194aa <SUBGRF_SetRfTxPower+0x4e>
 801947c:	68bb      	ldr	r3, [r7, #8]
 801947e:	2b00      	cmp	r3, #0
 8019480:	d003      	beq.n	801948a <SUBGRF_SetRfTxPower+0x2e>
 8019482:	68bb      	ldr	r3, [r7, #8]
 8019484:	2b01      	cmp	r3, #1
 8019486:	d00a      	beq.n	801949e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8019488:	e00f      	b.n	80194aa <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801948a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801948e:	2b0f      	cmp	r3, #15
 8019490:	dd02      	ble.n	8019498 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8019492:	2302      	movs	r3, #2
 8019494:	73fb      	strb	r3, [r7, #15]
            break;
 8019496:	e009      	b.n	80194ac <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8019498:	2301      	movs	r3, #1
 801949a:	73fb      	strb	r3, [r7, #15]
            break;
 801949c:	e006      	b.n	80194ac <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801949e:	2301      	movs	r3, #1
 80194a0:	73fb      	strb	r3, [r7, #15]
            break;
 80194a2:	e003      	b.n	80194ac <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 80194a4:	2302      	movs	r3, #2
 80194a6:	73fb      	strb	r3, [r7, #15]
            break;
 80194a8:	e000      	b.n	80194ac <SUBGRF_SetRfTxPower+0x50>
            break;
 80194aa:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80194ac:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80194b0:	7bfb      	ldrb	r3, [r7, #15]
 80194b2:	2202      	movs	r2, #2
 80194b4:	4618      	mov	r0, r3
 80194b6:	f7ff fbcd 	bl	8018c54 <SUBGRF_SetTxParams>

    return paSelect;
 80194ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80194bc:	4618      	mov	r0, r3
 80194be:	3710      	adds	r7, #16
 80194c0:	46bd      	mov	sp, r7
 80194c2:	bd80      	pop	{r7, pc}

080194c4 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 80194c4:	b480      	push	{r7}
 80194c6:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 80194c8:	2301      	movs	r3, #1
}
 80194ca:	4618      	mov	r0, r3
 80194cc:	46bd      	mov	sp, r7
 80194ce:	bc80      	pop	{r7}
 80194d0:	4770      	bx	lr
	...

080194d4 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80194d4:	b580      	push	{r7, lr}
 80194d6:	b082      	sub	sp, #8
 80194d8:	af00      	add	r7, sp, #0
 80194da:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80194dc:	4b03      	ldr	r3, [pc, #12]	; (80194ec <HAL_SUBGHZ_TxCpltCallback+0x18>)
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	2001      	movs	r0, #1
 80194e2:	4798      	blx	r3
}
 80194e4:	bf00      	nop
 80194e6:	3708      	adds	r7, #8
 80194e8:	46bd      	mov	sp, r7
 80194ea:	bd80      	pop	{r7, pc}
 80194ec:	20001cc4 	.word	0x20001cc4

080194f0 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80194f0:	b580      	push	{r7, lr}
 80194f2:	b082      	sub	sp, #8
 80194f4:	af00      	add	r7, sp, #0
 80194f6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80194f8:	4b03      	ldr	r3, [pc, #12]	; (8019508 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	2002      	movs	r0, #2
 80194fe:	4798      	blx	r3
}
 8019500:	bf00      	nop
 8019502:	3708      	adds	r7, #8
 8019504:	46bd      	mov	sp, r7
 8019506:	bd80      	pop	{r7, pc}
 8019508:	20001cc4 	.word	0x20001cc4

0801950c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801950c:	b580      	push	{r7, lr}
 801950e:	b082      	sub	sp, #8
 8019510:	af00      	add	r7, sp, #0
 8019512:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8019514:	4b03      	ldr	r3, [pc, #12]	; (8019524 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8019516:	681b      	ldr	r3, [r3, #0]
 8019518:	2040      	movs	r0, #64	; 0x40
 801951a:	4798      	blx	r3
}
 801951c:	bf00      	nop
 801951e:	3708      	adds	r7, #8
 8019520:	46bd      	mov	sp, r7
 8019522:	bd80      	pop	{r7, pc}
 8019524:	20001cc4 	.word	0x20001cc4

08019528 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8019528:	b580      	push	{r7, lr}
 801952a:	b082      	sub	sp, #8
 801952c:	af00      	add	r7, sp, #0
 801952e:	6078      	str	r0, [r7, #4]
 8019530:	460b      	mov	r3, r1
 8019532:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8019534:	78fb      	ldrb	r3, [r7, #3]
 8019536:	2b00      	cmp	r3, #0
 8019538:	d002      	beq.n	8019540 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801953a:	2b01      	cmp	r3, #1
 801953c:	d005      	beq.n	801954a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801953e:	e00a      	b.n	8019556 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8019540:	4b07      	ldr	r3, [pc, #28]	; (8019560 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	2080      	movs	r0, #128	; 0x80
 8019546:	4798      	blx	r3
            break;
 8019548:	e005      	b.n	8019556 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801954a:	4b05      	ldr	r3, [pc, #20]	; (8019560 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8019552:	4798      	blx	r3
            break;
 8019554:	bf00      	nop
    }
}
 8019556:	bf00      	nop
 8019558:	3708      	adds	r7, #8
 801955a:	46bd      	mov	sp, r7
 801955c:	bd80      	pop	{r7, pc}
 801955e:	bf00      	nop
 8019560:	20001cc4 	.word	0x20001cc4

08019564 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019564:	b580      	push	{r7, lr}
 8019566:	b082      	sub	sp, #8
 8019568:	af00      	add	r7, sp, #0
 801956a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801956c:	4b04      	ldr	r3, [pc, #16]	; (8019580 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	f44f 7000 	mov.w	r0, #512	; 0x200
 8019574:	4798      	blx	r3
}
 8019576:	bf00      	nop
 8019578:	3708      	adds	r7, #8
 801957a:	46bd      	mov	sp, r7
 801957c:	bd80      	pop	{r7, pc}
 801957e:	bf00      	nop
 8019580:	20001cc4 	.word	0x20001cc4

08019584 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019584:	b580      	push	{r7, lr}
 8019586:	b082      	sub	sp, #8
 8019588:	af00      	add	r7, sp, #0
 801958a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801958c:	4b03      	ldr	r3, [pc, #12]	; (801959c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	2020      	movs	r0, #32
 8019592:	4798      	blx	r3
}
 8019594:	bf00      	nop
 8019596:	3708      	adds	r7, #8
 8019598:	46bd      	mov	sp, r7
 801959a:	bd80      	pop	{r7, pc}
 801959c:	20001cc4 	.word	0x20001cc4

080195a0 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80195a0:	b580      	push	{r7, lr}
 80195a2:	b082      	sub	sp, #8
 80195a4:	af00      	add	r7, sp, #0
 80195a6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80195a8:	4b03      	ldr	r3, [pc, #12]	; (80195b8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 80195aa:	681b      	ldr	r3, [r3, #0]
 80195ac:	2004      	movs	r0, #4
 80195ae:	4798      	blx	r3
}
 80195b0:	bf00      	nop
 80195b2:	3708      	adds	r7, #8
 80195b4:	46bd      	mov	sp, r7
 80195b6:	bd80      	pop	{r7, pc}
 80195b8:	20001cc4 	.word	0x20001cc4

080195bc <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80195bc:	b580      	push	{r7, lr}
 80195be:	b082      	sub	sp, #8
 80195c0:	af00      	add	r7, sp, #0
 80195c2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80195c4:	4b03      	ldr	r3, [pc, #12]	; (80195d4 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 80195c6:	681b      	ldr	r3, [r3, #0]
 80195c8:	2008      	movs	r0, #8
 80195ca:	4798      	blx	r3
}
 80195cc:	bf00      	nop
 80195ce:	3708      	adds	r7, #8
 80195d0:	46bd      	mov	sp, r7
 80195d2:	bd80      	pop	{r7, pc}
 80195d4:	20001cc4 	.word	0x20001cc4

080195d8 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80195d8:	b580      	push	{r7, lr}
 80195da:	b082      	sub	sp, #8
 80195dc:	af00      	add	r7, sp, #0
 80195de:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80195e0:	4b03      	ldr	r3, [pc, #12]	; (80195f0 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 80195e2:	681b      	ldr	r3, [r3, #0]
 80195e4:	2010      	movs	r0, #16
 80195e6:	4798      	blx	r3
}
 80195e8:	bf00      	nop
 80195ea:	3708      	adds	r7, #8
 80195ec:	46bd      	mov	sp, r7
 80195ee:	bd80      	pop	{r7, pc}
 80195f0:	20001cc4 	.word	0x20001cc4

080195f4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 80195f4:	b580      	push	{r7, lr}
 80195f6:	b084      	sub	sp, #16
 80195f8:	af00      	add	r7, sp, #0
 80195fa:	4603      	mov	r3, r0
 80195fc:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 80195fe:	f7f0 ff6a 	bl	800a4d6 <RBI_IsDCDC>
 8019602:	4603      	mov	r3, r0
 8019604:	2b01      	cmp	r3, #1
 8019606:	d112      	bne.n	801962e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8019608:	f640 1023 	movw	r0, #2339	; 0x923
 801960c:	f7ff fe1e 	bl	801924c <SUBGRF_ReadRegister>
 8019610:	4603      	mov	r3, r0
 8019612:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8019614:	7bfb      	ldrb	r3, [r7, #15]
 8019616:	f023 0306 	bic.w	r3, r3, #6
 801961a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801961c:	7bfa      	ldrb	r2, [r7, #15]
 801961e:	79fb      	ldrb	r3, [r7, #7]
 8019620:	4313      	orrs	r3, r2
 8019622:	b2db      	uxtb	r3, r3
 8019624:	4619      	mov	r1, r3
 8019626:	f640 1023 	movw	r0, #2339	; 0x923
 801962a:	f7ff fdfb 	bl	8019224 <SUBGRF_WriteRegister>
  }
}
 801962e:	bf00      	nop
 8019630:	3710      	adds	r7, #16
 8019632:	46bd      	mov	sp, r7
 8019634:	bd80      	pop	{r7, pc}
	...

08019638 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8019638:	b480      	push	{r7}
 801963a:	b085      	sub	sp, #20
 801963c:	af00      	add	r7, sp, #0
 801963e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	2b00      	cmp	r3, #0
 8019644:	d101      	bne.n	801964a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8019646:	231f      	movs	r3, #31
 8019648:	e016      	b.n	8019678 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801964a:	2300      	movs	r3, #0
 801964c:	73fb      	strb	r3, [r7, #15]
 801964e:	e00f      	b.n	8019670 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8019650:	7bfb      	ldrb	r3, [r7, #15]
 8019652:	4a0c      	ldr	r2, [pc, #48]	; (8019684 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019654:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019658:	687a      	ldr	r2, [r7, #4]
 801965a:	429a      	cmp	r2, r3
 801965c:	d205      	bcs.n	801966a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801965e:	7bfb      	ldrb	r3, [r7, #15]
 8019660:	4a08      	ldr	r2, [pc, #32]	; (8019684 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019662:	00db      	lsls	r3, r3, #3
 8019664:	4413      	add	r3, r2
 8019666:	791b      	ldrb	r3, [r3, #4]
 8019668:	e006      	b.n	8019678 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801966a:	7bfb      	ldrb	r3, [r7, #15]
 801966c:	3301      	adds	r3, #1
 801966e:	73fb      	strb	r3, [r7, #15]
 8019670:	7bfb      	ldrb	r3, [r7, #15]
 8019672:	2b15      	cmp	r3, #21
 8019674:	d9ec      	bls.n	8019650 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8019676:	e7fe      	b.n	8019676 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8019678:	4618      	mov	r0, r3
 801967a:	3714      	adds	r7, #20
 801967c:	46bd      	mov	sp, r7
 801967e:	bc80      	pop	{r7}
 8019680:	4770      	bx	lr
 8019682:	bf00      	nop
 8019684:	0801ba80 	.word	0x0801ba80

08019688 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8019688:	b580      	push	{r7, lr}
 801968a:	b08a      	sub	sp, #40	; 0x28
 801968c:	af00      	add	r7, sp, #0
 801968e:	6078      	str	r0, [r7, #4]
 8019690:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8019692:	4b35      	ldr	r3, [pc, #212]	; (8019768 <SUBGRF_GetCFO+0xe0>)
 8019694:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8019696:	f640 0007 	movw	r0, #2055	; 0x807
 801969a:	f7ff fdd7 	bl	801924c <SUBGRF_ReadRegister>
 801969e:	4603      	mov	r3, r0
 80196a0:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80196a2:	7ffb      	ldrb	r3, [r7, #31]
 80196a4:	08db      	lsrs	r3, r3, #3
 80196a6:	b2db      	uxtb	r3, r3
 80196a8:	f003 0303 	and.w	r3, r3, #3
 80196ac:	3328      	adds	r3, #40	; 0x28
 80196ae:	443b      	add	r3, r7
 80196b0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80196b4:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 80196b6:	7ffb      	ldrb	r3, [r7, #31]
 80196b8:	f003 0307 	and.w	r3, r3, #7
 80196bc:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 80196be:	7fba      	ldrb	r2, [r7, #30]
 80196c0:	7f7b      	ldrb	r3, [r7, #29]
 80196c2:	3b01      	subs	r3, #1
 80196c4:	fa02 f303 	lsl.w	r3, r2, r3
 80196c8:	461a      	mov	r2, r3
 80196ca:	4b28      	ldr	r3, [pc, #160]	; (801976c <SUBGRF_GetCFO+0xe4>)
 80196cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80196d0:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 80196d2:	69ba      	ldr	r2, [r7, #24]
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80196da:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 80196dc:	2301      	movs	r3, #1
 80196de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80196e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80196e6:	697a      	ldr	r2, [r7, #20]
 80196e8:	fb02 f303 	mul.w	r3, r2, r3
 80196ec:	2b07      	cmp	r3, #7
 80196ee:	d802      	bhi.n	80196f6 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 80196f0:	2302      	movs	r3, #2
 80196f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 80196f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80196fa:	697a      	ldr	r2, [r7, #20]
 80196fc:	fb02 f303 	mul.w	r3, r2, r3
 8019700:	2b03      	cmp	r3, #3
 8019702:	d802      	bhi.n	801970a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8019704:	2304      	movs	r3, #4
 8019706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801970a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801970e:	69bb      	ldr	r3, [r7, #24]
 8019710:	fb02 f303 	mul.w	r3, r2, r3
 8019714:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8019716:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801971a:	f7ff fd97 	bl	801924c <SUBGRF_ReadRegister>
 801971e:	4603      	mov	r3, r0
 8019720:	021b      	lsls	r3, r3, #8
 8019722:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8019726:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8019728:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801972c:	f7ff fd8e 	bl	801924c <SUBGRF_ReadRegister>
 8019730:	4603      	mov	r3, r0
 8019732:	461a      	mov	r2, r3
 8019734:	6a3b      	ldr	r3, [r7, #32]
 8019736:	4313      	orrs	r3, r2
 8019738:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801973a:	6a3b      	ldr	r3, [r7, #32]
 801973c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019740:	2b00      	cmp	r3, #0
 8019742:	d005      	beq.n	8019750 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8019744:	6a3b      	ldr	r3, [r7, #32]
 8019746:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801974a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801974e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8019750:	693b      	ldr	r3, [r7, #16]
 8019752:	095b      	lsrs	r3, r3, #5
 8019754:	6a3a      	ldr	r2, [r7, #32]
 8019756:	fb02 f303 	mul.w	r3, r2, r3
 801975a:	11da      	asrs	r2, r3, #7
 801975c:	683b      	ldr	r3, [r7, #0]
 801975e:	601a      	str	r2, [r3, #0]
}
 8019760:	bf00      	nop
 8019762:	3728      	adds	r7, #40	; 0x28
 8019764:	46bd      	mov	sp, r7
 8019766:	bd80      	pop	{r7, pc}
 8019768:	0c0a0804 	.word	0x0c0a0804
 801976c:	01e84800 	.word	0x01e84800

08019770 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8019770:	b480      	push	{r7}
 8019772:	b087      	sub	sp, #28
 8019774:	af00      	add	r7, sp, #0
 8019776:	4603      	mov	r3, r0
 8019778:	60b9      	str	r1, [r7, #8]
 801977a:	607a      	str	r2, [r7, #4]
 801977c:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801977e:	2300      	movs	r3, #0
 8019780:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8019782:	f04f 33ff 	mov.w	r3, #4294967295
 8019786:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8019788:	697b      	ldr	r3, [r7, #20]
}
 801978a:	4618      	mov	r0, r3
 801978c:	371c      	adds	r7, #28
 801978e:	46bd      	mov	sp, r7
 8019790:	bc80      	pop	{r7}
 8019792:	4770      	bx	lr

08019794 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8019794:	b480      	push	{r7}
 8019796:	b087      	sub	sp, #28
 8019798:	af00      	add	r7, sp, #0
 801979a:	4603      	mov	r3, r0
 801979c:	60b9      	str	r1, [r7, #8]
 801979e:	607a      	str	r2, [r7, #4]
 80197a0:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 80197a2:	2300      	movs	r3, #0
 80197a4:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 80197a6:	f04f 33ff 	mov.w	r3, #4294967295
 80197aa:	617b      	str	r3, [r7, #20]
#endif
  return status;
 80197ac:	697b      	ldr	r3, [r7, #20]
}
 80197ae:	4618      	mov	r0, r3
 80197b0:	371c      	adds	r7, #28
 80197b2:	46bd      	mov	sp, r7
 80197b4:	bc80      	pop	{r7}
 80197b6:	4770      	bx	lr

080197b8 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 80197b8:	b480      	push	{r7}
 80197ba:	b085      	sub	sp, #20
 80197bc:	af00      	add	r7, sp, #0
 80197be:	60f8      	str	r0, [r7, #12]
 80197c0:	60b9      	str	r1, [r7, #8]
 80197c2:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 80197c4:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 80197c8:	4618      	mov	r0, r3
 80197ca:	3714      	adds	r7, #20
 80197cc:	46bd      	mov	sp, r7
 80197ce:	bc80      	pop	{r7}
 80197d0:	4770      	bx	lr

080197d2 <RFW_DeInit>:

void RFW_DeInit( void)
{
 80197d2:	b480      	push	{r7}
 80197d4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 80197d6:	bf00      	nop
 80197d8:	46bd      	mov	sp, r7
 80197da:	bc80      	pop	{r7}
 80197dc:	4770      	bx	lr

080197de <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 80197de:	b480      	push	{r7}
 80197e0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 80197e2:	2300      	movs	r3, #0
#endif
}
 80197e4:	4618      	mov	r0, r3
 80197e6:	46bd      	mov	sp, r7
 80197e8:	bc80      	pop	{r7}
 80197ea:	4770      	bx	lr

080197ec <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 80197ec:	b480      	push	{r7}
 80197ee:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 80197f0:	2300      	movs	r3, #0
#endif
}
 80197f2:	4618      	mov	r0, r3
 80197f4:	46bd      	mov	sp, r7
 80197f6:	bc80      	pop	{r7}
 80197f8:	4770      	bx	lr

080197fa <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 80197fa:	b480      	push	{r7}
 80197fc:	b083      	sub	sp, #12
 80197fe:	af00      	add	r7, sp, #0
 8019800:	4603      	mov	r3, r0
 8019802:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8019804:	bf00      	nop
 8019806:	370c      	adds	r7, #12
 8019808:	46bd      	mov	sp, r7
 801980a:	bc80      	pop	{r7}
 801980c:	4770      	bx	lr

0801980e <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801980e:	b480      	push	{r7}
 8019810:	b087      	sub	sp, #28
 8019812:	af00      	add	r7, sp, #0
 8019814:	60f8      	str	r0, [r7, #12]
 8019816:	460b      	mov	r3, r1
 8019818:	607a      	str	r2, [r7, #4]
 801981a:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801981c:	f04f 33ff 	mov.w	r3, #4294967295
 8019820:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 8019822:	697b      	ldr	r3, [r7, #20]
}
 8019824:	4618      	mov	r0, r3
 8019826:	371c      	adds	r7, #28
 8019828:	46bd      	mov	sp, r7
 801982a:	bc80      	pop	{r7}
 801982c:	4770      	bx	lr

0801982e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801982e:	b480      	push	{r7}
 8019830:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8019832:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8019836:	4618      	mov	r0, r3
 8019838:	46bd      	mov	sp, r7
 801983a:	bc80      	pop	{r7}
 801983c:	4770      	bx	lr

0801983e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801983e:	b480      	push	{r7}
 8019840:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8019842:	bf00      	nop
 8019844:	46bd      	mov	sp, r7
 8019846:	bc80      	pop	{r7}
 8019848:	4770      	bx	lr

0801984a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801984a:	b480      	push	{r7}
 801984c:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801984e:	bf00      	nop
 8019850:	46bd      	mov	sp, r7
 8019852:	bc80      	pop	{r7}
 8019854:	4770      	bx	lr

08019856 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8019856:	b480      	push	{r7}
 8019858:	b083      	sub	sp, #12
 801985a:	af00      	add	r7, sp, #0
 801985c:	4603      	mov	r3, r0
 801985e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8019860:	bf00      	nop
 8019862:	370c      	adds	r7, #12
 8019864:	46bd      	mov	sp, r7
 8019866:	bc80      	pop	{r7}
 8019868:	4770      	bx	lr
	...

0801986c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801986c:	b480      	push	{r7}
 801986e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019870:	4b04      	ldr	r3, [pc, #16]	; (8019884 <UTIL_LPM_Init+0x18>)
 8019872:	2200      	movs	r2, #0
 8019874:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8019876:	4b04      	ldr	r3, [pc, #16]	; (8019888 <UTIL_LPM_Init+0x1c>)
 8019878:	2200      	movs	r2, #0
 801987a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801987c:	bf00      	nop
 801987e:	46bd      	mov	sp, r7
 8019880:	bc80      	pop	{r7}
 8019882:	4770      	bx	lr
 8019884:	20001cc8 	.word	0x20001cc8
 8019888:	20001ccc 	.word	0x20001ccc

0801988c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801988c:	b480      	push	{r7}
 801988e:	b087      	sub	sp, #28
 8019890:	af00      	add	r7, sp, #0
 8019892:	6078      	str	r0, [r7, #4]
 8019894:	460b      	mov	r3, r1
 8019896:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019898:	f3ef 8310 	mrs	r3, PRIMASK
 801989c:	613b      	str	r3, [r7, #16]
  return(result);
 801989e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80198a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80198a2:	b672      	cpsid	i
}
 80198a4:	bf00      	nop
  
  switch( state )
 80198a6:	78fb      	ldrb	r3, [r7, #3]
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d008      	beq.n	80198be <UTIL_LPM_SetStopMode+0x32>
 80198ac:	2b01      	cmp	r3, #1
 80198ae:	d10e      	bne.n	80198ce <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80198b0:	4b0d      	ldr	r3, [pc, #52]	; (80198e8 <UTIL_LPM_SetStopMode+0x5c>)
 80198b2:	681a      	ldr	r2, [r3, #0]
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	4313      	orrs	r3, r2
 80198b8:	4a0b      	ldr	r2, [pc, #44]	; (80198e8 <UTIL_LPM_SetStopMode+0x5c>)
 80198ba:	6013      	str	r3, [r2, #0]
      break;
 80198bc:	e008      	b.n	80198d0 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	43da      	mvns	r2, r3
 80198c2:	4b09      	ldr	r3, [pc, #36]	; (80198e8 <UTIL_LPM_SetStopMode+0x5c>)
 80198c4:	681b      	ldr	r3, [r3, #0]
 80198c6:	4013      	ands	r3, r2
 80198c8:	4a07      	ldr	r2, [pc, #28]	; (80198e8 <UTIL_LPM_SetStopMode+0x5c>)
 80198ca:	6013      	str	r3, [r2, #0]
      break;
 80198cc:	e000      	b.n	80198d0 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 80198ce:	bf00      	nop
 80198d0:	697b      	ldr	r3, [r7, #20]
 80198d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80198d4:	68fb      	ldr	r3, [r7, #12]
 80198d6:	f383 8810 	msr	PRIMASK, r3
}
 80198da:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80198dc:	bf00      	nop
 80198de:	371c      	adds	r7, #28
 80198e0:	46bd      	mov	sp, r7
 80198e2:	bc80      	pop	{r7}
 80198e4:	4770      	bx	lr
 80198e6:	bf00      	nop
 80198e8:	20001cc8 	.word	0x20001cc8

080198ec <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80198ec:	b480      	push	{r7}
 80198ee:	b087      	sub	sp, #28
 80198f0:	af00      	add	r7, sp, #0
 80198f2:	6078      	str	r0, [r7, #4]
 80198f4:	460b      	mov	r3, r1
 80198f6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80198f8:	f3ef 8310 	mrs	r3, PRIMASK
 80198fc:	613b      	str	r3, [r7, #16]
  return(result);
 80198fe:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019900:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019902:	b672      	cpsid	i
}
 8019904:	bf00      	nop
  
  switch(state)
 8019906:	78fb      	ldrb	r3, [r7, #3]
 8019908:	2b00      	cmp	r3, #0
 801990a:	d008      	beq.n	801991e <UTIL_LPM_SetOffMode+0x32>
 801990c:	2b01      	cmp	r3, #1
 801990e:	d10e      	bne.n	801992e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8019910:	4b0d      	ldr	r3, [pc, #52]	; (8019948 <UTIL_LPM_SetOffMode+0x5c>)
 8019912:	681a      	ldr	r2, [r3, #0]
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	4313      	orrs	r3, r2
 8019918:	4a0b      	ldr	r2, [pc, #44]	; (8019948 <UTIL_LPM_SetOffMode+0x5c>)
 801991a:	6013      	str	r3, [r2, #0]
      break;
 801991c:	e008      	b.n	8019930 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	43da      	mvns	r2, r3
 8019922:	4b09      	ldr	r3, [pc, #36]	; (8019948 <UTIL_LPM_SetOffMode+0x5c>)
 8019924:	681b      	ldr	r3, [r3, #0]
 8019926:	4013      	ands	r3, r2
 8019928:	4a07      	ldr	r2, [pc, #28]	; (8019948 <UTIL_LPM_SetOffMode+0x5c>)
 801992a:	6013      	str	r3, [r2, #0]
      break;
 801992c:	e000      	b.n	8019930 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801992e:	bf00      	nop
 8019930:	697b      	ldr	r3, [r7, #20]
 8019932:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019934:	68fb      	ldr	r3, [r7, #12]
 8019936:	f383 8810 	msr	PRIMASK, r3
}
 801993a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801993c:	bf00      	nop
 801993e:	371c      	adds	r7, #28
 8019940:	46bd      	mov	sp, r7
 8019942:	bc80      	pop	{r7}
 8019944:	4770      	bx	lr
 8019946:	bf00      	nop
 8019948:	20001ccc 	.word	0x20001ccc

0801994c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801994c:	b580      	push	{r7, lr}
 801994e:	b084      	sub	sp, #16
 8019950:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019952:	f3ef 8310 	mrs	r3, PRIMASK
 8019956:	60bb      	str	r3, [r7, #8]
  return(result);
 8019958:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801995a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801995c:	b672      	cpsid	i
}
 801995e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8019960:	4b12      	ldr	r3, [pc, #72]	; (80199ac <UTIL_LPM_EnterLowPower+0x60>)
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	2b00      	cmp	r3, #0
 8019966:	d006      	beq.n	8019976 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8019968:	4b11      	ldr	r3, [pc, #68]	; (80199b0 <UTIL_LPM_EnterLowPower+0x64>)
 801996a:	681b      	ldr	r3, [r3, #0]
 801996c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801996e:	4b10      	ldr	r3, [pc, #64]	; (80199b0 <UTIL_LPM_EnterLowPower+0x64>)
 8019970:	685b      	ldr	r3, [r3, #4]
 8019972:	4798      	blx	r3
 8019974:	e010      	b.n	8019998 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8019976:	4b0f      	ldr	r3, [pc, #60]	; (80199b4 <UTIL_LPM_EnterLowPower+0x68>)
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	2b00      	cmp	r3, #0
 801997c:	d006      	beq.n	801998c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801997e:	4b0c      	ldr	r3, [pc, #48]	; (80199b0 <UTIL_LPM_EnterLowPower+0x64>)
 8019980:	689b      	ldr	r3, [r3, #8]
 8019982:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8019984:	4b0a      	ldr	r3, [pc, #40]	; (80199b0 <UTIL_LPM_EnterLowPower+0x64>)
 8019986:	68db      	ldr	r3, [r3, #12]
 8019988:	4798      	blx	r3
 801998a:	e005      	b.n	8019998 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801998c:	4b08      	ldr	r3, [pc, #32]	; (80199b0 <UTIL_LPM_EnterLowPower+0x64>)
 801998e:	691b      	ldr	r3, [r3, #16]
 8019990:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8019992:	4b07      	ldr	r3, [pc, #28]	; (80199b0 <UTIL_LPM_EnterLowPower+0x64>)
 8019994:	695b      	ldr	r3, [r3, #20]
 8019996:	4798      	blx	r3
 8019998:	68fb      	ldr	r3, [r7, #12]
 801999a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	f383 8810 	msr	PRIMASK, r3
}
 80199a2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 80199a4:	bf00      	nop
 80199a6:	3710      	adds	r7, #16
 80199a8:	46bd      	mov	sp, r7
 80199aa:	bd80      	pop	{r7, pc}
 80199ac:	20001cc8 	.word	0x20001cc8
 80199b0:	0801b580 	.word	0x0801b580
 80199b4:	20001ccc 	.word	0x20001ccc

080199b8 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 80199b8:	b480      	push	{r7}
 80199ba:	b087      	sub	sp, #28
 80199bc:	af00      	add	r7, sp, #0
 80199be:	60f8      	str	r0, [r7, #12]
 80199c0:	60b9      	str	r1, [r7, #8]
 80199c2:	4613      	mov	r3, r2
 80199c4:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 80199c6:	68fb      	ldr	r3, [r7, #12]
 80199c8:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 80199ca:	68bb      	ldr	r3, [r7, #8]
 80199cc:	613b      	str	r3, [r7, #16]

  while( size-- )
 80199ce:	e007      	b.n	80199e0 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 80199d0:	693a      	ldr	r2, [r7, #16]
 80199d2:	1c53      	adds	r3, r2, #1
 80199d4:	613b      	str	r3, [r7, #16]
 80199d6:	697b      	ldr	r3, [r7, #20]
 80199d8:	1c59      	adds	r1, r3, #1
 80199da:	6179      	str	r1, [r7, #20]
 80199dc:	7812      	ldrb	r2, [r2, #0]
 80199de:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80199e0:	88fb      	ldrh	r3, [r7, #6]
 80199e2:	1e5a      	subs	r2, r3, #1
 80199e4:	80fa      	strh	r2, [r7, #6]
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d1f2      	bne.n	80199d0 <UTIL_MEM_cpy_8+0x18>
    }
}
 80199ea:	bf00      	nop
 80199ec:	bf00      	nop
 80199ee:	371c      	adds	r7, #28
 80199f0:	46bd      	mov	sp, r7
 80199f2:	bc80      	pop	{r7}
 80199f4:	4770      	bx	lr

080199f6 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 80199f6:	b480      	push	{r7}
 80199f8:	b085      	sub	sp, #20
 80199fa:	af00      	add	r7, sp, #0
 80199fc:	6078      	str	r0, [r7, #4]
 80199fe:	460b      	mov	r3, r1
 8019a00:	70fb      	strb	r3, [r7, #3]
 8019a02:	4613      	mov	r3, r2
 8019a04:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8019a0a:	e004      	b.n	8019a16 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8019a0c:	68fb      	ldr	r3, [r7, #12]
 8019a0e:	1c5a      	adds	r2, r3, #1
 8019a10:	60fa      	str	r2, [r7, #12]
 8019a12:	78fa      	ldrb	r2, [r7, #3]
 8019a14:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019a16:	883b      	ldrh	r3, [r7, #0]
 8019a18:	1e5a      	subs	r2, r3, #1
 8019a1a:	803a      	strh	r2, [r7, #0]
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d1f5      	bne.n	8019a0c <UTIL_MEM_set_8+0x16>
  }
}
 8019a20:	bf00      	nop
 8019a22:	bf00      	nop
 8019a24:	3714      	adds	r7, #20
 8019a26:	46bd      	mov	sp, r7
 8019a28:	bc80      	pop	{r7}
 8019a2a:	4770      	bx	lr

08019a2c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8019a2c:	b082      	sub	sp, #8
 8019a2e:	b480      	push	{r7}
 8019a30:	b087      	sub	sp, #28
 8019a32:	af00      	add	r7, sp, #0
 8019a34:	60f8      	str	r0, [r7, #12]
 8019a36:	1d38      	adds	r0, r7, #4
 8019a38:	e880 0006 	stmia.w	r0, {r1, r2}
 8019a3c:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8019a3e:	2300      	movs	r3, #0
 8019a40:	613b      	str	r3, [r7, #16]
 8019a42:	2300      	movs	r3, #0
 8019a44:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 8019a46:	687a      	ldr	r2, [r7, #4]
 8019a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a4a:	4413      	add	r3, r2
 8019a4c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8019a4e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019a52:	b29a      	uxth	r2, r3
 8019a54:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8019a58:	b29b      	uxth	r3, r3
 8019a5a:	4413      	add	r3, r2
 8019a5c:	b29b      	uxth	r3, r3
 8019a5e:	b21b      	sxth	r3, r3
 8019a60:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 8019a62:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019a66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019a6a:	db0a      	blt.n	8019a82 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 8019a6c:	693b      	ldr	r3, [r7, #16]
 8019a6e:	3301      	adds	r3, #1
 8019a70:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 8019a72:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019a76:	b29b      	uxth	r3, r3
 8019a78:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8019a7c:	b29b      	uxth	r3, r3
 8019a7e:	b21b      	sxth	r3, r3
 8019a80:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	461a      	mov	r2, r3
 8019a86:	f107 0310 	add.w	r3, r7, #16
 8019a8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019a8e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019a92:	68f8      	ldr	r0, [r7, #12]
 8019a94:	371c      	adds	r7, #28
 8019a96:	46bd      	mov	sp, r7
 8019a98:	bc80      	pop	{r7}
 8019a9a:	b002      	add	sp, #8
 8019a9c:	4770      	bx	lr

08019a9e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8019a9e:	b082      	sub	sp, #8
 8019aa0:	b480      	push	{r7}
 8019aa2:	b087      	sub	sp, #28
 8019aa4:	af00      	add	r7, sp, #0
 8019aa6:	60f8      	str	r0, [r7, #12]
 8019aa8:	1d38      	adds	r0, r7, #4
 8019aaa:	e880 0006 	stmia.w	r0, {r1, r2}
 8019aae:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8019ab0:	2300      	movs	r3, #0
 8019ab2:	613b      	str	r3, [r7, #16]
 8019ab4:	2300      	movs	r3, #0
 8019ab6:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 8019ab8:	687a      	ldr	r2, [r7, #4]
 8019aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019abc:	1ad3      	subs	r3, r2, r3
 8019abe:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8019ac0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019ac4:	b29a      	uxth	r2, r3
 8019ac6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8019aca:	b29b      	uxth	r3, r3
 8019acc:	1ad3      	subs	r3, r2, r3
 8019ace:	b29b      	uxth	r3, r3
 8019ad0:	b21b      	sxth	r3, r3
 8019ad2:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 8019ad4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	da0a      	bge.n	8019af2 <SysTimeSub+0x54>
  {
    c.Seconds--;
 8019adc:	693b      	ldr	r3, [r7, #16]
 8019ade:	3b01      	subs	r3, #1
 8019ae0:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 8019ae2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019ae6:	b29b      	uxth	r3, r3
 8019ae8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8019aec:	b29b      	uxth	r3, r3
 8019aee:	b21b      	sxth	r3, r3
 8019af0:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	461a      	mov	r2, r3
 8019af6:	f107 0310 	add.w	r3, r7, #16
 8019afa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019afe:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019b02:	68f8      	ldr	r0, [r7, #12]
 8019b04:	371c      	adds	r7, #28
 8019b06:	46bd      	mov	sp, r7
 8019b08:	bc80      	pop	{r7}
 8019b0a:	b002      	add	sp, #8
 8019b0c:	4770      	bx	lr
	...

08019b10 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8019b10:	b580      	push	{r7, lr}
 8019b12:	b088      	sub	sp, #32
 8019b14:	af02      	add	r7, sp, #8
 8019b16:	463b      	mov	r3, r7
 8019b18:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019b1c:	2300      	movs	r3, #0
 8019b1e:	60bb      	str	r3, [r7, #8]
 8019b20:	2300      	movs	r3, #0
 8019b22:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019b24:	4b10      	ldr	r3, [pc, #64]	; (8019b68 <SysTimeSet+0x58>)
 8019b26:	691b      	ldr	r3, [r3, #16]
 8019b28:	f107 0208 	add.w	r2, r7, #8
 8019b2c:	3204      	adds	r2, #4
 8019b2e:	4610      	mov	r0, r2
 8019b30:	4798      	blx	r3
 8019b32:	4603      	mov	r3, r0
 8019b34:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8019b36:	f107 0010 	add.w	r0, r7, #16
 8019b3a:	68fb      	ldr	r3, [r7, #12]
 8019b3c:	9300      	str	r3, [sp, #0]
 8019b3e:	68bb      	ldr	r3, [r7, #8]
 8019b40:	463a      	mov	r2, r7
 8019b42:	ca06      	ldmia	r2, {r1, r2}
 8019b44:	f7ff ffab 	bl	8019a9e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8019b48:	4b07      	ldr	r3, [pc, #28]	; (8019b68 <SysTimeSet+0x58>)
 8019b4a:	681b      	ldr	r3, [r3, #0]
 8019b4c:	693a      	ldr	r2, [r7, #16]
 8019b4e:	4610      	mov	r0, r2
 8019b50:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8019b52:	4b05      	ldr	r3, [pc, #20]	; (8019b68 <SysTimeSet+0x58>)
 8019b54:	689b      	ldr	r3, [r3, #8]
 8019b56:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8019b5a:	4610      	mov	r0, r2
 8019b5c:	4798      	blx	r3
}
 8019b5e:	bf00      	nop
 8019b60:	3718      	adds	r7, #24
 8019b62:	46bd      	mov	sp, r7
 8019b64:	bd80      	pop	{r7, pc}
 8019b66:	bf00      	nop
 8019b68:	0801b664 	.word	0x0801b664

08019b6c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8019b6c:	b580      	push	{r7, lr}
 8019b6e:	b08a      	sub	sp, #40	; 0x28
 8019b70:	af02      	add	r7, sp, #8
 8019b72:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019b74:	2300      	movs	r3, #0
 8019b76:	61bb      	str	r3, [r7, #24]
 8019b78:	2300      	movs	r3, #0
 8019b7a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8019b7c:	2300      	movs	r3, #0
 8019b7e:	613b      	str	r3, [r7, #16]
 8019b80:	2300      	movs	r3, #0
 8019b82:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019b84:	4b14      	ldr	r3, [pc, #80]	; (8019bd8 <SysTimeGet+0x6c>)
 8019b86:	691b      	ldr	r3, [r3, #16]
 8019b88:	f107 0218 	add.w	r2, r7, #24
 8019b8c:	3204      	adds	r2, #4
 8019b8e:	4610      	mov	r0, r2
 8019b90:	4798      	blx	r3
 8019b92:	4603      	mov	r3, r0
 8019b94:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019b96:	4b10      	ldr	r3, [pc, #64]	; (8019bd8 <SysTimeGet+0x6c>)
 8019b98:	68db      	ldr	r3, [r3, #12]
 8019b9a:	4798      	blx	r3
 8019b9c:	4603      	mov	r3, r0
 8019b9e:	b21b      	sxth	r3, r3
 8019ba0:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019ba2:	4b0d      	ldr	r3, [pc, #52]	; (8019bd8 <SysTimeGet+0x6c>)
 8019ba4:	685b      	ldr	r3, [r3, #4]
 8019ba6:	4798      	blx	r3
 8019ba8:	4603      	mov	r3, r0
 8019baa:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8019bac:	f107 0010 	add.w	r0, r7, #16
 8019bb0:	69fb      	ldr	r3, [r7, #28]
 8019bb2:	9300      	str	r3, [sp, #0]
 8019bb4:	69bb      	ldr	r3, [r7, #24]
 8019bb6:	f107 0208 	add.w	r2, r7, #8
 8019bba:	ca06      	ldmia	r2, {r1, r2}
 8019bbc:	f7ff ff36 	bl	8019a2c <SysTimeAdd>

  return sysTime;
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	461a      	mov	r2, r3
 8019bc4:	f107 0310 	add.w	r3, r7, #16
 8019bc8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019bcc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019bd0:	6878      	ldr	r0, [r7, #4]
 8019bd2:	3720      	adds	r7, #32
 8019bd4:	46bd      	mov	sp, r7
 8019bd6:	bd80      	pop	{r7, pc}
 8019bd8:	0801b664 	.word	0x0801b664

08019bdc <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8019bdc:	b580      	push	{r7, lr}
 8019bde:	b084      	sub	sp, #16
 8019be0:	af00      	add	r7, sp, #0
 8019be2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019be4:	2300      	movs	r3, #0
 8019be6:	60bb      	str	r3, [r7, #8]
 8019be8:	2300      	movs	r3, #0
 8019bea:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019bec:	4b0a      	ldr	r3, [pc, #40]	; (8019c18 <SysTimeGetMcuTime+0x3c>)
 8019bee:	691b      	ldr	r3, [r3, #16]
 8019bf0:	f107 0208 	add.w	r2, r7, #8
 8019bf4:	3204      	adds	r2, #4
 8019bf6:	4610      	mov	r0, r2
 8019bf8:	4798      	blx	r3
 8019bfa:	4603      	mov	r3, r0
 8019bfc:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	461a      	mov	r2, r3
 8019c02:	f107 0308 	add.w	r3, r7, #8
 8019c06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019c0a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019c0e:	6878      	ldr	r0, [r7, #4]
 8019c10:	3710      	adds	r7, #16
 8019c12:	46bd      	mov	sp, r7
 8019c14:	bd80      	pop	{r7, pc}
 8019c16:	bf00      	nop
 8019c18:	0801b664 	.word	0x0801b664

08019c1c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8019c1c:	b580      	push	{r7, lr}
 8019c1e:	b088      	sub	sp, #32
 8019c20:	af02      	add	r7, sp, #8
 8019c22:	463b      	mov	r3, r7
 8019c24:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019c28:	4b0f      	ldr	r3, [pc, #60]	; (8019c68 <SysTimeToMs+0x4c>)
 8019c2a:	68db      	ldr	r3, [r3, #12]
 8019c2c:	4798      	blx	r3
 8019c2e:	4603      	mov	r3, r0
 8019c30:	b21b      	sxth	r3, r3
 8019c32:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019c34:	4b0c      	ldr	r3, [pc, #48]	; (8019c68 <SysTimeToMs+0x4c>)
 8019c36:	685b      	ldr	r3, [r3, #4]
 8019c38:	4798      	blx	r3
 8019c3a:	4603      	mov	r3, r0
 8019c3c:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8019c3e:	f107 0008 	add.w	r0, r7, #8
 8019c42:	697b      	ldr	r3, [r7, #20]
 8019c44:	9300      	str	r3, [sp, #0]
 8019c46:	693b      	ldr	r3, [r7, #16]
 8019c48:	463a      	mov	r2, r7
 8019c4a:	ca06      	ldmia	r2, {r1, r2}
 8019c4c:	f7ff ff27 	bl	8019a9e <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8019c50:	68bb      	ldr	r3, [r7, #8]
 8019c52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019c56:	fb02 f303 	mul.w	r3, r2, r3
 8019c5a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8019c5e:	4413      	add	r3, r2
}
 8019c60:	4618      	mov	r0, r3
 8019c62:	3718      	adds	r7, #24
 8019c64:	46bd      	mov	sp, r7
 8019c66:	bd80      	pop	{r7, pc}
 8019c68:	0801b664 	.word	0x0801b664

08019c6c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8019c6c:	b580      	push	{r7, lr}
 8019c6e:	b08a      	sub	sp, #40	; 0x28
 8019c70:	af02      	add	r7, sp, #8
 8019c72:	6078      	str	r0, [r7, #4]
 8019c74:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 8019c76:	683b      	ldr	r3, [r7, #0]
 8019c78:	4a19      	ldr	r2, [pc, #100]	; (8019ce0 <SysTimeFromMs+0x74>)
 8019c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8019c7e:	099b      	lsrs	r3, r3, #6
 8019c80:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8019c82:	69fb      	ldr	r3, [r7, #28]
 8019c84:	617b      	str	r3, [r7, #20]
 8019c86:	683b      	ldr	r3, [r7, #0]
 8019c88:	b29a      	uxth	r2, r3
 8019c8a:	69fb      	ldr	r3, [r7, #28]
 8019c8c:	b29b      	uxth	r3, r3
 8019c8e:	4619      	mov	r1, r3
 8019c90:	0149      	lsls	r1, r1, #5
 8019c92:	1ac9      	subs	r1, r1, r3
 8019c94:	0089      	lsls	r1, r1, #2
 8019c96:	440b      	add	r3, r1
 8019c98:	00db      	lsls	r3, r3, #3
 8019c9a:	b29b      	uxth	r3, r3
 8019c9c:	1ad3      	subs	r3, r2, r3
 8019c9e:	b29b      	uxth	r3, r3
 8019ca0:	b21b      	sxth	r3, r3
 8019ca2:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 8019ca4:	f107 030c 	add.w	r3, r7, #12
 8019ca8:	2200      	movs	r2, #0
 8019caa:	601a      	str	r2, [r3, #0]
 8019cac:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019cae:	4b0d      	ldr	r3, [pc, #52]	; (8019ce4 <SysTimeFromMs+0x78>)
 8019cb0:	68db      	ldr	r3, [r3, #12]
 8019cb2:	4798      	blx	r3
 8019cb4:	4603      	mov	r3, r0
 8019cb6:	b21b      	sxth	r3, r3
 8019cb8:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019cba:	4b0a      	ldr	r3, [pc, #40]	; (8019ce4 <SysTimeFromMs+0x78>)
 8019cbc:	685b      	ldr	r3, [r3, #4]
 8019cbe:	4798      	blx	r3
 8019cc0:	4603      	mov	r3, r0
 8019cc2:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 8019cc4:	6878      	ldr	r0, [r7, #4]
 8019cc6:	693b      	ldr	r3, [r7, #16]
 8019cc8:	9300      	str	r3, [sp, #0]
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	f107 0214 	add.w	r2, r7, #20
 8019cd0:	ca06      	ldmia	r2, {r1, r2}
 8019cd2:	f7ff feab 	bl	8019a2c <SysTimeAdd>
}
 8019cd6:	6878      	ldr	r0, [r7, #4]
 8019cd8:	3720      	adds	r7, #32
 8019cda:	46bd      	mov	sp, r7
 8019cdc:	bd80      	pop	{r7, pc}
 8019cde:	bf00      	nop
 8019ce0:	10624dd3 	.word	0x10624dd3
 8019ce4:	0801b664 	.word	0x0801b664

08019ce8 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8019ce8:	b480      	push	{r7}
 8019cea:	b085      	sub	sp, #20
 8019cec:	af00      	add	r7, sp, #0
 8019cee:	6078      	str	r0, [r7, #4]
  int i = 0;
 8019cf0:	2300      	movs	r3, #0
 8019cf2:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8019cf4:	e00e      	b.n	8019d14 <ee_skip_atoi+0x2c>
 8019cf6:	68fa      	ldr	r2, [r7, #12]
 8019cf8:	4613      	mov	r3, r2
 8019cfa:	009b      	lsls	r3, r3, #2
 8019cfc:	4413      	add	r3, r2
 8019cfe:	005b      	lsls	r3, r3, #1
 8019d00:	4618      	mov	r0, r3
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	1c59      	adds	r1, r3, #1
 8019d08:	687a      	ldr	r2, [r7, #4]
 8019d0a:	6011      	str	r1, [r2, #0]
 8019d0c:	781b      	ldrb	r3, [r3, #0]
 8019d0e:	4403      	add	r3, r0
 8019d10:	3b30      	subs	r3, #48	; 0x30
 8019d12:	60fb      	str	r3, [r7, #12]
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	781b      	ldrb	r3, [r3, #0]
 8019d1a:	2b2f      	cmp	r3, #47	; 0x2f
 8019d1c:	d904      	bls.n	8019d28 <ee_skip_atoi+0x40>
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	781b      	ldrb	r3, [r3, #0]
 8019d24:	2b39      	cmp	r3, #57	; 0x39
 8019d26:	d9e6      	bls.n	8019cf6 <ee_skip_atoi+0xe>
  return i;
 8019d28:	68fb      	ldr	r3, [r7, #12]
}
 8019d2a:	4618      	mov	r0, r3
 8019d2c:	3714      	adds	r7, #20
 8019d2e:	46bd      	mov	sp, r7
 8019d30:	bc80      	pop	{r7}
 8019d32:	4770      	bx	lr

08019d34 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8019d34:	b480      	push	{r7}
 8019d36:	b099      	sub	sp, #100	; 0x64
 8019d38:	af00      	add	r7, sp, #0
 8019d3a:	60f8      	str	r0, [r7, #12]
 8019d3c:	60b9      	str	r1, [r7, #8]
 8019d3e:	607a      	str	r2, [r7, #4]
 8019d40:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 8019d42:	4b71      	ldr	r3, [pc, #452]	; (8019f08 <ee_number+0x1d4>)
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8019d48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d002      	beq.n	8019d58 <ee_number+0x24>
 8019d52:	4b6e      	ldr	r3, [pc, #440]	; (8019f0c <ee_number+0x1d8>)
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8019d58:	683b      	ldr	r3, [r7, #0]
 8019d5a:	2b01      	cmp	r3, #1
 8019d5c:	dd02      	ble.n	8019d64 <ee_number+0x30>
 8019d5e:	683b      	ldr	r3, [r7, #0]
 8019d60:	2b24      	cmp	r3, #36	; 0x24
 8019d62:	dd01      	ble.n	8019d68 <ee_number+0x34>
 8019d64:	2300      	movs	r3, #0
 8019d66:	e0ca      	b.n	8019efe <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 8019d68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019d6a:	f003 0301 	and.w	r3, r3, #1
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	d001      	beq.n	8019d76 <ee_number+0x42>
 8019d72:	2330      	movs	r3, #48	; 0x30
 8019d74:	e000      	b.n	8019d78 <ee_number+0x44>
 8019d76:	2320      	movs	r3, #32
 8019d78:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 8019d7c:	2300      	movs	r3, #0
 8019d7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 8019d82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019d84:	f003 0302 	and.w	r3, r3, #2
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d00b      	beq.n	8019da4 <ee_number+0x70>
  {
    if (num < 0)
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	da08      	bge.n	8019da4 <ee_number+0x70>
    {
      sign = '-';
 8019d92:	232d      	movs	r3, #45	; 0x2d
 8019d94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	425b      	negs	r3, r3
 8019d9c:	607b      	str	r3, [r7, #4]
      size--;
 8019d9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019da0:	3b01      	subs	r3, #1
 8019da2:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 8019da4:	2300      	movs	r3, #0
 8019da6:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d11e      	bne.n	8019dec <ee_number+0xb8>
    tmp[i++] = '0';
 8019dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019db0:	1c5a      	adds	r2, r3, #1
 8019db2:	657a      	str	r2, [r7, #84]	; 0x54
 8019db4:	3360      	adds	r3, #96	; 0x60
 8019db6:	443b      	add	r3, r7
 8019db8:	2230      	movs	r2, #48	; 0x30
 8019dba:	f803 2c50 	strb.w	r2, [r3, #-80]
 8019dbe:	e018      	b.n	8019df2 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	683a      	ldr	r2, [r7, #0]
 8019dc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8019dc8:	fb01 f202 	mul.w	r2, r1, r2
 8019dcc:	1a9b      	subs	r3, r3, r2
 8019dce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019dd0:	441a      	add	r2, r3
 8019dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019dd4:	1c59      	adds	r1, r3, #1
 8019dd6:	6579      	str	r1, [r7, #84]	; 0x54
 8019dd8:	7812      	ldrb	r2, [r2, #0]
 8019dda:	3360      	adds	r3, #96	; 0x60
 8019ddc:	443b      	add	r3, r7
 8019dde:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 8019de2:	687a      	ldr	r2, [r7, #4]
 8019de4:	683b      	ldr	r3, [r7, #0]
 8019de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8019dea:	607b      	str	r3, [r7, #4]
    while (num != 0)
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	2b00      	cmp	r3, #0
 8019df0:	d1e6      	bne.n	8019dc0 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 8019df2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019df6:	429a      	cmp	r2, r3
 8019df8:	dd01      	ble.n	8019dfe <ee_number+0xca>
 8019dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019dfc:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 8019dfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019e02:	1ad3      	subs	r3, r2, r3
 8019e04:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8019e06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019e08:	f003 0301 	and.w	r3, r3, #1
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d112      	bne.n	8019e36 <ee_number+0x102>
 8019e10:	e00c      	b.n	8019e2c <ee_number+0xf8>
 8019e12:	68fb      	ldr	r3, [r7, #12]
 8019e14:	1c5a      	adds	r2, r3, #1
 8019e16:	60fa      	str	r2, [r7, #12]
 8019e18:	2220      	movs	r2, #32
 8019e1a:	701a      	strb	r2, [r3, #0]
 8019e1c:	68bb      	ldr	r3, [r7, #8]
 8019e1e:	3b01      	subs	r3, #1
 8019e20:	60bb      	str	r3, [r7, #8]
 8019e22:	68bb      	ldr	r3, [r7, #8]
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d101      	bne.n	8019e2c <ee_number+0xf8>
 8019e28:	68fb      	ldr	r3, [r7, #12]
 8019e2a:	e068      	b.n	8019efe <ee_number+0x1ca>
 8019e2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019e2e:	1e5a      	subs	r2, r3, #1
 8019e30:	66ba      	str	r2, [r7, #104]	; 0x68
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	dced      	bgt.n	8019e12 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 8019e36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d01b      	beq.n	8019e76 <ee_number+0x142>
 8019e3e:	68fb      	ldr	r3, [r7, #12]
 8019e40:	1c5a      	adds	r2, r3, #1
 8019e42:	60fa      	str	r2, [r7, #12]
 8019e44:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8019e48:	701a      	strb	r2, [r3, #0]
 8019e4a:	68bb      	ldr	r3, [r7, #8]
 8019e4c:	3b01      	subs	r3, #1
 8019e4e:	60bb      	str	r3, [r7, #8]
 8019e50:	68bb      	ldr	r3, [r7, #8]
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d10f      	bne.n	8019e76 <ee_number+0x142>
 8019e56:	68fb      	ldr	r3, [r7, #12]
 8019e58:	e051      	b.n	8019efe <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8019e5a:	68fb      	ldr	r3, [r7, #12]
 8019e5c:	1c5a      	adds	r2, r3, #1
 8019e5e:	60fa      	str	r2, [r7, #12]
 8019e60:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8019e64:	701a      	strb	r2, [r3, #0]
 8019e66:	68bb      	ldr	r3, [r7, #8]
 8019e68:	3b01      	subs	r3, #1
 8019e6a:	60bb      	str	r3, [r7, #8]
 8019e6c:	68bb      	ldr	r3, [r7, #8]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d101      	bne.n	8019e76 <ee_number+0x142>
 8019e72:	68fb      	ldr	r3, [r7, #12]
 8019e74:	e043      	b.n	8019efe <ee_number+0x1ca>
 8019e76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019e78:	1e5a      	subs	r2, r3, #1
 8019e7a:	66ba      	str	r2, [r7, #104]	; 0x68
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	dcec      	bgt.n	8019e5a <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 8019e80:	e00c      	b.n	8019e9c <ee_number+0x168>
 8019e82:	68fb      	ldr	r3, [r7, #12]
 8019e84:	1c5a      	adds	r2, r3, #1
 8019e86:	60fa      	str	r2, [r7, #12]
 8019e88:	2230      	movs	r2, #48	; 0x30
 8019e8a:	701a      	strb	r2, [r3, #0]
 8019e8c:	68bb      	ldr	r3, [r7, #8]
 8019e8e:	3b01      	subs	r3, #1
 8019e90:	60bb      	str	r3, [r7, #8]
 8019e92:	68bb      	ldr	r3, [r7, #8]
 8019e94:	2b00      	cmp	r3, #0
 8019e96:	d101      	bne.n	8019e9c <ee_number+0x168>
 8019e98:	68fb      	ldr	r3, [r7, #12]
 8019e9a:	e030      	b.n	8019efe <ee_number+0x1ca>
 8019e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019e9e:	1e5a      	subs	r2, r3, #1
 8019ea0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8019ea2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019ea4:	429a      	cmp	r2, r3
 8019ea6:	dbec      	blt.n	8019e82 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8019ea8:	e010      	b.n	8019ecc <ee_number+0x198>
 8019eaa:	68fb      	ldr	r3, [r7, #12]
 8019eac:	1c5a      	adds	r2, r3, #1
 8019eae:	60fa      	str	r2, [r7, #12]
 8019eb0:	f107 0110 	add.w	r1, r7, #16
 8019eb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019eb6:	440a      	add	r2, r1
 8019eb8:	7812      	ldrb	r2, [r2, #0]
 8019eba:	701a      	strb	r2, [r3, #0]
 8019ebc:	68bb      	ldr	r3, [r7, #8]
 8019ebe:	3b01      	subs	r3, #1
 8019ec0:	60bb      	str	r3, [r7, #8]
 8019ec2:	68bb      	ldr	r3, [r7, #8]
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d101      	bne.n	8019ecc <ee_number+0x198>
 8019ec8:	68fb      	ldr	r3, [r7, #12]
 8019eca:	e018      	b.n	8019efe <ee_number+0x1ca>
 8019ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019ece:	1e5a      	subs	r2, r3, #1
 8019ed0:	657a      	str	r2, [r7, #84]	; 0x54
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	dce9      	bgt.n	8019eaa <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 8019ed6:	e00c      	b.n	8019ef2 <ee_number+0x1be>
 8019ed8:	68fb      	ldr	r3, [r7, #12]
 8019eda:	1c5a      	adds	r2, r3, #1
 8019edc:	60fa      	str	r2, [r7, #12]
 8019ede:	2220      	movs	r2, #32
 8019ee0:	701a      	strb	r2, [r3, #0]
 8019ee2:	68bb      	ldr	r3, [r7, #8]
 8019ee4:	3b01      	subs	r3, #1
 8019ee6:	60bb      	str	r3, [r7, #8]
 8019ee8:	68bb      	ldr	r3, [r7, #8]
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d101      	bne.n	8019ef2 <ee_number+0x1be>
 8019eee:	68fb      	ldr	r3, [r7, #12]
 8019ef0:	e005      	b.n	8019efe <ee_number+0x1ca>
 8019ef2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019ef4:	1e5a      	subs	r2, r3, #1
 8019ef6:	66ba      	str	r2, [r7, #104]	; 0x68
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	dced      	bgt.n	8019ed8 <ee_number+0x1a4>

  return str;
 8019efc:	68fb      	ldr	r3, [r7, #12]
}
 8019efe:	4618      	mov	r0, r3
 8019f00:	3764      	adds	r7, #100	; 0x64
 8019f02:	46bd      	mov	sp, r7
 8019f04:	bc80      	pop	{r7}
 8019f06:	4770      	bx	lr
 8019f08:	2000013c 	.word	0x2000013c
 8019f0c:	20000140 	.word	0x20000140

08019f10 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8019f10:	b580      	push	{r7, lr}
 8019f12:	b092      	sub	sp, #72	; 0x48
 8019f14:	af04      	add	r7, sp, #16
 8019f16:	60f8      	str	r0, [r7, #12]
 8019f18:	60b9      	str	r1, [r7, #8]
 8019f1a:	607a      	str	r2, [r7, #4]
 8019f1c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8019f1e:	68bb      	ldr	r3, [r7, #8]
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	dc01      	bgt.n	8019f28 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 8019f24:	2300      	movs	r3, #0
 8019f26:	e142      	b.n	801a1ae <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019f2c:	e12a      	b.n	801a184 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 8019f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	1ad2      	subs	r2, r2, r3
 8019f34:	68bb      	ldr	r3, [r7, #8]
 8019f36:	3b01      	subs	r3, #1
 8019f38:	429a      	cmp	r2, r3
 8019f3a:	f280 8131 	bge.w	801a1a0 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	781b      	ldrb	r3, [r3, #0]
 8019f42:	2b25      	cmp	r3, #37	; 0x25
 8019f44:	d006      	beq.n	8019f54 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 8019f46:	687a      	ldr	r2, [r7, #4]
 8019f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f4a:	1c59      	adds	r1, r3, #1
 8019f4c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019f4e:	7812      	ldrb	r2, [r2, #0]
 8019f50:	701a      	strb	r2, [r3, #0]
      continue;
 8019f52:	e114      	b.n	801a17e <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 8019f54:	2300      	movs	r3, #0
 8019f56:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	3301      	adds	r3, #1
 8019f5c:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	781b      	ldrb	r3, [r3, #0]
 8019f62:	2b30      	cmp	r3, #48	; 0x30
 8019f64:	d103      	bne.n	8019f6e <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 8019f66:	6a3b      	ldr	r3, [r7, #32]
 8019f68:	f043 0301 	orr.w	r3, r3, #1
 8019f6c:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 8019f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8019f72:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	781b      	ldrb	r3, [r3, #0]
 8019f78:	2b2f      	cmp	r3, #47	; 0x2f
 8019f7a:	d908      	bls.n	8019f8e <tiny_vsnprintf_like+0x7e>
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	781b      	ldrb	r3, [r3, #0]
 8019f80:	2b39      	cmp	r3, #57	; 0x39
 8019f82:	d804      	bhi.n	8019f8e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 8019f84:	1d3b      	adds	r3, r7, #4
 8019f86:	4618      	mov	r0, r3
 8019f88:	f7ff feae 	bl	8019ce8 <ee_skip_atoi>
 8019f8c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 8019f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8019f92:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 8019f94:	f04f 33ff 	mov.w	r3, #4294967295
 8019f98:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 8019f9a:	230a      	movs	r3, #10
 8019f9c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	781b      	ldrb	r3, [r3, #0]
 8019fa2:	3b58      	subs	r3, #88	; 0x58
 8019fa4:	2b20      	cmp	r3, #32
 8019fa6:	f200 8094 	bhi.w	801a0d2 <tiny_vsnprintf_like+0x1c2>
 8019faa:	a201      	add	r2, pc, #4	; (adr r2, 8019fb0 <tiny_vsnprintf_like+0xa0>)
 8019fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019fb0:	0801a0bb 	.word	0x0801a0bb
 8019fb4:	0801a0d3 	.word	0x0801a0d3
 8019fb8:	0801a0d3 	.word	0x0801a0d3
 8019fbc:	0801a0d3 	.word	0x0801a0d3
 8019fc0:	0801a0d3 	.word	0x0801a0d3
 8019fc4:	0801a0d3 	.word	0x0801a0d3
 8019fc8:	0801a0d3 	.word	0x0801a0d3
 8019fcc:	0801a0d3 	.word	0x0801a0d3
 8019fd0:	0801a0d3 	.word	0x0801a0d3
 8019fd4:	0801a0d3 	.word	0x0801a0d3
 8019fd8:	0801a0d3 	.word	0x0801a0d3
 8019fdc:	0801a03f 	.word	0x0801a03f
 8019fe0:	0801a0c9 	.word	0x0801a0c9
 8019fe4:	0801a0d3 	.word	0x0801a0d3
 8019fe8:	0801a0d3 	.word	0x0801a0d3
 8019fec:	0801a0d3 	.word	0x0801a0d3
 8019ff0:	0801a0d3 	.word	0x0801a0d3
 8019ff4:	0801a0c9 	.word	0x0801a0c9
 8019ff8:	0801a0d3 	.word	0x0801a0d3
 8019ffc:	0801a0d3 	.word	0x0801a0d3
 801a000:	0801a0d3 	.word	0x0801a0d3
 801a004:	0801a0d3 	.word	0x0801a0d3
 801a008:	0801a0d3 	.word	0x0801a0d3
 801a00c:	0801a0d3 	.word	0x0801a0d3
 801a010:	0801a0d3 	.word	0x0801a0d3
 801a014:	0801a0d3 	.word	0x0801a0d3
 801a018:	0801a0d3 	.word	0x0801a0d3
 801a01c:	0801a05f 	.word	0x0801a05f
 801a020:	0801a0d3 	.word	0x0801a0d3
 801a024:	0801a11f 	.word	0x0801a11f
 801a028:	0801a0d3 	.word	0x0801a0d3
 801a02c:	0801a0d3 	.word	0x0801a0d3
 801a030:	0801a0c3 	.word	0x0801a0c3
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801a034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a036:	1c5a      	adds	r2, r3, #1
 801a038:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a03a:	2220      	movs	r2, #32
 801a03c:	701a      	strb	r2, [r3, #0]
 801a03e:	69fb      	ldr	r3, [r7, #28]
 801a040:	3b01      	subs	r3, #1
 801a042:	61fb      	str	r3, [r7, #28]
 801a044:	69fb      	ldr	r3, [r7, #28]
 801a046:	2b00      	cmp	r3, #0
 801a048:	dcf4      	bgt.n	801a034 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801a04a:	683b      	ldr	r3, [r7, #0]
 801a04c:	1d1a      	adds	r2, r3, #4
 801a04e:	603a      	str	r2, [r7, #0]
 801a050:	6819      	ldr	r1, [r3, #0]
 801a052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a054:	1c5a      	adds	r2, r3, #1
 801a056:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a058:	b2ca      	uxtb	r2, r1
 801a05a:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801a05c:	e08f      	b.n	801a17e <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801a05e:	683b      	ldr	r3, [r7, #0]
 801a060:	1d1a      	adds	r2, r3, #4
 801a062:	603a      	str	r2, [r7, #0]
 801a064:	681b      	ldr	r3, [r3, #0]
 801a066:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801a068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d101      	bne.n	801a072 <tiny_vsnprintf_like+0x162>
 801a06e:	4b52      	ldr	r3, [pc, #328]	; (801a1b8 <tiny_vsnprintf_like+0x2a8>)
 801a070:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801a072:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a074:	f7e6 f880 	bl	8000178 <strlen>
 801a078:	4603      	mov	r3, r0
 801a07a:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801a07c:	e004      	b.n	801a088 <tiny_vsnprintf_like+0x178>
 801a07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a080:	1c5a      	adds	r2, r3, #1
 801a082:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a084:	2220      	movs	r2, #32
 801a086:	701a      	strb	r2, [r3, #0]
 801a088:	69fb      	ldr	r3, [r7, #28]
 801a08a:	1e5a      	subs	r2, r3, #1
 801a08c:	61fa      	str	r2, [r7, #28]
 801a08e:	693a      	ldr	r2, [r7, #16]
 801a090:	429a      	cmp	r2, r3
 801a092:	dbf4      	blt.n	801a07e <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801a094:	2300      	movs	r3, #0
 801a096:	62bb      	str	r3, [r7, #40]	; 0x28
 801a098:	e00a      	b.n	801a0b0 <tiny_vsnprintf_like+0x1a0>
 801a09a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a09c:	1c53      	adds	r3, r2, #1
 801a09e:	627b      	str	r3, [r7, #36]	; 0x24
 801a0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0a2:	1c59      	adds	r1, r3, #1
 801a0a4:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a0a6:	7812      	ldrb	r2, [r2, #0]
 801a0a8:	701a      	strb	r2, [r3, #0]
 801a0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0ac:	3301      	adds	r3, #1
 801a0ae:	62bb      	str	r3, [r7, #40]	; 0x28
 801a0b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a0b2:	693b      	ldr	r3, [r7, #16]
 801a0b4:	429a      	cmp	r2, r3
 801a0b6:	dbf0      	blt.n	801a09a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801a0b8:	e061      	b.n	801a17e <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801a0ba:	6a3b      	ldr	r3, [r7, #32]
 801a0bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a0c0:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801a0c2:	2310      	movs	r3, #16
 801a0c4:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801a0c6:	e02d      	b.n	801a124 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801a0c8:	6a3b      	ldr	r3, [r7, #32]
 801a0ca:	f043 0302 	orr.w	r3, r3, #2
 801a0ce:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801a0d0:	e025      	b.n	801a11e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	781b      	ldrb	r3, [r3, #0]
 801a0d6:	2b25      	cmp	r3, #37	; 0x25
 801a0d8:	d004      	beq.n	801a0e4 <tiny_vsnprintf_like+0x1d4>
 801a0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0dc:	1c5a      	adds	r2, r3, #1
 801a0de:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a0e0:	2225      	movs	r2, #37	; 0x25
 801a0e2:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801a0e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a0e6:	68fb      	ldr	r3, [r7, #12]
 801a0e8:	1ad2      	subs	r2, r2, r3
 801a0ea:	68bb      	ldr	r3, [r7, #8]
 801a0ec:	3b01      	subs	r3, #1
 801a0ee:	429a      	cmp	r2, r3
 801a0f0:	da17      	bge.n	801a122 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	781b      	ldrb	r3, [r3, #0]
 801a0f6:	2b00      	cmp	r3, #0
 801a0f8:	d006      	beq.n	801a108 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801a0fa:	687a      	ldr	r2, [r7, #4]
 801a0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0fe:	1c59      	adds	r1, r3, #1
 801a100:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a102:	7812      	ldrb	r2, [r2, #0]
 801a104:	701a      	strb	r2, [r3, #0]
 801a106:	e002      	b.n	801a10e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	3b01      	subs	r3, #1
 801a10c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801a10e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a110:	68fb      	ldr	r3, [r7, #12]
 801a112:	1ad2      	subs	r2, r2, r3
 801a114:	68bb      	ldr	r3, [r7, #8]
 801a116:	3b01      	subs	r3, #1
 801a118:	429a      	cmp	r2, r3
 801a11a:	db2f      	blt.n	801a17c <tiny_vsnprintf_like+0x26c>
 801a11c:	e002      	b.n	801a124 <tiny_vsnprintf_like+0x214>
        break;
 801a11e:	bf00      	nop
 801a120:	e000      	b.n	801a124 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801a122:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801a124:	697b      	ldr	r3, [r7, #20]
 801a126:	2b6c      	cmp	r3, #108	; 0x6c
 801a128:	d105      	bne.n	801a136 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801a12a:	683b      	ldr	r3, [r7, #0]
 801a12c:	1d1a      	adds	r2, r3, #4
 801a12e:	603a      	str	r2, [r7, #0]
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	637b      	str	r3, [r7, #52]	; 0x34
 801a134:	e00f      	b.n	801a156 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801a136:	6a3b      	ldr	r3, [r7, #32]
 801a138:	f003 0302 	and.w	r3, r3, #2
 801a13c:	2b00      	cmp	r3, #0
 801a13e:	d005      	beq.n	801a14c <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801a140:	683b      	ldr	r3, [r7, #0]
 801a142:	1d1a      	adds	r2, r3, #4
 801a144:	603a      	str	r2, [r7, #0]
 801a146:	681b      	ldr	r3, [r3, #0]
 801a148:	637b      	str	r3, [r7, #52]	; 0x34
 801a14a:	e004      	b.n	801a156 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801a14c:	683b      	ldr	r3, [r7, #0]
 801a14e:	1d1a      	adds	r2, r3, #4
 801a150:	603a      	str	r2, [r7, #0]
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801a156:	68bb      	ldr	r3, [r7, #8]
 801a158:	1e5a      	subs	r2, r3, #1
 801a15a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a15c:	68fb      	ldr	r3, [r7, #12]
 801a15e:	1acb      	subs	r3, r1, r3
 801a160:	1ad1      	subs	r1, r2, r3
 801a162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a164:	6a3b      	ldr	r3, [r7, #32]
 801a166:	9302      	str	r3, [sp, #8]
 801a168:	69bb      	ldr	r3, [r7, #24]
 801a16a:	9301      	str	r3, [sp, #4]
 801a16c:	69fb      	ldr	r3, [r7, #28]
 801a16e:	9300      	str	r3, [sp, #0]
 801a170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a172:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a174:	f7ff fdde 	bl	8019d34 <ee_number>
 801a178:	62f8      	str	r0, [r7, #44]	; 0x2c
 801a17a:	e000      	b.n	801a17e <tiny_vsnprintf_like+0x26e>
        continue;
 801a17c:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	3301      	adds	r3, #1
 801a182:	607b      	str	r3, [r7, #4]
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	781b      	ldrb	r3, [r3, #0]
 801a188:	2b00      	cmp	r3, #0
 801a18a:	f47f aed0 	bne.w	8019f2e <tiny_vsnprintf_like+0x1e>
 801a18e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a190:	68fb      	ldr	r3, [r7, #12]
 801a192:	1ad2      	subs	r2, r2, r3
 801a194:	68bb      	ldr	r3, [r7, #8]
 801a196:	3b01      	subs	r3, #1
 801a198:	429a      	cmp	r2, r3
 801a19a:	f6bf aec8 	bge.w	8019f2e <tiny_vsnprintf_like+0x1e>
 801a19e:	e000      	b.n	801a1a2 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801a1a0:	bf00      	nop
  }

  *str = '\0';
 801a1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1a4:	2200      	movs	r2, #0
 801a1a6:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801a1a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a1aa:	68fb      	ldr	r3, [r7, #12]
 801a1ac:	1ad3      	subs	r3, r2, r3
}
 801a1ae:	4618      	mov	r0, r3
 801a1b0:	3738      	adds	r7, #56	; 0x38
 801a1b2:	46bd      	mov	sp, r7
 801a1b4:	bd80      	pop	{r7, pc}
 801a1b6:	bf00      	nop
 801a1b8:	0801b578 	.word	0x0801b578

0801a1bc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801a1bc:	b580      	push	{r7, lr}
 801a1be:	b090      	sub	sp, #64	; 0x40
 801a1c0:	af00      	add	r7, sp, #0
 801a1c2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801a1c4:	4b73      	ldr	r3, [pc, #460]	; (801a394 <UTIL_SEQ_Run+0x1d8>)
 801a1c6:	681b      	ldr	r3, [r3, #0]
 801a1c8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801a1ca:	4b72      	ldr	r3, [pc, #456]	; (801a394 <UTIL_SEQ_Run+0x1d8>)
 801a1cc:	681a      	ldr	r2, [r3, #0]
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	4013      	ands	r3, r2
 801a1d2:	4a70      	ldr	r2, [pc, #448]	; (801a394 <UTIL_SEQ_Run+0x1d8>)
 801a1d4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801a1d6:	4b70      	ldr	r3, [pc, #448]	; (801a398 <UTIL_SEQ_Run+0x1dc>)
 801a1d8:	681b      	ldr	r3, [r3, #0]
 801a1da:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801a1dc:	4b6f      	ldr	r3, [pc, #444]	; (801a39c <UTIL_SEQ_Run+0x1e0>)
 801a1de:	681b      	ldr	r3, [r3, #0]
 801a1e0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801a1e2:	4b6f      	ldr	r3, [pc, #444]	; (801a3a0 <UTIL_SEQ_Run+0x1e4>)
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801a1e8:	4b6e      	ldr	r3, [pc, #440]	; (801a3a4 <UTIL_SEQ_Run+0x1e8>)
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801a1ee:	e08d      	b.n	801a30c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a1f4:	e002      	b.n	801a1fc <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801a1f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a1f8:	3301      	adds	r3, #1
 801a1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a1fc:	4a6a      	ldr	r2, [pc, #424]	; (801a3a8 <UTIL_SEQ_Run+0x1ec>)
 801a1fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a200:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a206:	401a      	ands	r2, r3
 801a208:	4b62      	ldr	r3, [pc, #392]	; (801a394 <UTIL_SEQ_Run+0x1d8>)
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	4013      	ands	r3, r2
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d0f1      	beq.n	801a1f6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801a212:	4a65      	ldr	r2, [pc, #404]	; (801a3a8 <UTIL_SEQ_Run+0x1ec>)
 801a214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a216:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a21c:	401a      	ands	r2, r3
 801a21e:	4b5d      	ldr	r3, [pc, #372]	; (801a394 <UTIL_SEQ_Run+0x1d8>)
 801a220:	681b      	ldr	r3, [r3, #0]
 801a222:	4013      	ands	r3, r2
 801a224:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801a226:	4a60      	ldr	r2, [pc, #384]	; (801a3a8 <UTIL_SEQ_Run+0x1ec>)
 801a228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a22a:	00db      	lsls	r3, r3, #3
 801a22c:	4413      	add	r3, r2
 801a22e:	685a      	ldr	r2, [r3, #4]
 801a230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a232:	4013      	ands	r3, r2
 801a234:	2b00      	cmp	r3, #0
 801a236:	d106      	bne.n	801a246 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801a238:	4a5b      	ldr	r2, [pc, #364]	; (801a3a8 <UTIL_SEQ_Run+0x1ec>)
 801a23a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a23c:	00db      	lsls	r3, r3, #3
 801a23e:	4413      	add	r3, r2
 801a240:	f04f 32ff 	mov.w	r2, #4294967295
 801a244:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801a246:	4a58      	ldr	r2, [pc, #352]	; (801a3a8 <UTIL_SEQ_Run+0x1ec>)
 801a248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a24a:	00db      	lsls	r3, r3, #3
 801a24c:	4413      	add	r3, r2
 801a24e:	685a      	ldr	r2, [r3, #4]
 801a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a252:	4013      	ands	r3, r2
 801a254:	4618      	mov	r0, r3
 801a256:	f000 f907 	bl	801a468 <SEQ_BitPosition>
 801a25a:	4603      	mov	r3, r0
 801a25c:	461a      	mov	r2, r3
 801a25e:	4b53      	ldr	r3, [pc, #332]	; (801a3ac <UTIL_SEQ_Run+0x1f0>)
 801a260:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801a262:	4a51      	ldr	r2, [pc, #324]	; (801a3a8 <UTIL_SEQ_Run+0x1ec>)
 801a264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a266:	00db      	lsls	r3, r3, #3
 801a268:	4413      	add	r3, r2
 801a26a:	685a      	ldr	r2, [r3, #4]
 801a26c:	4b4f      	ldr	r3, [pc, #316]	; (801a3ac <UTIL_SEQ_Run+0x1f0>)
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	2101      	movs	r1, #1
 801a272:	fa01 f303 	lsl.w	r3, r1, r3
 801a276:	43db      	mvns	r3, r3
 801a278:	401a      	ands	r2, r3
 801a27a:	494b      	ldr	r1, [pc, #300]	; (801a3a8 <UTIL_SEQ_Run+0x1ec>)
 801a27c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a27e:	00db      	lsls	r3, r3, #3
 801a280:	440b      	add	r3, r1
 801a282:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a284:	f3ef 8310 	mrs	r3, PRIMASK
 801a288:	61bb      	str	r3, [r7, #24]
  return(result);
 801a28a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a28c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801a28e:	b672      	cpsid	i
}
 801a290:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801a292:	4b46      	ldr	r3, [pc, #280]	; (801a3ac <UTIL_SEQ_Run+0x1f0>)
 801a294:	681b      	ldr	r3, [r3, #0]
 801a296:	2201      	movs	r2, #1
 801a298:	fa02 f303 	lsl.w	r3, r2, r3
 801a29c:	43da      	mvns	r2, r3
 801a29e:	4b3e      	ldr	r3, [pc, #248]	; (801a398 <UTIL_SEQ_Run+0x1dc>)
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	4013      	ands	r3, r2
 801a2a4:	4a3c      	ldr	r2, [pc, #240]	; (801a398 <UTIL_SEQ_Run+0x1dc>)
 801a2a6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a2a8:	2301      	movs	r3, #1
 801a2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a2ac:	e013      	b.n	801a2d6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801a2ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a2b0:	3b01      	subs	r3, #1
 801a2b2:	4a3d      	ldr	r2, [pc, #244]	; (801a3a8 <UTIL_SEQ_Run+0x1ec>)
 801a2b4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801a2b8:	4b3c      	ldr	r3, [pc, #240]	; (801a3ac <UTIL_SEQ_Run+0x1f0>)
 801a2ba:	681b      	ldr	r3, [r3, #0]
 801a2bc:	2201      	movs	r2, #1
 801a2be:	fa02 f303 	lsl.w	r3, r2, r3
 801a2c2:	43da      	mvns	r2, r3
 801a2c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a2c6:	3b01      	subs	r3, #1
 801a2c8:	400a      	ands	r2, r1
 801a2ca:	4937      	ldr	r1, [pc, #220]	; (801a3a8 <UTIL_SEQ_Run+0x1ec>)
 801a2cc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a2d2:	3b01      	subs	r3, #1
 801a2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	d1e8      	bne.n	801a2ae <UTIL_SEQ_Run+0xf2>
 801a2dc:	6a3b      	ldr	r3, [r7, #32]
 801a2de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a2e0:	697b      	ldr	r3, [r7, #20]
 801a2e2:	f383 8810 	msr	PRIMASK, r3
}
 801a2e6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801a2e8:	4b30      	ldr	r3, [pc, #192]	; (801a3ac <UTIL_SEQ_Run+0x1f0>)
 801a2ea:	681b      	ldr	r3, [r3, #0]
 801a2ec:	4a30      	ldr	r2, [pc, #192]	; (801a3b0 <UTIL_SEQ_Run+0x1f4>)
 801a2ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a2f2:	4798      	blx	r3

    local_taskset = TaskSet;
 801a2f4:	4b28      	ldr	r3, [pc, #160]	; (801a398 <UTIL_SEQ_Run+0x1dc>)
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801a2fa:	4b28      	ldr	r3, [pc, #160]	; (801a39c <UTIL_SEQ_Run+0x1e0>)
 801a2fc:	681b      	ldr	r3, [r3, #0]
 801a2fe:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801a300:	4b27      	ldr	r3, [pc, #156]	; (801a3a0 <UTIL_SEQ_Run+0x1e4>)
 801a302:	681b      	ldr	r3, [r3, #0]
 801a304:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801a306:	4b27      	ldr	r3, [pc, #156]	; (801a3a4 <UTIL_SEQ_Run+0x1e8>)
 801a308:	681b      	ldr	r3, [r3, #0]
 801a30a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801a30c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a310:	401a      	ands	r2, r3
 801a312:	4b20      	ldr	r3, [pc, #128]	; (801a394 <UTIL_SEQ_Run+0x1d8>)
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	4013      	ands	r3, r2
 801a318:	2b00      	cmp	r3, #0
 801a31a:	d005      	beq.n	801a328 <UTIL_SEQ_Run+0x16c>
 801a31c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a320:	4013      	ands	r3, r2
 801a322:	2b00      	cmp	r3, #0
 801a324:	f43f af64 	beq.w	801a1f0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801a328:	4b20      	ldr	r3, [pc, #128]	; (801a3ac <UTIL_SEQ_Run+0x1f0>)
 801a32a:	f04f 32ff 	mov.w	r2, #4294967295
 801a32e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801a330:	f000 f88e 	bl	801a450 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a334:	f3ef 8310 	mrs	r3, PRIMASK
 801a338:	613b      	str	r3, [r7, #16]
  return(result);
 801a33a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801a33c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a33e:	b672      	cpsid	i
}
 801a340:	bf00      	nop
  local_taskset = TaskSet;
 801a342:	4b15      	ldr	r3, [pc, #84]	; (801a398 <UTIL_SEQ_Run+0x1dc>)
 801a344:	681b      	ldr	r3, [r3, #0]
 801a346:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801a348:	4b14      	ldr	r3, [pc, #80]	; (801a39c <UTIL_SEQ_Run+0x1e0>)
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801a34e:	4b14      	ldr	r3, [pc, #80]	; (801a3a0 <UTIL_SEQ_Run+0x1e4>)
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801a354:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a358:	401a      	ands	r2, r3
 801a35a:	4b0e      	ldr	r3, [pc, #56]	; (801a394 <UTIL_SEQ_Run+0x1d8>)
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	4013      	ands	r3, r2
 801a360:	2b00      	cmp	r3, #0
 801a362:	d107      	bne.n	801a374 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801a364:	4b0f      	ldr	r3, [pc, #60]	; (801a3a4 <UTIL_SEQ_Run+0x1e8>)
 801a366:	681a      	ldr	r2, [r3, #0]
 801a368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a36a:	4013      	ands	r3, r2
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d101      	bne.n	801a374 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801a370:	f7e7 fbb0 	bl	8001ad4 <UTIL_SEQ_Idle>
 801a374:	69fb      	ldr	r3, [r7, #28]
 801a376:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a378:	68fb      	ldr	r3, [r7, #12]
 801a37a:	f383 8810 	msr	PRIMASK, r3
}
 801a37e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801a380:	f000 f86c 	bl	801a45c <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801a384:	4a03      	ldr	r2, [pc, #12]	; (801a394 <UTIL_SEQ_Run+0x1d8>)
 801a386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a388:	6013      	str	r3, [r2, #0]

  return;
 801a38a:	bf00      	nop
}
 801a38c:	3740      	adds	r7, #64	; 0x40
 801a38e:	46bd      	mov	sp, r7
 801a390:	bd80      	pop	{r7, pc}
 801a392:	bf00      	nop
 801a394:	20000148 	.word	0x20000148
 801a398:	20001cd0 	.word	0x20001cd0
 801a39c:	20001cd4 	.word	0x20001cd4
 801a3a0:	20000144 	.word	0x20000144
 801a3a4:	20001cd8 	.word	0x20001cd8
 801a3a8:	20001cf0 	.word	0x20001cf0
 801a3ac:	20001cdc 	.word	0x20001cdc
 801a3b0:	20001ce0 	.word	0x20001ce0

0801a3b4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801a3b4:	b580      	push	{r7, lr}
 801a3b6:	b088      	sub	sp, #32
 801a3b8:	af00      	add	r7, sp, #0
 801a3ba:	60f8      	str	r0, [r7, #12]
 801a3bc:	60b9      	str	r1, [r7, #8]
 801a3be:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a3c0:	f3ef 8310 	mrs	r3, PRIMASK
 801a3c4:	617b      	str	r3, [r7, #20]
  return(result);
 801a3c6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801a3c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a3ca:	b672      	cpsid	i
}
 801a3cc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801a3ce:	68f8      	ldr	r0, [r7, #12]
 801a3d0:	f000 f84a 	bl	801a468 <SEQ_BitPosition>
 801a3d4:	4603      	mov	r3, r0
 801a3d6:	4619      	mov	r1, r3
 801a3d8:	4a06      	ldr	r2, [pc, #24]	; (801a3f4 <UTIL_SEQ_RegTask+0x40>)
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a3e0:	69fb      	ldr	r3, [r7, #28]
 801a3e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a3e4:	69bb      	ldr	r3, [r7, #24]
 801a3e6:	f383 8810 	msr	PRIMASK, r3
}
 801a3ea:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801a3ec:	bf00      	nop
}
 801a3ee:	3720      	adds	r7, #32
 801a3f0:	46bd      	mov	sp, r7
 801a3f2:	bd80      	pop	{r7, pc}
 801a3f4:	20001ce0 	.word	0x20001ce0

0801a3f8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801a3f8:	b480      	push	{r7}
 801a3fa:	b087      	sub	sp, #28
 801a3fc:	af00      	add	r7, sp, #0
 801a3fe:	6078      	str	r0, [r7, #4]
 801a400:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a402:	f3ef 8310 	mrs	r3, PRIMASK
 801a406:	60fb      	str	r3, [r7, #12]
  return(result);
 801a408:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a40a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a40c:	b672      	cpsid	i
}
 801a40e:	bf00      	nop

  TaskSet |= TaskId_bm;
 801a410:	4b0d      	ldr	r3, [pc, #52]	; (801a448 <UTIL_SEQ_SetTask+0x50>)
 801a412:	681a      	ldr	r2, [r3, #0]
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	4313      	orrs	r3, r2
 801a418:	4a0b      	ldr	r2, [pc, #44]	; (801a448 <UTIL_SEQ_SetTask+0x50>)
 801a41a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801a41c:	4a0b      	ldr	r2, [pc, #44]	; (801a44c <UTIL_SEQ_SetTask+0x54>)
 801a41e:	683b      	ldr	r3, [r7, #0]
 801a420:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	431a      	orrs	r2, r3
 801a428:	4908      	ldr	r1, [pc, #32]	; (801a44c <UTIL_SEQ_SetTask+0x54>)
 801a42a:	683b      	ldr	r3, [r7, #0]
 801a42c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801a430:	697b      	ldr	r3, [r7, #20]
 801a432:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a434:	693b      	ldr	r3, [r7, #16]
 801a436:	f383 8810 	msr	PRIMASK, r3
}
 801a43a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801a43c:	bf00      	nop
}
 801a43e:	371c      	adds	r7, #28
 801a440:	46bd      	mov	sp, r7
 801a442:	bc80      	pop	{r7}
 801a444:	4770      	bx	lr
 801a446:	bf00      	nop
 801a448:	20001cd0 	.word	0x20001cd0
 801a44c:	20001cf0 	.word	0x20001cf0

0801a450 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801a450:	b480      	push	{r7}
 801a452:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a454:	bf00      	nop
}
 801a456:	46bd      	mov	sp, r7
 801a458:	bc80      	pop	{r7}
 801a45a:	4770      	bx	lr

0801a45c <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801a45c:	b480      	push	{r7}
 801a45e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a460:	bf00      	nop
}
 801a462:	46bd      	mov	sp, r7
 801a464:	bc80      	pop	{r7}
 801a466:	4770      	bx	lr

0801a468 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801a468:	b480      	push	{r7}
 801a46a:	b085      	sub	sp, #20
 801a46c:	af00      	add	r7, sp, #0
 801a46e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801a470:	2300      	movs	r3, #0
 801a472:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801a478:	68bb      	ldr	r3, [r7, #8]
 801a47a:	0c1b      	lsrs	r3, r3, #16
 801a47c:	041b      	lsls	r3, r3, #16
 801a47e:	2b00      	cmp	r3, #0
 801a480:	d104      	bne.n	801a48c <SEQ_BitPosition+0x24>
 801a482:	2310      	movs	r3, #16
 801a484:	73fb      	strb	r3, [r7, #15]
 801a486:	68bb      	ldr	r3, [r7, #8]
 801a488:	041b      	lsls	r3, r3, #16
 801a48a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801a48c:	68bb      	ldr	r3, [r7, #8]
 801a48e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801a492:	2b00      	cmp	r3, #0
 801a494:	d105      	bne.n	801a4a2 <SEQ_BitPosition+0x3a>
 801a496:	7bfb      	ldrb	r3, [r7, #15]
 801a498:	3308      	adds	r3, #8
 801a49a:	73fb      	strb	r3, [r7, #15]
 801a49c:	68bb      	ldr	r3, [r7, #8]
 801a49e:	021b      	lsls	r3, r3, #8
 801a4a0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801a4a2:	68bb      	ldr	r3, [r7, #8]
 801a4a4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d105      	bne.n	801a4b8 <SEQ_BitPosition+0x50>
 801a4ac:	7bfb      	ldrb	r3, [r7, #15]
 801a4ae:	3304      	adds	r3, #4
 801a4b0:	73fb      	strb	r3, [r7, #15]
 801a4b2:	68bb      	ldr	r3, [r7, #8]
 801a4b4:	011b      	lsls	r3, r3, #4
 801a4b6:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801a4b8:	68bb      	ldr	r3, [r7, #8]
 801a4ba:	0f1b      	lsrs	r3, r3, #28
 801a4bc:	4a06      	ldr	r2, [pc, #24]	; (801a4d8 <SEQ_BitPosition+0x70>)
 801a4be:	5cd2      	ldrb	r2, [r2, r3]
 801a4c0:	7bfb      	ldrb	r3, [r7, #15]
 801a4c2:	4413      	add	r3, r2
 801a4c4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801a4c6:	7bfb      	ldrb	r3, [r7, #15]
 801a4c8:	f1c3 031f 	rsb	r3, r3, #31
 801a4cc:	b2db      	uxtb	r3, r3
}
 801a4ce:	4618      	mov	r0, r3
 801a4d0:	3714      	adds	r7, #20
 801a4d2:	46bd      	mov	sp, r7
 801a4d4:	bc80      	pop	{r7}
 801a4d6:	4770      	bx	lr
 801a4d8:	0801bb30 	.word	0x0801bb30

0801a4dc <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801a4dc:	b580      	push	{r7, lr}
 801a4de:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801a4e0:	4b04      	ldr	r3, [pc, #16]	; (801a4f4 <UTIL_TIMER_Init+0x18>)
 801a4e2:	2200      	movs	r2, #0
 801a4e4:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801a4e6:	4b04      	ldr	r3, [pc, #16]	; (801a4f8 <UTIL_TIMER_Init+0x1c>)
 801a4e8:	681b      	ldr	r3, [r3, #0]
 801a4ea:	4798      	blx	r3
 801a4ec:	4603      	mov	r3, r0
}
 801a4ee:	4618      	mov	r0, r3
 801a4f0:	bd80      	pop	{r7, pc}
 801a4f2:	bf00      	nop
 801a4f4:	20001cf8 	.word	0x20001cf8
 801a4f8:	0801b638 	.word	0x0801b638

0801a4fc <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801a4fc:	b580      	push	{r7, lr}
 801a4fe:	b084      	sub	sp, #16
 801a500:	af00      	add	r7, sp, #0
 801a502:	60f8      	str	r0, [r7, #12]
 801a504:	60b9      	str	r1, [r7, #8]
 801a506:	603b      	str	r3, [r7, #0]
 801a508:	4613      	mov	r3, r2
 801a50a:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801a50c:	68fb      	ldr	r3, [r7, #12]
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d023      	beq.n	801a55a <UTIL_TIMER_Create+0x5e>
 801a512:	683b      	ldr	r3, [r7, #0]
 801a514:	2b00      	cmp	r3, #0
 801a516:	d020      	beq.n	801a55a <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801a518:	68fb      	ldr	r3, [r7, #12]
 801a51a:	2200      	movs	r2, #0
 801a51c:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801a51e:	4b11      	ldr	r3, [pc, #68]	; (801a564 <UTIL_TIMER_Create+0x68>)
 801a520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a522:	68b8      	ldr	r0, [r7, #8]
 801a524:	4798      	blx	r3
 801a526:	4602      	mov	r2, r0
 801a528:	68fb      	ldr	r3, [r7, #12]
 801a52a:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801a52c:	68fb      	ldr	r3, [r7, #12]
 801a52e:	2200      	movs	r2, #0
 801a530:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801a532:	68fb      	ldr	r3, [r7, #12]
 801a534:	2200      	movs	r2, #0
 801a536:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a538:	68fb      	ldr	r3, [r7, #12]
 801a53a:	2200      	movs	r2, #0
 801a53c:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801a53e:	68fb      	ldr	r3, [r7, #12]
 801a540:	683a      	ldr	r2, [r7, #0]
 801a542:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801a544:	68fb      	ldr	r3, [r7, #12]
 801a546:	69ba      	ldr	r2, [r7, #24]
 801a548:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801a54a:	68fb      	ldr	r3, [r7, #12]
 801a54c:	79fa      	ldrb	r2, [r7, #7]
 801a54e:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801a550:	68fb      	ldr	r3, [r7, #12]
 801a552:	2200      	movs	r2, #0
 801a554:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801a556:	2300      	movs	r3, #0
 801a558:	e000      	b.n	801a55c <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801a55a:	2301      	movs	r3, #1
  }
}
 801a55c:	4618      	mov	r0, r3
 801a55e:	3710      	adds	r7, #16
 801a560:	46bd      	mov	sp, r7
 801a562:	bd80      	pop	{r7, pc}
 801a564:	0801b638 	.word	0x0801b638

0801a568 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801a568:	b580      	push	{r7, lr}
 801a56a:	b08a      	sub	sp, #40	; 0x28
 801a56c:	af00      	add	r7, sp, #0
 801a56e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a570:	2300      	movs	r3, #0
 801a572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	2b00      	cmp	r3, #0
 801a57a:	d056      	beq.n	801a62a <UTIL_TIMER_Start+0xc2>
 801a57c:	6878      	ldr	r0, [r7, #4]
 801a57e:	f000 f9a9 	bl	801a8d4 <TimerExists>
 801a582:	4603      	mov	r3, r0
 801a584:	f083 0301 	eor.w	r3, r3, #1
 801a588:	b2db      	uxtb	r3, r3
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	d04d      	beq.n	801a62a <UTIL_TIMER_Start+0xc2>
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	7a5b      	ldrb	r3, [r3, #9]
 801a592:	2b00      	cmp	r3, #0
 801a594:	d149      	bne.n	801a62a <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a596:	f3ef 8310 	mrs	r3, PRIMASK
 801a59a:	613b      	str	r3, [r7, #16]
  return(result);
 801a59c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a59e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a5a0:	b672      	cpsid	i
}
 801a5a2:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	685b      	ldr	r3, [r3, #4]
 801a5a8:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801a5aa:	4b24      	ldr	r3, [pc, #144]	; (801a63c <UTIL_TIMER_Start+0xd4>)
 801a5ac:	6a1b      	ldr	r3, [r3, #32]
 801a5ae:	4798      	blx	r3
 801a5b0:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801a5b2:	6a3a      	ldr	r2, [r7, #32]
 801a5b4:	69bb      	ldr	r3, [r7, #24]
 801a5b6:	429a      	cmp	r2, r3
 801a5b8:	d201      	bcs.n	801a5be <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801a5ba:	69bb      	ldr	r3, [r7, #24]
 801a5bc:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	6a3a      	ldr	r2, [r7, #32]
 801a5c2:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	2200      	movs	r2, #0
 801a5c8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	2201      	movs	r2, #1
 801a5ce:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	2200      	movs	r2, #0
 801a5d4:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801a5d6:	4b1a      	ldr	r3, [pc, #104]	; (801a640 <UTIL_TIMER_Start+0xd8>)
 801a5d8:	681b      	ldr	r3, [r3, #0]
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d106      	bne.n	801a5ec <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801a5de:	4b17      	ldr	r3, [pc, #92]	; (801a63c <UTIL_TIMER_Start+0xd4>)
 801a5e0:	691b      	ldr	r3, [r3, #16]
 801a5e2:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801a5e4:	6878      	ldr	r0, [r7, #4]
 801a5e6:	f000 f9eb 	bl	801a9c0 <TimerInsertNewHeadTimer>
 801a5ea:	e017      	b.n	801a61c <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801a5ec:	4b13      	ldr	r3, [pc, #76]	; (801a63c <UTIL_TIMER_Start+0xd4>)
 801a5ee:	699b      	ldr	r3, [r3, #24]
 801a5f0:	4798      	blx	r3
 801a5f2:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	681a      	ldr	r2, [r3, #0]
 801a5f8:	697b      	ldr	r3, [r7, #20]
 801a5fa:	441a      	add	r2, r3
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	681a      	ldr	r2, [r3, #0]
 801a604:	4b0e      	ldr	r3, [pc, #56]	; (801a640 <UTIL_TIMER_Start+0xd8>)
 801a606:	681b      	ldr	r3, [r3, #0]
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	429a      	cmp	r2, r3
 801a60c:	d203      	bcs.n	801a616 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801a60e:	6878      	ldr	r0, [r7, #4]
 801a610:	f000 f9d6 	bl	801a9c0 <TimerInsertNewHeadTimer>
 801a614:	e002      	b.n	801a61c <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801a616:	6878      	ldr	r0, [r7, #4]
 801a618:	f000 f9a2 	bl	801a960 <TimerInsertTimer>
 801a61c:	69fb      	ldr	r3, [r7, #28]
 801a61e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a620:	68fb      	ldr	r3, [r7, #12]
 801a622:	f383 8810 	msr	PRIMASK, r3
}
 801a626:	bf00      	nop
  {
 801a628:	e002      	b.n	801a630 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801a62a:	2301      	movs	r3, #1
 801a62c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801a630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801a634:	4618      	mov	r0, r3
 801a636:	3728      	adds	r7, #40	; 0x28
 801a638:	46bd      	mov	sp, r7
 801a63a:	bd80      	pop	{r7, pc}
 801a63c:	0801b638 	.word	0x0801b638
 801a640:	20001cf8 	.word	0x20001cf8

0801a644 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801a644:	b580      	push	{r7, lr}
 801a646:	b088      	sub	sp, #32
 801a648:	af00      	add	r7, sp, #0
 801a64a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a64c:	2300      	movs	r3, #0
 801a64e:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	2b00      	cmp	r3, #0
 801a654:	d05b      	beq.n	801a70e <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a656:	f3ef 8310 	mrs	r3, PRIMASK
 801a65a:	60fb      	str	r3, [r7, #12]
  return(result);
 801a65c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a65e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a660:	b672      	cpsid	i
}
 801a662:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801a664:	4b2d      	ldr	r3, [pc, #180]	; (801a71c <UTIL_TIMER_Stop+0xd8>)
 801a666:	681b      	ldr	r3, [r3, #0]
 801a668:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801a66a:	4b2c      	ldr	r3, [pc, #176]	; (801a71c <UTIL_TIMER_Stop+0xd8>)
 801a66c:	681b      	ldr	r3, [r3, #0]
 801a66e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	2201      	movs	r2, #1
 801a674:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801a676:	4b29      	ldr	r3, [pc, #164]	; (801a71c <UTIL_TIMER_Stop+0xd8>)
 801a678:	681b      	ldr	r3, [r3, #0]
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d041      	beq.n	801a702 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	2200      	movs	r2, #0
 801a682:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801a684:	4b25      	ldr	r3, [pc, #148]	; (801a71c <UTIL_TIMER_Stop+0xd8>)
 801a686:	681b      	ldr	r3, [r3, #0]
 801a688:	687a      	ldr	r2, [r7, #4]
 801a68a:	429a      	cmp	r2, r3
 801a68c:	d134      	bne.n	801a6f8 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801a68e:	4b23      	ldr	r3, [pc, #140]	; (801a71c <UTIL_TIMER_Stop+0xd8>)
 801a690:	681b      	ldr	r3, [r3, #0]
 801a692:	2200      	movs	r2, #0
 801a694:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801a696:	4b21      	ldr	r3, [pc, #132]	; (801a71c <UTIL_TIMER_Stop+0xd8>)
 801a698:	681b      	ldr	r3, [r3, #0]
 801a69a:	695b      	ldr	r3, [r3, #20]
 801a69c:	2b00      	cmp	r3, #0
 801a69e:	d00a      	beq.n	801a6b6 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801a6a0:	4b1e      	ldr	r3, [pc, #120]	; (801a71c <UTIL_TIMER_Stop+0xd8>)
 801a6a2:	681b      	ldr	r3, [r3, #0]
 801a6a4:	695b      	ldr	r3, [r3, #20]
 801a6a6:	4a1d      	ldr	r2, [pc, #116]	; (801a71c <UTIL_TIMER_Stop+0xd8>)
 801a6a8:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801a6aa:	4b1c      	ldr	r3, [pc, #112]	; (801a71c <UTIL_TIMER_Stop+0xd8>)
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	4618      	mov	r0, r3
 801a6b0:	f000 f92c 	bl	801a90c <TimerSetTimeout>
 801a6b4:	e023      	b.n	801a6fe <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801a6b6:	4b1a      	ldr	r3, [pc, #104]	; (801a720 <UTIL_TIMER_Stop+0xdc>)
 801a6b8:	68db      	ldr	r3, [r3, #12]
 801a6ba:	4798      	blx	r3
            TimerListHead = NULL;
 801a6bc:	4b17      	ldr	r3, [pc, #92]	; (801a71c <UTIL_TIMER_Stop+0xd8>)
 801a6be:	2200      	movs	r2, #0
 801a6c0:	601a      	str	r2, [r3, #0]
 801a6c2:	e01c      	b.n	801a6fe <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801a6c4:	697a      	ldr	r2, [r7, #20]
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	429a      	cmp	r2, r3
 801a6ca:	d110      	bne.n	801a6ee <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801a6cc:	697b      	ldr	r3, [r7, #20]
 801a6ce:	695b      	ldr	r3, [r3, #20]
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	d006      	beq.n	801a6e2 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801a6d4:	697b      	ldr	r3, [r7, #20]
 801a6d6:	695b      	ldr	r3, [r3, #20]
 801a6d8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a6da:	69bb      	ldr	r3, [r7, #24]
 801a6dc:	697a      	ldr	r2, [r7, #20]
 801a6de:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801a6e0:	e00d      	b.n	801a6fe <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801a6e2:	2300      	movs	r3, #0
 801a6e4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a6e6:	69bb      	ldr	r3, [r7, #24]
 801a6e8:	697a      	ldr	r2, [r7, #20]
 801a6ea:	615a      	str	r2, [r3, #20]
            break;
 801a6ec:	e007      	b.n	801a6fe <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801a6ee:	697b      	ldr	r3, [r7, #20]
 801a6f0:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801a6f2:	697b      	ldr	r3, [r7, #20]
 801a6f4:	695b      	ldr	r3, [r3, #20]
 801a6f6:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801a6f8:	697b      	ldr	r3, [r7, #20]
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	d1e2      	bne.n	801a6c4 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801a6fe:	2300      	movs	r3, #0
 801a700:	77fb      	strb	r3, [r7, #31]
 801a702:	693b      	ldr	r3, [r7, #16]
 801a704:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a706:	68bb      	ldr	r3, [r7, #8]
 801a708:	f383 8810 	msr	PRIMASK, r3
}
 801a70c:	e001      	b.n	801a712 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801a70e:	2301      	movs	r3, #1
 801a710:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801a712:	7ffb      	ldrb	r3, [r7, #31]
}
 801a714:	4618      	mov	r0, r3
 801a716:	3720      	adds	r7, #32
 801a718:	46bd      	mov	sp, r7
 801a71a:	bd80      	pop	{r7, pc}
 801a71c:	20001cf8 	.word	0x20001cf8
 801a720:	0801b638 	.word	0x0801b638

0801a724 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801a724:	b580      	push	{r7, lr}
 801a726:	b084      	sub	sp, #16
 801a728:	af00      	add	r7, sp, #0
 801a72a:	6078      	str	r0, [r7, #4]
 801a72c:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a72e:	2300      	movs	r3, #0
 801a730:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	2b00      	cmp	r3, #0
 801a736:	d102      	bne.n	801a73e <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801a738:	2301      	movs	r3, #1
 801a73a:	73fb      	strb	r3, [r7, #15]
 801a73c:	e014      	b.n	801a768 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801a73e:	4b0d      	ldr	r3, [pc, #52]	; (801a774 <UTIL_TIMER_SetPeriod+0x50>)
 801a740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a742:	6838      	ldr	r0, [r7, #0]
 801a744:	4798      	blx	r3
 801a746:	4602      	mov	r2, r0
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801a74c:	6878      	ldr	r0, [r7, #4]
 801a74e:	f000 f8c1 	bl	801a8d4 <TimerExists>
 801a752:	4603      	mov	r3, r0
 801a754:	2b00      	cmp	r3, #0
 801a756:	d007      	beq.n	801a768 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801a758:	6878      	ldr	r0, [r7, #4]
 801a75a:	f7ff ff73 	bl	801a644 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801a75e:	6878      	ldr	r0, [r7, #4]
 801a760:	f7ff ff02 	bl	801a568 <UTIL_TIMER_Start>
 801a764:	4603      	mov	r3, r0
 801a766:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801a768:	7bfb      	ldrb	r3, [r7, #15]
}
 801a76a:	4618      	mov	r0, r3
 801a76c:	3710      	adds	r7, #16
 801a76e:	46bd      	mov	sp, r7
 801a770:	bd80      	pop	{r7, pc}
 801a772:	bf00      	nop
 801a774:	0801b638 	.word	0x0801b638

0801a778 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801a778:	b590      	push	{r4, r7, lr}
 801a77a:	b089      	sub	sp, #36	; 0x24
 801a77c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a77e:	f3ef 8310 	mrs	r3, PRIMASK
 801a782:	60bb      	str	r3, [r7, #8]
  return(result);
 801a784:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a786:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801a788:	b672      	cpsid	i
}
 801a78a:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801a78c:	4b38      	ldr	r3, [pc, #224]	; (801a870 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a78e:	695b      	ldr	r3, [r3, #20]
 801a790:	4798      	blx	r3
 801a792:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801a794:	4b36      	ldr	r3, [pc, #216]	; (801a870 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a796:	691b      	ldr	r3, [r3, #16]
 801a798:	4798      	blx	r3
 801a79a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801a79c:	693a      	ldr	r2, [r7, #16]
 801a79e:	697b      	ldr	r3, [r7, #20]
 801a7a0:	1ad3      	subs	r3, r2, r3
 801a7a2:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801a7a4:	4b33      	ldr	r3, [pc, #204]	; (801a874 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a7a6:	681b      	ldr	r3, [r3, #0]
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	d037      	beq.n	801a81c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801a7ac:	4b31      	ldr	r3, [pc, #196]	; (801a874 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a7ae:	681b      	ldr	r3, [r3, #0]
 801a7b0:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801a7b2:	69fb      	ldr	r3, [r7, #28]
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	68fa      	ldr	r2, [r7, #12]
 801a7b8:	429a      	cmp	r2, r3
 801a7ba:	d206      	bcs.n	801a7ca <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801a7bc:	69fb      	ldr	r3, [r7, #28]
 801a7be:	681a      	ldr	r2, [r3, #0]
 801a7c0:	68fb      	ldr	r3, [r7, #12]
 801a7c2:	1ad2      	subs	r2, r2, r3
 801a7c4:	69fb      	ldr	r3, [r7, #28]
 801a7c6:	601a      	str	r2, [r3, #0]
 801a7c8:	e002      	b.n	801a7d0 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801a7ca:	69fb      	ldr	r3, [r7, #28]
 801a7cc:	2200      	movs	r2, #0
 801a7ce:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801a7d0:	69fb      	ldr	r3, [r7, #28]
 801a7d2:	695b      	ldr	r3, [r3, #20]
 801a7d4:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801a7d6:	69fb      	ldr	r3, [r7, #28]
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d1ea      	bne.n	801a7b2 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801a7dc:	e01e      	b.n	801a81c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801a7de:	4b25      	ldr	r3, [pc, #148]	; (801a874 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801a7e4:	4b23      	ldr	r3, [pc, #140]	; (801a874 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a7e6:	681b      	ldr	r3, [r3, #0]
 801a7e8:	695b      	ldr	r3, [r3, #20]
 801a7ea:	4a22      	ldr	r2, [pc, #136]	; (801a874 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a7ec:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801a7ee:	69fb      	ldr	r3, [r7, #28]
 801a7f0:	2200      	movs	r2, #0
 801a7f2:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801a7f4:	69fb      	ldr	r3, [r7, #28]
 801a7f6:	2200      	movs	r2, #0
 801a7f8:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801a7fa:	69fb      	ldr	r3, [r7, #28]
 801a7fc:	68db      	ldr	r3, [r3, #12]
 801a7fe:	69fa      	ldr	r2, [r7, #28]
 801a800:	6912      	ldr	r2, [r2, #16]
 801a802:	4610      	mov	r0, r2
 801a804:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801a806:	69fb      	ldr	r3, [r7, #28]
 801a808:	7adb      	ldrb	r3, [r3, #11]
 801a80a:	2b01      	cmp	r3, #1
 801a80c:	d106      	bne.n	801a81c <UTIL_TIMER_IRQ_Handler+0xa4>
 801a80e:	69fb      	ldr	r3, [r7, #28]
 801a810:	7a9b      	ldrb	r3, [r3, #10]
 801a812:	2b00      	cmp	r3, #0
 801a814:	d102      	bne.n	801a81c <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801a816:	69f8      	ldr	r0, [r7, #28]
 801a818:	f7ff fea6 	bl	801a568 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801a81c:	4b15      	ldr	r3, [pc, #84]	; (801a874 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a81e:	681b      	ldr	r3, [r3, #0]
 801a820:	2b00      	cmp	r3, #0
 801a822:	d00d      	beq.n	801a840 <UTIL_TIMER_IRQ_Handler+0xc8>
 801a824:	4b13      	ldr	r3, [pc, #76]	; (801a874 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	d0d7      	beq.n	801a7de <UTIL_TIMER_IRQ_Handler+0x66>
 801a82e:	4b11      	ldr	r3, [pc, #68]	; (801a874 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a830:	681b      	ldr	r3, [r3, #0]
 801a832:	681c      	ldr	r4, [r3, #0]
 801a834:	4b0e      	ldr	r3, [pc, #56]	; (801a870 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a836:	699b      	ldr	r3, [r3, #24]
 801a838:	4798      	blx	r3
 801a83a:	4603      	mov	r3, r0
 801a83c:	429c      	cmp	r4, r3
 801a83e:	d3ce      	bcc.n	801a7de <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801a840:	4b0c      	ldr	r3, [pc, #48]	; (801a874 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a842:	681b      	ldr	r3, [r3, #0]
 801a844:	2b00      	cmp	r3, #0
 801a846:	d009      	beq.n	801a85c <UTIL_TIMER_IRQ_Handler+0xe4>
 801a848:	4b0a      	ldr	r3, [pc, #40]	; (801a874 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	7a1b      	ldrb	r3, [r3, #8]
 801a84e:	2b00      	cmp	r3, #0
 801a850:	d104      	bne.n	801a85c <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801a852:	4b08      	ldr	r3, [pc, #32]	; (801a874 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	4618      	mov	r0, r3
 801a858:	f000 f858 	bl	801a90c <TimerSetTimeout>
 801a85c:	69bb      	ldr	r3, [r7, #24]
 801a85e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a860:	687b      	ldr	r3, [r7, #4]
 801a862:	f383 8810 	msr	PRIMASK, r3
}
 801a866:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801a868:	bf00      	nop
 801a86a:	3724      	adds	r7, #36	; 0x24
 801a86c:	46bd      	mov	sp, r7
 801a86e:	bd90      	pop	{r4, r7, pc}
 801a870:	0801b638 	.word	0x0801b638
 801a874:	20001cf8 	.word	0x20001cf8

0801a878 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801a878:	b580      	push	{r7, lr}
 801a87a:	b082      	sub	sp, #8
 801a87c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801a87e:	4b06      	ldr	r3, [pc, #24]	; (801a898 <UTIL_TIMER_GetCurrentTime+0x20>)
 801a880:	69db      	ldr	r3, [r3, #28]
 801a882:	4798      	blx	r3
 801a884:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801a886:	4b04      	ldr	r3, [pc, #16]	; (801a898 <UTIL_TIMER_GetCurrentTime+0x20>)
 801a888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a88a:	6878      	ldr	r0, [r7, #4]
 801a88c:	4798      	blx	r3
 801a88e:	4603      	mov	r3, r0
}
 801a890:	4618      	mov	r0, r3
 801a892:	3708      	adds	r7, #8
 801a894:	46bd      	mov	sp, r7
 801a896:	bd80      	pop	{r7, pc}
 801a898:	0801b638 	.word	0x0801b638

0801a89c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801a89c:	b580      	push	{r7, lr}
 801a89e:	b084      	sub	sp, #16
 801a8a0:	af00      	add	r7, sp, #0
 801a8a2:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801a8a4:	4b0a      	ldr	r3, [pc, #40]	; (801a8d0 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a8a6:	69db      	ldr	r3, [r3, #28]
 801a8a8:	4798      	blx	r3
 801a8aa:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801a8ac:	4b08      	ldr	r3, [pc, #32]	; (801a8d0 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a8b0:	6878      	ldr	r0, [r7, #4]
 801a8b2:	4798      	blx	r3
 801a8b4:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801a8b6:	4b06      	ldr	r3, [pc, #24]	; (801a8d0 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a8ba:	68f9      	ldr	r1, [r7, #12]
 801a8bc:	68ba      	ldr	r2, [r7, #8]
 801a8be:	1a8a      	subs	r2, r1, r2
 801a8c0:	4610      	mov	r0, r2
 801a8c2:	4798      	blx	r3
 801a8c4:	4603      	mov	r3, r0
}
 801a8c6:	4618      	mov	r0, r3
 801a8c8:	3710      	adds	r7, #16
 801a8ca:	46bd      	mov	sp, r7
 801a8cc:	bd80      	pop	{r7, pc}
 801a8ce:	bf00      	nop
 801a8d0:	0801b638 	.word	0x0801b638

0801a8d4 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801a8d4:	b480      	push	{r7}
 801a8d6:	b085      	sub	sp, #20
 801a8d8:	af00      	add	r7, sp, #0
 801a8da:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a8dc:	4b0a      	ldr	r3, [pc, #40]	; (801a908 <TimerExists+0x34>)
 801a8de:	681b      	ldr	r3, [r3, #0]
 801a8e0:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801a8e2:	e008      	b.n	801a8f6 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801a8e4:	68fa      	ldr	r2, [r7, #12]
 801a8e6:	687b      	ldr	r3, [r7, #4]
 801a8e8:	429a      	cmp	r2, r3
 801a8ea:	d101      	bne.n	801a8f0 <TimerExists+0x1c>
    {
      return true;
 801a8ec:	2301      	movs	r3, #1
 801a8ee:	e006      	b.n	801a8fe <TimerExists+0x2a>
    }
    cur = cur->Next;
 801a8f0:	68fb      	ldr	r3, [r7, #12]
 801a8f2:	695b      	ldr	r3, [r3, #20]
 801a8f4:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801a8f6:	68fb      	ldr	r3, [r7, #12]
 801a8f8:	2b00      	cmp	r3, #0
 801a8fa:	d1f3      	bne.n	801a8e4 <TimerExists+0x10>
  }
  return false;
 801a8fc:	2300      	movs	r3, #0
}
 801a8fe:	4618      	mov	r0, r3
 801a900:	3714      	adds	r7, #20
 801a902:	46bd      	mov	sp, r7
 801a904:	bc80      	pop	{r7}
 801a906:	4770      	bx	lr
 801a908:	20001cf8 	.word	0x20001cf8

0801a90c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801a90c:	b590      	push	{r4, r7, lr}
 801a90e:	b085      	sub	sp, #20
 801a910:	af00      	add	r7, sp, #0
 801a912:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801a914:	4b11      	ldr	r3, [pc, #68]	; (801a95c <TimerSetTimeout+0x50>)
 801a916:	6a1b      	ldr	r3, [r3, #32]
 801a918:	4798      	blx	r3
 801a91a:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	2201      	movs	r2, #1
 801a920:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	681c      	ldr	r4, [r3, #0]
 801a926:	4b0d      	ldr	r3, [pc, #52]	; (801a95c <TimerSetTimeout+0x50>)
 801a928:	699b      	ldr	r3, [r3, #24]
 801a92a:	4798      	blx	r3
 801a92c:	4602      	mov	r2, r0
 801a92e:	68fb      	ldr	r3, [r7, #12]
 801a930:	4413      	add	r3, r2
 801a932:	429c      	cmp	r4, r3
 801a934:	d207      	bcs.n	801a946 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801a936:	4b09      	ldr	r3, [pc, #36]	; (801a95c <TimerSetTimeout+0x50>)
 801a938:	699b      	ldr	r3, [r3, #24]
 801a93a:	4798      	blx	r3
 801a93c:	4602      	mov	r2, r0
 801a93e:	68fb      	ldr	r3, [r7, #12]
 801a940:	441a      	add	r2, r3
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801a946:	4b05      	ldr	r3, [pc, #20]	; (801a95c <TimerSetTimeout+0x50>)
 801a948:	689b      	ldr	r3, [r3, #8]
 801a94a:	687a      	ldr	r2, [r7, #4]
 801a94c:	6812      	ldr	r2, [r2, #0]
 801a94e:	4610      	mov	r0, r2
 801a950:	4798      	blx	r3
}
 801a952:	bf00      	nop
 801a954:	3714      	adds	r7, #20
 801a956:	46bd      	mov	sp, r7
 801a958:	bd90      	pop	{r4, r7, pc}
 801a95a:	bf00      	nop
 801a95c:	0801b638 	.word	0x0801b638

0801a960 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801a960:	b480      	push	{r7}
 801a962:	b085      	sub	sp, #20
 801a964:	af00      	add	r7, sp, #0
 801a966:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a968:	4b14      	ldr	r3, [pc, #80]	; (801a9bc <TimerInsertTimer+0x5c>)
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801a96e:	4b13      	ldr	r3, [pc, #76]	; (801a9bc <TimerInsertTimer+0x5c>)
 801a970:	681b      	ldr	r3, [r3, #0]
 801a972:	695b      	ldr	r3, [r3, #20]
 801a974:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801a976:	e012      	b.n	801a99e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	681a      	ldr	r2, [r3, #0]
 801a97c:	68bb      	ldr	r3, [r7, #8]
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	429a      	cmp	r2, r3
 801a982:	d905      	bls.n	801a990 <TimerInsertTimer+0x30>
    {
        cur = next;
 801a984:	68bb      	ldr	r3, [r7, #8]
 801a986:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801a988:	68bb      	ldr	r3, [r7, #8]
 801a98a:	695b      	ldr	r3, [r3, #20]
 801a98c:	60bb      	str	r3, [r7, #8]
 801a98e:	e006      	b.n	801a99e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801a990:	68fb      	ldr	r3, [r7, #12]
 801a992:	687a      	ldr	r2, [r7, #4]
 801a994:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	68ba      	ldr	r2, [r7, #8]
 801a99a:	615a      	str	r2, [r3, #20]
        return;
 801a99c:	e009      	b.n	801a9b2 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801a99e:	68fb      	ldr	r3, [r7, #12]
 801a9a0:	695b      	ldr	r3, [r3, #20]
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	d1e8      	bne.n	801a978 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801a9a6:	68fb      	ldr	r3, [r7, #12]
 801a9a8:	687a      	ldr	r2, [r7, #4]
 801a9aa:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	2200      	movs	r2, #0
 801a9b0:	615a      	str	r2, [r3, #20]
}
 801a9b2:	3714      	adds	r7, #20
 801a9b4:	46bd      	mov	sp, r7
 801a9b6:	bc80      	pop	{r7}
 801a9b8:	4770      	bx	lr
 801a9ba:	bf00      	nop
 801a9bc:	20001cf8 	.word	0x20001cf8

0801a9c0 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801a9c0:	b580      	push	{r7, lr}
 801a9c2:	b084      	sub	sp, #16
 801a9c4:	af00      	add	r7, sp, #0
 801a9c6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a9c8:	4b0b      	ldr	r3, [pc, #44]	; (801a9f8 <TimerInsertNewHeadTimer+0x38>)
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801a9ce:	68fb      	ldr	r3, [r7, #12]
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	d002      	beq.n	801a9da <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801a9d4:	68fb      	ldr	r3, [r7, #12]
 801a9d6:	2200      	movs	r2, #0
 801a9d8:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	68fa      	ldr	r2, [r7, #12]
 801a9de:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801a9e0:	4a05      	ldr	r2, [pc, #20]	; (801a9f8 <TimerInsertNewHeadTimer+0x38>)
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801a9e6:	4b04      	ldr	r3, [pc, #16]	; (801a9f8 <TimerInsertNewHeadTimer+0x38>)
 801a9e8:	681b      	ldr	r3, [r3, #0]
 801a9ea:	4618      	mov	r0, r3
 801a9ec:	f7ff ff8e 	bl	801a90c <TimerSetTimeout>
}
 801a9f0:	bf00      	nop
 801a9f2:	3710      	adds	r7, #16
 801a9f4:	46bd      	mov	sp, r7
 801a9f6:	bd80      	pop	{r7, pc}
 801a9f8:	20001cf8 	.word	0x20001cf8

0801a9fc <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801a9fc:	b580      	push	{r7, lr}
 801a9fe:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801aa00:	2218      	movs	r2, #24
 801aa02:	2100      	movs	r1, #0
 801aa04:	4807      	ldr	r0, [pc, #28]	; (801aa24 <UTIL_ADV_TRACE_Init+0x28>)
 801aa06:	f7fe fff6 	bl	80199f6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801aa0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801aa0e:	2100      	movs	r1, #0
 801aa10:	4805      	ldr	r0, [pc, #20]	; (801aa28 <UTIL_ADV_TRACE_Init+0x2c>)
 801aa12:	f7fe fff0 	bl	80199f6 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801aa16:	4b05      	ldr	r3, [pc, #20]	; (801aa2c <UTIL_ADV_TRACE_Init+0x30>)
 801aa18:	681b      	ldr	r3, [r3, #0]
 801aa1a:	4805      	ldr	r0, [pc, #20]	; (801aa30 <UTIL_ADV_TRACE_Init+0x34>)
 801aa1c:	4798      	blx	r3
 801aa1e:	4603      	mov	r3, r0
}
 801aa20:	4618      	mov	r0, r3
 801aa22:	bd80      	pop	{r7, pc}
 801aa24:	20001cfc 	.word	0x20001cfc
 801aa28:	20001d14 	.word	0x20001d14
 801aa2c:	0801b678 	.word	0x0801b678
 801aa30:	0801ac9d 	.word	0x0801ac9d

0801aa34 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801aa34:	b480      	push	{r7}
 801aa36:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801aa38:	4b06      	ldr	r3, [pc, #24]	; (801aa54 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801aa3a:	8a5a      	ldrh	r2, [r3, #18]
 801aa3c:	4b05      	ldr	r3, [pc, #20]	; (801aa54 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801aa3e:	8a1b      	ldrh	r3, [r3, #16]
 801aa40:	429a      	cmp	r2, r3
 801aa42:	d101      	bne.n	801aa48 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801aa44:	2301      	movs	r3, #1
 801aa46:	e000      	b.n	801aa4a <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801aa48:	2300      	movs	r3, #0
}
 801aa4a:	4618      	mov	r0, r3
 801aa4c:	46bd      	mov	sp, r7
 801aa4e:	bc80      	pop	{r7}
 801aa50:	4770      	bx	lr
 801aa52:	bf00      	nop
 801aa54:	20001cfc 	.word	0x20001cfc

0801aa58 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801aa58:	b408      	push	{r3}
 801aa5a:	b580      	push	{r7, lr}
 801aa5c:	b08d      	sub	sp, #52	; 0x34
 801aa5e:	af00      	add	r7, sp, #0
 801aa60:	60f8      	str	r0, [r7, #12]
 801aa62:	60b9      	str	r1, [r7, #8]
 801aa64:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801aa66:	2300      	movs	r3, #0
 801aa68:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801aa6a:	2300      	movs	r3, #0
 801aa6c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801aa6e:	4b37      	ldr	r3, [pc, #220]	; (801ab4c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801aa70:	7a1b      	ldrb	r3, [r3, #8]
 801aa72:	461a      	mov	r2, r3
 801aa74:	68fb      	ldr	r3, [r7, #12]
 801aa76:	4293      	cmp	r3, r2
 801aa78:	d902      	bls.n	801aa80 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801aa7a:	f06f 0304 	mvn.w	r3, #4
 801aa7e:	e05e      	b.n	801ab3e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801aa80:	4b32      	ldr	r3, [pc, #200]	; (801ab4c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801aa82:	68da      	ldr	r2, [r3, #12]
 801aa84:	68bb      	ldr	r3, [r7, #8]
 801aa86:	4013      	ands	r3, r2
 801aa88:	68ba      	ldr	r2, [r7, #8]
 801aa8a:	429a      	cmp	r2, r3
 801aa8c:	d002      	beq.n	801aa94 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801aa8e:	f06f 0305 	mvn.w	r3, #5
 801aa92:	e054      	b.n	801ab3e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801aa94:	4b2d      	ldr	r3, [pc, #180]	; (801ab4c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801aa96:	685b      	ldr	r3, [r3, #4]
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	d00a      	beq.n	801aab2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	2b00      	cmp	r3, #0
 801aaa0:	d007      	beq.n	801aab2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801aaa2:	4b2a      	ldr	r3, [pc, #168]	; (801ab4c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801aaa4:	685b      	ldr	r3, [r3, #4]
 801aaa6:	f107 0116 	add.w	r1, r7, #22
 801aaaa:	f107 0218 	add.w	r2, r7, #24
 801aaae:	4610      	mov	r0, r2
 801aab0:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801aab2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801aab6:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801aab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aaba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801aabc:	f44f 7100 	mov.w	r1, #512	; 0x200
 801aac0:	4823      	ldr	r0, [pc, #140]	; (801ab50 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801aac2:	f7ff fa25 	bl	8019f10 <tiny_vsnprintf_like>
 801aac6:	4603      	mov	r3, r0
 801aac8:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801aaca:	f000 f9f1 	bl	801aeb0 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801aace:	8afa      	ldrh	r2, [r7, #22]
 801aad0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801aad2:	4413      	add	r3, r2
 801aad4:	b29b      	uxth	r3, r3
 801aad6:	f107 0214 	add.w	r2, r7, #20
 801aada:	4611      	mov	r1, r2
 801aadc:	4618      	mov	r0, r3
 801aade:	f000 f969 	bl	801adb4 <TRACE_AllocateBufer>
 801aae2:	4603      	mov	r3, r0
 801aae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aae8:	d025      	beq.n	801ab36 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801aaea:	2300      	movs	r3, #0
 801aaec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801aaee:	e00e      	b.n	801ab0e <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801aaf0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801aaf2:	8aba      	ldrh	r2, [r7, #20]
 801aaf4:	3330      	adds	r3, #48	; 0x30
 801aaf6:	443b      	add	r3, r7
 801aaf8:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801aafc:	4b15      	ldr	r3, [pc, #84]	; (801ab54 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801aafe:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801ab00:	8abb      	ldrh	r3, [r7, #20]
 801ab02:	3301      	adds	r3, #1
 801ab04:	b29b      	uxth	r3, r3
 801ab06:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801ab08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ab0a:	3301      	adds	r3, #1
 801ab0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ab0e:	8afb      	ldrh	r3, [r7, #22]
 801ab10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801ab12:	429a      	cmp	r2, r3
 801ab14:	d3ec      	bcc.n	801aaf0 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801ab16:	8abb      	ldrh	r3, [r7, #20]
 801ab18:	461a      	mov	r2, r3
 801ab1a:	4b0e      	ldr	r3, [pc, #56]	; (801ab54 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801ab1c:	18d0      	adds	r0, r2, r3
 801ab1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ab22:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ab26:	f7ff f9f3 	bl	8019f10 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801ab2a:	f000 f9df 	bl	801aeec <TRACE_UnLock>

    return TRACE_Send();
 801ab2e:	f000 f831 	bl	801ab94 <TRACE_Send>
 801ab32:	4603      	mov	r3, r0
 801ab34:	e003      	b.n	801ab3e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801ab36:	f000 f9d9 	bl	801aeec <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801ab3a:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801ab3e:	4618      	mov	r0, r3
 801ab40:	3734      	adds	r7, #52	; 0x34
 801ab42:	46bd      	mov	sp, r7
 801ab44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801ab48:	b001      	add	sp, #4
 801ab4a:	4770      	bx	lr
 801ab4c:	20001cfc 	.word	0x20001cfc
 801ab50:	20002114 	.word	0x20002114
 801ab54:	20001d14 	.word	0x20001d14

0801ab58 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801ab58:	b480      	push	{r7}
 801ab5a:	b083      	sub	sp, #12
 801ab5c:	af00      	add	r7, sp, #0
 801ab5e:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801ab60:	4a03      	ldr	r2, [pc, #12]	; (801ab70 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	6053      	str	r3, [r2, #4]
}
 801ab66:	bf00      	nop
 801ab68:	370c      	adds	r7, #12
 801ab6a:	46bd      	mov	sp, r7
 801ab6c:	bc80      	pop	{r7}
 801ab6e:	4770      	bx	lr
 801ab70:	20001cfc 	.word	0x20001cfc

0801ab74 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801ab74:	b480      	push	{r7}
 801ab76:	b083      	sub	sp, #12
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	4603      	mov	r3, r0
 801ab7c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801ab7e:	4a04      	ldr	r2, [pc, #16]	; (801ab90 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801ab80:	79fb      	ldrb	r3, [r7, #7]
 801ab82:	7213      	strb	r3, [r2, #8]
}
 801ab84:	bf00      	nop
 801ab86:	370c      	adds	r7, #12
 801ab88:	46bd      	mov	sp, r7
 801ab8a:	bc80      	pop	{r7}
 801ab8c:	4770      	bx	lr
 801ab8e:	bf00      	nop
 801ab90:	20001cfc 	.word	0x20001cfc

0801ab94 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801ab94:	b580      	push	{r7, lr}
 801ab96:	b088      	sub	sp, #32
 801ab98:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801ab9a:	2300      	movs	r3, #0
 801ab9c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801ab9e:	2300      	movs	r3, #0
 801aba0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aba2:	f3ef 8310 	mrs	r3, PRIMASK
 801aba6:	613b      	str	r3, [r7, #16]
  return(result);
 801aba8:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801abaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801abac:	b672      	cpsid	i
}
 801abae:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801abb0:	f000 f9ba 	bl	801af28 <TRACE_IsLocked>
 801abb4:	4603      	mov	r3, r0
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	d15d      	bne.n	801ac76 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801abba:	f000 f979 	bl	801aeb0 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801abbe:	4b34      	ldr	r3, [pc, #208]	; (801ac90 <TRACE_Send+0xfc>)
 801abc0:	8a1a      	ldrh	r2, [r3, #16]
 801abc2:	4b33      	ldr	r3, [pc, #204]	; (801ac90 <TRACE_Send+0xfc>)
 801abc4:	8a5b      	ldrh	r3, [r3, #18]
 801abc6:	429a      	cmp	r2, r3
 801abc8:	d04d      	beq.n	801ac66 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801abca:	4b31      	ldr	r3, [pc, #196]	; (801ac90 <TRACE_Send+0xfc>)
 801abcc:	789b      	ldrb	r3, [r3, #2]
 801abce:	2b01      	cmp	r3, #1
 801abd0:	d117      	bne.n	801ac02 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801abd2:	4b2f      	ldr	r3, [pc, #188]	; (801ac90 <TRACE_Send+0xfc>)
 801abd4:	881a      	ldrh	r2, [r3, #0]
 801abd6:	4b2e      	ldr	r3, [pc, #184]	; (801ac90 <TRACE_Send+0xfc>)
 801abd8:	8a1b      	ldrh	r3, [r3, #16]
 801abda:	1ad3      	subs	r3, r2, r3
 801abdc:	b29a      	uxth	r2, r3
 801abde:	4b2c      	ldr	r3, [pc, #176]	; (801ac90 <TRACE_Send+0xfc>)
 801abe0:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801abe2:	4b2b      	ldr	r3, [pc, #172]	; (801ac90 <TRACE_Send+0xfc>)
 801abe4:	2202      	movs	r2, #2
 801abe6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801abe8:	4b29      	ldr	r3, [pc, #164]	; (801ac90 <TRACE_Send+0xfc>)
 801abea:	2200      	movs	r2, #0
 801abec:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801abee:	4b28      	ldr	r3, [pc, #160]	; (801ac90 <TRACE_Send+0xfc>)
 801abf0:	8a9b      	ldrh	r3, [r3, #20]
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d105      	bne.n	801ac02 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801abf6:	4b26      	ldr	r3, [pc, #152]	; (801ac90 <TRACE_Send+0xfc>)
 801abf8:	2200      	movs	r2, #0
 801abfa:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801abfc:	4b24      	ldr	r3, [pc, #144]	; (801ac90 <TRACE_Send+0xfc>)
 801abfe:	2200      	movs	r2, #0
 801ac00:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ac02:	4b23      	ldr	r3, [pc, #140]	; (801ac90 <TRACE_Send+0xfc>)
 801ac04:	789b      	ldrb	r3, [r3, #2]
 801ac06:	2b00      	cmp	r3, #0
 801ac08:	d115      	bne.n	801ac36 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ac0a:	4b21      	ldr	r3, [pc, #132]	; (801ac90 <TRACE_Send+0xfc>)
 801ac0c:	8a5a      	ldrh	r2, [r3, #18]
 801ac0e:	4b20      	ldr	r3, [pc, #128]	; (801ac90 <TRACE_Send+0xfc>)
 801ac10:	8a1b      	ldrh	r3, [r3, #16]
 801ac12:	429a      	cmp	r2, r3
 801ac14:	d908      	bls.n	801ac28 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ac16:	4b1e      	ldr	r3, [pc, #120]	; (801ac90 <TRACE_Send+0xfc>)
 801ac18:	8a5a      	ldrh	r2, [r3, #18]
 801ac1a:	4b1d      	ldr	r3, [pc, #116]	; (801ac90 <TRACE_Send+0xfc>)
 801ac1c:	8a1b      	ldrh	r3, [r3, #16]
 801ac1e:	1ad3      	subs	r3, r2, r3
 801ac20:	b29a      	uxth	r2, r3
 801ac22:	4b1b      	ldr	r3, [pc, #108]	; (801ac90 <TRACE_Send+0xfc>)
 801ac24:	829a      	strh	r2, [r3, #20]
 801ac26:	e006      	b.n	801ac36 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ac28:	4b19      	ldr	r3, [pc, #100]	; (801ac90 <TRACE_Send+0xfc>)
 801ac2a:	8a1b      	ldrh	r3, [r3, #16]
 801ac2c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ac30:	b29a      	uxth	r2, r3
 801ac32:	4b17      	ldr	r3, [pc, #92]	; (801ac90 <TRACE_Send+0xfc>)
 801ac34:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ac36:	4b16      	ldr	r3, [pc, #88]	; (801ac90 <TRACE_Send+0xfc>)
 801ac38:	8a1b      	ldrh	r3, [r3, #16]
 801ac3a:	461a      	mov	r2, r3
 801ac3c:	4b15      	ldr	r3, [pc, #84]	; (801ac94 <TRACE_Send+0x100>)
 801ac3e:	4413      	add	r3, r2
 801ac40:	61bb      	str	r3, [r7, #24]
 801ac42:	697b      	ldr	r3, [r7, #20]
 801ac44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac46:	68fb      	ldr	r3, [r7, #12]
 801ac48:	f383 8810 	msr	PRIMASK, r3
}
 801ac4c:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801ac4e:	f7e7 f843 	bl	8001cd8 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ac52:	4b11      	ldr	r3, [pc, #68]	; (801ac98 <TRACE_Send+0x104>)
 801ac54:	68db      	ldr	r3, [r3, #12]
 801ac56:	4a0e      	ldr	r2, [pc, #56]	; (801ac90 <TRACE_Send+0xfc>)
 801ac58:	8a92      	ldrh	r2, [r2, #20]
 801ac5a:	4611      	mov	r1, r2
 801ac5c:	69b8      	ldr	r0, [r7, #24]
 801ac5e:	4798      	blx	r3
 801ac60:	4603      	mov	r3, r0
 801ac62:	77fb      	strb	r3, [r7, #31]
 801ac64:	e00d      	b.n	801ac82 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801ac66:	f000 f941 	bl	801aeec <TRACE_UnLock>
 801ac6a:	697b      	ldr	r3, [r7, #20]
 801ac6c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac6e:	68bb      	ldr	r3, [r7, #8]
 801ac70:	f383 8810 	msr	PRIMASK, r3
}
 801ac74:	e005      	b.n	801ac82 <TRACE_Send+0xee>
 801ac76:	697b      	ldr	r3, [r7, #20]
 801ac78:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	f383 8810 	msr	PRIMASK, r3
}
 801ac80:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801ac82:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ac86:	4618      	mov	r0, r3
 801ac88:	3720      	adds	r7, #32
 801ac8a:	46bd      	mov	sp, r7
 801ac8c:	bd80      	pop	{r7, pc}
 801ac8e:	bf00      	nop
 801ac90:	20001cfc 	.word	0x20001cfc
 801ac94:	20001d14 	.word	0x20001d14
 801ac98:	0801b678 	.word	0x0801b678

0801ac9c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801ac9c:	b580      	push	{r7, lr}
 801ac9e:	b088      	sub	sp, #32
 801aca0:	af00      	add	r7, sp, #0
 801aca2:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801aca4:	2300      	movs	r3, #0
 801aca6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aca8:	f3ef 8310 	mrs	r3, PRIMASK
 801acac:	617b      	str	r3, [r7, #20]
  return(result);
 801acae:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801acb0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801acb2:	b672      	cpsid	i
}
 801acb4:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801acb6:	4b3c      	ldr	r3, [pc, #240]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801acb8:	789b      	ldrb	r3, [r3, #2]
 801acba:	2b02      	cmp	r3, #2
 801acbc:	d106      	bne.n	801accc <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801acbe:	4b3a      	ldr	r3, [pc, #232]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801acc0:	2200      	movs	r2, #0
 801acc2:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801acc4:	4b38      	ldr	r3, [pc, #224]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801acc6:	2200      	movs	r2, #0
 801acc8:	821a      	strh	r2, [r3, #16]
 801acca:	e00a      	b.n	801ace2 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801accc:	4b36      	ldr	r3, [pc, #216]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801acce:	8a1a      	ldrh	r2, [r3, #16]
 801acd0:	4b35      	ldr	r3, [pc, #212]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801acd2:	8a9b      	ldrh	r3, [r3, #20]
 801acd4:	4413      	add	r3, r2
 801acd6:	b29b      	uxth	r3, r3
 801acd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801acdc:	b29a      	uxth	r2, r3
 801acde:	4b32      	ldr	r3, [pc, #200]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801ace0:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801ace2:	4b31      	ldr	r3, [pc, #196]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801ace4:	8a1a      	ldrh	r2, [r3, #16]
 801ace6:	4b30      	ldr	r3, [pc, #192]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801ace8:	8a5b      	ldrh	r3, [r3, #18]
 801acea:	429a      	cmp	r2, r3
 801acec:	d04d      	beq.n	801ad8a <TRACE_TxCpltCallback+0xee>
 801acee:	4b2e      	ldr	r3, [pc, #184]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801acf0:	8adb      	ldrh	r3, [r3, #22]
 801acf2:	2b01      	cmp	r3, #1
 801acf4:	d149      	bne.n	801ad8a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801acf6:	4b2c      	ldr	r3, [pc, #176]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801acf8:	789b      	ldrb	r3, [r3, #2]
 801acfa:	2b01      	cmp	r3, #1
 801acfc:	d117      	bne.n	801ad2e <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801acfe:	4b2a      	ldr	r3, [pc, #168]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801ad00:	881a      	ldrh	r2, [r3, #0]
 801ad02:	4b29      	ldr	r3, [pc, #164]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801ad04:	8a1b      	ldrh	r3, [r3, #16]
 801ad06:	1ad3      	subs	r3, r2, r3
 801ad08:	b29a      	uxth	r2, r3
 801ad0a:	4b27      	ldr	r3, [pc, #156]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801ad0c:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801ad0e:	4b26      	ldr	r3, [pc, #152]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801ad10:	2202      	movs	r2, #2
 801ad12:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801ad14:	4b24      	ldr	r3, [pc, #144]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801ad16:	2200      	movs	r2, #0
 801ad18:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801ad1a:	4b23      	ldr	r3, [pc, #140]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801ad1c:	8a9b      	ldrh	r3, [r3, #20]
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	d105      	bne.n	801ad2e <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ad22:	4b21      	ldr	r3, [pc, #132]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801ad24:	2200      	movs	r2, #0
 801ad26:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ad28:	4b1f      	ldr	r3, [pc, #124]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801ad2a:	2200      	movs	r2, #0
 801ad2c:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ad2e:	4b1e      	ldr	r3, [pc, #120]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801ad30:	789b      	ldrb	r3, [r3, #2]
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	d115      	bne.n	801ad62 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ad36:	4b1c      	ldr	r3, [pc, #112]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801ad38:	8a5a      	ldrh	r2, [r3, #18]
 801ad3a:	4b1b      	ldr	r3, [pc, #108]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801ad3c:	8a1b      	ldrh	r3, [r3, #16]
 801ad3e:	429a      	cmp	r2, r3
 801ad40:	d908      	bls.n	801ad54 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ad42:	4b19      	ldr	r3, [pc, #100]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801ad44:	8a5a      	ldrh	r2, [r3, #18]
 801ad46:	4b18      	ldr	r3, [pc, #96]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801ad48:	8a1b      	ldrh	r3, [r3, #16]
 801ad4a:	1ad3      	subs	r3, r2, r3
 801ad4c:	b29a      	uxth	r2, r3
 801ad4e:	4b16      	ldr	r3, [pc, #88]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801ad50:	829a      	strh	r2, [r3, #20]
 801ad52:	e006      	b.n	801ad62 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ad54:	4b14      	ldr	r3, [pc, #80]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801ad56:	8a1b      	ldrh	r3, [r3, #16]
 801ad58:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ad5c:	b29a      	uxth	r2, r3
 801ad5e:	4b12      	ldr	r3, [pc, #72]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801ad60:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ad62:	4b11      	ldr	r3, [pc, #68]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801ad64:	8a1b      	ldrh	r3, [r3, #16]
 801ad66:	461a      	mov	r2, r3
 801ad68:	4b10      	ldr	r3, [pc, #64]	; (801adac <TRACE_TxCpltCallback+0x110>)
 801ad6a:	4413      	add	r3, r2
 801ad6c:	61fb      	str	r3, [r7, #28]
 801ad6e:	69bb      	ldr	r3, [r7, #24]
 801ad70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad72:	693b      	ldr	r3, [r7, #16]
 801ad74:	f383 8810 	msr	PRIMASK, r3
}
 801ad78:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ad7a:	4b0d      	ldr	r3, [pc, #52]	; (801adb0 <TRACE_TxCpltCallback+0x114>)
 801ad7c:	68db      	ldr	r3, [r3, #12]
 801ad7e:	4a0a      	ldr	r2, [pc, #40]	; (801ada8 <TRACE_TxCpltCallback+0x10c>)
 801ad80:	8a92      	ldrh	r2, [r2, #20]
 801ad82:	4611      	mov	r1, r2
 801ad84:	69f8      	ldr	r0, [r7, #28]
 801ad86:	4798      	blx	r3
 801ad88:	e00a      	b.n	801ada0 <TRACE_TxCpltCallback+0x104>
 801ad8a:	69bb      	ldr	r3, [r7, #24]
 801ad8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad8e:	68fb      	ldr	r3, [r7, #12]
 801ad90:	f383 8810 	msr	PRIMASK, r3
}
 801ad94:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801ad96:	f7e6 ffa7 	bl	8001ce8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801ad9a:	f000 f8a7 	bl	801aeec <TRACE_UnLock>
  }
}
 801ad9e:	bf00      	nop
 801ada0:	bf00      	nop
 801ada2:	3720      	adds	r7, #32
 801ada4:	46bd      	mov	sp, r7
 801ada6:	bd80      	pop	{r7, pc}
 801ada8:	20001cfc 	.word	0x20001cfc
 801adac:	20001d14 	.word	0x20001d14
 801adb0:	0801b678 	.word	0x0801b678

0801adb4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801adb4:	b480      	push	{r7}
 801adb6:	b087      	sub	sp, #28
 801adb8:	af00      	add	r7, sp, #0
 801adba:	4603      	mov	r3, r0
 801adbc:	6039      	str	r1, [r7, #0]
 801adbe:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801adc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801adc4:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801adc6:	f3ef 8310 	mrs	r3, PRIMASK
 801adca:	60fb      	str	r3, [r7, #12]
  return(result);
 801adcc:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801adce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801add0:	b672      	cpsid	i
}
 801add2:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801add4:	4b35      	ldr	r3, [pc, #212]	; (801aeac <TRACE_AllocateBufer+0xf8>)
 801add6:	8a5a      	ldrh	r2, [r3, #18]
 801add8:	4b34      	ldr	r3, [pc, #208]	; (801aeac <TRACE_AllocateBufer+0xf8>)
 801adda:	8a1b      	ldrh	r3, [r3, #16]
 801addc:	429a      	cmp	r2, r3
 801adde:	d11b      	bne.n	801ae18 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801ade0:	4b32      	ldr	r3, [pc, #200]	; (801aeac <TRACE_AllocateBufer+0xf8>)
 801ade2:	8a5b      	ldrh	r3, [r3, #18]
 801ade4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ade8:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801adea:	88fa      	ldrh	r2, [r7, #6]
 801adec:	8afb      	ldrh	r3, [r7, #22]
 801adee:	429a      	cmp	r2, r3
 801adf0:	d33a      	bcc.n	801ae68 <TRACE_AllocateBufer+0xb4>
 801adf2:	4b2e      	ldr	r3, [pc, #184]	; (801aeac <TRACE_AllocateBufer+0xf8>)
 801adf4:	8a1b      	ldrh	r3, [r3, #16]
 801adf6:	88fa      	ldrh	r2, [r7, #6]
 801adf8:	429a      	cmp	r2, r3
 801adfa:	d235      	bcs.n	801ae68 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801adfc:	4b2b      	ldr	r3, [pc, #172]	; (801aeac <TRACE_AllocateBufer+0xf8>)
 801adfe:	2201      	movs	r2, #1
 801ae00:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801ae02:	4b2a      	ldr	r3, [pc, #168]	; (801aeac <TRACE_AllocateBufer+0xf8>)
 801ae04:	8a5a      	ldrh	r2, [r3, #18]
 801ae06:	4b29      	ldr	r3, [pc, #164]	; (801aeac <TRACE_AllocateBufer+0xf8>)
 801ae08:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801ae0a:	4b28      	ldr	r3, [pc, #160]	; (801aeac <TRACE_AllocateBufer+0xf8>)
 801ae0c:	8a1b      	ldrh	r3, [r3, #16]
 801ae0e:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801ae10:	4b26      	ldr	r3, [pc, #152]	; (801aeac <TRACE_AllocateBufer+0xf8>)
 801ae12:	2200      	movs	r2, #0
 801ae14:	825a      	strh	r2, [r3, #18]
 801ae16:	e027      	b.n	801ae68 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ae18:	4b24      	ldr	r3, [pc, #144]	; (801aeac <TRACE_AllocateBufer+0xf8>)
 801ae1a:	8a5a      	ldrh	r2, [r3, #18]
 801ae1c:	4b23      	ldr	r3, [pc, #140]	; (801aeac <TRACE_AllocateBufer+0xf8>)
 801ae1e:	8a1b      	ldrh	r3, [r3, #16]
 801ae20:	429a      	cmp	r2, r3
 801ae22:	d91b      	bls.n	801ae5c <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801ae24:	4b21      	ldr	r3, [pc, #132]	; (801aeac <TRACE_AllocateBufer+0xf8>)
 801ae26:	8a5b      	ldrh	r3, [r3, #18]
 801ae28:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ae2c:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801ae2e:	88fa      	ldrh	r2, [r7, #6]
 801ae30:	8afb      	ldrh	r3, [r7, #22]
 801ae32:	429a      	cmp	r2, r3
 801ae34:	d318      	bcc.n	801ae68 <TRACE_AllocateBufer+0xb4>
 801ae36:	4b1d      	ldr	r3, [pc, #116]	; (801aeac <TRACE_AllocateBufer+0xf8>)
 801ae38:	8a1b      	ldrh	r3, [r3, #16]
 801ae3a:	88fa      	ldrh	r2, [r7, #6]
 801ae3c:	429a      	cmp	r2, r3
 801ae3e:	d213      	bcs.n	801ae68 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801ae40:	4b1a      	ldr	r3, [pc, #104]	; (801aeac <TRACE_AllocateBufer+0xf8>)
 801ae42:	2201      	movs	r2, #1
 801ae44:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801ae46:	4b19      	ldr	r3, [pc, #100]	; (801aeac <TRACE_AllocateBufer+0xf8>)
 801ae48:	8a5a      	ldrh	r2, [r3, #18]
 801ae4a:	4b18      	ldr	r3, [pc, #96]	; (801aeac <TRACE_AllocateBufer+0xf8>)
 801ae4c:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801ae4e:	4b17      	ldr	r3, [pc, #92]	; (801aeac <TRACE_AllocateBufer+0xf8>)
 801ae50:	8a1b      	ldrh	r3, [r3, #16]
 801ae52:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801ae54:	4b15      	ldr	r3, [pc, #84]	; (801aeac <TRACE_AllocateBufer+0xf8>)
 801ae56:	2200      	movs	r2, #0
 801ae58:	825a      	strh	r2, [r3, #18]
 801ae5a:	e005      	b.n	801ae68 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801ae5c:	4b13      	ldr	r3, [pc, #76]	; (801aeac <TRACE_AllocateBufer+0xf8>)
 801ae5e:	8a1a      	ldrh	r2, [r3, #16]
 801ae60:	4b12      	ldr	r3, [pc, #72]	; (801aeac <TRACE_AllocateBufer+0xf8>)
 801ae62:	8a5b      	ldrh	r3, [r3, #18]
 801ae64:	1ad3      	subs	r3, r2, r3
 801ae66:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801ae68:	8afa      	ldrh	r2, [r7, #22]
 801ae6a:	88fb      	ldrh	r3, [r7, #6]
 801ae6c:	429a      	cmp	r2, r3
 801ae6e:	d90f      	bls.n	801ae90 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801ae70:	4b0e      	ldr	r3, [pc, #56]	; (801aeac <TRACE_AllocateBufer+0xf8>)
 801ae72:	8a5a      	ldrh	r2, [r3, #18]
 801ae74:	683b      	ldr	r3, [r7, #0]
 801ae76:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801ae78:	4b0c      	ldr	r3, [pc, #48]	; (801aeac <TRACE_AllocateBufer+0xf8>)
 801ae7a:	8a5a      	ldrh	r2, [r3, #18]
 801ae7c:	88fb      	ldrh	r3, [r7, #6]
 801ae7e:	4413      	add	r3, r2
 801ae80:	b29b      	uxth	r3, r3
 801ae82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ae86:	b29a      	uxth	r2, r3
 801ae88:	4b08      	ldr	r3, [pc, #32]	; (801aeac <TRACE_AllocateBufer+0xf8>)
 801ae8a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801ae8c:	2300      	movs	r3, #0
 801ae8e:	82bb      	strh	r3, [r7, #20]
 801ae90:	693b      	ldr	r3, [r7, #16]
 801ae92:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae94:	68bb      	ldr	r3, [r7, #8]
 801ae96:	f383 8810 	msr	PRIMASK, r3
}
 801ae9a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801ae9c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801aea0:	4618      	mov	r0, r3
 801aea2:	371c      	adds	r7, #28
 801aea4:	46bd      	mov	sp, r7
 801aea6:	bc80      	pop	{r7}
 801aea8:	4770      	bx	lr
 801aeaa:	bf00      	nop
 801aeac:	20001cfc 	.word	0x20001cfc

0801aeb0 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801aeb0:	b480      	push	{r7}
 801aeb2:	b085      	sub	sp, #20
 801aeb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aeb6:	f3ef 8310 	mrs	r3, PRIMASK
 801aeba:	607b      	str	r3, [r7, #4]
  return(result);
 801aebc:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801aebe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801aec0:	b672      	cpsid	i
}
 801aec2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801aec4:	4b08      	ldr	r3, [pc, #32]	; (801aee8 <TRACE_Lock+0x38>)
 801aec6:	8adb      	ldrh	r3, [r3, #22]
 801aec8:	3301      	adds	r3, #1
 801aeca:	b29a      	uxth	r2, r3
 801aecc:	4b06      	ldr	r3, [pc, #24]	; (801aee8 <TRACE_Lock+0x38>)
 801aece:	82da      	strh	r2, [r3, #22]
 801aed0:	68fb      	ldr	r3, [r7, #12]
 801aed2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aed4:	68bb      	ldr	r3, [r7, #8]
 801aed6:	f383 8810 	msr	PRIMASK, r3
}
 801aeda:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801aedc:	bf00      	nop
 801aede:	3714      	adds	r7, #20
 801aee0:	46bd      	mov	sp, r7
 801aee2:	bc80      	pop	{r7}
 801aee4:	4770      	bx	lr
 801aee6:	bf00      	nop
 801aee8:	20001cfc 	.word	0x20001cfc

0801aeec <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801aeec:	b480      	push	{r7}
 801aeee:	b085      	sub	sp, #20
 801aef0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aef2:	f3ef 8310 	mrs	r3, PRIMASK
 801aef6:	607b      	str	r3, [r7, #4]
  return(result);
 801aef8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801aefa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801aefc:	b672      	cpsid	i
}
 801aefe:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801af00:	4b08      	ldr	r3, [pc, #32]	; (801af24 <TRACE_UnLock+0x38>)
 801af02:	8adb      	ldrh	r3, [r3, #22]
 801af04:	3b01      	subs	r3, #1
 801af06:	b29a      	uxth	r2, r3
 801af08:	4b06      	ldr	r3, [pc, #24]	; (801af24 <TRACE_UnLock+0x38>)
 801af0a:	82da      	strh	r2, [r3, #22]
 801af0c:	68fb      	ldr	r3, [r7, #12]
 801af0e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af10:	68bb      	ldr	r3, [r7, #8]
 801af12:	f383 8810 	msr	PRIMASK, r3
}
 801af16:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801af18:	bf00      	nop
 801af1a:	3714      	adds	r7, #20
 801af1c:	46bd      	mov	sp, r7
 801af1e:	bc80      	pop	{r7}
 801af20:	4770      	bx	lr
 801af22:	bf00      	nop
 801af24:	20001cfc 	.word	0x20001cfc

0801af28 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801af28:	b480      	push	{r7}
 801af2a:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801af2c:	4b05      	ldr	r3, [pc, #20]	; (801af44 <TRACE_IsLocked+0x1c>)
 801af2e:	8adb      	ldrh	r3, [r3, #22]
 801af30:	2b00      	cmp	r3, #0
 801af32:	bf14      	ite	ne
 801af34:	2301      	movne	r3, #1
 801af36:	2300      	moveq	r3, #0
 801af38:	b2db      	uxtb	r3, r3
}
 801af3a:	4618      	mov	r0, r3
 801af3c:	46bd      	mov	sp, r7
 801af3e:	bc80      	pop	{r7}
 801af40:	4770      	bx	lr
 801af42:	bf00      	nop
 801af44:	20001cfc 	.word	0x20001cfc

0801af48 <__libc_init_array>:
 801af48:	b570      	push	{r4, r5, r6, lr}
 801af4a:	4d0d      	ldr	r5, [pc, #52]	; (801af80 <__libc_init_array+0x38>)
 801af4c:	4c0d      	ldr	r4, [pc, #52]	; (801af84 <__libc_init_array+0x3c>)
 801af4e:	1b64      	subs	r4, r4, r5
 801af50:	10a4      	asrs	r4, r4, #2
 801af52:	2600      	movs	r6, #0
 801af54:	42a6      	cmp	r6, r4
 801af56:	d109      	bne.n	801af6c <__libc_init_array+0x24>
 801af58:	4d0b      	ldr	r5, [pc, #44]	; (801af88 <__libc_init_array+0x40>)
 801af5a:	4c0c      	ldr	r4, [pc, #48]	; (801af8c <__libc_init_array+0x44>)
 801af5c:	f000 f8a0 	bl	801b0a0 <_init>
 801af60:	1b64      	subs	r4, r4, r5
 801af62:	10a4      	asrs	r4, r4, #2
 801af64:	2600      	movs	r6, #0
 801af66:	42a6      	cmp	r6, r4
 801af68:	d105      	bne.n	801af76 <__libc_init_array+0x2e>
 801af6a:	bd70      	pop	{r4, r5, r6, pc}
 801af6c:	f855 3b04 	ldr.w	r3, [r5], #4
 801af70:	4798      	blx	r3
 801af72:	3601      	adds	r6, #1
 801af74:	e7ee      	b.n	801af54 <__libc_init_array+0xc>
 801af76:	f855 3b04 	ldr.w	r3, [r5], #4
 801af7a:	4798      	blx	r3
 801af7c:	3601      	adds	r6, #1
 801af7e:	e7f2      	b.n	801af66 <__libc_init_array+0x1e>
 801af80:	0801bc08 	.word	0x0801bc08
 801af84:	0801bc08 	.word	0x0801bc08
 801af88:	0801bc08 	.word	0x0801bc08
 801af8c:	0801bc0c 	.word	0x0801bc0c

0801af90 <memset>:
 801af90:	4402      	add	r2, r0
 801af92:	4603      	mov	r3, r0
 801af94:	4293      	cmp	r3, r2
 801af96:	d100      	bne.n	801af9a <memset+0xa>
 801af98:	4770      	bx	lr
 801af9a:	f803 1b01 	strb.w	r1, [r3], #1
 801af9e:	e7f9      	b.n	801af94 <memset+0x4>

0801afa0 <floor>:
 801afa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801afa4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801afa8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801afac:	2e13      	cmp	r6, #19
 801afae:	4602      	mov	r2, r0
 801afb0:	460b      	mov	r3, r1
 801afb2:	4607      	mov	r7, r0
 801afb4:	460c      	mov	r4, r1
 801afb6:	4605      	mov	r5, r0
 801afb8:	dc33      	bgt.n	801b022 <floor+0x82>
 801afba:	2e00      	cmp	r6, #0
 801afbc:	da14      	bge.n	801afe8 <floor+0x48>
 801afbe:	a334      	add	r3, pc, #208	; (adr r3, 801b090 <floor+0xf0>)
 801afc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afc4:	f7e5 f8e6 	bl	8000194 <__adddf3>
 801afc8:	2200      	movs	r2, #0
 801afca:	2300      	movs	r3, #0
 801afcc:	f7e5 fb16 	bl	80005fc <__aeabi_dcmpgt>
 801afd0:	b138      	cbz	r0, 801afe2 <floor+0x42>
 801afd2:	2c00      	cmp	r4, #0
 801afd4:	da58      	bge.n	801b088 <floor+0xe8>
 801afd6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801afda:	431d      	orrs	r5, r3
 801afdc:	d001      	beq.n	801afe2 <floor+0x42>
 801afde:	4c2e      	ldr	r4, [pc, #184]	; (801b098 <floor+0xf8>)
 801afe0:	2500      	movs	r5, #0
 801afe2:	4623      	mov	r3, r4
 801afe4:	462f      	mov	r7, r5
 801afe6:	e025      	b.n	801b034 <floor+0x94>
 801afe8:	4a2c      	ldr	r2, [pc, #176]	; (801b09c <floor+0xfc>)
 801afea:	fa42 f806 	asr.w	r8, r2, r6
 801afee:	ea01 0208 	and.w	r2, r1, r8
 801aff2:	4302      	orrs	r2, r0
 801aff4:	d01e      	beq.n	801b034 <floor+0x94>
 801aff6:	a326      	add	r3, pc, #152	; (adr r3, 801b090 <floor+0xf0>)
 801aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801affc:	f7e5 f8ca 	bl	8000194 <__adddf3>
 801b000:	2200      	movs	r2, #0
 801b002:	2300      	movs	r3, #0
 801b004:	f7e5 fafa 	bl	80005fc <__aeabi_dcmpgt>
 801b008:	2800      	cmp	r0, #0
 801b00a:	d0ea      	beq.n	801afe2 <floor+0x42>
 801b00c:	2c00      	cmp	r4, #0
 801b00e:	bfbe      	ittt	lt
 801b010:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b014:	fa43 f606 	asrlt.w	r6, r3, r6
 801b018:	19a4      	addlt	r4, r4, r6
 801b01a:	ea24 0408 	bic.w	r4, r4, r8
 801b01e:	2500      	movs	r5, #0
 801b020:	e7df      	b.n	801afe2 <floor+0x42>
 801b022:	2e33      	cmp	r6, #51	; 0x33
 801b024:	dd0a      	ble.n	801b03c <floor+0x9c>
 801b026:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b02a:	d103      	bne.n	801b034 <floor+0x94>
 801b02c:	f7e5 f8b2 	bl	8000194 <__adddf3>
 801b030:	4607      	mov	r7, r0
 801b032:	460b      	mov	r3, r1
 801b034:	4638      	mov	r0, r7
 801b036:	4619      	mov	r1, r3
 801b038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b03c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801b040:	f04f 32ff 	mov.w	r2, #4294967295
 801b044:	fa22 f808 	lsr.w	r8, r2, r8
 801b048:	ea18 0f00 	tst.w	r8, r0
 801b04c:	d0f2      	beq.n	801b034 <floor+0x94>
 801b04e:	a310      	add	r3, pc, #64	; (adr r3, 801b090 <floor+0xf0>)
 801b050:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b054:	f7e5 f89e 	bl	8000194 <__adddf3>
 801b058:	2200      	movs	r2, #0
 801b05a:	2300      	movs	r3, #0
 801b05c:	f7e5 face 	bl	80005fc <__aeabi_dcmpgt>
 801b060:	2800      	cmp	r0, #0
 801b062:	d0be      	beq.n	801afe2 <floor+0x42>
 801b064:	2c00      	cmp	r4, #0
 801b066:	da02      	bge.n	801b06e <floor+0xce>
 801b068:	2e14      	cmp	r6, #20
 801b06a:	d103      	bne.n	801b074 <floor+0xd4>
 801b06c:	3401      	adds	r4, #1
 801b06e:	ea25 0508 	bic.w	r5, r5, r8
 801b072:	e7b6      	b.n	801afe2 <floor+0x42>
 801b074:	2301      	movs	r3, #1
 801b076:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b07a:	fa03 f606 	lsl.w	r6, r3, r6
 801b07e:	4435      	add	r5, r6
 801b080:	42bd      	cmp	r5, r7
 801b082:	bf38      	it	cc
 801b084:	18e4      	addcc	r4, r4, r3
 801b086:	e7f2      	b.n	801b06e <floor+0xce>
 801b088:	2500      	movs	r5, #0
 801b08a:	462c      	mov	r4, r5
 801b08c:	e7a9      	b.n	801afe2 <floor+0x42>
 801b08e:	bf00      	nop
 801b090:	8800759c 	.word	0x8800759c
 801b094:	7e37e43c 	.word	0x7e37e43c
 801b098:	bff00000 	.word	0xbff00000
 801b09c:	000fffff 	.word	0x000fffff

0801b0a0 <_init>:
 801b0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0a2:	bf00      	nop
 801b0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b0a6:	bc08      	pop	{r3}
 801b0a8:	469e      	mov	lr, r3
 801b0aa:	4770      	bx	lr

0801b0ac <_fini>:
 801b0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0ae:	bf00      	nop
 801b0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b0b2:	bc08      	pop	{r3}
 801b0b4:	469e      	mov	lr, r3
 801b0b6:	4770      	bx	lr
