
LoRa-E5_weather_and_pollution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f158  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa0  0801f290  0801f290  0002f290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801fd30  0801fd30  0002fd30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801fdf0  0801fdf0  00030584  2**0
                  CONTENTS
  5 .ARM          00000008  0801fdf0  0801fdf0  0002fdf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801fdf8  0801fdf8  00030584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  0801fdf8  0801fdf8  0002fdf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801fe00  0801fe00  0002fe00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000584  20000000  0801fe04  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002528  20000584  08020388  00030584  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002aac  08020388  00032aac  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030584  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004e73a  00000000  00000000  000305ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b22c  00000000  00000000  0007ece8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003c48  00000000  00000000  00089f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000037e0  00000000  00000000  0008db60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a1ce  00000000  00000000  00091340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00046abc  00000000  00000000  000bb50e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7249  00000000  00000000  00101fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001d9213  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000fd90  00000000  00000000  001d9264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000584 	.word	0x20000584
 8000154:	00000000 	.word	0x00000000
 8000158:	0801f278 	.word	0x0801f278

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000588 	.word	0x20000588
 8000174:	0801f278 	.word	0x0801f278

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_fmul>:
 8000d40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d48:	bf1e      	ittt	ne
 8000d4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4e:	ea92 0f0c 	teqne	r2, ip
 8000d52:	ea93 0f0c 	teqne	r3, ip
 8000d56:	d06f      	beq.n	8000e38 <__aeabi_fmul+0xf8>
 8000d58:	441a      	add	r2, r3
 8000d5a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5e:	0240      	lsls	r0, r0, #9
 8000d60:	bf18      	it	ne
 8000d62:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d66:	d01e      	beq.n	8000da6 <__aeabi_fmul+0x66>
 8000d68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d6c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d70:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d74:	fba0 3101 	umull	r3, r1, r0, r1
 8000d78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d7c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d80:	bf3e      	ittt	cc
 8000d82:	0049      	lslcc	r1, r1, #1
 8000d84:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d88:	005b      	lslcc	r3, r3, #1
 8000d8a:	ea40 0001 	orr.w	r0, r0, r1
 8000d8e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d92:	2afd      	cmp	r2, #253	; 0xfd
 8000d94:	d81d      	bhi.n	8000dd2 <__aeabi_fmul+0x92>
 8000d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9e:	bf08      	it	eq
 8000da0:	f020 0001 	biceq.w	r0, r0, #1
 8000da4:	4770      	bx	lr
 8000da6:	f090 0f00 	teq	r0, #0
 8000daa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dae:	bf08      	it	eq
 8000db0:	0249      	lsleq	r1, r1, #9
 8000db2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dba:	3a7f      	subs	r2, #127	; 0x7f
 8000dbc:	bfc2      	ittt	gt
 8000dbe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc6:	4770      	bxgt	lr
 8000dc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	3a01      	subs	r2, #1
 8000dd2:	dc5d      	bgt.n	8000e90 <__aeabi_fmul+0x150>
 8000dd4:	f112 0f19 	cmn.w	r2, #25
 8000dd8:	bfdc      	itt	le
 8000dda:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dde:	4770      	bxle	lr
 8000de0:	f1c2 0200 	rsb	r2, r2, #0
 8000de4:	0041      	lsls	r1, r0, #1
 8000de6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dea:	f1c2 0220 	rsb	r2, r2, #32
 8000dee:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000df6:	f140 0000 	adc.w	r0, r0, #0
 8000dfa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dfe:	bf08      	it	eq
 8000e00:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e04:	4770      	bx	lr
 8000e06:	f092 0f00 	teq	r2, #0
 8000e0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e0e:	bf02      	ittt	eq
 8000e10:	0040      	lsleq	r0, r0, #1
 8000e12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e16:	3a01      	subeq	r2, #1
 8000e18:	d0f9      	beq.n	8000e0e <__aeabi_fmul+0xce>
 8000e1a:	ea40 000c 	orr.w	r0, r0, ip
 8000e1e:	f093 0f00 	teq	r3, #0
 8000e22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0049      	lsleq	r1, r1, #1
 8000e2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e2e:	3b01      	subeq	r3, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xe6>
 8000e32:	ea41 010c 	orr.w	r1, r1, ip
 8000e36:	e78f      	b.n	8000d58 <__aeabi_fmul+0x18>
 8000e38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	bf18      	it	ne
 8000e42:	ea93 0f0c 	teqne	r3, ip
 8000e46:	d00a      	beq.n	8000e5e <__aeabi_fmul+0x11e>
 8000e48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e4c:	bf18      	it	ne
 8000e4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	d1d8      	bne.n	8000e06 <__aeabi_fmul+0xc6>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	4770      	bx	lr
 8000e5e:	f090 0f00 	teq	r0, #0
 8000e62:	bf17      	itett	ne
 8000e64:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e68:	4608      	moveq	r0, r1
 8000e6a:	f091 0f00 	teqne	r1, #0
 8000e6e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e72:	d014      	beq.n	8000e9e <__aeabi_fmul+0x15e>
 8000e74:	ea92 0f0c 	teq	r2, ip
 8000e78:	d101      	bne.n	8000e7e <__aeabi_fmul+0x13e>
 8000e7a:	0242      	lsls	r2, r0, #9
 8000e7c:	d10f      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e7e:	ea93 0f0c 	teq	r3, ip
 8000e82:	d103      	bne.n	8000e8c <__aeabi_fmul+0x14c>
 8000e84:	024b      	lsls	r3, r1, #9
 8000e86:	bf18      	it	ne
 8000e88:	4608      	movne	r0, r1
 8000e8a:	d108      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e8c:	ea80 0001 	eor.w	r0, r0, r1
 8000e90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9c:	4770      	bx	lr
 8000e9e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ea6:	4770      	bx	lr

08000ea8 <__aeabi_fdiv>:
 8000ea8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb0:	bf1e      	ittt	ne
 8000eb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb6:	ea92 0f0c 	teqne	r2, ip
 8000eba:	ea93 0f0c 	teqne	r3, ip
 8000ebe:	d069      	beq.n	8000f94 <__aeabi_fdiv+0xec>
 8000ec0:	eba2 0203 	sub.w	r2, r2, r3
 8000ec4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec8:	0249      	lsls	r1, r1, #9
 8000eca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ece:	d037      	beq.n	8000f40 <__aeabi_fdiv+0x98>
 8000ed0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000edc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	bf38      	it	cc
 8000ee4:	005b      	lslcc	r3, r3, #1
 8000ee6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	bf24      	itt	cs
 8000ef2:	1a5b      	subcs	r3, r3, r1
 8000ef4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f02:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f06:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0a:	bf24      	itt	cs
 8000f0c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f14:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f18:	bf24      	itt	cs
 8000f1a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f1e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	bf18      	it	ne
 8000f26:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2a:	d1e0      	bne.n	8000eee <__aeabi_fdiv+0x46>
 8000f2c:	2afd      	cmp	r2, #253	; 0xfd
 8000f2e:	f63f af50 	bhi.w	8000dd2 <__aeabi_fmul+0x92>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f38:	bf08      	it	eq
 8000f3a:	f020 0001 	biceq.w	r0, r0, #1
 8000f3e:	4770      	bx	lr
 8000f40:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f44:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f48:	327f      	adds	r2, #127	; 0x7f
 8000f4a:	bfc2      	ittt	gt
 8000f4c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f50:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f54:	4770      	bxgt	lr
 8000f56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5a:	f04f 0300 	mov.w	r3, #0
 8000f5e:	3a01      	subs	r2, #1
 8000f60:	e737      	b.n	8000dd2 <__aeabi_fmul+0x92>
 8000f62:	f092 0f00 	teq	r2, #0
 8000f66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6a:	bf02      	ittt	eq
 8000f6c:	0040      	lsleq	r0, r0, #1
 8000f6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f72:	3a01      	subeq	r2, #1
 8000f74:	d0f9      	beq.n	8000f6a <__aeabi_fdiv+0xc2>
 8000f76:	ea40 000c 	orr.w	r0, r0, ip
 8000f7a:	f093 0f00 	teq	r3, #0
 8000f7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0049      	lsleq	r1, r1, #1
 8000f86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8a:	3b01      	subeq	r3, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xda>
 8000f8e:	ea41 010c 	orr.w	r1, r1, ip
 8000f92:	e795      	b.n	8000ec0 <__aeabi_fdiv+0x18>
 8000f94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f98:	ea92 0f0c 	teq	r2, ip
 8000f9c:	d108      	bne.n	8000fb0 <__aeabi_fdiv+0x108>
 8000f9e:	0242      	lsls	r2, r0, #9
 8000fa0:	f47f af7d 	bne.w	8000e9e <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	f47f af70 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e776      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fb0:	ea93 0f0c 	teq	r3, ip
 8000fb4:	d104      	bne.n	8000fc0 <__aeabi_fdiv+0x118>
 8000fb6:	024b      	lsls	r3, r1, #9
 8000fb8:	f43f af4c 	beq.w	8000e54 <__aeabi_fmul+0x114>
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	e76e      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc4:	bf18      	it	ne
 8000fc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fca:	d1ca      	bne.n	8000f62 <__aeabi_fdiv+0xba>
 8000fcc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd0:	f47f af5c 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fd4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fd8:	f47f af3c 	bne.w	8000e54 <__aeabi_fmul+0x114>
 8000fdc:	e75f      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fde:	bf00      	nop

08000fe0 <__gesf2>:
 8000fe0:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe4:	e006      	b.n	8000ff4 <__cmpsf2+0x4>
 8000fe6:	bf00      	nop

08000fe8 <__lesf2>:
 8000fe8:	f04f 0c01 	mov.w	ip, #1
 8000fec:	e002      	b.n	8000ff4 <__cmpsf2+0x4>
 8000fee:	bf00      	nop

08000ff0 <__cmpsf2>:
 8000ff0:	f04f 0c01 	mov.w	ip, #1
 8000ff4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ffc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001000:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001004:	bf18      	it	ne
 8001006:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100a:	d011      	beq.n	8001030 <__cmpsf2+0x40>
 800100c:	b001      	add	sp, #4
 800100e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001012:	bf18      	it	ne
 8001014:	ea90 0f01 	teqne	r0, r1
 8001018:	bf58      	it	pl
 800101a:	ebb2 0003 	subspl.w	r0, r2, r3
 800101e:	bf88      	it	hi
 8001020:	17c8      	asrhi	r0, r1, #31
 8001022:	bf38      	it	cc
 8001024:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001028:	bf18      	it	ne
 800102a:	f040 0001 	orrne.w	r0, r0, #1
 800102e:	4770      	bx	lr
 8001030:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001034:	d102      	bne.n	800103c <__cmpsf2+0x4c>
 8001036:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103a:	d105      	bne.n	8001048 <__cmpsf2+0x58>
 800103c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001040:	d1e4      	bne.n	800100c <__cmpsf2+0x1c>
 8001042:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001046:	d0e1      	beq.n	800100c <__cmpsf2+0x1c>
 8001048:	f85d 0b04 	ldr.w	r0, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <__aeabi_cfrcmple>:
 8001050:	4684      	mov	ip, r0
 8001052:	4608      	mov	r0, r1
 8001054:	4661      	mov	r1, ip
 8001056:	e7ff      	b.n	8001058 <__aeabi_cfcmpeq>

08001058 <__aeabi_cfcmpeq>:
 8001058:	b50f      	push	{r0, r1, r2, r3, lr}
 800105a:	f7ff ffc9 	bl	8000ff0 <__cmpsf2>
 800105e:	2800      	cmp	r0, #0
 8001060:	bf48      	it	mi
 8001062:	f110 0f00 	cmnmi.w	r0, #0
 8001066:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001068 <__aeabi_fcmpeq>:
 8001068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800106c:	f7ff fff4 	bl	8001058 <__aeabi_cfcmpeq>
 8001070:	bf0c      	ite	eq
 8001072:	2001      	moveq	r0, #1
 8001074:	2000      	movne	r0, #0
 8001076:	f85d fb08 	ldr.w	pc, [sp], #8
 800107a:	bf00      	nop

0800107c <__aeabi_fcmplt>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff ffea 	bl	8001058 <__aeabi_cfcmpeq>
 8001084:	bf34      	ite	cc
 8001086:	2001      	movcc	r0, #1
 8001088:	2000      	movcs	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <__aeabi_fcmple>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff ffe0 	bl	8001058 <__aeabi_cfcmpeq>
 8001098:	bf94      	ite	ls
 800109a:	2001      	movls	r0, #1
 800109c:	2000      	movhi	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_fcmpge>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff ffd2 	bl	8001050 <__aeabi_cfrcmple>
 80010ac:	bf94      	ite	ls
 80010ae:	2001      	movls	r0, #1
 80010b0:	2000      	movhi	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_fcmpgt>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff ffc8 	bl	8001050 <__aeabi_cfrcmple>
 80010c0:	bf34      	ite	cc
 80010c2:	2001      	movcc	r0, #1
 80010c4:	2000      	movcs	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_f2iz>:
 80010cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d4:	d30f      	bcc.n	80010f6 <__aeabi_f2iz+0x2a>
 80010d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010de:	d90d      	bls.n	80010fc <__aeabi_f2iz+0x30>
 80010e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	bf18      	it	ne
 80010f2:	4240      	negne	r0, r0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0000 	mov.w	r0, #0
 80010fa:	4770      	bx	lr
 80010fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001100:	d101      	bne.n	8001106 <__aeabi_f2iz+0x3a>
 8001102:	0242      	lsls	r2, r0, #9
 8001104:	d105      	bne.n	8001112 <__aeabi_f2iz+0x46>
 8001106:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110a:	bf08      	it	eq
 800110c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001110:	4770      	bx	lr
 8001112:	f04f 0000 	mov.w	r0, #0
 8001116:	4770      	bx	lr

08001118 <__aeabi_f2uiz>:
 8001118:	0042      	lsls	r2, r0, #1
 800111a:	d20e      	bcs.n	800113a <__aeabi_f2uiz+0x22>
 800111c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001120:	d30b      	bcc.n	800113a <__aeabi_f2uiz+0x22>
 8001122:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001126:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112a:	d409      	bmi.n	8001140 <__aeabi_f2uiz+0x28>
 800112c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001130:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001134:	fa23 f002 	lsr.w	r0, r3, r2
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2uiz+0x32>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d102      	bne.n	8001150 <__aeabi_f2uiz+0x38>
 800114a:	f04f 30ff 	mov.w	r0, #4294967295
 800114e:	4770      	bx	lr
 8001150:	f04f 0000 	mov.w	r0, #0
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop

08001158 <__aeabi_uldivmod>:
 8001158:	b953      	cbnz	r3, 8001170 <__aeabi_uldivmod+0x18>
 800115a:	b94a      	cbnz	r2, 8001170 <__aeabi_uldivmod+0x18>
 800115c:	2900      	cmp	r1, #0
 800115e:	bf08      	it	eq
 8001160:	2800      	cmpeq	r0, #0
 8001162:	bf1c      	itt	ne
 8001164:	f04f 31ff 	movne.w	r1, #4294967295
 8001168:	f04f 30ff 	movne.w	r0, #4294967295
 800116c:	f000 b974 	b.w	8001458 <__aeabi_idiv0>
 8001170:	f1ad 0c08 	sub.w	ip, sp, #8
 8001174:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001178:	f000 f806 	bl	8001188 <__udivmoddi4>
 800117c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001184:	b004      	add	sp, #16
 8001186:	4770      	bx	lr

08001188 <__udivmoddi4>:
 8001188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800118c:	9e08      	ldr	r6, [sp, #32]
 800118e:	460d      	mov	r5, r1
 8001190:	4604      	mov	r4, r0
 8001192:	4688      	mov	r8, r1
 8001194:	2b00      	cmp	r3, #0
 8001196:	d14d      	bne.n	8001234 <__udivmoddi4+0xac>
 8001198:	428a      	cmp	r2, r1
 800119a:	4694      	mov	ip, r2
 800119c:	d968      	bls.n	8001270 <__udivmoddi4+0xe8>
 800119e:	fab2 f282 	clz	r2, r2
 80011a2:	b152      	cbz	r2, 80011ba <__udivmoddi4+0x32>
 80011a4:	fa01 f302 	lsl.w	r3, r1, r2
 80011a8:	f1c2 0120 	rsb	r1, r2, #32
 80011ac:	fa20 f101 	lsr.w	r1, r0, r1
 80011b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80011b4:	ea41 0803 	orr.w	r8, r1, r3
 80011b8:	4094      	lsls	r4, r2
 80011ba:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80011be:	0c21      	lsrs	r1, r4, #16
 80011c0:	fbb8 fef5 	udiv	lr, r8, r5
 80011c4:	fa1f f78c 	uxth.w	r7, ip
 80011c8:	fb05 831e 	mls	r3, r5, lr, r8
 80011cc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80011d0:	fb0e f107 	mul.w	r1, lr, r7
 80011d4:	4299      	cmp	r1, r3
 80011d6:	d90b      	bls.n	80011f0 <__udivmoddi4+0x68>
 80011d8:	eb1c 0303 	adds.w	r3, ip, r3
 80011dc:	f10e 30ff 	add.w	r0, lr, #4294967295
 80011e0:	f080 811e 	bcs.w	8001420 <__udivmoddi4+0x298>
 80011e4:	4299      	cmp	r1, r3
 80011e6:	f240 811b 	bls.w	8001420 <__udivmoddi4+0x298>
 80011ea:	f1ae 0e02 	sub.w	lr, lr, #2
 80011ee:	4463      	add	r3, ip
 80011f0:	1a5b      	subs	r3, r3, r1
 80011f2:	b2a4      	uxth	r4, r4
 80011f4:	fbb3 f0f5 	udiv	r0, r3, r5
 80011f8:	fb05 3310 	mls	r3, r5, r0, r3
 80011fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001200:	fb00 f707 	mul.w	r7, r0, r7
 8001204:	42a7      	cmp	r7, r4
 8001206:	d90a      	bls.n	800121e <__udivmoddi4+0x96>
 8001208:	eb1c 0404 	adds.w	r4, ip, r4
 800120c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001210:	f080 8108 	bcs.w	8001424 <__udivmoddi4+0x29c>
 8001214:	42a7      	cmp	r7, r4
 8001216:	f240 8105 	bls.w	8001424 <__udivmoddi4+0x29c>
 800121a:	4464      	add	r4, ip
 800121c:	3802      	subs	r0, #2
 800121e:	1be4      	subs	r4, r4, r7
 8001220:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8001224:	2100      	movs	r1, #0
 8001226:	b11e      	cbz	r6, 8001230 <__udivmoddi4+0xa8>
 8001228:	40d4      	lsrs	r4, r2
 800122a:	2300      	movs	r3, #0
 800122c:	e9c6 4300 	strd	r4, r3, [r6]
 8001230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001234:	428b      	cmp	r3, r1
 8001236:	d908      	bls.n	800124a <__udivmoddi4+0xc2>
 8001238:	2e00      	cmp	r6, #0
 800123a:	f000 80ee 	beq.w	800141a <__udivmoddi4+0x292>
 800123e:	2100      	movs	r1, #0
 8001240:	e9c6 0500 	strd	r0, r5, [r6]
 8001244:	4608      	mov	r0, r1
 8001246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800124a:	fab3 f183 	clz	r1, r3
 800124e:	2900      	cmp	r1, #0
 8001250:	d14a      	bne.n	80012e8 <__udivmoddi4+0x160>
 8001252:	42ab      	cmp	r3, r5
 8001254:	d302      	bcc.n	800125c <__udivmoddi4+0xd4>
 8001256:	4282      	cmp	r2, r0
 8001258:	f200 80f9 	bhi.w	800144e <__udivmoddi4+0x2c6>
 800125c:	1a84      	subs	r4, r0, r2
 800125e:	eb65 0303 	sbc.w	r3, r5, r3
 8001262:	2001      	movs	r0, #1
 8001264:	4698      	mov	r8, r3
 8001266:	2e00      	cmp	r6, #0
 8001268:	d0e2      	beq.n	8001230 <__udivmoddi4+0xa8>
 800126a:	e9c6 4800 	strd	r4, r8, [r6]
 800126e:	e7df      	b.n	8001230 <__udivmoddi4+0xa8>
 8001270:	b902      	cbnz	r2, 8001274 <__udivmoddi4+0xec>
 8001272:	deff      	udf	#255	; 0xff
 8001274:	fab2 f282 	clz	r2, r2
 8001278:	2a00      	cmp	r2, #0
 800127a:	f040 8091 	bne.w	80013a0 <__udivmoddi4+0x218>
 800127e:	eba1 050c 	sub.w	r5, r1, ip
 8001282:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001286:	fa1f fe8c 	uxth.w	lr, ip
 800128a:	2101      	movs	r1, #1
 800128c:	fbb5 f3f7 	udiv	r3, r5, r7
 8001290:	fb07 5013 	mls	r0, r7, r3, r5
 8001294:	0c25      	lsrs	r5, r4, #16
 8001296:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800129a:	fb0e f003 	mul.w	r0, lr, r3
 800129e:	42a8      	cmp	r0, r5
 80012a0:	d908      	bls.n	80012b4 <__udivmoddi4+0x12c>
 80012a2:	eb1c 0505 	adds.w	r5, ip, r5
 80012a6:	f103 38ff 	add.w	r8, r3, #4294967295
 80012aa:	d202      	bcs.n	80012b2 <__udivmoddi4+0x12a>
 80012ac:	42a8      	cmp	r0, r5
 80012ae:	f200 80cb 	bhi.w	8001448 <__udivmoddi4+0x2c0>
 80012b2:	4643      	mov	r3, r8
 80012b4:	1a2d      	subs	r5, r5, r0
 80012b6:	b2a4      	uxth	r4, r4
 80012b8:	fbb5 f0f7 	udiv	r0, r5, r7
 80012bc:	fb07 5510 	mls	r5, r7, r0, r5
 80012c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012c4:	fb0e fe00 	mul.w	lr, lr, r0
 80012c8:	45a6      	cmp	lr, r4
 80012ca:	d908      	bls.n	80012de <__udivmoddi4+0x156>
 80012cc:	eb1c 0404 	adds.w	r4, ip, r4
 80012d0:	f100 35ff 	add.w	r5, r0, #4294967295
 80012d4:	d202      	bcs.n	80012dc <__udivmoddi4+0x154>
 80012d6:	45a6      	cmp	lr, r4
 80012d8:	f200 80bb 	bhi.w	8001452 <__udivmoddi4+0x2ca>
 80012dc:	4628      	mov	r0, r5
 80012de:	eba4 040e 	sub.w	r4, r4, lr
 80012e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012e6:	e79e      	b.n	8001226 <__udivmoddi4+0x9e>
 80012e8:	f1c1 0720 	rsb	r7, r1, #32
 80012ec:	408b      	lsls	r3, r1
 80012ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80012f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80012f6:	fa20 f407 	lsr.w	r4, r0, r7
 80012fa:	fa05 f301 	lsl.w	r3, r5, r1
 80012fe:	431c      	orrs	r4, r3
 8001300:	40fd      	lsrs	r5, r7
 8001302:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001306:	fa00 f301 	lsl.w	r3, r0, r1
 800130a:	fbb5 f8f9 	udiv	r8, r5, r9
 800130e:	0c20      	lsrs	r0, r4, #16
 8001310:	fa1f fe8c 	uxth.w	lr, ip
 8001314:	fb09 5518 	mls	r5, r9, r8, r5
 8001318:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800131c:	fb08 f00e 	mul.w	r0, r8, lr
 8001320:	42a8      	cmp	r0, r5
 8001322:	fa02 f201 	lsl.w	r2, r2, r1
 8001326:	d90b      	bls.n	8001340 <__udivmoddi4+0x1b8>
 8001328:	eb1c 0505 	adds.w	r5, ip, r5
 800132c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001330:	f080 8088 	bcs.w	8001444 <__udivmoddi4+0x2bc>
 8001334:	42a8      	cmp	r0, r5
 8001336:	f240 8085 	bls.w	8001444 <__udivmoddi4+0x2bc>
 800133a:	f1a8 0802 	sub.w	r8, r8, #2
 800133e:	4465      	add	r5, ip
 8001340:	1a2d      	subs	r5, r5, r0
 8001342:	b2a4      	uxth	r4, r4
 8001344:	fbb5 f0f9 	udiv	r0, r5, r9
 8001348:	fb09 5510 	mls	r5, r9, r0, r5
 800134c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8001350:	fb00 fe0e 	mul.w	lr, r0, lr
 8001354:	45ae      	cmp	lr, r5
 8001356:	d908      	bls.n	800136a <__udivmoddi4+0x1e2>
 8001358:	eb1c 0505 	adds.w	r5, ip, r5
 800135c:	f100 34ff 	add.w	r4, r0, #4294967295
 8001360:	d26c      	bcs.n	800143c <__udivmoddi4+0x2b4>
 8001362:	45ae      	cmp	lr, r5
 8001364:	d96a      	bls.n	800143c <__udivmoddi4+0x2b4>
 8001366:	3802      	subs	r0, #2
 8001368:	4465      	add	r5, ip
 800136a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800136e:	fba0 9402 	umull	r9, r4, r0, r2
 8001372:	eba5 050e 	sub.w	r5, r5, lr
 8001376:	42a5      	cmp	r5, r4
 8001378:	46c8      	mov	r8, r9
 800137a:	46a6      	mov	lr, r4
 800137c:	d356      	bcc.n	800142c <__udivmoddi4+0x2a4>
 800137e:	d053      	beq.n	8001428 <__udivmoddi4+0x2a0>
 8001380:	b15e      	cbz	r6, 800139a <__udivmoddi4+0x212>
 8001382:	ebb3 0208 	subs.w	r2, r3, r8
 8001386:	eb65 050e 	sbc.w	r5, r5, lr
 800138a:	fa05 f707 	lsl.w	r7, r5, r7
 800138e:	fa22 f301 	lsr.w	r3, r2, r1
 8001392:	40cd      	lsrs	r5, r1
 8001394:	431f      	orrs	r7, r3
 8001396:	e9c6 7500 	strd	r7, r5, [r6]
 800139a:	2100      	movs	r1, #0
 800139c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013a0:	f1c2 0320 	rsb	r3, r2, #32
 80013a4:	fa20 f103 	lsr.w	r1, r0, r3
 80013a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80013ac:	fa25 f303 	lsr.w	r3, r5, r3
 80013b0:	4095      	lsls	r5, r2
 80013b2:	430d      	orrs	r5, r1
 80013b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013b8:	fa1f fe8c 	uxth.w	lr, ip
 80013bc:	fbb3 f1f7 	udiv	r1, r3, r7
 80013c0:	fb07 3011 	mls	r0, r7, r1, r3
 80013c4:	0c2b      	lsrs	r3, r5, #16
 80013c6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80013ca:	fb01 f00e 	mul.w	r0, r1, lr
 80013ce:	4298      	cmp	r0, r3
 80013d0:	fa04 f402 	lsl.w	r4, r4, r2
 80013d4:	d908      	bls.n	80013e8 <__udivmoddi4+0x260>
 80013d6:	eb1c 0303 	adds.w	r3, ip, r3
 80013da:	f101 38ff 	add.w	r8, r1, #4294967295
 80013de:	d22f      	bcs.n	8001440 <__udivmoddi4+0x2b8>
 80013e0:	4298      	cmp	r0, r3
 80013e2:	d92d      	bls.n	8001440 <__udivmoddi4+0x2b8>
 80013e4:	3902      	subs	r1, #2
 80013e6:	4463      	add	r3, ip
 80013e8:	1a1b      	subs	r3, r3, r0
 80013ea:	b2ad      	uxth	r5, r5
 80013ec:	fbb3 f0f7 	udiv	r0, r3, r7
 80013f0:	fb07 3310 	mls	r3, r7, r0, r3
 80013f4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80013f8:	fb00 f30e 	mul.w	r3, r0, lr
 80013fc:	42ab      	cmp	r3, r5
 80013fe:	d908      	bls.n	8001412 <__udivmoddi4+0x28a>
 8001400:	eb1c 0505 	adds.w	r5, ip, r5
 8001404:	f100 38ff 	add.w	r8, r0, #4294967295
 8001408:	d216      	bcs.n	8001438 <__udivmoddi4+0x2b0>
 800140a:	42ab      	cmp	r3, r5
 800140c:	d914      	bls.n	8001438 <__udivmoddi4+0x2b0>
 800140e:	3802      	subs	r0, #2
 8001410:	4465      	add	r5, ip
 8001412:	1aed      	subs	r5, r5, r3
 8001414:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001418:	e738      	b.n	800128c <__udivmoddi4+0x104>
 800141a:	4631      	mov	r1, r6
 800141c:	4630      	mov	r0, r6
 800141e:	e707      	b.n	8001230 <__udivmoddi4+0xa8>
 8001420:	4686      	mov	lr, r0
 8001422:	e6e5      	b.n	80011f0 <__udivmoddi4+0x68>
 8001424:	4618      	mov	r0, r3
 8001426:	e6fa      	b.n	800121e <__udivmoddi4+0x96>
 8001428:	454b      	cmp	r3, r9
 800142a:	d2a9      	bcs.n	8001380 <__udivmoddi4+0x1f8>
 800142c:	ebb9 0802 	subs.w	r8, r9, r2
 8001430:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001434:	3801      	subs	r0, #1
 8001436:	e7a3      	b.n	8001380 <__udivmoddi4+0x1f8>
 8001438:	4640      	mov	r0, r8
 800143a:	e7ea      	b.n	8001412 <__udivmoddi4+0x28a>
 800143c:	4620      	mov	r0, r4
 800143e:	e794      	b.n	800136a <__udivmoddi4+0x1e2>
 8001440:	4641      	mov	r1, r8
 8001442:	e7d1      	b.n	80013e8 <__udivmoddi4+0x260>
 8001444:	46d0      	mov	r8, sl
 8001446:	e77b      	b.n	8001340 <__udivmoddi4+0x1b8>
 8001448:	3b02      	subs	r3, #2
 800144a:	4465      	add	r5, ip
 800144c:	e732      	b.n	80012b4 <__udivmoddi4+0x12c>
 800144e:	4608      	mov	r0, r1
 8001450:	e709      	b.n	8001266 <__udivmoddi4+0xde>
 8001452:	4464      	add	r4, ip
 8001454:	3802      	subs	r0, #2
 8001456:	e742      	b.n	80012de <__udivmoddi4+0x156>

08001458 <__aeabi_idiv0>:
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop

0800145c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001468:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800146a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4313      	orrs	r3, r2
 8001472:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001478:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4013      	ands	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001480:	68fb      	ldr	r3, [r7, #12]
}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001498:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	43db      	mvns	r3, r3
 800149e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014a2:	4013      	ands	r3, r2
 80014a4:	660b      	str	r3, [r1, #96]	; 0x60
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80014b4:	4b23      	ldr	r3, [pc, #140]	; (8001544 <MX_ADC_Init+0x94>)
 80014b6:	4a24      	ldr	r2, [pc, #144]	; (8001548 <MX_ADC_Init+0x98>)
 80014b8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014ba:	4b22      	ldr	r3, [pc, #136]	; (8001544 <MX_ADC_Init+0x94>)
 80014bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80014c0:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80014c2:	4b20      	ldr	r3, [pc, #128]	; (8001544 <MX_ADC_Init+0x94>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <MX_ADC_Init+0x94>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <MX_ADC_Init+0x94>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <MX_ADC_Init+0x94>)
 80014d6:	2204      	movs	r2, #4
 80014d8:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_ADC_Init+0x94>)
 80014dc:	2200      	movs	r2, #0
 80014de:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <MX_ADC_Init+0x94>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <MX_ADC_Init+0x94>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <MX_ADC_Init+0x94>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_ADC_Init+0x94>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <MX_ADC_Init+0x94>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001500:	4b10      	ldr	r3, [pc, #64]	; (8001544 <MX_ADC_Init+0x94>)
 8001502:	2200      	movs	r2, #0
 8001504:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_ADC_Init+0x94>)
 8001508:	2200      	movs	r2, #0
 800150a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <MX_ADC_Init+0x94>)
 8001510:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001514:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <MX_ADC_Init+0x94>)
 8001518:	2207      	movs	r2, #7
 800151a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <MX_ADC_Init+0x94>)
 800151e:	2207      	movs	r2, #7
 8001520:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <MX_ADC_Init+0x94>)
 8001524:	2200      	movs	r2, #0
 8001526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_ADC_Init+0x94>)
 800152c:	2200      	movs	r2, #0
 800152e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001530:	4804      	ldr	r0, [pc, #16]	; (8001544 <MX_ADC_Init+0x94>)
 8001532:	f002 fc57 	bl	8003de4 <HAL_ADC_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 800153c:	f000 fdf2 	bl	8002124 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200005a0 	.word	0x200005a0
 8001548:	40012400 	.word	0x40012400

0800154c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a05      	ldr	r2, [pc, #20]	; (8001570 <HAL_ADC_MspInit+0x24>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d103      	bne.n	8001566 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800155e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001562:	f7ff ff7b 	bl	800145c <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40012400 	.word	0x40012400

08001574 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a05      	ldr	r2, [pc, #20]	; (8001598 <HAL_ADC_MspDeInit+0x24>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d103      	bne.n	800158e <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001586:	f44f 7000 	mov.w	r0, #512	; 0x200
 800158a:	f7ff ff7f 	bl	800148c <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40012400 	.word	0x40012400

0800159c <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <SYS_InitMeasurement+0x14>)
 80015a2:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <SYS_InitMeasurement+0x18>)
 80015a4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	200005a0 	.word	0x200005a0
 80015b4:	40012400 	.word	0x40012400

080015b8 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80015c6:	4813      	ldr	r0, [pc, #76]	; (8001614 <SYS_GetBatteryLevel+0x5c>)
 80015c8:	f000 f82a 	bl	8001620 <ADC_ReadChannels>
 80015cc:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	80fb      	strh	r3, [r7, #6]
 80015d8:	e016      	b.n	8001608 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <SYS_GetBatteryLevel+0x60>)
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d00b      	beq.n	80015fe <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <SYS_GetBatteryLevel+0x60>)
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	f640 43e4 	movw	r3, #3300	; 0xce4
 80015f0:	fb03 f202 	mul.w	r2, r3, r2
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	80fb      	strh	r3, [r7, #6]
 80015fc:	e004      	b.n	8001608 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80015fe:	4a07      	ldr	r2, [pc, #28]	; (800161c <SYS_GetBatteryLevel+0x64>)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001608:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	b4002000 	.word	0xb4002000
 8001618:	1fff75aa 	.word	0x1fff75aa
 800161c:	004c08d8 	.word	0x004c08d8

08001620 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001638:	f7ff ff3a 	bl	80014b0 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 800163c:	481a      	ldr	r0, [pc, #104]	; (80016a8 <ADC_ReadChannels+0x88>)
 800163e:	f003 fa00 	bl	8004a42 <HAL_ADCEx_Calibration_Start>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001648:	f000 fd6c 	bl	8002124 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	4619      	mov	r1, r3
 800165e:	4812      	ldr	r0, [pc, #72]	; (80016a8 <ADC_ReadChannels+0x88>)
 8001660:	f002 ff0c 	bl	800447c <HAL_ADC_ConfigChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 800166a:	f000 fd5b 	bl	8002124 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800166e:	480e      	ldr	r0, [pc, #56]	; (80016a8 <ADC_ReadChannels+0x88>)
 8001670:	f002 fde8 	bl	8004244 <HAL_ADC_Start>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 800167a:	f000 fd53 	bl	8002124 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800167e:	f04f 31ff 	mov.w	r1, #4294967295
 8001682:	4809      	ldr	r0, [pc, #36]	; (80016a8 <ADC_ReadChannels+0x88>)
 8001684:	f002 fe56 	bl	8004334 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001688:	4807      	ldr	r0, [pc, #28]	; (80016a8 <ADC_ReadChannels+0x88>)
 800168a:	f002 fe21 	bl	80042d0 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <ADC_ReadChannels+0x88>)
 8001690:	f002 fee7 	bl	8004462 <HAL_ADC_GetValue>
 8001694:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001696:	4804      	ldr	r0, [pc, #16]	; (80016a8 <ADC_ReadChannels+0x88>)
 8001698:	f002 fd58 	bl	800414c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 800169c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200005a0 	.word	0x200005a0

080016ac <LL_AHB1_GRP1_EnableClock>:
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4013      	ands	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016d0:	68fb      	ldr	r3, [r7, #12]
}
 80016d2:	bf00      	nop
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016e0:	2004      	movs	r0, #4
 80016e2:	f7ff ffe3 	bl	80016ac <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016e6:	2001      	movs	r0, #1
 80016e8:	f7ff ffe0 	bl	80016ac <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2102      	movs	r1, #2
 80016f0:	200b      	movs	r0, #11
 80016f2:	f003 fb4c 	bl	8004d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016f6:	200b      	movs	r0, #11
 80016f8:	f003 fb63 	bl	8004dc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80016fc:	2200      	movs	r2, #0
 80016fe:	2100      	movs	r1, #0
 8001700:	200c      	movs	r0, #12
 8001702:	f003 fb44 	bl	8004d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001706:	200c      	movs	r0, #12
 8001708:	f003 fb5b 	bl	8004dc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	2100      	movs	r1, #0
 8001710:	200d      	movs	r0, #13
 8001712:	f003 fb3c 	bl	8004d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001716:	200d      	movs	r0, #13
 8001718:	f003 fb53 	bl	8004dc2 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 800171c:	2200      	movs	r2, #0
 800171e:	2100      	movs	r1, #0
 8001720:	203d      	movs	r0, #61	; 0x3d
 8001722:	f003 fb34 	bl	8004d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8001726:	203d      	movs	r0, #61	; 0x3d
 8001728:	f003 fb4b 	bl	8004dc2 <HAL_NVIC_EnableIRQ>

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}

08001730 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800173c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001740:	d101      	bne.n	8001746 <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 8001746:	2300      	movs	r3, #0
#endif
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr
 8001750:	58004000 	.word	0x58004000

08001754 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08c      	sub	sp, #48	; 0x30
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t page_start_index = PAGE(address);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 800176c:	4b56      	ldr	r3, [pc, #344]	; (80018c8 <FLASH_IF_Write+0x174>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	0299      	lsls	r1, r3, #10
 8001772:	4b56      	ldr	r3, [pc, #344]	; (80018cc <FLASH_IF_Write+0x178>)
 8001774:	400b      	ands	r3, r1
 8001776:	fbb2 f1f3 	udiv	r1, r2, r3
 800177a:	fb01 f303 	mul.w	r3, r1, r3
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	0adb      	lsrs	r3, r3, #11
 8001782:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800178e:	3b01      	subs	r3, #1
 8001790:	4a4d      	ldr	r2, [pc, #308]	; (80018c8 <FLASH_IF_Write+0x174>)
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	0291      	lsls	r1, r2, #10
 8001796:	4a4d      	ldr	r2, [pc, #308]	; (80018cc <FLASH_IF_Write+0x178>)
 8001798:	400a      	ands	r2, r1
 800179a:	fbb3 f1f2 	udiv	r1, r3, r2
 800179e:	fb01 f202 	mul.w	r2, r1, r2
 80017a2:	1a9b      	subs	r3, r3, r2
 80017a4:	0adb      	lsrs	r3, r3, #11
 80017a6:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t curr_dest_addr = address;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d009      	beq.n	80017ce <FLASH_IF_Write+0x7a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d104      	bne.n	80017ce <FLASH_IF_Write+0x7a>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d002      	beq.n	80017d4 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 80017ce:	f06f 0304 	mvn.w	r3, #4
 80017d2:	e074      	b.n	80018be <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80017d4:	4b3e      	ldr	r3, [pc, #248]	; (80018d0 <FLASH_IF_Write+0x17c>)
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	da02      	bge.n	80017e2 <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 80017dc:	f06f 0303 	mvn.w	r3, #3
 80017e0:	e06d      	b.n	80018be <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d005      	beq.n	80017f6 <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017f0:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	e05b      	b.n	80018b4 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001800:	4618      	mov	r0, r3
 8001802:	f000 f8f8 	bl	80019f6 <FLASH_IF_IsEmpty>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d037      	beq.n	800187c <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d102      	bne.n	8001818 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 8001812:	f06f 0304 	mvn.w	r3, #4
 8001816:	e052      	b.n	80018be <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800181e:	02db      	lsls	r3, r3, #11
 8001820:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001824:	4619      	mov	r1, r3
 8001826:	6838      	ldr	r0, [r7, #0]
 8001828:	f01c f94a 	bl	801dac0 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	4413      	add	r3, r2
 8001836:	6a39      	ldr	r1, [r7, #32]
 8001838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800183a:	b292      	uxth	r2, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f01c f93f 	bl	801dac0 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 8001842:	2200      	movs	r2, #0
 8001844:	2101      	movs	r1, #1
 8001846:	69f8      	ldr	r0, [r7, #28]
 8001848:	f000 f865 	bl	8001916 <FLASH_IF_EraseByPages>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 8001852:	f06f 0301 	mvn.w	r3, #1
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 8001858:	e030      	b.n	80018bc <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001860:	02db      	lsls	r3, r3, #11
 8001862:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001866:	6839      	ldr	r1, [r7, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f000 f88a 	bl	8001982 <FLASH_IF_Write_Buffer>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d010      	beq.n	8001896 <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 8001874:	f06f 0302 	mvn.w	r3, #2
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
          break; /* exit for loop */
 800187a:	e01f      	b.n	80018bc <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 800187c:	6a3b      	ldr	r3, [r7, #32]
 800187e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001880:	4619      	mov	r1, r3
 8001882:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001884:	f000 f87d 	bl	8001982 <FLASH_IF_Write_Buffer>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 800188e:	f06f 0302 	mvn.w	r3, #2
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 8001894:	e012      	b.n	80018bc <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 8001896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800189a:	4413      	add	r3, r2
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
    curr_src_addr += curr_size;
 800189e:	6a3a      	ldr	r2, [r7, #32]
 80018a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a2:	4413      	add	r3, r2
 80018a4:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3301      	adds	r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d99f      	bls.n	80017fc <FLASH_IF_Write+0xa8>
  }

  return status;
 80018bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3730      	adds	r7, #48	; 0x30
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	1fff75e0 	.word	0x1fff75e0
 80018cc:	03fffc00 	.word	0x03fffc00
 80018d0:	58004000 	.word	0x58004000

080018d4 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 80018e0:	e00b      	b.n	80018fa <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 80018e2:	bf00      	nop
 80018e4:	f7ff ff24 	bl	8001730 <LL_FLASH_IsActiveFlag_OperationSuspended>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1fa      	bne.n	80018e4 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 80018ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018f2:	68f9      	ldr	r1, [r7, #12]
 80018f4:	2001      	movs	r0, #1
 80018f6:	f003 fefd 	bl	80056f4 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001900:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001904:	4299      	cmp	r1, r3
 8001906:	bf08      	it	eq
 8001908:	4290      	cmpeq	r0, r2
 800190a:	d1ea      	bne.n	80018e2 <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 800190c:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b08a      	sub	sp, #40	; 0x28
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	460b      	mov	r3, r1
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001924:	2302      	movs	r3, #2
 8001926:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 800192c:	897b      	ldrh	r3, [r7, #10]
 800192e:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d008      	beq.n	8001948 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 8001936:	f107 0318 	add.w	r3, r7, #24
 800193a:	4618      	mov	r0, r3
 800193c:	f004 f878 	bl	8005a30 <HAL_FLASHEx_Erase_IT>
 8001940:	4603      	mov	r3, r0
 8001942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001946:	e00a      	b.n	800195e <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 8001948:	f107 0214 	add.w	r2, r7, #20
 800194c:	f107 0318 	add.w	r3, r7, #24
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f004 f814 	bl	8005980 <HAL_FLASHEx_Erase>
 8001958:	4603      	mov	r3, r0
 800195a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 800195e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001962:	2b00      	cmp	r3, #0
 8001964:	d008      	beq.n	8001978 <FLASH_IF_EraseByPages+0x62>
 8001966:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800196a:	2b02      	cmp	r3, #2
 800196c:	d101      	bne.n	8001972 <FLASH_IF_EraseByPages+0x5c>
 800196e:	2301      	movs	r3, #1
 8001970:	e003      	b.n	800197a <FLASH_IF_EraseByPages+0x64>
 8001972:	f06f 0301 	mvn.w	r3, #1
 8001976:	e000      	b.n	800197a <FLASH_IF_EraseByPages+0x64>
 8001978:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 800197a:	4618      	mov	r0, r3
 800197c:	3728      	adds	r7, #40	; 0x28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b08a      	sub	sp, #40	; 0x28
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
 800199a:	e020      	b.n	80019de <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 800199c:	f107 0310 	add.w	r3, r7, #16
 80019a0:	2208      	movs	r2, #8
 80019a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019a4:	4618      	mov	r0, r3
 80019a6:	f01c f88b 	bl	801dac0 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 80019aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b2:	bf08      	it	eq
 80019b4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80019b8:	d005      	beq.n	80019c6 <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 80019ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f7ff ff88 	bl	80018d4 <FLASH_IF_Write64>
 80019c4:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	3308      	adds	r3, #8
 80019ca:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	3308      	adds	r3, #8
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24

    if (status != FLASH_OK)
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d108      	bne.n	80019ea <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	3301      	adds	r3, #1
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	08db      	lsrs	r3, r3, #3
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d3d9      	bcc.n	800199c <FLASH_IF_Write_Buffer+0x1a>
 80019e8:	e000      	b.n	80019ec <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 80019ea:	bf00      	nop
    }
  }

  return status;
 80019ec:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3728      	adds	r7, #40	; 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b085      	sub	sp, #20
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001a00:	e00a      	b.n	8001a18 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2bff      	cmp	r3, #255	; 0xff
 8001a0c:	d001      	beq.n	8001a12 <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e039      	b.n	8001a86 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1ef      	bne.n	8001a02 <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	e010      	b.n	8001a4e <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f103 0208 	add.w	r2, r3, #8
 8001a32:	60fa      	str	r2, [r7, #12]
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3c:	bf08      	it	eq
 8001a3e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001a42:	d001      	beq.n	8001a48 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e01e      	b.n	8001a86 <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	08db      	lsrs	r3, r3, #3
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d3e9      	bcc.n	8001a2c <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	607b      	str	r3, [r7, #4]
  while (size != 0)
 8001a66:	e00a      	b.n	8001a7e <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	607a      	str	r2, [r7, #4]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2bff      	cmp	r3, #255	; 0xff
 8001a72:	d001      	beq.n	8001a78 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e006      	b.n	8001a86 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	603b      	str	r3, [r7, #0]
  while (size != 0)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f1      	bne.n	8001a68 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 8001a84:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <LL_AHB2_GRP1_EnableClock>:
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
}
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f7ff ffdb 	bl	8001a90 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ada:	2002      	movs	r0, #2
 8001adc:	f7ff ffd8 	bl	8001a90 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae0:	2004      	movs	r0, #4
 8001ae2:	f7ff ffd5 	bl	8001a90 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001aec:	4829      	ldr	r0, [pc, #164]	; (8001b94 <MX_GPIO_Init+0xd4>)
 8001aee:	f004 fa91 	bl	8006014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001af2:	2201      	movs	r2, #1
 8001af4:	2120      	movs	r1, #32
 8001af6:	4827      	ldr	r0, [pc, #156]	; (8001b94 <MX_GPIO_Init+0xd4>)
 8001af8:	f004 fa8c 	bl	8006014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|CONNECT_PM_SENSOR_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	f240 2131 	movw	r1, #561	; 0x231
 8001b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b06:	f004 fa85 	bl	8006014 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001b0a:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001b0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b10:	2301      	movs	r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	4619      	mov	r1, r3
 8001b20:	481c      	ldr	r0, [pc, #112]	; (8001b94 <MX_GPIO_Init+0xd4>)
 8001b22:	f004 f849 	bl	8005bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001b26:	2331      	movs	r3, #49	; 0x31
 8001b28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3e:	f004 f83b 	bl	8005bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001b42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b48:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	4619      	mov	r1, r3
 8001b56:	480f      	ldr	r0, [pc, #60]	; (8001b94 <MX_GPIO_Init+0xd4>)
 8001b58:	f004 f82e 	bl	8005bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONNECT_PM_SENSOR_Pin;
 8001b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b62:	2311      	movs	r3, #17
 8001b64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CONNECT_PM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	4619      	mov	r1, r3
 8001b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b76:	f004 f81f 	bl	8005bb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	2029      	movs	r0, #41	; 0x29
 8001b80:	f003 f905 	bl	8004d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b84:	2029      	movs	r0, #41	; 0x29
 8001b86:	f003 f91c 	bl	8004dc2 <HAL_NVIC_EnableIRQ>

}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	48000400 	.word	0x48000400

08001b98 <LL_AHB2_GRP1_EnableClock>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ba6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
}
 8001bbe:	bf00      	nop
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <LL_APB1_GRP1_EnableClock>:
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4013      	ands	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bec:	68fb      	ldr	r3, [r7, #12]
}
 8001bee:	bf00      	nop
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001bfe:	4a1c      	ldr	r2, [pc, #112]	; (8001c70 <MX_I2C2_Init+0x78>)
 8001c00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8001c02:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001c04:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <MX_I2C2_Init+0x7c>)
 8001c06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c08:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c0e:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c14:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c1a:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c32:	480e      	ldr	r0, [pc, #56]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001c34:	f004 fa1e 	bl	8006074 <HAL_I2C_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001c3e:	f000 fa71 	bl	8002124 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c42:	2100      	movs	r1, #0
 8001c44:	4809      	ldr	r0, [pc, #36]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001c46:	f004 ff05 	bl	8006a54 <HAL_I2CEx_ConfigAnalogFilter>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001c50:	f000 fa68 	bl	8002124 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c54:	2100      	movs	r1, #0
 8001c56:	4805      	ldr	r0, [pc, #20]	; (8001c6c <MX_I2C2_Init+0x74>)
 8001c58:	f004 ff46 	bl	8006ae8 <HAL_I2CEx_ConfigDigitalFilter>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001c62:	f000 fa5f 	bl	8002124 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000604 	.word	0x20000604
 8001c70:	40005800 	.word	0x40005800
 8001c74:	00707cbb 	.word	0x00707cbb

08001c78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b096      	sub	sp, #88	; 0x58
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	2238      	movs	r2, #56	; 0x38
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f01d f9fd 	bl	801f098 <memset>
  if(i2cHandle->Instance==I2C2)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a21      	ldr	r2, [pc, #132]	; (8001d28 <HAL_I2C_MspInit+0xb0>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d13b      	bne.n	8001d20 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ca8:	2380      	movs	r3, #128	; 0x80
 8001caa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001cac:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f006 f9ec 	bl	8008094 <HAL_RCCEx_PeriphCLKConfig>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001cc2:	f000 fa2f 	bl	8002124 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f7ff ff66 	bl	8001b98 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ccc:	2002      	movs	r0, #2
 8001cce:	f7ff ff63 	bl	8001b98 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cd6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cd8:	2312      	movs	r3, #18
 8001cda:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ce4:	2304      	movs	r3, #4
 8001ce6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cec:	4619      	mov	r1, r3
 8001cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf2:	f003 ff61 	bl	8005bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cfa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cfc:	2312      	movs	r3, #18
 8001cfe:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001d04:	2301      	movs	r3, #1
 8001d06:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d08:	2304      	movs	r3, #4
 8001d0a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d10:	4619      	mov	r1, r3
 8001d12:	4806      	ldr	r0, [pc, #24]	; (8001d2c <HAL_I2C_MspInit+0xb4>)
 8001d14:	f003 ff50 	bl	8005bb8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d18:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001d1c:	f7ff ff54 	bl	8001bc8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001d20:	bf00      	nop
 8001d22:	3758      	adds	r7, #88	; 0x58
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40005800 	.word	0x40005800
 8001d2c:	48000400 	.word	0x48000400

08001d30 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d40:	f023 0218 	bic.w	r2, r3, #24
 8001d44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	0000      	movs	r0, r0
 8001d5c:	0000      	movs	r0, r0
	...

08001d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d66:	f001 fe4f 	bl	8003a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d6a:	f000 f8c3 	bl	8001ef4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d6e:	f7ff fea7 	bl	8001ac0 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001d72:	f00a f8b9 	bl	800bee8 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001d76:	f001 fa6b 	bl	8003250 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001d7a:	f7ff ff3d 	bl	8001bf8 <MX_I2C2_Init>
  MX_TIM16_Init();
 8001d7e:	f000 fec1 	bl	8002b04 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001d82:	f000 fef3 	bl	8002b6c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  UART2_SET =0;
 8001d86:	4b50      	ldr	r3, [pc, #320]	; (8001ec8 <main+0x168>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]


  uint8_t SHT40_cmd = 0xFD;
 8001d8c:	23fd      	movs	r3, #253	; 0xfd
 8001d8e:	72fb      	strb	r3, [r7, #11]
  uint8_t SHT40_dataRX[6];
  uint16_t temp_hword; // teporarly temperature half word
  uint16_t th_hword;   // teporarly humidy half  word


  F1_QueueIni(); // init Function queue
 8001d90:	f000 f9d4 	bl	800213c <F1_QueueIni>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 8001d94:	2220      	movs	r2, #32
 8001d96:	494d      	ldr	r1, [pc, #308]	; (8001ecc <main+0x16c>)
 8001d98:	484d      	ldr	r0, [pc, #308]	; (8001ed0 <main+0x170>)
 8001d9a:	f009 ffda 	bl	800bd52 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001d9e:	4b4d      	ldr	r3, [pc, #308]	; (8001ed4 <main+0x174>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b4b      	ldr	r3, [pc, #300]	; (8001ed4 <main+0x174>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0204 	bic.w	r2, r2, #4
 8001dac:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001dae:	2200      	movs	r2, #0
 8001db0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db8:	f004 f92c 	bl	8006014 <HAL_GPIO_WritePin>
 // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
//  HAL_Delay(300);
//  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);

  HAL_TIM_Base_Start_IT(&htim16);
 8001dbc:	4846      	ldr	r0, [pc, #280]	; (8001ed8 <main+0x178>)
 8001dbe:	f007 fb13 	bl	80093e8 <HAL_TIM_Base_Start_IT>


  while (1)
  {

	HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(0x44 << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 8001dc2:	f107 020b 	add.w	r2, r7, #11
 8001dc6:	2364      	movs	r3, #100	; 0x64
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	2301      	movs	r3, #1
 8001dcc:	2188      	movs	r1, #136	; 0x88
 8001dce:	4843      	ldr	r0, [pc, #268]	; (8001edc <main+0x17c>)
 8001dd0:	f004 f9e0 	bl	8006194 <HAL_I2C_Master_Transmit>
	MeasurePM_sens();
 8001dd4:	f000 f934 	bl	8002040 <MeasurePM_sens>

    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001dd8:	f00a f88e 	bl	800bef8 <MX_LoRaWAN_Process>

    /* USER CODE BEGIN 3 */


    F1_pull()();
 8001ddc:	f000 f9f2 	bl	80021c4 <F1_pull>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4798      	blx	r3




    HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(0x44 << 1),SHT40_dataRX, 6, 100);
 8001de4:	1d3a      	adds	r2, r7, #4
 8001de6:	2364      	movs	r3, #100	; 0x64
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	2306      	movs	r3, #6
 8001dec:	2188      	movs	r1, #136	; 0x88
 8001dee:	483b      	ldr	r0, [pc, #236]	; (8001edc <main+0x17c>)
 8001df0:	f004 fac4 	bl	800637c <HAL_I2C_Master_Receive>
    temp_hword = SHT40_dataRX[0] * 256 + SHT40_dataRX[1];
 8001df4:	793b      	ldrb	r3, [r7, #4]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	797b      	ldrb	r3, [r7, #5]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	4413      	add	r3, r2
 8001e02:	81fb      	strh	r3, [r7, #14]
    th_hword = SHT40_dataRX[3] * 256 + SHT40_dataRX[4];
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	021b      	lsls	r3, r3, #8
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	7a3b      	ldrb	r3, [r7, #8]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	4413      	add	r3, r2
 8001e12:	81bb      	strh	r3, [r7, #12]
    temp  = -45.0 + 175.0 * (float)temp_hword/(float)65535.0;
 8001e14:	89fb      	ldrh	r3, [r7, #14]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe ff3a 	bl	8000c90 <__aeabi_ui2f>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fb16 	bl	8000450 <__aeabi_f2d>
 8001e24:	a324      	add	r3, pc, #144	; (adr r3, 8001eb8 <main+0x158>)
 8001e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2a:	f7fe fb69 	bl	8000500 <__aeabi_dmul>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	a322      	add	r3, pc, #136	; (adr r3, 8001ec0 <main+0x160>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fc8a 	bl	8000754 <__aeabi_ddiv>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <main+0x180>)
 8001e4e:	f7fe f99f 	bl	8000190 <__aeabi_dsub>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f7fe fe13 	bl	8000a84 <__aeabi_d2f>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4a20      	ldr	r2, [pc, #128]	; (8001ee4 <main+0x184>)
 8001e62:	6013      	str	r3, [r2, #0]
    humidity = -6.0 + 125.0 * (float)th_hword/(float)65535.0;
 8001e64:	89bb      	ldrh	r3, [r7, #12]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe ff12 	bl	8000c90 <__aeabi_ui2f>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe faee 	bl	8000450 <__aeabi_f2d>
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <main+0x188>)
 8001e7a:	f7fe fb41 	bl	8000500 <__aeabi_dmul>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	a30e      	add	r3, pc, #56	; (adr r3, 8001ec0 <main+0x160>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fc62 	bl	8000754 <__aeabi_ddiv>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <main+0x18c>)
 8001e9e:	f7fe f977 	bl	8000190 <__aeabi_dsub>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f7fe fdeb 	bl	8000a84 <__aeabi_d2f>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4a0f      	ldr	r2, [pc, #60]	; (8001ef0 <main+0x190>)
 8001eb2:	6013      	str	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(0x44 << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 8001eb4:	e785      	b.n	8001dc2 <main+0x62>
 8001eb6:	bf00      	nop
 8001eb8:	00000000 	.word	0x00000000
 8001ebc:	4065e000 	.word	0x4065e000
 8001ec0:	00000000 	.word	0x00000000
 8001ec4:	40efffe0 	.word	0x40efffe0
 8001ec8:	20000008 	.word	0x20000008
 8001ecc:	20000650 	.word	0x20000650
 8001ed0:	20000848 	.word	0x20000848
 8001ed4:	20000998 	.word	0x20000998
 8001ed8:	20000718 	.word	0x20000718
 8001edc:	20000604 	.word	0x20000604
 8001ee0:	40468000 	.word	0x40468000
 8001ee4:	20000674 	.word	0x20000674
 8001ee8:	405f4000 	.word	0x405f4000
 8001eec:	40180000 	.word	0x40180000
 8001ef0:	20000678 	.word	0x20000678

08001ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b09a      	sub	sp, #104	; 0x68
 8001ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001efa:	f107 0320 	add.w	r3, r7, #32
 8001efe:	2248      	movs	r2, #72	; 0x48
 8001f00:	2100      	movs	r1, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f01d f8c8 	bl	801f098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f08:	f107 0308 	add.w	r3, r7, #8
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
 8001f18:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f1a:	f004 fe31 	bl	8006b80 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f7ff ff06 	bl	8001d30 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f24:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <SystemClock_Config+0xac>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f2c:	4a1c      	ldr	r2, [pc, #112]	; (8001fa0 <SystemClock_Config+0xac>)
 8001f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <SystemClock_Config+0xac>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001f40:	2305      	movs	r3, #5
 8001f42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8001f44:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f4a:	2381      	movs	r3, #129	; 0x81
 8001f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f56:	f107 0320 	add.w	r3, r7, #32
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f005 f95c 	bl	8007218 <HAL_RCC_OscConfig>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001f66:	f000 f8dd 	bl	8002124 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001f6a:	234f      	movs	r3, #79	; 0x4f
 8001f6c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f82:	f107 0308 	add.w	r3, r7, #8
 8001f86:	2101      	movs	r1, #1
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f005 fce1 	bl	8007950 <HAL_RCC_ClockConfig>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001f94:	f000 f8c6 	bl	8002124 <Error_Handler>
  }
}
 8001f98:	bf00      	nop
 8001f9a:	3768      	adds	r7, #104	; 0x68
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	58000400 	.word	0x58000400

08001fa4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a13      	ldr	r2, [pc, #76]	; (8002004 <HAL_UARTEx_RxEventCallback+0x60>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d11e      	bne.n	8001ff8 <HAL_UARTEx_RxEventCallback+0x54>
	{
		if(aRXBufferUser[0]=='B'&& aRXBufferUser[1]=='M'){
 8001fba:	4b13      	ldr	r3, [pc, #76]	; (8002008 <HAL_UARTEx_RxEventCallback+0x64>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b42      	cmp	r3, #66	; 0x42
 8001fc0:	d117      	bne.n	8001ff2 <HAL_UARTEx_RxEventCallback+0x4e>
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_UARTEx_RxEventCallback+0x64>)
 8001fc4:	785b      	ldrb	r3, [r3, #1]
 8001fc6:	2b4d      	cmp	r3, #77	; 0x4d
 8001fc8:	d113      	bne.n	8001ff2 <HAL_UARTEx_RxEventCallback+0x4e>
		//memcpy(mainBuffer,aRXBufferUser,Size);
		if((aRXBufferUser[30]<<8) + aRXBufferUser[31])
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <HAL_UARTEx_RxEventCallback+0x64>)
 8001fcc:	7f9b      	ldrb	r3, [r3, #30]
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	; (8002008 <HAL_UARTEx_RxEventCallback+0x64>)
 8001fd2:	7fd2      	ldrb	r2, [r2, #31]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_UARTEx_RxEventCallback+0x4e>
			PM2_5 = aRXBufferUser[6]*256+aRXBufferUser[7];
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_UARTEx_RxEventCallback+0x64>)
 8001fdc:	799b      	ldrb	r3, [r3, #6]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_UARTEx_RxEventCallback+0x64>)
 8001fe6:	79db      	ldrb	r3, [r3, #7]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	4b07      	ldr	r3, [pc, #28]	; (800200c <HAL_UARTEx_RxEventCallback+0x68>)
 8001ff0:	801a      	strh	r2, [r3, #0]


		}
		UART2_SET =1;
 8001ff2:	4b07      	ldr	r3, [pc, #28]	; (8002010 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	701a      	strb	r2, [r3, #0]

	}
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40004400 	.word	0x40004400
 8002008:	20000650 	.word	0x20000650
 800200c:	20000670 	.word	0x20000670
 8002010:	20000008 	.word	0x20000008

08002014 <EnablePM_sens>:

void EnablePM_sens(void){
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002018:	2200      	movs	r2, #0
 800201a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800201e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002022:	f003 fff7 	bl	8006014 <HAL_GPIO_WritePin>

}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}

0800202a <DisablePM_sens>:

void DisablePM_sens(void){
 800202a:	b580      	push	{r7, lr}
 800202c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800202e:	2201      	movs	r2, #1
 8002030:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002038:	f003 ffec 	bl	8006014 <HAL_GPIO_WritePin>


}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}

08002040 <MeasurePM_sens>:

void MeasurePM_sens(void){
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0

	if(PM_measure_flag){
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <MeasurePM_sens+0x30>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00f      	beq.n	800206c <MeasurePM_sens+0x2c>
	       UART2_SET = 0;
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <MeasurePM_sens+0x34>)
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
	       HAL_UARTEx_ReceiveToIdle_DMA(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 8002052:	2220      	movs	r2, #32
 8002054:	4908      	ldr	r1, [pc, #32]	; (8002078 <MeasurePM_sens+0x38>)
 8002056:	4809      	ldr	r0, [pc, #36]	; (800207c <MeasurePM_sens+0x3c>)
 8002058:	f009 fe7b 	bl	800bd52 <HAL_UARTEx_ReceiveToIdle_DMA>
		   __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <MeasurePM_sens+0x40>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <MeasurePM_sens+0x40>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0204 	bic.w	r2, r2, #4
 800206a:	601a      	str	r2, [r3, #0]


	     }
}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000000 	.word	0x20000000
 8002074:	20000008 	.word	0x20000008
 8002078:	20000650 	.word	0x20000650
 800207c:	20000848 	.word	0x20000848
 8002080:	20000998 	.word	0x20000998

08002084 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
   if (htim == &htim16)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a1e      	ldr	r2, [pc, #120]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d134      	bne.n	80020fe <HAL_TIM_PeriodElapsedCallback+0x7a>
   {
	  counter++;
 8002094:	4b1d      	ldr	r3, [pc, #116]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	4a1c      	ldr	r2, [pc, #112]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800209c:	6013      	str	r3, [r2, #0]
      switch(counter){
 800209e:	4b1b      	ldr	r3, [pc, #108]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 80020a6:	d014      	beq.n	80020d2 <HAL_TIM_PeriodElapsedCallback+0x4e>
 80020a8:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 80020ac:	dc17      	bgt.n	80020de <HAL_TIM_PeriodElapsedCallback+0x5a>
 80020ae:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 80020b2:	d003      	beq.n	80020bc <HAL_TIM_PeriodElapsedCallback+0x38>
 80020b4:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 80020b8:	d004      	beq.n	80020c4 <HAL_TIM_PeriodElapsedCallback+0x40>
 80020ba:	e010      	b.n	80020de <HAL_TIM_PeriodElapsedCallback+0x5a>
      case 820:
    	  F1_push(EnablePM_sens);
 80020bc:	4814      	ldr	r0, [pc, #80]	; (8002110 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80020be:	f000 f84d 	bl	800215c <F1_push>

    	  break;
 80020c2:	e00c      	b.n	80020de <HAL_TIM_PeriodElapsedCallback+0x5a>
      case 840:
     	  PM_measure_flag = 1;
 80020c4:	4b13      	ldr	r3, [pc, #76]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]
    	  F1_push(MeasurePM_sens);
 80020ca:	4813      	ldr	r0, [pc, #76]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80020cc:	f000 f846 	bl	800215c <F1_push>
    	  break;
 80020d0:	e005      	b.n	80020de <HAL_TIM_PeriodElapsedCallback+0x5a>
      case 860:
    	  F1_push(DisablePM_sens);
 80020d2:	4812      	ldr	r0, [pc, #72]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80020d4:	f000 f842 	bl	800215c <F1_push>
    	  PM_measure_flag = 0;
 80020d8:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
      }

      counter %= 900;
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a0f      	ldr	r2, [pc, #60]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80020e4:	fb82 1203 	smull	r1, r2, r2, r3
 80020e8:	441a      	add	r2, r3
 80020ea:	1251      	asrs	r1, r2, #9
 80020ec:	17da      	asrs	r2, r3, #31
 80020ee:	1a8a      	subs	r2, r1, r2
 80020f0:	f44f 7161 	mov.w	r1, #900	; 0x384
 80020f4:	fb01 f202 	mul.w	r2, r1, r2
 80020f8:	1a9a      	subs	r2, r3, r2
 80020fa:	4b04      	ldr	r3, [pc, #16]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80020fc:	601a      	str	r2, [r3, #0]
   }
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000718 	.word	0x20000718
 800210c:	2000067c 	.word	0x2000067c
 8002110:	08002015 	.word	0x08002015
 8002114:	20000000 	.word	0x20000000
 8002118:	08002041 	.word	0x08002041
 800211c:	0800202b 	.word	0x0800202b
 8002120:	91a2b3c5 	.word	0x91a2b3c5

08002124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002128:	b672      	cpsid	i
}
 800212a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800212c:	e7fe      	b.n	800212c <Error_Handler+0x8>

0800212e <SimpleF1>:
#define Q_SIZE_FAST 16

volatile int F1_last; // number of last element of fast-speed queue
int F1_first; // number of first element of fast-speed queue

void SimpleF1(){;};
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0
 8002132:	bf00      	nop
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
	...

0800213c <F1_QueueIni>:

void (*F1_Queue[Q_SIZE_FAST])();

 void F1_QueueIni(void){ // initialization of Queue
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  F1_last = 0;
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <F1_QueueIni+0x18>)
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
  F1_first = 0;
 8002146:	4b04      	ldr	r3, [pc, #16]	; (8002158 <F1_QueueIni+0x1c>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr
 8002154:	20000680 	.word	0x20000680
 8002158:	20000684 	.word	0x20000684

0800215c <F1_push>:

 int F1_push(void (*pointerQ)(void) ){ // push element from the queue
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  if ((F1_last+1)%Q_SIZE_FAST == F1_first)return 1;
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <F1_push+0x5c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	3301      	adds	r3, #1
 800216a:	425a      	negs	r2, r3
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	f002 020f 	and.w	r2, r2, #15
 8002174:	bf58      	it	pl
 8002176:	4253      	negpl	r3, r2
 8002178:	4a10      	ldr	r2, [pc, #64]	; (80021bc <F1_push+0x60>)
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	4293      	cmp	r3, r2
 800217e:	d101      	bne.n	8002184 <F1_push+0x28>
 8002180:	2301      	movs	r3, #1
 8002182:	e014      	b.n	80021ae <F1_push+0x52>
  F1_Queue[F1_last++] = pointerQ;
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <F1_push+0x5c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	490b      	ldr	r1, [pc, #44]	; (80021b8 <F1_push+0x5c>)
 800218c:	600a      	str	r2, [r1, #0]
 800218e:	490c      	ldr	r1, [pc, #48]	; (80021c0 <F1_push+0x64>)
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  F1_last%=Q_SIZE_FAST;
 8002196:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <F1_push+0x5c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	425a      	negs	r2, r3
 800219c:	f003 030f 	and.w	r3, r3, #15
 80021a0:	f002 020f 	and.w	r2, r2, #15
 80021a4:	bf58      	it	pl
 80021a6:	4253      	negpl	r3, r2
 80021a8:	4a03      	ldr	r2, [pc, #12]	; (80021b8 <F1_push+0x5c>)
 80021aa:	6013      	str	r3, [r2, #0]
  return 0;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	20000680 	.word	0x20000680
 80021bc:	20000684 	.word	0x20000684
 80021c0:	20000688 	.word	0x20000688

080021c4 <F1_pull>:

 void (*F1_pull(void))(void){ // pull element from the queue
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
  void (*pullVar)(void);
  if (F1_last == F1_first)return SimpleF1;
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <F1_pull+0x4c>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	4b11      	ldr	r3, [pc, #68]	; (8002214 <F1_pull+0x50>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d101      	bne.n	80021da <F1_pull+0x16>
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <F1_pull+0x54>)
 80021d8:	e014      	b.n	8002204 <F1_pull+0x40>
  pullVar = F1_Queue[F1_first++];
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <F1_pull+0x50>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	490c      	ldr	r1, [pc, #48]	; (8002214 <F1_pull+0x50>)
 80021e2:	600a      	str	r2, [r1, #0]
 80021e4:	4a0d      	ldr	r2, [pc, #52]	; (800221c <F1_pull+0x58>)
 80021e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ea:	607b      	str	r3, [r7, #4]
  F1_first%=Q_SIZE_FAST;
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <F1_pull+0x50>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	425a      	negs	r2, r3
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	f002 020f 	and.w	r2, r2, #15
 80021fa:	bf58      	it	pl
 80021fc:	4253      	negpl	r3, r2
 80021fe:	4a05      	ldr	r2, [pc, #20]	; (8002214 <F1_pull+0x50>)
 8002200:	6013      	str	r3, [r2, #0]
  return pullVar;
 8002202:	687b      	ldr	r3, [r7, #4]
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000680 	.word	0x20000680
 8002214:	20000684 	.word	0x20000684
 8002218:	0800212f 	.word	0x0800212f
 800221c:	20000688 	.word	0x20000688

08002220 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <LL_APB1_GRP1_EnableClock>:
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800224e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4313      	orrs	r3, r2
 8002256:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4013      	ands	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002264:	68fb      	ldr	r3, [r7, #12]
}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08c      	sub	sp, #48	; 0x30
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	222c      	movs	r2, #44	; 0x2c
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f01c ff0b 	bl	801f098 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002282:	4b22      	ldr	r3, [pc, #136]	; (800230c <MX_RTC_Init+0x9c>)
 8002284:	4a22      	ldr	r2, [pc, #136]	; (8002310 <MX_RTC_Init+0xa0>)
 8002286:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8002288:	4b20      	ldr	r3, [pc, #128]	; (800230c <MX_RTC_Init+0x9c>)
 800228a:	221f      	movs	r2, #31
 800228c:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800228e:	4b1f      	ldr	r3, [pc, #124]	; (800230c <MX_RTC_Init+0x9c>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002294:	4b1d      	ldr	r3, [pc, #116]	; (800230c <MX_RTC_Init+0x9c>)
 8002296:	2200      	movs	r2, #0
 8002298:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800229a:	4b1c      	ldr	r3, [pc, #112]	; (800230c <MX_RTC_Init+0x9c>)
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80022a0:	4b1a      	ldr	r3, [pc, #104]	; (800230c <MX_RTC_Init+0x9c>)
 80022a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022a6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80022a8:	4b18      	ldr	r3, [pc, #96]	; (800230c <MX_RTC_Init+0x9c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80022ae:	4b17      	ldr	r3, [pc, #92]	; (800230c <MX_RTC_Init+0x9c>)
 80022b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80022b6:	4815      	ldr	r0, [pc, #84]	; (800230c <MX_RTC_Init+0x9c>)
 80022b8:	f006 f806 	bl	80082c8 <HAL_RTC_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80022c2:	f7ff ff2f 	bl	8002124 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80022c6:	4811      	ldr	r0, [pc, #68]	; (800230c <MX_RTC_Init+0x9c>)
 80022c8:	f006 faf4 	bl	80088b4 <HAL_RTCEx_SetSSRU_IT>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80022d2:	f7ff ff27 	bl	8002124 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80022d6:	2300      	movs	r3, #0
 80022d8:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80022de:	2300      	movs	r3, #0
 80022e0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80022e2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80022e6:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80022e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80022ee:	1d3b      	adds	r3, r7, #4
 80022f0:	2200      	movs	r2, #0
 80022f2:	4619      	mov	r1, r3
 80022f4:	4805      	ldr	r0, [pc, #20]	; (800230c <MX_RTC_Init+0x9c>)
 80022f6:	f006 f861 	bl	80083bc <HAL_RTC_SetAlarm_IT>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8002300:	f7ff ff10 	bl	8002124 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002304:	bf00      	nop
 8002306:	3730      	adds	r7, #48	; 0x30
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	200006c8 	.word	0x200006c8
 8002310:	40002800 	.word	0x40002800

08002314 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b090      	sub	sp, #64	; 0x40
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800231c:	f107 0308 	add.w	r3, r7, #8
 8002320:	2238      	movs	r2, #56	; 0x38
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f01c feb7 	bl	801f098 <memset>
  if(rtcHandle->Instance==RTC)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a16      	ldr	r2, [pc, #88]	; (8002388 <HAL_RTC_MspInit+0x74>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d125      	bne.n	8002380 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002338:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800233a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800233e:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002340:	f107 0308 	add.w	r3, r7, #8
 8002344:	4618      	mov	r0, r3
 8002346:	f005 fea5 	bl	8008094 <HAL_RCCEx_PeriphCLKConfig>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002350:	f7ff fee8 	bl	8002124 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002354:	f7ff ff64 	bl	8002220 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002358:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800235c:	f7ff ff70 	bl	8002240 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8002360:	2200      	movs	r2, #0
 8002362:	2100      	movs	r1, #0
 8002364:	2002      	movs	r0, #2
 8002366:	f002 fd12 	bl	8004d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800236a:	2002      	movs	r0, #2
 800236c:	f002 fd29 	bl	8004dc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002370:	2200      	movs	r2, #0
 8002372:	2100      	movs	r1, #0
 8002374:	202a      	movs	r0, #42	; 0x2a
 8002376:	f002 fd0a 	bl	8004d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800237a:	202a      	movs	r0, #42	; 0x2a
 800237c:	f002 fd21 	bl	8004dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002380:	bf00      	nop
 8002382:	3740      	adds	r7, #64	; 0x40
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40002800 	.word	0x40002800

0800238c <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8002392:	2201      	movs	r2, #1
 8002394:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	58000400 	.word	0x58000400

080023a4 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80023c0:	f001 fb42 	bl	8003a48 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 80023c4:	f7ff ffe2 	bl	800238c <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80023c8:	2001      	movs	r0, #1
 80023ca:	f004 fc6b 	bl	8006ca4 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 80023d6:	f001 fb45 	bl	8003a64 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 80023da:	f001 f9b3 	bl	8003744 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 80023e6:	f001 fb2f 	bl	8003a48 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80023ea:	2101      	movs	r1, #1
 80023ec:	2000      	movs	r0, #0
 80023ee:	f004 fbd5 	bl	8006b9c <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80023fa:	f001 fb33 	bl	8003a64 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002412:	e7fe      	b.n	8002412 <NMI_Handler+0x4>

08002414 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002418:	e7fe      	b.n	8002418 <HardFault_Handler+0x4>

0800241a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800241e:	e7fe      	b.n	800241e <MemManage_Handler+0x4>

08002420 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002424:	e7fe      	b.n	8002424 <BusFault_Handler+0x4>

08002426 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800242a:	e7fe      	b.n	800242a <UsageFault_Handler+0x4>

0800242c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002460:	4802      	ldr	r0, [pc, #8]	; (800246c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8002462:	f006 fa63 	bl	800892c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	200006c8 	.word	0x200006c8

08002470 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002474:	4802      	ldr	r0, [pc, #8]	; (8002480 <DMA1_Channel1_IRQHandler+0x10>)
 8002476:	f002 ff3b 	bl	80052f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200008d8 	.word	0x200008d8

08002484 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002488:	4802      	ldr	r0, [pc, #8]	; (8002494 <DMA1_Channel2_IRQHandler+0x10>)
 800248a:	f002 ff31 	bl	80052f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000938 	.word	0x20000938

08002498 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800249c:	4802      	ldr	r0, [pc, #8]	; (80024a8 <DMA1_Channel3_IRQHandler+0x10>)
 800249e:	f002 ff27 	bl	80052f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000998 	.word	0x20000998

080024ac <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 Global Interrupt.
  */
void TIM16_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */
	static int counter = 0;
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80024b0:	4804      	ldr	r0, [pc, #16]	; (80024c4 <TIM16_IRQHandler+0x18>)
 80024b2:	f006 ffe5 	bl	8009480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */
  counter++;
 80024b6:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <TIM16_IRQHandler+0x1c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	3301      	adds	r3, #1
 80024bc:	4a02      	ldr	r2, [pc, #8]	; (80024c8 <TIM16_IRQHandler+0x1c>)
 80024be:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM16_IRQn 1 */
}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000718 	.word	0x20000718
 80024c8:	20000700 	.word	0x20000700

080024cc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
static int counter = 0;
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80024d0:	4804      	ldr	r0, [pc, #16]	; (80024e4 <TIM17_IRQHandler+0x18>)
 80024d2:	f006 ffd5 	bl	8009480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */
  counter++;
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <TIM17_IRQHandler+0x1c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	3301      	adds	r3, #1
 80024dc:	4a02      	ldr	r2, [pc, #8]	; (80024e8 <TIM17_IRQHandler+0x1c>)
 80024de:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM17_IRQn 1 */
}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000764 	.word	0x20000764
 80024e8:	20000704 	.word	0x20000704

080024ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <USART1_IRQHandler+0x10>)
 80024f2:	f007 fadf 	bl	8009ab4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200007b8 	.word	0x200007b8

08002500 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002504:	4802      	ldr	r0, [pc, #8]	; (8002510 <USART2_IRQHandler+0x10>)
 8002506:	f007 fad5 	bl	8009ab4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000848 	.word	0x20000848

08002514 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8002518:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800251c:	f003 fd92 	bl	8006044 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}

08002524 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002528:	4802      	ldr	r0, [pc, #8]	; (8002534 <RTC_Alarm_IRQHandler+0x10>)
 800252a:	f006 f8af 	bl	800868c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200006c8 	.word	0x200006c8

08002538 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800253c:	4802      	ldr	r0, [pc, #8]	; (8002548 <SUBGHZ_Radio_IRQHandler+0x10>)
 800253e:	f006 fd5d 	bl	8008ffc <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000708 	.word	0x20000708

0800254c <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8002550:	4802      	ldr	r0, [pc, #8]	; (800255c <DMAMUX1_OVR_IRQHandler+0x10>)
 8002552:	f003 f87d 	bl	8005650 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000938 	.word	0x20000938

08002560 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800256e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4313      	orrs	r3, r2
 8002576:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4013      	ands	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002584:	68fb      	ldr	r3, [r7, #12]
}
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <MX_SUBGHZ_Init+0x20>)
 8002596:	2208      	movs	r2, #8
 8002598:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800259a:	4805      	ldr	r0, [pc, #20]	; (80025b0 <MX_SUBGHZ_Init+0x20>)
 800259c:	f006 fab2 	bl	8008b04 <HAL_SUBGHZ_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80025a6:	f7ff fdbd 	bl	8002124 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000708 	.word	0x20000708

080025b4 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80025bc:	2001      	movs	r0, #1
 80025be:	f7ff ffcf 	bl	8002560 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2100      	movs	r1, #0
 80025c6:	2032      	movs	r0, #50	; 0x32
 80025c8:	f002 fbe1 	bl	8004d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80025cc:	2032      	movs	r0, #50	; 0x32
 80025ce:	f002 fbf8 	bl	8004dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <LL_RCC_SetClkAfterWakeFromStop>:
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80025e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80025ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	608b      	str	r3, [r1, #8]
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002604:	4b02      	ldr	r3, [pc, #8]	; (8002610 <LL_FLASH_GetUDN+0x10>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	1fff7580 	.word	0x1fff7580

08002614 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <LL_FLASH_GetDeviceID+0x14>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	b2db      	uxtb	r3, r3
}
 800261e:	4618      	mov	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	1fff7584 	.word	0x1fff7584

0800262c <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002630:	4b03      	ldr	r3, [pc, #12]	; (8002640 <LL_FLASH_GetSTCompanyID+0x14>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	0a1b      	lsrs	r3, r3, #8
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	1fff7584 	.word	0x1fff7584

08002644 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002648:	2000      	movs	r0, #0
 800264a:	f7ff ffc6 	bl	80025da <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 800264e:	f01b ffc9 	bl	801e5e4 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <SystemApp_Init+0x50>)
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002658:	f000 f9a0 	bl	800299c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 800265c:	f01c fa52 	bl	801eb04 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002660:	480d      	ldr	r0, [pc, #52]	; (8002698 <SystemApp_Init+0x54>)
 8002662:	f01c fafd 	bl	801ec60 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <SystemApp_Init+0x58>)
 8002668:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800266c:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800266e:	2002      	movs	r0, #2
 8002670:	f01c fb04 	bl	801ec7c <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002674:	f7fe ff92 	bl	800159c <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002678:	f000 fa1a 	bl	8002ab0 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 800267c:	f01b f97a 	bl	801d974 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002680:	2101      	movs	r1, #1
 8002682:	2001      	movs	r0, #1
 8002684:	f01b f9b6 	bl	801d9f4 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002688:	2101      	movs	r1, #1
 800268a:	2001      	movs	r0, #1
 800268c:	f01b f982 	bl	801d994 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8002690:	bf00      	nop
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000714 	.word	0x20000714
 8002698:	08002865 	.word	0x08002865
 800269c:	58004000 	.word	0x58004000

080026a0 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 80026a4:	f01b f9d6 	bl	801da54 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}

080026ac <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80026b6:	f7fe ff7f 	bl	80015b8 <SYS_GetBatteryLevel>
 80026ba:	4603      	mov	r3, r0
 80026bc:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80026be:	88bb      	ldrh	r3, [r7, #4]
 80026c0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d902      	bls.n	80026ce <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80026c8:	23fe      	movs	r3, #254	; 0xfe
 80026ca:	71fb      	strb	r3, [r7, #7]
 80026cc:	e014      	b.n	80026f8 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80026ce:	88bb      	ldrh	r3, [r7, #4]
 80026d0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80026d4:	d202      	bcs.n	80026dc <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	71fb      	strb	r3, [r7, #7]
 80026da:	e00d      	b.n	80026f8 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80026dc:	88bb      	ldrh	r3, [r7, #4]
 80026de:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80026e2:	461a      	mov	r2, r3
 80026e4:	4613      	mov	r3, r2
 80026e6:	01db      	lsls	r3, r3, #7
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	461a      	mov	r2, r3
 80026ee:	4b05      	ldr	r3, [pc, #20]	; (8002704 <GetBatteryLevel+0x58>)
 80026f0:	fba3 2302 	umull	r2, r3, r3, r2
 80026f4:	09db      	lsrs	r3, r3, #7
 80026f6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80026f8:	79fb      	ldrb	r3, [r7, #7]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	1b4e81b5 	.word	0x1b4e81b5

08002708 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8002712:	1d3b      	adds	r3, r7, #4
 8002714:	4618      	mov	r0, r3
 8002716:	f000 f9a1 	bl	8002a5c <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	4618      	mov	r0, r3
 800271e:	f7fe fcd5 	bl	80010cc <__aeabi_f2iz>
 8002722:	4603      	mov	r3, r0
 8002724:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8002726:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3720      	adds	r7, #32
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8002732:	b590      	push	{r4, r7, lr}
 8002734:	b087      	sub	sp, #28
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 800273e:	f7ff ff5f 	bl	8002600 <LL_FLASH_GetUDN>
 8002742:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274a:	d138      	bne.n	80027be <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 800274c:	f001 f998 	bl	8003a80 <HAL_GetUIDw0>
 8002750:	4604      	mov	r4, r0
 8002752:	f001 f9a9 	bl	8003aa8 <HAL_GetUIDw2>
 8002756:	4603      	mov	r3, r0
 8002758:	4423      	add	r3, r4
 800275a:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 800275c:	f001 f99a 	bl	8003a94 <HAL_GetUIDw1>
 8002760:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	0e1a      	lsrs	r2, r3, #24
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3307      	adds	r3, #7
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	0c1a      	lsrs	r2, r3, #16
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3306      	adds	r3, #6
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	0a1a      	lsrs	r2, r3, #8
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3305      	adds	r3, #5
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3304      	adds	r3, #4
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	0e1a      	lsrs	r2, r3, #24
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3303      	adds	r3, #3
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	0c1a      	lsrs	r2, r3, #16
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3302      	adds	r3, #2
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	0a1a      	lsrs	r2, r3, #8
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3301      	adds	r3, #1
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80027bc:	e031      	b.n	8002822 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3307      	adds	r3, #7
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	0a1a      	lsrs	r2, r3, #8
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3306      	adds	r3, #6
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	0c1a      	lsrs	r2, r3, #16
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3305      	adds	r3, #5
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	0e1a      	lsrs	r2, r3, #24
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3304      	adds	r3, #4
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80027ec:	f7ff ff12 	bl	8002614 <LL_FLASH_GetDeviceID>
 80027f0:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3303      	adds	r3, #3
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80027fc:	f7ff ff16 	bl	800262c <LL_FLASH_GetSTCompanyID>
 8002800:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3302      	adds	r3, #2
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	0a1a      	lsrs	r2, r3, #8
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3301      	adds	r3, #1
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	0c1b      	lsrs	r3, r3, #16
 800281c:	b2da      	uxtb	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	701a      	strb	r2, [r3, #0]
}
 8002822:	bf00      	nop
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	bd90      	pop	{r4, r7, pc}

0800282a <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 800282a:	b590      	push	{r4, r7, lr}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8002834:	f7ff fee4 	bl	8002600 <LL_FLASH_GetUDN>
 8002838:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002840:	d10b      	bne.n	800285a <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002842:	f001 f91d 	bl	8003a80 <HAL_GetUIDw0>
 8002846:	4604      	mov	r4, r0
 8002848:	f001 f924 	bl	8003a94 <HAL_GetUIDw1>
 800284c:	4603      	mov	r3, r0
 800284e:	405c      	eors	r4, r3
 8002850:	f001 f92a 	bl	8003aa8 <HAL_GetUIDw2>
 8002854:	4603      	mov	r3, r0
 8002856:	4063      	eors	r3, r4
 8002858:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 800285a:	687b      	ldr	r3, [r7, #4]

}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bd90      	pop	{r4, r7, pc}

08002864 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af02      	add	r7, sp, #8
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800286e:	f107 0308 	add.w	r3, r7, #8
 8002872:	4618      	mov	r0, r3
 8002874:	f01b f9fe 	bl	801dc74 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800287e:	9200      	str	r2, [sp, #0]
 8002880:	4a07      	ldr	r2, [pc, #28]	; (80028a0 <TimestampNow+0x3c>)
 8002882:	2110      	movs	r1, #16
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f81d 	bl	80028c4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7fd fc74 	bl	8000178 <strlen>
 8002890:	4603      	mov	r3, r0
 8002892:	b29a      	uxth	r2, r3
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002898:	bf00      	nop
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	0801f290 	.word	0x0801f290

080028a4 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80028a8:	2101      	movs	r1, #1
 80028aa:	2002      	movs	r0, #2
 80028ac:	f01b f872 	bl	801d994 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80028b0:	bf00      	nop
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80028b8:	2100      	movs	r1, #0
 80028ba:	2002      	movs	r0, #2
 80028bc:	f01b f86a 	bl	801d994 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80028c4:	b40c      	push	{r2, r3}
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80028d0:	f107 031c 	add.w	r3, r7, #28
 80028d4:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80028d6:	6839      	ldr	r1, [r7, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f01b fb9b 	bl	801e018 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80028e2:	bf00      	nop
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028ec:	b002      	add	sp, #8
 80028ee:	4770      	bx	lr

080028f0 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_GetTick+0x24>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002916:	f000 fa47 	bl	8002da8 <TIMER_IF_GetTimerValue>
 800291a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 800291c:	687b      	ldr	r3, [r7, #4]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000714 	.word	0x20000714

0800292c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4618      	mov	r0, r3
 8002938:	f000 fabd 	bl	8002eb6 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800293c:	bf00      	nop
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <LL_AHB2_GRP1_EnableClock>:
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800294c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002950:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002952:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4313      	orrs	r3, r2
 800295a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800295c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002960:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4013      	ands	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002968:	68fb      	ldr	r3, [r7, #12]
}
 800296a:	bf00      	nop
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <LL_EXTI_EnableIT_32_63+0x24>)
 800297e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002982:	4905      	ldr	r1, [pc, #20]	; (8002998 <LL_EXTI_EnableIT_32_63+0x24>)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	58000800 	.word	0x58000800

0800299c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 80029a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80029a6:	f7ff ffe5 	bl	8002974 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 80029aa:	f001 f887 	bl	8003abc <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80029ae:	f001 f88b 	bl	8003ac8 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 80029b2:	f001 f88f 	bl	8003ad4 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80029b6:	1d3b      	adds	r3, r7, #4
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80029c4:	2301      	movs	r3, #1
 80029c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80029cc:	2303      	movs	r3, #3
 80029ce:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 80029d0:	2001      	movs	r0, #1
 80029d2:	f7ff ffb7 	bl	8002944 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 80029d6:	2002      	movs	r0, #2
 80029d8:	f7ff ffb4 	bl	8002944 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 80029dc:	2002      	movs	r0, #2
 80029de:	f7ff ffb1 	bl	8002944 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 80029e2:	2002      	movs	r0, #2
 80029e4:	f7ff ffae 	bl	8002944 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 80029e8:	2301      	movs	r3, #1
 80029ea:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	4619      	mov	r1, r3
 80029f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029f4:	f003 f8e0 	bl	8005bb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80029f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029fc:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80029fe:	1d3b      	adds	r3, r7, #4
 8002a00:	4619      	mov	r1, r3
 8002a02:	4815      	ldr	r0, [pc, #84]	; (8002a58 <DBG_Init+0xbc>)
 8002a04:	f003 f8d8 	bl	8005bb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8002a08:	2308      	movs	r3, #8
 8002a0a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4811      	ldr	r0, [pc, #68]	; (8002a58 <DBG_Init+0xbc>)
 8002a12:	f003 f8d1 	bl	8005bb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8002a16:	2310      	movs	r3, #16
 8002a18:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8002a1a:	1d3b      	adds	r3, r7, #4
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	480e      	ldr	r0, [pc, #56]	; (8002a58 <DBG_Init+0xbc>)
 8002a20:	f003 f8ca 	bl	8005bb8 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8002a24:	2200      	movs	r2, #0
 8002a26:	2101      	movs	r1, #1
 8002a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a2c:	f003 faf2 	bl	8006014 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8002a30:	2200      	movs	r2, #0
 8002a32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a36:	4808      	ldr	r0, [pc, #32]	; (8002a58 <DBG_Init+0xbc>)
 8002a38:	f003 faec 	bl	8006014 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2108      	movs	r1, #8
 8002a40:	4805      	ldr	r0, [pc, #20]	; (8002a58 <DBG_Init+0xbc>)
 8002a42:	f003 fae7 	bl	8006014 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8002a46:	2200      	movs	r2, #0
 8002a48:	2110      	movs	r1, #16
 8002a4a:	4803      	ldr	r0, [pc, #12]	; (8002a58 <DBG_Init+0xbc>)
 8002a4c:	f003 fae2 	bl	8006014 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002a50:	bf00      	nop
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	48000400 	.word	0x48000400

08002a5c <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002a64:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <EnvSensors_Read+0x40>)
 8002a66:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002a68:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <EnvSensors_Read+0x44>)
 8002a6a:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002a6c:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <EnvSensors_Read+0x48>)
 8002a6e:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a08      	ldr	r2, [pc, #32]	; (8002aa8 <EnvSensors_Read+0x4c>)
 8002a86:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a08      	ldr	r2, [pc, #32]	; (8002aac <EnvSensors_Read+0x50>)
 8002a8c:	611a      	str	r2, [r3, #16]

  return 0;
 8002a8e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	371c      	adds	r7, #28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	42480000 	.word	0x42480000
 8002aa0:	41900000 	.word	0x41900000
 8002aa4:	447a0000 	.word	0x447a0000
 8002aa8:	003e090d 	.word	0x003e090d
 8002aac:	000503ab 	.word	0x000503ab

08002ab0 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002aba:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr

08002ac6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002aca:	bf00      	nop
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <LL_APB2_GRP1_EnableClock>:
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ade:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ae0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4013      	ands	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002af6:	68fb      	ldr	r3, [r7, #12]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
	...

08002b04 <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002b08:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <MX_TIM16_Init+0x60>)
 8002b0a:	4a17      	ldr	r2, [pc, #92]	; (8002b68 <MX_TIM16_Init+0x64>)
 8002b0c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 999;
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <MX_TIM16_Init+0x60>)
 8002b10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b14:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b16:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <MX_TIM16_Init+0x60>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 32000;
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <MX_TIM16_Init+0x60>)
 8002b1e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002b22:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b24:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <MX_TIM16_Init+0x60>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <MX_TIM16_Init+0x60>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b30:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <MX_TIM16_Init+0x60>)
 8002b32:	2280      	movs	r2, #128	; 0x80
 8002b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002b36:	480b      	ldr	r0, [pc, #44]	; (8002b64 <MX_TIM16_Init+0x60>)
 8002b38:	f006 fbfe 	bl	8009338 <HAL_TIM_Base_Init>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002b42:	f7ff faef 	bl	8002124 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8002b46:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002b4a:	f7ff ffc2 	bl	8002ad2 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2100      	movs	r1, #0
 8002b52:	201c      	movs	r0, #28
 8002b54:	f002 f91b 	bl	8004d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002b58:	201c      	movs	r0, #28
 8002b5a:	f002 f932 	bl	8004dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM16_Init 2 */

}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000718 	.word	0x20000718
 8002b68:	40014400 	.word	0x40014400

08002b6c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002b70:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <MX_TIM17_Init+0x5c>)
 8002b72:	4a16      	ldr	r2, [pc, #88]	; (8002bcc <MX_TIM17_Init+0x60>)
 8002b74:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002b76:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <MX_TIM17_Init+0x5c>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7c:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <MX_TIM17_Init+0x5c>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002b82:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <MX_TIM17_Init+0x5c>)
 8002b84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b88:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b8a:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <MX_TIM17_Init+0x5c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002b90:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <MX_TIM17_Init+0x5c>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b96:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <MX_TIM17_Init+0x5c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002b9c:	480a      	ldr	r0, [pc, #40]	; (8002bc8 <MX_TIM17_Init+0x5c>)
 8002b9e:	f006 fbcb 	bl	8009338 <HAL_TIM_Base_Init>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002ba8:	f7ff fabc 	bl	8002124 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002bac:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002bb0:	f7ff ff8f 	bl	8002ad2 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	201d      	movs	r0, #29
 8002bba:	f002 f8e8 	bl	8004d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002bbe:	201d      	movs	r0, #29
 8002bc0:	f002 f8ff 	bl	8004dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM17_Init 2 */

}
 8002bc4:	bf00      	nop
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000764 	.word	0x20000764
 8002bcc:	40014800 	.word	0x40014800

08002bd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a12      	ldr	r2, [pc, #72]	; (8002c28 <HAL_TIM_Base_MspInit+0x58>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d10c      	bne.n	8002bfc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002be2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002be6:	f7ff ff74 	bl	8002ad2 <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002bea:	2200      	movs	r2, #0
 8002bec:	2100      	movs	r1, #0
 8002bee:	201c      	movs	r0, #28
 8002bf0:	f002 f8cd 	bl	8004d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002bf4:	201c      	movs	r0, #28
 8002bf6:	f002 f8e4 	bl	8004dc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002bfa:	e010      	b.n	8002c1e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM17)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <HAL_TIM_Base_MspInit+0x5c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d10b      	bne.n	8002c1e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002c06:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002c0a:	f7ff ff62 	bl	8002ad2 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002c0e:	2200      	movs	r2, #0
 8002c10:	2100      	movs	r1, #0
 8002c12:	201d      	movs	r0, #29
 8002c14:	f002 f8bb 	bl	8004d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002c18:	201d      	movs	r0, #29
 8002c1a:	f002 f8d2 	bl	8004dc2 <HAL_NVIC_EnableIRQ>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40014400 	.word	0x40014400
 8002c2c:	40014800 	.word	0x40014800

08002c30 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr
	...

08002c48 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002c52:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <TIMER_IF_Init+0x5c>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	f083 0301 	eor.w	r3, r3, #1
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01b      	beq.n	8002c98 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002c60:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <TIMER_IF_Init+0x60>)
 8002c62:	f04f 32ff 	mov.w	r2, #4294967295
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002c68:	f7ff fb02 	bl	8002270 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002c6c:	f000 f856 	bl	8002d1c <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002c70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c74:	480c      	ldr	r0, [pc, #48]	; (8002ca8 <TIMER_IF_Init+0x60>)
 8002c76:	f005 fcad 	bl	80085d4 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <TIMER_IF_Init+0x60>)
 8002c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c80:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002c82:	4809      	ldr	r0, [pc, #36]	; (8002ca8 <TIMER_IF_Init+0x60>)
 8002c84:	f005 fde4 	bl	8008850 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f000 f9d3 	bl	8003034 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002c8e:	f000 f85f 	bl	8002d50 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002c92:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <TIMER_IF_Init+0x5c>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002c98:	79fb      	ldrb	r3, [r7, #7]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	200007b0 	.word	0x200007b0
 8002ca8:	200006c8 	.word	0x200006c8

08002cac <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08e      	sub	sp, #56	; 0x38
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002cba:	f107 0308 	add.w	r3, r7, #8
 8002cbe:	222c      	movs	r2, #44	; 0x2c
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f01c f9e8 	bl	801f098 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002cc8:	f000 f828 	bl	8002d1c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002ccc:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <TIMER_IF_StartTimer+0x68>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002ce4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002ce8:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002cea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cee:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002cf0:	f107 0308 	add.w	r3, r7, #8
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4807      	ldr	r0, [pc, #28]	; (8002d18 <TIMER_IF_StartTimer+0x6c>)
 8002cfa:	f005 fb5f 	bl	80083bc <HAL_RTC_SetAlarm_IT>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002d04:	f7ff fa0e 	bl	8002124 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002d08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3738      	adds	r7, #56	; 0x38
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	200007b4 	.word	0x200007b4
 8002d18:	200006c8 	.word	0x200006c8

08002d1c <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002d26:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <TIMER_IF_StopTimer+0x2c>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002d2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d30:	4806      	ldr	r0, [pc, #24]	; (8002d4c <TIMER_IF_StopTimer+0x30>)
 8002d32:	f005 fc4f 	bl	80085d4 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <TIMER_IF_StopTimer+0x30>)
 8002d38:	f04f 32ff 	mov.w	r2, #4294967295
 8002d3c:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40002800 	.word	0x40002800
 8002d4c:	200006c8 	.word	0x200006c8

08002d50 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002d54:	f000 f98e 	bl	8003074 <GetTimerTicks>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	4a03      	ldr	r2, [pc, #12]	; (8002d68 <TIMER_IF_SetTimerContext+0x18>)
 8002d5c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002d5e:	4b02      	ldr	r3, [pc, #8]	; (8002d68 <TIMER_IF_SetTimerContext+0x18>)
 8002d60:	681b      	ldr	r3, [r3, #0]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	200007b4 	.word	0x200007b4

08002d6c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002d70:	4b02      	ldr	r3, [pc, #8]	; (8002d7c <TIMER_IF_GetTimerContext+0x10>)
 8002d72:	681b      	ldr	r3, [r3, #0]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	200007b4 	.word	0x200007b4

08002d80 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002d8a:	f000 f973 	bl	8003074 <GetTimerTicks>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002d98:	687b      	ldr	r3, [r7, #4]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	200007b4 	.word	0x200007b4

08002da8 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <TIMER_IF_GetTimerValue+0x24>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002dba:	f000 f95b 	bl	8003074 <GetTimerTicks>
 8002dbe:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002dc0:	687b      	ldr	r3, [r7, #4]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	200007b0 	.word	0x200007b0

08002dd0 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002dda:	2303      	movs	r3, #3
 8002ddc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002dde:	687b      	ldr	r3, [r7, #4]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr

08002dea <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002dea:	b5b0      	push	{r4, r5, r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002df2:	2100      	movs	r1, #0
 8002df4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	2000      	movs	r0, #0
 8002dfa:	460a      	mov	r2, r1
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	0d95      	lsrs	r5, r2, #22
 8002e00:	0294      	lsls	r4, r2, #10
 8002e02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	4629      	mov	r1, r5
 8002e0e:	f7fe f9a3 	bl	8001158 <__aeabi_uldivmod>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4613      	mov	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bdb0      	pop	{r4, r5, r7, pc}

08002e24 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002e24:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e28:	b085      	sub	sp, #20
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002e2e:	2100      	movs	r1, #0
 8002e30:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	2000      	movs	r0, #0
 8002e36:	460c      	mov	r4, r1
 8002e38:	4605      	mov	r5, r0
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	4629      	mov	r1, r5
 8002e3e:	f04f 0a00 	mov.w	sl, #0
 8002e42:	f04f 0b00 	mov.w	fp, #0
 8002e46:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002e4a:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002e4e:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002e52:	4650      	mov	r0, sl
 8002e54:	4659      	mov	r1, fp
 8002e56:	1b02      	subs	r2, r0, r4
 8002e58:	eb61 0305 	sbc.w	r3, r1, r5
 8002e5c:	f04f 0000 	mov.w	r0, #0
 8002e60:	f04f 0100 	mov.w	r1, #0
 8002e64:	0099      	lsls	r1, r3, #2
 8002e66:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002e6a:	0090      	lsls	r0, r2, #2
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	eb12 0804 	adds.w	r8, r2, r4
 8002e74:	eb43 0905 	adc.w	r9, r3, r5
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	f04f 0300 	mov.w	r3, #0
 8002e80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e8c:	4690      	mov	r8, r2
 8002e8e:	4699      	mov	r9, r3
 8002e90:	4640      	mov	r0, r8
 8002e92:	4649      	mov	r1, r9
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	0a82      	lsrs	r2, r0, #10
 8002e9e:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002ea2:	0a8b      	lsrs	r3, r1, #10
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002eb4:	4770      	bx	lr

08002eb6 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b084      	sub	sp, #16
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff ff93 	bl	8002dea <TIMER_IF_Convert_ms2Tick>
 8002ec4:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002ec6:	f000 f8d5 	bl	8003074 <GetTimerTicks>
 8002eca:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002ecc:	e000      	b.n	8002ed0 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002ece:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002ed0:	f000 f8d0 	bl	8003074 <GetTimerTicks>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d8f6      	bhi.n	8002ece <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002ee0:	bf00      	nop
 8002ee2:	bf00      	nop
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002ef2:	f01b fcc5 	bl	801e880 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002f06:	f000 f8a5 	bl	8003054 <TIMER_IF_BkUp_Read_MSBticks>
 8002f0a:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 f88f 	bl	8003034 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002f1e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f22:	b08c      	sub	sp, #48	; 0x30
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002f2c:	f000 f8a2 	bl	8003074 <GetTimerTicks>
 8002f30:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002f32:	f000 f88f 	bl	8003054 <TIMER_IF_BkUp_Read_MSBticks>
 8002f36:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	60fa      	str	r2, [r7, #12]
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	000b      	movs	r3, r1
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f50:	2000      	movs	r0, #0
 8002f52:	460c      	mov	r4, r1
 8002f54:	4605      	mov	r5, r0
 8002f56:	eb12 0804 	adds.w	r8, r2, r4
 8002f5a:	eb43 0905 	adc.w	r9, r3, r5
 8002f5e:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002f62:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	0a82      	lsrs	r2, r0, #10
 8002f70:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002f74:	0a8b      	lsrs	r3, r1, #10
 8002f76:	4613      	mov	r3, r2
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002f88:	f04f 0b00 	mov.w	fp, #0
 8002f8c:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff ff46 	bl	8002e24 <TIMER_IF_Convert_Tick2ms>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3730      	adds	r7, #48	; 0x30
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002fac <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4803      	ldr	r0, [pc, #12]	; (8002fc8 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002fba:	f005 fcdb 	bl	8008974 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	200006c8 	.word	0x200006c8

08002fcc <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	4803      	ldr	r0, [pc, #12]	; (8002fe8 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002fda:	f005 fccb 	bl	8008974 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	200006c8 	.word	0x200006c8

08002fec <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4804      	ldr	r0, [pc, #16]	; (800300c <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002ffa:	f005 fcd3 	bl	80089a4 <HAL_RTCEx_BKUPRead>
 8002ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8003000:	687b      	ldr	r3, [r7, #4]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	200006c8 	.word	0x200006c8

08003010 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800301a:	2101      	movs	r1, #1
 800301c:	4804      	ldr	r0, [pc, #16]	; (8003030 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800301e:	f005 fcc1 	bl	80089a4 <HAL_RTCEx_BKUPRead>
 8003022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8003024:	687b      	ldr	r3, [r7, #4]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	200006c8 	.word	0x200006c8

08003034 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	2102      	movs	r1, #2
 8003040:	4803      	ldr	r0, [pc, #12]	; (8003050 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8003042:	f005 fc97 	bl	8008974 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	200006c8 	.word	0x200006c8

08003054 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800305a:	2102      	movs	r1, #2
 800305c:	4804      	ldr	r0, [pc, #16]	; (8003070 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800305e:	f005 fca1 	bl	80089a4 <HAL_RTCEx_BKUPRead>
 8003062:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8003064:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	200006c8 	.word	0x200006c8

08003074 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800307a:	480b      	ldr	r0, [pc, #44]	; (80030a8 <GetTimerTicks+0x34>)
 800307c:	f7ff fdd8 	bl	8002c30 <LL_RTC_TIME_GetSubSecond>
 8003080:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8003082:	e003      	b.n	800308c <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8003084:	4808      	ldr	r0, [pc, #32]	; (80030a8 <GetTimerTicks+0x34>)
 8003086:	f7ff fdd3 	bl	8002c30 <LL_RTC_TIME_GetSubSecond>
 800308a:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800308c:	4806      	ldr	r0, [pc, #24]	; (80030a8 <GetTimerTicks+0x34>)
 800308e:	f7ff fdcf 	bl	8002c30 <LL_RTC_TIME_GetSubSecond>
 8003092:	4602      	mov	r2, r0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4293      	cmp	r3, r2
 8003098:	d1f4      	bne.n	8003084 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40002800 	.word	0x40002800

080030ac <LL_AHB2_GRP1_EnableClock>:
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80030b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80030c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4013      	ands	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030d0:	68fb      	ldr	r3, [r7, #12]
}
 80030d2:	bf00      	nop
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <LL_APB1_GRP1_EnableClock>:
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80030e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80030ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80030f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4013      	ands	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003100:	68fb      	ldr	r3, [r7, #12]
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr

0800310c <LL_APB1_GRP1_DisableClock>:
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003118:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	43db      	mvns	r3, r3
 800311e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003122:	4013      	ands	r3, r2
 8003124:	658b      	str	r3, [r1, #88]	; 0x58
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr

08003130 <LL_APB2_GRP1_EnableClock>:
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800313c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800313e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4313      	orrs	r3, r2
 8003146:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4013      	ands	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003154:	68fb      	ldr	r3, [r7, #12]
}
 8003156:	bf00      	nop
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <LL_APB2_GRP1_DisableClock>:
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8003168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800316c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	43db      	mvns	r3, r3
 8003172:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003176:	4013      	ands	r3, r2
 8003178:	660b      	str	r3, [r1, #96]	; 0x60
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <LL_SYSCFG_EnableFastModePlus>:
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 800318c:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <LL_SYSCFG_EnableFastModePlus+0x20>)
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	4904      	ldr	r1, [pc, #16]	; (80031a4 <LL_SYSCFG_EnableFastModePlus+0x20>)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4313      	orrs	r3, r2
 8003196:	604b      	str	r3, [r1, #4]
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40010000 	.word	0x40010000

080031a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031ac:	4b26      	ldr	r3, [pc, #152]	; (8003248 <MX_USART1_UART_Init+0xa0>)
 80031ae:	4a27      	ldr	r2, [pc, #156]	; (800324c <MX_USART1_UART_Init+0xa4>)
 80031b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031b2:	4b25      	ldr	r3, [pc, #148]	; (8003248 <MX_USART1_UART_Init+0xa0>)
 80031b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031ba:	4b23      	ldr	r3, [pc, #140]	; (8003248 <MX_USART1_UART_Init+0xa0>)
 80031bc:	2200      	movs	r2, #0
 80031be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031c0:	4b21      	ldr	r3, [pc, #132]	; (8003248 <MX_USART1_UART_Init+0xa0>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031c6:	4b20      	ldr	r3, [pc, #128]	; (8003248 <MX_USART1_UART_Init+0xa0>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031cc:	4b1e      	ldr	r3, [pc, #120]	; (8003248 <MX_USART1_UART_Init+0xa0>)
 80031ce:	220c      	movs	r2, #12
 80031d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031d2:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <MX_USART1_UART_Init+0xa0>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031d8:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <MX_USART1_UART_Init+0xa0>)
 80031da:	2200      	movs	r2, #0
 80031dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031de:	4b1a      	ldr	r3, [pc, #104]	; (8003248 <MX_USART1_UART_Init+0xa0>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031e4:	4b18      	ldr	r3, [pc, #96]	; (8003248 <MX_USART1_UART_Init+0xa0>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 80031ea:	4b17      	ldr	r3, [pc, #92]	; (8003248 <MX_USART1_UART_Init+0xa0>)
 80031ec:	2240      	movs	r2, #64	; 0x40
 80031ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 80031f0:	4b15      	ldr	r3, [pc, #84]	; (8003248 <MX_USART1_UART_Init+0xa0>)
 80031f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80031f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 80031f8:	4b13      	ldr	r3, [pc, #76]	; (8003248 <MX_USART1_UART_Init+0xa0>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031fe:	4812      	ldr	r0, [pc, #72]	; (8003248 <MX_USART1_UART_Init+0xa0>)
 8003200:	f006 fb20 	bl	8009844 <HAL_UART_Init>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 800320a:	f7fe ff8b 	bl	8002124 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800320e:	2100      	movs	r1, #0
 8003210:	480d      	ldr	r0, [pc, #52]	; (8003248 <MX_USART1_UART_Init+0xa0>)
 8003212:	f008 fd22 	bl	800bc5a <HAL_UARTEx_SetTxFifoThreshold>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 800321c:	f7fe ff82 	bl	8002124 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003220:	2100      	movs	r1, #0
 8003222:	4809      	ldr	r0, [pc, #36]	; (8003248 <MX_USART1_UART_Init+0xa0>)
 8003224:	f008 fd57 	bl	800bcd6 <HAL_UARTEx_SetRxFifoThreshold>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800322e:	f7fe ff79 	bl	8002124 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8003232:	4805      	ldr	r0, [pc, #20]	; (8003248 <MX_USART1_UART_Init+0xa0>)
 8003234:	f008 fc9e 	bl	800bb74 <HAL_UARTEx_EnableFifoMode>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 800323e:	f7fe ff71 	bl	8002124 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	200007b8 	.word	0x200007b8
 800324c:	40013800 	.word	0x40013800

08003250 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003254:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <MX_USART2_UART_Init+0x94>)
 8003256:	4a24      	ldr	r2, [pc, #144]	; (80032e8 <MX_USART2_UART_Init+0x98>)
 8003258:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800325a:	4b22      	ldr	r3, [pc, #136]	; (80032e4 <MX_USART2_UART_Init+0x94>)
 800325c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003260:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003262:	4b20      	ldr	r3, [pc, #128]	; (80032e4 <MX_USART2_UART_Init+0x94>)
 8003264:	2200      	movs	r2, #0
 8003266:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003268:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <MX_USART2_UART_Init+0x94>)
 800326a:	2200      	movs	r2, #0
 800326c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800326e:	4b1d      	ldr	r3, [pc, #116]	; (80032e4 <MX_USART2_UART_Init+0x94>)
 8003270:	2200      	movs	r2, #0
 8003272:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <MX_USART2_UART_Init+0x94>)
 8003276:	220c      	movs	r2, #12
 8003278:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800327a:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <MX_USART2_UART_Init+0x94>)
 800327c:	2200      	movs	r2, #0
 800327e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8003280:	4b18      	ldr	r3, [pc, #96]	; (80032e4 <MX_USART2_UART_Init+0x94>)
 8003282:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003286:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003288:	4b16      	ldr	r3, [pc, #88]	; (80032e4 <MX_USART2_UART_Init+0x94>)
 800328a:	2200      	movs	r2, #0
 800328c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800328e:	4b15      	ldr	r3, [pc, #84]	; (80032e4 <MX_USART2_UART_Init+0x94>)
 8003290:	2200      	movs	r2, #0
 8003292:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003294:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <MX_USART2_UART_Init+0x94>)
 8003296:	2200      	movs	r2, #0
 8003298:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800329a:	4812      	ldr	r0, [pc, #72]	; (80032e4 <MX_USART2_UART_Init+0x94>)
 800329c:	f006 fad2 	bl	8009844 <HAL_UART_Init>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80032a6:	f7fe ff3d 	bl	8002124 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032aa:	2100      	movs	r1, #0
 80032ac:	480d      	ldr	r0, [pc, #52]	; (80032e4 <MX_USART2_UART_Init+0x94>)
 80032ae:	f008 fcd4 	bl	800bc5a <HAL_UARTEx_SetTxFifoThreshold>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80032b8:	f7fe ff34 	bl	8002124 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032bc:	2100      	movs	r1, #0
 80032be:	4809      	ldr	r0, [pc, #36]	; (80032e4 <MX_USART2_UART_Init+0x94>)
 80032c0:	f008 fd09 	bl	800bcd6 <HAL_UARTEx_SetRxFifoThreshold>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80032ca:	f7fe ff2b 	bl	8002124 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80032ce:	4805      	ldr	r0, [pc, #20]	; (80032e4 <MX_USART2_UART_Init+0x94>)
 80032d0:	f008 fc8b 	bl	800bbea <HAL_UARTEx_DisableFifoMode>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80032da:	f7fe ff23 	bl	8002124 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80032de:	bf00      	nop
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000848 	.word	0x20000848
 80032e8:	40004400 	.word	0x40004400

080032ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b09a      	sub	sp, #104	; 0x68
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	60da      	str	r2, [r3, #12]
 8003302:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 8003304:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003312:	f107 030c 	add.w	r3, r7, #12
 8003316:	2238      	movs	r2, #56	; 0x38
 8003318:	2100      	movs	r1, #0
 800331a:	4618      	mov	r0, r3
 800331c:	f01b febc 	bl	801f098 <memset>
  if(uartHandle->Instance==USART1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a83      	ldr	r2, [pc, #524]	; (8003534 <HAL_UART_MspInit+0x248>)
 8003326:	4293      	cmp	r3, r2
 8003328:	f040 80a3 	bne.w	8003472 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800332c:	2301      	movs	r3, #1
 800332e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003330:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003334:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003336:	f107 030c 	add.w	r3, r7, #12
 800333a:	4618      	mov	r0, r3
 800333c:	f004 feaa 	bl	8008094 <HAL_RCCEx_PeriphCLKConfig>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 8003346:	f7fe feed 	bl	8002124 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800334a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800334e:	f7ff feef 	bl	8003130 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003352:	2002      	movs	r0, #2
 8003354:	f7ff feaa 	bl	80030ac <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8003358:	23c0      	movs	r3, #192	; 0xc0
 800335a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335c:	2302      	movs	r3, #2
 800335e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003360:	2301      	movs	r3, #1
 8003362:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003364:	2301      	movs	r3, #1
 8003366:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003368:	2307      	movs	r3, #7
 800336a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800336c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003370:	4619      	mov	r1, r3
 8003372:	4871      	ldr	r0, [pc, #452]	; (8003538 <HAL_UART_MspInit+0x24c>)
 8003374:	f002 fc20 	bl	8005bb8 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8003378:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800337c:	f7ff ff02 	bl	8003184 <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8003380:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003384:	f7ff fefe 	bl	8003184 <LL_SYSCFG_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8003388:	4b6c      	ldr	r3, [pc, #432]	; (800353c <HAL_UART_MspInit+0x250>)
 800338a:	4a6d      	ldr	r2, [pc, #436]	; (8003540 <HAL_UART_MspInit+0x254>)
 800338c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800338e:	4b6b      	ldr	r3, [pc, #428]	; (800353c <HAL_UART_MspInit+0x250>)
 8003390:	2212      	movs	r2, #18
 8003392:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003394:	4b69      	ldr	r3, [pc, #420]	; (800353c <HAL_UART_MspInit+0x250>)
 8003396:	2210      	movs	r2, #16
 8003398:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800339a:	4b68      	ldr	r3, [pc, #416]	; (800353c <HAL_UART_MspInit+0x250>)
 800339c:	2200      	movs	r2, #0
 800339e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033a0:	4b66      	ldr	r3, [pc, #408]	; (800353c <HAL_UART_MspInit+0x250>)
 80033a2:	2280      	movs	r2, #128	; 0x80
 80033a4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033a6:	4b65      	ldr	r3, [pc, #404]	; (800353c <HAL_UART_MspInit+0x250>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033ac:	4b63      	ldr	r3, [pc, #396]	; (800353c <HAL_UART_MspInit+0x250>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80033b2:	4b62      	ldr	r3, [pc, #392]	; (800353c <HAL_UART_MspInit+0x250>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033b8:	4b60      	ldr	r3, [pc, #384]	; (800353c <HAL_UART_MspInit+0x250>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80033be:	485f      	ldr	r0, [pc, #380]	; (800353c <HAL_UART_MspInit+0x250>)
 80033c0:	f001 fd1c 	bl	8004dfc <HAL_DMA_Init>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 80033ca:	f7fe feab 	bl	8002124 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a5a      	ldr	r2, [pc, #360]	; (800353c <HAL_UART_MspInit+0x250>)
 80033d2:	679a      	str	r2, [r3, #120]	; 0x78
 80033d4:	4a59      	ldr	r2, [pc, #356]	; (800353c <HAL_UART_MspInit+0x250>)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80033da:	4b5a      	ldr	r3, [pc, #360]	; (8003544 <HAL_UART_MspInit+0x258>)
 80033dc:	4a5a      	ldr	r2, [pc, #360]	; (8003548 <HAL_UART_MspInit+0x25c>)
 80033de:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80033e0:	4b58      	ldr	r3, [pc, #352]	; (8003544 <HAL_UART_MspInit+0x258>)
 80033e2:	2211      	movs	r2, #17
 80033e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033e6:	4b57      	ldr	r3, [pc, #348]	; (8003544 <HAL_UART_MspInit+0x258>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033ec:	4b55      	ldr	r3, [pc, #340]	; (8003544 <HAL_UART_MspInit+0x258>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033f2:	4b54      	ldr	r3, [pc, #336]	; (8003544 <HAL_UART_MspInit+0x258>)
 80033f4:	2280      	movs	r2, #128	; 0x80
 80033f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033f8:	4b52      	ldr	r3, [pc, #328]	; (8003544 <HAL_UART_MspInit+0x258>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033fe:	4b51      	ldr	r3, [pc, #324]	; (8003544 <HAL_UART_MspInit+0x258>)
 8003400:	2200      	movs	r2, #0
 8003402:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003404:	4b4f      	ldr	r3, [pc, #316]	; (8003544 <HAL_UART_MspInit+0x258>)
 8003406:	2200      	movs	r2, #0
 8003408:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800340a:	4b4e      	ldr	r3, [pc, #312]	; (8003544 <HAL_UART_MspInit+0x258>)
 800340c:	2200      	movs	r2, #0
 800340e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003410:	484c      	ldr	r0, [pc, #304]	; (8003544 <HAL_UART_MspInit+0x258>)
 8003412:	f001 fcf3 	bl	8004dfc <HAL_DMA_Init>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 800341c:	f7fe fe82 	bl	8002124 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8003420:	2300      	movs	r3, #0
 8003422:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8003424:	2300      	movs	r3, #0
 8003426:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 8003428:	2300      	movs	r3, #0
 800342a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 800342e:	2301      	movs	r3, #1
 8003430:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 8003434:	2301      	movs	r3, #1
 8003436:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 8003438:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800343c:	4619      	mov	r1, r3
 800343e:	4841      	ldr	r0, [pc, #260]	; (8003544 <HAL_UART_MspInit+0x258>)
 8003440:	f002 f8c6 	bl	80055d0 <HAL_DMAEx_ConfigMuxSync>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 800344a:	f7fe fe6b 	bl	8002124 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a3c      	ldr	r2, [pc, #240]	; (8003544 <HAL_UART_MspInit+0x258>)
 8003452:	67da      	str	r2, [r3, #124]	; 0x7c
 8003454:	4a3b      	ldr	r2, [pc, #236]	; (8003544 <HAL_UART_MspInit+0x258>)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800345a:	2200      	movs	r2, #0
 800345c:	2102      	movs	r1, #2
 800345e:	2024      	movs	r0, #36	; 0x24
 8003460:	f001 fc95 	bl	8004d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003464:	2024      	movs	r0, #36	; 0x24
 8003466:	f001 fcac 	bl	8004dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800346a:	200c      	movs	r0, #12
 800346c:	f001 fca9 	bl	8004dc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003470:	e05c      	b.n	800352c <HAL_UART_MspInit+0x240>
  else if(uartHandle->Instance==USART2)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a35      	ldr	r2, [pc, #212]	; (800354c <HAL_UART_MspInit+0x260>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d157      	bne.n	800352c <HAL_UART_MspInit+0x240>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800347c:	2302      	movs	r3, #2
 800347e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003480:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8003484:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003486:	f107 030c 	add.w	r3, r7, #12
 800348a:	4618      	mov	r0, r3
 800348c:	f004 fe02 	bl	8008094 <HAL_RCCEx_PeriphCLKConfig>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_UART_MspInit+0x1ae>
      Error_Handler();
 8003496:	f7fe fe45 	bl	8002124 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800349a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800349e:	f7ff fe1d 	bl	80030dc <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a2:	2001      	movs	r0, #1
 80034a4:	f7ff fe02 	bl	80030ac <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80034a8:	230c      	movs	r3, #12
 80034aa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ac:	2302      	movs	r3, #2
 80034ae:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034b0:	2301      	movs	r3, #1
 80034b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80034b4:	2301      	movs	r3, #1
 80034b6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034b8:	2307      	movs	r3, #7
 80034ba:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034c0:	4619      	mov	r1, r3
 80034c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034c6:	f002 fb77 	bl	8005bb8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 80034ca:	4b21      	ldr	r3, [pc, #132]	; (8003550 <HAL_UART_MspInit+0x264>)
 80034cc:	4a21      	ldr	r2, [pc, #132]	; (8003554 <HAL_UART_MspInit+0x268>)
 80034ce:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80034d0:	4b1f      	ldr	r3, [pc, #124]	; (8003550 <HAL_UART_MspInit+0x264>)
 80034d2:	2213      	movs	r2, #19
 80034d4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034d6:	4b1e      	ldr	r3, [pc, #120]	; (8003550 <HAL_UART_MspInit+0x264>)
 80034d8:	2200      	movs	r2, #0
 80034da:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034dc:	4b1c      	ldr	r3, [pc, #112]	; (8003550 <HAL_UART_MspInit+0x264>)
 80034de:	2200      	movs	r2, #0
 80034e0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034e2:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <HAL_UART_MspInit+0x264>)
 80034e4:	2280      	movs	r2, #128	; 0x80
 80034e6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034e8:	4b19      	ldr	r3, [pc, #100]	; (8003550 <HAL_UART_MspInit+0x264>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034ee:	4b18      	ldr	r3, [pc, #96]	; (8003550 <HAL_UART_MspInit+0x264>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80034f4:	4b16      	ldr	r3, [pc, #88]	; (8003550 <HAL_UART_MspInit+0x264>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034fa:	4b15      	ldr	r3, [pc, #84]	; (8003550 <HAL_UART_MspInit+0x264>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003500:	4813      	ldr	r0, [pc, #76]	; (8003550 <HAL_UART_MspInit+0x264>)
 8003502:	f001 fc7b 	bl	8004dfc <HAL_DMA_Init>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_UART_MspInit+0x224>
      Error_Handler();
 800350c:	f7fe fe0a 	bl	8002124 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a0f      	ldr	r2, [pc, #60]	; (8003550 <HAL_UART_MspInit+0x264>)
 8003514:	67da      	str	r2, [r3, #124]	; 0x7c
 8003516:	4a0e      	ldr	r2, [pc, #56]	; (8003550 <HAL_UART_MspInit+0x264>)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800351c:	2200      	movs	r2, #0
 800351e:	2100      	movs	r1, #0
 8003520:	2025      	movs	r0, #37	; 0x25
 8003522:	f001 fc34 	bl	8004d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003526:	2025      	movs	r0, #37	; 0x25
 8003528:	f001 fc4b 	bl	8004dc2 <HAL_NVIC_EnableIRQ>
}
 800352c:	bf00      	nop
 800352e:	3768      	adds	r7, #104	; 0x68
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40013800 	.word	0x40013800
 8003538:	48000400 	.word	0x48000400
 800353c:	200008d8 	.word	0x200008d8
 8003540:	40020008 	.word	0x40020008
 8003544:	20000938 	.word	0x20000938
 8003548:	4002001c 	.word	0x4002001c
 800354c:	40004400 	.word	0x40004400
 8003550:	20000998 	.word	0x20000998
 8003554:	40020030 	.word	0x40020030

08003558 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a19      	ldr	r2, [pc, #100]	; (80035cc <HAL_UART_MspDeInit+0x74>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d115      	bne.n	8003596 <HAL_UART_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800356a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800356e:	f7ff fdf7 	bl	8003160 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8003572:	21c0      	movs	r1, #192	; 0xc0
 8003574:	4816      	ldr	r0, [pc, #88]	; (80035d0 <HAL_UART_MspDeInit+0x78>)
 8003576:	f002 fc7f 	bl	8005e78 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800357e:	4618      	mov	r0, r3
 8003580:	f001 fce4 	bl	8004f4c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003588:	4618      	mov	r0, r3
 800358a:	f001 fcdf 	bl	8004f4c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800358e:	2024      	movs	r0, #36	; 0x24
 8003590:	f001 fc25 	bl	8004dde <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8003594:	e015      	b.n	80035c2 <HAL_UART_MspDeInit+0x6a>
  else if(uartHandle->Instance==USART2)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a0e      	ldr	r2, [pc, #56]	; (80035d4 <HAL_UART_MspDeInit+0x7c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d110      	bne.n	80035c2 <HAL_UART_MspDeInit+0x6a>
    __HAL_RCC_USART2_CLK_DISABLE();
 80035a0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80035a4:	f7ff fdb2 	bl	800310c <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 80035a8:	210c      	movs	r1, #12
 80035aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035ae:	f002 fc63 	bl	8005e78 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035b6:	4618      	mov	r0, r3
 80035b8:	f001 fcc8 	bl	8004f4c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80035bc:	2025      	movs	r0, #37	; 0x25
 80035be:	f001 fc0e 	bl	8004dde <HAL_NVIC_DisableIRQ>
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40013800 	.word	0x40013800
 80035d0:	48000400 	.word	0x48000400
 80035d4:	40004400 	.word	0x40004400

080035d8 <LL_APB2_GRP1_ForceReset>:
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80035e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	640b      	str	r3, [r1, #64]	; 0x40
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr

080035fa <LL_APB2_GRP1_ReleaseReset>:
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8003602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	43db      	mvns	r3, r3
 800360c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003610:	4013      	ands	r3, r2
 8003612:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr
	...

08003620 <LL_EXTI_EnableIT_0_31>:
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003628:	4b06      	ldr	r3, [pc, #24]	; (8003644 <LL_EXTI_EnableIT_0_31+0x24>)
 800362a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800362e:	4905      	ldr	r1, [pc, #20]	; (8003644 <LL_EXTI_EnableIT_0_31+0x24>)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	58000800 	.word	0x58000800

08003648 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003650:	4a07      	ldr	r2, [pc, #28]	; (8003670 <vcom_Init+0x28>)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8003656:	f7fe f841 	bl	80016dc <MX_DMA_Init>
  MX_USART1_UART_Init();
 800365a:	f7ff fda5 	bl	80031a8 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 800365e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003662:	f7ff ffdd 	bl	8003620 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8003666:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003668:	4618      	mov	r0, r3
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	200009fc 	.word	0x200009fc

08003674 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8003678:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800367c:	f7ff ffac 	bl	80035d8 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8003680:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003684:	f7ff ffb9 	bl	80035fa <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8003688:	4804      	ldr	r0, [pc, #16]	; (800369c <vcom_DeInit+0x28>)
 800368a:	f7ff ff65 	bl	8003558 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800368e:	200f      	movs	r0, #15
 8003690:	f001 fba5 	bl	8004dde <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8003694:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8003696:	4618      	mov	r0, r3
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	200007b8 	.word	0x200007b8

080036a0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80036ac:	887b      	ldrh	r3, [r7, #2]
 80036ae:	461a      	mov	r2, r3
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	4804      	ldr	r0, [pc, #16]	; (80036c4 <vcom_Trace_DMA+0x24>)
 80036b4:	f006 f96c 	bl	8009990 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80036b8:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	200007b8 	.word	0x200007b8

080036c8 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80036d0:	4a19      	ldr	r2, [pc, #100]	; (8003738 <vcom_ReceiveInit+0x70>)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80036d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80036da:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 80036dc:	f107 0308 	add.w	r3, r7, #8
 80036e0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80036e4:	4815      	ldr	r0, [pc, #84]	; (800373c <vcom_ReceiveInit+0x74>)
 80036e6:	f008 f9b8 	bl	800ba5a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80036ea:	bf00      	nop
 80036ec:	4b13      	ldr	r3, [pc, #76]	; (800373c <vcom_ReceiveInit+0x74>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036fa:	d0f7      	beq.n	80036ec <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80036fc:	bf00      	nop
 80036fe:	4b0f      	ldr	r3, [pc, #60]	; (800373c <vcom_ReceiveInit+0x74>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003708:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800370c:	d1f7      	bne.n	80036fe <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800370e:	4b0b      	ldr	r3, [pc, #44]	; (800373c <vcom_ReceiveInit+0x74>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	4b09      	ldr	r3, [pc, #36]	; (800373c <vcom_ReceiveInit+0x74>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800371c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 800371e:	4807      	ldr	r0, [pc, #28]	; (800373c <vcom_ReceiveInit+0x74>)
 8003720:	f008 f9f6 	bl	800bb10 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8003724:	2201      	movs	r2, #1
 8003726:	4906      	ldr	r1, [pc, #24]	; (8003740 <vcom_ReceiveInit+0x78>)
 8003728:	4804      	ldr	r0, [pc, #16]	; (800373c <vcom_ReceiveInit+0x74>)
 800372a:	f006 f8db 	bl	80098e4 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800372e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20000a00 	.word	0x20000a00
 800373c:	200007b8 	.word	0x200007b8
 8003740:	200009f8 	.word	0x200009f8

08003744 <vcom_Resume>:

void vcom_Resume(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003748:	4808      	ldr	r0, [pc, #32]	; (800376c <vcom_Resume+0x28>)
 800374a:	f006 f87b 	bl	8009844 <HAL_UART_Init>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <vcom_Resume+0x14>
  {
    Error_Handler();
 8003754:	f7fe fce6 	bl	8002124 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003758:	4805      	ldr	r0, [pc, #20]	; (8003770 <vcom_Resume+0x2c>)
 800375a:	f001 fb4f 	bl	8004dfc <HAL_DMA_Init>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <vcom_Resume+0x24>
  {
    Error_Handler();
 8003764:	f7fe fcde 	bl	8002124 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8003768:	bf00      	nop
 800376a:	bd80      	pop	{r7, pc}
 800376c:	200007b8 	.word	0x200007b8
 8003770:	200008d8 	.word	0x200008d8

08003774 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a05      	ldr	r2, [pc, #20]	; (8003798 <HAL_UART_TxCpltCallback+0x24>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d103      	bne.n	800378e <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8003786:	4b05      	ldr	r3, [pc, #20]	; (800379c <HAL_UART_TxCpltCallback+0x28>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2000      	movs	r0, #0
 800378c:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40013800 	.word	0x40013800
 800379c:	200009fc 	.word	0x200009fc

080037a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a13      	ldr	r2, [pc, #76]	; (80037fc <HAL_UART_RxCpltCallback+0x5c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d113      	bne.n	80037da <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80037b2:	4b13      	ldr	r3, [pc, #76]	; (8003800 <HAL_UART_RxCpltCallback+0x60>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_UART_RxCpltCallback+0x30>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d105      	bne.n	80037d0 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80037c4:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <HAL_UART_RxCpltCallback+0x60>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2200      	movs	r2, #0
 80037ca:	2101      	movs	r1, #1
 80037cc:	480d      	ldr	r0, [pc, #52]	; (8003804 <HAL_UART_RxCpltCallback+0x64>)
 80037ce:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80037d0:	2201      	movs	r2, #1
 80037d2:	490c      	ldr	r1, [pc, #48]	; (8003804 <HAL_UART_RxCpltCallback+0x64>)
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f006 f885 	bl	80098e4 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

      if (huart->Instance == USART2) {
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a0a      	ldr	r2, [pc, #40]	; (8003808 <HAL_UART_RxCpltCallback+0x68>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d106      	bne.n	80037f2 <HAL_UART_RxCpltCallback+0x52>
    	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);        /* Clear IDLE line flag */
 80037e4:	4b09      	ldr	r3, [pc, #36]	; (800380c <HAL_UART_RxCpltCallback+0x6c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2210      	movs	r2, #16
 80037ea:	621a      	str	r2, [r3, #32]
    	  UART2_SET = 1;
 80037ec:	4b08      	ldr	r3, [pc, #32]	; (8003810 <HAL_UART_RxCpltCallback+0x70>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]




  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40013800 	.word	0x40013800
 8003800:	20000a00 	.word	0x20000a00
 8003804:	200009f8 	.word	0x200009f8
 8003808:	40004400 	.word	0x40004400
 800380c:	20000848 	.word	0x20000848
 8003810:	20000008 	.word	0x20000008

08003814 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003814:	480d      	ldr	r0, [pc, #52]	; (800384c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003816:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003818:	f7ff f955 	bl	8002ac6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800381c:	480c      	ldr	r0, [pc, #48]	; (8003850 <LoopForever+0x6>)
  ldr r1, =_edata
 800381e:	490d      	ldr	r1, [pc, #52]	; (8003854 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003820:	4a0d      	ldr	r2, [pc, #52]	; (8003858 <LoopForever+0xe>)
  movs r3, #0
 8003822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003824:	e002      	b.n	800382c <LoopCopyDataInit>

08003826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800382a:	3304      	adds	r3, #4

0800382c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800382c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800382e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003830:	d3f9      	bcc.n	8003826 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003832:	4a0a      	ldr	r2, [pc, #40]	; (800385c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003834:	4c0a      	ldr	r4, [pc, #40]	; (8003860 <LoopForever+0x16>)
  movs r3, #0
 8003836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003838:	e001      	b.n	800383e <LoopFillZerobss>

0800383a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800383a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800383c:	3204      	adds	r2, #4

0800383e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800383e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003840:	d3fb      	bcc.n	800383a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003842:	f01b fc05 	bl	801f050 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003846:	f7fe fa8b 	bl	8001d60 <main>

0800384a <LoopForever>:

LoopForever:
    b LoopForever
 800384a:	e7fe      	b.n	800384a <LoopForever>
  ldr   r0, =_estack
 800384c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003854:	20000584 	.word	0x20000584
  ldr r2, =_sidata
 8003858:	0801fe04 	.word	0x0801fe04
  ldr r2, =_sbss
 800385c:	20000584 	.word	0x20000584
  ldr r4, =_ebss
 8003860:	20002aac 	.word	0x20002aac

08003864 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003864:	e7fe      	b.n	8003864 <ADC_IRQHandler>

08003866 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b086      	sub	sp, #24
 800386a:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800386c:	1d3b      	adds	r3, r7, #4
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	605a      	str	r2, [r3, #4]
 8003874:	609a      	str	r2, [r3, #8]
 8003876:	60da      	str	r2, [r3, #12]
 8003878:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800387a:	2310      	movs	r3, #16
 800387c:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800387e:	2301      	movs	r3, #1
 8003880:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003886:	2303      	movs	r3, #3
 8003888:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800388a:	1d3b      	adds	r3, r7, #4
 800388c:	4619      	mov	r1, r3
 800388e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003892:	f002 f991 	bl	8005bb8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003896:	2320      	movs	r3, #32
 8003898:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800389a:	1d3b      	adds	r3, r7, #4
 800389c:	4619      	mov	r1, r3
 800389e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038a2:	f002 f989 	bl	8005bb8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80038a6:	2200      	movs	r2, #0
 80038a8:	2120      	movs	r1, #32
 80038aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038ae:	f002 fbb1 	bl	8006014 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80038b2:	2200      	movs	r2, #0
 80038b4:	2110      	movs	r1, #16
 80038b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038ba:	f002 fbab 	bl	8006014 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d83f      	bhi.n	8003958 <BSP_RADIO_ConfigRFSwitch+0x90>
 80038d8:	a201      	add	r2, pc, #4	; (adr r2, 80038e0 <BSP_RADIO_ConfigRFSwitch+0x18>)
 80038da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038de:	bf00      	nop
 80038e0:	080038f1 	.word	0x080038f1
 80038e4:	0800390b 	.word	0x0800390b
 80038e8:	08003925 	.word	0x08003925
 80038ec:	0800393f 	.word	0x0800393f
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80038f0:	2200      	movs	r2, #0
 80038f2:	2110      	movs	r1, #16
 80038f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038f8:	f002 fb8c 	bl	8006014 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80038fc:	2200      	movs	r2, #0
 80038fe:	2120      	movs	r1, #32
 8003900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003904:	f002 fb86 	bl	8006014 <HAL_GPIO_WritePin>
      break;      
 8003908:	e027      	b.n	800395a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800390a:	2201      	movs	r2, #1
 800390c:	2110      	movs	r1, #16
 800390e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003912:	f002 fb7f 	bl	8006014 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003916:	2200      	movs	r2, #0
 8003918:	2120      	movs	r1, #32
 800391a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800391e:	f002 fb79 	bl	8006014 <HAL_GPIO_WritePin>
      break;
 8003922:	e01a      	b.n	800395a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003924:	2201      	movs	r2, #1
 8003926:	2110      	movs	r1, #16
 8003928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800392c:	f002 fb72 	bl	8006014 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003930:	2201      	movs	r2, #1
 8003932:	2120      	movs	r1, #32
 8003934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003938:	f002 fb6c 	bl	8006014 <HAL_GPIO_WritePin>
      break;
 800393c:	e00d      	b.n	800395a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800393e:	2200      	movs	r2, #0
 8003940:	2110      	movs	r1, #16
 8003942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003946:	f002 fb65 	bl	8006014 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800394a:	2201      	movs	r2, #1
 800394c:	2120      	movs	r1, #32
 800394e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003952:	f002 fb5f 	bl	8006014 <HAL_GPIO_WritePin>
      break;
 8003956:	e000      	b.n	800395a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8003958:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8003968:	2302      	movs	r3, #2
}
 800396a:	4618      	mov	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr

08003972 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8003972:	b480      	push	{r7}
 8003974:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8003976:	2301      	movs	r3, #1
}
 8003978:	4618      	mov	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr

08003980 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8003984:	2301      	movs	r3, #1
}
 8003986:	4618      	mov	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr

0800398e <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 800398e:	b480      	push	{r7}
 8003990:	b085      	sub	sp, #20
 8003992:	af00      	add	r7, sp, #0
 8003994:	4603      	mov	r3, r0
 8003996:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d102      	bne.n	80039a4 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 800399e:	230f      	movs	r3, #15
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	e001      	b.n	80039a8 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80039a4:	2316      	movs	r3, #22
 80039a6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80039a8:	68fb      	ldr	r3, [r7, #12]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr

080039b4 <LL_DBGMCU_EnableDBGSleepMode>:
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80039b8:	4b04      	ldr	r3, [pc, #16]	; (80039cc <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	4a03      	ldr	r2, [pc, #12]	; (80039cc <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	6053      	str	r3, [r2, #4]
}
 80039c4:	bf00      	nop
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr
 80039cc:	e0042000 	.word	0xe0042000

080039d0 <LL_DBGMCU_EnableDBGStopMode>:
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80039d4:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	4a03      	ldr	r2, [pc, #12]	; (80039e8 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80039da:	f043 0302 	orr.w	r3, r3, #2
 80039de:	6053      	str	r3, [r2, #4]
}
 80039e0:	bf00      	nop
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr
 80039e8:	e0042000 	.word	0xe0042000

080039ec <LL_DBGMCU_EnableDBGStandbyMode>:
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80039f0:	4b04      	ldr	r3, [pc, #16]	; (8003a04 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	4a03      	ldr	r2, [pc, #12]	; (8003a04 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80039f6:	f043 0304 	orr.w	r3, r3, #4
 80039fa:	6053      	str	r3, [r2, #4]
}
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr
 8003a04:	e0042000 	.word	0xe0042000

08003a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a12:	2003      	movs	r0, #3
 8003a14:	f001 f9b0 	bl	8004d78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003a18:	f004 f95e 	bl	8007cd8 <HAL_RCC_GetHCLKFreq>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	4a09      	ldr	r2, [pc, #36]	; (8003a44 <HAL_Init+0x3c>)
 8003a20:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a22:	200f      	movs	r0, #15
 8003a24:	f7fe ff64 	bl	80028f0 <HAL_InitTick>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	71fb      	strb	r3, [r7, #7]
 8003a32:	e001      	b.n	8003a38 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a34:	f7fe fce5 	bl	8002402 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a38:	79fb      	ldrb	r3, [r7, #7]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20000004 	.word	0x20000004

08003a48 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003a4c:	4b04      	ldr	r3, [pc, #16]	; (8003a60 <HAL_SuspendTick+0x18>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a03      	ldr	r2, [pc, #12]	; (8003a60 <HAL_SuspendTick+0x18>)
 8003a52:	f023 0302 	bic.w	r3, r3, #2
 8003a56:	6013      	str	r3, [r2, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr
 8003a60:	e000e010 	.word	0xe000e010

08003a64 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003a68:	4b04      	ldr	r3, [pc, #16]	; (8003a7c <HAL_ResumeTick+0x18>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a03      	ldr	r2, [pc, #12]	; (8003a7c <HAL_ResumeTick+0x18>)
 8003a6e:	f043 0302 	orr.w	r3, r3, #2
 8003a72:	6013      	str	r3, [r2, #0]
}
 8003a74:	bf00      	nop
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr
 8003a7c:	e000e010 	.word	0xe000e010

08003a80 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003a84:	4b02      	ldr	r3, [pc, #8]	; (8003a90 <HAL_GetUIDw0+0x10>)
 8003a86:	681b      	ldr	r3, [r3, #0]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr
 8003a90:	1fff7590 	.word	0x1fff7590

08003a94 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003a98:	4b02      	ldr	r3, [pc, #8]	; (8003aa4 <HAL_GetUIDw1+0x10>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	1fff7594 	.word	0x1fff7594

08003aa8 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003aac:	4b02      	ldr	r3, [pc, #8]	; (8003ab8 <HAL_GetUIDw2+0x10>)
 8003aae:	681b      	ldr	r3, [r3, #0]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	1fff7598 	.word	0x1fff7598

08003abc <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003ac0:	f7ff ff78 	bl	80039b4 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003ac4:	bf00      	nop
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003acc:	f7ff ff80 	bl	80039d0 <LL_DBGMCU_EnableDBGStopMode>
}
 8003ad0:	bf00      	nop
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8003ad8:	f7ff ff88 	bl	80039ec <LL_DBGMCU_EnableDBGStandbyMode>
}
 8003adc:	bf00      	nop
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	601a      	str	r2, [r3, #0]
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr

08003b04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr

08003b1e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b085      	sub	sp, #20
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	695a      	ldr	r2, [r3, #20]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2107      	movs	r1, #7
 8003b36:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	401a      	ands	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr

08003b5a <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2107      	movs	r1, #7
 8003b70:	fa01 f303 	lsl.w	r3, r1, r3
 8003b74:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr

08003b8a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr

08003bae <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b085      	sub	sp, #20
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f003 031f 	and.w	r3, r3, #31
 8003bc4:	210f      	movs	r1, #15
 8003bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	401a      	ands	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	0e9b      	lsrs	r3, r3, #26
 8003bd2:	f003 010f 	and.w	r1, r3, #15
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr

08003c14 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	401a      	ands	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr

08003c3a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b085      	sub	sp, #20
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	695a      	ldr	r2, [r3, #20]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	021b      	lsls	r3, r3, #8
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	401a      	ands	r2, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	0219      	lsls	r1, r3, #8
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	400b      	ands	r3, r1
 8003c5a:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8003c5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c62:	431a      	orrs	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003c68:	bf00      	nop
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr

08003c72 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003c82:	f023 0317 	bic.w	r3, r3, #23
 8003c86:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr

08003c98 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003ca8:	f023 0317 	bic.w	r3, r3, #23
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6093      	str	r3, [r2, #8]
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr

08003cba <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cce:	d101      	bne.n	8003cd4 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr

08003ce0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cf0:	f023 0317 	bic.w	r3, r3, #23
 8003cf4:	f043 0201 	orr.w	r2, r3, #1
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bc80      	pop	{r7}
 8003d04:	4770      	bx	lr

08003d06 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d16:	f023 0317 	bic.w	r3, r3, #23
 8003d1a:	f043 0202 	orr.w	r2, r3, #2
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr

08003d2c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <LL_ADC_IsEnabled+0x18>
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <LL_ADC_IsEnabled+0x1a>
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr

08003d50 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d101      	bne.n	8003d68 <LL_ADC_IsDisableOngoing+0x18>
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <LL_ADC_IsDisableOngoing+0x1a>
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d84:	f023 0317 	bic.w	r3, r3, #23
 8003d88:	f043 0204 	orr.w	r2, r3, #4
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr

08003d9a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003daa:	f023 0317 	bic.w	r3, r3, #23
 8003dae:	f043 0210 	orr.w	r2, r3, #16
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bc80      	pop	{r7}
 8003dbe:	4770      	bx	lr

08003dc0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d101      	bne.n	8003dd8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr

08003de4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dec:	2300      	movs	r3, #0
 8003dee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e19e      	b.n	8004144 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d109      	bne.n	8003e28 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7fd fb99 	bl	800154c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff ff44 	bl	8003cba <LL_ADC_IsInternalRegulatorEnabled>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d115      	bne.n	8003e64 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff ff18 	bl	8003c72 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e42:	4b99      	ldr	r3, [pc, #612]	; (80040a8 <HAL_ADC_Init+0x2c4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	099b      	lsrs	r3, r3, #6
 8003e48:	4a98      	ldr	r2, [pc, #608]	; (80040ac <HAL_ADC_Init+0x2c8>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	099b      	lsrs	r3, r3, #6
 8003e50:	3301      	adds	r3, #1
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e56:	e002      	b.n	8003e5e <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1f9      	bne.n	8003e58 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff ff26 	bl	8003cba <LL_ADC_IsInternalRegulatorEnabled>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10d      	bne.n	8003e90 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e78:	f043 0210 	orr.w	r2, r3, #16
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e84:	f043 0201 	orr.w	r2, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff ff93 	bl	8003dc0 <LL_ADC_REG_IsConversionOngoing>
 8003e9a:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea0:	f003 0310 	and.w	r3, r3, #16
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f040 8144 	bne.w	8004132 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f040 8140 	bne.w	8004132 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003eba:	f043 0202 	orr.w	r2, r3, #2
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff ff30 	bl	8003d2c <LL_ADC_IsEnabled>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f040 80a7 	bne.w	8004022 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	7e1b      	ldrb	r3, [r3, #24]
 8003edc:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003ede:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	7e5b      	ldrb	r3, [r3, #25]
 8003ee4:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003ee6:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	7e9b      	ldrb	r3, [r3, #26]
 8003eec:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003eee:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ef4:	2a00      	cmp	r2, #0
 8003ef6:	d002      	beq.n	8003efe <HAL_ADC_Init+0x11a>
 8003ef8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003efc:	e000      	b.n	8003f00 <HAL_ADC_Init+0x11c>
 8003efe:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003f00:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003f06:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	da04      	bge.n	8003f1a <HAL_ADC_Init+0x136>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f18:	e001      	b.n	8003f1e <HAL_ADC_Init+0x13a>
 8003f1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8003f1e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f26:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003f28:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d114      	bne.n	8003f64 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	7e9b      	ldrb	r3, [r3, #26]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d104      	bne.n	8003f4c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f48:	61bb      	str	r3, [r7, #24]
 8003f4a:	e00b      	b.n	8003f64 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f50:	f043 0220 	orr.w	r2, r3, #32
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5c:	f043 0201 	orr.w	r2, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d009      	beq.n	8003f80 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8003f8a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6812      	ldr	r2, [r2, #0]
 8003f92:	69b9      	ldr	r1, [r7, #24]
 8003f94:	430b      	orrs	r3, r1
 8003f96:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d111      	bne.n	8003fda <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003fc2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003fc8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003fce:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	4b33      	ldr	r3, [pc, #204]	; (80040b0 <HAL_ADC_Init+0x2cc>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	6979      	ldr	r1, [r7, #20]
 8003fea:	430b      	orrs	r3, r1
 8003fec:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003ff6:	d014      	beq.n	8004022 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004000:	d00f      	beq.n	8004022 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004006:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800400a:	d00a      	beq.n	8004022 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800400c:	4b29      	ldr	r3, [pc, #164]	; (80040b4 <HAL_ADC_Init+0x2d0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800401c:	4925      	ldr	r1, [pc, #148]	; (80040b4 <HAL_ADC_Init+0x2d0>)
 800401e:	4313      	orrs	r3, r2
 8004020:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6818      	ldr	r0, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402a:	461a      	mov	r2, r3
 800402c:	2100      	movs	r1, #0
 800402e:	f7ff fd76 	bl	8003b1e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6818      	ldr	r0, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403a:	461a      	mov	r2, r3
 800403c:	491e      	ldr	r1, [pc, #120]	; (80040b8 <HAL_ADC_Init+0x2d4>)
 800403e:	f7ff fd6e 	bl	8003b1e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d108      	bne.n	800405c <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f062 020f 	orn	r2, r2, #15
 8004058:	629a      	str	r2, [r3, #40]	; 0x28
 800405a:	e042      	b.n	80040e2 <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004064:	d13d      	bne.n	80040e2 <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8004066:	2300      	movs	r3, #0
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	e00c      	b.n	8004086 <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	2b0f      	cmp	r3, #15
 800407e:	d006      	beq.n	800408e <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	3301      	adds	r3, #1
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	2b07      	cmp	r3, #7
 800408a:	d9ef      	bls.n	800406c <HAL_ADC_Init+0x288>
 800408c:	e000      	b.n	8004090 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 800408e:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d112      	bne.n	80040bc <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f062 020f 	orn	r2, r2, #15
 80040a4:	629a      	str	r2, [r3, #40]	; 0x28
 80040a6:	e01c      	b.n	80040e2 <HAL_ADC_Init+0x2fe>
 80040a8:	20000004 	.word	0x20000004
 80040ac:	053e2d63 	.word	0x053e2d63
 80040b0:	1ffffc02 	.word	0x1ffffc02
 80040b4:	40012708 	.word	0x40012708
 80040b8:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	f003 031c 	and.w	r3, r3, #28
 80040ce:	f06f 020f 	mvn.w	r2, #15
 80040d2:	fa02 f103 	lsl.w	r1, r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2100      	movs	r1, #0
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff fd36 	bl	8003b5a <LL_ADC_GetSamplingTimeCommonChannels>
 80040ee:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d10b      	bne.n	8004110 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004102:	f023 0303 	bic.w	r3, r3, #3
 8004106:	f043 0201 	orr.w	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800410e:	e018      	b.n	8004142 <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004114:	f023 0312 	bic.w	r3, r3, #18
 8004118:	f043 0210 	orr.w	r2, r3, #16
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004124:	f043 0201 	orr.w	r2, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004130:	e007      	b.n	8004142 <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004136:	f043 0210 	orr.w	r2, r3, #16
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8004142:	7ffb      	ldrb	r3, [r7, #31]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3720      	adds	r7, #32
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e06a      	b.n	8004234 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004162:	f043 0202 	orr.w	r2, r3, #2
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fabe 	bl	80046ec <ADC_ConversionStop>
 8004170:	4603      	mov	r3, r0
 8004172:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004174:	7bfb      	ldrb	r3, [r7, #15]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10f      	bne.n	800419a <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fb82 	bl	8004884 <ADC_Disable>
 8004180:	4603      	mov	r3, r0
 8004182:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004184:	7bfb      	ldrb	r3, [r7, #15]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d102      	bne.n	8004190 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff fd7f 	bl	8003c98 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80041a8:	f023 0303 	bic.w	r3, r3, #3
 80041ac:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f240 329f 	movw	r2, #927	; 0x39f
 80041b6:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68d9      	ldr	r1, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	4b1e      	ldr	r3, [pc, #120]	; (800423c <HAL_ADC_DeInit+0xf0>)
 80041c4:	400b      	ands	r3, r1
 80041c6:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691a      	ldr	r2, [r3, #16]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80041d6:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695a      	ldr	r2, [r3, #20]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0207 	bic.w	r2, r2, #7
 80041e6:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6a1a      	ldr	r2, [r3, #32]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80041f6:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2200      	movs	r2, #0
 8004204:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8004206:	4b0e      	ldr	r3, [pc, #56]	; (8004240 <HAL_ADC_DeInit+0xf4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a0d      	ldr	r2, [pc, #52]	; (8004240 <HAL_ADC_DeInit+0xf4>)
 800420c:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8004210:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7fd f9ae 	bl	8001574 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004232:	7bfb      	ldrb	r3, [r7, #15]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	833e0200 	.word	0x833e0200
 8004240:	40012708 	.word	0x40012708

08004244 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff fdb5 	bl	8003dc0 <LL_ADC_REG_IsConversionOngoing>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d132      	bne.n	80042c2 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004262:	2b01      	cmp	r3, #1
 8004264:	d101      	bne.n	800426a <HAL_ADC_Start+0x26>
 8004266:	2302      	movs	r3, #2
 8004268:	e02e      	b.n	80042c8 <HAL_ADC_Start+0x84>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fa80 	bl	8004778 <ADC_Enable>
 8004278:	4603      	mov	r3, r0
 800427a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d11a      	bne.n	80042b8 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004286:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800428a:	f023 0301 	bic.w	r3, r3, #1
 800428e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	221c      	movs	r2, #28
 80042a2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff fd5f 	bl	8003d74 <LL_ADC_REG_StartConversion>
 80042b6:	e006      	b.n	80042c6 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80042c0:	e001      	b.n	80042c6 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80042c2:	2302      	movs	r3, #2
 80042c4:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <HAL_ADC_Stop+0x16>
 80042e2:	2302      	movs	r3, #2
 80042e4:	e022      	b.n	800432c <HAL_ADC_Stop+0x5c>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f9fc 	bl	80046ec <ADC_ConversionStop>
 80042f4:	4603      	mov	r3, r0
 80042f6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d111      	bne.n	8004322 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fac0 	bl	8004884 <ADC_Disable>
 8004304:	4603      	mov	r3, r0
 8004306:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d109      	bne.n	8004322 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004312:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	f043 0201 	orr.w	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800432a:	7bfb      	ldrb	r3, [r7, #15]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	2b08      	cmp	r3, #8
 8004344:	d102      	bne.n	800434c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8004346:	2308      	movs	r3, #8
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	e010      	b.n	800436e <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d007      	beq.n	800436a <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435e:	f043 0220 	orr.w	r2, r3, #32
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e077      	b.n	800445a <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800436a:	2304      	movs	r3, #4
 800436c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800436e:	f7fe fac9 	bl	8002904 <HAL_GetTick>
 8004372:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004374:	e021      	b.n	80043ba <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437c:	d01d      	beq.n	80043ba <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800437e:	f7fe fac1 	bl	8002904 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d302      	bcc.n	8004394 <HAL_ADC_PollForConversion+0x60>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d112      	bne.n	80043ba <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4013      	ands	r3, r2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10b      	bne.n	80043ba <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a6:	f043 0204 	orr.w	r2, r3, #4
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e04f      	b.n	800445a <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4013      	ands	r3, r2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0d6      	beq.n	8004376 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff fbd6 	bl	8003b8a <LL_ADC_REG_IsTriggerSourceSWStart>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d031      	beq.n	8004448 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	7e9b      	ldrb	r3, [r3, #26]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d12d      	bne.n	8004448 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d126      	bne.n	8004448 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff fcde 	bl	8003dc0 <LL_ADC_REG_IsConversionOngoing>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d112      	bne.n	8004430 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 020c 	bic.w	r2, r2, #12
 8004418:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004422:	f023 0301 	bic.w	r3, r3, #1
 8004426:	f043 0201 	orr.w	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	659a      	str	r2, [r3, #88]	; 0x58
 800442e:	e00b      	b.n	8004448 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004434:	f043 0220 	orr.w	r2, r3, #32
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004440:	f043 0201 	orr.w	r2, r3, #1
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	7e1b      	ldrb	r3, [r3, #24]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d103      	bne.n	8004458 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	220c      	movs	r2, #12
 8004456:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004470:	4618      	mov	r0, r3
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr
	...

0800447c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800448a:	2300      	movs	r3, #0
 800448c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_ADC_ConfigChannel+0x28>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e110      	b.n	80046c6 <HAL_ADC_ConfigChannel+0x24a>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff fc85 	bl	8003dc0 <LL_ADC_REG_IsConversionOngoing>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f040 80f7 	bne.w	80046ac <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	f000 80b1 	beq.w	800462a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044d0:	d004      	beq.n	80044dc <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80044d6:	4a7e      	ldr	r2, [pc, #504]	; (80046d0 <HAL_ADC_ConfigChannel+0x254>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d108      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4619      	mov	r1, r3
 80044e6:	4610      	mov	r0, r2
 80044e8:	f7ff fb82 	bl	8003bf0 <LL_ADC_REG_SetSequencerChAdd>
 80044ec:	e041      	b.n	8004572 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f003 031f 	and.w	r3, r3, #31
 80044fa:	210f      	movs	r1, #15
 80044fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004500:	43db      	mvns	r3, r3
 8004502:	401a      	ands	r2, r3
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800450c:	2b00      	cmp	r3, #0
 800450e:	d105      	bne.n	800451c <HAL_ADC_ConfigChannel+0xa0>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	0e9b      	lsrs	r3, r3, #26
 8004516:	f003 031f 	and.w	r3, r3, #31
 800451a:	e011      	b.n	8004540 <HAL_ADC_ConfigChannel+0xc4>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	fa93 f3a3 	rbit	r3, r3
 8004528:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8004534:	2320      	movs	r3, #32
 8004536:	e003      	b.n	8004540 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	fab3 f383 	clz	r3, r3
 800453e:	b2db      	uxtb	r3, r3
 8004540:	6839      	ldr	r1, [r7, #0]
 8004542:	6849      	ldr	r1, [r1, #4]
 8004544:	f001 011f 	and.w	r1, r1, #31
 8004548:	408b      	lsls	r3, r1
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	089b      	lsrs	r3, r3, #2
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	429a      	cmp	r2, r3
 800455e:	d808      	bhi.n	8004572 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6818      	ldr	r0, [r3, #0]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	6859      	ldr	r1, [r3, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	461a      	mov	r2, r3
 800456e:	f7ff fb1e 	bl	8003bae <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	6819      	ldr	r1, [r3, #0]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	461a      	mov	r2, r3
 8004580:	f7ff fb5b 	bl	8003c3a <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	f280 8097 	bge.w	80046bc <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800458e:	4851      	ldr	r0, [pc, #324]	; (80046d4 <HAL_ADC_ConfigChannel+0x258>)
 8004590:	f7ff fab8 	bl	8003b04 <LL_ADC_GetCommonPathInternalCh>
 8004594:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a4f      	ldr	r2, [pc, #316]	; (80046d8 <HAL_ADC_ConfigChannel+0x25c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d120      	bne.n	80045e2 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d11b      	bne.n	80045e2 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045b0:	4619      	mov	r1, r3
 80045b2:	4848      	ldr	r0, [pc, #288]	; (80046d4 <HAL_ADC_ConfigChannel+0x258>)
 80045b4:	f7ff fa94 	bl	8003ae0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045b8:	4b48      	ldr	r3, [pc, #288]	; (80046dc <HAL_ADC_ConfigChannel+0x260>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	099b      	lsrs	r3, r3, #6
 80045be:	4a48      	ldr	r2, [pc, #288]	; (80046e0 <HAL_ADC_ConfigChannel+0x264>)
 80045c0:	fba2 2303 	umull	r2, r3, r2, r3
 80045c4:	099b      	lsrs	r3, r3, #6
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	4613      	mov	r3, r2
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80045d2:	e002      	b.n	80045da <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1f9      	bne.n	80045d4 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80045e0:	e06c      	b.n	80046bc <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a3f      	ldr	r2, [pc, #252]	; (80046e4 <HAL_ADC_ConfigChannel+0x268>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d10c      	bne.n	8004606 <HAL_ADC_ConfigChannel+0x18a>
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d107      	bne.n	8004606 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045fc:	4619      	mov	r1, r3
 80045fe:	4835      	ldr	r0, [pc, #212]	; (80046d4 <HAL_ADC_ConfigChannel+0x258>)
 8004600:	f7ff fa6e 	bl	8003ae0 <LL_ADC_SetCommonPathInternalCh>
 8004604:	e05a      	b.n	80046bc <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a37      	ldr	r2, [pc, #220]	; (80046e8 <HAL_ADC_ConfigChannel+0x26c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d155      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004616:	2b00      	cmp	r3, #0
 8004618:	d150      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004620:	4619      	mov	r1, r3
 8004622:	482c      	ldr	r0, [pc, #176]	; (80046d4 <HAL_ADC_ConfigChannel+0x258>)
 8004624:	f7ff fa5c 	bl	8003ae0 <LL_ADC_SetCommonPathInternalCh>
 8004628:	e048      	b.n	80046bc <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004632:	d004      	beq.n	800463e <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004638:	4a25      	ldr	r2, [pc, #148]	; (80046d0 <HAL_ADC_ConfigChannel+0x254>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d107      	bne.n	800464e <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4619      	mov	r1, r3
 8004648:	4610      	mov	r0, r2
 800464a:	f7ff fae3 	bl	8003c14 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	da32      	bge.n	80046bc <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004656:	481f      	ldr	r0, [pc, #124]	; (80046d4 <HAL_ADC_ConfigChannel+0x258>)
 8004658:	f7ff fa54 	bl	8003b04 <LL_ADC_GetCommonPathInternalCh>
 800465c:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a1d      	ldr	r2, [pc, #116]	; (80046d8 <HAL_ADC_ConfigChannel+0x25c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d107      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800466e:	4619      	mov	r1, r3
 8004670:	4818      	ldr	r0, [pc, #96]	; (80046d4 <HAL_ADC_ConfigChannel+0x258>)
 8004672:	f7ff fa35 	bl	8003ae0 <LL_ADC_SetCommonPathInternalCh>
 8004676:	e021      	b.n	80046bc <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a19      	ldr	r2, [pc, #100]	; (80046e4 <HAL_ADC_ConfigChannel+0x268>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d107      	bne.n	8004692 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004688:	4619      	mov	r1, r3
 800468a:	4812      	ldr	r0, [pc, #72]	; (80046d4 <HAL_ADC_ConfigChannel+0x258>)
 800468c:	f7ff fa28 	bl	8003ae0 <LL_ADC_SetCommonPathInternalCh>
 8004690:	e014      	b.n	80046bc <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a14      	ldr	r2, [pc, #80]	; (80046e8 <HAL_ADC_ConfigChannel+0x26c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d10f      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80046a2:	4619      	mov	r1, r3
 80046a4:	480b      	ldr	r0, [pc, #44]	; (80046d4 <HAL_ADC_ConfigChannel+0x258>)
 80046a6:	f7ff fa1b 	bl	8003ae0 <LL_ADC_SetCommonPathInternalCh>
 80046aa:	e007      	b.n	80046bc <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b0:	f043 0220 	orr.w	r2, r3, #32
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80046c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3720      	adds	r7, #32
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	80000004 	.word	0x80000004
 80046d4:	40012708 	.word	0x40012708
 80046d8:	b0001000 	.word	0xb0001000
 80046dc:	20000004 	.word	0x20000004
 80046e0:	053e2d63 	.word	0x053e2d63
 80046e4:	b8004000 	.word	0xb8004000
 80046e8:	b4002000 	.word	0xb4002000

080046ec <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff fb61 	bl	8003dc0 <LL_ADC_REG_IsConversionOngoing>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d033      	beq.n	800476c <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff fb21 	bl	8003d50 <LL_ADC_IsDisableOngoing>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d104      	bne.n	800471e <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff fb3e 	bl	8003d9a <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800471e:	f7fe f8f1 	bl	8002904 <HAL_GetTick>
 8004722:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004724:	e01b      	b.n	800475e <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004726:	f7fe f8ed 	bl	8002904 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d914      	bls.n	800475e <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00d      	beq.n	800475e <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004746:	f043 0210 	orr.w	r2, r3, #16
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004752:	f043 0201 	orr.w	r2, r3, #1
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e007      	b.n	800476e <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1dc      	bne.n	8004726 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004780:	2300      	movs	r3, #0
 8004782:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff facf 	bl	8003d2c <LL_ADC_IsEnabled>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d169      	bne.n	8004868 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	4b36      	ldr	r3, [pc, #216]	; (8004874 <ADC_Enable+0xfc>)
 800479c:	4013      	ands	r3, r2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00d      	beq.n	80047be <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a6:	f043 0210 	orr.w	r2, r3, #16
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b2:	f043 0201 	orr.w	r2, r3, #1
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e055      	b.n	800486a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff fa8c 	bl	8003ce0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80047c8:	482b      	ldr	r0, [pc, #172]	; (8004878 <ADC_Enable+0x100>)
 80047ca:	f7ff f99b 	bl	8003b04 <LL_ADC_GetCommonPathInternalCh>
 80047ce:	4603      	mov	r3, r0
 80047d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00f      	beq.n	80047f8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047d8:	4b28      	ldr	r3, [pc, #160]	; (800487c <ADC_Enable+0x104>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	099b      	lsrs	r3, r3, #6
 80047de:	4a28      	ldr	r2, [pc, #160]	; (8004880 <ADC_Enable+0x108>)
 80047e0:	fba2 2303 	umull	r2, r3, r2, r3
 80047e4:	099b      	lsrs	r3, r3, #6
 80047e6:	3301      	adds	r3, #1
 80047e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80047ea:	e002      	b.n	80047f2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f9      	bne.n	80047ec <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	7e5b      	ldrb	r3, [r3, #25]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d033      	beq.n	8004868 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004800:	f7fe f880 	bl	8002904 <HAL_GetTick>
 8004804:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004806:	e028      	b.n	800485a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fa8d 	bl	8003d2c <LL_ADC_IsEnabled>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d104      	bne.n	8004822 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff fa5f 	bl	8003ce0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004822:	f7fe f86f 	bl	8002904 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d914      	bls.n	800485a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b01      	cmp	r3, #1
 800483c:	d00d      	beq.n	800485a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004842:	f043 0210 	orr.w	r2, r3, #16
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484e:	f043 0201 	orr.w	r2, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e007      	b.n	800486a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b01      	cmp	r3, #1
 8004866:	d1cf      	bne.n	8004808 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	80000017 	.word	0x80000017
 8004878:	40012708 	.word	0x40012708
 800487c:	20000004 	.word	0x20000004
 8004880:	053e2d63 	.word	0x053e2d63

08004884 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff fa5d 	bl	8003d50 <LL_ADC_IsDisableOngoing>
 8004896:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff fa45 	bl	8003d2c <LL_ADC_IsEnabled>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d047      	beq.n	8004938 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d144      	bne.n	8004938 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 0305 	and.w	r3, r3, #5
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d10c      	bne.n	80048d6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff fa20 	bl	8003d06 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2203      	movs	r2, #3
 80048cc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80048ce:	f7fe f819 	bl	8002904 <HAL_GetTick>
 80048d2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80048d4:	e029      	b.n	800492a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048da:	f043 0210 	orr.w	r2, r3, #16
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e6:	f043 0201 	orr.w	r2, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e023      	b.n	800493a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80048f2:	f7fe f807 	bl	8002904 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d914      	bls.n	800492a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00d      	beq.n	800492a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004912:	f043 0210 	orr.w	r2, r3, #16
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491e:	f043 0201 	orr.w	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e007      	b.n	800493a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1dc      	bne.n	80048f2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <LL_ADC_SetCalibrationFactor>:
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
 800494a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004952:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	bc80      	pop	{r7}
 8004968:	4770      	bx	lr

0800496a <LL_ADC_GetCalibrationFactor>:
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	bc80      	pop	{r7}
 8004984:	4770      	bx	lr

08004986 <LL_ADC_Enable>:
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004996:	f023 0317 	bic.w	r3, r3, #23
 800499a:	f043 0201 	orr.w	r2, r3, #1
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	609a      	str	r2, [r3, #8]
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr

080049ac <LL_ADC_Disable>:
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049bc:	f023 0317 	bic.w	r3, r3, #23
 80049c0:	f043 0202 	orr.w	r2, r3, #2
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	609a      	str	r2, [r3, #8]
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bc80      	pop	{r7}
 80049d0:	4770      	bx	lr

080049d2 <LL_ADC_IsEnabled>:
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <LL_ADC_IsEnabled+0x18>
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <LL_ADC_IsEnabled+0x1a>
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr

080049f6 <LL_ADC_StartCalibration>:
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a06:	f023 0317 	bic.w	r3, r3, #23
 8004a0a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	609a      	str	r2, [r3, #8]
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr

08004a1c <LL_ADC_IsCalibrationOnGoing>:
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a30:	d101      	bne.n	8004a36 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr

08004a42 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b088      	sub	sp, #32
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_ADCEx_Calibration_Start+0x1e>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e0b9      	b.n	8004bd4 <HAL_ADCEx_Calibration_Start+0x192>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7ff ff0b 	bl	8004884 <ADC_Disable>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff ffab 	bl	80049d2 <LL_ADC_IsEnabled>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f040 809d 	bne.w	8004bbe <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a88:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004a8c:	f043 0202 	orr.w	r2, r3, #2
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	f248 0303 	movw	r3, #32771	; 0x8003
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6812      	ldr	r2, [r2, #0]
 8004aac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ab0:	f023 0303 	bic.w	r3, r3, #3
 8004ab4:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
 8004aba:	e02e      	b.n	8004b1a <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff ff98 	bl	80049f6 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004ac6:	e014      	b.n	8004af2 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	3301      	adds	r3, #1
 8004acc:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004ad4:	d30d      	bcc.n	8004af2 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ada:	f023 0312 	bic.w	r3, r3, #18
 8004ade:	f043 0210 	orr.w	r2, r3, #16
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e070      	b.n	8004bd4 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff ff90 	bl	8004a1c <LL_ADC_IsCalibrationOnGoing>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1e2      	bne.n	8004ac8 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff ff2f 	bl	800496a <LL_ADC_GetCalibrationFactor>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	4413      	add	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	3301      	adds	r3, #1
 8004b18:	61fb      	str	r3, [r7, #28]
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	2b07      	cmp	r3, #7
 8004b1e:	d9cd      	bls.n	8004abc <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b28:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff ff29 	bl	8004986 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69b9      	ldr	r1, [r7, #24]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff ff01 	bl	8004942 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff ff31 	bl	80049ac <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b4a:	f7fd fedb 	bl	8002904 <HAL_GetTick>
 8004b4e:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b50:	e01c      	b.n	8004b8c <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b52:	f7fd fed7 	bl	8002904 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d915      	bls.n	8004b8c <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff ff34 	bl	80049d2 <LL_ADC_IsEnabled>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00d      	beq.n	8004b8c <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b74:	f043 0210 	orr.w	r2, r3, #16
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b80:	f043 0201 	orr.w	r2, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e023      	b.n	8004bd4 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff ff1e 	bl	80049d2 <LL_ADC_IsEnabled>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1da      	bne.n	8004b52 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68d9      	ldr	r1, [r3, #12]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb0:	f023 0303 	bic.w	r3, r3, #3
 8004bb4:	f043 0201 	orr.w	r2, r3, #1
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	659a      	str	r2, [r3, #88]	; 0x58
 8004bbc:	e005      	b.n	8004bca <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc2:	f043 0210 	orr.w	r2, r3, #16
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3720      	adds	r7, #32
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f003 0307 	and.w	r3, r3, #7
 8004bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bec:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <__NVIC_SetPriorityGrouping+0x44>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c0e:	4a04      	ldr	r2, [pc, #16]	; (8004c20 <__NVIC_SetPriorityGrouping+0x44>)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	60d3      	str	r3, [r2, #12]
}
 8004c14:	bf00      	nop
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	e000ed00 	.word	0xe000ed00

08004c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c28:	4b04      	ldr	r3, [pc, #16]	; (8004c3c <__NVIC_GetPriorityGrouping+0x18>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	0a1b      	lsrs	r3, r3, #8
 8004c2e:	f003 0307 	and.w	r3, r3, #7
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bc80      	pop	{r7}
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	e000ed00 	.word	0xe000ed00

08004c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	4603      	mov	r3, r0
 8004c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	db0b      	blt.n	8004c6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c52:	79fb      	ldrb	r3, [r7, #7]
 8004c54:	f003 021f 	and.w	r2, r3, #31
 8004c58:	4906      	ldr	r1, [pc, #24]	; (8004c74 <__NVIC_EnableIRQ+0x34>)
 8004c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	2001      	movs	r0, #1
 8004c62:	fa00 f202 	lsl.w	r2, r0, r2
 8004c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr
 8004c74:	e000e100 	.word	0xe000e100

08004c78 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	4603      	mov	r3, r0
 8004c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	db12      	blt.n	8004cb0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	f003 021f 	and.w	r2, r3, #31
 8004c90:	490a      	ldr	r1, [pc, #40]	; (8004cbc <__NVIC_DisableIRQ+0x44>)
 8004c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	2001      	movs	r0, #1
 8004c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c9e:	3320      	adds	r3, #32
 8004ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ca4:	f3bf 8f4f 	dsb	sy
}
 8004ca8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004caa:	f3bf 8f6f 	isb	sy
}
 8004cae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bc80      	pop	{r7}
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	e000e100 	.word	0xe000e100

08004cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	6039      	str	r1, [r7, #0]
 8004cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	db0a      	blt.n	8004cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	490c      	ldr	r1, [pc, #48]	; (8004d0c <__NVIC_SetPriority+0x4c>)
 8004cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cde:	0112      	lsls	r2, r2, #4
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ce8:	e00a      	b.n	8004d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	4908      	ldr	r1, [pc, #32]	; (8004d10 <__NVIC_SetPriority+0x50>)
 8004cf0:	79fb      	ldrb	r3, [r7, #7]
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	3b04      	subs	r3, #4
 8004cf8:	0112      	lsls	r2, r2, #4
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	440b      	add	r3, r1
 8004cfe:	761a      	strb	r2, [r3, #24]
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bc80      	pop	{r7}
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	e000e100 	.word	0xe000e100
 8004d10:	e000ed00 	.word	0xe000ed00

08004d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b089      	sub	sp, #36	; 0x24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	f1c3 0307 	rsb	r3, r3, #7
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	bf28      	it	cs
 8004d32:	2304      	movcs	r3, #4
 8004d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	3304      	adds	r3, #4
 8004d3a:	2b06      	cmp	r3, #6
 8004d3c:	d902      	bls.n	8004d44 <NVIC_EncodePriority+0x30>
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	3b03      	subs	r3, #3
 8004d42:	e000      	b.n	8004d46 <NVIC_EncodePriority+0x32>
 8004d44:	2300      	movs	r3, #0
 8004d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d48:	f04f 32ff 	mov.w	r2, #4294967295
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	43da      	mvns	r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	401a      	ands	r2, r3
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	fa01 f303 	lsl.w	r3, r1, r3
 8004d66:	43d9      	mvns	r1, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d6c:	4313      	orrs	r3, r2
         );
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3724      	adds	r7, #36	; 0x24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bc80      	pop	{r7}
 8004d76:	4770      	bx	lr

08004d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff ff2b 	bl	8004bdc <__NVIC_SetPriorityGrouping>
}
 8004d86:	bf00      	nop
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b086      	sub	sp, #24
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	4603      	mov	r3, r0
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	607a      	str	r2, [r7, #4]
 8004d9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d9c:	f7ff ff42 	bl	8004c24 <__NVIC_GetPriorityGrouping>
 8004da0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	6978      	ldr	r0, [r7, #20]
 8004da8:	f7ff ffb4 	bl	8004d14 <NVIC_EncodePriority>
 8004dac:	4602      	mov	r2, r0
 8004dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004db2:	4611      	mov	r1, r2
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff ff83 	bl	8004cc0 <__NVIC_SetPriority>
}
 8004dba:	bf00      	nop
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b082      	sub	sp, #8
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	4603      	mov	r3, r0
 8004dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7ff ff35 	bl	8004c40 <__NVIC_EnableIRQ>
}
 8004dd6:	bf00      	nop
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b082      	sub	sp, #8
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	4603      	mov	r3, r0
 8004de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff ff43 	bl	8004c78 <__NVIC_DisableIRQ>
}
 8004df2:	bf00      	nop
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e08e      	b.n	8004f2c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	4b47      	ldr	r3, [pc, #284]	; (8004f34 <HAL_DMA_Init+0x138>)
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d80f      	bhi.n	8004e3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	4b45      	ldr	r3, [pc, #276]	; (8004f38 <HAL_DMA_Init+0x13c>)
 8004e22:	4413      	add	r3, r2
 8004e24:	4a45      	ldr	r2, [pc, #276]	; (8004f3c <HAL_DMA_Init+0x140>)
 8004e26:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2a:	091b      	lsrs	r3, r3, #4
 8004e2c:	009a      	lsls	r2, r3, #2
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a42      	ldr	r2, [pc, #264]	; (8004f40 <HAL_DMA_Init+0x144>)
 8004e36:	641a      	str	r2, [r3, #64]	; 0x40
 8004e38:	e00e      	b.n	8004e58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	4b40      	ldr	r3, [pc, #256]	; (8004f44 <HAL_DMA_Init+0x148>)
 8004e42:	4413      	add	r3, r2
 8004e44:	4a3d      	ldr	r2, [pc, #244]	; (8004f3c <HAL_DMA_Init+0x140>)
 8004e46:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4a:	091b      	lsrs	r3, r3, #4
 8004e4c:	009a      	lsls	r2, r3, #2
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a3c      	ldr	r2, [pc, #240]	; (8004f48 <HAL_DMA_Init+0x14c>)
 8004e56:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6812      	ldr	r2, [r2, #0]
 8004e6a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e72:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6819      	ldr	r1, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	431a      	orrs	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fb24 	bl	80054f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eb8:	d102      	bne.n	8004ec0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ec8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ecc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ed6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d010      	beq.n	8004f02 <HAL_DMA_Init+0x106>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b04      	cmp	r3, #4
 8004ee6:	d80c      	bhi.n	8004f02 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fb4d 	bl	8005588 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004efe:	605a      	str	r2, [r3, #4]
 8004f00:	e008      	b.n	8004f14 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40020407 	.word	0x40020407
 8004f38:	bffdfff8 	.word	0xbffdfff8
 8004f3c:	cccccccd 	.word	0xcccccccd
 8004f40:	40020000 	.word	0x40020000
 8004f44:	bffdfbf8 	.word	0xbffdfbf8
 8004f48:	40020400 	.word	0x40020400

08004f4c <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e07b      	b.n	8005056 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0201 	bic.w	r2, r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	4b3a      	ldr	r3, [pc, #232]	; (8005060 <HAL_DMA_DeInit+0x114>)
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d80f      	bhi.n	8004f9a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	4b38      	ldr	r3, [pc, #224]	; (8005064 <HAL_DMA_DeInit+0x118>)
 8004f82:	4413      	add	r3, r2
 8004f84:	4a38      	ldr	r2, [pc, #224]	; (8005068 <HAL_DMA_DeInit+0x11c>)
 8004f86:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8a:	091b      	lsrs	r3, r3, #4
 8004f8c:	009a      	lsls	r2, r3, #2
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a35      	ldr	r2, [pc, #212]	; (800506c <HAL_DMA_DeInit+0x120>)
 8004f96:	641a      	str	r2, [r3, #64]	; 0x40
 8004f98:	e00e      	b.n	8004fb8 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	4b33      	ldr	r3, [pc, #204]	; (8005070 <HAL_DMA_DeInit+0x124>)
 8004fa2:	4413      	add	r3, r2
 8004fa4:	4a30      	ldr	r2, [pc, #192]	; (8005068 <HAL_DMA_DeInit+0x11c>)
 8004fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004faa:	091b      	lsrs	r3, r3, #4
 8004fac:	009a      	lsls	r2, r3, #2
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a2f      	ldr	r2, [pc, #188]	; (8005074 <HAL_DMA_DeInit+0x128>)
 8004fb6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc4:	f003 021c 	and.w	r2, r3, #28
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	2101      	movs	r1, #1
 8004fce:	fa01 f202 	lsl.w	r2, r1, r2
 8004fd2:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 fa8f 	bl	80054f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004fea:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00f      	beq.n	8005014 <HAL_DMA_DeInit+0xc8>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	d80b      	bhi.n	8005014 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fac3 	bl	8005588 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005012:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40020407 	.word	0x40020407
 8005064:	bffdfff8 	.word	0xbffdfff8
 8005068:	cccccccd 	.word	0xcccccccd
 800506c:	40020000 	.word	0x40020000
 8005070:	bffdfbf8 	.word	0xbffdfbf8
 8005074:	40020400 	.word	0x40020400

08005078 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <HAL_DMA_Start_IT+0x20>
 8005094:	2302      	movs	r3, #2
 8005096:	e069      	b.n	800516c <HAL_DMA_Start_IT+0xf4>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d155      	bne.n	8005158 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 0201 	bic.w	r2, r2, #1
 80050c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	68b9      	ldr	r1, [r7, #8]
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f9d3 	bl	800547c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d008      	beq.n	80050f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f042 020e 	orr.w	r2, r2, #14
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	e00f      	b.n	8005110 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0204 	bic.w	r2, r2, #4
 80050fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 020a 	orr.w	r2, r2, #10
 800510e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d007      	beq.n	800512e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005128:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800512c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005132:	2b00      	cmp	r3, #0
 8005134:	d007      	beq.n	8005146 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005144:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f042 0201 	orr.w	r2, r2, #1
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	e008      	b.n	800516a <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2280      	movs	r2, #128	; 0x80
 800515c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800516a:	7dfb      	ldrb	r3, [r7, #23]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e04f      	b.n	8005226 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d008      	beq.n	80051a4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2204      	movs	r2, #4
 8005196:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e040      	b.n	8005226 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 020e 	bic.w	r2, r2, #14
 80051b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0201 	bic.w	r2, r2, #1
 80051d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d8:	f003 021c 	and.w	r2, r3, #28
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	2101      	movs	r1, #1
 80051e2:	fa01 f202 	lsl.w	r2, r1, r2
 80051e6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80051f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00c      	beq.n	8005214 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005208:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005212:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr

08005230 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005238:	2300      	movs	r3, #0
 800523a:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d005      	beq.n	8005254 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2204      	movs	r2, #4
 800524c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	73fb      	strb	r3, [r7, #15]
 8005252:	e047      	b.n	80052e4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 020e 	bic.w	r2, r2, #14
 8005262:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0201 	bic.w	r2, r2, #1
 8005272:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005282:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005288:	f003 021c 	and.w	r2, r3, #28
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	2101      	movs	r1, #1
 8005292:	fa01 f202 	lsl.w	r2, r1, r2
 8005296:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80052a0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00c      	beq.n	80052c4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80052c2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	4798      	blx	r3
    }
  }
  return status;
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530c:	f003 031c 	and.w	r3, r3, #28
 8005310:	2204      	movs	r2, #4
 8005312:	409a      	lsls	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4013      	ands	r3, r2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d027      	beq.n	800536c <HAL_DMA_IRQHandler+0x7c>
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	d022      	beq.n	800536c <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0320 	and.w	r3, r3, #32
 8005330:	2b00      	cmp	r3, #0
 8005332:	d107      	bne.n	8005344 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 0204 	bic.w	r2, r2, #4
 8005342:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005348:	f003 021c 	and.w	r2, r3, #28
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005350:	2104      	movs	r1, #4
 8005352:	fa01 f202 	lsl.w	r2, r1, r2
 8005356:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 8081 	beq.w	8005464 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800536a:	e07b      	b.n	8005464 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005370:	f003 031c 	and.w	r3, r3, #28
 8005374:	2202      	movs	r2, #2
 8005376:	409a      	lsls	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4013      	ands	r3, r2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d03d      	beq.n	80053fc <HAL_DMA_IRQHandler+0x10c>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d038      	beq.n	80053fc <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0320 	and.w	r3, r3, #32
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10b      	bne.n	80053b0 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 020a 	bic.w	r2, r2, #10
 80053a6:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	461a      	mov	r2, r3
 80053b6:	4b2e      	ldr	r3, [pc, #184]	; (8005470 <HAL_DMA_IRQHandler+0x180>)
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d909      	bls.n	80053d0 <HAL_DMA_IRQHandler+0xe0>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c0:	f003 031c 	and.w	r3, r3, #28
 80053c4:	4a2b      	ldr	r2, [pc, #172]	; (8005474 <HAL_DMA_IRQHandler+0x184>)
 80053c6:	2102      	movs	r1, #2
 80053c8:	fa01 f303 	lsl.w	r3, r1, r3
 80053cc:	6053      	str	r3, [r2, #4]
 80053ce:	e008      	b.n	80053e2 <HAL_DMA_IRQHandler+0xf2>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d4:	f003 031c 	and.w	r3, r3, #28
 80053d8:	4a27      	ldr	r2, [pc, #156]	; (8005478 <HAL_DMA_IRQHandler+0x188>)
 80053da:	2102      	movs	r1, #2
 80053dc:	fa01 f303 	lsl.w	r3, r1, r3
 80053e0:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d038      	beq.n	8005464 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80053fa:	e033      	b.n	8005464 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005400:	f003 031c 	and.w	r3, r3, #28
 8005404:	2208      	movs	r2, #8
 8005406:	409a      	lsls	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4013      	ands	r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d02a      	beq.n	8005466 <HAL_DMA_IRQHandler+0x176>
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b00      	cmp	r3, #0
 8005418:	d025      	beq.n	8005466 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 020e 	bic.w	r2, r2, #14
 8005428:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542e:	f003 021c 	and.w	r2, r3, #28
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	2101      	movs	r1, #1
 8005438:	fa01 f202 	lsl.w	r2, r1, r2
 800543c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005458:	2b00      	cmp	r3, #0
 800545a:	d004      	beq.n	8005466 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005464:	bf00      	nop
 8005466:	bf00      	nop
}
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	40020080 	.word	0x40020080
 8005474:	40020400 	.word	0x40020400
 8005478:	40020000 	.word	0x40020000

0800547c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005492:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005498:	2b00      	cmp	r3, #0
 800549a:	d004      	beq.n	80054a6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80054a4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054aa:	f003 021c 	and.w	r2, r3, #28
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	2101      	movs	r1, #1
 80054b4:	fa01 f202 	lsl.w	r2, r1, r2
 80054b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	2b10      	cmp	r3, #16
 80054c8:	d108      	bne.n	80054dc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80054da:	e007      	b.n	80054ec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	60da      	str	r2, [r3, #12]
}
 80054ec:	bf00      	nop
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bc80      	pop	{r7}
 80054f4:	4770      	bx	lr
	...

080054f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	461a      	mov	r2, r3
 8005506:	4b1c      	ldr	r3, [pc, #112]	; (8005578 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8005508:	429a      	cmp	r2, r3
 800550a:	d813      	bhi.n	8005534 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005510:	089b      	lsrs	r3, r3, #2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005518:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	b2db      	uxtb	r3, r3
 8005526:	3b08      	subs	r3, #8
 8005528:	4a14      	ldr	r2, [pc, #80]	; (800557c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800552a:	fba2 2303 	umull	r2, r3, r2, r3
 800552e:	091b      	lsrs	r3, r3, #4
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	e011      	b.n	8005558 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005538:	089b      	lsrs	r3, r3, #2
 800553a:	009a      	lsls	r2, r3, #2
 800553c:	4b10      	ldr	r3, [pc, #64]	; (8005580 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800553e:	4413      	add	r3, r2
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	b2db      	uxtb	r3, r3
 800554a:	3b08      	subs	r3, #8
 800554c:	4a0b      	ldr	r2, [pc, #44]	; (800557c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800554e:	fba2 2303 	umull	r2, r3, r2, r3
 8005552:	091b      	lsrs	r3, r3, #4
 8005554:	3307      	adds	r3, #7
 8005556:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a0a      	ldr	r2, [pc, #40]	; (8005584 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 800555c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f003 031f 	and.w	r3, r3, #31
 8005564:	2201      	movs	r2, #1
 8005566:	409a      	lsls	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800556c:	bf00      	nop
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	40020407 	.word	0x40020407
 800557c:	cccccccd 	.word	0xcccccccd
 8005580:	4002081c 	.word	0x4002081c
 8005584:	40020880 	.word	0x40020880

08005588 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005598:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	461a      	mov	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a08      	ldr	r2, [pc, #32]	; (80055cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80055ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	2201      	movs	r2, #1
 80055b8:	409a      	lsls	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80055be:	bf00      	nop
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bc80      	pop	{r7}
 80055c6:	4770      	bx	lr
 80055c8:	1000823f 	.word	0x1000823f
 80055cc:	40020940 	.word	0x40020940

080055d0 <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d12b      	bne.n	800563e <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_DMAEx_ConfigMuxSync+0x24>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e028      	b.n	8005646 <HAL_DMAEx_ConfigMuxSync+0x76>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	3b01      	subs	r3, #1
 8005610:	04db      	lsls	r3, r3, #19
 8005612:	431a      	orrs	r2, r3
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	431a      	orrs	r2, r3
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	7a1b      	ldrb	r3, [r3, #8]
 800561e:	041b      	lsls	r3, r3, #16
 8005620:	431a      	orrs	r2, r3
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	7a5b      	ldrb	r3, [r3, #9]
 8005626:	025b      	lsls	r3, r3, #9
 8005628:	431a      	orrs	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800562e:	430a      	orrs	r2, r1
 8005630:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	e003      	b.n	8005646 <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2280      	movs	r2, #128	; 0x80
 8005642:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
  }
}
 8005646:	4618      	mov	r0, r3
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	bc80      	pop	{r7}
 800564e:	4770      	bx	lr

08005650 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005662:	4013      	ands	r3, r2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01a      	beq.n	800569e <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005672:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005676:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005680:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005686:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d022      	beq.n	80056ec <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b0:	4013      	ands	r3, r2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d01a      	beq.n	80056ec <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80056ce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	4798      	blx	r3
      }
    }
  }
}
 80056ec:	bf00      	nop
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005702:	4b1c      	ldr	r3, [pc, #112]	; (8005774 <HAL_FLASH_Program+0x80>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_FLASH_Program+0x1a>
 800570a:	2302      	movs	r3, #2
 800570c:	e02d      	b.n	800576a <HAL_FLASH_Program+0x76>
 800570e:	4b19      	ldr	r3, [pc, #100]	; (8005774 <HAL_FLASH_Program+0x80>)
 8005710:	2201      	movs	r2, #1
 8005712:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005714:	4b17      	ldr	r3, [pc, #92]	; (8005774 <HAL_FLASH_Program+0x80>)
 8005716:	2200      	movs	r2, #0
 8005718:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800571a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800571e:	f000 f869 	bl	80057f4 <FLASH_WaitForLastOperation>
 8005722:	4603      	mov	r3, r0
 8005724:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005726:	7dfb      	ldrb	r3, [r7, #23]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d11a      	bne.n	8005762 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d105      	bne.n	800573e <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005732:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005736:	68b8      	ldr	r0, [r7, #8]
 8005738:	f000 f8be 	bl	80058b8 <FLASH_Program_DoubleWord>
 800573c:	e004      	b.n	8005748 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	4619      	mov	r1, r3
 8005742:	68b8      	ldr	r0, [r7, #8]
 8005744:	f000 f8de 	bl	8005904 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005748:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800574c:	f000 f852 	bl	80057f4 <FLASH_WaitForLastOperation>
 8005750:	4603      	mov	r3, r0
 8005752:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005754:	4b08      	ldr	r3, [pc, #32]	; (8005778 <HAL_FLASH_Program+0x84>)
 8005756:	695a      	ldr	r2, [r3, #20]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	43db      	mvns	r3, r3
 800575c:	4906      	ldr	r1, [pc, #24]	; (8005778 <HAL_FLASH_Program+0x84>)
 800575e:	4013      	ands	r3, r2
 8005760:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005762:	4b04      	ldr	r3, [pc, #16]	; (8005774 <HAL_FLASH_Program+0x80>)
 8005764:	2200      	movs	r2, #0
 8005766:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005768:	7dfb      	ldrb	r3, [r7, #23]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	20000a04 	.word	0x20000a04
 8005778:	58004000 	.word	0x58004000

0800577c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005786:	4b0b      	ldr	r3, [pc, #44]	; (80057b4 <HAL_FLASH_Unlock+0x38>)
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	2b00      	cmp	r3, #0
 800578c:	da0b      	bge.n	80057a6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800578e:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <HAL_FLASH_Unlock+0x38>)
 8005790:	4a09      	ldr	r2, [pc, #36]	; (80057b8 <HAL_FLASH_Unlock+0x3c>)
 8005792:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005794:	4b07      	ldr	r3, [pc, #28]	; (80057b4 <HAL_FLASH_Unlock+0x38>)
 8005796:	4a09      	ldr	r2, [pc, #36]	; (80057bc <HAL_FLASH_Unlock+0x40>)
 8005798:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800579a:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <HAL_FLASH_Unlock+0x38>)
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	da01      	bge.n	80057a6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80057a6:	79fb      	ldrb	r3, [r7, #7]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bc80      	pop	{r7}
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	58004000 	.word	0x58004000
 80057b8:	45670123 	.word	0x45670123
 80057bc:	cdef89ab 	.word	0xcdef89ab

080057c0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80057ca:	4b09      	ldr	r3, [pc, #36]	; (80057f0 <HAL_FLASH_Lock+0x30>)
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	4a08      	ldr	r2, [pc, #32]	; (80057f0 <HAL_FLASH_Lock+0x30>)
 80057d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057d4:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80057d6:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <HAL_FLASH_Lock+0x30>)
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	db01      	blt.n	80057e2 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80057e2:	79fb      	ldrb	r3, [r7, #7]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bc80      	pop	{r7}
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	58004000 	.word	0x58004000

080057f4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80057fc:	f7fd f882 	bl	8002904 <HAL_GetTick>
 8005800:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005802:	e009      	b.n	8005818 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005804:	f7fd f87e 	bl	8002904 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	429a      	cmp	r2, r3
 8005812:	d801      	bhi.n	8005818 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e047      	b.n	80058a8 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005818:	4b25      	ldr	r3, [pc, #148]	; (80058b0 <FLASH_WaitForLastOperation+0xbc>)
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005824:	d0ee      	beq.n	8005804 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8005826:	4b22      	ldr	r3, [pc, #136]	; (80058b0 <FLASH_WaitForLastOperation+0xbc>)
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d002      	beq.n	800583c <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005836:	4b1e      	ldr	r3, [pc, #120]	; (80058b0 <FLASH_WaitForLastOperation+0xbc>)
 8005838:	2201      	movs	r2, #1
 800583a:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8005842:	4013      	ands	r3, r2
 8005844:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d007      	beq.n	8005860 <FLASH_WaitForLastOperation+0x6c>
 8005850:	4b17      	ldr	r3, [pc, #92]	; (80058b0 <FLASH_WaitForLastOperation+0xbc>)
 8005852:	699a      	ldr	r2, [r3, #24]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800585a:	4915      	ldr	r1, [pc, #84]	; (80058b0 <FLASH_WaitForLastOperation+0xbc>)
 800585c:	4313      	orrs	r3, r2
 800585e:	618b      	str	r3, [r1, #24]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d004      	beq.n	8005874 <FLASH_WaitForLastOperation+0x80>
 800586a:	4a11      	ldr	r2, [pc, #68]	; (80058b0 <FLASH_WaitForLastOperation+0xbc>)
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005872:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00e      	beq.n	8005898 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800587a:	4a0e      	ldr	r2, [pc, #56]	; (80058b4 <FLASH_WaitForLastOperation+0xc0>)
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e011      	b.n	80058a8 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005884:	f7fd f83e 	bl	8002904 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	429a      	cmp	r2, r3
 8005892:	d801      	bhi.n	8005898 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e007      	b.n	80058a8 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8005898:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <FLASH_WaitForLastOperation+0xbc>)
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058a4:	d0ee      	beq.n	8005884 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	58004000 	.word	0x58004000
 80058b4:	20000a04 	.word	0x20000a04

080058b8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80058c4:	4b0e      	ldr	r3, [pc, #56]	; (8005900 <FLASH_Program_DoubleWord+0x48>)
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	4a0d      	ldr	r2, [pc, #52]	; (8005900 <FLASH_Program_DoubleWord+0x48>)
 80058ca:	f043 0301 	orr.w	r3, r3, #1
 80058ce:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80058d6:	f3bf 8f6f 	isb	sy
}
 80058da:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80058dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	f04f 0300 	mov.w	r3, #0
 80058e8:	000a      	movs	r2, r1
 80058ea:	2300      	movs	r3, #0
 80058ec:	68f9      	ldr	r1, [r7, #12]
 80058ee:	3104      	adds	r1, #4
 80058f0:	4613      	mov	r3, r2
 80058f2:	600b      	str	r3, [r1, #0]
}
 80058f4:	bf00      	nop
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bc80      	pop	{r7}
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	58004000 	.word	0x58004000

08005904 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005904:	b480      	push	{r7}
 8005906:	b089      	sub	sp, #36	; 0x24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800590e:	2340      	movs	r3, #64	; 0x40
 8005910:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800591a:	4b18      	ldr	r3, [pc, #96]	; (800597c <FLASH_Program_Fast+0x78>)
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	4a17      	ldr	r2, [pc, #92]	; (800597c <FLASH_Program_Fast+0x78>)
 8005920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005924:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005926:	f3ef 8310 	mrs	r3, PRIMASK
 800592a:	60fb      	str	r3, [r7, #12]
  return(result);
 800592c:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 800592e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005930:	b672      	cpsid	i
}
 8005932:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	3304      	adds	r3, #4
 8005940:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	3304      	adds	r3, #4
 8005946:	617b      	str	r3, [r7, #20]
    row_index--;
 8005948:	7ffb      	ldrb	r3, [r7, #31]
 800594a:	3b01      	subs	r3, #1
 800594c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800594e:	7ffb      	ldrb	r3, [r7, #31]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1ef      	bne.n	8005934 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8005954:	bf00      	nop
 8005956:	4b09      	ldr	r3, [pc, #36]	; (800597c <FLASH_Program_Fast+0x78>)
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800595e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005962:	d0f8      	beq.n	8005956 <FLASH_Program_Fast+0x52>
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f383 8810 	msr	PRIMASK, r3
}
 800596e:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005970:	bf00      	nop
 8005972:	3724      	adds	r7, #36	; 0x24
 8005974:	46bd      	mov	sp, r7
 8005976:	bc80      	pop	{r7}
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	58004000 	.word	0x58004000

08005980 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800598a:	4b28      	ldr	r3, [pc, #160]	; (8005a2c <HAL_FLASHEx_Erase+0xac>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d101      	bne.n	8005996 <HAL_FLASHEx_Erase+0x16>
 8005992:	2302      	movs	r3, #2
 8005994:	e046      	b.n	8005a24 <HAL_FLASHEx_Erase+0xa4>
 8005996:	4b25      	ldr	r3, [pc, #148]	; (8005a2c <HAL_FLASHEx_Erase+0xac>)
 8005998:	2201      	movs	r2, #1
 800599a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800599c:	4b23      	ldr	r3, [pc, #140]	; (8005a2c <HAL_FLASHEx_Erase+0xac>)
 800599e:	2200      	movs	r2, #0
 80059a0:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80059a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059a6:	f7ff ff25 	bl	80057f4 <FLASH_WaitForLastOperation>
 80059aa:	4603      	mov	r3, r0
 80059ac:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d133      	bne.n	8005a1c <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b04      	cmp	r3, #4
 80059ba:	d108      	bne.n	80059ce <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 80059bc:	f000 f880 	bl	8005ac0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80059c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059c4:	f7ff ff16 	bl	80057f4 <FLASH_WaitForLastOperation>
 80059c8:	4603      	mov	r3, r0
 80059ca:	73fb      	strb	r3, [r7, #15]
 80059cc:	e024      	b.n	8005a18 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	f04f 32ff 	mov.w	r2, #4294967295
 80059d4:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	60bb      	str	r3, [r7, #8]
 80059dc:	e012      	b.n	8005a04 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 80059de:	68b8      	ldr	r0, [r7, #8]
 80059e0:	f000 f87e 	bl	8005ae0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80059e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059e8:	f7ff ff04 	bl	80057f4 <FLASH_WaitForLastOperation>
 80059ec:	4603      	mov	r3, r0
 80059ee:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	601a      	str	r2, [r3, #0]
          break;
 80059fc:	e00a      	b.n	8005a14 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	3301      	adds	r3, #1
 8005a02:	60bb      	str	r3, [r7, #8]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d3e4      	bcc.n	80059de <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005a14:	f000 f8c0 	bl	8005b98 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005a18:	f000 f87a 	bl	8005b10 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005a1c:	4b03      	ldr	r3, [pc, #12]	; (8005a2c <HAL_FLASHEx_Erase+0xac>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	701a      	strb	r2, [r3, #0]

  return status;
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	20000a04 	.word	0x20000a04

08005a30 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005a38:	4b1f      	ldr	r3, [pc, #124]	; (8005ab8 <HAL_FLASHEx_Erase_IT+0x88>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d101      	bne.n	8005a44 <HAL_FLASHEx_Erase_IT+0x14>
 8005a40:	2302      	movs	r3, #2
 8005a42:	e034      	b.n	8005aae <HAL_FLASHEx_Erase_IT+0x7e>
 8005a44:	4b1c      	ldr	r3, [pc, #112]	; (8005ab8 <HAL_FLASHEx_Erase_IT+0x88>)
 8005a46:	2201      	movs	r2, #1
 8005a48:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005a4a:	4b1b      	ldr	r3, [pc, #108]	; (8005ab8 <HAL_FLASHEx_Erase_IT+0x88>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a18      	ldr	r2, [pc, #96]	; (8005ab8 <HAL_FLASHEx_Erase_IT+0x88>)
 8005a56:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005a58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a5c:	f7ff feca 	bl	80057f4 <FLASH_WaitForLastOperation>
 8005a60:	4603      	mov	r3, r0
 8005a62:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8005a6a:	4b13      	ldr	r3, [pc, #76]	; (8005ab8 <HAL_FLASHEx_Erase_IT+0x88>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	701a      	strb	r2, [r3, #0]
 8005a70:	e01c      	b.n	8005aac <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8005a72:	4b12      	ldr	r3, [pc, #72]	; (8005abc <HAL_FLASHEx_Erase_IT+0x8c>)
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	4a11      	ldr	r2, [pc, #68]	; (8005abc <HAL_FLASHEx_Erase_IT+0x8c>)
 8005a78:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8005a7c:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d105      	bne.n	8005a92 <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 8005a86:	4b0c      	ldr	r3, [pc, #48]	; (8005ab8 <HAL_FLASHEx_Erase_IT+0x88>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 8005a8c:	f000 f818 	bl	8005ac0 <FLASH_MassErase>
 8005a90:	e00c      	b.n	8005aac <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	4a08      	ldr	r2, [pc, #32]	; (8005ab8 <HAL_FLASHEx_Erase_IT+0x88>)
 8005a98:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	4a06      	ldr	r2, [pc, #24]	; (8005ab8 <HAL_FLASHEx_Erase_IT+0x88>)
 8005aa0:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 f81a 	bl	8005ae0 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	20000a04 	.word	0x20000a04
 8005abc:	58004000 	.word	0x58004000

08005ac0 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <FLASH_MassErase+0x1c>)
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	4a04      	ldr	r2, [pc, #16]	; (8005adc <FLASH_MassErase+0x1c>)
 8005aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ace:	f043 0304 	orr.w	r3, r3, #4
 8005ad2:	6153      	str	r3, [r2, #20]
#endif
}
 8005ad4:	bf00      	nop
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bc80      	pop	{r7}
 8005ada:	4770      	bx	lr
 8005adc:	58004000 	.word	0x58004000

08005ae0 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005ae8:	4b08      	ldr	r3, [pc, #32]	; (8005b0c <FLASH_PageErase+0x2c>)
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	4313      	orrs	r3, r2
 8005af6:	4a05      	ldr	r2, [pc, #20]	; (8005b0c <FLASH_PageErase+0x2c>)
 8005af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005afc:	f043 0302 	orr.w	r3, r3, #2
 8005b00:	6153      	str	r3, [r2, #20]
#endif
}
 8005b02:	bf00      	nop
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bc80      	pop	{r7}
 8005b0a:	4770      	bx	lr
 8005b0c:	58004000 	.word	0x58004000

08005b10 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005b14:	4b1f      	ldr	r3, [pc, #124]	; (8005b94 <FLASH_FlushCaches+0x84>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d117      	bne.n	8005b50 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005b20:	4b1c      	ldr	r3, [pc, #112]	; (8005b94 <FLASH_FlushCaches+0x84>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a1b      	ldr	r2, [pc, #108]	; (8005b94 <FLASH_FlushCaches+0x84>)
 8005b26:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b2a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005b2c:	4b19      	ldr	r3, [pc, #100]	; (8005b94 <FLASH_FlushCaches+0x84>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a18      	ldr	r2, [pc, #96]	; (8005b94 <FLASH_FlushCaches+0x84>)
 8005b32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	4b16      	ldr	r3, [pc, #88]	; (8005b94 <FLASH_FlushCaches+0x84>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a15      	ldr	r2, [pc, #84]	; (8005b94 <FLASH_FlushCaches+0x84>)
 8005b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b42:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b44:	4b13      	ldr	r3, [pc, #76]	; (8005b94 <FLASH_FlushCaches+0x84>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a12      	ldr	r2, [pc, #72]	; (8005b94 <FLASH_FlushCaches+0x84>)
 8005b4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b4e:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005b50:	4b10      	ldr	r3, [pc, #64]	; (8005b94 <FLASH_FlushCaches+0x84>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d117      	bne.n	8005b8c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005b5c:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <FLASH_FlushCaches+0x84>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a0c      	ldr	r2, [pc, #48]	; (8005b94 <FLASH_FlushCaches+0x84>)
 8005b62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b66:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005b68:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <FLASH_FlushCaches+0x84>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a09      	ldr	r2, [pc, #36]	; (8005b94 <FLASH_FlushCaches+0x84>)
 8005b6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	4b07      	ldr	r3, [pc, #28]	; (8005b94 <FLASH_FlushCaches+0x84>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a06      	ldr	r2, [pc, #24]	; (8005b94 <FLASH_FlushCaches+0x84>)
 8005b7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b7e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005b80:	4b04      	ldr	r3, [pc, #16]	; (8005b94 <FLASH_FlushCaches+0x84>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a03      	ldr	r2, [pc, #12]	; (8005b94 <FLASH_FlushCaches+0x84>)
 8005b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b8a:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8005b8c:	bf00      	nop
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bc80      	pop	{r7}
 8005b92:	4770      	bx	lr
 8005b94:	58004000 	.word	0x58004000

08005b98 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005b9c:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <FLASH_AcknowledgePageErase+0x1c>)
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	4a04      	ldr	r2, [pc, #16]	; (8005bb4 <FLASH_AcknowledgePageErase+0x1c>)
 8005ba2:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8005ba6:	f023 0302 	bic.w	r3, r3, #2
 8005baa:	6153      	str	r3, [r2, #20]
#endif
}
 8005bac:	bf00      	nop
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bc80      	pop	{r7}
 8005bb2:	4770      	bx	lr
 8005bb4:	58004000 	.word	0x58004000

08005bb8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005bc6:	e140      	b.n	8005e4a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	2101      	movs	r1, #1
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f000 8132 	beq.w	8005e44 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f003 0303 	and.w	r3, r3, #3
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d005      	beq.n	8005bf8 <HAL_GPIO_Init+0x40>
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f003 0303 	and.w	r3, r3, #3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d130      	bne.n	8005c5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	2203      	movs	r2, #3
 8005c04:	fa02 f303 	lsl.w	r3, r2, r3
 8005c08:	43db      	mvns	r3, r3
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	68da      	ldr	r2, [r3, #12]
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c2e:	2201      	movs	r2, #1
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	fa02 f303 	lsl.w	r3, r2, r3
 8005c36:	43db      	mvns	r3, r3
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	091b      	lsrs	r3, r3, #4
 8005c44:	f003 0201 	and.w	r2, r3, #1
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d017      	beq.n	8005c96 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	2203      	movs	r2, #3
 8005c72:	fa02 f303 	lsl.w	r3, r2, r3
 8005c76:	43db      	mvns	r3, r3
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d123      	bne.n	8005cea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	08da      	lsrs	r2, r3, #3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	3208      	adds	r2, #8
 8005caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	220f      	movs	r2, #15
 8005cba:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbe:	43db      	mvns	r3, r3
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	691a      	ldr	r2, [r3, #16]
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	08da      	lsrs	r2, r3, #3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3208      	adds	r2, #8
 8005ce4:	6939      	ldr	r1, [r7, #16]
 8005ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	2203      	movs	r2, #3
 8005cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfa:	43db      	mvns	r3, r3
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f003 0203 	and.w	r2, r3, #3
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f000 808c 	beq.w	8005e44 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005d2c:	4a4e      	ldr	r2, [pc, #312]	; (8005e68 <HAL_GPIO_Init+0x2b0>)
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	089b      	lsrs	r3, r3, #2
 8005d32:	3302      	adds	r3, #2
 8005d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f003 0303 	and.w	r3, r3, #3
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	2207      	movs	r2, #7
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	43db      	mvns	r3, r3
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005d56:	d00d      	beq.n	8005d74 <HAL_GPIO_Init+0x1bc>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a44      	ldr	r2, [pc, #272]	; (8005e6c <HAL_GPIO_Init+0x2b4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d007      	beq.n	8005d70 <HAL_GPIO_Init+0x1b8>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a43      	ldr	r2, [pc, #268]	; (8005e70 <HAL_GPIO_Init+0x2b8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d101      	bne.n	8005d6c <HAL_GPIO_Init+0x1b4>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e004      	b.n	8005d76 <HAL_GPIO_Init+0x1be>
 8005d6c:	2307      	movs	r3, #7
 8005d6e:	e002      	b.n	8005d76 <HAL_GPIO_Init+0x1be>
 8005d70:	2301      	movs	r3, #1
 8005d72:	e000      	b.n	8005d76 <HAL_GPIO_Init+0x1be>
 8005d74:	2300      	movs	r3, #0
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	f002 0203 	and.w	r2, r2, #3
 8005d7c:	0092      	lsls	r2, r2, #2
 8005d7e:	4093      	lsls	r3, r2
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005d86:	4938      	ldr	r1, [pc, #224]	; (8005e68 <HAL_GPIO_Init+0x2b0>)
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	089b      	lsrs	r3, r3, #2
 8005d8c:	3302      	adds	r3, #2
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d94:	4b37      	ldr	r3, [pc, #220]	; (8005e74 <HAL_GPIO_Init+0x2bc>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	43db      	mvns	r3, r3
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	4013      	ands	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d003      	beq.n	8005db8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005db8:	4a2e      	ldr	r2, [pc, #184]	; (8005e74 <HAL_GPIO_Init+0x2bc>)
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005dbe:	4b2d      	ldr	r3, [pc, #180]	; (8005e74 <HAL_GPIO_Init+0x2bc>)
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	43db      	mvns	r3, r3
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005de2:	4a24      	ldr	r2, [pc, #144]	; (8005e74 <HAL_GPIO_Init+0x2bc>)
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005de8:	4b22      	ldr	r3, [pc, #136]	; (8005e74 <HAL_GPIO_Init+0x2bc>)
 8005dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dee:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	43db      	mvns	r3, r3
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4013      	ands	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005e0e:	4a19      	ldr	r2, [pc, #100]	; (8005e74 <HAL_GPIO_Init+0x2bc>)
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005e16:	4b17      	ldr	r3, [pc, #92]	; (8005e74 <HAL_GPIO_Init+0x2bc>)
 8005e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e1c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	43db      	mvns	r3, r3
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	4013      	ands	r3, r2
 8005e26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d003      	beq.n	8005e3c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005e3c:	4a0d      	ldr	r2, [pc, #52]	; (8005e74 <HAL_GPIO_Init+0x2bc>)
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	3301      	adds	r3, #1
 8005e48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	fa22 f303 	lsr.w	r3, r2, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f47f aeb7 	bne.w	8005bc8 <HAL_GPIO_Init+0x10>
  }
}
 8005e5a:	bf00      	nop
 8005e5c:	bf00      	nop
 8005e5e:	371c      	adds	r7, #28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bc80      	pop	{r7}
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40010000 	.word	0x40010000
 8005e6c:	48000400 	.word	0x48000400
 8005e70:	48000800 	.word	0x48000800
 8005e74:	58000800 	.word	0x58000800

08005e78 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e82:	2300      	movs	r3, #0
 8005e84:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005e86:	e0af      	b.n	8005fe8 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005e88:	2201      	movs	r2, #1
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	4013      	ands	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 80a2 	beq.w	8005fe2 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005e9e:	4a59      	ldr	r2, [pc, #356]	; (8006004 <HAL_GPIO_DeInit+0x18c>)
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	089b      	lsrs	r3, r3, #2
 8005ea4:	3302      	adds	r3, #2
 8005ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eaa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	2207      	movs	r2, #7
 8005eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005ec6:	d00d      	beq.n	8005ee4 <HAL_GPIO_DeInit+0x6c>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a4f      	ldr	r2, [pc, #316]	; (8006008 <HAL_GPIO_DeInit+0x190>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d007      	beq.n	8005ee0 <HAL_GPIO_DeInit+0x68>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a4e      	ldr	r2, [pc, #312]	; (800600c <HAL_GPIO_DeInit+0x194>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d101      	bne.n	8005edc <HAL_GPIO_DeInit+0x64>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e004      	b.n	8005ee6 <HAL_GPIO_DeInit+0x6e>
 8005edc:	2307      	movs	r3, #7
 8005ede:	e002      	b.n	8005ee6 <HAL_GPIO_DeInit+0x6e>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e000      	b.n	8005ee6 <HAL_GPIO_DeInit+0x6e>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	f002 0203 	and.w	r2, r2, #3
 8005eec:	0092      	lsls	r2, r2, #2
 8005eee:	4093      	lsls	r3, r2
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d136      	bne.n	8005f64 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005ef6:	4b46      	ldr	r3, [pc, #280]	; (8006010 <HAL_GPIO_DeInit+0x198>)
 8005ef8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	43db      	mvns	r3, r3
 8005f00:	4943      	ldr	r1, [pc, #268]	; (8006010 <HAL_GPIO_DeInit+0x198>)
 8005f02:	4013      	ands	r3, r2
 8005f04:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005f08:	4b41      	ldr	r3, [pc, #260]	; (8006010 <HAL_GPIO_DeInit+0x198>)
 8005f0a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	43db      	mvns	r3, r3
 8005f12:	493f      	ldr	r1, [pc, #252]	; (8006010 <HAL_GPIO_DeInit+0x198>)
 8005f14:	4013      	ands	r3, r2
 8005f16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005f1a:	4b3d      	ldr	r3, [pc, #244]	; (8006010 <HAL_GPIO_DeInit+0x198>)
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	43db      	mvns	r3, r3
 8005f22:	493b      	ldr	r1, [pc, #236]	; (8006010 <HAL_GPIO_DeInit+0x198>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005f28:	4b39      	ldr	r3, [pc, #228]	; (8006010 <HAL_GPIO_DeInit+0x198>)
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	43db      	mvns	r3, r3
 8005f30:	4937      	ldr	r1, [pc, #220]	; (8006010 <HAL_GPIO_DeInit+0x198>)
 8005f32:	4013      	ands	r3, r2
 8005f34:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f003 0303 	and.w	r3, r3, #3
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	2207      	movs	r2, #7
 8005f40:	fa02 f303 	lsl.w	r3, r2, r3
 8005f44:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005f46:	4a2f      	ldr	r2, [pc, #188]	; (8006004 <HAL_GPIO_DeInit+0x18c>)
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	089b      	lsrs	r3, r3, #2
 8005f4c:	3302      	adds	r3, #2
 8005f4e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	43da      	mvns	r2, r3
 8005f56:	482b      	ldr	r0, [pc, #172]	; (8006004 <HAL_GPIO_DeInit+0x18c>)
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	089b      	lsrs	r3, r3, #2
 8005f5c:	400a      	ands	r2, r1
 8005f5e:	3302      	adds	r3, #2
 8005f60:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	2103      	movs	r1, #3
 8005f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f72:	431a      	orrs	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	08da      	lsrs	r2, r3, #3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3208      	adds	r2, #8
 8005f80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	220f      	movs	r2, #15
 8005f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f92:	43db      	mvns	r3, r3
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	08d2      	lsrs	r2, r2, #3
 8005f98:	4019      	ands	r1, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	3208      	adds	r2, #8
 8005f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689a      	ldr	r2, [r3, #8]
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	2103      	movs	r1, #3
 8005fac:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	401a      	ands	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc4:	43db      	mvns	r3, r3
 8005fc6:	401a      	ands	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	005b      	lsls	r3, r3, #1
 8005fd4:	2103      	movs	r1, #3
 8005fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005fda:	43db      	mvns	r3, r3
 8005fdc:	401a      	ands	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f47f af49 	bne.w	8005e88 <HAL_GPIO_DeInit+0x10>
  }
}
 8005ff6:	bf00      	nop
 8005ff8:	bf00      	nop
 8005ffa:	371c      	adds	r7, #28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bc80      	pop	{r7}
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40010000 	.word	0x40010000
 8006008:	48000400 	.word	0x48000400
 800600c:	48000800 	.word	0x48000800
 8006010:	58000800 	.word	0x58000800

08006014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	807b      	strh	r3, [r7, #2]
 8006020:	4613      	mov	r3, r2
 8006022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006024:	787b      	ldrb	r3, [r7, #1]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800602a:	887a      	ldrh	r2, [r7, #2]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006030:	e002      	b.n	8006038 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006032:	887a      	ldrh	r2, [r7, #2]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	bc80      	pop	{r7}
 8006040:	4770      	bx	lr
	...

08006044 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	4603      	mov	r3, r0
 800604c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800604e:	4b08      	ldr	r3, [pc, #32]	; (8006070 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	88fb      	ldrh	r3, [r7, #6]
 8006054:	4013      	ands	r3, r2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d006      	beq.n	8006068 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800605a:	4a05      	ldr	r2, [pc, #20]	; (8006070 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800605c:	88fb      	ldrh	r3, [r7, #6]
 800605e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006060:	88fb      	ldrh	r3, [r7, #6]
 8006062:	4618      	mov	r0, r3
 8006064:	f005 fffe 	bl	800c064 <HAL_GPIO_EXTI_Callback>
  }
}
 8006068:	bf00      	nop
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	58000800 	.word	0x58000800

08006074 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e081      	b.n	800618a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d106      	bne.n	80060a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7fb fdec 	bl	8001c78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2224      	movs	r2, #36	; 0x24
 80060a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0201 	bic.w	r2, r2, #1
 80060b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80060c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d107      	bne.n	80060ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689a      	ldr	r2, [r3, #8]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060ea:	609a      	str	r2, [r3, #8]
 80060ec:	e006      	b.n	80060fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689a      	ldr	r2, [r3, #8]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80060fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	2b02      	cmp	r3, #2
 8006102:	d104      	bne.n	800610e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800610c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	6812      	ldr	r2, [r2, #0]
 8006118:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800611c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006120:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006130:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691a      	ldr	r2, [r3, #16]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	69d9      	ldr	r1, [r3, #28]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a1a      	ldr	r2, [r3, #32]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0201 	orr.w	r2, r2, #1
 800616a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2220      	movs	r2, #32
 8006176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
	...

08006194 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af02      	add	r7, sp, #8
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	607a      	str	r2, [r7, #4]
 800619e:	461a      	mov	r2, r3
 80061a0:	460b      	mov	r3, r1
 80061a2:	817b      	strh	r3, [r7, #10]
 80061a4:	4613      	mov	r3, r2
 80061a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	f040 80da 	bne.w	800636a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d101      	bne.n	80061c4 <HAL_I2C_Master_Transmit+0x30>
 80061c0:	2302      	movs	r3, #2
 80061c2:	e0d3      	b.n	800636c <HAL_I2C_Master_Transmit+0x1d8>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80061cc:	f7fc fb9a 	bl	8002904 <HAL_GetTick>
 80061d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	2319      	movs	r3, #25
 80061d8:	2201      	movs	r2, #1
 80061da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 f9e5 	bl	80065ae <I2C_WaitOnFlagUntilTimeout>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e0be      	b.n	800636c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2221      	movs	r2, #33	; 0x21
 80061f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2210      	movs	r2, #16
 80061fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	893a      	ldrh	r2, [r7, #8]
 800620e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800621a:	b29b      	uxth	r3, r3
 800621c:	2bff      	cmp	r3, #255	; 0xff
 800621e:	d90e      	bls.n	800623e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	22ff      	movs	r2, #255	; 0xff
 8006224:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800622a:	b2da      	uxtb	r2, r3
 800622c:	8979      	ldrh	r1, [r7, #10]
 800622e:	4b51      	ldr	r3, [pc, #324]	; (8006374 <HAL_I2C_Master_Transmit+0x1e0>)
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f000 fbdc 	bl	80069f4 <I2C_TransferConfig>
 800623c:	e06c      	b.n	8006318 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006242:	b29a      	uxth	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800624c:	b2da      	uxtb	r2, r3
 800624e:	8979      	ldrh	r1, [r7, #10]
 8006250:	4b48      	ldr	r3, [pc, #288]	; (8006374 <HAL_I2C_Master_Transmit+0x1e0>)
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 fbcb 	bl	80069f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800625e:	e05b      	b.n	8006318 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	6a39      	ldr	r1, [r7, #32]
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 f9e2 	bl	800662e <I2C_WaitOnTXISFlagUntilTimeout>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e07b      	b.n	800636c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006278:	781a      	ldrb	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800628e:	b29b      	uxth	r3, r3
 8006290:	3b01      	subs	r3, #1
 8006292:	b29a      	uxth	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800629c:	3b01      	subs	r3, #1
 800629e:	b29a      	uxth	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d034      	beq.n	8006318 <HAL_I2C_Master_Transmit+0x184>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d130      	bne.n	8006318 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	2200      	movs	r2, #0
 80062be:	2180      	movs	r1, #128	; 0x80
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f974 	bl	80065ae <I2C_WaitOnFlagUntilTimeout>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e04d      	b.n	800636c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	2bff      	cmp	r3, #255	; 0xff
 80062d8:	d90e      	bls.n	80062f8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	22ff      	movs	r2, #255	; 0xff
 80062de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	8979      	ldrh	r1, [r7, #10]
 80062e8:	2300      	movs	r3, #0
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 fb7f 	bl	80069f4 <I2C_TransferConfig>
 80062f6:	e00f      	b.n	8006318 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006306:	b2da      	uxtb	r2, r3
 8006308:	8979      	ldrh	r1, [r7, #10]
 800630a:	2300      	movs	r3, #0
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 fb6e 	bl	80069f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800631c:	b29b      	uxth	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d19e      	bne.n	8006260 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	6a39      	ldr	r1, [r7, #32]
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f000 f9c1 	bl	80066ae <I2C_WaitOnSTOPFlagUntilTimeout>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e01a      	b.n	800636c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2220      	movs	r2, #32
 800633c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6859      	ldr	r1, [r3, #4]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	4b0b      	ldr	r3, [pc, #44]	; (8006378 <HAL_I2C_Master_Transmit+0x1e4>)
 800634a:	400b      	ands	r3, r1
 800634c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2220      	movs	r2, #32
 8006352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	e000      	b.n	800636c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800636a:	2302      	movs	r3, #2
  }
}
 800636c:	4618      	mov	r0, r3
 800636e:	3718      	adds	r7, #24
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	80002000 	.word	0x80002000
 8006378:	fe00e800 	.word	0xfe00e800

0800637c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b088      	sub	sp, #32
 8006380:	af02      	add	r7, sp, #8
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	607a      	str	r2, [r7, #4]
 8006386:	461a      	mov	r2, r3
 8006388:	460b      	mov	r3, r1
 800638a:	817b      	strh	r3, [r7, #10]
 800638c:	4613      	mov	r3, r2
 800638e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b20      	cmp	r3, #32
 800639a:	f040 80db 	bne.w	8006554 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_I2C_Master_Receive+0x30>
 80063a8:	2302      	movs	r3, #2
 80063aa:	e0d4      	b.n	8006556 <HAL_I2C_Master_Receive+0x1da>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80063b4:	f7fc faa6 	bl	8002904 <HAL_GetTick>
 80063b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	2319      	movs	r3, #25
 80063c0:	2201      	movs	r2, #1
 80063c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 f8f1 	bl	80065ae <I2C_WaitOnFlagUntilTimeout>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e0bf      	b.n	8006556 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2222      	movs	r2, #34	; 0x22
 80063da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2210      	movs	r2, #16
 80063e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	893a      	ldrh	r2, [r7, #8]
 80063f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006402:	b29b      	uxth	r3, r3
 8006404:	2bff      	cmp	r3, #255	; 0xff
 8006406:	d90e      	bls.n	8006426 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	22ff      	movs	r2, #255	; 0xff
 800640c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006412:	b2da      	uxtb	r2, r3
 8006414:	8979      	ldrh	r1, [r7, #10]
 8006416:	4b52      	ldr	r3, [pc, #328]	; (8006560 <HAL_I2C_Master_Receive+0x1e4>)
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 fae8 	bl	80069f4 <I2C_TransferConfig>
 8006424:	e06d      	b.n	8006502 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642a:	b29a      	uxth	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006434:	b2da      	uxtb	r2, r3
 8006436:	8979      	ldrh	r1, [r7, #10]
 8006438:	4b49      	ldr	r3, [pc, #292]	; (8006560 <HAL_I2C_Master_Receive+0x1e4>)
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 fad7 	bl	80069f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006446:	e05c      	b.n	8006502 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	6a39      	ldr	r1, [r7, #32]
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 f96b 	bl	8006728 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e07c      	b.n	8006556 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	b2d2      	uxtb	r2, r2
 8006468:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006478:	3b01      	subs	r3, #1
 800647a:	b29a      	uxth	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006484:	b29b      	uxth	r3, r3
 8006486:	3b01      	subs	r3, #1
 8006488:	b29a      	uxth	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006492:	b29b      	uxth	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d034      	beq.n	8006502 <HAL_I2C_Master_Receive+0x186>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649c:	2b00      	cmp	r3, #0
 800649e:	d130      	bne.n	8006502 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	2200      	movs	r2, #0
 80064a8:	2180      	movs	r1, #128	; 0x80
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 f87f 	bl	80065ae <I2C_WaitOnFlagUntilTimeout>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e04d      	b.n	8006556 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064be:	b29b      	uxth	r3, r3
 80064c0:	2bff      	cmp	r3, #255	; 0xff
 80064c2:	d90e      	bls.n	80064e2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	22ff      	movs	r2, #255	; 0xff
 80064c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	8979      	ldrh	r1, [r7, #10]
 80064d2:	2300      	movs	r3, #0
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 fa8a 	bl	80069f4 <I2C_TransferConfig>
 80064e0:	e00f      	b.n	8006502 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	8979      	ldrh	r1, [r7, #10]
 80064f4:	2300      	movs	r3, #0
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 fa79 	bl	80069f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006506:	b29b      	uxth	r3, r3
 8006508:	2b00      	cmp	r3, #0
 800650a:	d19d      	bne.n	8006448 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	6a39      	ldr	r1, [r7, #32]
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f8cc 	bl	80066ae <I2C_WaitOnSTOPFlagUntilTimeout>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e01a      	b.n	8006556 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2220      	movs	r2, #32
 8006526:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6859      	ldr	r1, [r3, #4]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	4b0c      	ldr	r3, [pc, #48]	; (8006564 <HAL_I2C_Master_Receive+0x1e8>)
 8006534:	400b      	ands	r3, r1
 8006536:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2220      	movs	r2, #32
 800653c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	e000      	b.n	8006556 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006554:	2302      	movs	r3, #2
  }
}
 8006556:	4618      	mov	r0, r3
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	80002400 	.word	0x80002400
 8006564:	fe00e800 	.word	0xfe00e800

08006568 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b02      	cmp	r3, #2
 800657c:	d103      	bne.n	8006586 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2200      	movs	r2, #0
 8006584:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b01      	cmp	r3, #1
 8006592:	d007      	beq.n	80065a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699a      	ldr	r2, [r3, #24]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f042 0201 	orr.w	r2, r2, #1
 80065a2:	619a      	str	r2, [r3, #24]
  }
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bc80      	pop	{r7}
 80065ac:	4770      	bx	lr

080065ae <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	603b      	str	r3, [r7, #0]
 80065ba:	4613      	mov	r3, r2
 80065bc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065be:	e022      	b.n	8006606 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c6:	d01e      	beq.n	8006606 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065c8:	f7fc f99c 	bl	8002904 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d302      	bcc.n	80065de <I2C_WaitOnFlagUntilTimeout+0x30>
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d113      	bne.n	8006606 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e2:	f043 0220 	orr.w	r2, r3, #32
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e00f      	b.n	8006626 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	699a      	ldr	r2, [r3, #24]
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	4013      	ands	r3, r2
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	429a      	cmp	r2, r3
 8006614:	bf0c      	ite	eq
 8006616:	2301      	moveq	r3, #1
 8006618:	2300      	movne	r3, #0
 800661a:	b2db      	uxtb	r3, r3
 800661c:	461a      	mov	r2, r3
 800661e:	79fb      	ldrb	r3, [r7, #7]
 8006620:	429a      	cmp	r2, r3
 8006622:	d0cd      	beq.n	80065c0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b084      	sub	sp, #16
 8006632:	af00      	add	r7, sp, #0
 8006634:	60f8      	str	r0, [r7, #12]
 8006636:	60b9      	str	r1, [r7, #8]
 8006638:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800663a:	e02c      	b.n	8006696 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	68b9      	ldr	r1, [r7, #8]
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 f8eb 	bl	800681c <I2C_IsErrorOccurred>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e02a      	b.n	80066a6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006656:	d01e      	beq.n	8006696 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006658:	f7fc f954 	bl	8002904 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	429a      	cmp	r2, r3
 8006666:	d302      	bcc.n	800666e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d113      	bne.n	8006696 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006672:	f043 0220 	orr.w	r2, r3, #32
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2220      	movs	r2, #32
 800667e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e007      	b.n	80066a6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	f003 0302 	and.w	r3, r3, #2
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d1cb      	bne.n	800663c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b084      	sub	sp, #16
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	60f8      	str	r0, [r7, #12]
 80066b6:	60b9      	str	r1, [r7, #8]
 80066b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066ba:	e028      	b.n	800670e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	68b9      	ldr	r1, [r7, #8]
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f000 f8ab 	bl	800681c <I2C_IsErrorOccurred>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d001      	beq.n	80066d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e026      	b.n	800671e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066d0:	f7fc f918 	bl	8002904 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d302      	bcc.n	80066e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d113      	bne.n	800670e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ea:	f043 0220 	orr.w	r2, r3, #32
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2220      	movs	r2, #32
 80066f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e007      	b.n	800671e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	f003 0320 	and.w	r3, r3, #32
 8006718:	2b20      	cmp	r3, #32
 800671a:	d1cf      	bne.n	80066bc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
	...

08006728 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006734:	e064      	b.n	8006800 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	68b9      	ldr	r1, [r7, #8]
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 f86e 	bl	800681c <I2C_IsErrorOccurred>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e062      	b.n	8006810 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	f003 0320 	and.w	r3, r3, #32
 8006754:	2b20      	cmp	r3, #32
 8006756:	d138      	bne.n	80067ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	f003 0304 	and.w	r3, r3, #4
 8006762:	2b04      	cmp	r3, #4
 8006764:	d105      	bne.n	8006772 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	e04e      	b.n	8006810 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	f003 0310 	and.w	r3, r3, #16
 800677c:	2b10      	cmp	r3, #16
 800677e:	d107      	bne.n	8006790 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2210      	movs	r2, #16
 8006786:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2204      	movs	r2, #4
 800678c:	645a      	str	r2, [r3, #68]	; 0x44
 800678e:	e002      	b.n	8006796 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2220      	movs	r2, #32
 800679c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6859      	ldr	r1, [r3, #4]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	4b1b      	ldr	r3, [pc, #108]	; (8006818 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80067aa:	400b      	ands	r3, r1
 80067ac:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2220      	movs	r2, #32
 80067b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e022      	b.n	8006810 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ca:	f7fc f89b 	bl	8002904 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d302      	bcc.n	80067e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10f      	bne.n	8006800 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e4:	f043 0220 	orr.w	r2, r3, #32
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2220      	movs	r2, #32
 80067f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e007      	b.n	8006810 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	f003 0304 	and.w	r3, r3, #4
 800680a:	2b04      	cmp	r3, #4
 800680c:	d193      	bne.n	8006736 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	fe00e800 	.word	0xfe00e800

0800681c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b08a      	sub	sp, #40	; 0x28
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006836:	2300      	movs	r3, #0
 8006838:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	f003 0310 	and.w	r3, r3, #16
 8006844:	2b00      	cmp	r3, #0
 8006846:	d075      	beq.n	8006934 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2210      	movs	r2, #16
 800684e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006850:	e056      	b.n	8006900 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006858:	d052      	beq.n	8006900 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800685a:	f7fc f853 	bl	8002904 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	429a      	cmp	r2, r3
 8006868:	d302      	bcc.n	8006870 <I2C_IsErrorOccurred+0x54>
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d147      	bne.n	8006900 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800687a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006882:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800688e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006892:	d12e      	bne.n	80068f2 <I2C_IsErrorOccurred+0xd6>
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800689a:	d02a      	beq.n	80068f2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800689c:	7cfb      	ldrb	r3, [r7, #19]
 800689e:	2b20      	cmp	r3, #32
 80068a0:	d027      	beq.n	80068f2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068b0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80068b2:	f7fc f827 	bl	8002904 <HAL_GetTick>
 80068b6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068b8:	e01b      	b.n	80068f2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80068ba:	f7fc f823 	bl	8002904 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	2b19      	cmp	r3, #25
 80068c6:	d914      	bls.n	80068f2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068cc:	f043 0220 	orr.w	r2, r3, #32
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	f003 0320 	and.w	r3, r3, #32
 80068fc:	2b20      	cmp	r3, #32
 80068fe:	d1dc      	bne.n	80068ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	f003 0320 	and.w	r3, r3, #32
 800690a:	2b20      	cmp	r3, #32
 800690c:	d003      	beq.n	8006916 <I2C_IsErrorOccurred+0xfa>
 800690e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006912:	2b00      	cmp	r3, #0
 8006914:	d09d      	beq.n	8006852 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800691a:	2b00      	cmp	r3, #0
 800691c:	d103      	bne.n	8006926 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2220      	movs	r2, #32
 8006924:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	f043 0304 	orr.w	r3, r3, #4
 800692c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00b      	beq.n	800695e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	f043 0301 	orr.w	r3, r3, #1
 800694c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006956:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00b      	beq.n	8006980 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006968:	6a3b      	ldr	r3, [r7, #32]
 800696a:	f043 0308 	orr.w	r3, r3, #8
 800696e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006978:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00b      	beq.n	80069a2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	f043 0302 	orr.w	r3, r3, #2
 8006990:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800699a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80069a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d01c      	beq.n	80069e4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7ff fddc 	bl	8006568 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6859      	ldr	r1, [r3, #4]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	4b0d      	ldr	r3, [pc, #52]	; (80069f0 <I2C_IsErrorOccurred+0x1d4>)
 80069bc:	400b      	ands	r3, r1
 80069be:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069c4:	6a3b      	ldr	r3, [r7, #32]
 80069c6:	431a      	orrs	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2220      	movs	r2, #32
 80069d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80069e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3728      	adds	r7, #40	; 0x28
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	fe00e800 	.word	0xfe00e800

080069f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	607b      	str	r3, [r7, #4]
 80069fe:	460b      	mov	r3, r1
 8006a00:	817b      	strh	r3, [r7, #10]
 8006a02:	4613      	mov	r3, r2
 8006a04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a06:	897b      	ldrh	r3, [r7, #10]
 8006a08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a0c:	7a7b      	ldrb	r3, [r7, #9]
 8006a0e:	041b      	lsls	r3, r3, #16
 8006a10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a14:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a22:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	0d5b      	lsrs	r3, r3, #21
 8006a2e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006a32:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <I2C_TransferConfig+0x5c>)
 8006a34:	430b      	orrs	r3, r1
 8006a36:	43db      	mvns	r3, r3
 8006a38:	ea02 0103 	and.w	r1, r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006a46:	bf00      	nop
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bc80      	pop	{r7}
 8006a4e:	4770      	bx	lr
 8006a50:	03ff63ff 	.word	0x03ff63ff

08006a54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	d138      	bne.n	8006adc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d101      	bne.n	8006a78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a74:	2302      	movs	r3, #2
 8006a76:	e032      	b.n	8006ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2224      	movs	r2, #36	; 0x24
 8006a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 0201 	bic.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006aa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6819      	ldr	r1, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f042 0201 	orr.w	r2, r2, #1
 8006ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	e000      	b.n	8006ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006adc:	2302      	movs	r3, #2
  }
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bc80      	pop	{r7}
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b20      	cmp	r3, #32
 8006afc:	d139      	bne.n	8006b72 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d101      	bne.n	8006b0c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	e033      	b.n	8006b74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2224      	movs	r2, #36	; 0x24
 8006b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 0201 	bic.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006b3a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	021b      	lsls	r3, r3, #8
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f042 0201 	orr.w	r2, r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2220      	movs	r2, #32
 8006b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	e000      	b.n	8006b74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b72:	2302      	movs	r3, #2
  }
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bc80      	pop	{r7}
 8006b7c:	4770      	bx	lr
	...

08006b80 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006b80:	b480      	push	{r7}
 8006b82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b84:	4b04      	ldr	r3, [pc, #16]	; (8006b98 <HAL_PWR_EnableBkUpAccess+0x18>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a03      	ldr	r2, [pc, #12]	; (8006b98 <HAL_PWR_EnableBkUpAccess+0x18>)
 8006b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b8e:	6013      	str	r3, [r2, #0]
}
 8006b90:	bf00      	nop
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bc80      	pop	{r7}
 8006b96:	4770      	bx	lr
 8006b98:	58000400 	.word	0x58000400

08006b9c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10c      	bne.n	8006bc8 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006bae:	4b13      	ldr	r3, [pc, #76]	; (8006bfc <HAL_PWR_EnterSLEEPMode+0x60>)
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bba:	d10d      	bne.n	8006bd8 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8006bbc:	f000 f83c 	bl	8006c38 <HAL_PWREx_DisableLowPowerRunMode>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d008      	beq.n	8006bd8 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8006bc6:	e015      	b.n	8006bf4 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8006bc8:	4b0c      	ldr	r3, [pc, #48]	; (8006bfc <HAL_PWR_EnterSLEEPMode+0x60>)
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d101      	bne.n	8006bd8 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8006bd4:	f000 f822 	bl	8006c1c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006bd8:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	4a08      	ldr	r2, [pc, #32]	; (8006c00 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006bde:	f023 0304 	bic.w	r3, r3, #4
 8006be2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006be4:	78fb      	ldrb	r3, [r7, #3]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d101      	bne.n	8006bee <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006bea:	bf30      	wfi
 8006bec:	e002      	b.n	8006bf4 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006bee:	bf40      	sev
    __WFE();
 8006bf0:	bf20      	wfe
    __WFE();
 8006bf2:	bf20      	wfe
  }
}
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	58000400 	.word	0x58000400
 8006c00:	e000ed00 	.word	0xe000ed00

08006c04 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006c04:	b480      	push	{r7}
 8006c06:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006c08:	4b03      	ldr	r3, [pc, #12]	; (8006c18 <HAL_PWREx_GetVoltageRange+0x14>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bc80      	pop	{r7}
 8006c16:	4770      	bx	lr
 8006c18:	58000400 	.word	0x58000400

08006c1c <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8006c20:	4b04      	ldr	r3, [pc, #16]	; (8006c34 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a03      	ldr	r2, [pc, #12]	; (8006c34 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c2a:	6013      	str	r3, [r2, #0]
}
 8006c2c:	bf00      	nop
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bc80      	pop	{r7}
 8006c32:	4770      	bx	lr
 8006c34:	58000400 	.word	0x58000400

08006c38 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8006c3e:	4b16      	ldr	r3, [pc, #88]	; (8006c98 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a15      	ldr	r2, [pc, #84]	; (8006c98 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006c44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c48:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8006c4a:	4b14      	ldr	r3, [pc, #80]	; (8006c9c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2232      	movs	r2, #50	; 0x32
 8006c50:	fb02 f303 	mul.w	r3, r2, r3
 8006c54:	4a12      	ldr	r2, [pc, #72]	; (8006ca0 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8006c56:	fba2 2303 	umull	r2, r3, r2, r3
 8006c5a:	0c9b      	lsrs	r3, r3, #18
 8006c5c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006c5e:	e002      	b.n	8006c66 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006c66:	4b0c      	ldr	r3, [pc, #48]	; (8006c98 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c72:	d102      	bne.n	8006c7a <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1f2      	bne.n	8006c60 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006c7a:	4b07      	ldr	r3, [pc, #28]	; (8006c98 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c86:	d101      	bne.n	8006c8c <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e000      	b.n	8006c8e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bc80      	pop	{r7}
 8006c96:	4770      	bx	lr
 8006c98:	58000400 	.word	0x58000400
 8006c9c:	20000004 	.word	0x20000004
 8006ca0:	431bde83 	.word	0x431bde83

08006ca4 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	4603      	mov	r3, r0
 8006cac:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8006cae:	4b10      	ldr	r3, [pc, #64]	; (8006cf0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f023 0307 	bic.w	r3, r3, #7
 8006cb6:	4a0e      	ldr	r2, [pc, #56]	; (8006cf0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006cb8:	f043 0302 	orr.w	r3, r3, #2
 8006cbc:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006cbe:	4b0d      	ldr	r3, [pc, #52]	; (8006cf4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	4a0c      	ldr	r2, [pc, #48]	; (8006cf4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006cc4:	f043 0304 	orr.w	r3, r3, #4
 8006cc8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8006cca:	79fb      	ldrb	r3, [r7, #7]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d101      	bne.n	8006cd4 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006cd0:	bf30      	wfi
 8006cd2:	e002      	b.n	8006cda <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006cd4:	bf40      	sev
    __WFE();
 8006cd6:	bf20      	wfe
    __WFE();
 8006cd8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006cda:	4b06      	ldr	r3, [pc, #24]	; (8006cf4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	4a05      	ldr	r2, [pc, #20]	; (8006cf4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006ce0:	f023 0304 	bic.w	r3, r3, #4
 8006ce4:	6113      	str	r3, [r2, #16]
}
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bc80      	pop	{r7}
 8006cee:	4770      	bx	lr
 8006cf0:	58000400 	.word	0x58000400
 8006cf4:	e000ed00 	.word	0xe000ed00

08006cf8 <LL_PWR_IsEnabledBkUpAccess>:
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8006cfc:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d08:	d101      	bne.n	8006d0e <LL_PWR_IsEnabledBkUpAccess+0x16>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e000      	b.n	8006d10 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bc80      	pop	{r7}
 8006d16:	4770      	bx	lr
 8006d18:	58000400 	.word	0x58000400

08006d1c <LL_RCC_HSE_EnableTcxo>:
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d2e:	6013      	str	r3, [r2, #0]
}
 8006d30:	bf00      	nop
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bc80      	pop	{r7}
 8006d36:	4770      	bx	lr

08006d38 <LL_RCC_HSE_DisableTcxo>:
{
 8006d38:	b480      	push	{r7}
 8006d3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d4a:	6013      	str	r3, [r2, #0]
}
 8006d4c:	bf00      	nop
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bc80      	pop	{r7}
 8006d52:	4770      	bx	lr

08006d54 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006d54:	b480      	push	{r7}
 8006d56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d66:	d101      	bne.n	8006d6c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e000      	b.n	8006d6e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bc80      	pop	{r7}
 8006d74:	4770      	bx	lr

08006d76 <LL_RCC_HSE_Enable>:
{
 8006d76:	b480      	push	{r7}
 8006d78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d88:	6013      	str	r3, [r2, #0]
}
 8006d8a:	bf00      	nop
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bc80      	pop	{r7}
 8006d90:	4770      	bx	lr

08006d92 <LL_RCC_HSE_Disable>:
{
 8006d92:	b480      	push	{r7}
 8006d94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006da4:	6013      	str	r3, [r2, #0]
}
 8006da6:	bf00      	nop
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bc80      	pop	{r7}
 8006dac:	4770      	bx	lr

08006dae <LL_RCC_HSE_IsReady>:
{
 8006dae:	b480      	push	{r7}
 8006db0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dc0:	d101      	bne.n	8006dc6 <LL_RCC_HSE_IsReady+0x18>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e000      	b.n	8006dc8 <LL_RCC_HSE_IsReady+0x1a>
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bc80      	pop	{r7}
 8006dce:	4770      	bx	lr

08006dd0 <LL_RCC_HSI_Enable>:
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006de2:	6013      	str	r3, [r2, #0]
}
 8006de4:	bf00      	nop
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc80      	pop	{r7}
 8006dea:	4770      	bx	lr

08006dec <LL_RCC_HSI_Disable>:
{
 8006dec:	b480      	push	{r7}
 8006dee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dfe:	6013      	str	r3, [r2, #0]
}
 8006e00:	bf00      	nop
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bc80      	pop	{r7}
 8006e06:	4770      	bx	lr

08006e08 <LL_RCC_HSI_IsReady>:
{
 8006e08:	b480      	push	{r7}
 8006e0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e1a:	d101      	bne.n	8006e20 <LL_RCC_HSI_IsReady+0x18>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e000      	b.n	8006e22 <LL_RCC_HSI_IsReady+0x1a>
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bc80      	pop	{r7}
 8006e28:	4770      	bx	lr

08006e2a <LL_RCC_HSI_SetCalibTrimming>:
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b083      	sub	sp, #12
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	061b      	lsls	r3, r3, #24
 8006e40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e44:	4313      	orrs	r3, r2
 8006e46:	604b      	str	r3, [r1, #4]
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bc80      	pop	{r7}
 8006e50:	4770      	bx	lr

08006e52 <LL_RCC_LSE_IsReady>:
{
 8006e52:	b480      	push	{r7}
 8006e54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d101      	bne.n	8006e6a <LL_RCC_LSE_IsReady+0x18>
 8006e66:	2301      	movs	r3, #1
 8006e68:	e000      	b.n	8006e6c <LL_RCC_LSE_IsReady+0x1a>
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bc80      	pop	{r7}
 8006e72:	4770      	bx	lr

08006e74 <LL_RCC_LSI_Enable>:
{
 8006e74:	b480      	push	{r7}
 8006e76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8006e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e84:	f043 0301 	orr.w	r3, r3, #1
 8006e88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006e8c:	bf00      	nop
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bc80      	pop	{r7}
 8006e92:	4770      	bx	lr

08006e94 <LL_RCC_LSI_Disable>:
{
 8006e94:	b480      	push	{r7}
 8006e96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ea0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ea4:	f023 0301 	bic.w	r3, r3, #1
 8006ea8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006eac:	bf00      	nop
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bc80      	pop	{r7}
 8006eb2:	4770      	bx	lr

08006eb4 <LL_RCC_LSI_IsReady>:
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ec0:	f003 0302 	and.w	r3, r3, #2
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d101      	bne.n	8006ecc <LL_RCC_LSI_IsReady+0x18>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e000      	b.n	8006ece <LL_RCC_LSI_IsReady+0x1a>
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bc80      	pop	{r7}
 8006ed4:	4770      	bx	lr

08006ed6 <LL_RCC_MSI_Enable>:
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ee4:	f043 0301 	orr.w	r3, r3, #1
 8006ee8:	6013      	str	r3, [r2, #0]
}
 8006eea:	bf00      	nop
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bc80      	pop	{r7}
 8006ef0:	4770      	bx	lr

08006ef2 <LL_RCC_MSI_Disable>:
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f00:	f023 0301 	bic.w	r3, r3, #1
 8006f04:	6013      	str	r3, [r2, #0]
}
 8006f06:	bf00      	nop
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bc80      	pop	{r7}
 8006f0c:	4770      	bx	lr

08006f0e <LL_RCC_MSI_IsReady>:
{
 8006f0e:	b480      	push	{r7}
 8006f10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d101      	bne.n	8006f24 <LL_RCC_MSI_IsReady+0x16>
 8006f20:	2301      	movs	r3, #1
 8006f22:	e000      	b.n	8006f26 <LL_RCC_MSI_IsReady+0x18>
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bc80      	pop	{r7}
 8006f2c:	4770      	bx	lr

08006f2e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8006f2e:	b480      	push	{r7}
 8006f30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8006f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0308 	and.w	r3, r3, #8
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d101      	bne.n	8006f44 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006f40:	2301      	movs	r3, #1
 8006f42:	e000      	b.n	8006f46 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bc80      	pop	{r7}
 8006f4c:	4770      	bx	lr

08006f4e <LL_RCC_MSI_GetRange>:
{
 8006f4e:	b480      	push	{r7}
 8006f50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bc80      	pop	{r7}
 8006f62:	4770      	bx	lr

08006f64 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8006f64:	b480      	push	{r7}
 8006f66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bc80      	pop	{r7}
 8006f7a:	4770      	bx	lr

08006f7c <LL_RCC_MSI_SetCalibTrimming>:
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	021b      	lsls	r3, r3, #8
 8006f92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f96:	4313      	orrs	r3, r2
 8006f98:	604b      	str	r3, [r1, #4]
}
 8006f9a:	bf00      	nop
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bc80      	pop	{r7}
 8006fa2:	4770      	bx	lr

08006fa4 <LL_RCC_SetSysClkSource>:
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f023 0203 	bic.w	r2, r3, #3
 8006fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	608b      	str	r3, [r1, #8]
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bc80      	pop	{r7}
 8006fc8:	4770      	bx	lr

08006fca <LL_RCC_GetSysClkSource>:
{
 8006fca:	b480      	push	{r7}
 8006fcc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f003 030c 	and.w	r3, r3, #12
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bc80      	pop	{r7}
 8006fde:	4770      	bx	lr

08006fe0 <LL_RCC_SetAHBPrescaler>:
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	608b      	str	r3, [r1, #8]
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	bc80      	pop	{r7}
 8007004:	4770      	bx	lr

08007006 <LL_RCC_SetAHB3Prescaler>:
{
 8007006:	b480      	push	{r7}
 8007008:	b083      	sub	sp, #12
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800700e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007012:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007016:	f023 020f 	bic.w	r2, r3, #15
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	091b      	lsrs	r3, r3, #4
 800701e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007022:	4313      	orrs	r3, r2
 8007024:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	bc80      	pop	{r7}
 8007030:	4770      	bx	lr

08007032 <LL_RCC_SetAPB1Prescaler>:
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800703a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007044:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4313      	orrs	r3, r2
 800704c:	608b      	str	r3, [r1, #8]
}
 800704e:	bf00      	nop
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	bc80      	pop	{r7}
 8007056:	4770      	bx	lr

08007058 <LL_RCC_SetAPB2Prescaler>:
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800706a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4313      	orrs	r3, r2
 8007072:	608b      	str	r3, [r1, #8]
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	bc80      	pop	{r7}
 800707c:	4770      	bx	lr

0800707e <LL_RCC_GetAHBPrescaler>:
{
 800707e:	b480      	push	{r7}
 8007080:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800708c:	4618      	mov	r0, r3
 800708e:	46bd      	mov	sp, r7
 8007090:	bc80      	pop	{r7}
 8007092:	4770      	bx	lr

08007094 <LL_RCC_GetAHB3Prescaler>:
{
 8007094:	b480      	push	{r7}
 8007096:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800709c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80070a0:	011b      	lsls	r3, r3, #4
 80070a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bc80      	pop	{r7}
 80070ac:	4770      	bx	lr

080070ae <LL_RCC_GetAPB1Prescaler>:
{
 80070ae:	b480      	push	{r7}
 80070b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80070b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80070bc:	4618      	mov	r0, r3
 80070be:	46bd      	mov	sp, r7
 80070c0:	bc80      	pop	{r7}
 80070c2:	4770      	bx	lr

080070c4 <LL_RCC_GetAPB2Prescaler>:
{
 80070c4:	b480      	push	{r7}
 80070c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80070c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bc80      	pop	{r7}
 80070d8:	4770      	bx	lr

080070da <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80070da:	b480      	push	{r7}
 80070dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80070de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070ec:	6013      	str	r3, [r2, #0]
}
 80070ee:	bf00      	nop
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bc80      	pop	{r7}
 80070f4:	4770      	bx	lr

080070f6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80070f6:	b480      	push	{r7}
 80070f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80070fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007104:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007108:	6013      	str	r3, [r2, #0]
}
 800710a:	bf00      	nop
 800710c:	46bd      	mov	sp, r7
 800710e:	bc80      	pop	{r7}
 8007110:	4770      	bx	lr

08007112 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007112:	b480      	push	{r7}
 8007114:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007120:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007124:	d101      	bne.n	800712a <LL_RCC_PLL_IsReady+0x18>
 8007126:	2301      	movs	r3, #1
 8007128:	e000      	b.n	800712c <LL_RCC_PLL_IsReady+0x1a>
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	46bd      	mov	sp, r7
 8007130:	bc80      	pop	{r7}
 8007132:	4770      	bx	lr

08007134 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007134:	b480      	push	{r7}
 8007136:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	0a1b      	lsrs	r3, r3, #8
 8007140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007144:	4618      	mov	r0, r3
 8007146:	46bd      	mov	sp, r7
 8007148:	bc80      	pop	{r7}
 800714a:	4770      	bx	lr

0800714c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800714c:	b480      	push	{r7}
 800714e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800715a:	4618      	mov	r0, r3
 800715c:	46bd      	mov	sp, r7
 800715e:	bc80      	pop	{r7}
 8007160:	4770      	bx	lr

08007162 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007162:	b480      	push	{r7}
 8007164:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007170:	4618      	mov	r0, r3
 8007172:	46bd      	mov	sp, r7
 8007174:	bc80      	pop	{r7}
 8007176:	4770      	bx	lr

08007178 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800717c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f003 0303 	and.w	r3, r3, #3
}
 8007186:	4618      	mov	r0, r3
 8007188:	46bd      	mov	sp, r7
 800718a:	bc80      	pop	{r7}
 800718c:	4770      	bx	lr

0800718e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800718e:	b480      	push	{r7}
 8007190:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800719c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071a0:	d101      	bne.n	80071a6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80071a2:	2301      	movs	r3, #1
 80071a4:	e000      	b.n	80071a8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bc80      	pop	{r7}
 80071ae:	4770      	bx	lr

080071b0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80071b0:	b480      	push	{r7}
 80071b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80071b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80071bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071c4:	d101      	bne.n	80071ca <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80071c6:	2301      	movs	r3, #1
 80071c8:	e000      	b.n	80071cc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bc80      	pop	{r7}
 80071d2:	4770      	bx	lr

080071d4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80071d4:	b480      	push	{r7}
 80071d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80071d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071e6:	d101      	bne.n	80071ec <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80071e8:	2301      	movs	r3, #1
 80071ea:	e000      	b.n	80071ee <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bc80      	pop	{r7}
 80071f4:	4770      	bx	lr

080071f6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80071f6:	b480      	push	{r7}
 80071f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80071fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007204:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007208:	d101      	bne.n	800720e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800720a:	2301      	movs	r3, #1
 800720c:	e000      	b.n	8007210 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	46bd      	mov	sp, r7
 8007214:	bc80      	pop	{r7}
 8007216:	4770      	bx	lr

08007218 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b088      	sub	sp, #32
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e38b      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800722a:	f7ff fece 	bl	8006fca <LL_RCC_GetSysClkSource>
 800722e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007230:	f7ff ffa2 	bl	8007178 <LL_RCC_PLL_GetMainSource>
 8007234:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0320 	and.w	r3, r3, #32
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 80c9 	beq.w	80073d6 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d005      	beq.n	8007256 <HAL_RCC_OscConfig+0x3e>
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	2b0c      	cmp	r3, #12
 800724e:	d17b      	bne.n	8007348 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d178      	bne.n	8007348 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007256:	f7ff fe5a 	bl	8006f0e <LL_RCC_MSI_IsReady>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d005      	beq.n	800726c <HAL_RCC_OscConfig+0x54>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e36a      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0308 	and.w	r3, r3, #8
 800727a:	2b00      	cmp	r3, #0
 800727c:	d005      	beq.n	800728a <HAL_RCC_OscConfig+0x72>
 800727e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007288:	e006      	b.n	8007298 <HAL_RCC_OscConfig+0x80>
 800728a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800728e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007292:	091b      	lsrs	r3, r3, #4
 8007294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007298:	4293      	cmp	r3, r2
 800729a:	d222      	bcs.n	80072e2 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 fd51 	bl	8007d48 <RCC_SetFlashLatencyFromMSIRange>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e348      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80072b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072ba:	f043 0308 	orr.w	r3, r3, #8
 80072be:	6013      	str	r3, [r2, #0]
 80072c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072d2:	4313      	orrs	r3, r2
 80072d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	4618      	mov	r0, r3
 80072dc:	f7ff fe4e 	bl	8006f7c <LL_RCC_MSI_SetCalibTrimming>
 80072e0:	e021      	b.n	8007326 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80072e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072ec:	f043 0308 	orr.w	r3, r3, #8
 80072f0:	6013      	str	r3, [r2, #0]
 80072f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007300:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007304:	4313      	orrs	r3, r2
 8007306:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff fe35 	bl	8006f7c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007316:	4618      	mov	r0, r3
 8007318:	f000 fd16 	bl	8007d48 <RCC_SetFlashLatencyFromMSIRange>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e30d      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007326:	f000 fcd7 	bl	8007cd8 <HAL_RCC_GetHCLKFreq>
 800732a:	4603      	mov	r3, r0
 800732c:	4aa1      	ldr	r2, [pc, #644]	; (80075b4 <HAL_RCC_OscConfig+0x39c>)
 800732e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007330:	4ba1      	ldr	r3, [pc, #644]	; (80075b8 <HAL_RCC_OscConfig+0x3a0>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4618      	mov	r0, r3
 8007336:	f7fb fadb 	bl	80028f0 <HAL_InitTick>
 800733a:	4603      	mov	r3, r0
 800733c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800733e:	7cfb      	ldrb	r3, [r7, #19]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d047      	beq.n	80073d4 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8007344:	7cfb      	ldrb	r3, [r7, #19]
 8007346:	e2fc      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a1b      	ldr	r3, [r3, #32]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d02c      	beq.n	80073aa <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007350:	f7ff fdc1 	bl	8006ed6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007354:	f7fb fad6 	bl	8002904 <HAL_GetTick>
 8007358:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800735a:	e008      	b.n	800736e <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800735c:	f7fb fad2 	bl	8002904 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	2b02      	cmp	r3, #2
 8007368:	d901      	bls.n	800736e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e2e9      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 800736e:	f7ff fdce 	bl	8006f0e <LL_RCC_MSI_IsReady>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d0f1      	beq.n	800735c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007382:	f043 0308 	orr.w	r3, r3, #8
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007396:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800739a:	4313      	orrs	r3, r2
 800739c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7ff fdea 	bl	8006f7c <LL_RCC_MSI_SetCalibTrimming>
 80073a8:	e015      	b.n	80073d6 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80073aa:	f7ff fda2 	bl	8006ef2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80073ae:	f7fb faa9 	bl	8002904 <HAL_GetTick>
 80073b2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80073b4:	e008      	b.n	80073c8 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80073b6:	f7fb faa5 	bl	8002904 <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d901      	bls.n	80073c8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e2bc      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80073c8:	f7ff fda1 	bl	8006f0e <LL_RCC_MSI_IsReady>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1f1      	bne.n	80073b6 <HAL_RCC_OscConfig+0x19e>
 80073d2:	e000      	b.n	80073d6 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80073d4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d05f      	beq.n	80074a2 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	2b08      	cmp	r3, #8
 80073e6:	d005      	beq.n	80073f4 <HAL_RCC_OscConfig+0x1dc>
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	2b0c      	cmp	r3, #12
 80073ec:	d10d      	bne.n	800740a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	2b03      	cmp	r3, #3
 80073f2:	d10a      	bne.n	800740a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073f4:	f7ff fcdb 	bl	8006dae <LL_RCC_HSE_IsReady>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d050      	beq.n	80074a0 <HAL_RCC_OscConfig+0x288>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d14c      	bne.n	80074a0 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e29b      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800740a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800741c:	4313      	orrs	r3, r2
 800741e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007428:	d102      	bne.n	8007430 <HAL_RCC_OscConfig+0x218>
 800742a:	f7ff fca4 	bl	8006d76 <LL_RCC_HSE_Enable>
 800742e:	e00d      	b.n	800744c <HAL_RCC_OscConfig+0x234>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8007438:	d104      	bne.n	8007444 <HAL_RCC_OscConfig+0x22c>
 800743a:	f7ff fc6f 	bl	8006d1c <LL_RCC_HSE_EnableTcxo>
 800743e:	f7ff fc9a 	bl	8006d76 <LL_RCC_HSE_Enable>
 8007442:	e003      	b.n	800744c <HAL_RCC_OscConfig+0x234>
 8007444:	f7ff fca5 	bl	8006d92 <LL_RCC_HSE_Disable>
 8007448:	f7ff fc76 	bl	8006d38 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d012      	beq.n	800747a <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007454:	f7fb fa56 	bl	8002904 <HAL_GetTick>
 8007458:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800745a:	e008      	b.n	800746e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800745c:	f7fb fa52 	bl	8002904 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	2b64      	cmp	r3, #100	; 0x64
 8007468:	d901      	bls.n	800746e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e269      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 800746e:	f7ff fc9e 	bl	8006dae <LL_RCC_HSE_IsReady>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d0f1      	beq.n	800745c <HAL_RCC_OscConfig+0x244>
 8007478:	e013      	b.n	80074a2 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800747a:	f7fb fa43 	bl	8002904 <HAL_GetTick>
 800747e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007480:	e008      	b.n	8007494 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007482:	f7fb fa3f 	bl	8002904 <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	2b64      	cmp	r3, #100	; 0x64
 800748e:	d901      	bls.n	8007494 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8007490:	2303      	movs	r3, #3
 8007492:	e256      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007494:	f7ff fc8b 	bl	8006dae <LL_RCC_HSE_IsReady>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1f1      	bne.n	8007482 <HAL_RCC_OscConfig+0x26a>
 800749e:	e000      	b.n	80074a2 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074a0:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0302 	and.w	r3, r3, #2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d04b      	beq.n	8007546 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	2b04      	cmp	r3, #4
 80074b2:	d005      	beq.n	80074c0 <HAL_RCC_OscConfig+0x2a8>
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	2b0c      	cmp	r3, #12
 80074b8:	d113      	bne.n	80074e2 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d110      	bne.n	80074e2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074c0:	f7ff fca2 	bl	8006e08 <LL_RCC_HSI_IsReady>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d005      	beq.n	80074d6 <HAL_RCC_OscConfig+0x2be>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e235      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	4618      	mov	r0, r3
 80074dc:	f7ff fca5 	bl	8006e2a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074e0:	e031      	b.n	8007546 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d019      	beq.n	800751e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074ea:	f7ff fc71 	bl	8006dd0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ee:	f7fb fa09 	bl	8002904 <HAL_GetTick>
 80074f2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80074f4:	e008      	b.n	8007508 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074f6:	f7fb fa05 	bl	8002904 <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	2b02      	cmp	r3, #2
 8007502:	d901      	bls.n	8007508 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e21c      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007508:	f7ff fc7e 	bl	8006e08 <LL_RCC_HSI_IsReady>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d0f1      	beq.n	80074f6 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	4618      	mov	r0, r3
 8007518:	f7ff fc87 	bl	8006e2a <LL_RCC_HSI_SetCalibTrimming>
 800751c:	e013      	b.n	8007546 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800751e:	f7ff fc65 	bl	8006dec <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007522:	f7fb f9ef 	bl	8002904 <HAL_GetTick>
 8007526:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007528:	e008      	b.n	800753c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800752a:	f7fb f9eb 	bl	8002904 <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	2b02      	cmp	r3, #2
 8007536:	d901      	bls.n	800753c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e202      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 800753c:	f7ff fc64 	bl	8006e08 <LL_RCC_HSI_IsReady>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1f1      	bne.n	800752a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0308 	and.w	r3, r3, #8
 800754e:	2b00      	cmp	r3, #0
 8007550:	d06f      	beq.n	8007632 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d057      	beq.n	800760a <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 800755a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800755e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007562:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	69da      	ldr	r2, [r3, #28]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f003 0310 	and.w	r3, r3, #16
 800756e:	429a      	cmp	r2, r3
 8007570:	d036      	beq.n	80075e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d006      	beq.n	800758a <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e1db      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	2b00      	cmp	r3, #0
 8007592:	d018      	beq.n	80075c6 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8007594:	f7ff fc7e 	bl	8006e94 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007598:	f7fb f9b4 	bl	8002904 <HAL_GetTick>
 800759c:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800759e:	e00d      	b.n	80075bc <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075a0:	f7fb f9b0 	bl	8002904 <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	2b11      	cmp	r3, #17
 80075ac:	d906      	bls.n	80075bc <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e1c7      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
 80075b2:	bf00      	nop
 80075b4:	20000004 	.word	0x20000004
 80075b8:	2000000c 	.word	0x2000000c
          while (LL_RCC_LSI_IsReady() != 0U)
 80075bc:	f7ff fc7a 	bl	8006eb4 <LL_RCC_LSI_IsReady>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1ec      	bne.n	80075a0 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80075c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075ce:	f023 0210 	bic.w	r2, r3, #16
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	69db      	ldr	r3, [r3, #28]
 80075d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075da:	4313      	orrs	r3, r2
 80075dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075e0:	f7ff fc48 	bl	8006e74 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075e4:	f7fb f98e 	bl	8002904 <HAL_GetTick>
 80075e8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80075ea:	e008      	b.n	80075fe <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075ec:	f7fb f98a 	bl	8002904 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	2b11      	cmp	r3, #17
 80075f8:	d901      	bls.n	80075fe <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e1a1      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80075fe:	f7ff fc59 	bl	8006eb4 <LL_RCC_LSI_IsReady>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d0f1      	beq.n	80075ec <HAL_RCC_OscConfig+0x3d4>
 8007608:	e013      	b.n	8007632 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800760a:	f7ff fc43 	bl	8006e94 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800760e:	f7fb f979 	bl	8002904 <HAL_GetTick>
 8007612:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8007614:	e008      	b.n	8007628 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007616:	f7fb f975 	bl	8002904 <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	2b11      	cmp	r3, #17
 8007622:	d901      	bls.n	8007628 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e18c      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8007628:	f7ff fc44 	bl	8006eb4 <LL_RCC_LSI_IsReady>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1f1      	bne.n	8007616 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0304 	and.w	r3, r3, #4
 800763a:	2b00      	cmp	r3, #0
 800763c:	f000 80d8 	beq.w	80077f0 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007640:	f7ff fb5a 	bl	8006cf8 <LL_PWR_IsEnabledBkUpAccess>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d113      	bne.n	8007672 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800764a:	f7ff fa99 	bl	8006b80 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800764e:	f7fb f959 	bl	8002904 <HAL_GetTick>
 8007652:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007654:	e008      	b.n	8007668 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007656:	f7fb f955 	bl	8002904 <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	2b02      	cmp	r3, #2
 8007662:	d901      	bls.n	8007668 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e16c      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007668:	f7ff fb46 	bl	8006cf8 <LL_PWR_IsEnabledBkUpAccess>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d0f1      	beq.n	8007656 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d07b      	beq.n	8007772 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	2b85      	cmp	r3, #133	; 0x85
 8007680:	d003      	beq.n	800768a <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	2b05      	cmp	r3, #5
 8007688:	d109      	bne.n	800769e <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800768a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800768e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007692:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007696:	f043 0304 	orr.w	r3, r3, #4
 800769a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800769e:	f7fb f931 	bl	8002904 <HAL_GetTick>
 80076a2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80076a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076b0:	f043 0301 	orr.w	r3, r3, #1
 80076b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80076b8:	e00a      	b.n	80076d0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076ba:	f7fb f923 	bl	8002904 <HAL_GetTick>
 80076be:	4602      	mov	r2, r0
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d901      	bls.n	80076d0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e138      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80076d0:	f7ff fbbf 	bl	8006e52 <LL_RCC_LSE_IsReady>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d0ef      	beq.n	80076ba <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	2b81      	cmp	r3, #129	; 0x81
 80076e0:	d003      	beq.n	80076ea <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	2b85      	cmp	r3, #133	; 0x85
 80076e8:	d121      	bne.n	800772e <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ea:	f7fb f90b 	bl	8002904 <HAL_GetTick>
 80076ee:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80076f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007704:	e00a      	b.n	800771c <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007706:	f7fb f8fd 	bl	8002904 <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	f241 3288 	movw	r2, #5000	; 0x1388
 8007714:	4293      	cmp	r3, r2
 8007716:	d901      	bls.n	800771c <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e112      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800771c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007728:	2b00      	cmp	r3, #0
 800772a:	d0ec      	beq.n	8007706 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800772c:	e060      	b.n	80077f0 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800772e:	f7fb f8e9 	bl	8002904 <HAL_GetTick>
 8007732:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800773c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007748:	e00a      	b.n	8007760 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800774a:	f7fb f8db 	bl	8002904 <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	f241 3288 	movw	r2, #5000	; 0x1388
 8007758:	4293      	cmp	r3, r2
 800775a:	d901      	bls.n	8007760 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e0f0      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1ec      	bne.n	800774a <HAL_RCC_OscConfig+0x532>
 8007770:	e03e      	b.n	80077f0 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007772:	f7fb f8c7 	bl	8002904 <HAL_GetTick>
 8007776:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800777c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007780:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800778c:	e00a      	b.n	80077a4 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800778e:	f7fb f8b9 	bl	8002904 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	f241 3288 	movw	r2, #5000	; 0x1388
 800779c:	4293      	cmp	r3, r2
 800779e:	d901      	bls.n	80077a4 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e0ce      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80077a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1ec      	bne.n	800778e <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077b4:	f7fb f8a6 	bl	8002904 <HAL_GetTick>
 80077b8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80077ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077c6:	f023 0301 	bic.w	r3, r3, #1
 80077ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80077ce:	e00a      	b.n	80077e6 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077d0:	f7fb f898 	bl	8002904 <HAL_GetTick>
 80077d4:	4602      	mov	r2, r0
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	f241 3288 	movw	r2, #5000	; 0x1388
 80077de:	4293      	cmp	r3, r2
 80077e0:	d901      	bls.n	80077e6 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e0ad      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80077e6:	f7ff fb34 	bl	8006e52 <LL_RCC_LSE_IsReady>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1ef      	bne.n	80077d0 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 80a3 	beq.w	8007940 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	2b0c      	cmp	r3, #12
 80077fe:	d076      	beq.n	80078ee <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007804:	2b02      	cmp	r3, #2
 8007806:	d14b      	bne.n	80078a0 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007808:	f7ff fc75 	bl	80070f6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800780c:	f7fb f87a 	bl	8002904 <HAL_GetTick>
 8007810:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007812:	e008      	b.n	8007826 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007814:	f7fb f876 	bl	8002904 <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	2b0a      	cmp	r3, #10
 8007820:	d901      	bls.n	8007826 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e08d      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007826:	f7ff fc74 	bl	8007112 <LL_RCC_PLL_IsReady>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1f1      	bne.n	8007814 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007834:	68da      	ldr	r2, [r3, #12]
 8007836:	4b45      	ldr	r3, [pc, #276]	; (800794c <HAL_RCC_OscConfig+0x734>)
 8007838:	4013      	ands	r3, r2
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007842:	4311      	orrs	r1, r2
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007848:	0212      	lsls	r2, r2, #8
 800784a:	4311      	orrs	r1, r2
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007850:	4311      	orrs	r1, r2
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007856:	4311      	orrs	r1, r2
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800785c:	430a      	orrs	r2, r1
 800785e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007862:	4313      	orrs	r3, r2
 8007864:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007866:	f7ff fc38 	bl	80070da <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800786a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007878:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800787a:	f7fb f843 	bl	8002904 <HAL_GetTick>
 800787e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8007880:	e008      	b.n	8007894 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007882:	f7fb f83f 	bl	8002904 <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	2b0a      	cmp	r3, #10
 800788e:	d901      	bls.n	8007894 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e056      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8007894:	f7ff fc3d 	bl	8007112 <LL_RCC_PLL_IsReady>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d0f1      	beq.n	8007882 <HAL_RCC_OscConfig+0x66a>
 800789e:	e04f      	b.n	8007940 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078a0:	f7ff fc29 	bl	80070f6 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80078a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078ae:	f023 0303 	bic.w	r3, r3, #3
 80078b2:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80078b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078be:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80078c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078c6:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c8:	f7fb f81c 	bl	8002904 <HAL_GetTick>
 80078cc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80078ce:	e008      	b.n	80078e2 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078d0:	f7fb f818 	bl	8002904 <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	2b0a      	cmp	r3, #10
 80078dc:	d901      	bls.n	80078e2 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e02f      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80078e2:	f7ff fc16 	bl	8007112 <LL_RCC_PLL_IsReady>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1f1      	bne.n	80078d0 <HAL_RCC_OscConfig+0x6b8>
 80078ec:	e028      	b.n	8007940 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d101      	bne.n	80078fa <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e023      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80078fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	f003 0203 	and.w	r2, r3, #3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790c:	429a      	cmp	r2, r3
 800790e:	d115      	bne.n	800793c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791a:	429a      	cmp	r2, r3
 800791c:	d10e      	bne.n	800793c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007928:	021b      	lsls	r3, r3, #8
 800792a:	429a      	cmp	r2, r3
 800792c:	d106      	bne.n	800793c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007938:	429a      	cmp	r2, r3
 800793a:	d001      	beq.n	8007940 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e000      	b.n	8007942 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3720      	adds	r7, #32
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	11c1808c 	.word	0x11c1808c

08007950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d101      	bne.n	8007964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e10f      	b.n	8007b84 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007964:	4b89      	ldr	r3, [pc, #548]	; (8007b8c <HAL_RCC_ClockConfig+0x23c>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0307 	and.w	r3, r3, #7
 800796c:	683a      	ldr	r2, [r7, #0]
 800796e:	429a      	cmp	r2, r3
 8007970:	d91b      	bls.n	80079aa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007972:	4b86      	ldr	r3, [pc, #536]	; (8007b8c <HAL_RCC_ClockConfig+0x23c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f023 0207 	bic.w	r2, r3, #7
 800797a:	4984      	ldr	r1, [pc, #528]	; (8007b8c <HAL_RCC_ClockConfig+0x23c>)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	4313      	orrs	r3, r2
 8007980:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007982:	f7fa ffbf 	bl	8002904 <HAL_GetTick>
 8007986:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007988:	e008      	b.n	800799c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800798a:	f7fa ffbb 	bl	8002904 <HAL_GetTick>
 800798e:	4602      	mov	r2, r0
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	2b02      	cmp	r3, #2
 8007996:	d901      	bls.n	800799c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007998:	2303      	movs	r3, #3
 800799a:	e0f3      	b.n	8007b84 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800799c:	4b7b      	ldr	r3, [pc, #492]	; (8007b8c <HAL_RCC_ClockConfig+0x23c>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 0307 	and.w	r3, r3, #7
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d1ef      	bne.n	800798a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d016      	beq.n	80079e4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7ff fb10 	bl	8006fe0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80079c0:	f7fa ffa0 	bl	8002904 <HAL_GetTick>
 80079c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80079c6:	e008      	b.n	80079da <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80079c8:	f7fa ff9c 	bl	8002904 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d901      	bls.n	80079da <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e0d4      	b.n	8007b84 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80079da:	f7ff fbd8 	bl	800718e <LL_RCC_IsActiveFlag_HPRE>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d0f1      	beq.n	80079c8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d016      	beq.n	8007a1e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7ff fb06 	bl	8007006 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80079fa:	f7fa ff83 	bl	8002904 <HAL_GetTick>
 80079fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007a00:	e008      	b.n	8007a14 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007a02:	f7fa ff7f 	bl	8002904 <HAL_GetTick>
 8007a06:	4602      	mov	r2, r0
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d901      	bls.n	8007a14 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e0b7      	b.n	8007b84 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007a14:	f7ff fbcc 	bl	80071b0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0f1      	beq.n	8007a02 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0304 	and.w	r3, r3, #4
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d016      	beq.n	8007a58 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7ff faff 	bl	8007032 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007a34:	f7fa ff66 	bl	8002904 <HAL_GetTick>
 8007a38:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007a3a:	e008      	b.n	8007a4e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007a3c:	f7fa ff62 	bl	8002904 <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d901      	bls.n	8007a4e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e09a      	b.n	8007b84 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007a4e:	f7ff fbc1 	bl	80071d4 <LL_RCC_IsActiveFlag_PPRE1>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d0f1      	beq.n	8007a3c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0308 	and.w	r3, r3, #8
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d017      	beq.n	8007a94 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	00db      	lsls	r3, r3, #3
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7ff faf4 	bl	8007058 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007a70:	f7fa ff48 	bl	8002904 <HAL_GetTick>
 8007a74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007a76:	e008      	b.n	8007a8a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007a78:	f7fa ff44 	bl	8002904 <HAL_GetTick>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d901      	bls.n	8007a8a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e07c      	b.n	8007b84 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007a8a:	f7ff fbb4 	bl	80071f6 <LL_RCC_IsActiveFlag_PPRE2>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d0f1      	beq.n	8007a78 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d043      	beq.n	8007b28 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d106      	bne.n	8007ab6 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007aa8:	f7ff f981 	bl	8006dae <LL_RCC_HSE_IsReady>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d11e      	bne.n	8007af0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e066      	b.n	8007b84 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	2b03      	cmp	r3, #3
 8007abc:	d106      	bne.n	8007acc <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007abe:	f7ff fb28 	bl	8007112 <LL_RCC_PLL_IsReady>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d113      	bne.n	8007af0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e05b      	b.n	8007b84 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d106      	bne.n	8007ae2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007ad4:	f7ff fa1b 	bl	8006f0e <LL_RCC_MSI_IsReady>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d108      	bne.n	8007af0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e050      	b.n	8007b84 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007ae2:	f7ff f991 	bl	8006e08 <LL_RCC_HSI_IsReady>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e049      	b.n	8007b84 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7ff fa55 	bl	8006fa4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007afa:	f7fa ff03 	bl	8002904 <HAL_GetTick>
 8007afe:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b00:	e00a      	b.n	8007b18 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b02:	f7fa feff 	bl	8002904 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d901      	bls.n	8007b18 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e035      	b.n	8007b84 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b18:	f7ff fa57 	bl	8006fca <LL_RCC_GetSysClkSource>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d1ec      	bne.n	8007b02 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b28:	4b18      	ldr	r3, [pc, #96]	; (8007b8c <HAL_RCC_ClockConfig+0x23c>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0307 	and.w	r3, r3, #7
 8007b30:	683a      	ldr	r2, [r7, #0]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d21b      	bcs.n	8007b6e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b36:	4b15      	ldr	r3, [pc, #84]	; (8007b8c <HAL_RCC_ClockConfig+0x23c>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f023 0207 	bic.w	r2, r3, #7
 8007b3e:	4913      	ldr	r1, [pc, #76]	; (8007b8c <HAL_RCC_ClockConfig+0x23c>)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b46:	f7fa fedd 	bl	8002904 <HAL_GetTick>
 8007b4a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b4c:	e008      	b.n	8007b60 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007b4e:	f7fa fed9 	bl	8002904 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d901      	bls.n	8007b60 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e011      	b.n	8007b84 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b60:	4b0a      	ldr	r3, [pc, #40]	; (8007b8c <HAL_RCC_ClockConfig+0x23c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0307 	and.w	r3, r3, #7
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d1ef      	bne.n	8007b4e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007b6e:	f000 f8b3 	bl	8007cd8 <HAL_RCC_GetHCLKFreq>
 8007b72:	4603      	mov	r3, r0
 8007b74:	4a06      	ldr	r2, [pc, #24]	; (8007b90 <HAL_RCC_ClockConfig+0x240>)
 8007b76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007b78:	4b06      	ldr	r3, [pc, #24]	; (8007b94 <HAL_RCC_ClockConfig+0x244>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7fa feb7 	bl	80028f0 <HAL_InitTick>
 8007b82:	4603      	mov	r3, r0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	58004000 	.word	0x58004000
 8007b90:	20000004 	.word	0x20000004
 8007b94:	2000000c 	.word	0x2000000c

08007b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b98:	b590      	push	{r4, r7, lr}
 8007b9a:	b087      	sub	sp, #28
 8007b9c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ba6:	f7ff fa10 	bl	8006fca <LL_RCC_GetSysClkSource>
 8007baa:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007bac:	f7ff fae4 	bl	8007178 <LL_RCC_PLL_GetMainSource>
 8007bb0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d005      	beq.n	8007bc4 <HAL_RCC_GetSysClockFreq+0x2c>
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	2b0c      	cmp	r3, #12
 8007bbc:	d139      	bne.n	8007c32 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d136      	bne.n	8007c32 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007bc4:	f7ff f9b3 	bl	8006f2e <LL_RCC_MSI_IsEnabledRangeSelect>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d115      	bne.n	8007bfa <HAL_RCC_GetSysClockFreq+0x62>
 8007bce:	f7ff f9ae 	bl	8006f2e <LL_RCC_MSI_IsEnabledRangeSelect>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d106      	bne.n	8007be6 <HAL_RCC_GetSysClockFreq+0x4e>
 8007bd8:	f7ff f9b9 	bl	8006f4e <LL_RCC_MSI_GetRange>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	0a1b      	lsrs	r3, r3, #8
 8007be0:	f003 030f 	and.w	r3, r3, #15
 8007be4:	e005      	b.n	8007bf2 <HAL_RCC_GetSysClockFreq+0x5a>
 8007be6:	f7ff f9bd 	bl	8006f64 <LL_RCC_MSI_GetRangeAfterStandby>
 8007bea:	4603      	mov	r3, r0
 8007bec:	0a1b      	lsrs	r3, r3, #8
 8007bee:	f003 030f 	and.w	r3, r3, #15
 8007bf2:	4a36      	ldr	r2, [pc, #216]	; (8007ccc <HAL_RCC_GetSysClockFreq+0x134>)
 8007bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bf8:	e014      	b.n	8007c24 <HAL_RCC_GetSysClockFreq+0x8c>
 8007bfa:	f7ff f998 	bl	8006f2e <LL_RCC_MSI_IsEnabledRangeSelect>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d106      	bne.n	8007c12 <HAL_RCC_GetSysClockFreq+0x7a>
 8007c04:	f7ff f9a3 	bl	8006f4e <LL_RCC_MSI_GetRange>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	091b      	lsrs	r3, r3, #4
 8007c0c:	f003 030f 	and.w	r3, r3, #15
 8007c10:	e005      	b.n	8007c1e <HAL_RCC_GetSysClockFreq+0x86>
 8007c12:	f7ff f9a7 	bl	8006f64 <LL_RCC_MSI_GetRangeAfterStandby>
 8007c16:	4603      	mov	r3, r0
 8007c18:	091b      	lsrs	r3, r3, #4
 8007c1a:	f003 030f 	and.w	r3, r3, #15
 8007c1e:	4a2b      	ldr	r2, [pc, #172]	; (8007ccc <HAL_RCC_GetSysClockFreq+0x134>)
 8007c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c24:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d115      	bne.n	8007c58 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007c30:	e012      	b.n	8007c58 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	2b04      	cmp	r3, #4
 8007c36:	d102      	bne.n	8007c3e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007c38:	4b25      	ldr	r3, [pc, #148]	; (8007cd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8007c3a:	617b      	str	r3, [r7, #20]
 8007c3c:	e00c      	b.n	8007c58 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	2b08      	cmp	r3, #8
 8007c42:	d109      	bne.n	8007c58 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007c44:	f7ff f886 	bl	8006d54 <LL_RCC_HSE_IsEnabledDiv2>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d102      	bne.n	8007c54 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007c4e:	4b20      	ldr	r3, [pc, #128]	; (8007cd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8007c50:	617b      	str	r3, [r7, #20]
 8007c52:	e001      	b.n	8007c58 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007c54:	4b1f      	ldr	r3, [pc, #124]	; (8007cd4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007c56:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c58:	f7ff f9b7 	bl	8006fca <LL_RCC_GetSysClkSource>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b0c      	cmp	r3, #12
 8007c60:	d12f      	bne.n	8007cc2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007c62:	f7ff fa89 	bl	8007178 <LL_RCC_PLL_GetMainSource>
 8007c66:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d003      	beq.n	8007c76 <HAL_RCC_GetSysClockFreq+0xde>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b03      	cmp	r3, #3
 8007c72:	d003      	beq.n	8007c7c <HAL_RCC_GetSysClockFreq+0xe4>
 8007c74:	e00d      	b.n	8007c92 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007c76:	4b16      	ldr	r3, [pc, #88]	; (8007cd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8007c78:	60fb      	str	r3, [r7, #12]
        break;
 8007c7a:	e00d      	b.n	8007c98 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007c7c:	f7ff f86a 	bl	8006d54 <LL_RCC_HSE_IsEnabledDiv2>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d102      	bne.n	8007c8c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007c86:	4b12      	ldr	r3, [pc, #72]	; (8007cd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8007c88:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007c8a:	e005      	b.n	8007c98 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8007c8c:	4b11      	ldr	r3, [pc, #68]	; (8007cd4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007c8e:	60fb      	str	r3, [r7, #12]
        break;
 8007c90:	e002      	b.n	8007c98 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	60fb      	str	r3, [r7, #12]
        break;
 8007c96:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007c98:	f7ff fa4c 	bl	8007134 <LL_RCC_PLL_GetN>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	fb03 f402 	mul.w	r4, r3, r2
 8007ca4:	f7ff fa5d 	bl	8007162 <LL_RCC_PLL_GetDivider>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	091b      	lsrs	r3, r3, #4
 8007cac:	3301      	adds	r3, #1
 8007cae:	fbb4 f4f3 	udiv	r4, r4, r3
 8007cb2:	f7ff fa4b 	bl	800714c <LL_RCC_PLL_GetR>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	0f5b      	lsrs	r3, r3, #29
 8007cba:	3301      	adds	r3, #1
 8007cbc:	fbb4 f3f3 	udiv	r3, r4, r3
 8007cc0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007cc2:	697b      	ldr	r3, [r7, #20]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	371c      	adds	r7, #28
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd90      	pop	{r4, r7, pc}
 8007ccc:	0801f7e4 	.word	0x0801f7e4
 8007cd0:	00f42400 	.word	0x00f42400
 8007cd4:	01e84800 	.word	0x01e84800

08007cd8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cd8:	b598      	push	{r3, r4, r7, lr}
 8007cda:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007cdc:	f7ff ff5c 	bl	8007b98 <HAL_RCC_GetSysClockFreq>
 8007ce0:	4604      	mov	r4, r0
 8007ce2:	f7ff f9cc 	bl	800707e <LL_RCC_GetAHBPrescaler>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	091b      	lsrs	r3, r3, #4
 8007cea:	f003 030f 	and.w	r3, r3, #15
 8007cee:	4a03      	ldr	r2, [pc, #12]	; (8007cfc <HAL_RCC_GetHCLKFreq+0x24>)
 8007cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cf4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	bd98      	pop	{r3, r4, r7, pc}
 8007cfc:	0801f784 	.word	0x0801f784

08007d00 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d00:	b598      	push	{r3, r4, r7, lr}
 8007d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007d04:	f7ff ffe8 	bl	8007cd8 <HAL_RCC_GetHCLKFreq>
 8007d08:	4604      	mov	r4, r0
 8007d0a:	f7ff f9d0 	bl	80070ae <LL_RCC_GetAPB1Prescaler>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	0a1b      	lsrs	r3, r3, #8
 8007d12:	4a03      	ldr	r2, [pc, #12]	; (8007d20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d18:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	bd98      	pop	{r3, r4, r7, pc}
 8007d20:	0801f7c4 	.word	0x0801f7c4

08007d24 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d24:	b598      	push	{r3, r4, r7, lr}
 8007d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007d28:	f7ff ffd6 	bl	8007cd8 <HAL_RCC_GetHCLKFreq>
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	f7ff f9c9 	bl	80070c4 <LL_RCC_GetAPB2Prescaler>
 8007d32:	4603      	mov	r3, r0
 8007d34:	0adb      	lsrs	r3, r3, #11
 8007d36:	4a03      	ldr	r2, [pc, #12]	; (8007d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d3c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	bd98      	pop	{r3, r4, r7, pc}
 8007d44:	0801f7c4 	.word	0x0801f7c4

08007d48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007d48:	b590      	push	{r4, r7, lr}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	091b      	lsrs	r3, r3, #4
 8007d54:	f003 030f 	and.w	r3, r3, #15
 8007d58:	4a10      	ldr	r2, [pc, #64]	; (8007d9c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8007d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d5e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8007d60:	f7ff f998 	bl	8007094 <LL_RCC_GetAHB3Prescaler>
 8007d64:	4603      	mov	r3, r0
 8007d66:	091b      	lsrs	r3, r3, #4
 8007d68:	f003 030f 	and.w	r3, r3, #15
 8007d6c:	4a0c      	ldr	r2, [pc, #48]	; (8007da0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8007d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d78:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	4a09      	ldr	r2, [pc, #36]	; (8007da4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8007d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d82:	0c9c      	lsrs	r4, r3, #18
 8007d84:	f7fe ff3e 	bl	8006c04 <HAL_PWREx_GetVoltageRange>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	f000 f80b 	bl	8007da8 <RCC_SetFlashLatency>
 8007d92:	4603      	mov	r3, r0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd90      	pop	{r4, r7, pc}
 8007d9c:	0801f7e4 	.word	0x0801f7e4
 8007da0:	0801f784 	.word	0x0801f784
 8007da4:	431bde83 	.word	0x431bde83

08007da8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08e      	sub	sp, #56	; 0x38
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8007db2:	4a3a      	ldr	r2, [pc, #232]	; (8007e9c <RCC_SetFlashLatency+0xf4>)
 8007db4:	f107 0320 	add.w	r3, r7, #32
 8007db8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007dbc:	6018      	str	r0, [r3, #0]
 8007dbe:	3304      	adds	r3, #4
 8007dc0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8007dc2:	4a37      	ldr	r2, [pc, #220]	; (8007ea0 <RCC_SetFlashLatency+0xf8>)
 8007dc4:	f107 0318 	add.w	r3, r7, #24
 8007dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007dcc:	6018      	str	r0, [r3, #0]
 8007dce:	3304      	adds	r3, #4
 8007dd0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8007dd2:	4a34      	ldr	r2, [pc, #208]	; (8007ea4 <RCC_SetFlashLatency+0xfc>)
 8007dd4:	f107 030c 	add.w	r3, r7, #12
 8007dd8:	ca07      	ldmia	r2, {r0, r1, r2}
 8007dda:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007dde:	2300      	movs	r3, #0
 8007de0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007de8:	d11b      	bne.n	8007e22 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007dea:	2300      	movs	r3, #0
 8007dec:	633b      	str	r3, [r7, #48]	; 0x30
 8007dee:	e014      	b.n	8007e1a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df2:	005b      	lsls	r3, r3, #1
 8007df4:	3338      	adds	r3, #56	; 0x38
 8007df6:	443b      	add	r3, r7
 8007df8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d807      	bhi.n	8007e14 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	3338      	adds	r3, #56	; 0x38
 8007e0a:	443b      	add	r3, r7
 8007e0c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007e10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e12:	e021      	b.n	8007e58 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e16:	3301      	adds	r3, #1
 8007e18:	633b      	str	r3, [r7, #48]	; 0x30
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d9e7      	bls.n	8007df0 <RCC_SetFlashLatency+0x48>
 8007e20:	e01a      	b.n	8007e58 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007e22:	2300      	movs	r3, #0
 8007e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e26:	e014      	b.n	8007e52 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	3338      	adds	r3, #56	; 0x38
 8007e2e:	443b      	add	r3, r7
 8007e30:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007e34:	461a      	mov	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d807      	bhi.n	8007e4c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	3338      	adds	r3, #56	; 0x38
 8007e42:	443b      	add	r3, r7
 8007e44:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007e48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e4a:	e005      	b.n	8007e58 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4e:	3301      	adds	r3, #1
 8007e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d9e7      	bls.n	8007e28 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007e58:	4b13      	ldr	r3, [pc, #76]	; (8007ea8 <RCC_SetFlashLatency+0x100>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f023 0207 	bic.w	r2, r3, #7
 8007e60:	4911      	ldr	r1, [pc, #68]	; (8007ea8 <RCC_SetFlashLatency+0x100>)
 8007e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e64:	4313      	orrs	r3, r2
 8007e66:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e68:	f7fa fd4c 	bl	8002904 <HAL_GetTick>
 8007e6c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007e6e:	e008      	b.n	8007e82 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007e70:	f7fa fd48 	bl	8002904 <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d901      	bls.n	8007e82 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	e007      	b.n	8007e92 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007e82:	4b09      	ldr	r3, [pc, #36]	; (8007ea8 <RCC_SetFlashLatency+0x100>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 0307 	and.w	r3, r3, #7
 8007e8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d1ef      	bne.n	8007e70 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3738      	adds	r7, #56	; 0x38
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	0801f29c 	.word	0x0801f29c
 8007ea0:	0801f2a4 	.word	0x0801f2a4
 8007ea4:	0801f2ac 	.word	0x0801f2ac
 8007ea8:	58004000 	.word	0x58004000

08007eac <LL_RCC_LSE_IsReady>:
{
 8007eac:	b480      	push	{r7}
 8007eae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eb8:	f003 0302 	and.w	r3, r3, #2
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d101      	bne.n	8007ec4 <LL_RCC_LSE_IsReady+0x18>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e000      	b.n	8007ec6 <LL_RCC_LSE_IsReady+0x1a>
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bc80      	pop	{r7}
 8007ecc:	4770      	bx	lr

08007ece <LL_RCC_SetUSARTClockSource>:
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8007ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eda:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	0c1b      	lsrs	r3, r3, #16
 8007ee2:	43db      	mvns	r3, r3
 8007ee4:	401a      	ands	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bc80      	pop	{r7}
 8007efc:	4770      	bx	lr

08007efe <LL_RCC_SetI2SClockSource>:
{
 8007efe:	b480      	push	{r7}
 8007f00:	b083      	sub	sp, #12
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8007f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007f1e:	bf00      	nop
 8007f20:	370c      	adds	r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bc80      	pop	{r7}
 8007f26:	4770      	bx	lr

08007f28 <LL_RCC_SetLPUARTClockSource>:
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bc80      	pop	{r7}
 8007f50:	4770      	bx	lr

08007f52 <LL_RCC_SetI2CClockSource>:
{
 8007f52:	b480      	push	{r7}
 8007f54:	b083      	sub	sp, #12
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	091b      	lsrs	r3, r3, #4
 8007f66:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007f6a:	43db      	mvns	r3, r3
 8007f6c:	401a      	ands	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	011b      	lsls	r3, r3, #4
 8007f72:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007f76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bc80      	pop	{r7}
 8007f88:	4770      	bx	lr

08007f8a <LL_RCC_SetLPTIMClockSource>:
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b083      	sub	sp, #12
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f96:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	0c1b      	lsrs	r3, r3, #16
 8007f9e:	041b      	lsls	r3, r3, #16
 8007fa0:	43db      	mvns	r3, r3
 8007fa2:	401a      	ands	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	041b      	lsls	r3, r3, #16
 8007fa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fac:	4313      	orrs	r3, r2
 8007fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007fb2:	bf00      	nop
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bc80      	pop	{r7}
 8007fba:	4770      	bx	lr

08007fbc <LL_RCC_SetRNGClockSource>:
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fcc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007fd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bc80      	pop	{r7}
 8007fe4:	4770      	bx	lr

08007fe6 <LL_RCC_SetADCClockSource>:
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b083      	sub	sp, #12
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007ffa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4313      	orrs	r3, r2
 8008002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008006:	bf00      	nop
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	bc80      	pop	{r7}
 800800e:	4770      	bx	lr

08008010 <LL_RCC_SetRTCClockSource>:
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800801c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008020:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008024:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4313      	orrs	r3, r2
 800802c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	bc80      	pop	{r7}
 8008038:	4770      	bx	lr

0800803a <LL_RCC_GetRTCClockSource>:
{
 800803a:	b480      	push	{r7}
 800803c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800803e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008046:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800804a:	4618      	mov	r0, r3
 800804c:	46bd      	mov	sp, r7
 800804e:	bc80      	pop	{r7}
 8008050:	4770      	bx	lr

08008052 <LL_RCC_ForceBackupDomainReset>:
{
 8008052:	b480      	push	{r7}
 8008054:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800805a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800805e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800806a:	bf00      	nop
 800806c:	46bd      	mov	sp, r7
 800806e:	bc80      	pop	{r7}
 8008070:	4770      	bx	lr

08008072 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008072:	b480      	push	{r7}
 8008074:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800807a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800807e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800808a:	bf00      	nop
 800808c:	46bd      	mov	sp, r7
 800808e:	bc80      	pop	{r7}
 8008090:	4770      	bx	lr
	...

08008094 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800809c:	2300      	movs	r3, #0
 800809e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80080a0:	2300      	movs	r3, #0
 80080a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80080a4:	2300      	movs	r3, #0
 80080a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d058      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80080b4:	f7fe fd64 	bl	8006b80 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80080b8:	f7fa fc24 	bl	8002904 <HAL_GetTick>
 80080bc:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80080be:	e009      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080c0:	f7fa fc20 	bl	8002904 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d902      	bls.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	74fb      	strb	r3, [r7, #19]
        break;
 80080d2:	e006      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80080d4:	4b7b      	ldr	r3, [pc, #492]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080e0:	d1ee      	bne.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80080e2:	7cfb      	ldrb	r3, [r7, #19]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d13c      	bne.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80080e8:	f7ff ffa7 	bl	800803a <LL_RCC_GetRTCClockSource>
 80080ec:	4602      	mov	r2, r0
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d00f      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80080f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008102:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008104:	f7ff ffa5 	bl	8008052 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008108:	f7ff ffb3 	bl	8008072 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800810c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f003 0302 	and.w	r3, r3, #2
 800811c:	2b00      	cmp	r3, #0
 800811e:	d014      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008120:	f7fa fbf0 	bl	8002904 <HAL_GetTick>
 8008124:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8008126:	e00b      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008128:	f7fa fbec 	bl	8002904 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	f241 3288 	movw	r2, #5000	; 0x1388
 8008136:	4293      	cmp	r3, r2
 8008138:	d902      	bls.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	74fb      	strb	r3, [r7, #19]
            break;
 800813e:	e004      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8008140:	f7ff feb4 	bl	8007eac <LL_RCC_LSE_IsReady>
 8008144:	4603      	mov	r3, r0
 8008146:	2b01      	cmp	r3, #1
 8008148:	d1ee      	bne.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800814a:	7cfb      	ldrb	r3, [r7, #19]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d105      	bne.n	800815c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008154:	4618      	mov	r0, r3
 8008156:	f7ff ff5b 	bl	8008010 <LL_RCC_SetRTCClockSource>
 800815a:	e004      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800815c:	7cfb      	ldrb	r3, [r7, #19]
 800815e:	74bb      	strb	r3, [r7, #18]
 8008160:	e001      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008162:	7cfb      	ldrb	r3, [r7, #19]
 8008164:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	2b00      	cmp	r3, #0
 8008170:	d004      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	4618      	mov	r0, r3
 8008178:	f7ff fea9 	bl	8007ece <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0302 	and.w	r3, r3, #2
 8008184:	2b00      	cmp	r3, #0
 8008186:	d004      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	4618      	mov	r0, r3
 800818e:	f7ff fe9e 	bl	8007ece <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 0320 	and.w	r3, r3, #32
 800819a:	2b00      	cmp	r3, #0
 800819c:	d004      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7ff fec0 	bl	8007f28 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d004      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a1b      	ldr	r3, [r3, #32]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7ff fee6 	bl	8007f8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d004      	beq.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7ff fedb 	bl	8007f8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d004      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7ff fed0 	bl	8007f8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d004      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7ff fea9 	bl	8007f52 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008208:	2b00      	cmp	r3, #0
 800820a:	d004      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	4618      	mov	r0, r3
 8008212:	f7ff fe9e 	bl	8007f52 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800821e:	2b00      	cmp	r3, #0
 8008220:	d004      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	69db      	ldr	r3, [r3, #28]
 8008226:	4618      	mov	r0, r3
 8008228:	f7ff fe93 	bl	8007f52 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0310 	and.w	r3, r3, #16
 8008234:	2b00      	cmp	r3, #0
 8008236:	d011      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	4618      	mov	r0, r3
 800823e:	f7ff fe5e 	bl	8007efe <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800824a:	d107      	bne.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800824c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800825a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008264:	2b00      	cmp	r3, #0
 8008266:	d010      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826c:	4618      	mov	r0, r3
 800826e:	f7ff fea5 	bl	8007fbc <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008276:	2b00      	cmp	r3, #0
 8008278:	d107      	bne.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800827a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008284:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008288:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d011      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829a:	4618      	mov	r0, r3
 800829c:	f7ff fea3 	bl	8007fe6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082a8:	d107      	bne.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80082aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082b8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80082ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3718      	adds	r7, #24
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	58000400 	.word	0x58000400

080082c8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d068      	beq.n	80083ac <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d106      	bne.n	80082f4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7fa f810 	bl	8002314 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2202      	movs	r2, #2
 80082f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082fc:	4b2e      	ldr	r3, [pc, #184]	; (80083b8 <HAL_RTC_Init+0xf0>)
 80082fe:	22ca      	movs	r2, #202	; 0xca
 8008300:	625a      	str	r2, [r3, #36]	; 0x24
 8008302:	4b2d      	ldr	r3, [pc, #180]	; (80083b8 <HAL_RTC_Init+0xf0>)
 8008304:	2253      	movs	r2, #83	; 0x53
 8008306:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fa0f 	bl	800872c <RTC_EnterInitMode>
 800830e:	4603      	mov	r3, r0
 8008310:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d13f      	bne.n	8008398 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008318:	4b27      	ldr	r3, [pc, #156]	; (80083b8 <HAL_RTC_Init+0xf0>)
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	4a26      	ldr	r2, [pc, #152]	; (80083b8 <HAL_RTC_Init+0xf0>)
 800831e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8008322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008326:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008328:	4b23      	ldr	r3, [pc, #140]	; (80083b8 <HAL_RTC_Init+0xf0>)
 800832a:	699a      	ldr	r2, [r3, #24]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6859      	ldr	r1, [r3, #4]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	4319      	orrs	r1, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	430b      	orrs	r3, r1
 800833c:	491e      	ldr	r1, [pc, #120]	; (80083b8 <HAL_RTC_Init+0xf0>)
 800833e:	4313      	orrs	r3, r2
 8008340:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68da      	ldr	r2, [r3, #12]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	041b      	lsls	r3, r3, #16
 800834c:	491a      	ldr	r1, [pc, #104]	; (80083b8 <HAL_RTC_Init+0xf0>)
 800834e:	4313      	orrs	r3, r2
 8008350:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008352:	4b19      	ldr	r3, [pc, #100]	; (80083b8 <HAL_RTC_Init+0xf0>)
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008362:	430b      	orrs	r3, r1
 8008364:	4914      	ldr	r1, [pc, #80]	; (80083b8 <HAL_RTC_Init+0xf0>)
 8008366:	4313      	orrs	r3, r2
 8008368:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fa12 	bl	8008794 <RTC_ExitInitMode>
 8008370:	4603      	mov	r3, r0
 8008372:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8008374:	7bfb      	ldrb	r3, [r7, #15]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10e      	bne.n	8008398 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 800837a:	4b0f      	ldr	r3, [pc, #60]	; (80083b8 <HAL_RTC_Init+0xf0>)
 800837c:	699b      	ldr	r3, [r3, #24]
 800837e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a19      	ldr	r1, [r3, #32]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	69db      	ldr	r3, [r3, #28]
 800838a:	4319      	orrs	r1, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	430b      	orrs	r3, r1
 8008392:	4909      	ldr	r1, [pc, #36]	; (80083b8 <HAL_RTC_Init+0xf0>)
 8008394:	4313      	orrs	r3, r2
 8008396:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008398:	4b07      	ldr	r3, [pc, #28]	; (80083b8 <HAL_RTC_Init+0xf0>)
 800839a:	22ff      	movs	r2, #255	; 0xff
 800839c:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800839e:	7bfb      	ldrb	r3, [r7, #15]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d103      	bne.n	80083ac <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	40002800 	.word	0x40002800

080083bc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80083bc:	b590      	push	{r4, r7, lr}
 80083be:	b087      	sub	sp, #28
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80083c8:	2300      	movs	r3, #0
 80083ca:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d101      	bne.n	80083da <HAL_RTC_SetAlarm_IT+0x1e>
 80083d6:	2302      	movs	r3, #2
 80083d8:	e0f3      	b.n	80085c2 <HAL_RTC_SetAlarm_IT+0x206>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2202      	movs	r2, #2
 80083e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80083ea:	4b78      	ldr	r3, [pc, #480]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083f2:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083fa:	d06a      	beq.n	80084d2 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d13a      	bne.n	8008478 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008402:	4b72      	ldr	r3, [pc, #456]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800840a:	2b00      	cmp	r3, #0
 800840c:	d102      	bne.n	8008414 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2200      	movs	r2, #0
 8008412:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	4618      	mov	r0, r3
 8008422:	f000 f9f5 	bl	8008810 <RTC_ByteToBcd2>
 8008426:	4603      	mov	r3, r0
 8008428:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	785b      	ldrb	r3, [r3, #1]
 800842e:	4618      	mov	r0, r3
 8008430:	f000 f9ee 	bl	8008810 <RTC_ByteToBcd2>
 8008434:	4603      	mov	r3, r0
 8008436:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008438:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	789b      	ldrb	r3, [r3, #2]
 800843e:	4618      	mov	r0, r3
 8008440:	f000 f9e6 	bl	8008810 <RTC_ByteToBcd2>
 8008444:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008446:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	78db      	ldrb	r3, [r3, #3]
 800844e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008450:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800845a:	4618      	mov	r0, r3
 800845c:	f000 f9d8 	bl	8008810 <RTC_ByteToBcd2>
 8008460:	4603      	mov	r3, r0
 8008462:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008464:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800846c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008472:	4313      	orrs	r3, r2
 8008474:	617b      	str	r3, [r7, #20]
 8008476:	e02c      	b.n	80084d2 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8008480:	d00d      	beq.n	800849e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800848a:	d008      	beq.n	800849e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800848c:	4b4f      	ldr	r3, [pc, #316]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 800848e:	699b      	ldr	r3, [r3, #24]
 8008490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008494:	2b00      	cmp	r3, #0
 8008496:	d102      	bne.n	800849e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	2200      	movs	r2, #0
 800849c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	785b      	ldrb	r3, [r3, #1]
 80084a8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80084aa:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80084b0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	78db      	ldrb	r3, [r3, #3]
 80084b6:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80084b8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80084c0:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80084c2:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80084c8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80084ce:	4313      	orrs	r3, r2
 80084d0:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80084d2:	4b3e      	ldr	r3, [pc, #248]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 80084d4:	22ca      	movs	r2, #202	; 0xca
 80084d6:	625a      	str	r2, [r3, #36]	; 0x24
 80084d8:	4b3c      	ldr	r3, [pc, #240]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 80084da:	2253      	movs	r2, #83	; 0x53
 80084dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084e6:	d12c      	bne.n	8008542 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80084e8:	4b38      	ldr	r3, [pc, #224]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	4a37      	ldr	r2, [pc, #220]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 80084ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80084f2:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80084f4:	4b35      	ldr	r3, [pc, #212]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 80084f6:	2201      	movs	r2, #1
 80084f8:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008500:	d107      	bne.n	8008512 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	699a      	ldr	r2, [r3, #24]
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	69db      	ldr	r3, [r3, #28]
 800850a:	4930      	ldr	r1, [pc, #192]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 800850c:	4313      	orrs	r3, r2
 800850e:	644b      	str	r3, [r1, #68]	; 0x44
 8008510:	e006      	b.n	8008520 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8008512:	4a2e      	ldr	r2, [pc, #184]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8008518:	4a2c      	ldr	r2, [pc, #176]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	699b      	ldr	r3, [r3, #24]
 800851e:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8008520:	4a2a      	ldr	r2, [pc, #168]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852c:	f043 0201 	orr.w	r2, r3, #1
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008534:	4b25      	ldr	r3, [pc, #148]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	4a24      	ldr	r2, [pc, #144]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 800853a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800853e:	6193      	str	r3, [r2, #24]
 8008540:	e02b      	b.n	800859a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008542:	4b22      	ldr	r3, [pc, #136]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	4a21      	ldr	r2, [pc, #132]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 8008548:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800854c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800854e:	4b1f      	ldr	r3, [pc, #124]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 8008550:	2202      	movs	r2, #2
 8008552:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800855a:	d107      	bne.n	800856c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	699a      	ldr	r2, [r3, #24]
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	69db      	ldr	r3, [r3, #28]
 8008564:	4919      	ldr	r1, [pc, #100]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 8008566:	4313      	orrs	r3, r2
 8008568:	64cb      	str	r3, [r1, #76]	; 0x4c
 800856a:	e006      	b.n	800857a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800856c:	4a17      	ldr	r2, [pc, #92]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8008572:	4a16      	ldr	r2, [pc, #88]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800857a:	4a14      	ldr	r2, [pc, #80]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008586:	f043 0202 	orr.w	r2, r3, #2
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800858e:	4b0f      	ldr	r3, [pc, #60]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	4a0e      	ldr	r2, [pc, #56]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 8008594:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8008598:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800859a:	4b0d      	ldr	r3, [pc, #52]	; (80085d0 <HAL_RTC_SetAlarm_IT+0x214>)
 800859c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085a0:	4a0b      	ldr	r2, [pc, #44]	; (80085d0 <HAL_RTC_SetAlarm_IT+0x214>)
 80085a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085a6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085aa:	4b08      	ldr	r3, [pc, #32]	; (80085cc <HAL_RTC_SetAlarm_IT+0x210>)
 80085ac:	22ff      	movs	r2, #255	; 0xff
 80085ae:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	371c      	adds	r7, #28
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd90      	pop	{r4, r7, pc}
 80085ca:	bf00      	nop
 80085cc:	40002800 	.word	0x40002800
 80085d0:	58000800 	.word	0x58000800

080085d4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d101      	bne.n	80085ec <HAL_RTC_DeactivateAlarm+0x18>
 80085e8:	2302      	movs	r3, #2
 80085ea:	e048      	b.n	800867e <HAL_RTC_DeactivateAlarm+0xaa>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2202      	movs	r2, #2
 80085f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085fc:	4b22      	ldr	r3, [pc, #136]	; (8008688 <HAL_RTC_DeactivateAlarm+0xb4>)
 80085fe:	22ca      	movs	r2, #202	; 0xca
 8008600:	625a      	str	r2, [r3, #36]	; 0x24
 8008602:	4b21      	ldr	r3, [pc, #132]	; (8008688 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008604:	2253      	movs	r2, #83	; 0x53
 8008606:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800860e:	d115      	bne.n	800863c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008610:	4b1d      	ldr	r3, [pc, #116]	; (8008688 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	4a1c      	ldr	r2, [pc, #112]	; (8008688 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008616:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800861a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800861c:	4b1a      	ldr	r3, [pc, #104]	; (8008688 <HAL_RTC_DeactivateAlarm+0xb4>)
 800861e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008620:	4a19      	ldr	r2, [pc, #100]	; (8008688 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008622:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008626:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862c:	f023 0201 	bic.w	r2, r3, #1
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008634:	4b14      	ldr	r3, [pc, #80]	; (8008688 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008636:	2201      	movs	r2, #1
 8008638:	65da      	str	r2, [r3, #92]	; 0x5c
 800863a:	e014      	b.n	8008666 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800863c:	4b12      	ldr	r3, [pc, #72]	; (8008688 <HAL_RTC_DeactivateAlarm+0xb4>)
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	4a11      	ldr	r2, [pc, #68]	; (8008688 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008642:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8008646:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8008648:	4b0f      	ldr	r3, [pc, #60]	; (8008688 <HAL_RTC_DeactivateAlarm+0xb4>)
 800864a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800864c:	4a0e      	ldr	r2, [pc, #56]	; (8008688 <HAL_RTC_DeactivateAlarm+0xb4>)
 800864e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008652:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008658:	f023 0202 	bic.w	r2, r3, #2
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008660:	4b09      	ldr	r3, [pc, #36]	; (8008688 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008662:	2202      	movs	r2, #2
 8008664:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008666:	4b08      	ldr	r3, [pc, #32]	; (8008688 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008668:	22ff      	movs	r2, #255	; 0xff
 800866a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	370c      	adds	r7, #12
 8008682:	46bd      	mov	sp, r7
 8008684:	bc80      	pop	{r7}
 8008686:	4770      	bx	lr
 8008688:	40002800 	.word	0x40002800

0800868c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8008694:	4b11      	ldr	r3, [pc, #68]	; (80086dc <HAL_RTC_AlarmIRQHandler+0x50>)
 8008696:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869c:	4013      	ands	r3, r2
 800869e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f003 0301 	and.w	r3, r3, #1
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d005      	beq.n	80086b6 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80086aa:	4b0c      	ldr	r3, [pc, #48]	; (80086dc <HAL_RTC_AlarmIRQHandler+0x50>)
 80086ac:	2201      	movs	r2, #1
 80086ae:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7fa fc1a 	bl	8002eea <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f003 0302 	and.w	r3, r3, #2
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d005      	beq.n	80086cc <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80086c0:	4b06      	ldr	r3, [pc, #24]	; (80086dc <HAL_RTC_AlarmIRQHandler+0x50>)
 80086c2:	2202      	movs	r2, #2
 80086c4:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f94a 	bl	8008960 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80086d4:	bf00      	nop
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	40002800 	.word	0x40002800

080086e0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80086e8:	4b0f      	ldr	r3, [pc, #60]	; (8008728 <HAL_RTC_WaitForSynchro+0x48>)
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	4a0e      	ldr	r2, [pc, #56]	; (8008728 <HAL_RTC_WaitForSynchro+0x48>)
 80086ee:	f023 0320 	bic.w	r3, r3, #32
 80086f2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80086f4:	f7fa f906 	bl	8002904 <HAL_GetTick>
 80086f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80086fa:	e009      	b.n	8008710 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80086fc:	f7fa f902 	bl	8002904 <HAL_GetTick>
 8008700:	4602      	mov	r2, r0
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800870a:	d901      	bls.n	8008710 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800870c:	2303      	movs	r3, #3
 800870e:	e006      	b.n	800871e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008710:	4b05      	ldr	r3, [pc, #20]	; (8008728 <HAL_RTC_WaitForSynchro+0x48>)
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	f003 0320 	and.w	r3, r3, #32
 8008718:	2b00      	cmp	r3, #0
 800871a:	d0ef      	beq.n	80086fc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	40002800 	.word	0x40002800

0800872c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008738:	4b15      	ldr	r3, [pc, #84]	; (8008790 <RTC_EnterInitMode+0x64>)
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008740:	2b00      	cmp	r3, #0
 8008742:	d120      	bne.n	8008786 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008744:	4b12      	ldr	r3, [pc, #72]	; (8008790 <RTC_EnterInitMode+0x64>)
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	4a11      	ldr	r2, [pc, #68]	; (8008790 <RTC_EnterInitMode+0x64>)
 800874a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800874e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8008750:	f7fa f8d8 	bl	8002904 <HAL_GetTick>
 8008754:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008756:	e00d      	b.n	8008774 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008758:	f7fa f8d4 	bl	8002904 <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008766:	d905      	bls.n	8008774 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2203      	movs	r2, #3
 8008770:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008774:	4b06      	ldr	r3, [pc, #24]	; (8008790 <RTC_EnterInitMode+0x64>)
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800877c:	2b00      	cmp	r3, #0
 800877e:	d102      	bne.n	8008786 <RTC_EnterInitMode+0x5a>
 8008780:	7bfb      	ldrb	r3, [r7, #15]
 8008782:	2b03      	cmp	r3, #3
 8008784:	d1e8      	bne.n	8008758 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8008786:	7bfb      	ldrb	r3, [r7, #15]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	40002800 	.word	0x40002800

08008794 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800879c:	2300      	movs	r3, #0
 800879e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80087a0:	4b1a      	ldr	r3, [pc, #104]	; (800880c <RTC_ExitInitMode+0x78>)
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	4a19      	ldr	r2, [pc, #100]	; (800880c <RTC_ExitInitMode+0x78>)
 80087a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087aa:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80087ac:	4b17      	ldr	r3, [pc, #92]	; (800880c <RTC_ExitInitMode+0x78>)
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	f003 0320 	and.w	r3, r3, #32
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10c      	bne.n	80087d2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f7ff ff91 	bl	80086e0 <HAL_RTC_WaitForSynchro>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d01e      	beq.n	8008802 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2203      	movs	r2, #3
 80087c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80087cc:	2303      	movs	r3, #3
 80087ce:	73fb      	strb	r3, [r7, #15]
 80087d0:	e017      	b.n	8008802 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80087d2:	4b0e      	ldr	r3, [pc, #56]	; (800880c <RTC_ExitInitMode+0x78>)
 80087d4:	699b      	ldr	r3, [r3, #24]
 80087d6:	4a0d      	ldr	r2, [pc, #52]	; (800880c <RTC_ExitInitMode+0x78>)
 80087d8:	f023 0320 	bic.w	r3, r3, #32
 80087dc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f7ff ff7e 	bl	80086e0 <HAL_RTC_WaitForSynchro>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d005      	beq.n	80087f6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2203      	movs	r2, #3
 80087ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80087f2:	2303      	movs	r3, #3
 80087f4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80087f6:	4b05      	ldr	r3, [pc, #20]	; (800880c <RTC_ExitInitMode+0x78>)
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	4a04      	ldr	r2, [pc, #16]	; (800880c <RTC_ExitInitMode+0x78>)
 80087fc:	f043 0320 	orr.w	r3, r3, #32
 8008800:	6193      	str	r3, [r2, #24]
  }

  return status;
 8008802:	7bfb      	ldrb	r3, [r7, #15]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	40002800 	.word	0x40002800

08008810 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	4603      	mov	r3, r0
 8008818:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800881a:	2300      	movs	r3, #0
 800881c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800881e:	79fb      	ldrb	r3, [r7, #7]
 8008820:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8008822:	e005      	b.n	8008830 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	3301      	adds	r3, #1
 8008828:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800882a:	7afb      	ldrb	r3, [r7, #11]
 800882c:	3b0a      	subs	r3, #10
 800882e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008830:	7afb      	ldrb	r3, [r7, #11]
 8008832:	2b09      	cmp	r3, #9
 8008834:	d8f6      	bhi.n	8008824 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	b2db      	uxtb	r3, r3
 800883a:	011b      	lsls	r3, r3, #4
 800883c:	b2da      	uxtb	r2, r3
 800883e:	7afb      	ldrb	r3, [r7, #11]
 8008840:	4313      	orrs	r3, r2
 8008842:	b2db      	uxtb	r3, r3
}
 8008844:	4618      	mov	r0, r3
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	bc80      	pop	{r7}
 800884c:	4770      	bx	lr
	...

08008850 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800885e:	2b01      	cmp	r3, #1
 8008860:	d101      	bne.n	8008866 <HAL_RTCEx_EnableBypassShadow+0x16>
 8008862:	2302      	movs	r3, #2
 8008864:	e01f      	b.n	80088a6 <HAL_RTCEx_EnableBypassShadow+0x56>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2202      	movs	r2, #2
 8008872:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008876:	4b0e      	ldr	r3, [pc, #56]	; (80088b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008878:	22ca      	movs	r2, #202	; 0xca
 800887a:	625a      	str	r2, [r3, #36]	; 0x24
 800887c:	4b0c      	ldr	r3, [pc, #48]	; (80088b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800887e:	2253      	movs	r2, #83	; 0x53
 8008880:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008882:	4b0b      	ldr	r3, [pc, #44]	; (80088b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	4a0a      	ldr	r2, [pc, #40]	; (80088b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008888:	f043 0320 	orr.w	r3, r3, #32
 800888c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800888e:	4b08      	ldr	r3, [pc, #32]	; (80088b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008890:	22ff      	movs	r2, #255	; 0xff
 8008892:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bc80      	pop	{r7}
 80088ae:	4770      	bx	lr
 80088b0:	40002800 	.word	0x40002800

080088b4 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d101      	bne.n	80088ca <HAL_RTCEx_SetSSRU_IT+0x16>
 80088c6:	2302      	movs	r3, #2
 80088c8:	e027      	b.n	800891a <HAL_RTCEx_SetSSRU_IT+0x66>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2202      	movs	r2, #2
 80088d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088da:	4b12      	ldr	r3, [pc, #72]	; (8008924 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80088dc:	22ca      	movs	r2, #202	; 0xca
 80088de:	625a      	str	r2, [r3, #36]	; 0x24
 80088e0:	4b10      	ldr	r3, [pc, #64]	; (8008924 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80088e2:	2253      	movs	r2, #83	; 0x53
 80088e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80088e6:	4b0f      	ldr	r3, [pc, #60]	; (8008924 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80088e8:	699b      	ldr	r3, [r3, #24]
 80088ea:	4a0e      	ldr	r2, [pc, #56]	; (8008924 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80088ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088f0:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80088f2:	4b0d      	ldr	r3, [pc, #52]	; (8008928 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80088f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088f8:	4a0b      	ldr	r2, [pc, #44]	; (8008928 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80088fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008902:	4b08      	ldr	r3, [pc, #32]	; (8008924 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008904:	22ff      	movs	r2, #255	; 0xff
 8008906:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	370c      	adds	r7, #12
 800891e:	46bd      	mov	sp, r7
 8008920:	bc80      	pop	{r7}
 8008922:	4770      	bx	lr
 8008924:	40002800 	.word	0x40002800
 8008928:	58000800 	.word	0x58000800

0800892c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8008934:	4b09      	ldr	r3, [pc, #36]	; (800895c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800893c:	2b00      	cmp	r3, #0
 800893e:	d005      	beq.n	800894c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8008940:	4b06      	ldr	r3, [pc, #24]	; (800895c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008942:	2240      	movs	r2, #64	; 0x40
 8008944:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f7fa fad9 	bl	8002efe <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008954:	bf00      	nop
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}
 800895c:	40002800 	.word	0x40002800

08008960 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	bc80      	pop	{r7}
 8008970:	4770      	bx	lr
	...

08008974 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008974:	b480      	push	{r7}
 8008976:	b087      	sub	sp, #28
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8008980:	4b07      	ldr	r3, [pc, #28]	; (80089a0 <HAL_RTCEx_BKUPWrite+0x2c>)
 8008982:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	4413      	add	r3, r2
 800898c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	601a      	str	r2, [r3, #0]
}
 8008994:	bf00      	nop
 8008996:	371c      	adds	r7, #28
 8008998:	46bd      	mov	sp, r7
 800899a:	bc80      	pop	{r7}
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	4000b100 	.word	0x4000b100

080089a4 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80089ae:	4b07      	ldr	r3, [pc, #28]	; (80089cc <HAL_RTCEx_BKUPRead+0x28>)
 80089b0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	4413      	add	r3, r2
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bc80      	pop	{r7}
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	4000b100 	.word	0x4000b100

080089d0 <LL_PWR_SetRadioBusyTrigger>:
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80089d8:	4b06      	ldr	r3, [pc, #24]	; (80089f4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80089e0:	4904      	ldr	r1, [pc, #16]	; (80089f4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	608b      	str	r3, [r1, #8]
}
 80089e8:	bf00      	nop
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bc80      	pop	{r7}
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	58000400 	.word	0x58000400

080089f8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80089f8:	b480      	push	{r7}
 80089fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80089fc:	4b05      	ldr	r3, [pc, #20]	; (8008a14 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80089fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a02:	4a04      	ldr	r2, [pc, #16]	; (8008a14 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8008a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008a0c:	bf00      	nop
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bc80      	pop	{r7}
 8008a12:	4770      	bx	lr
 8008a14:	58000400 	.word	0x58000400

08008a18 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8008a18:	b480      	push	{r7}
 8008a1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008a1c:	4b05      	ldr	r3, [pc, #20]	; (8008a34 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a22:	4a04      	ldr	r2, [pc, #16]	; (8008a34 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008a24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008a2c:	bf00      	nop
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bc80      	pop	{r7}
 8008a32:	4770      	bx	lr
 8008a34:	58000400 	.word	0x58000400

08008a38 <LL_PWR_ClearFlag_RFBUSY>:
{
 8008a38:	b480      	push	{r7}
 8008a3a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8008a3c:	4b03      	ldr	r3, [pc, #12]	; (8008a4c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8008a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a42:	619a      	str	r2, [r3, #24]
}
 8008a44:	bf00      	nop
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bc80      	pop	{r7}
 8008a4a:	4770      	bx	lr
 8008a4c:	58000400 	.word	0x58000400

08008a50 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8008a50:	b480      	push	{r7}
 8008a52:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8008a54:	4b06      	ldr	r3, [pc, #24]	; (8008a70 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8008a56:	695b      	ldr	r3, [r3, #20]
 8008a58:	f003 0302 	and.w	r3, r3, #2
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d101      	bne.n	8008a64 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8008a60:	2301      	movs	r3, #1
 8008a62:	e000      	b.n	8008a66 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bc80      	pop	{r7}
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	58000400 	.word	0x58000400

08008a74 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8008a74:	b480      	push	{r7}
 8008a76:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8008a78:	4b06      	ldr	r3, [pc, #24]	; (8008a94 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8008a7a:	695b      	ldr	r3, [r3, #20]
 8008a7c:	f003 0304 	and.w	r3, r3, #4
 8008a80:	2b04      	cmp	r3, #4
 8008a82:	d101      	bne.n	8008a88 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8008a84:	2301      	movs	r3, #1
 8008a86:	e000      	b.n	8008a8a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bc80      	pop	{r7}
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	58000400 	.word	0x58000400

08008a98 <LL_RCC_RF_DisableReset>:
{
 8008a98:	b480      	push	{r7}
 8008a9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8008a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008aa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008aa8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008aac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008ab0:	bf00      	nop
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bc80      	pop	{r7}
 8008ab6:	4770      	bx	lr

08008ab8 <LL_RCC_IsRFUnderReset>:
{
 8008ab8:	b480      	push	{r7}
 8008aba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8008abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ac8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008acc:	d101      	bne.n	8008ad2 <LL_RCC_IsRFUnderReset+0x1a>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e000      	b.n	8008ad4 <LL_RCC_IsRFUnderReset+0x1c>
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bc80      	pop	{r7}
 8008ada:	4770      	bx	lr

08008adc <LL_EXTI_EnableIT_32_63>:
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008ae4:	4b06      	ldr	r3, [pc, #24]	; (8008b00 <LL_EXTI_EnableIT_32_63+0x24>)
 8008ae6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008aea:	4905      	ldr	r1, [pc, #20]	; (8008b00 <LL_EXTI_EnableIT_32_63+0x24>)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bc80      	pop	{r7}
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	58000800 	.word	0x58000800

08008b04 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d103      	bne.n	8008b1a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	73fb      	strb	r3, [r7, #15]
    return status;
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
 8008b18:	e04b      	b.n	8008bb2 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	799b      	ldrb	r3, [r3, #6]
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d105      	bne.n	8008b34 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f7f9 fd40 	bl	80025b4 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2202      	movs	r2, #2
 8008b38:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8008b3a:	f7ff ffad 	bl	8008a98 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008b3e:	4b1f      	ldr	r3, [pc, #124]	; (8008bbc <HAL_SUBGHZ_Init+0xb8>)
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	4613      	mov	r3, r2
 8008b44:	00db      	lsls	r3, r3, #3
 8008b46:	1a9b      	subs	r3, r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	0cdb      	lsrs	r3, r3, #19
 8008b4c:	2264      	movs	r2, #100	; 0x64
 8008b4e:	fb02 f303 	mul.w	r3, r2, r3
 8008b52:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d105      	bne.n	8008b66 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	609a      	str	r2, [r3, #8]
      break;
 8008b64:	e007      	b.n	8008b76 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8008b6c:	f7ff ffa4 	bl	8008ab8 <LL_RCC_IsRFUnderReset>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1ee      	bne.n	8008b54 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8008b76:	f7ff ff3f 	bl	80089f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8008b7a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008b7e:	f7ff ffad 	bl	8008adc <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8008b82:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008b86:	f7ff ff23 	bl	80089d0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8008b8a:	f7ff ff55 	bl	8008a38 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8008b8e:	7bfb      	ldrb	r3, [r7, #15]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10a      	bne.n	8008baa <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f000 faad 	bl	80090f8 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2201      	movs	r2, #1
 8008bae:	719a      	strb	r2, [r3, #6]

  return status;
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	20000004 	.word	0x20000004

08008bc0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	607a      	str	r2, [r7, #4]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	460b      	mov	r3, r1
 8008bce:	817b      	strh	r3, [r7, #10]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	799b      	ldrb	r3, [r3, #6]
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d14a      	bne.n	8008c74 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	795b      	ldrb	r3, [r3, #5]
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d101      	bne.n	8008bea <HAL_SUBGHZ_WriteRegisters+0x2a>
 8008be6:	2302      	movs	r3, #2
 8008be8:	e045      	b.n	8008c76 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2201      	movs	r2, #1
 8008bee:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2202      	movs	r2, #2
 8008bf4:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f000 fb4c 	bl	8009294 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008bfc:	f7ff ff0c 	bl	8008a18 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8008c00:	210d      	movs	r1, #13
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f000 fa98 	bl	8009138 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8008c08:	897b      	ldrh	r3, [r7, #10]
 8008c0a:	0a1b      	lsrs	r3, r3, #8
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	4619      	mov	r1, r3
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f000 fa90 	bl	8009138 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008c18:	897b      	ldrh	r3, [r7, #10]
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f000 fa8a 	bl	8009138 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008c24:	2300      	movs	r3, #0
 8008c26:	82bb      	strh	r3, [r7, #20]
 8008c28:	e00a      	b.n	8008c40 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008c2a:	8abb      	ldrh	r3, [r7, #20]
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	4413      	add	r3, r2
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	4619      	mov	r1, r3
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f000 fa7f 	bl	8009138 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008c3a:	8abb      	ldrh	r3, [r7, #20]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	82bb      	strh	r3, [r7, #20]
 8008c40:	8aba      	ldrh	r2, [r7, #20]
 8008c42:	893b      	ldrh	r3, [r7, #8]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d3f0      	bcc.n	8008c2a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008c48:	f7ff fed6 	bl	80089f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f000 fb45 	bl	80092dc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d002      	beq.n	8008c60 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	75fb      	strb	r3, [r7, #23]
 8008c5e:	e001      	b.n	8008c64 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2201      	movs	r2, #1
 8008c68:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	715a      	strb	r2, [r3, #5]

    return status;
 8008c70:	7dfb      	ldrb	r3, [r7, #23]
 8008c72:	e000      	b.n	8008c76 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008c74:	2302      	movs	r3, #2
  }
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3718      	adds	r7, #24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b088      	sub	sp, #32
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	60f8      	str	r0, [r7, #12]
 8008c86:	607a      	str	r2, [r7, #4]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	817b      	strh	r3, [r7, #10]
 8008c8e:	4613      	mov	r3, r2
 8008c90:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	799b      	ldrb	r3, [r3, #6]
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d14a      	bne.n	8008d36 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	795b      	ldrb	r3, [r3, #5]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d101      	bne.n	8008cac <HAL_SUBGHZ_ReadRegisters+0x2e>
 8008ca8:	2302      	movs	r3, #2
 8008caa:	e045      	b.n	8008d38 <HAL_SUBGHZ_ReadRegisters+0xba>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f000 faee 	bl	8009294 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008cb8:	f7ff feae 	bl	8008a18 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8008cbc:	211d      	movs	r1, #29
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f000 fa3a 	bl	8009138 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8008cc4:	897b      	ldrh	r3, [r7, #10]
 8008cc6:	0a1b      	lsrs	r3, r3, #8
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	4619      	mov	r1, r3
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f000 fa32 	bl	8009138 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008cd4:	897b      	ldrh	r3, [r7, #10]
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	4619      	mov	r1, r3
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f000 fa2c 	bl	8009138 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f000 fa28 	bl	8009138 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008ce8:	2300      	movs	r3, #0
 8008cea:	82fb      	strh	r3, [r7, #22]
 8008cec:	e009      	b.n	8008d02 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008cee:	69b9      	ldr	r1, [r7, #24]
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f000 fa77 	bl	80091e4 <SUBGHZSPI_Receive>
      pData++;
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008cfc:	8afb      	ldrh	r3, [r7, #22]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	82fb      	strh	r3, [r7, #22]
 8008d02:	8afa      	ldrh	r2, [r7, #22]
 8008d04:	893b      	ldrh	r3, [r7, #8]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d3f1      	bcc.n	8008cee <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008d0a:	f7ff fe75 	bl	80089f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 fae4 	bl	80092dc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	77fb      	strb	r3, [r7, #31]
 8008d20:	e001      	b.n	8008d26 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8008d22:	2300      	movs	r3, #0
 8008d24:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	715a      	strb	r2, [r3, #5]

    return status;
 8008d32:	7ffb      	ldrb	r3, [r7, #31]
 8008d34:	e000      	b.n	8008d38 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8008d36:	2302      	movs	r3, #2
  }
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3720      	adds	r7, #32
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	607a      	str	r2, [r7, #4]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	72fb      	strb	r3, [r7, #11]
 8008d50:	4613      	mov	r3, r2
 8008d52:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	799b      	ldrb	r3, [r3, #6]
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d14a      	bne.n	8008df4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	795b      	ldrb	r3, [r3, #5]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d101      	bne.n	8008d6a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8008d66:	2302      	movs	r3, #2
 8008d68:	e045      	b.n	8008df6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f000 fa8f 	bl	8009294 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8008d76:	7afb      	ldrb	r3, [r7, #11]
 8008d78:	2b84      	cmp	r3, #132	; 0x84
 8008d7a:	d002      	beq.n	8008d82 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8008d7c:	7afb      	ldrb	r3, [r7, #11]
 8008d7e:	2b94      	cmp	r3, #148	; 0x94
 8008d80:	d103      	bne.n	8008d8a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2201      	movs	r2, #1
 8008d86:	711a      	strb	r2, [r3, #4]
 8008d88:	e002      	b.n	8008d90 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008d90:	f7ff fe42 	bl	8008a18 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008d94:	7afb      	ldrb	r3, [r7, #11]
 8008d96:	4619      	mov	r1, r3
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f000 f9cd 	bl	8009138 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008d9e:	2300      	movs	r3, #0
 8008da0:	82bb      	strh	r3, [r7, #20]
 8008da2:	e00a      	b.n	8008dba <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008da4:	8abb      	ldrh	r3, [r7, #20]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	4413      	add	r3, r2
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	4619      	mov	r1, r3
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f000 f9c2 	bl	8009138 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008db4:	8abb      	ldrh	r3, [r7, #20]
 8008db6:	3301      	adds	r3, #1
 8008db8:	82bb      	strh	r3, [r7, #20]
 8008dba:	8aba      	ldrh	r2, [r7, #20]
 8008dbc:	893b      	ldrh	r3, [r7, #8]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d3f0      	bcc.n	8008da4 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008dc2:	f7ff fe19 	bl	80089f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8008dc6:	7afb      	ldrb	r3, [r7, #11]
 8008dc8:	2b84      	cmp	r3, #132	; 0x84
 8008dca:	d002      	beq.n	8008dd2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f000 fa85 	bl	80092dc <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d002      	beq.n	8008de0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	75fb      	strb	r3, [r7, #23]
 8008dde:	e001      	b.n	8008de4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008de0:	2300      	movs	r3, #0
 8008de2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2201      	movs	r2, #1
 8008de8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2200      	movs	r2, #0
 8008dee:	715a      	strb	r2, [r3, #5]

    return status;
 8008df0:	7dfb      	ldrb	r3, [r7, #23]
 8008df2:	e000      	b.n	8008df6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008df4:	2302      	movs	r3, #2
  }
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3718      	adds	r7, #24
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b088      	sub	sp, #32
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	60f8      	str	r0, [r7, #12]
 8008e06:	607a      	str	r2, [r7, #4]
 8008e08:	461a      	mov	r2, r3
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	72fb      	strb	r3, [r7, #11]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	799b      	ldrb	r3, [r3, #6]
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d13d      	bne.n	8008e9c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	795b      	ldrb	r3, [r3, #5]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d101      	bne.n	8008e2c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8008e28:	2302      	movs	r3, #2
 8008e2a:	e038      	b.n	8008e9e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f000 fa2e 	bl	8009294 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008e38:	f7ff fdee 	bl	8008a18 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008e3c:	7afb      	ldrb	r3, [r7, #11]
 8008e3e:	4619      	mov	r1, r3
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f000 f979 	bl	8009138 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008e46:	2100      	movs	r1, #0
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f000 f975 	bl	8009138 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008e4e:	2300      	movs	r3, #0
 8008e50:	82fb      	strh	r3, [r7, #22]
 8008e52:	e009      	b.n	8008e68 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008e54:	69b9      	ldr	r1, [r7, #24]
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f000 f9c4 	bl	80091e4 <SUBGHZSPI_Receive>
      pData++;
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008e62:	8afb      	ldrh	r3, [r7, #22]
 8008e64:	3301      	adds	r3, #1
 8008e66:	82fb      	strh	r3, [r7, #22]
 8008e68:	8afa      	ldrh	r2, [r7, #22]
 8008e6a:	893b      	ldrh	r3, [r7, #8]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d3f1      	bcc.n	8008e54 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008e70:	f7ff fdc2 	bl	80089f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f000 fa31 	bl	80092dc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d002      	beq.n	8008e88 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	77fb      	strb	r3, [r7, #31]
 8008e86:	e001      	b.n	8008e8c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2200      	movs	r2, #0
 8008e96:	715a      	strb	r2, [r3, #5]

    return status;
 8008e98:	7ffb      	ldrb	r3, [r7, #31]
 8008e9a:	e000      	b.n	8008e9e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008e9c:	2302      	movs	r3, #2
  }
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3720      	adds	r7, #32
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b086      	sub	sp, #24
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	60f8      	str	r0, [r7, #12]
 8008eae:	607a      	str	r2, [r7, #4]
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	72fb      	strb	r3, [r7, #11]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	799b      	ldrb	r3, [r3, #6]
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d13e      	bne.n	8008f42 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	795b      	ldrb	r3, [r3, #5]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d101      	bne.n	8008ed0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8008ecc:	2302      	movs	r3, #2
 8008ece:	e039      	b.n	8008f44 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f000 f9dc 	bl	8009294 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008edc:	f7ff fd9c 	bl	8008a18 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8008ee0:	210e      	movs	r1, #14
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f000 f928 	bl	8009138 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008ee8:	7afb      	ldrb	r3, [r7, #11]
 8008eea:	4619      	mov	r1, r3
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f000 f923 	bl	8009138 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	82bb      	strh	r3, [r7, #20]
 8008ef6:	e00a      	b.n	8008f0e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008ef8:	8abb      	ldrh	r3, [r7, #20]
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	4413      	add	r3, r2
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	4619      	mov	r1, r3
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f000 f918 	bl	8009138 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008f08:	8abb      	ldrh	r3, [r7, #20]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	82bb      	strh	r3, [r7, #20]
 8008f0e:	8aba      	ldrh	r2, [r7, #20]
 8008f10:	893b      	ldrh	r3, [r7, #8]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d3f0      	bcc.n	8008ef8 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008f16:	f7ff fd6f 	bl	80089f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f000 f9de 	bl	80092dc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d002      	beq.n	8008f2e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	75fb      	strb	r3, [r7, #23]
 8008f2c:	e001      	b.n	8008f32 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2201      	movs	r2, #1
 8008f36:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	715a      	strb	r2, [r3, #5]

    return status;
 8008f3e:	7dfb      	ldrb	r3, [r7, #23]
 8008f40:	e000      	b.n	8008f44 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008f42:	2302      	movs	r3, #2
  }
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3718      	adds	r7, #24
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b088      	sub	sp, #32
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	607a      	str	r2, [r7, #4]
 8008f56:	461a      	mov	r2, r3
 8008f58:	460b      	mov	r3, r1
 8008f5a:	72fb      	strb	r3, [r7, #11]
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	799b      	ldrb	r3, [r3, #6]
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d141      	bne.n	8008ff2 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	795b      	ldrb	r3, [r3, #5]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d101      	bne.n	8008f7a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8008f76:	2302      	movs	r3, #2
 8008f78:	e03c      	b.n	8008ff4 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f000 f987 	bl	8009294 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008f86:	f7ff fd47 	bl	8008a18 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8008f8a:	211e      	movs	r1, #30
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f000 f8d3 	bl	8009138 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008f92:	7afb      	ldrb	r3, [r7, #11]
 8008f94:	4619      	mov	r1, r3
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f000 f8ce 	bl	8009138 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f000 f8ca 	bl	8009138 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	82fb      	strh	r3, [r7, #22]
 8008fa8:	e009      	b.n	8008fbe <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008faa:	69b9      	ldr	r1, [r7, #24]
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f000 f919 	bl	80091e4 <SUBGHZSPI_Receive>
      pData++;
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008fb8:	8afb      	ldrh	r3, [r7, #22]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	82fb      	strh	r3, [r7, #22]
 8008fbe:	8afa      	ldrh	r2, [r7, #22]
 8008fc0:	893b      	ldrh	r3, [r7, #8]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d3f1      	bcc.n	8008faa <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008fc6:	f7ff fd17 	bl	80089f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f000 f986 	bl	80092dc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d002      	beq.n	8008fde <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	77fb      	strb	r3, [r7, #31]
 8008fdc:	e001      	b.n	8008fe2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2200      	movs	r2, #0
 8008fec:	715a      	strb	r2, [r3, #5]

    return status;
 8008fee:	7ffb      	ldrb	r3, [r7, #31]
 8008ff0:	e000      	b.n	8008ff4 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8008ff2:	2302      	movs	r3, #2
  }
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3720      	adds	r7, #32
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8009004:	2300      	movs	r3, #0
 8009006:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8009008:	f107 020c 	add.w	r2, r7, #12
 800900c:	2302      	movs	r3, #2
 800900e:	2112      	movs	r1, #18
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7ff fef4 	bl	8008dfe <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8009016:	7b3b      	ldrb	r3, [r7, #12]
 8009018:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800901a:	89fb      	ldrh	r3, [r7, #14]
 800901c:	021b      	lsls	r3, r3, #8
 800901e:	b21a      	sxth	r2, r3
 8009020:	7b7b      	ldrb	r3, [r7, #13]
 8009022:	b21b      	sxth	r3, r3
 8009024:	4313      	orrs	r3, r2
 8009026:	b21b      	sxth	r3, r3
 8009028:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800902a:	89fb      	ldrh	r3, [r7, #14]
 800902c:	f003 0301 	and.w	r3, r3, #1
 8009030:	2b00      	cmp	r3, #0
 8009032:	d002      	beq.n	800903a <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f014 fad1 	bl	801d5dc <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800903a:	89fb      	ldrh	r3, [r7, #14]
 800903c:	085b      	lsrs	r3, r3, #1
 800903e:	f003 0301 	and.w	r3, r3, #1
 8009042:	2b00      	cmp	r3, #0
 8009044:	d002      	beq.n	800904c <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f014 fad6 	bl	801d5f8 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800904c:	89fb      	ldrh	r3, [r7, #14]
 800904e:	089b      	lsrs	r3, r3, #2
 8009050:	f003 0301 	and.w	r3, r3, #1
 8009054:	2b00      	cmp	r3, #0
 8009056:	d002      	beq.n	800905e <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f014 fb25 	bl	801d6a8 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800905e:	89fb      	ldrh	r3, [r7, #14]
 8009060:	08db      	lsrs	r3, r3, #3
 8009062:	f003 0301 	and.w	r3, r3, #1
 8009066:	2b00      	cmp	r3, #0
 8009068:	d002      	beq.n	8009070 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f014 fb2a 	bl	801d6c4 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8009070:	89fb      	ldrh	r3, [r7, #14]
 8009072:	091b      	lsrs	r3, r3, #4
 8009074:	f003 0301 	and.w	r3, r3, #1
 8009078:	2b00      	cmp	r3, #0
 800907a:	d002      	beq.n	8009082 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f014 fb2f 	bl	801d6e0 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8009082:	89fb      	ldrh	r3, [r7, #14]
 8009084:	095b      	lsrs	r3, r3, #5
 8009086:	f003 0301 	and.w	r3, r3, #1
 800908a:	2b00      	cmp	r3, #0
 800908c:	d002      	beq.n	8009094 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f014 fafc 	bl	801d68c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8009094:	89fb      	ldrh	r3, [r7, #14]
 8009096:	099b      	lsrs	r3, r3, #6
 8009098:	f003 0301 	and.w	r3, r3, #1
 800909c:	2b00      	cmp	r3, #0
 800909e:	d002      	beq.n	80090a6 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f014 fab7 	bl	801d614 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80090a6:	89fb      	ldrh	r3, [r7, #14]
 80090a8:	09db      	lsrs	r3, r3, #7
 80090aa:	f003 0301 	and.w	r3, r3, #1
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00e      	beq.n	80090d0 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80090b2:	89fb      	ldrh	r3, [r7, #14]
 80090b4:	0a1b      	lsrs	r3, r3, #8
 80090b6:	f003 0301 	and.w	r3, r3, #1
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d004      	beq.n	80090c8 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80090be:	2101      	movs	r1, #1
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f014 fab5 	bl	801d630 <HAL_SUBGHZ_CADStatusCallback>
 80090c6:	e003      	b.n	80090d0 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80090c8:	2100      	movs	r1, #0
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f014 fab0 	bl	801d630 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80090d0:	89fb      	ldrh	r3, [r7, #14]
 80090d2:	0a5b      	lsrs	r3, r3, #9
 80090d4:	f003 0301 	and.w	r3, r3, #1
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d002      	beq.n	80090e2 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f014 fac5 	bl	801d66c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80090e2:	f107 020c 	add.w	r2, r7, #12
 80090e6:	2302      	movs	r3, #2
 80090e8:	2102      	movs	r1, #2
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7ff fe28 	bl	8008d40 <HAL_SUBGHZ_ExecSetCmd>
}
 80090f0:	bf00      	nop
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8009100:	4b0c      	ldr	r3, [pc, #48]	; (8009134 <SUBGHZSPI_Init+0x3c>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a0b      	ldr	r2, [pc, #44]	; (8009134 <SUBGHZSPI_Init+0x3c>)
 8009106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800910a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800910c:	4a09      	ldr	r2, [pc, #36]	; (8009134 <SUBGHZSPI_Init+0x3c>)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8009114:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8009116:	4b07      	ldr	r3, [pc, #28]	; (8009134 <SUBGHZSPI_Init+0x3c>)
 8009118:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800911c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800911e:	4b05      	ldr	r3, [pc, #20]	; (8009134 <SUBGHZSPI_Init+0x3c>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a04      	ldr	r2, [pc, #16]	; (8009134 <SUBGHZSPI_Init+0x3c>)
 8009124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009128:	6013      	str	r3, [r2, #0]
}
 800912a:	bf00      	nop
 800912c:	370c      	adds	r7, #12
 800912e:	46bd      	mov	sp, r7
 8009130:	bc80      	pop	{r7}
 8009132:	4770      	bx	lr
 8009134:	58010000 	.word	0x58010000

08009138 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8009138:	b480      	push	{r7}
 800913a:	b087      	sub	sp, #28
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	460b      	mov	r3, r1
 8009142:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8009144:	2300      	movs	r3, #0
 8009146:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009148:	4b23      	ldr	r3, [pc, #140]	; (80091d8 <SUBGHZSPI_Transmit+0xa0>)
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	4613      	mov	r3, r2
 800914e:	00db      	lsls	r3, r3, #3
 8009150:	1a9b      	subs	r3, r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	0cdb      	lsrs	r3, r3, #19
 8009156:	2264      	movs	r2, #100	; 0x64
 8009158:	fb02 f303 	mul.w	r3, r2, r3
 800915c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d105      	bne.n	8009170 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	609a      	str	r2, [r3, #8]
      break;
 800916e:	e008      	b.n	8009182 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	3b01      	subs	r3, #1
 8009174:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8009176:	4b19      	ldr	r3, [pc, #100]	; (80091dc <SUBGHZSPI_Transmit+0xa4>)
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	f003 0302 	and.w	r3, r3, #2
 800917e:	2b02      	cmp	r3, #2
 8009180:	d1ed      	bne.n	800915e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8009182:	4b17      	ldr	r3, [pc, #92]	; (80091e0 <SUBGHZSPI_Transmit+0xa8>)
 8009184:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	78fa      	ldrb	r2, [r7, #3]
 800918a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800918c:	4b12      	ldr	r3, [pc, #72]	; (80091d8 <SUBGHZSPI_Transmit+0xa0>)
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	4613      	mov	r3, r2
 8009192:	00db      	lsls	r3, r3, #3
 8009194:	1a9b      	subs	r3, r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	0cdb      	lsrs	r3, r3, #19
 800919a:	2264      	movs	r2, #100	; 0x64
 800919c:	fb02 f303 	mul.w	r3, r2, r3
 80091a0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d105      	bne.n	80091b4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	609a      	str	r2, [r3, #8]
      break;
 80091b2:	e008      	b.n	80091c6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	3b01      	subs	r3, #1
 80091b8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80091ba:	4b08      	ldr	r3, [pc, #32]	; (80091dc <SUBGHZSPI_Transmit+0xa4>)
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	f003 0301 	and.w	r3, r3, #1
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d1ed      	bne.n	80091a2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80091c6:	4b05      	ldr	r3, [pc, #20]	; (80091dc <SUBGHZSPI_Transmit+0xa4>)
 80091c8:	68db      	ldr	r3, [r3, #12]

  return status;
 80091ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	371c      	adds	r7, #28
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bc80      	pop	{r7}
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	20000004 	.word	0x20000004
 80091dc:	58010000 	.word	0x58010000
 80091e0:	5801000c 	.word	0x5801000c

080091e4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b087      	sub	sp, #28
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80091f2:	4b25      	ldr	r3, [pc, #148]	; (8009288 <SUBGHZSPI_Receive+0xa4>)
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	4613      	mov	r3, r2
 80091f8:	00db      	lsls	r3, r3, #3
 80091fa:	1a9b      	subs	r3, r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	0cdb      	lsrs	r3, r3, #19
 8009200:	2264      	movs	r2, #100	; 0x64
 8009202:	fb02 f303 	mul.w	r3, r2, r3
 8009206:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d105      	bne.n	800921a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2201      	movs	r2, #1
 8009216:	609a      	str	r2, [r3, #8]
      break;
 8009218:	e008      	b.n	800922c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	3b01      	subs	r3, #1
 800921e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8009220:	4b1a      	ldr	r3, [pc, #104]	; (800928c <SUBGHZSPI_Receive+0xa8>)
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	f003 0302 	and.w	r3, r3, #2
 8009228:	2b02      	cmp	r3, #2
 800922a:	d1ed      	bne.n	8009208 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800922c:	4b18      	ldr	r3, [pc, #96]	; (8009290 <SUBGHZSPI_Receive+0xac>)
 800922e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	22ff      	movs	r2, #255	; 0xff
 8009234:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009236:	4b14      	ldr	r3, [pc, #80]	; (8009288 <SUBGHZSPI_Receive+0xa4>)
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	4613      	mov	r3, r2
 800923c:	00db      	lsls	r3, r3, #3
 800923e:	1a9b      	subs	r3, r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	0cdb      	lsrs	r3, r3, #19
 8009244:	2264      	movs	r2, #100	; 0x64
 8009246:	fb02 f303 	mul.w	r3, r2, r3
 800924a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d105      	bne.n	800925e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2201      	movs	r2, #1
 800925a:	609a      	str	r2, [r3, #8]
      break;
 800925c:	e008      	b.n	8009270 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	3b01      	subs	r3, #1
 8009262:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8009264:	4b09      	ldr	r3, [pc, #36]	; (800928c <SUBGHZSPI_Receive+0xa8>)
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	f003 0301 	and.w	r3, r3, #1
 800926c:	2b01      	cmp	r3, #1
 800926e:	d1ed      	bne.n	800924c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8009270:	4b06      	ldr	r3, [pc, #24]	; (800928c <SUBGHZSPI_Receive+0xa8>)
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	b2da      	uxtb	r2, r3
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	701a      	strb	r2, [r3, #0]

  return status;
 800927a:	7dfb      	ldrb	r3, [r7, #23]
}
 800927c:	4618      	mov	r0, r3
 800927e:	371c      	adds	r7, #28
 8009280:	46bd      	mov	sp, r7
 8009282:	bc80      	pop	{r7}
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	20000004 	.word	0x20000004
 800928c:	58010000 	.word	0x58010000
 8009290:	5801000c 	.word	0x5801000c

08009294 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	791b      	ldrb	r3, [r3, #4]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d111      	bne.n	80092c8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80092a4:	4b0c      	ldr	r3, [pc, #48]	; (80092d8 <SUBGHZ_CheckDeviceReady+0x44>)
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	4613      	mov	r3, r2
 80092aa:	005b      	lsls	r3, r3, #1
 80092ac:	4413      	add	r3, r2
 80092ae:	00db      	lsls	r3, r3, #3
 80092b0:	0c1b      	lsrs	r3, r3, #16
 80092b2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80092b4:	f7ff fbb0 	bl	8008a18 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	3b01      	subs	r3, #1
 80092bc:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1f9      	bne.n	80092b8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80092c4:	f7ff fb98 	bl	80089f8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f807 	bl	80092dc <SUBGHZ_WaitOnBusy>
 80092ce:	4603      	mov	r3, r0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	20000004 	.word	0x20000004

080092dc <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b086      	sub	sp, #24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80092e8:	4b12      	ldr	r3, [pc, #72]	; (8009334 <SUBGHZ_WaitOnBusy+0x58>)
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	4613      	mov	r3, r2
 80092ee:	005b      	lsls	r3, r3, #1
 80092f0:	4413      	add	r3, r2
 80092f2:	00db      	lsls	r3, r3, #3
 80092f4:	0d1b      	lsrs	r3, r3, #20
 80092f6:	2264      	movs	r2, #100	; 0x64
 80092f8:	fb02 f303 	mul.w	r3, r2, r3
 80092fc:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80092fe:	f7ff fbb9 	bl	8008a74 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8009302:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d105      	bne.n	8009316 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2202      	movs	r2, #2
 8009312:	609a      	str	r2, [r3, #8]
      break;
 8009314:	e009      	b.n	800932a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	3b01      	subs	r3, #1
 800931a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800931c:	f7ff fb98 	bl	8008a50 <LL_PWR_IsActiveFlag_RFBUSYS>
 8009320:	4602      	mov	r2, r0
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	4013      	ands	r3, r2
 8009326:	2b01      	cmp	r3, #1
 8009328:	d0e9      	beq.n	80092fe <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800932a:	7dfb      	ldrb	r3, [r7, #23]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3718      	adds	r7, #24
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	20000004 	.word	0x20000004

08009338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d101      	bne.n	800934a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e049      	b.n	80093de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d106      	bne.n	8009364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7f9 fc36 	bl	8002bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2202      	movs	r2, #2
 8009368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	3304      	adds	r3, #4
 8009374:	4619      	mov	r1, r3
 8009376:	4610      	mov	r0, r2
 8009378:	f000 f9c6 	bl	8009708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3708      	adds	r7, #8
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
	...

080093e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d001      	beq.n	8009400 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e036      	b.n	800946e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2202      	movs	r2, #2
 8009404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	68da      	ldr	r2, [r3, #12]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f042 0201 	orr.w	r2, r2, #1
 8009416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a16      	ldr	r2, [pc, #88]	; (8009478 <HAL_TIM_Base_Start_IT+0x90>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d004      	beq.n	800942c <HAL_TIM_Base_Start_IT+0x44>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800942a:	d115      	bne.n	8009458 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	689a      	ldr	r2, [r3, #8]
 8009432:	4b12      	ldr	r3, [pc, #72]	; (800947c <HAL_TIM_Base_Start_IT+0x94>)
 8009434:	4013      	ands	r3, r2
 8009436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2b06      	cmp	r3, #6
 800943c:	d015      	beq.n	800946a <HAL_TIM_Base_Start_IT+0x82>
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009444:	d011      	beq.n	800946a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f042 0201 	orr.w	r2, r2, #1
 8009454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009456:	e008      	b.n	800946a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f042 0201 	orr.w	r2, r2, #1
 8009466:	601a      	str	r2, [r3, #0]
 8009468:	e000      	b.n	800946c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800946a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3714      	adds	r7, #20
 8009472:	46bd      	mov	sp, r7
 8009474:	bc80      	pop	{r7}
 8009476:	4770      	bx	lr
 8009478:	40012c00 	.word	0x40012c00
 800947c:	00010007 	.word	0x00010007

08009480 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	2b02      	cmp	r3, #2
 8009494:	d122      	bne.n	80094dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	f003 0302 	and.w	r3, r3, #2
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d11b      	bne.n	80094dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f06f 0202 	mvn.w	r2, #2
 80094ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2201      	movs	r2, #1
 80094b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	f003 0303 	and.w	r3, r3, #3
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d003      	beq.n	80094ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f904 	bl	80096d0 <HAL_TIM_IC_CaptureCallback>
 80094c8:	e005      	b.n	80094d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 f8f7 	bl	80096be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f906 	bl	80096e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	f003 0304 	and.w	r3, r3, #4
 80094e6:	2b04      	cmp	r3, #4
 80094e8:	d122      	bne.n	8009530 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	f003 0304 	and.w	r3, r3, #4
 80094f4:	2b04      	cmp	r3, #4
 80094f6:	d11b      	bne.n	8009530 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f06f 0204 	mvn.w	r2, #4
 8009500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2202      	movs	r2, #2
 8009506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	699b      	ldr	r3, [r3, #24]
 800950e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009512:	2b00      	cmp	r3, #0
 8009514:	d003      	beq.n	800951e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f8da 	bl	80096d0 <HAL_TIM_IC_CaptureCallback>
 800951c:	e005      	b.n	800952a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f8cd 	bl	80096be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f8dc 	bl	80096e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	f003 0308 	and.w	r3, r3, #8
 800953a:	2b08      	cmp	r3, #8
 800953c:	d122      	bne.n	8009584 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	f003 0308 	and.w	r3, r3, #8
 8009548:	2b08      	cmp	r3, #8
 800954a:	d11b      	bne.n	8009584 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f06f 0208 	mvn.w	r2, #8
 8009554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2204      	movs	r2, #4
 800955a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	69db      	ldr	r3, [r3, #28]
 8009562:	f003 0303 	and.w	r3, r3, #3
 8009566:	2b00      	cmp	r3, #0
 8009568:	d003      	beq.n	8009572 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f8b0 	bl	80096d0 <HAL_TIM_IC_CaptureCallback>
 8009570:	e005      	b.n	800957e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f8a3 	bl	80096be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 f8b2 	bl	80096e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	f003 0310 	and.w	r3, r3, #16
 800958e:	2b10      	cmp	r3, #16
 8009590:	d122      	bne.n	80095d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	f003 0310 	and.w	r3, r3, #16
 800959c:	2b10      	cmp	r3, #16
 800959e:	d11b      	bne.n	80095d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f06f 0210 	mvn.w	r2, #16
 80095a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2208      	movs	r2, #8
 80095ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	69db      	ldr	r3, [r3, #28]
 80095b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d003      	beq.n	80095c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f886 	bl	80096d0 <HAL_TIM_IC_CaptureCallback>
 80095c4:	e005      	b.n	80095d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f879 	bl	80096be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 f888 	bl	80096e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	f003 0301 	and.w	r3, r3, #1
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d10e      	bne.n	8009604 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	f003 0301 	and.w	r3, r3, #1
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d107      	bne.n	8009604 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f06f 0201 	mvn.w	r2, #1
 80095fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f7f8 fd40 	bl	8002084 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800960e:	2b80      	cmp	r3, #128	; 0x80
 8009610:	d10e      	bne.n	8009630 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800961c:	2b80      	cmp	r3, #128	; 0x80
 800961e:	d107      	bne.n	8009630 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 f8d7 	bl	80097de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800963a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800963e:	d10e      	bne.n	800965e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800964a:	2b80      	cmp	r3, #128	; 0x80
 800964c:	d107      	bne.n	800965e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 f8c9 	bl	80097f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009668:	2b40      	cmp	r3, #64	; 0x40
 800966a:	d10e      	bne.n	800968a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009676:	2b40      	cmp	r3, #64	; 0x40
 8009678:	d107      	bne.n	800968a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 f835 	bl	80096f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	691b      	ldr	r3, [r3, #16]
 8009690:	f003 0320 	and.w	r3, r3, #32
 8009694:	2b20      	cmp	r3, #32
 8009696:	d10e      	bne.n	80096b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	f003 0320 	and.w	r3, r3, #32
 80096a2:	2b20      	cmp	r3, #32
 80096a4:	d107      	bne.n	80096b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f06f 0220 	mvn.w	r2, #32
 80096ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 f88b 	bl	80097cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80096b6:	bf00      	nop
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096be:	b480      	push	{r7}
 80096c0:	b083      	sub	sp, #12
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80096c6:	bf00      	nop
 80096c8:	370c      	adds	r7, #12
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bc80      	pop	{r7}
 80096ce:	4770      	bx	lr

080096d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	bc80      	pop	{r7}
 80096e0:	4770      	bx	lr

080096e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80096e2:	b480      	push	{r7}
 80096e4:	b083      	sub	sp, #12
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80096ea:	bf00      	nop
 80096ec:	370c      	adds	r7, #12
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bc80      	pop	{r7}
 80096f2:	4770      	bx	lr

080096f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	bc80      	pop	{r7}
 8009704:	4770      	bx	lr
	...

08009708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a29      	ldr	r2, [pc, #164]	; (80097c0 <TIM_Base_SetConfig+0xb8>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d003      	beq.n	8009728 <TIM_Base_SetConfig+0x20>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009726:	d108      	bne.n	800973a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800972e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	4313      	orrs	r3, r2
 8009738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a20      	ldr	r2, [pc, #128]	; (80097c0 <TIM_Base_SetConfig+0xb8>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d00b      	beq.n	800975a <TIM_Base_SetConfig+0x52>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009748:	d007      	beq.n	800975a <TIM_Base_SetConfig+0x52>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a1d      	ldr	r2, [pc, #116]	; (80097c4 <TIM_Base_SetConfig+0xbc>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d003      	beq.n	800975a <TIM_Base_SetConfig+0x52>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a1c      	ldr	r2, [pc, #112]	; (80097c8 <TIM_Base_SetConfig+0xc0>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d108      	bne.n	800976c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	4313      	orrs	r3, r2
 800976a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	4313      	orrs	r3, r2
 8009778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	689a      	ldr	r2, [r3, #8]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a0b      	ldr	r2, [pc, #44]	; (80097c0 <TIM_Base_SetConfig+0xb8>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d007      	beq.n	80097a8 <TIM_Base_SetConfig+0xa0>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a0a      	ldr	r2, [pc, #40]	; (80097c4 <TIM_Base_SetConfig+0xbc>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d003      	beq.n	80097a8 <TIM_Base_SetConfig+0xa0>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a09      	ldr	r2, [pc, #36]	; (80097c8 <TIM_Base_SetConfig+0xc0>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d103      	bne.n	80097b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	691a      	ldr	r2, [r3, #16]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	615a      	str	r2, [r3, #20]
}
 80097b6:	bf00      	nop
 80097b8:	3714      	adds	r7, #20
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bc80      	pop	{r7}
 80097be:	4770      	bx	lr
 80097c0:	40012c00 	.word	0x40012c00
 80097c4:	40014400 	.word	0x40014400
 80097c8:	40014800 	.word	0x40014800

080097cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	bc80      	pop	{r7}
 80097dc:	4770      	bx	lr

080097de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097de:	b480      	push	{r7}
 80097e0:	b083      	sub	sp, #12
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097e6:	bf00      	nop
 80097e8:	370c      	adds	r7, #12
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bc80      	pop	{r7}
 80097ee:	4770      	bx	lr

080097f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bc80      	pop	{r7}
 8009800:	4770      	bx	lr

08009802 <LL_RCC_GetUSARTClockSource>:
{
 8009802:	b480      	push	{r7}
 8009804:	b083      	sub	sp, #12
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800980a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800980e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	401a      	ands	r2, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	041b      	lsls	r3, r3, #16
 800981a:	4313      	orrs	r3, r2
}
 800981c:	4618      	mov	r0, r3
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	bc80      	pop	{r7}
 8009824:	4770      	bx	lr

08009826 <LL_RCC_GetLPUARTClockSource>:
{
 8009826:	b480      	push	{r7}
 8009828:	b083      	sub	sp, #12
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800982e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009832:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4013      	ands	r3, r2
}
 800983a:	4618      	mov	r0, r3
 800983c:	370c      	adds	r7, #12
 800983e:	46bd      	mov	sp, r7
 8009840:	bc80      	pop	{r7}
 8009842:	4770      	bx	lr

08009844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d101      	bne.n	8009856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	e042      	b.n	80098dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800985c:	2b00      	cmp	r3, #0
 800985e:	d106      	bne.n	800986e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f7f9 fd3f 	bl	80032ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2224      	movs	r2, #36	; 0x24
 8009872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f022 0201 	bic.w	r2, r2, #1
 8009884:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fc48 	bl	800a11c <UART_SetConfig>
 800988c:	4603      	mov	r3, r0
 800988e:	2b01      	cmp	r3, #1
 8009890:	d101      	bne.n	8009896 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e022      	b.n	80098dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800989a:	2b00      	cmp	r3, #0
 800989c:	d002      	beq.n	80098a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 feb0 	bl	800a604 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	685a      	ldr	r2, [r3, #4]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80098b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	689a      	ldr	r2, [r3, #8]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80098c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f042 0201 	orr.w	r2, r2, #1
 80098d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 ff36 	bl	800a746 <UART_CheckIdleState>
 80098da:	4603      	mov	r3, r0
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b08a      	sub	sp, #40	; 0x28
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	4613      	mov	r3, r2
 80098f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098f8:	2b20      	cmp	r3, #32
 80098fa:	d142      	bne.n	8009982 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d002      	beq.n	8009908 <HAL_UART_Receive_IT+0x24>
 8009902:	88fb      	ldrh	r3, [r7, #6]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d101      	bne.n	800990c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	e03b      	b.n	8009984 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009912:	2b01      	cmp	r3, #1
 8009914:	d101      	bne.n	800991a <HAL_UART_Receive_IT+0x36>
 8009916:	2302      	movs	r3, #2
 8009918:	e034      	b.n	8009984 <HAL_UART_Receive_IT+0xa0>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2201      	movs	r2, #1
 800991e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2200      	movs	r2, #0
 8009926:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a17      	ldr	r2, [pc, #92]	; (800998c <HAL_UART_Receive_IT+0xa8>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d01f      	beq.n	8009972 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d018      	beq.n	8009972 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	e853 3f00 	ldrex	r3, [r3]
 800994c:	613b      	str	r3, [r7, #16]
   return(result);
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009954:	627b      	str	r3, [r7, #36]	; 0x24
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	461a      	mov	r2, r3
 800995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995e:	623b      	str	r3, [r7, #32]
 8009960:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009962:	69f9      	ldr	r1, [r7, #28]
 8009964:	6a3a      	ldr	r2, [r7, #32]
 8009966:	e841 2300 	strex	r3, r2, [r1]
 800996a:	61bb      	str	r3, [r7, #24]
   return(result);
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1e6      	bne.n	8009940 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8009972:	88fb      	ldrh	r3, [r7, #6]
 8009974:	461a      	mov	r2, r3
 8009976:	68b9      	ldr	r1, [r7, #8]
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f000 fff7 	bl	800a96c <UART_Start_Receive_IT>
 800997e:	4603      	mov	r3, r0
 8009980:	e000      	b.n	8009984 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009982:	2302      	movs	r3, #2
  }
}
 8009984:	4618      	mov	r0, r3
 8009986:	3728      	adds	r7, #40	; 0x28
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	40008000 	.word	0x40008000

08009990 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b08a      	sub	sp, #40	; 0x28
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	4613      	mov	r3, r2
 800999c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099a4:	2b20      	cmp	r3, #32
 80099a6:	d17a      	bne.n	8009a9e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d002      	beq.n	80099b4 <HAL_UART_Transmit_DMA+0x24>
 80099ae:	88fb      	ldrh	r3, [r7, #6]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d101      	bne.n	80099b8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	e073      	b.n	8009aa0 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d101      	bne.n	80099c6 <HAL_UART_Transmit_DMA+0x36>
 80099c2:	2302      	movs	r3, #2
 80099c4:	e06c      	b.n	8009aa0 <HAL_UART_Transmit_DMA+0x110>
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2201      	movs	r2, #1
 80099ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	68ba      	ldr	r2, [r7, #8]
 80099d2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	88fa      	ldrh	r2, [r7, #6]
 80099d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	88fa      	ldrh	r2, [r7, #6]
 80099e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2221      	movs	r2, #33	; 0x21
 80099f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d02c      	beq.n	8009a56 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a00:	4a29      	ldr	r2, [pc, #164]	; (8009aa8 <HAL_UART_Transmit_DMA+0x118>)
 8009a02:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a08:	4a28      	ldr	r2, [pc, #160]	; (8009aac <HAL_UART_Transmit_DMA+0x11c>)
 8009a0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a10:	4a27      	ldr	r2, [pc, #156]	; (8009ab0 <HAL_UART_Transmit_DMA+0x120>)
 8009a12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a18:	2200      	movs	r2, #0
 8009a1a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a24:	4619      	mov	r1, r3
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	3328      	adds	r3, #40	; 0x28
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	88fb      	ldrh	r3, [r7, #6]
 8009a30:	f7fb fb22 	bl	8005078 <HAL_DMA_Start_IT>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00d      	beq.n	8009a56 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2210      	movs	r2, #16
 8009a3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2220      	movs	r2, #32
 8009a4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e024      	b.n	8009aa0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2240      	movs	r2, #64	; 0x40
 8009a5c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	3308      	adds	r3, #8
 8009a6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	e853 3f00 	ldrex	r3, [r3]
 8009a74:	613b      	str	r3, [r7, #16]
   return(result);
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	3308      	adds	r3, #8
 8009a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a86:	623a      	str	r2, [r7, #32]
 8009a88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8a:	69f9      	ldr	r1, [r7, #28]
 8009a8c:	6a3a      	ldr	r2, [r7, #32]
 8009a8e:	e841 2300 	strex	r3, r2, [r1]
 8009a92:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d1e5      	bne.n	8009a66 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	e000      	b.n	8009aa0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8009a9e:	2302      	movs	r3, #2
  }
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3728      	adds	r7, #40	; 0x28
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	0800ae57 	.word	0x0800ae57
 8009aac:	0800aef1 	.word	0x0800aef1
 8009ab0:	0800b06b 	.word	0x0800b06b

08009ab4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b0ba      	sub	sp, #232	; 0xe8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	69db      	ldr	r3, [r3, #28]
 8009ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009ada:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009ade:	f640 030f 	movw	r3, #2063	; 0x80f
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009ae8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d11b      	bne.n	8009b28 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009af4:	f003 0320 	and.w	r3, r3, #32
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d015      	beq.n	8009b28 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b00:	f003 0320 	and.w	r3, r3, #32
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d105      	bne.n	8009b14 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d009      	beq.n	8009b28 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f000 82d6 	beq.w	800a0ca <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	4798      	blx	r3
      }
      return;
 8009b26:	e2d0      	b.n	800a0ca <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009b28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f000 811f 	beq.w	8009d70 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009b32:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009b36:	4b8b      	ldr	r3, [pc, #556]	; (8009d64 <HAL_UART_IRQHandler+0x2b0>)
 8009b38:	4013      	ands	r3, r2
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d106      	bne.n	8009b4c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009b3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009b42:	4b89      	ldr	r3, [pc, #548]	; (8009d68 <HAL_UART_IRQHandler+0x2b4>)
 8009b44:	4013      	ands	r3, r2
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f000 8112 	beq.w	8009d70 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b50:	f003 0301 	and.w	r3, r3, #1
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d011      	beq.n	8009b7c <HAL_UART_IRQHandler+0xc8>
 8009b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d00b      	beq.n	8009b7c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b72:	f043 0201 	orr.w	r2, r3, #1
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b80:	f003 0302 	and.w	r3, r3, #2
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d011      	beq.n	8009bac <HAL_UART_IRQHandler+0xf8>
 8009b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b8c:	f003 0301 	and.w	r3, r3, #1
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00b      	beq.n	8009bac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2202      	movs	r2, #2
 8009b9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ba2:	f043 0204 	orr.w	r2, r3, #4
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bb0:	f003 0304 	and.w	r3, r3, #4
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d011      	beq.n	8009bdc <HAL_UART_IRQHandler+0x128>
 8009bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bbc:	f003 0301 	and.w	r3, r3, #1
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00b      	beq.n	8009bdc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2204      	movs	r2, #4
 8009bca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bd2:	f043 0202 	orr.w	r2, r3, #2
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009be0:	f003 0308 	and.w	r3, r3, #8
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d017      	beq.n	8009c18 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bec:	f003 0320 	and.w	r3, r3, #32
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d105      	bne.n	8009c00 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009bf4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009bf8:	4b5a      	ldr	r3, [pc, #360]	; (8009d64 <HAL_UART_IRQHandler+0x2b0>)
 8009bfa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00b      	beq.n	8009c18 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2208      	movs	r2, #8
 8009c06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c0e:	f043 0208 	orr.w	r2, r3, #8
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d012      	beq.n	8009c4a <HAL_UART_IRQHandler+0x196>
 8009c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00c      	beq.n	8009c4a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c40:	f043 0220 	orr.w	r2, r3, #32
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f000 823c 	beq.w	800a0ce <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c5a:	f003 0320 	and.w	r3, r3, #32
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d013      	beq.n	8009c8a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c66:	f003 0320 	and.w	r3, r3, #32
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d105      	bne.n	8009c7a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d007      	beq.n	8009c8a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d003      	beq.n	8009c8a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	689b      	ldr	r3, [r3, #8]
 8009c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c9e:	2b40      	cmp	r3, #64	; 0x40
 8009ca0:	d005      	beq.n	8009cae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ca6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d04f      	beq.n	8009d4e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f001 f86c 	bl	800ad8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cbe:	2b40      	cmp	r3, #64	; 0x40
 8009cc0:	d141      	bne.n	8009d46 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	3308      	adds	r3, #8
 8009cc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cd0:	e853 3f00 	ldrex	r3, [r3]
 8009cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3308      	adds	r3, #8
 8009cea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009cee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009cfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009cfe:	e841 2300 	strex	r3, r2, [r1]
 8009d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1d9      	bne.n	8009cc2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d013      	beq.n	8009d3e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d1a:	4a14      	ldr	r2, [pc, #80]	; (8009d6c <HAL_UART_IRQHandler+0x2b8>)
 8009d1c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fb fa84 	bl	8005230 <HAL_DMA_Abort_IT>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d017      	beq.n	8009d5e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009d38:	4610      	mov	r0, r2
 8009d3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d3c:	e00f      	b.n	8009d5e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f9e2 	bl	800a108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d44:	e00b      	b.n	8009d5e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f9de 	bl	800a108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d4c:	e007      	b.n	8009d5e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 f9da 	bl	800a108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009d5c:	e1b7      	b.n	800a0ce <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d5e:	bf00      	nop
    return;
 8009d60:	e1b5      	b.n	800a0ce <HAL_UART_IRQHandler+0x61a>
 8009d62:	bf00      	nop
 8009d64:	10000001 	.word	0x10000001
 8009d68:	04000120 	.word	0x04000120
 8009d6c:	0800b0eb 	.word	0x0800b0eb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	f040 814a 	bne.w	800a00e <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8009d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d7e:	f003 0310 	and.w	r3, r3, #16
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f000 8143 	beq.w	800a00e <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8009d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d8c:	f003 0310 	and.w	r3, r3, #16
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f000 813c 	beq.w	800a00e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2210      	movs	r2, #16
 8009d9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009da8:	2b40      	cmp	r3, #64	; 0x40
 8009daa:	f040 80b5 	bne.w	8009f18 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8009dba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f000 8187 	beq.w	800a0d2 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009dca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	f080 817f 	bcs.w	800a0d2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009dda:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f003 0320 	and.w	r3, r3, #32
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f040 8086 	bne.w	8009efc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009dfc:	e853 3f00 	ldrex	r3, [r3]
 8009e00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009e04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	461a      	mov	r2, r3
 8009e16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009e1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009e26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009e2a:	e841 2300 	strex	r3, r2, [r1]
 8009e2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1da      	bne.n	8009df0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	3308      	adds	r3, #8
 8009e40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e44:	e853 3f00 	ldrex	r3, [r3]
 8009e48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009e4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e4c:	f023 0301 	bic.w	r3, r3, #1
 8009e50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	3308      	adds	r3, #8
 8009e5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009e5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009e62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009e66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009e6a:	e841 2300 	strex	r3, r2, [r1]
 8009e6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1e1      	bne.n	8009e3a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	3308      	adds	r3, #8
 8009e7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e80:	e853 3f00 	ldrex	r3, [r3]
 8009e84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3308      	adds	r3, #8
 8009e96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009e9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009e9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ea0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ea2:	e841 2300 	strex	r3, r2, [r1]
 8009ea6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009ea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1e3      	bne.n	8009e76 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2220      	movs	r2, #32
 8009eb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ec4:	e853 3f00 	ldrex	r3, [r3]
 8009ec8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ecc:	f023 0310 	bic.w	r3, r3, #16
 8009ed0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	461a      	mov	r2, r3
 8009eda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ede:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ee0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ee4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ee6:	e841 2300 	strex	r3, r2, [r1]
 8009eea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1e4      	bne.n	8009ebc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fb f93c 	bl	8005174 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	1ad3      	subs	r3, r2, r3
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	4619      	mov	r1, r3
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f7f8 f847 	bl	8001fa4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009f16:	e0dc      	b.n	800a0d2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	1ad3      	subs	r3, r2, r3
 8009f28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	f000 80ce 	beq.w	800a0d6 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8009f3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f000 80c9 	beq.w	800a0d6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4c:	e853 3f00 	ldrex	r3, [r3]
 8009f50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	461a      	mov	r2, r3
 8009f62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f66:	647b      	str	r3, [r7, #68]	; 0x44
 8009f68:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f6e:	e841 2300 	strex	r3, r2, [r1]
 8009f72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1e4      	bne.n	8009f44 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	3308      	adds	r3, #8
 8009f80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f84:	e853 3f00 	ldrex	r3, [r3]
 8009f88:	623b      	str	r3, [r7, #32]
   return(result);
 8009f8a:	6a3b      	ldr	r3, [r7, #32]
 8009f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f90:	f023 0301 	bic.w	r3, r3, #1
 8009f94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	3308      	adds	r3, #8
 8009f9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009fa2:	633a      	str	r2, [r7, #48]	; 0x30
 8009fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009faa:	e841 2300 	strex	r3, r2, [r1]
 8009fae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1e1      	bne.n	8009f7a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2220      	movs	r2, #32
 8009fba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	e853 3f00 	ldrex	r3, [r3]
 8009fd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f023 0310 	bic.w	r3, r3, #16
 8009fde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009fec:	61fb      	str	r3, [r7, #28]
 8009fee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff0:	69b9      	ldr	r1, [r7, #24]
 8009ff2:	69fa      	ldr	r2, [r7, #28]
 8009ff4:	e841 2300 	strex	r3, r2, [r1]
 8009ff8:	617b      	str	r3, [r7, #20]
   return(result);
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d1e4      	bne.n	8009fca <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a000:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a004:	4619      	mov	r1, r3
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f7f7 ffcc 	bl	8001fa4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a00c:	e063      	b.n	800a0d6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a00e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00e      	beq.n	800a038 <HAL_UART_IRQHandler+0x584>
 800a01a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a01e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a022:	2b00      	cmp	r3, #0
 800a024:	d008      	beq.n	800a038 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a02e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f001 fcf7 	bl	800ba24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a036:	e051      	b.n	800a0dc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a03c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a040:	2b00      	cmp	r3, #0
 800a042:	d014      	beq.n	800a06e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d105      	bne.n	800a05c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a054:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d008      	beq.n	800a06e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a060:	2b00      	cmp	r3, #0
 800a062:	d03a      	beq.n	800a0da <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	4798      	blx	r3
    }
    return;
 800a06c:	e035      	b.n	800a0da <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a06e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a076:	2b00      	cmp	r3, #0
 800a078:	d009      	beq.n	800a08e <HAL_UART_IRQHandler+0x5da>
 800a07a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a07e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a082:	2b00      	cmp	r3, #0
 800a084:	d003      	beq.n	800a08e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f001 f845 	bl	800b116 <UART_EndTransmit_IT>
    return;
 800a08c:	e026      	b.n	800a0dc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a08e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a092:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a096:	2b00      	cmp	r3, #0
 800a098:	d009      	beq.n	800a0ae <HAL_UART_IRQHandler+0x5fa>
 800a09a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a09e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d003      	beq.n	800a0ae <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f001 fcce 	bl	800ba48 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0ac:	e016      	b.n	800a0dc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a0ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d010      	beq.n	800a0dc <HAL_UART_IRQHandler+0x628>
 800a0ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	da0c      	bge.n	800a0dc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f001 fcb7 	bl	800ba36 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0c8:	e008      	b.n	800a0dc <HAL_UART_IRQHandler+0x628>
      return;
 800a0ca:	bf00      	nop
 800a0cc:	e006      	b.n	800a0dc <HAL_UART_IRQHandler+0x628>
    return;
 800a0ce:	bf00      	nop
 800a0d0:	e004      	b.n	800a0dc <HAL_UART_IRQHandler+0x628>
      return;
 800a0d2:	bf00      	nop
 800a0d4:	e002      	b.n	800a0dc <HAL_UART_IRQHandler+0x628>
      return;
 800a0d6:	bf00      	nop
 800a0d8:	e000      	b.n	800a0dc <HAL_UART_IRQHandler+0x628>
    return;
 800a0da:	bf00      	nop
  }
}
 800a0dc:	37e8      	adds	r7, #232	; 0xe8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop

0800a0e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bc80      	pop	{r7}
 800a0f4:	4770      	bx	lr

0800a0f6 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a0f6:	b480      	push	{r7}
 800a0f8:	b083      	sub	sp, #12
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a0fe:	bf00      	nop
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	bc80      	pop	{r7}
 800a106:	4770      	bx	lr

0800a108 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a110:	bf00      	nop
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	bc80      	pop	{r7}
 800a118:	4770      	bx	lr
	...

0800a11c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a11c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a120:	b08c      	sub	sp, #48	; 0x30
 800a122:	af00      	add	r7, sp, #0
 800a124:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a126:	2300      	movs	r3, #0
 800a128:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	689a      	ldr	r2, [r3, #8]
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	431a      	orrs	r2, r3
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	695b      	ldr	r3, [r3, #20]
 800a13a:	431a      	orrs	r2, r3
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	69db      	ldr	r3, [r3, #28]
 800a140:	4313      	orrs	r3, r2
 800a142:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	4b94      	ldr	r3, [pc, #592]	; (800a39c <UART_SetConfig+0x280>)
 800a14c:	4013      	ands	r3, r2
 800a14e:	697a      	ldr	r2, [r7, #20]
 800a150:	6812      	ldr	r2, [r2, #0]
 800a152:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a154:	430b      	orrs	r3, r1
 800a156:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	68da      	ldr	r2, [r3, #12]
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	430a      	orrs	r2, r1
 800a16c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a89      	ldr	r2, [pc, #548]	; (800a3a0 <UART_SetConfig+0x284>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d004      	beq.n	800a188 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	6a1b      	ldr	r3, [r3, #32]
 800a182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a184:	4313      	orrs	r3, r2
 800a186:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a192:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a196:	697a      	ldr	r2, [r7, #20]
 800a198:	6812      	ldr	r2, [r2, #0]
 800a19a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a19c:	430b      	orrs	r3, r1
 800a19e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a6:	f023 010f 	bic.w	r1, r3, #15
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	430a      	orrs	r2, r1
 800a1b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a7a      	ldr	r2, [pc, #488]	; (800a3a4 <UART_SetConfig+0x288>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d127      	bne.n	800a210 <UART_SetConfig+0xf4>
 800a1c0:	2003      	movs	r0, #3
 800a1c2:	f7ff fb1e 	bl	8009802 <LL_RCC_GetUSARTClockSource>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800a1cc:	2b03      	cmp	r3, #3
 800a1ce:	d81b      	bhi.n	800a208 <UART_SetConfig+0xec>
 800a1d0:	a201      	add	r2, pc, #4	; (adr r2, 800a1d8 <UART_SetConfig+0xbc>)
 800a1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d6:	bf00      	nop
 800a1d8:	0800a1e9 	.word	0x0800a1e9
 800a1dc:	0800a1f9 	.word	0x0800a1f9
 800a1e0:	0800a1f1 	.word	0x0800a1f1
 800a1e4:	0800a201 	.word	0x0800a201
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a1ee:	e080      	b.n	800a2f2 <UART_SetConfig+0x1d6>
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a1f6:	e07c      	b.n	800a2f2 <UART_SetConfig+0x1d6>
 800a1f8:	2304      	movs	r3, #4
 800a1fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a1fe:	e078      	b.n	800a2f2 <UART_SetConfig+0x1d6>
 800a200:	2308      	movs	r3, #8
 800a202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a206:	e074      	b.n	800a2f2 <UART_SetConfig+0x1d6>
 800a208:	2310      	movs	r3, #16
 800a20a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a20e:	e070      	b.n	800a2f2 <UART_SetConfig+0x1d6>
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a64      	ldr	r2, [pc, #400]	; (800a3a8 <UART_SetConfig+0x28c>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d138      	bne.n	800a28c <UART_SetConfig+0x170>
 800a21a:	200c      	movs	r0, #12
 800a21c:	f7ff faf1 	bl	8009802 <LL_RCC_GetUSARTClockSource>
 800a220:	4603      	mov	r3, r0
 800a222:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800a226:	2b0c      	cmp	r3, #12
 800a228:	d82c      	bhi.n	800a284 <UART_SetConfig+0x168>
 800a22a:	a201      	add	r2, pc, #4	; (adr r2, 800a230 <UART_SetConfig+0x114>)
 800a22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a230:	0800a265 	.word	0x0800a265
 800a234:	0800a285 	.word	0x0800a285
 800a238:	0800a285 	.word	0x0800a285
 800a23c:	0800a285 	.word	0x0800a285
 800a240:	0800a275 	.word	0x0800a275
 800a244:	0800a285 	.word	0x0800a285
 800a248:	0800a285 	.word	0x0800a285
 800a24c:	0800a285 	.word	0x0800a285
 800a250:	0800a26d 	.word	0x0800a26d
 800a254:	0800a285 	.word	0x0800a285
 800a258:	0800a285 	.word	0x0800a285
 800a25c:	0800a285 	.word	0x0800a285
 800a260:	0800a27d 	.word	0x0800a27d
 800a264:	2300      	movs	r3, #0
 800a266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a26a:	e042      	b.n	800a2f2 <UART_SetConfig+0x1d6>
 800a26c:	2302      	movs	r3, #2
 800a26e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a272:	e03e      	b.n	800a2f2 <UART_SetConfig+0x1d6>
 800a274:	2304      	movs	r3, #4
 800a276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a27a:	e03a      	b.n	800a2f2 <UART_SetConfig+0x1d6>
 800a27c:	2308      	movs	r3, #8
 800a27e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a282:	e036      	b.n	800a2f2 <UART_SetConfig+0x1d6>
 800a284:	2310      	movs	r3, #16
 800a286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a28a:	e032      	b.n	800a2f2 <UART_SetConfig+0x1d6>
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a43      	ldr	r2, [pc, #268]	; (800a3a0 <UART_SetConfig+0x284>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d12a      	bne.n	800a2ec <UART_SetConfig+0x1d0>
 800a296:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a29a:	f7ff fac4 	bl	8009826 <LL_RCC_GetLPUARTClockSource>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a2a4:	d01a      	beq.n	800a2dc <UART_SetConfig+0x1c0>
 800a2a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a2aa:	d81b      	bhi.n	800a2e4 <UART_SetConfig+0x1c8>
 800a2ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2b0:	d00c      	beq.n	800a2cc <UART_SetConfig+0x1b0>
 800a2b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2b6:	d815      	bhi.n	800a2e4 <UART_SetConfig+0x1c8>
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d003      	beq.n	800a2c4 <UART_SetConfig+0x1a8>
 800a2bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2c0:	d008      	beq.n	800a2d4 <UART_SetConfig+0x1b8>
 800a2c2:	e00f      	b.n	800a2e4 <UART_SetConfig+0x1c8>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2ca:	e012      	b.n	800a2f2 <UART_SetConfig+0x1d6>
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2d2:	e00e      	b.n	800a2f2 <UART_SetConfig+0x1d6>
 800a2d4:	2304      	movs	r3, #4
 800a2d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2da:	e00a      	b.n	800a2f2 <UART_SetConfig+0x1d6>
 800a2dc:	2308      	movs	r3, #8
 800a2de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2e2:	e006      	b.n	800a2f2 <UART_SetConfig+0x1d6>
 800a2e4:	2310      	movs	r3, #16
 800a2e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2ea:	e002      	b.n	800a2f2 <UART_SetConfig+0x1d6>
 800a2ec:	2310      	movs	r3, #16
 800a2ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a2a      	ldr	r2, [pc, #168]	; (800a3a0 <UART_SetConfig+0x284>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	f040 80a4 	bne.w	800a446 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a2fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a302:	2b08      	cmp	r3, #8
 800a304:	d823      	bhi.n	800a34e <UART_SetConfig+0x232>
 800a306:	a201      	add	r2, pc, #4	; (adr r2, 800a30c <UART_SetConfig+0x1f0>)
 800a308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30c:	0800a331 	.word	0x0800a331
 800a310:	0800a34f 	.word	0x0800a34f
 800a314:	0800a339 	.word	0x0800a339
 800a318:	0800a34f 	.word	0x0800a34f
 800a31c:	0800a33f 	.word	0x0800a33f
 800a320:	0800a34f 	.word	0x0800a34f
 800a324:	0800a34f 	.word	0x0800a34f
 800a328:	0800a34f 	.word	0x0800a34f
 800a32c:	0800a347 	.word	0x0800a347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a330:	f7fd fce6 	bl	8007d00 <HAL_RCC_GetPCLK1Freq>
 800a334:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a336:	e010      	b.n	800a35a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a338:	4b1c      	ldr	r3, [pc, #112]	; (800a3ac <UART_SetConfig+0x290>)
 800a33a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a33c:	e00d      	b.n	800a35a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a33e:	f7fd fc2b 	bl	8007b98 <HAL_RCC_GetSysClockFreq>
 800a342:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a344:	e009      	b.n	800a35a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a34a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a34c:	e005      	b.n	800a35a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800a34e:	2300      	movs	r3, #0
 800a350:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a358:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f000 8137 	beq.w	800a5d0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a366:	4a12      	ldr	r2, [pc, #72]	; (800a3b0 <UART_SetConfig+0x294>)
 800a368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a36c:	461a      	mov	r2, r3
 800a36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a370:	fbb3 f3f2 	udiv	r3, r3, r2
 800a374:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	685a      	ldr	r2, [r3, #4]
 800a37a:	4613      	mov	r3, r2
 800a37c:	005b      	lsls	r3, r3, #1
 800a37e:	4413      	add	r3, r2
 800a380:	69ba      	ldr	r2, [r7, #24]
 800a382:	429a      	cmp	r2, r3
 800a384:	d305      	bcc.n	800a392 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a38c:	69ba      	ldr	r2, [r7, #24]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d910      	bls.n	800a3b4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a398:	e11a      	b.n	800a5d0 <UART_SetConfig+0x4b4>
 800a39a:	bf00      	nop
 800a39c:	cfff69f3 	.word	0xcfff69f3
 800a3a0:	40008000 	.word	0x40008000
 800a3a4:	40013800 	.word	0x40013800
 800a3a8:	40004400 	.word	0x40004400
 800a3ac:	00f42400 	.word	0x00f42400
 800a3b0:	0801f874 	.word	0x0801f874
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	60bb      	str	r3, [r7, #8]
 800a3ba:	60fa      	str	r2, [r7, #12]
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c0:	4a8e      	ldr	r2, [pc, #568]	; (800a5fc <UART_SetConfig+0x4e0>)
 800a3c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	603b      	str	r3, [r7, #0]
 800a3cc:	607a      	str	r2, [r7, #4]
 800a3ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a3d6:	f7f6 febf 	bl	8001158 <__aeabi_uldivmod>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	460b      	mov	r3, r1
 800a3de:	4610      	mov	r0, r2
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	f04f 0200 	mov.w	r2, #0
 800a3e6:	f04f 0300 	mov.w	r3, #0
 800a3ea:	020b      	lsls	r3, r1, #8
 800a3ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a3f0:	0202      	lsls	r2, r0, #8
 800a3f2:	6979      	ldr	r1, [r7, #20]
 800a3f4:	6849      	ldr	r1, [r1, #4]
 800a3f6:	0849      	lsrs	r1, r1, #1
 800a3f8:	2000      	movs	r0, #0
 800a3fa:	460c      	mov	r4, r1
 800a3fc:	4605      	mov	r5, r0
 800a3fe:	eb12 0804 	adds.w	r8, r2, r4
 800a402:	eb43 0905 	adc.w	r9, r3, r5
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	469a      	mov	sl, r3
 800a40e:	4693      	mov	fp, r2
 800a410:	4652      	mov	r2, sl
 800a412:	465b      	mov	r3, fp
 800a414:	4640      	mov	r0, r8
 800a416:	4649      	mov	r1, r9
 800a418:	f7f6 fe9e 	bl	8001158 <__aeabi_uldivmod>
 800a41c:	4602      	mov	r2, r0
 800a41e:	460b      	mov	r3, r1
 800a420:	4613      	mov	r3, r2
 800a422:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a424:	6a3b      	ldr	r3, [r7, #32]
 800a426:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a42a:	d308      	bcc.n	800a43e <UART_SetConfig+0x322>
 800a42c:	6a3b      	ldr	r3, [r7, #32]
 800a42e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a432:	d204      	bcs.n	800a43e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	6a3a      	ldr	r2, [r7, #32]
 800a43a:	60da      	str	r2, [r3, #12]
 800a43c:	e0c8      	b.n	800a5d0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800a43e:	2301      	movs	r3, #1
 800a440:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a444:	e0c4      	b.n	800a5d0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	69db      	ldr	r3, [r3, #28]
 800a44a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a44e:	d168      	bne.n	800a522 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800a450:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a454:	2b08      	cmp	r3, #8
 800a456:	d828      	bhi.n	800a4aa <UART_SetConfig+0x38e>
 800a458:	a201      	add	r2, pc, #4	; (adr r2, 800a460 <UART_SetConfig+0x344>)
 800a45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a45e:	bf00      	nop
 800a460:	0800a485 	.word	0x0800a485
 800a464:	0800a48d 	.word	0x0800a48d
 800a468:	0800a495 	.word	0x0800a495
 800a46c:	0800a4ab 	.word	0x0800a4ab
 800a470:	0800a49b 	.word	0x0800a49b
 800a474:	0800a4ab 	.word	0x0800a4ab
 800a478:	0800a4ab 	.word	0x0800a4ab
 800a47c:	0800a4ab 	.word	0x0800a4ab
 800a480:	0800a4a3 	.word	0x0800a4a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a484:	f7fd fc3c 	bl	8007d00 <HAL_RCC_GetPCLK1Freq>
 800a488:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a48a:	e014      	b.n	800a4b6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a48c:	f7fd fc4a 	bl	8007d24 <HAL_RCC_GetPCLK2Freq>
 800a490:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a492:	e010      	b.n	800a4b6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a494:	4b5a      	ldr	r3, [pc, #360]	; (800a600 <UART_SetConfig+0x4e4>)
 800a496:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a498:	e00d      	b.n	800a4b6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a49a:	f7fd fb7d 	bl	8007b98 <HAL_RCC_GetSysClockFreq>
 800a49e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a4a0:	e009      	b.n	800a4b6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a4a8:	e005      	b.n	800a4b6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a4b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f000 8089 	beq.w	800a5d0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c2:	4a4e      	ldr	r2, [pc, #312]	; (800a5fc <UART_SetConfig+0x4e0>)
 800a4c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4d0:	005a      	lsls	r2, r3, #1
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	085b      	lsrs	r3, r3, #1
 800a4d8:	441a      	add	r2, r3
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4e6:	6a3b      	ldr	r3, [r7, #32]
 800a4e8:	2b0f      	cmp	r3, #15
 800a4ea:	d916      	bls.n	800a51a <UART_SetConfig+0x3fe>
 800a4ec:	6a3b      	ldr	r3, [r7, #32]
 800a4ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4f2:	d212      	bcs.n	800a51a <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a4f4:	6a3b      	ldr	r3, [r7, #32]
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	f023 030f 	bic.w	r3, r3, #15
 800a4fc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a4fe:	6a3b      	ldr	r3, [r7, #32]
 800a500:	085b      	lsrs	r3, r3, #1
 800a502:	b29b      	uxth	r3, r3
 800a504:	f003 0307 	and.w	r3, r3, #7
 800a508:	b29a      	uxth	r2, r3
 800a50a:	8bfb      	ldrh	r3, [r7, #30]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	8bfa      	ldrh	r2, [r7, #30]
 800a516:	60da      	str	r2, [r3, #12]
 800a518:	e05a      	b.n	800a5d0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a520:	e056      	b.n	800a5d0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a522:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a526:	2b08      	cmp	r3, #8
 800a528:	d827      	bhi.n	800a57a <UART_SetConfig+0x45e>
 800a52a:	a201      	add	r2, pc, #4	; (adr r2, 800a530 <UART_SetConfig+0x414>)
 800a52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a530:	0800a555 	.word	0x0800a555
 800a534:	0800a55d 	.word	0x0800a55d
 800a538:	0800a565 	.word	0x0800a565
 800a53c:	0800a57b 	.word	0x0800a57b
 800a540:	0800a56b 	.word	0x0800a56b
 800a544:	0800a57b 	.word	0x0800a57b
 800a548:	0800a57b 	.word	0x0800a57b
 800a54c:	0800a57b 	.word	0x0800a57b
 800a550:	0800a573 	.word	0x0800a573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a554:	f7fd fbd4 	bl	8007d00 <HAL_RCC_GetPCLK1Freq>
 800a558:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a55a:	e014      	b.n	800a586 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a55c:	f7fd fbe2 	bl	8007d24 <HAL_RCC_GetPCLK2Freq>
 800a560:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a562:	e010      	b.n	800a586 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a564:	4b26      	ldr	r3, [pc, #152]	; (800a600 <UART_SetConfig+0x4e4>)
 800a566:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a568:	e00d      	b.n	800a586 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a56a:	f7fd fb15 	bl	8007b98 <HAL_RCC_GetSysClockFreq>
 800a56e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a570:	e009      	b.n	800a586 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a576:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a578:	e005      	b.n	800a586 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800a57a:	2300      	movs	r3, #0
 800a57c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a584:	bf00      	nop
    }

    if (pclk != 0U)
 800a586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d021      	beq.n	800a5d0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a590:	4a1a      	ldr	r2, [pc, #104]	; (800a5fc <UART_SetConfig+0x4e0>)
 800a592:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a596:	461a      	mov	r2, r3
 800a598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	085b      	lsrs	r3, r3, #1
 800a5a4:	441a      	add	r2, r3
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5b2:	6a3b      	ldr	r3, [r7, #32]
 800a5b4:	2b0f      	cmp	r3, #15
 800a5b6:	d908      	bls.n	800a5ca <UART_SetConfig+0x4ae>
 800a5b8:	6a3b      	ldr	r3, [r7, #32]
 800a5ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5be:	d204      	bcs.n	800a5ca <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	6a3a      	ldr	r2, [r7, #32]
 800a5c6:	60da      	str	r2, [r3, #12]
 800a5c8:	e002      	b.n	800a5d0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a5ec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3730      	adds	r7, #48	; 0x30
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5fa:	bf00      	nop
 800a5fc:	0801f874 	.word	0x0801f874
 800a600:	00f42400 	.word	0x00f42400

0800a604 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a610:	f003 0301 	and.w	r3, r3, #1
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00a      	beq.n	800a62e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	430a      	orrs	r2, r1
 800a62c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a632:	f003 0302 	and.w	r3, r3, #2
 800a636:	2b00      	cmp	r3, #0
 800a638:	d00a      	beq.n	800a650 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	430a      	orrs	r2, r1
 800a64e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a654:	f003 0304 	and.w	r3, r3, #4
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d00a      	beq.n	800a672 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	430a      	orrs	r2, r1
 800a670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a676:	f003 0308 	and.w	r3, r3, #8
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d00a      	beq.n	800a694 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	430a      	orrs	r2, r1
 800a692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a698:	f003 0310 	and.w	r3, r3, #16
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d00a      	beq.n	800a6b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	430a      	orrs	r2, r1
 800a6b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ba:	f003 0320 	and.w	r3, r3, #32
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00a      	beq.n	800a6d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	430a      	orrs	r2, r1
 800a6d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d01a      	beq.n	800a71a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	430a      	orrs	r2, r1
 800a6f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a702:	d10a      	bne.n	800a71a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	430a      	orrs	r2, r1
 800a718:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a71e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a722:	2b00      	cmp	r3, #0
 800a724:	d00a      	beq.n	800a73c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	430a      	orrs	r2, r1
 800a73a:	605a      	str	r2, [r3, #4]
  }
}
 800a73c:	bf00      	nop
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	bc80      	pop	{r7}
 800a744:	4770      	bx	lr

0800a746 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b086      	sub	sp, #24
 800a74a:	af02      	add	r7, sp, #8
 800a74c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a756:	f7f8 f8d5 	bl	8002904 <HAL_GetTick>
 800a75a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f003 0308 	and.w	r3, r3, #8
 800a766:	2b08      	cmp	r3, #8
 800a768:	d10e      	bne.n	800a788 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a76a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2200      	movs	r2, #0
 800a774:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 f82f 	bl	800a7dc <UART_WaitOnFlagUntilTimeout>
 800a77e:	4603      	mov	r3, r0
 800a780:	2b00      	cmp	r3, #0
 800a782:	d001      	beq.n	800a788 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a784:	2303      	movs	r3, #3
 800a786:	e025      	b.n	800a7d4 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f003 0304 	and.w	r3, r3, #4
 800a792:	2b04      	cmp	r3, #4
 800a794:	d10e      	bne.n	800a7b4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a796:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a79a:	9300      	str	r3, [sp, #0]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 f819 	bl	800a7dc <UART_WaitOnFlagUntilTimeout>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d001      	beq.n	800a7b4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	e00f      	b.n	800a7d4 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2220      	movs	r2, #32
 800a7b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2220      	movs	r2, #32
 800a7c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b09c      	sub	sp, #112	; 0x70
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	603b      	str	r3, [r7, #0]
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7ec:	e0a9      	b.n	800a942 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f4:	f000 80a5 	beq.w	800a942 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7f8:	f7f8 f884 	bl	8002904 <HAL_GetTick>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a804:	429a      	cmp	r2, r3
 800a806:	d302      	bcc.n	800a80e <UART_WaitOnFlagUntilTimeout+0x32>
 800a808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d140      	bne.n	800a890 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a816:	e853 3f00 	ldrex	r3, [r3]
 800a81a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a81c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a81e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a822:	667b      	str	r3, [r7, #100]	; 0x64
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	461a      	mov	r2, r3
 800a82a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a82c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a82e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a830:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a832:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a834:	e841 2300 	strex	r3, r2, [r1]
 800a838:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a83a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d1e6      	bne.n	800a80e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	3308      	adds	r3, #8
 800a846:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a84a:	e853 3f00 	ldrex	r3, [r3]
 800a84e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a852:	f023 0301 	bic.w	r3, r3, #1
 800a856:	663b      	str	r3, [r7, #96]	; 0x60
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	3308      	adds	r3, #8
 800a85e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a860:	64ba      	str	r2, [r7, #72]	; 0x48
 800a862:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a864:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a868:	e841 2300 	strex	r3, r2, [r1]
 800a86c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a86e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a870:	2b00      	cmp	r3, #0
 800a872:	d1e5      	bne.n	800a840 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2220      	movs	r2, #32
 800a878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2220      	movs	r2, #32
 800a880:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a88c:	2303      	movs	r3, #3
 800a88e:	e069      	b.n	800a964 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f003 0304 	and.w	r3, r3, #4
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d051      	beq.n	800a942 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	69db      	ldr	r3, [r3, #28]
 800a8a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8ac:	d149      	bne.n	800a942 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8b6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c0:	e853 3f00 	ldrex	r3, [r3]
 800a8c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a8cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8d6:	637b      	str	r3, [r7, #52]	; 0x34
 800a8d8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a8dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8de:	e841 2300 	strex	r3, r2, [r1]
 800a8e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d1e6      	bne.n	800a8b8 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	3308      	adds	r3, #8
 800a8f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	e853 3f00 	ldrex	r3, [r3]
 800a8f8:	613b      	str	r3, [r7, #16]
   return(result);
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	f023 0301 	bic.w	r3, r3, #1
 800a900:	66bb      	str	r3, [r7, #104]	; 0x68
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	3308      	adds	r3, #8
 800a908:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a90a:	623a      	str	r2, [r7, #32]
 800a90c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a90e:	69f9      	ldr	r1, [r7, #28]
 800a910:	6a3a      	ldr	r2, [r7, #32]
 800a912:	e841 2300 	strex	r3, r2, [r1]
 800a916:	61bb      	str	r3, [r7, #24]
   return(result);
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d1e5      	bne.n	800a8ea <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2220      	movs	r2, #32
 800a922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2220      	movs	r2, #32
 800a92a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2220      	movs	r2, #32
 800a932:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2200      	movs	r2, #0
 800a93a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a93e:	2303      	movs	r3, #3
 800a940:	e010      	b.n	800a964 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	69da      	ldr	r2, [r3, #28]
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	4013      	ands	r3, r2
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	429a      	cmp	r2, r3
 800a950:	bf0c      	ite	eq
 800a952:	2301      	moveq	r3, #1
 800a954:	2300      	movne	r3, #0
 800a956:	b2db      	uxtb	r3, r3
 800a958:	461a      	mov	r2, r3
 800a95a:	79fb      	ldrb	r3, [r7, #7]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	f43f af46 	beq.w	800a7ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3770      	adds	r7, #112	; 0x70
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b0a3      	sub	sp, #140	; 0x8c
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	4613      	mov	r3, r2
 800a978:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	68ba      	ldr	r2, [r7, #8]
 800a97e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	88fa      	ldrh	r2, [r7, #6]
 800a984:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	88fa      	ldrh	r2, [r7, #6]
 800a98c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2200      	movs	r2, #0
 800a994:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a99e:	d10e      	bne.n	800a9be <UART_Start_Receive_IT+0x52>
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	691b      	ldr	r3, [r3, #16]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d105      	bne.n	800a9b4 <UART_Start_Receive_IT+0x48>
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a9ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a9b2:	e02d      	b.n	800aa10 <UART_Start_Receive_IT+0xa4>
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	22ff      	movs	r2, #255	; 0xff
 800a9b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a9bc:	e028      	b.n	800aa10 <UART_Start_Receive_IT+0xa4>
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d10d      	bne.n	800a9e2 <UART_Start_Receive_IT+0x76>
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d104      	bne.n	800a9d8 <UART_Start_Receive_IT+0x6c>
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	22ff      	movs	r2, #255	; 0xff
 800a9d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a9d6:	e01b      	b.n	800aa10 <UART_Start_Receive_IT+0xa4>
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	227f      	movs	r2, #127	; 0x7f
 800a9dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a9e0:	e016      	b.n	800aa10 <UART_Start_Receive_IT+0xa4>
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9ea:	d10d      	bne.n	800aa08 <UART_Start_Receive_IT+0x9c>
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	691b      	ldr	r3, [r3, #16]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d104      	bne.n	800a9fe <UART_Start_Receive_IT+0x92>
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	227f      	movs	r2, #127	; 0x7f
 800a9f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a9fc:	e008      	b.n	800aa10 <UART_Start_Receive_IT+0xa4>
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	223f      	movs	r2, #63	; 0x3f
 800aa02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800aa06:	e003      	b.n	800aa10 <UART_Start_Receive_IT+0xa4>
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2200      	movs	r2, #0
 800aa14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2222      	movs	r2, #34	; 0x22
 800aa1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	3308      	adds	r3, #8
 800aa26:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa2a:	e853 3f00 	ldrex	r3, [r3]
 800aa2e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800aa30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa32:	f043 0301 	orr.w	r3, r3, #1
 800aa36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	3308      	adds	r3, #8
 800aa40:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800aa44:	673a      	str	r2, [r7, #112]	; 0x70
 800aa46:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa48:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800aa4a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800aa4c:	e841 2300 	strex	r3, r2, [r1]
 800aa50:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800aa52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1e3      	bne.n	800aa20 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa60:	d153      	bne.n	800ab0a <UART_Start_Receive_IT+0x19e>
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aa68:	88fa      	ldrh	r2, [r7, #6]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d34d      	bcc.n	800ab0a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa76:	d107      	bne.n	800aa88 <UART_Start_Receive_IT+0x11c>
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d103      	bne.n	800aa88 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	4a4a      	ldr	r2, [pc, #296]	; (800abac <UART_Start_Receive_IT+0x240>)
 800aa84:	671a      	str	r2, [r3, #112]	; 0x70
 800aa86:	e002      	b.n	800aa8e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	4a49      	ldr	r2, [pc, #292]	; (800abb0 <UART_Start_Receive_IT+0x244>)
 800aa8c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2200      	movs	r2, #0
 800aa92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d01a      	beq.n	800aad4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaa6:	e853 3f00 	ldrex	r3, [r3]
 800aaaa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aaac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aab2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	461a      	mov	r2, r3
 800aabc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aac0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aac2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aac6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aac8:	e841 2300 	strex	r3, r2, [r1]
 800aacc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d1e4      	bne.n	800aa9e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	3308      	adds	r3, #8
 800aada:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aadc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aade:	e853 3f00 	ldrex	r3, [r3]
 800aae2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aaea:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	3308      	adds	r3, #8
 800aaf2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800aaf4:	64ba      	str	r2, [r7, #72]	; 0x48
 800aaf6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aafa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aafc:	e841 2300 	strex	r3, r2, [r1]
 800ab00:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ab02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1e5      	bne.n	800aad4 <UART_Start_Receive_IT+0x168>
 800ab08:	e04a      	b.n	800aba0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab12:	d107      	bne.n	800ab24 <UART_Start_Receive_IT+0x1b8>
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	691b      	ldr	r3, [r3, #16]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d103      	bne.n	800ab24 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	4a25      	ldr	r2, [pc, #148]	; (800abb4 <UART_Start_Receive_IT+0x248>)
 800ab20:	671a      	str	r2, [r3, #112]	; 0x70
 800ab22:	e002      	b.n	800ab2a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	4a24      	ldr	r2, [pc, #144]	; (800abb8 <UART_Start_Receive_IT+0x24c>)
 800ab28:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	691b      	ldr	r3, [r3, #16]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d019      	beq.n	800ab6e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab42:	e853 3f00 	ldrex	r3, [r3]
 800ab46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ab4e:	677b      	str	r3, [r7, #116]	; 0x74
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	461a      	mov	r2, r3
 800ab56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab58:	637b      	str	r3, [r7, #52]	; 0x34
 800ab5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab60:	e841 2300 	strex	r3, r2, [r1]
 800ab64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1e6      	bne.n	800ab3a <UART_Start_Receive_IT+0x1ce>
 800ab6c:	e018      	b.n	800aba0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	e853 3f00 	ldrex	r3, [r3]
 800ab7a:	613b      	str	r3, [r7, #16]
   return(result);
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	f043 0320 	orr.w	r3, r3, #32
 800ab82:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	461a      	mov	r2, r3
 800ab8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab8c:	623b      	str	r3, [r7, #32]
 800ab8e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab90:	69f9      	ldr	r1, [r7, #28]
 800ab92:	6a3a      	ldr	r2, [r7, #32]
 800ab94:	e841 2300 	strex	r3, r2, [r1]
 800ab98:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1e6      	bne.n	800ab6e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	378c      	adds	r7, #140	; 0x8c
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bc80      	pop	{r7}
 800abaa:	4770      	bx	lr
 800abac:	0800b725 	.word	0x0800b725
 800abb0:	0800b42d 	.word	0x0800b42d
 800abb4:	0800b2cd 	.word	0x0800b2cd
 800abb8:	0800b16d 	.word	0x0800b16d

0800abbc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b096      	sub	sp, #88	; 0x58
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	4613      	mov	r3, r2
 800abc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	88fa      	ldrh	r2, [r7, #6]
 800abd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2200      	movs	r2, #0
 800abdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2222      	movs	r2, #34	; 0x22
 800abe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abec:	2b00      	cmp	r3, #0
 800abee:	d02c      	beq.n	800ac4a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abf4:	4a42      	ldr	r2, [pc, #264]	; (800ad00 <UART_Start_Receive_DMA+0x144>)
 800abf6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abfc:	4a41      	ldr	r2, [pc, #260]	; (800ad04 <UART_Start_Receive_DMA+0x148>)
 800abfe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac04:	4a40      	ldr	r2, [pc, #256]	; (800ad08 <UART_Start_Receive_DMA+0x14c>)
 800ac06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	3324      	adds	r3, #36	; 0x24
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac20:	461a      	mov	r2, r3
 800ac22:	88fb      	ldrh	r3, [r7, #6]
 800ac24:	f7fa fa28 	bl	8005078 <HAL_DMA_Start_IT>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00d      	beq.n	800ac4a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2210      	movs	r2, #16
 800ac32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2220      	movs	r2, #32
 800ac42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	e055      	b.n	800acf6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	691b      	ldr	r3, [r3, #16]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d018      	beq.n	800ac8c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac62:	e853 3f00 	ldrex	r3, [r3]
 800ac66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac6e:	657b      	str	r3, [r7, #84]	; 0x54
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	461a      	mov	r2, r3
 800ac76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac78:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac7a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac80:	e841 2300 	strex	r3, r2, [r1]
 800ac84:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ac86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d1e6      	bne.n	800ac5a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	3308      	adds	r3, #8
 800ac92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac96:	e853 3f00 	ldrex	r3, [r3]
 800ac9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9e:	f043 0301 	orr.w	r3, r3, #1
 800aca2:	653b      	str	r3, [r7, #80]	; 0x50
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	3308      	adds	r3, #8
 800acaa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800acac:	637a      	str	r2, [r7, #52]	; 0x34
 800acae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800acb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acb4:	e841 2300 	strex	r3, r2, [r1]
 800acb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800acba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d1e5      	bne.n	800ac8c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	3308      	adds	r3, #8
 800acc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	e853 3f00 	ldrex	r3, [r3]
 800acce:	613b      	str	r3, [r7, #16]
   return(result);
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	3308      	adds	r3, #8
 800acde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ace0:	623a      	str	r2, [r7, #32]
 800ace2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace4:	69f9      	ldr	r1, [r7, #28]
 800ace6:	6a3a      	ldr	r2, [r7, #32]
 800ace8:	e841 2300 	strex	r3, r2, [r1]
 800acec:	61bb      	str	r3, [r7, #24]
   return(result);
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1e5      	bne.n	800acc0 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3758      	adds	r7, #88	; 0x58
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	0800af0d 	.word	0x0800af0d
 800ad04:	0800b033 	.word	0x0800b033
 800ad08:	0800b06b 	.word	0x0800b06b

0800ad0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b08f      	sub	sp, #60	; 0x3c
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad1a:	6a3b      	ldr	r3, [r7, #32]
 800ad1c:	e853 3f00 	ldrex	r3, [r3]
 800ad20:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ad28:	637b      	str	r3, [r7, #52]	; 0x34
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	461a      	mov	r2, r3
 800ad30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad32:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad34:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad3a:	e841 2300 	strex	r3, r2, [r1]
 800ad3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1e6      	bne.n	800ad14 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	3308      	adds	r3, #8
 800ad4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	e853 3f00 	ldrex	r3, [r3]
 800ad54:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ad5c:	633b      	str	r3, [r7, #48]	; 0x30
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	3308      	adds	r3, #8
 800ad64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad66:	61ba      	str	r2, [r7, #24]
 800ad68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad6a:	6979      	ldr	r1, [r7, #20]
 800ad6c:	69ba      	ldr	r2, [r7, #24]
 800ad6e:	e841 2300 	strex	r3, r2, [r1]
 800ad72:	613b      	str	r3, [r7, #16]
   return(result);
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d1e5      	bne.n	800ad46 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2220      	movs	r2, #32
 800ad7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800ad82:	bf00      	nop
 800ad84:	373c      	adds	r7, #60	; 0x3c
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bc80      	pop	{r7}
 800ad8a:	4770      	bx	lr

0800ad8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b095      	sub	sp, #84	; 0x54
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad9c:	e853 3f00 	ldrex	r3, [r3]
 800ada0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ada2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ada8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	461a      	mov	r2, r3
 800adb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adb2:	643b      	str	r3, [r7, #64]	; 0x40
 800adb4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800adb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800adba:	e841 2300 	strex	r3, r2, [r1]
 800adbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800adc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d1e6      	bne.n	800ad94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	3308      	adds	r3, #8
 800adcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adce:	6a3b      	ldr	r3, [r7, #32]
 800add0:	e853 3f00 	ldrex	r3, [r3]
 800add4:	61fb      	str	r3, [r7, #28]
   return(result);
 800add6:	69fb      	ldr	r3, [r7, #28]
 800add8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800addc:	f023 0301 	bic.w	r3, r3, #1
 800ade0:	64bb      	str	r3, [r7, #72]	; 0x48
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	3308      	adds	r3, #8
 800ade8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adea:	62fa      	str	r2, [r7, #44]	; 0x2c
 800adec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800adf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adf2:	e841 2300 	strex	r3, r2, [r1]
 800adf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800adf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d1e3      	bne.n	800adc6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d118      	bne.n	800ae38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	e853 3f00 	ldrex	r3, [r3]
 800ae12:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	f023 0310 	bic.w	r3, r3, #16
 800ae1a:	647b      	str	r3, [r7, #68]	; 0x44
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	461a      	mov	r2, r3
 800ae22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae24:	61bb      	str	r3, [r7, #24]
 800ae26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae28:	6979      	ldr	r1, [r7, #20]
 800ae2a:	69ba      	ldr	r2, [r7, #24]
 800ae2c:	e841 2300 	strex	r3, r2, [r1]
 800ae30:	613b      	str	r3, [r7, #16]
   return(result);
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d1e6      	bne.n	800ae06 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2220      	movs	r2, #32
 800ae3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ae4c:	bf00      	nop
 800ae4e:	3754      	adds	r7, #84	; 0x54
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bc80      	pop	{r7}
 800ae54:	4770      	bx	lr

0800ae56 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b090      	sub	sp, #64	; 0x40
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae62:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f003 0320 	and.w	r3, r3, #32
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d137      	bne.n	800aee2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800ae72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae74:	2200      	movs	r2, #0
 800ae76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	3308      	adds	r3, #8
 800ae80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae84:	e853 3f00 	ldrex	r3, [r3]
 800ae88:	623b      	str	r3, [r7, #32]
   return(result);
 800ae8a:	6a3b      	ldr	r3, [r7, #32]
 800ae8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae90:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	3308      	adds	r3, #8
 800ae98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae9a:	633a      	str	r2, [r7, #48]	; 0x30
 800ae9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aea2:	e841 2300 	strex	r3, r2, [r1]
 800aea6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d1e5      	bne.n	800ae7a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aeae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	e853 3f00 	ldrex	r3, [r3]
 800aeba:	60fb      	str	r3, [r7, #12]
   return(result);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aec2:	637b      	str	r3, [r7, #52]	; 0x34
 800aec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	461a      	mov	r2, r3
 800aeca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aecc:	61fb      	str	r3, [r7, #28]
 800aece:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed0:	69b9      	ldr	r1, [r7, #24]
 800aed2:	69fa      	ldr	r2, [r7, #28]
 800aed4:	e841 2300 	strex	r3, r2, [r1]
 800aed8:	617b      	str	r3, [r7, #20]
   return(result);
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d1e6      	bne.n	800aeae <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aee0:	e002      	b.n	800aee8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800aee2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aee4:	f7f8 fc46 	bl	8003774 <HAL_UART_TxCpltCallback>
}
 800aee8:	bf00      	nop
 800aeea:	3740      	adds	r7, #64	; 0x40
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aefc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	f7ff f8f0 	bl	800a0e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af04:	bf00      	nop
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b09c      	sub	sp, #112	; 0x70
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af18:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f003 0320 	and.w	r3, r3, #32
 800af24:	2b00      	cmp	r3, #0
 800af26:	d171      	bne.n	800b00c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800af28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af2a:	2200      	movs	r2, #0
 800af2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af38:	e853 3f00 	ldrex	r3, [r3]
 800af3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800af3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af44:	66bb      	str	r3, [r7, #104]	; 0x68
 800af46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	461a      	mov	r2, r3
 800af4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af4e:	65bb      	str	r3, [r7, #88]	; 0x58
 800af50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800af54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af56:	e841 2300 	strex	r3, r2, [r1]
 800af5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800af5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d1e6      	bne.n	800af30 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	3308      	adds	r3, #8
 800af68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6c:	e853 3f00 	ldrex	r3, [r3]
 800af70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af74:	f023 0301 	bic.w	r3, r3, #1
 800af78:	667b      	str	r3, [r7, #100]	; 0x64
 800af7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	3308      	adds	r3, #8
 800af80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800af82:	647a      	str	r2, [r7, #68]	; 0x44
 800af84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af8a:	e841 2300 	strex	r3, r2, [r1]
 800af8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af92:	2b00      	cmp	r3, #0
 800af94:	d1e5      	bne.n	800af62 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	3308      	adds	r3, #8
 800af9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa0:	e853 3f00 	ldrex	r3, [r3]
 800afa4:	623b      	str	r3, [r7, #32]
   return(result);
 800afa6:	6a3b      	ldr	r3, [r7, #32]
 800afa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afac:	663b      	str	r3, [r7, #96]	; 0x60
 800afae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	3308      	adds	r3, #8
 800afb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800afb6:	633a      	str	r2, [r7, #48]	; 0x30
 800afb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afbe:	e841 2300 	strex	r3, r2, [r1]
 800afc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800afc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1e5      	bne.n	800af96 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800afca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afcc:	2220      	movs	r2, #32
 800afce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d118      	bne.n	800b00c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	e853 3f00 	ldrex	r3, [r3]
 800afe6:	60fb      	str	r3, [r7, #12]
   return(result);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f023 0310 	bic.w	r3, r3, #16
 800afee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	461a      	mov	r2, r3
 800aff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aff8:	61fb      	str	r3, [r7, #28]
 800affa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800affc:	69b9      	ldr	r1, [r7, #24]
 800affe:	69fa      	ldr	r2, [r7, #28]
 800b000:	e841 2300 	strex	r3, r2, [r1]
 800b004:	617b      	str	r3, [r7, #20]
   return(result);
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1e6      	bne.n	800afda <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b00c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b00e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b010:	2b01      	cmp	r3, #1
 800b012:	d107      	bne.n	800b024 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b016:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b01a:	4619      	mov	r1, r3
 800b01c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b01e:	f7f6 ffc1 	bl	8001fa4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b022:	e002      	b.n	800b02a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b024:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b026:	f7f8 fbbb 	bl	80037a0 <HAL_UART_RxCpltCallback>
}
 800b02a:	bf00      	nop
 800b02c:	3770      	adds	r7, #112	; 0x70
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b084      	sub	sp, #16
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b03e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b044:	2b01      	cmp	r3, #1
 800b046:	d109      	bne.n	800b05c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b04e:	085b      	lsrs	r3, r3, #1
 800b050:	b29b      	uxth	r3, r3
 800b052:	4619      	mov	r1, r3
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f7f6 ffa5 	bl	8001fa4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b05a:	e002      	b.n	800b062 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800b05c:	68f8      	ldr	r0, [r7, #12]
 800b05e:	f7ff f84a 	bl	800a0f6 <HAL_UART_RxHalfCpltCallback>
}
 800b062:	bf00      	nop
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b086      	sub	sp, #24
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b076:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b07e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b086:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b092:	2b80      	cmp	r3, #128	; 0x80
 800b094:	d109      	bne.n	800b0aa <UART_DMAError+0x40>
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	2b21      	cmp	r3, #33	; 0x21
 800b09a:	d106      	bne.n	800b0aa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b0a4:	6978      	ldr	r0, [r7, #20]
 800b0a6:	f7ff fe31 	bl	800ad0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0b4:	2b40      	cmp	r3, #64	; 0x40
 800b0b6:	d109      	bne.n	800b0cc <UART_DMAError+0x62>
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2b22      	cmp	r3, #34	; 0x22
 800b0bc:	d106      	bne.n	800b0cc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b0c6:	6978      	ldr	r0, [r7, #20]
 800b0c8:	f7ff fe60 	bl	800ad8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0d2:	f043 0210 	orr.w	r2, r3, #16
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b0dc:	6978      	ldr	r0, [r7, #20]
 800b0de:	f7ff f813 	bl	800a108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0e2:	bf00      	nop
 800b0e4:	3718      	adds	r7, #24
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b084      	sub	sp, #16
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2200      	movs	r2, #0
 800b104:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f7fe fffd 	bl	800a108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b10e:	bf00      	nop
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b116:	b580      	push	{r7, lr}
 800b118:	b088      	sub	sp, #32
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	e853 3f00 	ldrex	r3, [r3]
 800b12a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b132:	61fb      	str	r3, [r7, #28]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	461a      	mov	r2, r3
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	61bb      	str	r3, [r7, #24]
 800b13e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b140:	6979      	ldr	r1, [r7, #20]
 800b142:	69ba      	ldr	r2, [r7, #24]
 800b144:	e841 2300 	strex	r3, r2, [r1]
 800b148:	613b      	str	r3, [r7, #16]
   return(result);
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d1e6      	bne.n	800b11e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2220      	movs	r2, #32
 800b154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f7f8 fb08 	bl	8003774 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b164:	bf00      	nop
 800b166:	3720      	adds	r7, #32
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b096      	sub	sp, #88	; 0x58
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b17a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b184:	2b22      	cmp	r3, #34	; 0x22
 800b186:	f040 8095 	bne.w	800b2b4 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b190:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b194:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800b198:	b2d9      	uxtb	r1, r3
 800b19a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b19e:	b2da      	uxtb	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1a4:	400a      	ands	r2, r1
 800b1a6:	b2d2      	uxtb	r2, r2
 800b1a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1ae:	1c5a      	adds	r2, r3, #1
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d178      	bne.n	800b2c4 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1da:	e853 3f00 	ldrex	r3, [r3]
 800b1de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b1e6:	653b      	str	r3, [r7, #80]	; 0x50
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1f0:	647b      	str	r3, [r7, #68]	; 0x44
 800b1f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b1f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1f8:	e841 2300 	strex	r3, r2, [r1]
 800b1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b1fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b200:	2b00      	cmp	r3, #0
 800b202:	d1e6      	bne.n	800b1d2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	3308      	adds	r3, #8
 800b20a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20e:	e853 3f00 	ldrex	r3, [r3]
 800b212:	623b      	str	r3, [r7, #32]
   return(result);
 800b214:	6a3b      	ldr	r3, [r7, #32]
 800b216:	f023 0301 	bic.w	r3, r3, #1
 800b21a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	3308      	adds	r3, #8
 800b222:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b224:	633a      	str	r2, [r7, #48]	; 0x30
 800b226:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b228:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b22a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b22c:	e841 2300 	strex	r3, r2, [r1]
 800b230:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b234:	2b00      	cmp	r3, #0
 800b236:	d1e5      	bne.n	800b204 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2220      	movs	r2, #32
 800b23c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d12e      	bne.n	800b2ac <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	e853 3f00 	ldrex	r3, [r3]
 800b260:	60fb      	str	r3, [r7, #12]
   return(result);
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f023 0310 	bic.w	r3, r3, #16
 800b268:	64bb      	str	r3, [r7, #72]	; 0x48
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	461a      	mov	r2, r3
 800b270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b272:	61fb      	str	r3, [r7, #28]
 800b274:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b276:	69b9      	ldr	r1, [r7, #24]
 800b278:	69fa      	ldr	r2, [r7, #28]
 800b27a:	e841 2300 	strex	r3, r2, [r1]
 800b27e:	617b      	str	r3, [r7, #20]
   return(result);
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d1e6      	bne.n	800b254 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	69db      	ldr	r3, [r3, #28]
 800b28c:	f003 0310 	and.w	r3, r3, #16
 800b290:	2b10      	cmp	r3, #16
 800b292:	d103      	bne.n	800b29c <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2210      	movs	r2, #16
 800b29a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f7f6 fe7d 	bl	8001fa4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b2aa:	e00b      	b.n	800b2c4 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f7f8 fa77 	bl	80037a0 <HAL_UART_RxCpltCallback>
}
 800b2b2:	e007      	b.n	800b2c4 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	699a      	ldr	r2, [r3, #24]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f042 0208 	orr.w	r2, r2, #8
 800b2c2:	619a      	str	r2, [r3, #24]
}
 800b2c4:	bf00      	nop
 800b2c6:	3758      	adds	r7, #88	; 0x58
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b096      	sub	sp, #88	; 0x58
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b2da:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2e4:	2b22      	cmp	r3, #34	; 0x22
 800b2e6:	f040 8095 	bne.w	800b414 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2f8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800b2fa:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b2fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b302:	4013      	ands	r3, r2
 800b304:	b29a      	uxth	r2, r3
 800b306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b308:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b30e:	1c9a      	adds	r2, r3, #2
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	3b01      	subs	r3, #1
 800b31e:	b29a      	uxth	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d178      	bne.n	800b424 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b33a:	e853 3f00 	ldrex	r3, [r3]
 800b33e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b342:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b346:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	461a      	mov	r2, r3
 800b34e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b350:	643b      	str	r3, [r7, #64]	; 0x40
 800b352:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b354:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b356:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b358:	e841 2300 	strex	r3, r2, [r1]
 800b35c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b360:	2b00      	cmp	r3, #0
 800b362:	d1e6      	bne.n	800b332 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	3308      	adds	r3, #8
 800b36a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36c:	6a3b      	ldr	r3, [r7, #32]
 800b36e:	e853 3f00 	ldrex	r3, [r3]
 800b372:	61fb      	str	r3, [r7, #28]
   return(result);
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	f023 0301 	bic.w	r3, r3, #1
 800b37a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	3308      	adds	r3, #8
 800b382:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b384:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b386:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b38a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b38c:	e841 2300 	strex	r3, r2, [r1]
 800b390:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1e5      	bne.n	800b364 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2220      	movs	r2, #32
 800b39c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d12e      	bne.n	800b40c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	e853 3f00 	ldrex	r3, [r3]
 800b3c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	f023 0310 	bic.w	r3, r3, #16
 800b3c8:	647b      	str	r3, [r7, #68]	; 0x44
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3d2:	61bb      	str	r3, [r7, #24]
 800b3d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d6:	6979      	ldr	r1, [r7, #20]
 800b3d8:	69ba      	ldr	r2, [r7, #24]
 800b3da:	e841 2300 	strex	r3, r2, [r1]
 800b3de:	613b      	str	r3, [r7, #16]
   return(result);
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d1e6      	bne.n	800b3b4 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	69db      	ldr	r3, [r3, #28]
 800b3ec:	f003 0310 	and.w	r3, r3, #16
 800b3f0:	2b10      	cmp	r3, #16
 800b3f2:	d103      	bne.n	800b3fc <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2210      	movs	r2, #16
 800b3fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b402:	4619      	mov	r1, r3
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f7f6 fdcd 	bl	8001fa4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b40a:	e00b      	b.n	800b424 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f7f8 f9c7 	bl	80037a0 <HAL_UART_RxCpltCallback>
}
 800b412:	e007      	b.n	800b424 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	699a      	ldr	r2, [r3, #24]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f042 0208 	orr.w	r2, r2, #8
 800b422:	619a      	str	r2, [r3, #24]
}
 800b424:	bf00      	nop
 800b426:	3758      	adds	r7, #88	; 0x58
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b0a6      	sub	sp, #152	; 0x98
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b43a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	69db      	ldr	r3, [r3, #28]
 800b444:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	689b      	ldr	r3, [r3, #8]
 800b458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b462:	2b22      	cmp	r3, #34	; 0x22
 800b464:	f040 814f 	bne.w	800b706 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b46e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b472:	e0f6      	b.n	800b662 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b47e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b482:	b2d9      	uxtb	r1, r3
 800b484:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800b488:	b2da      	uxtb	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b48e:	400a      	ands	r2, r1
 800b490:	b2d2      	uxtb	r2, r2
 800b492:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b498:	1c5a      	adds	r2, r3, #1
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	3b01      	subs	r3, #1
 800b4a8:	b29a      	uxth	r2, r3
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	69db      	ldr	r3, [r3, #28]
 800b4b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b4ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b4be:	f003 0307 	and.w	r3, r3, #7
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d053      	beq.n	800b56e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b4c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b4ca:	f003 0301 	and.w	r3, r3, #1
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d011      	beq.n	800b4f6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800b4d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00b      	beq.n	800b4f6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4ec:	f043 0201 	orr.w	r2, r3, #1
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b4f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b4fa:	f003 0302 	and.w	r3, r3, #2
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d011      	beq.n	800b526 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b502:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b506:	f003 0301 	and.w	r3, r3, #1
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00b      	beq.n	800b526 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2202      	movs	r2, #2
 800b514:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b51c:	f043 0204 	orr.w	r2, r3, #4
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b526:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b52a:	f003 0304 	and.w	r3, r3, #4
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d011      	beq.n	800b556 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b532:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b536:	f003 0301 	and.w	r3, r3, #1
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d00b      	beq.n	800b556 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	2204      	movs	r2, #4
 800b544:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b54c:	f043 0202 	orr.w	r2, r3, #2
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d006      	beq.n	800b56e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f7fe fdd1 	bl	800a108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2200      	movs	r2, #0
 800b56a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b574:	b29b      	uxth	r3, r3
 800b576:	2b00      	cmp	r3, #0
 800b578:	d173      	bne.n	800b662 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b582:	e853 3f00 	ldrex	r3, [r3]
 800b586:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b58a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b58e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	461a      	mov	r2, r3
 800b598:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b59c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b59e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b5a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b5a4:	e841 2300 	strex	r3, r2, [r1]
 800b5a8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b5aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d1e4      	bne.n	800b57a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	3308      	adds	r3, #8
 800b5b6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5ba:	e853 3f00 	ldrex	r3, [r3]
 800b5be:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b5c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5c6:	f023 0301 	bic.w	r3, r3, #1
 800b5ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	3308      	adds	r3, #8
 800b5d2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b5d4:	657a      	str	r2, [r7, #84]	; 0x54
 800b5d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b5da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b5dc:	e841 2300 	strex	r3, r2, [r1]
 800b5e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b5e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d1e3      	bne.n	800b5b0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2220      	movs	r2, #32
 800b5ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d12e      	bne.n	800b65c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2200      	movs	r2, #0
 800b602:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b60c:	e853 3f00 	ldrex	r3, [r3]
 800b610:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b614:	f023 0310 	bic.w	r3, r3, #16
 800b618:	67bb      	str	r3, [r7, #120]	; 0x78
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	461a      	mov	r2, r3
 800b620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b622:	643b      	str	r3, [r7, #64]	; 0x40
 800b624:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b626:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b628:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b62a:	e841 2300 	strex	r3, r2, [r1]
 800b62e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b632:	2b00      	cmp	r3, #0
 800b634:	d1e6      	bne.n	800b604 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	69db      	ldr	r3, [r3, #28]
 800b63c:	f003 0310 	and.w	r3, r3, #16
 800b640:	2b10      	cmp	r3, #16
 800b642:	d103      	bne.n	800b64c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2210      	movs	r2, #16
 800b64a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b652:	4619      	mov	r1, r3
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f7f6 fca5 	bl	8001fa4 <HAL_UARTEx_RxEventCallback>
 800b65a:	e002      	b.n	800b662 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f7f8 f89f 	bl	80037a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b662:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b666:	2b00      	cmp	r3, #0
 800b668:	d006      	beq.n	800b678 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800b66a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b66e:	f003 0320 	and.w	r3, r3, #32
 800b672:	2b00      	cmp	r3, #0
 800b674:	f47f aefe 	bne.w	800b474 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b67e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b682:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800b686:	2b00      	cmp	r3, #0
 800b688:	d045      	beq.n	800b716 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b690:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b694:	429a      	cmp	r2, r3
 800b696:	d23e      	bcs.n	800b716 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	3308      	adds	r3, #8
 800b69e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a0:	6a3b      	ldr	r3, [r7, #32]
 800b6a2:	e853 3f00 	ldrex	r3, [r3]
 800b6a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6ae:	673b      	str	r3, [r7, #112]	; 0x70
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	3308      	adds	r3, #8
 800b6b6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b6b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6c0:	e841 2300 	strex	r3, r2, [r1]
 800b6c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d1e5      	bne.n	800b698 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4a14      	ldr	r2, [pc, #80]	; (800b720 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800b6d0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	e853 3f00 	ldrex	r3, [r3]
 800b6de:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	f043 0320 	orr.w	r3, r3, #32
 800b6e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6f0:	61bb      	str	r3, [r7, #24]
 800b6f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f4:	6979      	ldr	r1, [r7, #20]
 800b6f6:	69ba      	ldr	r2, [r7, #24]
 800b6f8:	e841 2300 	strex	r3, r2, [r1]
 800b6fc:	613b      	str	r3, [r7, #16]
   return(result);
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d1e6      	bne.n	800b6d2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b704:	e007      	b.n	800b716 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	699a      	ldr	r2, [r3, #24]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f042 0208 	orr.w	r2, r2, #8
 800b714:	619a      	str	r2, [r3, #24]
}
 800b716:	bf00      	nop
 800b718:	3798      	adds	r7, #152	; 0x98
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	0800b16d 	.word	0x0800b16d

0800b724 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b0a8      	sub	sp, #160	; 0xa0
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b732:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	69db      	ldr	r3, [r3, #28]
 800b73c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b75a:	2b22      	cmp	r3, #34	; 0x22
 800b75c:	f040 8153 	bne.w	800ba06 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b766:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b76a:	e0fa      	b.n	800b962 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b772:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b77a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800b77e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800b782:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800b786:	4013      	ands	r3, r2
 800b788:	b29a      	uxth	r2, r3
 800b78a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b78e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b794:	1c9a      	adds	r2, r3, #2
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	3b01      	subs	r3, #1
 800b7a4:	b29a      	uxth	r2, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	69db      	ldr	r3, [r3, #28]
 800b7b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b7b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b7ba:	f003 0307 	and.w	r3, r3, #7
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d053      	beq.n	800b86a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b7c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b7c6:	f003 0301 	and.w	r3, r3, #1
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d011      	beq.n	800b7f2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b7ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b7d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d00b      	beq.n	800b7f2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	2201      	movs	r2, #1
 800b7e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7e8:	f043 0201 	orr.w	r2, r3, #1
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b7f6:	f003 0302 	and.w	r3, r3, #2
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d011      	beq.n	800b822 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b7fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b802:	f003 0301 	and.w	r3, r3, #1
 800b806:	2b00      	cmp	r3, #0
 800b808:	d00b      	beq.n	800b822 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2202      	movs	r2, #2
 800b810:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b818:	f043 0204 	orr.w	r2, r3, #4
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b822:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b826:	f003 0304 	and.w	r3, r3, #4
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d011      	beq.n	800b852 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b82e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b832:	f003 0301 	and.w	r3, r3, #1
 800b836:	2b00      	cmp	r3, #0
 800b838:	d00b      	beq.n	800b852 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2204      	movs	r2, #4
 800b840:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b848:	f043 0202 	orr.w	r2, r3, #2
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d006      	beq.n	800b86a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f7fe fc53 	bl	800a108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b870:	b29b      	uxth	r3, r3
 800b872:	2b00      	cmp	r3, #0
 800b874:	d175      	bne.n	800b962 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b87c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b87e:	e853 3f00 	ldrex	r3, [r3]
 800b882:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b886:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b88a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	461a      	mov	r2, r3
 800b894:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b898:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b89a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b89e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b8a0:	e841 2300 	strex	r3, r2, [r1]
 800b8a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b8a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d1e4      	bne.n	800b876 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	3308      	adds	r3, #8
 800b8b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8b6:	e853 3f00 	ldrex	r3, [r3]
 800b8ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b8bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8c2:	f023 0301 	bic.w	r3, r3, #1
 800b8c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	3308      	adds	r3, #8
 800b8d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b8d4:	65ba      	str	r2, [r7, #88]	; 0x58
 800b8d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b8da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b8dc:	e841 2300 	strex	r3, r2, [r1]
 800b8e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b8e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d1e1      	bne.n	800b8ac <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2220      	movs	r2, #32
 800b8ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d12e      	bne.n	800b95c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90c:	e853 3f00 	ldrex	r3, [r3]
 800b910:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b914:	f023 0310 	bic.w	r3, r3, #16
 800b918:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	461a      	mov	r2, r3
 800b920:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b922:	647b      	str	r3, [r7, #68]	; 0x44
 800b924:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b926:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b928:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b92a:	e841 2300 	strex	r3, r2, [r1]
 800b92e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b932:	2b00      	cmp	r3, #0
 800b934:	d1e6      	bne.n	800b904 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	69db      	ldr	r3, [r3, #28]
 800b93c:	f003 0310 	and.w	r3, r3, #16
 800b940:	2b10      	cmp	r3, #16
 800b942:	d103      	bne.n	800b94c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	2210      	movs	r2, #16
 800b94a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b952:	4619      	mov	r1, r3
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f7f6 fb25 	bl	8001fa4 <HAL_UARTEx_RxEventCallback>
 800b95a:	e002      	b.n	800b962 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f7f7 ff1f 	bl	80037a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b962:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b966:	2b00      	cmp	r3, #0
 800b968:	d006      	beq.n	800b978 <UART_RxISR_16BIT_FIFOEN+0x254>
 800b96a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b96e:	f003 0320 	and.w	r3, r3, #32
 800b972:	2b00      	cmp	r3, #0
 800b974:	f47f aefa 	bne.w	800b76c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b97e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b982:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800b986:	2b00      	cmp	r3, #0
 800b988:	d045      	beq.n	800ba16 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b990:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800b994:	429a      	cmp	r2, r3
 800b996:	d23e      	bcs.n	800ba16 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	3308      	adds	r3, #8
 800b99e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a2:	e853 3f00 	ldrex	r3, [r3]
 800b9a6:	623b      	str	r3, [r7, #32]
   return(result);
 800b9a8:	6a3b      	ldr	r3, [r7, #32]
 800b9aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9ae:	677b      	str	r3, [r7, #116]	; 0x74
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	3308      	adds	r3, #8
 800b9b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b9b8:	633a      	str	r2, [r7, #48]	; 0x30
 800b9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9c0:	e841 2300 	strex	r3, r2, [r1]
 800b9c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d1e5      	bne.n	800b998 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	4a14      	ldr	r2, [pc, #80]	; (800ba20 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800b9d0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	e853 3f00 	ldrex	r3, [r3]
 800b9de:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f043 0320 	orr.w	r3, r3, #32
 800b9e6:	673b      	str	r3, [r7, #112]	; 0x70
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9f0:	61fb      	str	r3, [r7, #28]
 800b9f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f4:	69b9      	ldr	r1, [r7, #24]
 800b9f6:	69fa      	ldr	r2, [r7, #28]
 800b9f8:	e841 2300 	strex	r3, r2, [r1]
 800b9fc:	617b      	str	r3, [r7, #20]
   return(result);
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1e6      	bne.n	800b9d2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ba04:	e007      	b.n	800ba16 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	699a      	ldr	r2, [r3, #24]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f042 0208 	orr.w	r2, r2, #8
 800ba14:	619a      	str	r2, [r3, #24]
}
 800ba16:	bf00      	nop
 800ba18:	37a0      	adds	r7, #160	; 0xa0
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	0800b2cd 	.word	0x0800b2cd

0800ba24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ba2c:	bf00      	nop
 800ba2e:	370c      	adds	r7, #12
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bc80      	pop	{r7}
 800ba34:	4770      	bx	lr

0800ba36 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ba36:	b480      	push	{r7}
 800ba38:	b083      	sub	sp, #12
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ba3e:	bf00      	nop
 800ba40:	370c      	adds	r7, #12
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bc80      	pop	{r7}
 800ba46:	4770      	bx	lr

0800ba48 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b083      	sub	sp, #12
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ba50:	bf00      	nop
 800ba52:	370c      	adds	r7, #12
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bc80      	pop	{r7}
 800ba58:	4770      	bx	lr

0800ba5a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b088      	sub	sp, #32
 800ba5e:	af02      	add	r7, sp, #8
 800ba60:	60f8      	str	r0, [r7, #12]
 800ba62:	1d3b      	adds	r3, r7, #4
 800ba64:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d101      	bne.n	800ba7a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800ba76:	2302      	movs	r3, #2
 800ba78:	e046      	b.n	800bb08 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2224      	movs	r2, #36	; 0x24
 800ba86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f022 0201 	bic.w	r2, r2, #1
 800ba98:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	430a      	orrs	r2, r1
 800baac:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d105      	bne.n	800bac0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800bab4:	1d3b      	adds	r3, r7, #4
 800bab6:	e893 0006 	ldmia.w	r3, {r1, r2}
 800baba:	68f8      	ldr	r0, [r7, #12]
 800babc:	f000 f9a5 	bl	800be0a <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f042 0201 	orr.w	r2, r2, #1
 800bace:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bad0:	f7f6 ff18 	bl	8002904 <HAL_GetTick>
 800bad4:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bad6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bada:	9300      	str	r3, [sp, #0]
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	2200      	movs	r2, #0
 800bae0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bae4:	68f8      	ldr	r0, [r7, #12]
 800bae6:	f7fe fe79 	bl	800a7dc <UART_WaitOnFlagUntilTimeout>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d002      	beq.n	800baf6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800baf0:	2303      	movs	r3, #3
 800baf2:	75fb      	strb	r3, [r7, #23]
 800baf4:	e003      	b.n	800bafe <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2220      	movs	r2, #32
 800bafa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800bb06:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3718      	adds	r7, #24
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b089      	sub	sp, #36	; 0x24
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	d101      	bne.n	800bb26 <HAL_UARTEx_EnableStopMode+0x16>
 800bb22:	2302      	movs	r3, #2
 800bb24:	e021      	b.n	800bb6a <HAL_UARTEx_EnableStopMode+0x5a>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2201      	movs	r2, #1
 800bb2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	e853 3f00 	ldrex	r3, [r3]
 800bb3a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	f043 0302 	orr.w	r3, r3, #2
 800bb42:	61fb      	str	r3, [r7, #28]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	461a      	mov	r2, r3
 800bb4a:	69fb      	ldr	r3, [r7, #28]
 800bb4c:	61bb      	str	r3, [r7, #24]
 800bb4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb50:	6979      	ldr	r1, [r7, #20]
 800bb52:	69ba      	ldr	r2, [r7, #24]
 800bb54:	e841 2300 	strex	r3, r2, [r1]
 800bb58:	613b      	str	r3, [r7, #16]
   return(result);
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d1e6      	bne.n	800bb2e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3724      	adds	r7, #36	; 0x24
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bc80      	pop	{r7}
 800bb72:	4770      	bx	lr

0800bb74 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d101      	bne.n	800bb8a <HAL_UARTEx_EnableFifoMode+0x16>
 800bb86:	2302      	movs	r3, #2
 800bb88:	e02b      	b.n	800bbe2 <HAL_UARTEx_EnableFifoMode+0x6e>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2224      	movs	r2, #36	; 0x24
 800bb96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f022 0201 	bic.w	r2, r2, #1
 800bbb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bbb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800bbc0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	68fa      	ldr	r2, [r7, #12]
 800bbc8:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 f940 	bl	800be50 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2220      	movs	r2, #32
 800bbd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bbe0:	2300      	movs	r3, #0
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bbea:	b480      	push	{r7}
 800bbec:	b085      	sub	sp, #20
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d101      	bne.n	800bc00 <HAL_UARTEx_DisableFifoMode+0x16>
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	e027      	b.n	800bc50 <HAL_UARTEx_DisableFifoMode+0x66>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2201      	movs	r2, #1
 800bc04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2224      	movs	r2, #36	; 0x24
 800bc0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f022 0201 	bic.w	r2, r2, #1
 800bc26:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bc2e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2200      	movs	r2, #0
 800bc34:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	68fa      	ldr	r2, [r7, #12]
 800bc3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2220      	movs	r2, #32
 800bc42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bc4e:	2300      	movs	r3, #0
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3714      	adds	r7, #20
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bc80      	pop	{r7}
 800bc58:	4770      	bx	lr

0800bc5a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc5a:	b580      	push	{r7, lr}
 800bc5c:	b084      	sub	sp, #16
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
 800bc62:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	d101      	bne.n	800bc72 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bc6e:	2302      	movs	r3, #2
 800bc70:	e02d      	b.n	800bcce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2201      	movs	r2, #1
 800bc76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2224      	movs	r2, #36	; 0x24
 800bc7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f022 0201 	bic.w	r2, r2, #1
 800bc98:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	683a      	ldr	r2, [r7, #0]
 800bcaa:	430a      	orrs	r2, r1
 800bcac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f000 f8ce 	bl	800be50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	68fa      	ldr	r2, [r7, #12]
 800bcba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2220      	movs	r2, #32
 800bcc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bccc:	2300      	movs	r3, #0
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}

0800bcd6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b084      	sub	sp, #16
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
 800bcde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d101      	bne.n	800bcee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bcea:	2302      	movs	r3, #2
 800bcec:	e02d      	b.n	800bd4a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2224      	movs	r2, #36	; 0x24
 800bcfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f022 0201 	bic.w	r2, r2, #1
 800bd14:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	683a      	ldr	r2, [r7, #0]
 800bd26:	430a      	orrs	r2, r1
 800bd28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 f890 	bl	800be50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	68fa      	ldr	r2, [r7, #12]
 800bd36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2220      	movs	r2, #32
 800bd3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bd48:	2300      	movs	r3, #0
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b08c      	sub	sp, #48	; 0x30
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	60f8      	str	r0, [r7, #12]
 800bd5a:	60b9      	str	r1, [r7, #8]
 800bd5c:	4613      	mov	r3, r2
 800bd5e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd66:	2b20      	cmp	r3, #32
 800bd68:	d14a      	bne.n	800be00 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d002      	beq.n	800bd76 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800bd70:	88fb      	ldrh	r3, [r7, #6]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d101      	bne.n	800bd7a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800bd76:	2301      	movs	r3, #1
 800bd78:	e043      	b.n	800be02 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d101      	bne.n	800bd88 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800bd84:	2302      	movs	r3, #2
 800bd86:	e03c      	b.n	800be02 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2201      	movs	r2, #1
 800bd94:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800bd96:	88fb      	ldrh	r3, [r7, #6]
 800bd98:	461a      	mov	r2, r3
 800bd9a:	68b9      	ldr	r1, [r7, #8]
 800bd9c:	68f8      	ldr	r0, [r7, #12]
 800bd9e:	f7fe ff0d 	bl	800abbc <UART_Start_Receive_DMA>
 800bda2:	4603      	mov	r3, r0
 800bda4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800bda8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d124      	bne.n	800bdfa <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d11d      	bne.n	800bdf4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	2210      	movs	r2, #16
 800bdbe:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc6:	69bb      	ldr	r3, [r7, #24]
 800bdc8:	e853 3f00 	ldrex	r3, [r3]
 800bdcc:	617b      	str	r3, [r7, #20]
   return(result);
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	f043 0310 	orr.w	r3, r3, #16
 800bdd4:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	461a      	mov	r2, r3
 800bddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdde:	627b      	str	r3, [r7, #36]	; 0x24
 800bde0:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde2:	6a39      	ldr	r1, [r7, #32]
 800bde4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bde6:	e841 2300 	strex	r3, r2, [r1]
 800bdea:	61fb      	str	r3, [r7, #28]
   return(result);
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1e6      	bne.n	800bdc0 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800bdf2:	e002      	b.n	800bdfa <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800bdfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdfe:	e000      	b.n	800be02 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800be00:	2302      	movs	r3, #2
  }
}
 800be02:	4618      	mov	r0, r3
 800be04:	3730      	adds	r7, #48	; 0x30
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}

0800be0a <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800be0a:	b480      	push	{r7}
 800be0c:	b085      	sub	sp, #20
 800be0e:	af00      	add	r7, sp, #0
 800be10:	60f8      	str	r0, [r7, #12]
 800be12:	1d3b      	adds	r3, r7, #4
 800be14:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	f023 0210 	bic.w	r2, r3, #16
 800be22:	893b      	ldrh	r3, [r7, #8]
 800be24:	4619      	mov	r1, r3
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	430a      	orrs	r2, r1
 800be2c:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800be38:	7abb      	ldrb	r3, [r7, #10]
 800be3a:	061a      	lsls	r2, r3, #24
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	430a      	orrs	r2, r1
 800be42:	605a      	str	r2, [r3, #4]
}
 800be44:	bf00      	nop
 800be46:	3714      	adds	r7, #20
 800be48:	46bd      	mov	sp, r7
 800be4a:	bc80      	pop	{r7}
 800be4c:	4770      	bx	lr
	...

0800be50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800be50:	b480      	push	{r7}
 800be52:	b085      	sub	sp, #20
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d108      	bne.n	800be72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2201      	movs	r2, #1
 800be64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2201      	movs	r2, #1
 800be6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800be70:	e031      	b.n	800bed6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800be72:	2308      	movs	r3, #8
 800be74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800be76:	2308      	movs	r3, #8
 800be78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	0e5b      	lsrs	r3, r3, #25
 800be82:	b2db      	uxtb	r3, r3
 800be84:	f003 0307 	and.w	r3, r3, #7
 800be88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	689b      	ldr	r3, [r3, #8]
 800be90:	0f5b      	lsrs	r3, r3, #29
 800be92:	b2db      	uxtb	r3, r3
 800be94:	f003 0307 	and.w	r3, r3, #7
 800be98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be9a:	7bbb      	ldrb	r3, [r7, #14]
 800be9c:	7b3a      	ldrb	r2, [r7, #12]
 800be9e:	4910      	ldr	r1, [pc, #64]	; (800bee0 <UARTEx_SetNbDataToProcess+0x90>)
 800bea0:	5c8a      	ldrb	r2, [r1, r2]
 800bea2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bea6:	7b3a      	ldrb	r2, [r7, #12]
 800bea8:	490e      	ldr	r1, [pc, #56]	; (800bee4 <UARTEx_SetNbDataToProcess+0x94>)
 800beaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800beac:	fb93 f3f2 	sdiv	r3, r3, r2
 800beb0:	b29a      	uxth	r2, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800beb8:	7bfb      	ldrb	r3, [r7, #15]
 800beba:	7b7a      	ldrb	r2, [r7, #13]
 800bebc:	4908      	ldr	r1, [pc, #32]	; (800bee0 <UARTEx_SetNbDataToProcess+0x90>)
 800bebe:	5c8a      	ldrb	r2, [r1, r2]
 800bec0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bec4:	7b7a      	ldrb	r2, [r7, #13]
 800bec6:	4907      	ldr	r1, [pc, #28]	; (800bee4 <UARTEx_SetNbDataToProcess+0x94>)
 800bec8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800beca:	fb93 f3f2 	sdiv	r3, r3, r2
 800bece:	b29a      	uxth	r2, r3
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bed6:	bf00      	nop
 800bed8:	3714      	adds	r7, #20
 800beda:	46bd      	mov	sp, r7
 800bedc:	bc80      	pop	{r7}
 800bede:	4770      	bx	lr
 800bee0:	0801f88c 	.word	0x0801f88c
 800bee4:	0801f894 	.word	0x0801f894

0800bee8 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800beec:	f7f6 fbaa 	bl	8002644 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800bef0:	f000 f820 	bl	800bf34 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800bef4:	bf00      	nop
 800bef6:	bd80      	pop	{r7, pc}

0800bef8 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800befc:	f04f 30ff 	mov.w	r0, #4294967295
 800bf00:	f012 f9e0 	bl	801e2c4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800bf04:	bf00      	nop
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800bf0c:	f3bf 8f4f 	dsb	sy
}
 800bf10:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800bf12:	4b06      	ldr	r3, [pc, #24]	; (800bf2c <__NVIC_SystemReset+0x24>)
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800bf1a:	4904      	ldr	r1, [pc, #16]	; (800bf2c <__NVIC_SystemReset+0x24>)
 800bf1c:	4b04      	ldr	r3, [pc, #16]	; (800bf30 <__NVIC_SystemReset+0x28>)
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800bf22:	f3bf 8f4f 	dsb	sy
}
 800bf26:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800bf28:	bf00      	nop
 800bf2a:	e7fd      	b.n	800bf28 <__NVIC_SystemReset+0x20>
 800bf2c:	e000ed00 	.word	0xe000ed00
 800bf30:	05fa0004 	.word	0x05fa0004

0800bf34 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	607b      	str	r3, [r7, #4]
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800bf3e:	1d3b      	adds	r3, r7, #4
 800bf40:	4619      	mov	r1, r3
 800bf42:	2000      	movs	r0, #0
 800bf44:	f003 f844 	bl	800efd0 <LmHandlerGetVersion>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800bf48:	1d3b      	adds	r3, r7, #4
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	2001      	movs	r0, #1
 800bf4e:	f003 f83f 	bl	800efd0 <LmHandlerGetVersion>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800bf52:	2300      	movs	r3, #0
 800bf54:	9300      	str	r3, [sp, #0]
 800bf56:	4b2f      	ldr	r3, [pc, #188]	; (800c014 <LoRaWAN_Init+0xe0>)
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bf5e:	482e      	ldr	r0, [pc, #184]	; (800c018 <LoRaWAN_Init+0xe4>)
 800bf60:	f012 fb50 	bl	801e604 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800bf64:	2300      	movs	r3, #0
 800bf66:	9300      	str	r3, [sp, #0]
 800bf68:	4b2c      	ldr	r3, [pc, #176]	; (800c01c <LoRaWAN_Init+0xe8>)
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bf70:	482b      	ldr	r0, [pc, #172]	; (800c020 <LoRaWAN_Init+0xec>)
 800bf72:	f012 fb47 	bl	801e604 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800bf76:	2300      	movs	r3, #0
 800bf78:	9300      	str	r3, [sp, #0]
 800bf7a:	4b2a      	ldr	r3, [pc, #168]	; (800c024 <LoRaWAN_Init+0xf0>)
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bf82:	4829      	ldr	r0, [pc, #164]	; (800c028 <LoRaWAN_Init+0xf4>)
 800bf84:	f012 fb3e 	bl	801e604 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800bf88:	2300      	movs	r3, #0
 800bf8a:	9300      	str	r3, [sp, #0]
 800bf8c:	4b27      	ldr	r3, [pc, #156]	; (800c02c <LoRaWAN_Init+0xf8>)
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800bf94:	4826      	ldr	r0, [pc, #152]	; (800c030 <LoRaWAN_Init+0xfc>)
 800bf96:	f012 fb35 	bl	801e604 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800bf9a:	4a26      	ldr	r2, [pc, #152]	; (800c034 <LoRaWAN_Init+0x100>)
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	2001      	movs	r0, #1
 800bfa0:	f012 fa8c 	bl	801e4bc <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800bfa4:	4a24      	ldr	r2, [pc, #144]	; (800c038 <LoRaWAN_Init+0x104>)
 800bfa6:	2100      	movs	r1, #0
 800bfa8:	2002      	movs	r0, #2
 800bfaa:	f012 fa87 	bl	801e4bc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800bfae:	4a23      	ldr	r2, [pc, #140]	; (800c03c <LoRaWAN_Init+0x108>)
 800bfb0:	2100      	movs	r1, #0
 800bfb2:	2004      	movs	r0, #4
 800bfb4:	f012 fa82 	bl	801e4bc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800bfb8:	4a21      	ldr	r2, [pc, #132]	; (800c040 <LoRaWAN_Init+0x10c>)
 800bfba:	2100      	movs	r1, #0
 800bfbc:	2008      	movs	r0, #8
 800bfbe:	f012 fa7d 	bl	801e4bc <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800bfc2:	f000 fb3d 	bl	800c640 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800bfc6:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 800bfca:	481e      	ldr	r0, [pc, #120]	; (800c044 <LoRaWAN_Init+0x110>)
 800bfcc:	f002 f80a 	bl	800dfe4 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800bfd0:	481d      	ldr	r0, [pc, #116]	; (800c048 <LoRaWAN_Init+0x114>)
 800bfd2:	f002 f853 	bl	800e07c <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800bfd6:	4814      	ldr	r0, [pc, #80]	; (800c028 <LoRaWAN_Init+0xf4>)
 800bfd8:	f012 fb4a 	bl	801e670 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800bfdc:	4b1b      	ldr	r3, [pc, #108]	; (800c04c <LoRaWAN_Init+0x118>)
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	4a1b      	ldr	r2, [pc, #108]	; (800c050 <LoRaWAN_Init+0x11c>)
 800bfe2:	7812      	ldrb	r2, [r2, #0]
 800bfe4:	4611      	mov	r1, r2
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f002 f99e 	bl	800e328 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800bfec:	4b19      	ldr	r3, [pc, #100]	; (800c054 <LoRaWAN_Init+0x120>)
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d10b      	bne.n	800c00c <LoRaWAN_Init+0xd8>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800bff4:	4b18      	ldr	r3, [pc, #96]	; (800c058 <LoRaWAN_Init+0x124>)
 800bff6:	6819      	ldr	r1, [r3, #0]
 800bff8:	2300      	movs	r3, #0
 800bffa:	9300      	str	r3, [sp, #0]
 800bffc:	4b17      	ldr	r3, [pc, #92]	; (800c05c <LoRaWAN_Init+0x128>)
 800bffe:	2200      	movs	r2, #0
 800c000:	4817      	ldr	r0, [pc, #92]	; (800c060 <LoRaWAN_Init+0x12c>)
 800c002:	f012 faff 	bl	801e604 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800c006:	4816      	ldr	r0, [pc, #88]	; (800c060 <LoRaWAN_Init+0x12c>)
 800c008:	f012 fb32 	bl	801e670 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800c00c:	bf00      	nop
 800c00e:	3708      	adds	r7, #8
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}
 800c014:	0800c37d 	.word	0x0800c37d
 800c018:	20000b44 	.word	0x20000b44
 800c01c:	0800c38f 	.word	0x0800c38f
 800c020:	20000b5c 	.word	0x20000b5c
 800c024:	0800c3a1 	.word	0x0800c3a1
 800c028:	20000b74 	.word	0x20000b74
 800c02c:	0800c565 	.word	0x0800c565
 800c030:	20000a38 	.word	0x20000a38
 800c034:	0800e305 	.word	0x0800e305
 800c038:	0800c165 	.word	0x0800c165
 800c03c:	0800c589 	.word	0x0800c589
 800c040:	0800c519 	.word	0x0800c519
 800c044:	20000014 	.word	0x20000014
 800c048:	20000060 	.word	0x20000060
 800c04c:	20000010 	.word	0x20000010
 800c050:	20000011 	.word	0x20000011
 800c054:	20000a1c 	.word	0x20000a1c
 800c058:	20000074 	.word	0x20000074
 800c05c:	0800c359 	.word	0x0800c359
 800c060:	20000a20 	.word	0x20000a20

0800c064 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	4603      	mov	r3, r0
 800c06c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800c06e:	88fb      	ldrh	r3, [r7, #6]
 800c070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c074:	d104      	bne.n	800c080 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800c076:	2100      	movs	r1, #0
 800c078:	2002      	movs	r0, #2
 800c07a:	f012 fa41 	bl	801e500 <UTIL_SEQ_SetTask>
      }
      break;
 800c07e:	e000      	b.n	800c082 <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800c080:	bf00      	nop
  }
}
 800c082:	bf00      	nop
 800c084:	3708      	adds	r7, #8
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
	...

0800c08c <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800c096:	2300      	movs	r3, #0
 800c098:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d057      	beq.n	800c150 <OnRxData+0xc4>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800c0a0:	482d      	ldr	r0, [pc, #180]	; (800c158 <OnRxData+0xcc>)
 800c0a2:	f012 fae5 	bl	801e670 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d04b      	beq.n	800c146 <OnRxData+0xba>
    {
      if (appData != NULL)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d048      	beq.n	800c146 <OnRxData+0xba>
      {
        RxPort = appData->Port;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d041      	beq.n	800c146 <OnRxData+0xba>
        {
    switch (appData->Port)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	2b02      	cmp	r3, #2
 800c0c8:	d021      	beq.n	800c10e <OnRxData+0x82>
 800c0ca:	2b03      	cmp	r3, #3
 800c0cc:	d13d      	bne.n	800c14a <OnRxData+0xbe>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	785b      	ldrb	r3, [r3, #1]
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d117      	bne.n	800c106 <OnRxData+0x7a>
        {
          switch (appData->Buffer[0])
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	2b02      	cmp	r3, #2
 800c0de:	d00e      	beq.n	800c0fe <OnRxData+0x72>
 800c0e0:	2b02      	cmp	r3, #2
 800c0e2:	dc12      	bgt.n	800c10a <OnRxData+0x7e>
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d002      	beq.n	800c0ee <OnRxData+0x62>
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d004      	beq.n	800c0f6 <OnRxData+0x6a>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800c0ec:	e00d      	b.n	800c10a <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_A);
 800c0ee:	2000      	movs	r0, #0
 800c0f0:	f002 fb06 	bl	800e700 <LmHandlerRequestClass>
              break;
 800c0f4:	e00a      	b.n	800c10c <OnRxData+0x80>
              LmHandlerRequestClass(CLASS_B);
 800c0f6:	2001      	movs	r0, #1
 800c0f8:	f002 fb02 	bl	800e700 <LmHandlerRequestClass>
              break;
 800c0fc:	e006      	b.n	800c10c <OnRxData+0x80>
              LmHandlerRequestClass(CLASS_C);
 800c0fe:	2002      	movs	r0, #2
 800c100:	f002 fafe 	bl	800e700 <LmHandlerRequestClass>
              break;
 800c104:	e002      	b.n	800c10c <OnRxData+0x80>
          }
        }
 800c106:	bf00      	nop
 800c108:	e022      	b.n	800c150 <OnRxData+0xc4>
              break;
 800c10a:	bf00      	nop
        break;
 800c10c:	e020      	b.n	800c150 <OnRxData+0xc4>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	785b      	ldrb	r3, [r3, #1]
 800c112:	2b01      	cmp	r3, #1
 800c114:	d11b      	bne.n	800c14e <OnRxData+0xc2>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	f003 0301 	and.w	r3, r3, #1
 800c120:	b2da      	uxtb	r2, r3
 800c122:	4b0e      	ldr	r3, [pc, #56]	; (800c15c <OnRxData+0xd0>)
 800c124:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800c126:	4b0d      	ldr	r3, [pc, #52]	; (800c15c <OnRxData+0xd0>)
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d105      	bne.n	800c13a <OnRxData+0xae>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800c12e:	2201      	movs	r2, #1
 800c130:	2120      	movs	r1, #32
 800c132:	480b      	ldr	r0, [pc, #44]	; (800c160 <OnRxData+0xd4>)
 800c134:	f7f9 ff6e 	bl	8006014 <HAL_GPIO_WritePin>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
          }
        }
        break;
 800c138:	e009      	b.n	800c14e <OnRxData+0xc2>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800c13a:	2200      	movs	r2, #0
 800c13c:	2120      	movs	r1, #32
 800c13e:	4808      	ldr	r0, [pc, #32]	; (800c160 <OnRxData+0xd4>)
 800c140:	f7f9 ff68 	bl	8006014 <HAL_GPIO_WritePin>
        break;
 800c144:	e003      	b.n	800c14e <OnRxData+0xc2>

      default:

        break;
    }
  }
 800c146:	bf00      	nop
 800c148:	e002      	b.n	800c150 <OnRxData+0xc4>
        break;
 800c14a:	bf00      	nop
 800c14c:	e000      	b.n	800c150 <OnRxData+0xc4>
        break;
 800c14e:	bf00      	nop
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800c150:	bf00      	nop
 800c152:	3710      	adds	r7, #16
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}
 800c158:	20000b5c 	.word	0x20000b5c
 800c15c:	20000b42 	.word	0x20000b42
 800c160:	48000400 	.word	0x48000400

0800c164 <SendTxData>:

static void SendTxData(void)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b08a      	sub	sp, #40	; 0x28
 800c168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800c16a:	23ff      	movs	r3, #255	; 0xff
 800c16c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t batteryLevel = GetBatteryLevel();
 800c170:	f7f6 fa9c 	bl	80026ac <GetBatteryLevel>
 800c174:	4603      	mov	r3, r0
 800c176:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800c17a:	2300      	movs	r3, #0
 800c17c:	627b      	str	r3, [r7, #36]	; 0x24


  uint16_t pressure = 0;
 800c17e:	2300      	movs	r3, #0
 800c180:	843b      	strh	r3, [r7, #32]

  uint32_t i = 0;
 800c182:	2300      	movs	r3, #0
 800c184:	61fb      	str	r3, [r7, #28]


  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));

  AppData.Port = LORAWAN_USER_APP_PORT;
 800c186:	4b69      	ldr	r3, [pc, #420]	; (800c32c <SendTxData+0x1c8>)
 800c188:	2202      	movs	r2, #2
 800c18a:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = PM2_5/100;
 800c18c:	4b68      	ldr	r3, [pc, #416]	; (800c330 <SendTxData+0x1cc>)
 800c18e:	881b      	ldrh	r3, [r3, #0]
 800c190:	4a68      	ldr	r2, [pc, #416]	; (800c334 <SendTxData+0x1d0>)
 800c192:	fba2 2303 	umull	r2, r3, r2, r3
 800c196:	095b      	lsrs	r3, r3, #5
 800c198:	b298      	uxth	r0, r3
 800c19a:	4b64      	ldr	r3, [pc, #400]	; (800c32c <SendTxData+0x1c8>)
 800c19c:	685a      	ldr	r2, [r3, #4]
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	1c59      	adds	r1, r3, #1
 800c1a2:	61f9      	str	r1, [r7, #28]
 800c1a4:	4413      	add	r3, r2
 800c1a6:	b2c2      	uxtb	r2, r0
 800c1a8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = PM2_5%100;
 800c1aa:	4b61      	ldr	r3, [pc, #388]	; (800c330 <SendTxData+0x1cc>)
 800c1ac:	881b      	ldrh	r3, [r3, #0]
 800c1ae:	4a61      	ldr	r2, [pc, #388]	; (800c334 <SendTxData+0x1d0>)
 800c1b0:	fba2 1203 	umull	r1, r2, r2, r3
 800c1b4:	0952      	lsrs	r2, r2, #5
 800c1b6:	2164      	movs	r1, #100	; 0x64
 800c1b8:	fb01 f202 	mul.w	r2, r1, r2
 800c1bc:	1a9b      	subs	r3, r3, r2
 800c1be:	b298      	uxth	r0, r3
 800c1c0:	4b5a      	ldr	r3, [pc, #360]	; (800c32c <SendTxData+0x1c8>)
 800c1c2:	685a      	ldr	r2, [r3, #4]
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	1c59      	adds	r1, r3, #1
 800c1c8:	61f9      	str	r1, [r7, #28]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	b2c2      	uxtb	r2, r0
 800c1ce:	701a      	strb	r2, [r3, #0]
  int16_t tempVar;
  tempVar = ((int16_t)(temp*100.0));
 800c1d0:	4b59      	ldr	r3, [pc, #356]	; (800c338 <SendTxData+0x1d4>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7f4 f93b 	bl	8000450 <__aeabi_f2d>
 800c1da:	f04f 0200 	mov.w	r2, #0
 800c1de:	4b57      	ldr	r3, [pc, #348]	; (800c33c <SendTxData+0x1d8>)
 800c1e0:	f7f4 f98e 	bl	8000500 <__aeabi_dmul>
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	460b      	mov	r3, r1
 800c1e8:	4610      	mov	r0, r2
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	f7f4 fc22 	bl	8000a34 <__aeabi_d2iz>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800c1f4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c1f8:	4a4e      	ldr	r2, [pc, #312]	; (800c334 <SendTxData+0x1d0>)
 800c1fa:	fb82 1203 	smull	r1, r2, r2, r3
 800c1fe:	1152      	asrs	r2, r2, #5
 800c200:	17db      	asrs	r3, r3, #31
 800c202:	1ad3      	subs	r3, r2, r3
 800c204:	b218      	sxth	r0, r3
 800c206:	4b49      	ldr	r3, [pc, #292]	; (800c32c <SendTxData+0x1c8>)
 800c208:	685a      	ldr	r2, [r3, #4]
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	1c59      	adds	r1, r3, #1
 800c20e:	61f9      	str	r1, [r7, #28]
 800c210:	4413      	add	r3, r2
 800c212:	b2c2      	uxtb	r2, r0
 800c214:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800c216:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c21a:	4a46      	ldr	r2, [pc, #280]	; (800c334 <SendTxData+0x1d0>)
 800c21c:	fb82 1203 	smull	r1, r2, r2, r3
 800c220:	1151      	asrs	r1, r2, #5
 800c222:	17da      	asrs	r2, r3, #31
 800c224:	1a8a      	subs	r2, r1, r2
 800c226:	2164      	movs	r1, #100	; 0x64
 800c228:	fb01 f202 	mul.w	r2, r1, r2
 800c22c:	1a9b      	subs	r3, r3, r2
 800c22e:	b218      	sxth	r0, r3
 800c230:	4b3e      	ldr	r3, [pc, #248]	; (800c32c <SendTxData+0x1c8>)
 800c232:	685a      	ldr	r2, [r3, #4]
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	1c59      	adds	r1, r3, #1
 800c238:	61f9      	str	r1, [r7, #28]
 800c23a:	4413      	add	r3, r2
 800c23c:	b2c2      	uxtb	r2, r0
 800c23e:	701a      	strb	r2, [r3, #0]
  tempVar = ((int16_t)(humidity*100.0));
 800c240:	4b3f      	ldr	r3, [pc, #252]	; (800c340 <SendTxData+0x1dc>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4618      	mov	r0, r3
 800c246:	f7f4 f903 	bl	8000450 <__aeabi_f2d>
 800c24a:	f04f 0200 	mov.w	r2, #0
 800c24e:	4b3b      	ldr	r3, [pc, #236]	; (800c33c <SendTxData+0x1d8>)
 800c250:	f7f4 f956 	bl	8000500 <__aeabi_dmul>
 800c254:	4602      	mov	r2, r0
 800c256:	460b      	mov	r3, r1
 800c258:	4610      	mov	r0, r2
 800c25a:	4619      	mov	r1, r3
 800c25c:	f7f4 fbea 	bl	8000a34 <__aeabi_d2iz>
 800c260:	4603      	mov	r3, r0
 800c262:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800c264:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c268:	4a32      	ldr	r2, [pc, #200]	; (800c334 <SendTxData+0x1d0>)
 800c26a:	fb82 1203 	smull	r1, r2, r2, r3
 800c26e:	1152      	asrs	r2, r2, #5
 800c270:	17db      	asrs	r3, r3, #31
 800c272:	1ad3      	subs	r3, r2, r3
 800c274:	b218      	sxth	r0, r3
 800c276:	4b2d      	ldr	r3, [pc, #180]	; (800c32c <SendTxData+0x1c8>)
 800c278:	685a      	ldr	r2, [r3, #4]
 800c27a:	69fb      	ldr	r3, [r7, #28]
 800c27c:	1c59      	adds	r1, r3, #1
 800c27e:	61f9      	str	r1, [r7, #28]
 800c280:	4413      	add	r3, r2
 800c282:	b2c2      	uxtb	r2, r0
 800c284:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800c286:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c28a:	4a2a      	ldr	r2, [pc, #168]	; (800c334 <SendTxData+0x1d0>)
 800c28c:	fb82 1203 	smull	r1, r2, r2, r3
 800c290:	1151      	asrs	r1, r2, #5
 800c292:	17da      	asrs	r2, r3, #31
 800c294:	1a8a      	subs	r2, r1, r2
 800c296:	2164      	movs	r1, #100	; 0x64
 800c298:	fb01 f202 	mul.w	r2, r1, r2
 800c29c:	1a9b      	subs	r3, r3, r2
 800c29e:	b218      	sxth	r0, r3
 800c2a0:	4b22      	ldr	r3, [pc, #136]	; (800c32c <SendTxData+0x1c8>)
 800c2a2:	685a      	ldr	r2, [r3, #4]
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	1c59      	adds	r1, r3, #1
 800c2a8:	61f9      	str	r1, [r7, #28]
 800c2aa:	4413      	add	r3, r2
 800c2ac:	b2c2      	uxtb	r2, r0
 800c2ae:	701a      	strb	r2, [r3, #0]


  AppData.BufferSize = i;
 800c2b0:	69fb      	ldr	r3, [r7, #28]
 800c2b2:	b2da      	uxtb	r2, r3
 800c2b4:	4b1d      	ldr	r3, [pc, #116]	; (800c32c <SendTxData+0x1c8>)
 800c2b6:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800c2b8:	4b22      	ldr	r3, [pc, #136]	; (800c344 <SendTxData+0x1e0>)
 800c2ba:	7a5b      	ldrb	r3, [r3, #9]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d007      	beq.n	800c2d0 <SendTxData+0x16c>
 800c2c0:	f002 f8b2 	bl	800e428 <LmHandlerJoinStatus>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d102      	bne.n	800c2d0 <SendTxData+0x16c>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800c2ca:	481e      	ldr	r0, [pc, #120]	; (800c344 <SendTxData+0x1e0>)
 800c2cc:	f012 fa3e 	bl	801e74c <UTIL_TIMER_Stop>

  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800c2d0:	4b1d      	ldr	r3, [pc, #116]	; (800c348 <SendTxData+0x1e4>)
 800c2d2:	78db      	ldrb	r3, [r3, #3]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	4814      	ldr	r0, [pc, #80]	; (800c32c <SendTxData+0x1c8>)
 800c2da:	f002 f8c1 	bl	800e460 <LmHandlerSend>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (LORAMAC_HANDLER_SUCCESS == status)
 800c2e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d007      	beq.n	800c2fc <SendTxData+0x198>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800c2ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c2f0:	f113 0f06 	cmn.w	r3, #6
 800c2f4:	d102      	bne.n	800c2fc <SendTxData+0x198>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800c2f6:	f002 f80d 	bl	800e314 <LmHandlerGetDutyCycleWaitTime>
 800c2fa:	6278      	str	r0, [r7, #36]	; 0x24
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }
  }

  if (EventType == TX_ON_TIMER)
 800c2fc:	4b13      	ldr	r3, [pc, #76]	; (800c34c <SendTxData+0x1e8>)
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d10f      	bne.n	800c324 <SendTxData+0x1c0>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800c304:	4812      	ldr	r0, [pc, #72]	; (800c350 <SendTxData+0x1ec>)
 800c306:	f012 fa21 	bl	801e74c <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800c30a:	4b12      	ldr	r3, [pc, #72]	; (800c354 <SendTxData+0x1f0>)
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c310:	4293      	cmp	r3, r2
 800c312:	bf38      	it	cc
 800c314:	4613      	movcc	r3, r2
 800c316:	4619      	mov	r1, r3
 800c318:	480d      	ldr	r0, [pc, #52]	; (800c350 <SendTxData+0x1ec>)
 800c31a:	f012 fa87 	bl	801e82c <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800c31e:	480c      	ldr	r0, [pc, #48]	; (800c350 <SendTxData+0x1ec>)
 800c320:	f012 f9a6 	bl	801e670 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800c324:	bf00      	nop
 800c326:	3728      	adds	r7, #40	; 0x28
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	20000078 	.word	0x20000078
 800c330:	20000670 	.word	0x20000670
 800c334:	51eb851f 	.word	0x51eb851f
 800c338:	20000674 	.word	0x20000674
 800c33c:	40590000 	.word	0x40590000
 800c340:	20000678 	.word	0x20000678
 800c344:	20000b74 	.word	0x20000b74
 800c348:	20000060 	.word	0x20000060
 800c34c:	20000a1c 	.word	0x20000a1c
 800c350:	20000a20 	.word	0x20000a20
 800c354:	20000074 	.word	0x20000074

0800c358 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800c360:	2100      	movs	r1, #0
 800c362:	2002      	movs	r0, #2
 800c364:	f012 f8cc 	bl	801e500 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800c368:	4803      	ldr	r0, [pc, #12]	; (800c378 <OnTxTimerEvent+0x20>)
 800c36a:	f012 f981 	bl	801e670 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800c36e:	bf00      	nop
 800c370:	3708      	adds	r7, #8
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	20000a20 	.word	0x20000a20

0800c37c <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800c384:	bf00      	nop
 800c386:	370c      	adds	r7, #12
 800c388:	46bd      	mov	sp, r7
 800c38a:	bc80      	pop	{r7}
 800c38c:	4770      	bx	lr

0800c38e <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800c38e:	b480      	push	{r7}
 800c390:	b083      	sub	sp, #12
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800c396:	bf00      	nop
 800c398:	370c      	adds	r7, #12
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bc80      	pop	{r7}
 800c39e:	4770      	bx	lr

0800c3a0 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b083      	sub	sp, #12
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800c3a8:	bf00      	nop
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bc80      	pop	{r7}
 800c3b0:	4770      	bx	lr
	...

0800c3b4 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d006      	beq.n	800c3d0 <OnTxData+0x1c>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d002      	beq.n	800c3d0 <OnTxData+0x1c>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800c3ca:	4803      	ldr	r0, [pc, #12]	; (800c3d8 <OnTxData+0x24>)
 800c3cc:	f012 f950 	bl	801e670 <UTIL_TIMER_Start>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800c3d0:	bf00      	nop
 800c3d2:	3708      	adds	r7, #8
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	20000b44 	.word	0x20000b44

0800c3dc <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d012      	beq.n	800c410 <OnJoinRequest+0x34>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d103      	bne.n	800c3fc <OnJoinRequest+0x20>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800c3f4:	4808      	ldr	r0, [pc, #32]	; (800c418 <OnJoinRequest+0x3c>)
 800c3f6:	f012 f9a9 	bl	801e74c <UTIL_TIMER_Stop>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800c3fa:	e009      	b.n	800c410 <OnJoinRequest+0x34>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	799b      	ldrb	r3, [r3, #6]
 800c400:	2b02      	cmp	r3, #2
 800c402:	d105      	bne.n	800c410 <OnJoinRequest+0x34>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800c404:	4b05      	ldr	r3, [pc, #20]	; (800c41c <OnJoinRequest+0x40>)
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	2101      	movs	r1, #1
 800c40a:	4618      	mov	r0, r3
 800c40c:	f001 ff8c 	bl	800e328 <LmHandlerJoin>
}
 800c410:	bf00      	nop
 800c412:	3708      	adds	r7, #8
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}
 800c418:	20000b74 	.word	0x20000b74
 800c41c:	20000010 	.word	0x20000010

0800c420 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800c420:	b480      	push	{r7}
 800c422:	b083      	sub	sp, #12
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d005      	beq.n	800c43a <OnBeaconStatusChange+0x1a>
  {
    switch (params->State)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	785b      	ldrb	r3, [r3, #1]
 800c432:	2b02      	cmp	r3, #2
 800c434:	d003      	beq.n	800c43e <OnBeaconStatusChange+0x1e>
 800c436:	2b03      	cmp	r3, #3
        break;
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
        break;
 800c438:	e002      	b.n	800c440 <OnBeaconStatusChange+0x20>
      }
    }
  }
 800c43a:	bf00      	nop
 800c43c:	e000      	b.n	800c440 <OnBeaconStatusChange+0x20>
        break;
 800c43e:	bf00      	nop
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800c440:	bf00      	nop
 800c442:	370c      	adds	r7, #12
 800c444:	46bd      	mov	sp, r7
 800c446:	bc80      	pop	{r7}
 800c448:	4770      	bx	lr

0800c44a <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800c44a:	b480      	push	{r7}
 800c44c:	b083      	sub	sp, #12
 800c44e:	af00      	add	r7, sp, #0
 800c450:	4603      	mov	r3, r0
 800c452:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
  /* USER CODE END OnClassChange_1 */
}
 800c454:	bf00      	nop
 800c456:	370c      	adds	r7, #12
 800c458:	46bd      	mov	sp, r7
 800c45a:	bc80      	pop	{r7}
 800c45c:	4770      	bx	lr

0800c45e <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800c45e:	b580      	push	{r7, lr}
 800c460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800c462:	2100      	movs	r1, #0
 800c464:	2001      	movs	r0, #1
 800c466:	f012 f84b 	bl	801e500 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800c46a:	bf00      	nop
 800c46c:	bd80      	pop	{r7, pc}
	...

0800c470 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800c478:	4a0d      	ldr	r2, [pc, #52]	; (800c4b0 <OnTxPeriodicityChanged+0x40>)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800c47e:	4b0c      	ldr	r3, [pc, #48]	; (800c4b0 <OnTxPeriodicityChanged+0x40>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d103      	bne.n	800c48e <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800c486:	4b0a      	ldr	r3, [pc, #40]	; (800c4b0 <OnTxPeriodicityChanged+0x40>)
 800c488:	f242 7210 	movw	r2, #10000	; 0x2710
 800c48c:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800c48e:	4809      	ldr	r0, [pc, #36]	; (800c4b4 <OnTxPeriodicityChanged+0x44>)
 800c490:	f012 f95c 	bl	801e74c <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800c494:	4b06      	ldr	r3, [pc, #24]	; (800c4b0 <OnTxPeriodicityChanged+0x40>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4619      	mov	r1, r3
 800c49a:	4806      	ldr	r0, [pc, #24]	; (800c4b4 <OnTxPeriodicityChanged+0x44>)
 800c49c:	f012 f9c6 	bl	801e82c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800c4a0:	4804      	ldr	r0, [pc, #16]	; (800c4b4 <OnTxPeriodicityChanged+0x44>)
 800c4a2:	f012 f8e5 	bl	801e670 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800c4a6:	bf00      	nop
 800c4a8:	3708      	adds	r7, #8
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	20000074 	.word	0x20000074
 800c4b4:	20000a20 	.word	0x20000a20

0800c4b8 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b083      	sub	sp, #12
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	4603      	mov	r3, r0
 800c4c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800c4c2:	4a04      	ldr	r2, [pc, #16]	; (800c4d4 <OnTxFrameCtrlChanged+0x1c>)
 800c4c4:	79fb      	ldrb	r3, [r7, #7]
 800c4c6:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800c4c8:	bf00      	nop
 800c4ca:	370c      	adds	r7, #12
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bc80      	pop	{r7}
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop
 800c4d4:	20000060 	.word	0x20000060

0800c4d8 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	4603      	mov	r3, r0
 800c4e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800c4e2:	4a04      	ldr	r2, [pc, #16]	; (800c4f4 <OnPingSlotPeriodicityChanged+0x1c>)
 800c4e4:	79fb      	ldrb	r3, [r7, #7]
 800c4e6:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800c4e8:	bf00      	nop
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bc80      	pop	{r7}
 800c4f0:	4770      	bx	lr
 800c4f2:	bf00      	nop
 800c4f4:	20000060 	.word	0x20000060

0800c4f8 <OnSystemReset>:

static void OnSystemReset(void)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800c4fc:	f002 fd99 	bl	800f032 <LmHandlerHalt>
 800c500:	4603      	mov	r3, r0
 800c502:	2b00      	cmp	r3, #0
 800c504:	d106      	bne.n	800c514 <OnSystemReset+0x1c>
 800c506:	f001 ff8f 	bl	800e428 <LmHandlerJoinStatus>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d101      	bne.n	800c514 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800c510:	f7ff fcfa 	bl	800bf08 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800c514:	bf00      	nop
 800c516:	bd80      	pop	{r7, pc}

0800c518 <StopJoin>:

static void StopJoin(void)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800c51c:	480d      	ldr	r0, [pc, #52]	; (800c554 <StopJoin+0x3c>)
 800c51e:	f012 f915 	bl	801e74c <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800c522:	f002 fd79 	bl	800f018 <LmHandlerStop>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d10e      	bne.n	800c54a <StopJoin+0x32>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800c52c:	4b0a      	ldr	r3, [pc, #40]	; (800c558 <StopJoin+0x40>)
 800c52e:	2201      	movs	r2, #1
 800c530:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
    }
    LmHandlerConfigure(&LmHandlerParams);
 800c532:	480a      	ldr	r0, [pc, #40]	; (800c55c <StopJoin+0x44>)
 800c534:	f001 fda2 	bl	800e07c <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800c538:	4b07      	ldr	r3, [pc, #28]	; (800c558 <StopJoin+0x40>)
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	2101      	movs	r1, #1
 800c53e:	4618      	mov	r0, r3
 800c540:	f001 fef2 	bl	800e328 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800c544:	4803      	ldr	r0, [pc, #12]	; (800c554 <StopJoin+0x3c>)
 800c546:	f012 f893 	bl	801e670 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800c54a:	4805      	ldr	r0, [pc, #20]	; (800c560 <StopJoin+0x48>)
 800c54c:	f012 f890 	bl	801e670 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800c550:	bf00      	nop
 800c552:	bd80      	pop	{r7, pc}
 800c554:	20000a20 	.word	0x20000a20
 800c558:	20000010 	.word	0x20000010
 800c55c:	20000060 	.word	0x20000060
 800c560:	20000a38 	.word	0x20000a38

0800c564 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800c56c:	4b05      	ldr	r3, [pc, #20]	; (800c584 <OnStopJoinTimerEvent+0x20>)
 800c56e:	781b      	ldrb	r3, [r3, #0]
 800c570:	2b02      	cmp	r3, #2
 800c572:	d103      	bne.n	800c57c <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800c574:	2100      	movs	r1, #0
 800c576:	2008      	movs	r0, #8
 800c578:	f011 ffc2 	bl	801e500 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800c57c:	bf00      	nop
 800c57e:	3708      	adds	r7, #8
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	20000010 	.word	0x20000010

0800c588 <StoreContext>:

static void StoreContext(void)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800c58e:	23ff      	movs	r3, #255	; 0xff
 800c590:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800c592:	f002 fd5b 	bl	800f04c <LmHandlerNvmDataStore>
 800c596:	4603      	mov	r3, r0
 800c598:	71fb      	strb	r3, [r7, #7]
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800c59a:	bf00      	nop
 800c59c:	3708      	adds	r7, #8
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}

0800c5a2 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800c5a2:	b480      	push	{r7}
 800c5a4:	b083      	sub	sp, #12
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	71fb      	strb	r3, [r7, #7]
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800c5ac:	bf00      	nop
 800c5ae:	370c      	adds	r7, #12
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bc80      	pop	{r7}
 800c5b4:	4770      	bx	lr
	...

0800c5b8 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800c5c2:	f7f9 f8db 	bl	800577c <HAL_FLASH_Unlock>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d11c      	bne.n	800c606 <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800c5cc:	4b10      	ldr	r3, [pc, #64]	; (800c610 <OnStoreContextRequest+0x58>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	029a      	lsls	r2, r3, #10
 800c5d2:	4b10      	ldr	r3, [pc, #64]	; (800c614 <OnStoreContextRequest+0x5c>)
 800c5d4:	4013      	ands	r3, r2
 800c5d6:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 800c5da:	fbb2 f1f3 	udiv	r1, r2, r3
 800c5de:	fb01 f303 	mul.w	r3, r1, r3
 800c5e2:	1ad3      	subs	r3, r2, r3
 800c5e4:	0adb      	lsrs	r3, r3, #11
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	2101      	movs	r1, #1
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7f5 f993 	bl	8001916 <FLASH_IF_EraseByPages>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d105      	bne.n	800c602 <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	683a      	ldr	r2, [r7, #0]
 800c5fa:	6879      	ldr	r1, [r7, #4]
 800c5fc:	4806      	ldr	r0, [pc, #24]	; (800c618 <OnStoreContextRequest+0x60>)
 800c5fe:	f7f5 f8a9 	bl	8001754 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800c602:	f7f9 f8dd 	bl	80057c0 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800c606:	bf00      	nop
 800c608:	3708      	adds	r7, #8
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop
 800c610:	1fff75e0 	.word	0x1fff75e0
 800c614:	03fffc00 	.word	0x03fffc00
 800c618:	0803f000 	.word	0x0803f000

0800c61c <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	b29b      	uxth	r3, r3
 800c62a:	461a      	mov	r2, r3
 800c62c:	4903      	ldr	r1, [pc, #12]	; (800c63c <OnRestoreContextRequest+0x20>)
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f011 fa46 	bl	801dac0 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800c634:	bf00      	nop
 800c636:	3708      	adds	r7, #8
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	0803f000 	.word	0x0803f000

0800c640 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800c644:	4b16      	ldr	r3, [pc, #88]	; (800c6a0 <LoraInfo_Init+0x60>)
 800c646:	2200      	movs	r2, #0
 800c648:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800c64a:	4b15      	ldr	r3, [pc, #84]	; (800c6a0 <LoraInfo_Init+0x60>)
 800c64c:	2200      	movs	r2, #0
 800c64e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800c650:	4b13      	ldr	r3, [pc, #76]	; (800c6a0 <LoraInfo_Init+0x60>)
 800c652:	2200      	movs	r2, #0
 800c654:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800c656:	4b12      	ldr	r3, [pc, #72]	; (800c6a0 <LoraInfo_Init+0x60>)
 800c658:	2200      	movs	r2, #0
 800c65a:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800c65c:	4b10      	ldr	r3, [pc, #64]	; (800c6a0 <LoraInfo_Init+0x60>)
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	f043 0320 	orr.w	r3, r3, #32
 800c664:	4a0e      	ldr	r2, [pc, #56]	; (800c6a0 <LoraInfo_Init+0x60>)
 800c666:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800c668:	4b0d      	ldr	r3, [pc, #52]	; (800c6a0 <LoraInfo_Init+0x60>)
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d10c      	bne.n	800c68a <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800c670:	4b0c      	ldr	r3, [pc, #48]	; (800c6a4 <LoraInfo_Init+0x64>)
 800c672:	2200      	movs	r2, #0
 800c674:	2100      	movs	r1, #0
 800c676:	2000      	movs	r0, #0
 800c678:	f012 fa72 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800c67c:	bf00      	nop
 800c67e:	f012 fa5d 	bl	801eb3c <UTIL_ADV_TRACE_IsBufferEmpty>
 800c682:	4603      	mov	r3, r0
 800c684:	2b01      	cmp	r3, #1
 800c686:	d1fa      	bne.n	800c67e <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800c688:	e7fe      	b.n	800c688 <LoraInfo_Init+0x48>
  }

#if ( LORAMAC_CLASSB_ENABLED == 1 )
  loraInfo.ClassB = 1;
 800c68a:	4b05      	ldr	r3, [pc, #20]	; (800c6a0 <LoraInfo_Init+0x60>)
 800c68c:	2201      	movs	r2, #1
 800c68e:	609a      	str	r2, [r3, #8]
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800c690:	4b03      	ldr	r3, [pc, #12]	; (800c6a0 <LoraInfo_Init+0x60>)
 800c692:	2200      	movs	r2, #0
 800c694:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800c696:	4b02      	ldr	r3, [pc, #8]	; (800c6a0 <LoraInfo_Init+0x60>)
 800c698:	2203      	movs	r2, #3
 800c69a:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800c69c:	bf00      	nop
 800c69e:	bd80      	pop	{r7, pc}
 800c6a0:	20000b8c 	.word	0x20000b8c
 800c6a4:	0801f2b8 	.word	0x0801f2b8

0800c6a8 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800c6ac:	4b02      	ldr	r3, [pc, #8]	; (800c6b8 <LoraInfo_GetPtr+0x10>)
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bc80      	pop	{r7}
 800c6b4:	4770      	bx	lr
 800c6b6:	bf00      	nop
 800c6b8:	20000b8c 	.word	0x20000b8c

0800c6bc <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800c6c0:	f7f7 f8d1 	bl	8003866 <BSP_RADIO_Init>
 800c6c4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	bd80      	pop	{r7, pc}

0800c6ca <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800c6ca:	b580      	push	{r7, lr}
 800c6cc:	b082      	sub	sp, #8
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800c6d4:	79fb      	ldrb	r3, [r7, #7]
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7f7 f8f6 	bl	80038c8 <BSP_RADIO_ConfigRFSwitch>
 800c6dc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3708      	adds	r7, #8
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800c6ea:	f7f7 f93b 	bl	8003964 <BSP_RADIO_GetTxConfig>
 800c6ee:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800c6f8:	f7f7 f93b 	bl	8003972 <BSP_RADIO_IsTCXO>
 800c6fc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	bd80      	pop	{r7, pc}

0800c702 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800c702:	b580      	push	{r7, lr}
 800c704:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800c706:	f7f7 f93b 	bl	8003980 <BSP_RADIO_IsDCDC>
 800c70a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	4603      	mov	r3, r0
 800c718:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800c71a:	79fb      	ldrb	r3, [r7, #7]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7f7 f936 	bl	800398e <BSP_RADIO_GetRFOMaxPowerConfig>
 800c722:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800c724:	4618      	mov	r0, r3
 800c726:	3708      	adds	r7, #8
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	33f1      	adds	r3, #241	; 0xf1
 800c738:	2210      	movs	r2, #16
 800c73a:	2100      	movs	r1, #0
 800c73c:	4618      	mov	r0, r3
 800c73e:	f00d fef5 	bl	801a52c <memset1>
    ctx->M_n = 0;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	22f0      	movs	r2, #240	; 0xf0
 800c74e:	2100      	movs	r1, #0
 800c750:	4618      	mov	r0, r3
 800c752:	f00d feeb 	bl	801a52c <memset1>
}
 800c756:	bf00      	nop
 800c758:	3708      	adds	r7, #8
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800c75e:	b580      	push	{r7, lr}
 800c760:	b082      	sub	sp, #8
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
 800c766:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	461a      	mov	r2, r3
 800c76c:	2110      	movs	r1, #16
 800c76e:	6838      	ldr	r0, [r7, #0]
 800c770:	f000 fe5c 	bl	800d42c <lorawan_aes_set_key>
}
 800c774:	bf00      	nop
 800c776:	3708      	adds	r7, #8
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b08c      	sub	sp, #48	; 0x30
 800c780:	af00      	add	r7, sp, #0
 800c782:	60f8      	str	r0, [r7, #12]
 800c784:	60b9      	str	r1, [r7, #8]
 800c786:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c78e:	2b00      	cmp	r3, #0
 800c790:	f000 80a1 	beq.w	800c8d6 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c79a:	f1c3 0310 	rsb	r3, r3, #16
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	bf28      	it	cs
 800c7a4:	4613      	movcs	r3, r2
 800c7a6:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f203 1201 	addw	r2, r3, #257	; 0x101
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c7b4:	4413      	add	r3, r2
 800c7b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7b8:	b292      	uxth	r2, r2
 800c7ba:	68b9      	ldr	r1, [r7, #8]
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f00d fe7a 	bl	801a4b6 <memcpy1>
        ctx->M_n += mlen;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800c7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ca:	441a      	add	r2, r3
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c7d8:	2b0f      	cmp	r3, #15
 800c7da:	f240 808d 	bls.w	800c8f8 <AES_CMAC_Update+0x17c>
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	f000 8088 	beq.w	800c8f8 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7ec:	e015      	b.n	800c81a <AES_CMAC_Update+0x9e>
 800c7ee:	68fa      	ldr	r2, [r7, #12]
 800c7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f2:	4413      	add	r3, r2
 800c7f4:	33f1      	adds	r3, #241	; 0xf1
 800c7f6:	781a      	ldrb	r2, [r3, #0]
 800c7f8:	68f9      	ldr	r1, [r7, #12]
 800c7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fc:	440b      	add	r3, r1
 800c7fe:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	4053      	eors	r3, r2
 800c806:	b2d9      	uxtb	r1, r3
 800c808:	68fa      	ldr	r2, [r7, #12]
 800c80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80c:	4413      	add	r3, r2
 800c80e:	33f1      	adds	r3, #241	; 0xf1
 800c810:	460a      	mov	r2, r1
 800c812:	701a      	strb	r2, [r3, #0]
 800c814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c816:	3301      	adds	r3, #1
 800c818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81c:	2b0f      	cmp	r3, #15
 800c81e:	dde6      	ble.n	800c7ee <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800c826:	f107 0314 	add.w	r3, r7, #20
 800c82a:	2210      	movs	r2, #16
 800c82c:	4618      	mov	r0, r3
 800c82e:	f00d fe42 	bl	801a4b6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c832:	68fa      	ldr	r2, [r7, #12]
 800c834:	f107 0114 	add.w	r1, r7, #20
 800c838:	f107 0314 	add.w	r3, r7, #20
 800c83c:	4618      	mov	r0, r3
 800c83e:	f000 fed3 	bl	800d5e8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	33f1      	adds	r3, #241	; 0xf1
 800c846:	f107 0114 	add.w	r1, r7, #20
 800c84a:	2210      	movs	r2, #16
 800c84c:	4618      	mov	r0, r3
 800c84e:	f00d fe32 	bl	801a4b6 <memcpy1>

        data += mlen;
 800c852:	68ba      	ldr	r2, [r7, #8]
 800c854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c856:	4413      	add	r3, r2
 800c858:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800c85a:	687a      	ldr	r2, [r7, #4]
 800c85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85e:	1ad3      	subs	r3, r2, r3
 800c860:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800c862:	e038      	b.n	800c8d6 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800c864:	2300      	movs	r3, #0
 800c866:	62bb      	str	r3, [r7, #40]	; 0x28
 800c868:	e013      	b.n	800c892 <AES_CMAC_Update+0x116>
 800c86a:	68fa      	ldr	r2, [r7, #12]
 800c86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86e:	4413      	add	r3, r2
 800c870:	33f1      	adds	r3, #241	; 0xf1
 800c872:	781a      	ldrb	r2, [r3, #0]
 800c874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c876:	68b9      	ldr	r1, [r7, #8]
 800c878:	440b      	add	r3, r1
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	4053      	eors	r3, r2
 800c87e:	b2d9      	uxtb	r1, r3
 800c880:	68fa      	ldr	r2, [r7, #12]
 800c882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c884:	4413      	add	r3, r2
 800c886:	33f1      	adds	r3, #241	; 0xf1
 800c888:	460a      	mov	r2, r1
 800c88a:	701a      	strb	r2, [r3, #0]
 800c88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88e:	3301      	adds	r3, #1
 800c890:	62bb      	str	r3, [r7, #40]	; 0x28
 800c892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c894:	2b0f      	cmp	r3, #15
 800c896:	dde8      	ble.n	800c86a <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800c89e:	f107 0314 	add.w	r3, r7, #20
 800c8a2:	2210      	movs	r2, #16
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f00d fe06 	bl	801a4b6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c8aa:	68fa      	ldr	r2, [r7, #12]
 800c8ac:	f107 0114 	add.w	r1, r7, #20
 800c8b0:	f107 0314 	add.w	r3, r7, #20
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f000 fe97 	bl	800d5e8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	33f1      	adds	r3, #241	; 0xf1
 800c8be:	f107 0114 	add.w	r1, r7, #20
 800c8c2:	2210      	movs	r2, #16
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f00d fdf6 	bl	801a4b6 <memcpy1>

        data += 16;
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	3310      	adds	r3, #16
 800c8ce:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	3b10      	subs	r3, #16
 800c8d4:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2b10      	cmp	r3, #16
 800c8da:	d8c3      	bhi.n	800c864 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	b292      	uxth	r2, r2
 800c8e6:	68b9      	ldr	r1, [r7, #8]
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f00d fde4 	bl	801a4b6 <memcpy1>
    ctx->M_n = len;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800c8f6:	e000      	b.n	800c8fa <AES_CMAC_Update+0x17e>
            return;
 800c8f8:	bf00      	nop
}
 800c8fa:	3730      	adds	r7, #48	; 0x30
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b092      	sub	sp, #72	; 0x48
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800c90a:	f107 031c 	add.w	r3, r7, #28
 800c90e:	2210      	movs	r2, #16
 800c910:	2100      	movs	r1, #0
 800c912:	4618      	mov	r0, r3
 800c914:	f00d fe0a 	bl	801a52c <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800c918:	683a      	ldr	r2, [r7, #0]
 800c91a:	f107 011c 	add.w	r1, r7, #28
 800c91e:	f107 031c 	add.w	r3, r7, #28
 800c922:	4618      	mov	r0, r3
 800c924:	f000 fe60 	bl	800d5e8 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800c928:	7f3b      	ldrb	r3, [r7, #28]
 800c92a:	b25b      	sxtb	r3, r3
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	da30      	bge.n	800c992 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800c930:	2300      	movs	r3, #0
 800c932:	647b      	str	r3, [r7, #68]	; 0x44
 800c934:	e01b      	b.n	800c96e <AES_CMAC_Final+0x6e>
 800c936:	f107 021c 	add.w	r2, r7, #28
 800c93a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c93c:	4413      	add	r3, r2
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	005b      	lsls	r3, r3, #1
 800c942:	b25a      	sxtb	r2, r3
 800c944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c946:	3301      	adds	r3, #1
 800c948:	3348      	adds	r3, #72	; 0x48
 800c94a:	443b      	add	r3, r7
 800c94c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c950:	09db      	lsrs	r3, r3, #7
 800c952:	b2db      	uxtb	r3, r3
 800c954:	b25b      	sxtb	r3, r3
 800c956:	4313      	orrs	r3, r2
 800c958:	b25b      	sxtb	r3, r3
 800c95a:	b2d9      	uxtb	r1, r3
 800c95c:	f107 021c 	add.w	r2, r7, #28
 800c960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c962:	4413      	add	r3, r2
 800c964:	460a      	mov	r2, r1
 800c966:	701a      	strb	r2, [r3, #0]
 800c968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c96a:	3301      	adds	r3, #1
 800c96c:	647b      	str	r3, [r7, #68]	; 0x44
 800c96e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c970:	2b0e      	cmp	r3, #14
 800c972:	dde0      	ble.n	800c936 <AES_CMAC_Final+0x36>
 800c974:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c978:	005b      	lsls	r3, r3, #1
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800c980:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c984:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800c988:	43db      	mvns	r3, r3
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c990:	e027      	b.n	800c9e2 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800c992:	2300      	movs	r3, #0
 800c994:	643b      	str	r3, [r7, #64]	; 0x40
 800c996:	e01b      	b.n	800c9d0 <AES_CMAC_Final+0xd0>
 800c998:	f107 021c 	add.w	r2, r7, #28
 800c99c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c99e:	4413      	add	r3, r2
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	005b      	lsls	r3, r3, #1
 800c9a4:	b25a      	sxtb	r2, r3
 800c9a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	3348      	adds	r3, #72	; 0x48
 800c9ac:	443b      	add	r3, r7
 800c9ae:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c9b2:	09db      	lsrs	r3, r3, #7
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	b25b      	sxtb	r3, r3
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	b25b      	sxtb	r3, r3
 800c9bc:	b2d9      	uxtb	r1, r3
 800c9be:	f107 021c 	add.w	r2, r7, #28
 800c9c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9c4:	4413      	add	r3, r2
 800c9c6:	460a      	mov	r2, r1
 800c9c8:	701a      	strb	r2, [r3, #0]
 800c9ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	643b      	str	r3, [r7, #64]	; 0x40
 800c9d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9d2:	2b0e      	cmp	r3, #14
 800c9d4:	dde0      	ble.n	800c998 <AES_CMAC_Final+0x98>
 800c9d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c9da:	005b      	lsls	r3, r3, #1
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c9e8:	2b10      	cmp	r3, #16
 800c9ea:	d11d      	bne.n	800ca28 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9f0:	e016      	b.n	800ca20 <AES_CMAC_Final+0x120>
 800c9f2:	683a      	ldr	r2, [r7, #0]
 800c9f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9f6:	4413      	add	r3, r2
 800c9f8:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c9fc:	781a      	ldrb	r2, [r3, #0]
 800c9fe:	f107 011c 	add.w	r1, r7, #28
 800ca02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca04:	440b      	add	r3, r1
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	4053      	eors	r3, r2
 800ca0a:	b2d9      	uxtb	r1, r3
 800ca0c:	683a      	ldr	r2, [r7, #0]
 800ca0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca10:	4413      	add	r3, r2
 800ca12:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ca16:	460a      	mov	r2, r1
 800ca18:	701a      	strb	r2, [r3, #0]
 800ca1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca1c:	3301      	adds	r3, #1
 800ca1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca22:	2b0f      	cmp	r3, #15
 800ca24:	dde5      	ble.n	800c9f2 <AES_CMAC_Final+0xf2>
 800ca26:	e096      	b.n	800cb56 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800ca28:	7f3b      	ldrb	r3, [r7, #28]
 800ca2a:	b25b      	sxtb	r3, r3
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	da30      	bge.n	800ca92 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800ca30:	2300      	movs	r3, #0
 800ca32:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca34:	e01b      	b.n	800ca6e <AES_CMAC_Final+0x16e>
 800ca36:	f107 021c 	add.w	r2, r7, #28
 800ca3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3c:	4413      	add	r3, r2
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	005b      	lsls	r3, r3, #1
 800ca42:	b25a      	sxtb	r2, r3
 800ca44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca46:	3301      	adds	r3, #1
 800ca48:	3348      	adds	r3, #72	; 0x48
 800ca4a:	443b      	add	r3, r7
 800ca4c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ca50:	09db      	lsrs	r3, r3, #7
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	b25b      	sxtb	r3, r3
 800ca56:	4313      	orrs	r3, r2
 800ca58:	b25b      	sxtb	r3, r3
 800ca5a:	b2d9      	uxtb	r1, r3
 800ca5c:	f107 021c 	add.w	r2, r7, #28
 800ca60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca62:	4413      	add	r3, r2
 800ca64:	460a      	mov	r2, r1
 800ca66:	701a      	strb	r2, [r3, #0]
 800ca68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca70:	2b0e      	cmp	r3, #14
 800ca72:	dde0      	ble.n	800ca36 <AES_CMAC_Final+0x136>
 800ca74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ca78:	005b      	lsls	r3, r3, #1
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800ca80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ca84:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800ca88:	43db      	mvns	r3, r3
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca90:	e027      	b.n	800cae2 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800ca92:	2300      	movs	r3, #0
 800ca94:	637b      	str	r3, [r7, #52]	; 0x34
 800ca96:	e01b      	b.n	800cad0 <AES_CMAC_Final+0x1d0>
 800ca98:	f107 021c 	add.w	r2, r7, #28
 800ca9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca9e:	4413      	add	r3, r2
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	005b      	lsls	r3, r3, #1
 800caa4:	b25a      	sxtb	r2, r3
 800caa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caa8:	3301      	adds	r3, #1
 800caaa:	3348      	adds	r3, #72	; 0x48
 800caac:	443b      	add	r3, r7
 800caae:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800cab2:	09db      	lsrs	r3, r3, #7
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	b25b      	sxtb	r3, r3
 800cab8:	4313      	orrs	r3, r2
 800caba:	b25b      	sxtb	r3, r3
 800cabc:	b2d9      	uxtb	r1, r3
 800cabe:	f107 021c 	add.w	r2, r7, #28
 800cac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cac4:	4413      	add	r3, r2
 800cac6:	460a      	mov	r2, r1
 800cac8:	701a      	strb	r2, [r3, #0]
 800caca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cacc:	3301      	adds	r3, #1
 800cace:	637b      	str	r3, [r7, #52]	; 0x34
 800cad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cad2:	2b0e      	cmp	r3, #14
 800cad4:	dde0      	ble.n	800ca98 <AES_CMAC_Final+0x198>
 800cad6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cada:	005b      	lsls	r3, r3, #1
 800cadc:	b2db      	uxtb	r3, r3
 800cade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cae8:	683a      	ldr	r2, [r7, #0]
 800caea:	4413      	add	r3, r2
 800caec:	2280      	movs	r2, #128	; 0x80
 800caee:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800caf2:	e007      	b.n	800cb04 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cafa:	683a      	ldr	r2, [r7, #0]
 800cafc:	4413      	add	r3, r2
 800cafe:	2200      	movs	r2, #0
 800cb00:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cb0a:	1c5a      	adds	r2, r3, #1
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cb18:	2b0f      	cmp	r3, #15
 800cb1a:	d9eb      	bls.n	800caf4 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	633b      	str	r3, [r7, #48]	; 0x30
 800cb20:	e016      	b.n	800cb50 <AES_CMAC_Final+0x250>
 800cb22:	683a      	ldr	r2, [r7, #0]
 800cb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb26:	4413      	add	r3, r2
 800cb28:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cb2c:	781a      	ldrb	r2, [r3, #0]
 800cb2e:	f107 011c 	add.w	r1, r7, #28
 800cb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb34:	440b      	add	r3, r1
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	4053      	eors	r3, r2
 800cb3a:	b2d9      	uxtb	r1, r3
 800cb3c:	683a      	ldr	r2, [r7, #0]
 800cb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb40:	4413      	add	r3, r2
 800cb42:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cb46:	460a      	mov	r2, r1
 800cb48:	701a      	strb	r2, [r3, #0]
 800cb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	633b      	str	r3, [r7, #48]	; 0x30
 800cb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb52:	2b0f      	cmp	r3, #15
 800cb54:	dde5      	ble.n	800cb22 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800cb56:	2300      	movs	r3, #0
 800cb58:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb5a:	e015      	b.n	800cb88 <AES_CMAC_Final+0x288>
 800cb5c:	683a      	ldr	r2, [r7, #0]
 800cb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb60:	4413      	add	r3, r2
 800cb62:	33f1      	adds	r3, #241	; 0xf1
 800cb64:	781a      	ldrb	r2, [r3, #0]
 800cb66:	6839      	ldr	r1, [r7, #0]
 800cb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6a:	440b      	add	r3, r1
 800cb6c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	4053      	eors	r3, r2
 800cb74:	b2d9      	uxtb	r1, r3
 800cb76:	683a      	ldr	r2, [r7, #0]
 800cb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7a:	4413      	add	r3, r2
 800cb7c:	33f1      	adds	r3, #241	; 0xf1
 800cb7e:	460a      	mov	r2, r1
 800cb80:	701a      	strb	r2, [r3, #0]
 800cb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb84:	3301      	adds	r3, #1
 800cb86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb8a:	2b0f      	cmp	r3, #15
 800cb8c:	dde6      	ble.n	800cb5c <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800cb94:	f107 030c 	add.w	r3, r7, #12
 800cb98:	2210      	movs	r2, #16
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f00d fc8b 	bl	801a4b6 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800cba0:	683a      	ldr	r2, [r7, #0]
 800cba2:	f107 030c 	add.w	r3, r7, #12
 800cba6:	6879      	ldr	r1, [r7, #4]
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f000 fd1d 	bl	800d5e8 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800cbae:	f107 031c 	add.w	r3, r7, #28
 800cbb2:	2210      	movs	r2, #16
 800cbb4:	2100      	movs	r1, #0
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f00d fcb8 	bl	801a52c <memset1>
}
 800cbbc:	bf00      	nop
 800cbbe:	3748      	adds	r7, #72	; 0x48
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b083      	sub	sp, #12
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	781a      	ldrb	r2, [r3, #0]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	683a      	ldr	r2, [r7, #0]
 800cbdc:	7852      	ldrb	r2, [r2, #1]
 800cbde:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	3302      	adds	r3, #2
 800cbe4:	683a      	ldr	r2, [r7, #0]
 800cbe6:	7892      	ldrb	r2, [r2, #2]
 800cbe8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	3303      	adds	r3, #3
 800cbee:	683a      	ldr	r2, [r7, #0]
 800cbf0:	78d2      	ldrb	r2, [r2, #3]
 800cbf2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	3304      	adds	r3, #4
 800cbf8:	683a      	ldr	r2, [r7, #0]
 800cbfa:	7912      	ldrb	r2, [r2, #4]
 800cbfc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	3305      	adds	r3, #5
 800cc02:	683a      	ldr	r2, [r7, #0]
 800cc04:	7952      	ldrb	r2, [r2, #5]
 800cc06:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	3306      	adds	r3, #6
 800cc0c:	683a      	ldr	r2, [r7, #0]
 800cc0e:	7992      	ldrb	r2, [r2, #6]
 800cc10:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	3307      	adds	r3, #7
 800cc16:	683a      	ldr	r2, [r7, #0]
 800cc18:	79d2      	ldrb	r2, [r2, #7]
 800cc1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	3308      	adds	r3, #8
 800cc20:	683a      	ldr	r2, [r7, #0]
 800cc22:	7a12      	ldrb	r2, [r2, #8]
 800cc24:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	3309      	adds	r3, #9
 800cc2a:	683a      	ldr	r2, [r7, #0]
 800cc2c:	7a52      	ldrb	r2, [r2, #9]
 800cc2e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	330a      	adds	r3, #10
 800cc34:	683a      	ldr	r2, [r7, #0]
 800cc36:	7a92      	ldrb	r2, [r2, #10]
 800cc38:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	330b      	adds	r3, #11
 800cc3e:	683a      	ldr	r2, [r7, #0]
 800cc40:	7ad2      	ldrb	r2, [r2, #11]
 800cc42:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	330c      	adds	r3, #12
 800cc48:	683a      	ldr	r2, [r7, #0]
 800cc4a:	7b12      	ldrb	r2, [r2, #12]
 800cc4c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	330d      	adds	r3, #13
 800cc52:	683a      	ldr	r2, [r7, #0]
 800cc54:	7b52      	ldrb	r2, [r2, #13]
 800cc56:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	330e      	adds	r3, #14
 800cc5c:	683a      	ldr	r2, [r7, #0]
 800cc5e:	7b92      	ldrb	r2, [r2, #14]
 800cc60:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	330f      	adds	r3, #15
 800cc66:	683a      	ldr	r2, [r7, #0]
 800cc68:	7bd2      	ldrb	r2, [r2, #15]
 800cc6a:	701a      	strb	r2, [r3, #0]
#endif
}
 800cc6c:	bf00      	nop
 800cc6e:	370c      	adds	r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bc80      	pop	{r7}
 800cc74:	4770      	bx	lr

0800cc76 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800cc76:	b480      	push	{r7}
 800cc78:	b085      	sub	sp, #20
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	60f8      	str	r0, [r7, #12]
 800cc7e:	60b9      	str	r1, [r7, #8]
 800cc80:	4613      	mov	r3, r2
 800cc82:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800cc84:	e007      	b.n	800cc96 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800cc86:	68ba      	ldr	r2, [r7, #8]
 800cc88:	1c53      	adds	r3, r2, #1
 800cc8a:	60bb      	str	r3, [r7, #8]
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	1c59      	adds	r1, r3, #1
 800cc90:	60f9      	str	r1, [r7, #12]
 800cc92:	7812      	ldrb	r2, [r2, #0]
 800cc94:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800cc96:	79fb      	ldrb	r3, [r7, #7]
 800cc98:	1e5a      	subs	r2, r3, #1
 800cc9a:	71fa      	strb	r2, [r7, #7]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d1f2      	bne.n	800cc86 <copy_block_nn+0x10>
}
 800cca0:	bf00      	nop
 800cca2:	bf00      	nop
 800cca4:	3714      	adds	r7, #20
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bc80      	pop	{r7}
 800ccaa:	4770      	bx	lr

0800ccac <xor_block>:

static void xor_block( void *d, const void *s )
{
 800ccac:	b480      	push	{r7}
 800ccae:	b083      	sub	sp, #12
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	781a      	ldrb	r2, [r3, #0]
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	4053      	eors	r3, r2
 800ccc0:	b2da      	uxtb	r2, r3
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	3301      	adds	r3, #1
 800ccca:	7819      	ldrb	r1, [r3, #0]
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	3301      	adds	r3, #1
 800ccd0:	781a      	ldrb	r2, [r3, #0]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	404a      	eors	r2, r1
 800ccd8:	b2d2      	uxtb	r2, r2
 800ccda:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	3302      	adds	r3, #2
 800cce0:	7819      	ldrb	r1, [r3, #0]
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	3302      	adds	r3, #2
 800cce6:	781a      	ldrb	r2, [r3, #0]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	3302      	adds	r3, #2
 800ccec:	404a      	eors	r2, r1
 800ccee:	b2d2      	uxtb	r2, r2
 800ccf0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	3303      	adds	r3, #3
 800ccf6:	7819      	ldrb	r1, [r3, #0]
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	3303      	adds	r3, #3
 800ccfc:	781a      	ldrb	r2, [r3, #0]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	3303      	adds	r3, #3
 800cd02:	404a      	eors	r2, r1
 800cd04:	b2d2      	uxtb	r2, r2
 800cd06:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	3304      	adds	r3, #4
 800cd0c:	7819      	ldrb	r1, [r3, #0]
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	3304      	adds	r3, #4
 800cd12:	781a      	ldrb	r2, [r3, #0]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	3304      	adds	r3, #4
 800cd18:	404a      	eors	r2, r1
 800cd1a:	b2d2      	uxtb	r2, r2
 800cd1c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	3305      	adds	r3, #5
 800cd22:	7819      	ldrb	r1, [r3, #0]
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	3305      	adds	r3, #5
 800cd28:	781a      	ldrb	r2, [r3, #0]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	3305      	adds	r3, #5
 800cd2e:	404a      	eors	r2, r1
 800cd30:	b2d2      	uxtb	r2, r2
 800cd32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	3306      	adds	r3, #6
 800cd38:	7819      	ldrb	r1, [r3, #0]
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	3306      	adds	r3, #6
 800cd3e:	781a      	ldrb	r2, [r3, #0]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	3306      	adds	r3, #6
 800cd44:	404a      	eors	r2, r1
 800cd46:	b2d2      	uxtb	r2, r2
 800cd48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	3307      	adds	r3, #7
 800cd4e:	7819      	ldrb	r1, [r3, #0]
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	3307      	adds	r3, #7
 800cd54:	781a      	ldrb	r2, [r3, #0]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	3307      	adds	r3, #7
 800cd5a:	404a      	eors	r2, r1
 800cd5c:	b2d2      	uxtb	r2, r2
 800cd5e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	3308      	adds	r3, #8
 800cd64:	7819      	ldrb	r1, [r3, #0]
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	3308      	adds	r3, #8
 800cd6a:	781a      	ldrb	r2, [r3, #0]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	3308      	adds	r3, #8
 800cd70:	404a      	eors	r2, r1
 800cd72:	b2d2      	uxtb	r2, r2
 800cd74:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	3309      	adds	r3, #9
 800cd7a:	7819      	ldrb	r1, [r3, #0]
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	3309      	adds	r3, #9
 800cd80:	781a      	ldrb	r2, [r3, #0]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	3309      	adds	r3, #9
 800cd86:	404a      	eors	r2, r1
 800cd88:	b2d2      	uxtb	r2, r2
 800cd8a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	330a      	adds	r3, #10
 800cd90:	7819      	ldrb	r1, [r3, #0]
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	330a      	adds	r3, #10
 800cd96:	781a      	ldrb	r2, [r3, #0]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	330a      	adds	r3, #10
 800cd9c:	404a      	eors	r2, r1
 800cd9e:	b2d2      	uxtb	r2, r2
 800cda0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	330b      	adds	r3, #11
 800cda6:	7819      	ldrb	r1, [r3, #0]
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	330b      	adds	r3, #11
 800cdac:	781a      	ldrb	r2, [r3, #0]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	330b      	adds	r3, #11
 800cdb2:	404a      	eors	r2, r1
 800cdb4:	b2d2      	uxtb	r2, r2
 800cdb6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	330c      	adds	r3, #12
 800cdbc:	7819      	ldrb	r1, [r3, #0]
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	330c      	adds	r3, #12
 800cdc2:	781a      	ldrb	r2, [r3, #0]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	330c      	adds	r3, #12
 800cdc8:	404a      	eors	r2, r1
 800cdca:	b2d2      	uxtb	r2, r2
 800cdcc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	330d      	adds	r3, #13
 800cdd2:	7819      	ldrb	r1, [r3, #0]
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	330d      	adds	r3, #13
 800cdd8:	781a      	ldrb	r2, [r3, #0]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	330d      	adds	r3, #13
 800cdde:	404a      	eors	r2, r1
 800cde0:	b2d2      	uxtb	r2, r2
 800cde2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	330e      	adds	r3, #14
 800cde8:	7819      	ldrb	r1, [r3, #0]
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	330e      	adds	r3, #14
 800cdee:	781a      	ldrb	r2, [r3, #0]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	330e      	adds	r3, #14
 800cdf4:	404a      	eors	r2, r1
 800cdf6:	b2d2      	uxtb	r2, r2
 800cdf8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	330f      	adds	r3, #15
 800cdfe:	7819      	ldrb	r1, [r3, #0]
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	330f      	adds	r3, #15
 800ce04:	781a      	ldrb	r2, [r3, #0]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	330f      	adds	r3, #15
 800ce0a:	404a      	eors	r2, r1
 800ce0c:	b2d2      	uxtb	r2, r2
 800ce0e:	701a      	strb	r2, [r3, #0]
#endif
}
 800ce10:	bf00      	nop
 800ce12:	370c      	adds	r7, #12
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bc80      	pop	{r7}
 800ce18:	4770      	bx	lr

0800ce1a <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800ce1a:	b480      	push	{r7}
 800ce1c:	b085      	sub	sp, #20
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	60f8      	str	r0, [r7, #12]
 800ce22:	60b9      	str	r1, [r7, #8]
 800ce24:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	781a      	ldrb	r2, [r3, #0]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	4053      	eors	r3, r2
 800ce30:	b2da      	uxtb	r2, r3
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	3301      	adds	r3, #1
 800ce3a:	7819      	ldrb	r1, [r3, #0]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	3301      	adds	r3, #1
 800ce40:	781a      	ldrb	r2, [r3, #0]
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	3301      	adds	r3, #1
 800ce46:	404a      	eors	r2, r1
 800ce48:	b2d2      	uxtb	r2, r2
 800ce4a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	3302      	adds	r3, #2
 800ce50:	7819      	ldrb	r1, [r3, #0]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	3302      	adds	r3, #2
 800ce56:	781a      	ldrb	r2, [r3, #0]
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	3302      	adds	r3, #2
 800ce5c:	404a      	eors	r2, r1
 800ce5e:	b2d2      	uxtb	r2, r2
 800ce60:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	3303      	adds	r3, #3
 800ce66:	7819      	ldrb	r1, [r3, #0]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	3303      	adds	r3, #3
 800ce6c:	781a      	ldrb	r2, [r3, #0]
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	3303      	adds	r3, #3
 800ce72:	404a      	eors	r2, r1
 800ce74:	b2d2      	uxtb	r2, r2
 800ce76:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	3304      	adds	r3, #4
 800ce7c:	7819      	ldrb	r1, [r3, #0]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	3304      	adds	r3, #4
 800ce82:	781a      	ldrb	r2, [r3, #0]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	3304      	adds	r3, #4
 800ce88:	404a      	eors	r2, r1
 800ce8a:	b2d2      	uxtb	r2, r2
 800ce8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	3305      	adds	r3, #5
 800ce92:	7819      	ldrb	r1, [r3, #0]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	3305      	adds	r3, #5
 800ce98:	781a      	ldrb	r2, [r3, #0]
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	3305      	adds	r3, #5
 800ce9e:	404a      	eors	r2, r1
 800cea0:	b2d2      	uxtb	r2, r2
 800cea2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	3306      	adds	r3, #6
 800cea8:	7819      	ldrb	r1, [r3, #0]
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	3306      	adds	r3, #6
 800ceae:	781a      	ldrb	r2, [r3, #0]
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	3306      	adds	r3, #6
 800ceb4:	404a      	eors	r2, r1
 800ceb6:	b2d2      	uxtb	r2, r2
 800ceb8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	3307      	adds	r3, #7
 800cebe:	7819      	ldrb	r1, [r3, #0]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	3307      	adds	r3, #7
 800cec4:	781a      	ldrb	r2, [r3, #0]
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	3307      	adds	r3, #7
 800ceca:	404a      	eors	r2, r1
 800cecc:	b2d2      	uxtb	r2, r2
 800cece:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	3308      	adds	r3, #8
 800ced4:	7819      	ldrb	r1, [r3, #0]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	3308      	adds	r3, #8
 800ceda:	781a      	ldrb	r2, [r3, #0]
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	3308      	adds	r3, #8
 800cee0:	404a      	eors	r2, r1
 800cee2:	b2d2      	uxtb	r2, r2
 800cee4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	3309      	adds	r3, #9
 800ceea:	7819      	ldrb	r1, [r3, #0]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	3309      	adds	r3, #9
 800cef0:	781a      	ldrb	r2, [r3, #0]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	3309      	adds	r3, #9
 800cef6:	404a      	eors	r2, r1
 800cef8:	b2d2      	uxtb	r2, r2
 800cefa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	330a      	adds	r3, #10
 800cf00:	7819      	ldrb	r1, [r3, #0]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	330a      	adds	r3, #10
 800cf06:	781a      	ldrb	r2, [r3, #0]
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	330a      	adds	r3, #10
 800cf0c:	404a      	eors	r2, r1
 800cf0e:	b2d2      	uxtb	r2, r2
 800cf10:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	330b      	adds	r3, #11
 800cf16:	7819      	ldrb	r1, [r3, #0]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	330b      	adds	r3, #11
 800cf1c:	781a      	ldrb	r2, [r3, #0]
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	330b      	adds	r3, #11
 800cf22:	404a      	eors	r2, r1
 800cf24:	b2d2      	uxtb	r2, r2
 800cf26:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	330c      	adds	r3, #12
 800cf2c:	7819      	ldrb	r1, [r3, #0]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	330c      	adds	r3, #12
 800cf32:	781a      	ldrb	r2, [r3, #0]
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	330c      	adds	r3, #12
 800cf38:	404a      	eors	r2, r1
 800cf3a:	b2d2      	uxtb	r2, r2
 800cf3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	330d      	adds	r3, #13
 800cf42:	7819      	ldrb	r1, [r3, #0]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	330d      	adds	r3, #13
 800cf48:	781a      	ldrb	r2, [r3, #0]
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	330d      	adds	r3, #13
 800cf4e:	404a      	eors	r2, r1
 800cf50:	b2d2      	uxtb	r2, r2
 800cf52:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	330e      	adds	r3, #14
 800cf58:	7819      	ldrb	r1, [r3, #0]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	330e      	adds	r3, #14
 800cf5e:	781a      	ldrb	r2, [r3, #0]
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	330e      	adds	r3, #14
 800cf64:	404a      	eors	r2, r1
 800cf66:	b2d2      	uxtb	r2, r2
 800cf68:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	330f      	adds	r3, #15
 800cf6e:	7819      	ldrb	r1, [r3, #0]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	330f      	adds	r3, #15
 800cf74:	781a      	ldrb	r2, [r3, #0]
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	330f      	adds	r3, #15
 800cf7a:	404a      	eors	r2, r1
 800cf7c:	b2d2      	uxtb	r2, r2
 800cf7e:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800cf80:	bf00      	nop
 800cf82:	3714      	adds	r7, #20
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bc80      	pop	{r7}
 800cf88:	4770      	bx	lr

0800cf8a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800cf8a:	b580      	push	{r7, lr}
 800cf8c:	b082      	sub	sp, #8
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	6078      	str	r0, [r7, #4]
 800cf92:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800cf94:	6839      	ldr	r1, [r7, #0]
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f7ff fe88 	bl	800ccac <xor_block>
}
 800cf9c:	bf00      	nop
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800cfa4:	b480      	push	{r7}
 800cfa6:	b085      	sub	sp, #20
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	4b48      	ldr	r3, [pc, #288]	; (800d0d4 <shift_sub_rows+0x130>)
 800cfb4:	5c9a      	ldrb	r2, [r3, r2]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	701a      	strb	r2, [r3, #0]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	3304      	adds	r3, #4
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	3304      	adds	r3, #4
 800cfc6:	4a43      	ldr	r2, [pc, #268]	; (800d0d4 <shift_sub_rows+0x130>)
 800cfc8:	5c52      	ldrb	r2, [r2, r1]
 800cfca:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	3308      	adds	r3, #8
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	3308      	adds	r3, #8
 800cfd8:	4a3e      	ldr	r2, [pc, #248]	; (800d0d4 <shift_sub_rows+0x130>)
 800cfda:	5c52      	ldrb	r2, [r2, r1]
 800cfdc:	701a      	strb	r2, [r3, #0]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	330c      	adds	r3, #12
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	330c      	adds	r3, #12
 800cfea:	4a3a      	ldr	r2, [pc, #232]	; (800d0d4 <shift_sub_rows+0x130>)
 800cfec:	5c52      	ldrb	r2, [r2, r1]
 800cfee:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	785b      	ldrb	r3, [r3, #1]
 800cff4:	73fb      	strb	r3, [r7, #15]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	3305      	adds	r3, #5
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	4619      	mov	r1, r3
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	3301      	adds	r3, #1
 800d002:	4a34      	ldr	r2, [pc, #208]	; (800d0d4 <shift_sub_rows+0x130>)
 800d004:	5c52      	ldrb	r2, [r2, r1]
 800d006:	701a      	strb	r2, [r3, #0]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	3309      	adds	r3, #9
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	4619      	mov	r1, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	3305      	adds	r3, #5
 800d014:	4a2f      	ldr	r2, [pc, #188]	; (800d0d4 <shift_sub_rows+0x130>)
 800d016:	5c52      	ldrb	r2, [r2, r1]
 800d018:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	330d      	adds	r3, #13
 800d01e:	781b      	ldrb	r3, [r3, #0]
 800d020:	4619      	mov	r1, r3
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	3309      	adds	r3, #9
 800d026:	4a2b      	ldr	r2, [pc, #172]	; (800d0d4 <shift_sub_rows+0x130>)
 800d028:	5c52      	ldrb	r2, [r2, r1]
 800d02a:	701a      	strb	r2, [r3, #0]
 800d02c:	7bfa      	ldrb	r2, [r7, #15]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	330d      	adds	r3, #13
 800d032:	4928      	ldr	r1, [pc, #160]	; (800d0d4 <shift_sub_rows+0x130>)
 800d034:	5c8a      	ldrb	r2, [r1, r2]
 800d036:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	789b      	ldrb	r3, [r3, #2]
 800d03c:	73fb      	strb	r3, [r7, #15]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	330a      	adds	r3, #10
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	4619      	mov	r1, r3
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	3302      	adds	r3, #2
 800d04a:	4a22      	ldr	r2, [pc, #136]	; (800d0d4 <shift_sub_rows+0x130>)
 800d04c:	5c52      	ldrb	r2, [r2, r1]
 800d04e:	701a      	strb	r2, [r3, #0]
 800d050:	7bfa      	ldrb	r2, [r7, #15]
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	330a      	adds	r3, #10
 800d056:	491f      	ldr	r1, [pc, #124]	; (800d0d4 <shift_sub_rows+0x130>)
 800d058:	5c8a      	ldrb	r2, [r1, r2]
 800d05a:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	799b      	ldrb	r3, [r3, #6]
 800d060:	73fb      	strb	r3, [r7, #15]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	330e      	adds	r3, #14
 800d066:	781b      	ldrb	r3, [r3, #0]
 800d068:	4619      	mov	r1, r3
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	3306      	adds	r3, #6
 800d06e:	4a19      	ldr	r2, [pc, #100]	; (800d0d4 <shift_sub_rows+0x130>)
 800d070:	5c52      	ldrb	r2, [r2, r1]
 800d072:	701a      	strb	r2, [r3, #0]
 800d074:	7bfa      	ldrb	r2, [r7, #15]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	330e      	adds	r3, #14
 800d07a:	4916      	ldr	r1, [pc, #88]	; (800d0d4 <shift_sub_rows+0x130>)
 800d07c:	5c8a      	ldrb	r2, [r1, r2]
 800d07e:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	7bdb      	ldrb	r3, [r3, #15]
 800d084:	73fb      	strb	r3, [r7, #15]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	330b      	adds	r3, #11
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	4619      	mov	r1, r3
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	330f      	adds	r3, #15
 800d092:	4a10      	ldr	r2, [pc, #64]	; (800d0d4 <shift_sub_rows+0x130>)
 800d094:	5c52      	ldrb	r2, [r2, r1]
 800d096:	701a      	strb	r2, [r3, #0]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	3307      	adds	r3, #7
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	4619      	mov	r1, r3
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	330b      	adds	r3, #11
 800d0a4:	4a0b      	ldr	r2, [pc, #44]	; (800d0d4 <shift_sub_rows+0x130>)
 800d0a6:	5c52      	ldrb	r2, [r2, r1]
 800d0a8:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	3303      	adds	r3, #3
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	3307      	adds	r3, #7
 800d0b6:	4a07      	ldr	r2, [pc, #28]	; (800d0d4 <shift_sub_rows+0x130>)
 800d0b8:	5c52      	ldrb	r2, [r2, r1]
 800d0ba:	701a      	strb	r2, [r3, #0]
 800d0bc:	7bfa      	ldrb	r2, [r7, #15]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	3303      	adds	r3, #3
 800d0c2:	4904      	ldr	r1, [pc, #16]	; (800d0d4 <shift_sub_rows+0x130>)
 800d0c4:	5c8a      	ldrb	r2, [r1, r2]
 800d0c6:	701a      	strb	r2, [r3, #0]
}
 800d0c8:	bf00      	nop
 800d0ca:	3714      	adds	r7, #20
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bc80      	pop	{r7}
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop
 800d0d4:	0801f89c 	.word	0x0801f89c

0800d0d8 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b086      	sub	sp, #24
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800d0e0:	f107 0308 	add.w	r3, r7, #8
 800d0e4:	6879      	ldr	r1, [r7, #4]
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f7ff fd6c 	bl	800cbc4 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800d0ec:	7a3b      	ldrb	r3, [r7, #8]
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	4b9a      	ldr	r3, [pc, #616]	; (800d35c <mix_sub_columns+0x284>)
 800d0f2:	5c9a      	ldrb	r2, [r3, r2]
 800d0f4:	7b7b      	ldrb	r3, [r7, #13]
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	4b99      	ldr	r3, [pc, #612]	; (800d360 <mix_sub_columns+0x288>)
 800d0fa:	5c5b      	ldrb	r3, [r3, r1]
 800d0fc:	4053      	eors	r3, r2
 800d0fe:	b2da      	uxtb	r2, r3
 800d100:	7cbb      	ldrb	r3, [r7, #18]
 800d102:	4619      	mov	r1, r3
 800d104:	4b97      	ldr	r3, [pc, #604]	; (800d364 <mix_sub_columns+0x28c>)
 800d106:	5c5b      	ldrb	r3, [r3, r1]
 800d108:	4053      	eors	r3, r2
 800d10a:	b2da      	uxtb	r2, r3
 800d10c:	7dfb      	ldrb	r3, [r7, #23]
 800d10e:	4619      	mov	r1, r3
 800d110:	4b94      	ldr	r3, [pc, #592]	; (800d364 <mix_sub_columns+0x28c>)
 800d112:	5c5b      	ldrb	r3, [r3, r1]
 800d114:	4053      	eors	r3, r2
 800d116:	b2da      	uxtb	r2, r3
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800d11c:	7a3b      	ldrb	r3, [r7, #8]
 800d11e:	461a      	mov	r2, r3
 800d120:	4b90      	ldr	r3, [pc, #576]	; (800d364 <mix_sub_columns+0x28c>)
 800d122:	5c9a      	ldrb	r2, [r3, r2]
 800d124:	7b7b      	ldrb	r3, [r7, #13]
 800d126:	4619      	mov	r1, r3
 800d128:	4b8c      	ldr	r3, [pc, #560]	; (800d35c <mix_sub_columns+0x284>)
 800d12a:	5c5b      	ldrb	r3, [r3, r1]
 800d12c:	4053      	eors	r3, r2
 800d12e:	b2da      	uxtb	r2, r3
 800d130:	7cbb      	ldrb	r3, [r7, #18]
 800d132:	4619      	mov	r1, r3
 800d134:	4b8a      	ldr	r3, [pc, #552]	; (800d360 <mix_sub_columns+0x288>)
 800d136:	5c5b      	ldrb	r3, [r3, r1]
 800d138:	4053      	eors	r3, r2
 800d13a:	b2d9      	uxtb	r1, r3
 800d13c:	7dfb      	ldrb	r3, [r7, #23]
 800d13e:	461a      	mov	r2, r3
 800d140:	4b88      	ldr	r3, [pc, #544]	; (800d364 <mix_sub_columns+0x28c>)
 800d142:	5c9a      	ldrb	r2, [r3, r2]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	3301      	adds	r3, #1
 800d148:	404a      	eors	r2, r1
 800d14a:	b2d2      	uxtb	r2, r2
 800d14c:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800d14e:	7a3b      	ldrb	r3, [r7, #8]
 800d150:	461a      	mov	r2, r3
 800d152:	4b84      	ldr	r3, [pc, #528]	; (800d364 <mix_sub_columns+0x28c>)
 800d154:	5c9a      	ldrb	r2, [r3, r2]
 800d156:	7b7b      	ldrb	r3, [r7, #13]
 800d158:	4619      	mov	r1, r3
 800d15a:	4b82      	ldr	r3, [pc, #520]	; (800d364 <mix_sub_columns+0x28c>)
 800d15c:	5c5b      	ldrb	r3, [r3, r1]
 800d15e:	4053      	eors	r3, r2
 800d160:	b2da      	uxtb	r2, r3
 800d162:	7cbb      	ldrb	r3, [r7, #18]
 800d164:	4619      	mov	r1, r3
 800d166:	4b7d      	ldr	r3, [pc, #500]	; (800d35c <mix_sub_columns+0x284>)
 800d168:	5c5b      	ldrb	r3, [r3, r1]
 800d16a:	4053      	eors	r3, r2
 800d16c:	b2d9      	uxtb	r1, r3
 800d16e:	7dfb      	ldrb	r3, [r7, #23]
 800d170:	461a      	mov	r2, r3
 800d172:	4b7b      	ldr	r3, [pc, #492]	; (800d360 <mix_sub_columns+0x288>)
 800d174:	5c9a      	ldrb	r2, [r3, r2]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	3302      	adds	r3, #2
 800d17a:	404a      	eors	r2, r1
 800d17c:	b2d2      	uxtb	r2, r2
 800d17e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800d180:	7a3b      	ldrb	r3, [r7, #8]
 800d182:	461a      	mov	r2, r3
 800d184:	4b76      	ldr	r3, [pc, #472]	; (800d360 <mix_sub_columns+0x288>)
 800d186:	5c9a      	ldrb	r2, [r3, r2]
 800d188:	7b7b      	ldrb	r3, [r7, #13]
 800d18a:	4619      	mov	r1, r3
 800d18c:	4b75      	ldr	r3, [pc, #468]	; (800d364 <mix_sub_columns+0x28c>)
 800d18e:	5c5b      	ldrb	r3, [r3, r1]
 800d190:	4053      	eors	r3, r2
 800d192:	b2da      	uxtb	r2, r3
 800d194:	7cbb      	ldrb	r3, [r7, #18]
 800d196:	4619      	mov	r1, r3
 800d198:	4b72      	ldr	r3, [pc, #456]	; (800d364 <mix_sub_columns+0x28c>)
 800d19a:	5c5b      	ldrb	r3, [r3, r1]
 800d19c:	4053      	eors	r3, r2
 800d19e:	b2d9      	uxtb	r1, r3
 800d1a0:	7dfb      	ldrb	r3, [r7, #23]
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	4b6d      	ldr	r3, [pc, #436]	; (800d35c <mix_sub_columns+0x284>)
 800d1a6:	5c9a      	ldrb	r2, [r3, r2]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	3303      	adds	r3, #3
 800d1ac:	404a      	eors	r2, r1
 800d1ae:	b2d2      	uxtb	r2, r2
 800d1b0:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800d1b2:	7b3b      	ldrb	r3, [r7, #12]
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	4b69      	ldr	r3, [pc, #420]	; (800d35c <mix_sub_columns+0x284>)
 800d1b8:	5c9a      	ldrb	r2, [r3, r2]
 800d1ba:	7c7b      	ldrb	r3, [r7, #17]
 800d1bc:	4619      	mov	r1, r3
 800d1be:	4b68      	ldr	r3, [pc, #416]	; (800d360 <mix_sub_columns+0x288>)
 800d1c0:	5c5b      	ldrb	r3, [r3, r1]
 800d1c2:	4053      	eors	r3, r2
 800d1c4:	b2da      	uxtb	r2, r3
 800d1c6:	7dbb      	ldrb	r3, [r7, #22]
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	4b66      	ldr	r3, [pc, #408]	; (800d364 <mix_sub_columns+0x28c>)
 800d1cc:	5c5b      	ldrb	r3, [r3, r1]
 800d1ce:	4053      	eors	r3, r2
 800d1d0:	b2d9      	uxtb	r1, r3
 800d1d2:	7afb      	ldrb	r3, [r7, #11]
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	4b63      	ldr	r3, [pc, #396]	; (800d364 <mix_sub_columns+0x28c>)
 800d1d8:	5c9a      	ldrb	r2, [r3, r2]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	3304      	adds	r3, #4
 800d1de:	404a      	eors	r2, r1
 800d1e0:	b2d2      	uxtb	r2, r2
 800d1e2:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800d1e4:	7b3b      	ldrb	r3, [r7, #12]
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	4b5e      	ldr	r3, [pc, #376]	; (800d364 <mix_sub_columns+0x28c>)
 800d1ea:	5c9a      	ldrb	r2, [r3, r2]
 800d1ec:	7c7b      	ldrb	r3, [r7, #17]
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	4b5a      	ldr	r3, [pc, #360]	; (800d35c <mix_sub_columns+0x284>)
 800d1f2:	5c5b      	ldrb	r3, [r3, r1]
 800d1f4:	4053      	eors	r3, r2
 800d1f6:	b2da      	uxtb	r2, r3
 800d1f8:	7dbb      	ldrb	r3, [r7, #22]
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	4b58      	ldr	r3, [pc, #352]	; (800d360 <mix_sub_columns+0x288>)
 800d1fe:	5c5b      	ldrb	r3, [r3, r1]
 800d200:	4053      	eors	r3, r2
 800d202:	b2d9      	uxtb	r1, r3
 800d204:	7afb      	ldrb	r3, [r7, #11]
 800d206:	461a      	mov	r2, r3
 800d208:	4b56      	ldr	r3, [pc, #344]	; (800d364 <mix_sub_columns+0x28c>)
 800d20a:	5c9a      	ldrb	r2, [r3, r2]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	3305      	adds	r3, #5
 800d210:	404a      	eors	r2, r1
 800d212:	b2d2      	uxtb	r2, r2
 800d214:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800d216:	7b3b      	ldrb	r3, [r7, #12]
 800d218:	461a      	mov	r2, r3
 800d21a:	4b52      	ldr	r3, [pc, #328]	; (800d364 <mix_sub_columns+0x28c>)
 800d21c:	5c9a      	ldrb	r2, [r3, r2]
 800d21e:	7c7b      	ldrb	r3, [r7, #17]
 800d220:	4619      	mov	r1, r3
 800d222:	4b50      	ldr	r3, [pc, #320]	; (800d364 <mix_sub_columns+0x28c>)
 800d224:	5c5b      	ldrb	r3, [r3, r1]
 800d226:	4053      	eors	r3, r2
 800d228:	b2da      	uxtb	r2, r3
 800d22a:	7dbb      	ldrb	r3, [r7, #22]
 800d22c:	4619      	mov	r1, r3
 800d22e:	4b4b      	ldr	r3, [pc, #300]	; (800d35c <mix_sub_columns+0x284>)
 800d230:	5c5b      	ldrb	r3, [r3, r1]
 800d232:	4053      	eors	r3, r2
 800d234:	b2d9      	uxtb	r1, r3
 800d236:	7afb      	ldrb	r3, [r7, #11]
 800d238:	461a      	mov	r2, r3
 800d23a:	4b49      	ldr	r3, [pc, #292]	; (800d360 <mix_sub_columns+0x288>)
 800d23c:	5c9a      	ldrb	r2, [r3, r2]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	3306      	adds	r3, #6
 800d242:	404a      	eors	r2, r1
 800d244:	b2d2      	uxtb	r2, r2
 800d246:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800d248:	7b3b      	ldrb	r3, [r7, #12]
 800d24a:	461a      	mov	r2, r3
 800d24c:	4b44      	ldr	r3, [pc, #272]	; (800d360 <mix_sub_columns+0x288>)
 800d24e:	5c9a      	ldrb	r2, [r3, r2]
 800d250:	7c7b      	ldrb	r3, [r7, #17]
 800d252:	4619      	mov	r1, r3
 800d254:	4b43      	ldr	r3, [pc, #268]	; (800d364 <mix_sub_columns+0x28c>)
 800d256:	5c5b      	ldrb	r3, [r3, r1]
 800d258:	4053      	eors	r3, r2
 800d25a:	b2da      	uxtb	r2, r3
 800d25c:	7dbb      	ldrb	r3, [r7, #22]
 800d25e:	4619      	mov	r1, r3
 800d260:	4b40      	ldr	r3, [pc, #256]	; (800d364 <mix_sub_columns+0x28c>)
 800d262:	5c5b      	ldrb	r3, [r3, r1]
 800d264:	4053      	eors	r3, r2
 800d266:	b2d9      	uxtb	r1, r3
 800d268:	7afb      	ldrb	r3, [r7, #11]
 800d26a:	461a      	mov	r2, r3
 800d26c:	4b3b      	ldr	r3, [pc, #236]	; (800d35c <mix_sub_columns+0x284>)
 800d26e:	5c9a      	ldrb	r2, [r3, r2]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	3307      	adds	r3, #7
 800d274:	404a      	eors	r2, r1
 800d276:	b2d2      	uxtb	r2, r2
 800d278:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800d27a:	7c3b      	ldrb	r3, [r7, #16]
 800d27c:	461a      	mov	r2, r3
 800d27e:	4b37      	ldr	r3, [pc, #220]	; (800d35c <mix_sub_columns+0x284>)
 800d280:	5c9a      	ldrb	r2, [r3, r2]
 800d282:	7d7b      	ldrb	r3, [r7, #21]
 800d284:	4619      	mov	r1, r3
 800d286:	4b36      	ldr	r3, [pc, #216]	; (800d360 <mix_sub_columns+0x288>)
 800d288:	5c5b      	ldrb	r3, [r3, r1]
 800d28a:	4053      	eors	r3, r2
 800d28c:	b2da      	uxtb	r2, r3
 800d28e:	7abb      	ldrb	r3, [r7, #10]
 800d290:	4619      	mov	r1, r3
 800d292:	4b34      	ldr	r3, [pc, #208]	; (800d364 <mix_sub_columns+0x28c>)
 800d294:	5c5b      	ldrb	r3, [r3, r1]
 800d296:	4053      	eors	r3, r2
 800d298:	b2d9      	uxtb	r1, r3
 800d29a:	7bfb      	ldrb	r3, [r7, #15]
 800d29c:	461a      	mov	r2, r3
 800d29e:	4b31      	ldr	r3, [pc, #196]	; (800d364 <mix_sub_columns+0x28c>)
 800d2a0:	5c9a      	ldrb	r2, [r3, r2]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	3308      	adds	r3, #8
 800d2a6:	404a      	eors	r2, r1
 800d2a8:	b2d2      	uxtb	r2, r2
 800d2aa:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800d2ac:	7c3b      	ldrb	r3, [r7, #16]
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	4b2c      	ldr	r3, [pc, #176]	; (800d364 <mix_sub_columns+0x28c>)
 800d2b2:	5c9a      	ldrb	r2, [r3, r2]
 800d2b4:	7d7b      	ldrb	r3, [r7, #21]
 800d2b6:	4619      	mov	r1, r3
 800d2b8:	4b28      	ldr	r3, [pc, #160]	; (800d35c <mix_sub_columns+0x284>)
 800d2ba:	5c5b      	ldrb	r3, [r3, r1]
 800d2bc:	4053      	eors	r3, r2
 800d2be:	b2da      	uxtb	r2, r3
 800d2c0:	7abb      	ldrb	r3, [r7, #10]
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	4b26      	ldr	r3, [pc, #152]	; (800d360 <mix_sub_columns+0x288>)
 800d2c6:	5c5b      	ldrb	r3, [r3, r1]
 800d2c8:	4053      	eors	r3, r2
 800d2ca:	b2d9      	uxtb	r1, r3
 800d2cc:	7bfb      	ldrb	r3, [r7, #15]
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	4b24      	ldr	r3, [pc, #144]	; (800d364 <mix_sub_columns+0x28c>)
 800d2d2:	5c9a      	ldrb	r2, [r3, r2]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	3309      	adds	r3, #9
 800d2d8:	404a      	eors	r2, r1
 800d2da:	b2d2      	uxtb	r2, r2
 800d2dc:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800d2de:	7c3b      	ldrb	r3, [r7, #16]
 800d2e0:	461a      	mov	r2, r3
 800d2e2:	4b20      	ldr	r3, [pc, #128]	; (800d364 <mix_sub_columns+0x28c>)
 800d2e4:	5c9a      	ldrb	r2, [r3, r2]
 800d2e6:	7d7b      	ldrb	r3, [r7, #21]
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	4b1e      	ldr	r3, [pc, #120]	; (800d364 <mix_sub_columns+0x28c>)
 800d2ec:	5c5b      	ldrb	r3, [r3, r1]
 800d2ee:	4053      	eors	r3, r2
 800d2f0:	b2da      	uxtb	r2, r3
 800d2f2:	7abb      	ldrb	r3, [r7, #10]
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	4b19      	ldr	r3, [pc, #100]	; (800d35c <mix_sub_columns+0x284>)
 800d2f8:	5c5b      	ldrb	r3, [r3, r1]
 800d2fa:	4053      	eors	r3, r2
 800d2fc:	b2d9      	uxtb	r1, r3
 800d2fe:	7bfb      	ldrb	r3, [r7, #15]
 800d300:	461a      	mov	r2, r3
 800d302:	4b17      	ldr	r3, [pc, #92]	; (800d360 <mix_sub_columns+0x288>)
 800d304:	5c9a      	ldrb	r2, [r3, r2]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	330a      	adds	r3, #10
 800d30a:	404a      	eors	r2, r1
 800d30c:	b2d2      	uxtb	r2, r2
 800d30e:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800d310:	7c3b      	ldrb	r3, [r7, #16]
 800d312:	461a      	mov	r2, r3
 800d314:	4b12      	ldr	r3, [pc, #72]	; (800d360 <mix_sub_columns+0x288>)
 800d316:	5c9a      	ldrb	r2, [r3, r2]
 800d318:	7d7b      	ldrb	r3, [r7, #21]
 800d31a:	4619      	mov	r1, r3
 800d31c:	4b11      	ldr	r3, [pc, #68]	; (800d364 <mix_sub_columns+0x28c>)
 800d31e:	5c5b      	ldrb	r3, [r3, r1]
 800d320:	4053      	eors	r3, r2
 800d322:	b2da      	uxtb	r2, r3
 800d324:	7abb      	ldrb	r3, [r7, #10]
 800d326:	4619      	mov	r1, r3
 800d328:	4b0e      	ldr	r3, [pc, #56]	; (800d364 <mix_sub_columns+0x28c>)
 800d32a:	5c5b      	ldrb	r3, [r3, r1]
 800d32c:	4053      	eors	r3, r2
 800d32e:	b2d9      	uxtb	r1, r3
 800d330:	7bfb      	ldrb	r3, [r7, #15]
 800d332:	461a      	mov	r2, r3
 800d334:	4b09      	ldr	r3, [pc, #36]	; (800d35c <mix_sub_columns+0x284>)
 800d336:	5c9a      	ldrb	r2, [r3, r2]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	330b      	adds	r3, #11
 800d33c:	404a      	eors	r2, r1
 800d33e:	b2d2      	uxtb	r2, r2
 800d340:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800d342:	7d3b      	ldrb	r3, [r7, #20]
 800d344:	461a      	mov	r2, r3
 800d346:	4b05      	ldr	r3, [pc, #20]	; (800d35c <mix_sub_columns+0x284>)
 800d348:	5c9a      	ldrb	r2, [r3, r2]
 800d34a:	7a7b      	ldrb	r3, [r7, #9]
 800d34c:	4619      	mov	r1, r3
 800d34e:	4b04      	ldr	r3, [pc, #16]	; (800d360 <mix_sub_columns+0x288>)
 800d350:	5c5b      	ldrb	r3, [r3, r1]
 800d352:	4053      	eors	r3, r2
 800d354:	b2da      	uxtb	r2, r3
 800d356:	7bbb      	ldrb	r3, [r7, #14]
 800d358:	4619      	mov	r1, r3
 800d35a:	e005      	b.n	800d368 <mix_sub_columns+0x290>
 800d35c:	0801f99c 	.word	0x0801f99c
 800d360:	0801fa9c 	.word	0x0801fa9c
 800d364:	0801f89c 	.word	0x0801f89c
 800d368:	4b2d      	ldr	r3, [pc, #180]	; (800d420 <mix_sub_columns+0x348>)
 800d36a:	5c5b      	ldrb	r3, [r3, r1]
 800d36c:	4053      	eors	r3, r2
 800d36e:	b2d9      	uxtb	r1, r3
 800d370:	7cfb      	ldrb	r3, [r7, #19]
 800d372:	461a      	mov	r2, r3
 800d374:	4b2a      	ldr	r3, [pc, #168]	; (800d420 <mix_sub_columns+0x348>)
 800d376:	5c9a      	ldrb	r2, [r3, r2]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	330c      	adds	r3, #12
 800d37c:	404a      	eors	r2, r1
 800d37e:	b2d2      	uxtb	r2, r2
 800d380:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800d382:	7d3b      	ldrb	r3, [r7, #20]
 800d384:	461a      	mov	r2, r3
 800d386:	4b26      	ldr	r3, [pc, #152]	; (800d420 <mix_sub_columns+0x348>)
 800d388:	5c9a      	ldrb	r2, [r3, r2]
 800d38a:	7a7b      	ldrb	r3, [r7, #9]
 800d38c:	4619      	mov	r1, r3
 800d38e:	4b25      	ldr	r3, [pc, #148]	; (800d424 <mix_sub_columns+0x34c>)
 800d390:	5c5b      	ldrb	r3, [r3, r1]
 800d392:	4053      	eors	r3, r2
 800d394:	b2da      	uxtb	r2, r3
 800d396:	7bbb      	ldrb	r3, [r7, #14]
 800d398:	4619      	mov	r1, r3
 800d39a:	4b23      	ldr	r3, [pc, #140]	; (800d428 <mix_sub_columns+0x350>)
 800d39c:	5c5b      	ldrb	r3, [r3, r1]
 800d39e:	4053      	eors	r3, r2
 800d3a0:	b2d9      	uxtb	r1, r3
 800d3a2:	7cfb      	ldrb	r3, [r7, #19]
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	4b1e      	ldr	r3, [pc, #120]	; (800d420 <mix_sub_columns+0x348>)
 800d3a8:	5c9a      	ldrb	r2, [r3, r2]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	330d      	adds	r3, #13
 800d3ae:	404a      	eors	r2, r1
 800d3b0:	b2d2      	uxtb	r2, r2
 800d3b2:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800d3b4:	7d3b      	ldrb	r3, [r7, #20]
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	4b19      	ldr	r3, [pc, #100]	; (800d420 <mix_sub_columns+0x348>)
 800d3ba:	5c9a      	ldrb	r2, [r3, r2]
 800d3bc:	7a7b      	ldrb	r3, [r7, #9]
 800d3be:	4619      	mov	r1, r3
 800d3c0:	4b17      	ldr	r3, [pc, #92]	; (800d420 <mix_sub_columns+0x348>)
 800d3c2:	5c5b      	ldrb	r3, [r3, r1]
 800d3c4:	4053      	eors	r3, r2
 800d3c6:	b2da      	uxtb	r2, r3
 800d3c8:	7bbb      	ldrb	r3, [r7, #14]
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	4b15      	ldr	r3, [pc, #84]	; (800d424 <mix_sub_columns+0x34c>)
 800d3ce:	5c5b      	ldrb	r3, [r3, r1]
 800d3d0:	4053      	eors	r3, r2
 800d3d2:	b2d9      	uxtb	r1, r3
 800d3d4:	7cfb      	ldrb	r3, [r7, #19]
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	4b13      	ldr	r3, [pc, #76]	; (800d428 <mix_sub_columns+0x350>)
 800d3da:	5c9a      	ldrb	r2, [r3, r2]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	330e      	adds	r3, #14
 800d3e0:	404a      	eors	r2, r1
 800d3e2:	b2d2      	uxtb	r2, r2
 800d3e4:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800d3e6:	7d3b      	ldrb	r3, [r7, #20]
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	4b0f      	ldr	r3, [pc, #60]	; (800d428 <mix_sub_columns+0x350>)
 800d3ec:	5c9a      	ldrb	r2, [r3, r2]
 800d3ee:	7a7b      	ldrb	r3, [r7, #9]
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	4b0b      	ldr	r3, [pc, #44]	; (800d420 <mix_sub_columns+0x348>)
 800d3f4:	5c5b      	ldrb	r3, [r3, r1]
 800d3f6:	4053      	eors	r3, r2
 800d3f8:	b2da      	uxtb	r2, r3
 800d3fa:	7bbb      	ldrb	r3, [r7, #14]
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	4b08      	ldr	r3, [pc, #32]	; (800d420 <mix_sub_columns+0x348>)
 800d400:	5c5b      	ldrb	r3, [r3, r1]
 800d402:	4053      	eors	r3, r2
 800d404:	b2d9      	uxtb	r1, r3
 800d406:	7cfb      	ldrb	r3, [r7, #19]
 800d408:	461a      	mov	r2, r3
 800d40a:	4b06      	ldr	r3, [pc, #24]	; (800d424 <mix_sub_columns+0x34c>)
 800d40c:	5c9a      	ldrb	r2, [r3, r2]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	330f      	adds	r3, #15
 800d412:	404a      	eors	r2, r1
 800d414:	b2d2      	uxtb	r2, r2
 800d416:	701a      	strb	r2, [r3, #0]
  }
 800d418:	bf00      	nop
 800d41a:	3718      	adds	r7, #24
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}
 800d420:	0801f89c 	.word	0x0801f89c
 800d424:	0801f99c 	.word	0x0801f99c
 800d428:	0801fa9c 	.word	0x0801fa9c

0800d42c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b086      	sub	sp, #24
 800d430:	af00      	add	r7, sp, #0
 800d432:	60f8      	str	r0, [r7, #12]
 800d434:	460b      	mov	r3, r1
 800d436:	607a      	str	r2, [r7, #4]
 800d438:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800d43a:	7afb      	ldrb	r3, [r7, #11]
 800d43c:	3b10      	subs	r3, #16
 800d43e:	2b10      	cmp	r3, #16
 800d440:	bf8c      	ite	hi
 800d442:	2201      	movhi	r2, #1
 800d444:	2200      	movls	r2, #0
 800d446:	b2d2      	uxtb	r2, r2
 800d448:	2a00      	cmp	r2, #0
 800d44a:	d10d      	bne.n	800d468 <lorawan_aes_set_key+0x3c>
 800d44c:	2201      	movs	r2, #1
 800d44e:	fa02 f303 	lsl.w	r3, r2, r3
 800d452:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800d456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	bf14      	ite	ne
 800d45e:	2301      	movne	r3, #1
 800d460:	2300      	moveq	r3, #0
 800d462:	b2db      	uxtb	r3, r3
 800d464:	2b00      	cmp	r3, #0
 800d466:	d105      	bne.n	800d474 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2200      	movs	r2, #0
 800d46c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800d470:	23ff      	movs	r3, #255	; 0xff
 800d472:	e0b2      	b.n	800d5da <lorawan_aes_set_key+0x1ae>
        break;
 800d474:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	7afa      	ldrb	r2, [r7, #11]
 800d47a:	68f9      	ldr	r1, [r7, #12]
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7ff fbfa 	bl	800cc76 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800d482:	7afb      	ldrb	r3, [r7, #11]
 800d484:	331c      	adds	r3, #28
 800d486:	b2db      	uxtb	r3, r3
 800d488:	009b      	lsls	r3, r3, #2
 800d48a:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800d48c:	7c7b      	ldrb	r3, [r7, #17]
 800d48e:	091b      	lsrs	r3, r3, #4
 800d490:	b2db      	uxtb	r3, r3
 800d492:	3b01      	subs	r3, #1
 800d494:	b2da      	uxtb	r2, r3
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d49c:	7afb      	ldrb	r3, [r7, #11]
 800d49e:	75fb      	strb	r3, [r7, #23]
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	75bb      	strb	r3, [r7, #22]
 800d4a4:	e093      	b.n	800d5ce <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800d4a6:	7dfb      	ldrb	r3, [r7, #23]
 800d4a8:	3b04      	subs	r3, #4
 800d4aa:	687a      	ldr	r2, [r7, #4]
 800d4ac:	5cd3      	ldrb	r3, [r2, r3]
 800d4ae:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800d4b0:	7dfb      	ldrb	r3, [r7, #23]
 800d4b2:	3b03      	subs	r3, #3
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	5cd3      	ldrb	r3, [r2, r3]
 800d4b8:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800d4ba:	7dfb      	ldrb	r3, [r7, #23]
 800d4bc:	3b02      	subs	r3, #2
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	5cd3      	ldrb	r3, [r2, r3]
 800d4c2:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800d4c4:	7dfb      	ldrb	r3, [r7, #23]
 800d4c6:	3b01      	subs	r3, #1
 800d4c8:	687a      	ldr	r2, [r7, #4]
 800d4ca:	5cd3      	ldrb	r3, [r2, r3]
 800d4cc:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800d4ce:	7dfb      	ldrb	r3, [r7, #23]
 800d4d0:	7afa      	ldrb	r2, [r7, #11]
 800d4d2:	fbb3 f1f2 	udiv	r1, r3, r2
 800d4d6:	fb01 f202 	mul.w	r2, r1, r2
 800d4da:	1a9b      	subs	r3, r3, r2
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d127      	bne.n	800d532 <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800d4e2:	7d7b      	ldrb	r3, [r7, #21]
 800d4e4:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800d4e6:	7d3b      	ldrb	r3, [r7, #20]
 800d4e8:	4a3e      	ldr	r2, [pc, #248]	; (800d5e4 <lorawan_aes_set_key+0x1b8>)
 800d4ea:	5cd2      	ldrb	r2, [r2, r3]
 800d4ec:	7dbb      	ldrb	r3, [r7, #22]
 800d4ee:	4053      	eors	r3, r2
 800d4f0:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800d4f2:	7cfb      	ldrb	r3, [r7, #19]
 800d4f4:	4a3b      	ldr	r2, [pc, #236]	; (800d5e4 <lorawan_aes_set_key+0x1b8>)
 800d4f6:	5cd3      	ldrb	r3, [r2, r3]
 800d4f8:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800d4fa:	7cbb      	ldrb	r3, [r7, #18]
 800d4fc:	4a39      	ldr	r2, [pc, #228]	; (800d5e4 <lorawan_aes_set_key+0x1b8>)
 800d4fe:	5cd3      	ldrb	r3, [r2, r3]
 800d500:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800d502:	7c3b      	ldrb	r3, [r7, #16]
 800d504:	4a37      	ldr	r2, [pc, #220]	; (800d5e4 <lorawan_aes_set_key+0x1b8>)
 800d506:	5cd3      	ldrb	r3, [r2, r3]
 800d508:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800d50a:	7dbb      	ldrb	r3, [r7, #22]
 800d50c:	005b      	lsls	r3, r3, #1
 800d50e:	b25a      	sxtb	r2, r3
 800d510:	7dbb      	ldrb	r3, [r7, #22]
 800d512:	09db      	lsrs	r3, r3, #7
 800d514:	b2db      	uxtb	r3, r3
 800d516:	4619      	mov	r1, r3
 800d518:	0049      	lsls	r1, r1, #1
 800d51a:	440b      	add	r3, r1
 800d51c:	4619      	mov	r1, r3
 800d51e:	00c8      	lsls	r0, r1, #3
 800d520:	4619      	mov	r1, r3
 800d522:	4603      	mov	r3, r0
 800d524:	440b      	add	r3, r1
 800d526:	b2db      	uxtb	r3, r3
 800d528:	b25b      	sxtb	r3, r3
 800d52a:	4053      	eors	r3, r2
 800d52c:	b25b      	sxtb	r3, r3
 800d52e:	75bb      	strb	r3, [r7, #22]
 800d530:	e01c      	b.n	800d56c <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800d532:	7afb      	ldrb	r3, [r7, #11]
 800d534:	2b18      	cmp	r3, #24
 800d536:	d919      	bls.n	800d56c <lorawan_aes_set_key+0x140>
 800d538:	7dfb      	ldrb	r3, [r7, #23]
 800d53a:	7afa      	ldrb	r2, [r7, #11]
 800d53c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d540:	fb01 f202 	mul.w	r2, r1, r2
 800d544:	1a9b      	subs	r3, r3, r2
 800d546:	b2db      	uxtb	r3, r3
 800d548:	2b10      	cmp	r3, #16
 800d54a:	d10f      	bne.n	800d56c <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800d54c:	7d7b      	ldrb	r3, [r7, #21]
 800d54e:	4a25      	ldr	r2, [pc, #148]	; (800d5e4 <lorawan_aes_set_key+0x1b8>)
 800d550:	5cd3      	ldrb	r3, [r2, r3]
 800d552:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800d554:	7d3b      	ldrb	r3, [r7, #20]
 800d556:	4a23      	ldr	r2, [pc, #140]	; (800d5e4 <lorawan_aes_set_key+0x1b8>)
 800d558:	5cd3      	ldrb	r3, [r2, r3]
 800d55a:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800d55c:	7cfb      	ldrb	r3, [r7, #19]
 800d55e:	4a21      	ldr	r2, [pc, #132]	; (800d5e4 <lorawan_aes_set_key+0x1b8>)
 800d560:	5cd3      	ldrb	r3, [r2, r3]
 800d562:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800d564:	7cbb      	ldrb	r3, [r7, #18]
 800d566:	4a1f      	ldr	r2, [pc, #124]	; (800d5e4 <lorawan_aes_set_key+0x1b8>)
 800d568:	5cd3      	ldrb	r3, [r2, r3]
 800d56a:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800d56c:	7dfa      	ldrb	r2, [r7, #23]
 800d56e:	7afb      	ldrb	r3, [r7, #11]
 800d570:	1ad3      	subs	r3, r2, r3
 800d572:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800d574:	7c3b      	ldrb	r3, [r7, #16]
 800d576:	687a      	ldr	r2, [r7, #4]
 800d578:	5cd1      	ldrb	r1, [r2, r3]
 800d57a:	7dfb      	ldrb	r3, [r7, #23]
 800d57c:	7d7a      	ldrb	r2, [r7, #21]
 800d57e:	404a      	eors	r2, r1
 800d580:	b2d1      	uxtb	r1, r2
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800d586:	7c3b      	ldrb	r3, [r7, #16]
 800d588:	3301      	adds	r3, #1
 800d58a:	687a      	ldr	r2, [r7, #4]
 800d58c:	5cd1      	ldrb	r1, [r2, r3]
 800d58e:	7dfb      	ldrb	r3, [r7, #23]
 800d590:	3301      	adds	r3, #1
 800d592:	7d3a      	ldrb	r2, [r7, #20]
 800d594:	404a      	eors	r2, r1
 800d596:	b2d1      	uxtb	r1, r2
 800d598:	687a      	ldr	r2, [r7, #4]
 800d59a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800d59c:	7c3b      	ldrb	r3, [r7, #16]
 800d59e:	3302      	adds	r3, #2
 800d5a0:	687a      	ldr	r2, [r7, #4]
 800d5a2:	5cd1      	ldrb	r1, [r2, r3]
 800d5a4:	7dfb      	ldrb	r3, [r7, #23]
 800d5a6:	3302      	adds	r3, #2
 800d5a8:	7cfa      	ldrb	r2, [r7, #19]
 800d5aa:	404a      	eors	r2, r1
 800d5ac:	b2d1      	uxtb	r1, r2
 800d5ae:	687a      	ldr	r2, [r7, #4]
 800d5b0:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800d5b2:	7c3b      	ldrb	r3, [r7, #16]
 800d5b4:	3303      	adds	r3, #3
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	5cd1      	ldrb	r1, [r2, r3]
 800d5ba:	7dfb      	ldrb	r3, [r7, #23]
 800d5bc:	3303      	adds	r3, #3
 800d5be:	7cba      	ldrb	r2, [r7, #18]
 800d5c0:	404a      	eors	r2, r1
 800d5c2:	b2d1      	uxtb	r1, r2
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d5c8:	7dfb      	ldrb	r3, [r7, #23]
 800d5ca:	3304      	adds	r3, #4
 800d5cc:	75fb      	strb	r3, [r7, #23]
 800d5ce:	7dfa      	ldrb	r2, [r7, #23]
 800d5d0:	7c7b      	ldrb	r3, [r7, #17]
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	f4ff af67 	bcc.w	800d4a6 <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800d5d8:	2300      	movs	r3, #0
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3718      	adds	r7, #24
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	0801f89c 	.word	0x0801f89c

0800d5e8 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b08a      	sub	sp, #40	; 0x28
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	60f8      	str	r0, [r7, #12]
 800d5f0:	60b9      	str	r1, [r7, #8]
 800d5f2:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d038      	beq.n	800d670 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	f107 0314 	add.w	r3, r7, #20
 800d604:	68f9      	ldr	r1, [r7, #12]
 800d606:	4618      	mov	r0, r3
 800d608:	f7ff fc07 	bl	800ce1a <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800d60c:	2301      	movs	r3, #1
 800d60e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d612:	e014      	b.n	800d63e <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800d614:	f107 0314 	add.w	r3, r7, #20
 800d618:	4618      	mov	r0, r3
 800d61a:	f7ff fd5d 	bl	800d0d8 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d624:	0112      	lsls	r2, r2, #4
 800d626:	441a      	add	r2, r3
 800d628:	f107 0314 	add.w	r3, r7, #20
 800d62c:	4611      	mov	r1, r2
 800d62e:	4618      	mov	r0, r3
 800d630:	f7ff fcab 	bl	800cf8a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800d634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d638:	3301      	adds	r3, #1
 800d63a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800d644:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d648:	429a      	cmp	r2, r3
 800d64a:	d3e3      	bcc.n	800d614 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800d64c:	f107 0314 	add.w	r3, r7, #20
 800d650:	4618      	mov	r0, r3
 800d652:	f7ff fca7 	bl	800cfa4 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d65c:	0112      	lsls	r2, r2, #4
 800d65e:	441a      	add	r2, r3
 800d660:	f107 0314 	add.w	r3, r7, #20
 800d664:	4619      	mov	r1, r3
 800d666:	68b8      	ldr	r0, [r7, #8]
 800d668:	f7ff fbd7 	bl	800ce1a <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800d66c:	2300      	movs	r3, #0
 800d66e:	e000      	b.n	800d672 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800d670:	23ff      	movs	r3, #255	; 0xff
}
 800d672:	4618      	mov	r0, r3
 800d674:	3728      	adds	r7, #40	; 0x28
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}
	...

0800d67c <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800d67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d67e:	b09d      	sub	sp, #116	; 0x74
 800d680:	af10      	add	r7, sp, #64	; 0x40
 800d682:	4603      	mov	r3, r0
 800d684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d688:	2306      	movs	r3, #6
 800d68a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800d68e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d692:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d696:	4611      	mov	r1, r2
 800d698:	4618      	mov	r0, r3
 800d69a:	f000 f9a7 	bl	800d9ec <SecureElementGetKeyByID>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800d6a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	f040 80b0 	bne.w	800d80e <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800d6ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d106      	bne.n	800d6c4 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800d6b6:	4b58      	ldr	r3, [pc, #352]	; (800d818 <PrintKey+0x19c>)
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	2100      	movs	r1, #0
 800d6bc:	2002      	movs	r0, #2
 800d6be:	f011 fa4f 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
 800d6c2:	e056      	b.n	800d772 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800d6c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	d106      	bne.n	800d6da <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800d6cc:	4b53      	ldr	r3, [pc, #332]	; (800d81c <PrintKey+0x1a0>)
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	2100      	movs	r1, #0
 800d6d2:	2002      	movs	r0, #2
 800d6d4:	f011 fa44 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
 800d6d8:	e04b      	b.n	800d772 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800d6da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6de:	2b03      	cmp	r3, #3
 800d6e0:	d106      	bne.n	800d6f0 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800d6e2:	4b4f      	ldr	r3, [pc, #316]	; (800d820 <PrintKey+0x1a4>)
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	2100      	movs	r1, #0
 800d6e8:	2002      	movs	r0, #2
 800d6ea:	f011 fa39 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
 800d6ee:	e040      	b.n	800d772 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800d6f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6f4:	2b02      	cmp	r3, #2
 800d6f6:	d106      	bne.n	800d706 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800d6f8:	4b4a      	ldr	r3, [pc, #296]	; (800d824 <PrintKey+0x1a8>)
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	2100      	movs	r1, #0
 800d6fe:	2002      	movs	r0, #2
 800d700:	f011 fa2e 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
 800d704:	e035      	b.n	800d772 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800d706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d70a:	2b04      	cmp	r3, #4
 800d70c:	d106      	bne.n	800d71c <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800d70e:	4b46      	ldr	r3, [pc, #280]	; (800d828 <PrintKey+0x1ac>)
 800d710:	2200      	movs	r2, #0
 800d712:	2100      	movs	r1, #0
 800d714:	2002      	movs	r0, #2
 800d716:	f011 fa23 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
 800d71a:	e02a      	b.n	800d772 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800d71c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d720:	2b7f      	cmp	r3, #127	; 0x7f
 800d722:	d106      	bne.n	800d732 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800d724:	4b41      	ldr	r3, [pc, #260]	; (800d82c <PrintKey+0x1b0>)
 800d726:	2200      	movs	r2, #0
 800d728:	2100      	movs	r1, #0
 800d72a:	2002      	movs	r0, #2
 800d72c:	f011 fa18 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
 800d730:	e01f      	b.n	800d772 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800d732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d736:	2b80      	cmp	r3, #128	; 0x80
 800d738:	d106      	bne.n	800d748 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800d73a:	4b3d      	ldr	r3, [pc, #244]	; (800d830 <PrintKey+0x1b4>)
 800d73c:	2200      	movs	r2, #0
 800d73e:	2100      	movs	r1, #0
 800d740:	2002      	movs	r0, #2
 800d742:	f011 fa0d 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
 800d746:	e014      	b.n	800d772 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800d748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d74c:	2b81      	cmp	r3, #129	; 0x81
 800d74e:	d106      	bne.n	800d75e <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800d750:	4b38      	ldr	r3, [pc, #224]	; (800d834 <PrintKey+0x1b8>)
 800d752:	2200      	movs	r2, #0
 800d754:	2100      	movs	r1, #0
 800d756:	2002      	movs	r0, #2
 800d758:	f011 fa02 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
 800d75c:	e009      	b.n	800d772 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800d75e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d762:	2b82      	cmp	r3, #130	; 0x82
 800d764:	d105      	bne.n	800d772 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800d766:	4b34      	ldr	r3, [pc, #208]	; (800d838 <PrintKey+0x1bc>)
 800d768:	2200      	movs	r2, #0
 800d76a:	2100      	movs	r1, #0
 800d76c:	2002      	movs	r0, #2
 800d76e:	f011 f9f7 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800d772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d774:	785b      	ldrb	r3, [r3, #1]
 800d776:	4618      	mov	r0, r3
 800d778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d77a:	789b      	ldrb	r3, [r3, #2]
 800d77c:	461c      	mov	r4, r3
 800d77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d780:	78db      	ldrb	r3, [r3, #3]
 800d782:	461d      	mov	r5, r3
 800d784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d786:	791b      	ldrb	r3, [r3, #4]
 800d788:	461e      	mov	r6, r3
 800d78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d78c:	795b      	ldrb	r3, [r3, #5]
 800d78e:	623b      	str	r3, [r7, #32]
 800d790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d792:	799b      	ldrb	r3, [r3, #6]
 800d794:	61fb      	str	r3, [r7, #28]
 800d796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d798:	79db      	ldrb	r3, [r3, #7]
 800d79a:	61bb      	str	r3, [r7, #24]
 800d79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d79e:	7a1b      	ldrb	r3, [r3, #8]
 800d7a0:	617b      	str	r3, [r7, #20]
 800d7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a4:	7a5b      	ldrb	r3, [r3, #9]
 800d7a6:	613b      	str	r3, [r7, #16]
 800d7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7aa:	7a9b      	ldrb	r3, [r3, #10]
 800d7ac:	60fb      	str	r3, [r7, #12]
 800d7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b0:	7adb      	ldrb	r3, [r3, #11]
 800d7b2:	60bb      	str	r3, [r7, #8]
 800d7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b6:	7b1b      	ldrb	r3, [r3, #12]
 800d7b8:	607b      	str	r3, [r7, #4]
 800d7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7bc:	7b5b      	ldrb	r3, [r3, #13]
 800d7be:	603b      	str	r3, [r7, #0]
 800d7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c2:	7b9b      	ldrb	r3, [r3, #14]
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c8:	7bdb      	ldrb	r3, [r3, #15]
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ce:	7c1b      	ldrb	r3, [r3, #16]
 800d7d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7d2:	920e      	str	r2, [sp, #56]	; 0x38
 800d7d4:	910d      	str	r1, [sp, #52]	; 0x34
 800d7d6:	683a      	ldr	r2, [r7, #0]
 800d7d8:	920c      	str	r2, [sp, #48]	; 0x30
 800d7da:	687a      	ldr	r2, [r7, #4]
 800d7dc:	920b      	str	r2, [sp, #44]	; 0x2c
 800d7de:	68ba      	ldr	r2, [r7, #8]
 800d7e0:	920a      	str	r2, [sp, #40]	; 0x28
 800d7e2:	68fa      	ldr	r2, [r7, #12]
 800d7e4:	9209      	str	r2, [sp, #36]	; 0x24
 800d7e6:	693a      	ldr	r2, [r7, #16]
 800d7e8:	9208      	str	r2, [sp, #32]
 800d7ea:	697a      	ldr	r2, [r7, #20]
 800d7ec:	9207      	str	r2, [sp, #28]
 800d7ee:	69ba      	ldr	r2, [r7, #24]
 800d7f0:	9206      	str	r2, [sp, #24]
 800d7f2:	69fa      	ldr	r2, [r7, #28]
 800d7f4:	9205      	str	r2, [sp, #20]
 800d7f6:	6a3b      	ldr	r3, [r7, #32]
 800d7f8:	9304      	str	r3, [sp, #16]
 800d7fa:	9603      	str	r6, [sp, #12]
 800d7fc:	9502      	str	r5, [sp, #8]
 800d7fe:	9401      	str	r4, [sp, #4]
 800d800:	9000      	str	r0, [sp, #0]
 800d802:	4b0e      	ldr	r3, [pc, #56]	; (800d83c <PrintKey+0x1c0>)
 800d804:	2200      	movs	r2, #0
 800d806:	2100      	movs	r1, #0
 800d808:	2002      	movs	r0, #2
 800d80a:	f011 f9a9 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800d80e:	bf00      	nop
 800d810:	3734      	adds	r7, #52	; 0x34
 800d812:	46bd      	mov	sp, r7
 800d814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d816:	bf00      	nop
 800d818:	0801f308 	.word	0x0801f308
 800d81c:	0801f320 	.word	0x0801f320
 800d820:	0801f338 	.word	0x0801f338
 800d824:	0801f350 	.word	0x0801f350
 800d828:	0801f368 	.word	0x0801f368
 800d82c:	0801f380 	.word	0x0801f380
 800d830:	0801f398 	.word	0x0801f398
 800d834:	0801f3b0 	.word	0x0801f3b0
 800d838:	0801f3c8 	.word	0x0801f3c8
 800d83c:	0801f3e0 	.word	0x0801f3e0

0800d840 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800d840:	b480      	push	{r7}
 800d842:	b085      	sub	sp, #20
 800d844:	af00      	add	r7, sp, #0
 800d846:	4603      	mov	r3, r0
 800d848:	6039      	str	r1, [r7, #0]
 800d84a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d84c:	2300      	movs	r3, #0
 800d84e:	73fb      	strb	r3, [r7, #15]
 800d850:	e01a      	b.n	800d888 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d852:	4b12      	ldr	r3, [pc, #72]	; (800d89c <GetKeyByID+0x5c>)
 800d854:	6819      	ldr	r1, [r3, #0]
 800d856:	7bfa      	ldrb	r2, [r7, #15]
 800d858:	4613      	mov	r3, r2
 800d85a:	011b      	lsls	r3, r3, #4
 800d85c:	4413      	add	r3, r2
 800d85e:	440b      	add	r3, r1
 800d860:	3310      	adds	r3, #16
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	79fa      	ldrb	r2, [r7, #7]
 800d866:	429a      	cmp	r2, r3
 800d868:	d10b      	bne.n	800d882 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800d86a:	4b0c      	ldr	r3, [pc, #48]	; (800d89c <GetKeyByID+0x5c>)
 800d86c:	6819      	ldr	r1, [r3, #0]
 800d86e:	7bfa      	ldrb	r2, [r7, #15]
 800d870:	4613      	mov	r3, r2
 800d872:	011b      	lsls	r3, r3, #4
 800d874:	4413      	add	r3, r2
 800d876:	3310      	adds	r3, #16
 800d878:	18ca      	adds	r2, r1, r3
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800d87e:	2300      	movs	r3, #0
 800d880:	e006      	b.n	800d890 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d882:	7bfb      	ldrb	r3, [r7, #15]
 800d884:	3301      	adds	r3, #1
 800d886:	73fb      	strb	r3, [r7, #15]
 800d888:	7bfb      	ldrb	r3, [r7, #15]
 800d88a:	2b09      	cmp	r3, #9
 800d88c:	d9e1      	bls.n	800d852 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d88e:	2303      	movs	r3, #3
}
 800d890:	4618      	mov	r0, r3
 800d892:	3714      	adds	r7, #20
 800d894:	46bd      	mov	sp, r7
 800d896:	bc80      	pop	{r7}
 800d898:	4770      	bx	lr
 800d89a:	bf00      	nop
 800d89c:	20000b9c 	.word	0x20000b9c

0800d8a0 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800d8a0:	b590      	push	{r4, r7, lr}
 800d8a2:	b0d1      	sub	sp, #324	; 0x144
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800d8aa:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800d8ae:	6020      	str	r0, [r4, #0]
 800d8b0:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800d8b4:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800d8b8:	6001      	str	r1, [r0, #0]
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d8c0:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800d8c4:	801a      	strh	r2, [r3, #0]
 800d8c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d8ca:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800d8ce:	460a      	mov	r2, r1
 800d8d0:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800d8d2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d8d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d003      	beq.n	800d8e8 <ComputeCmac+0x48>
 800d8e0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d101      	bne.n	800d8ec <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d8e8:	2302      	movs	r3, #2
 800d8ea:	e05c      	b.n	800d9a6 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800d8ec:	f107 0314 	add.w	r3, r7, #20
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7fe ff1b 	bl	800c72c <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800d8f6:	f107 0210 	add.w	r2, r7, #16
 800d8fa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d8fe:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	4611      	mov	r1, r2
 800d906:	4618      	mov	r0, r3
 800d908:	f7ff ff9a 	bl	800d840 <GetKeyByID>
 800d90c:	4603      	mov	r3, r0
 800d90e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d912:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800d916:	2b00      	cmp	r3, #0
 800d918:	d143      	bne.n	800d9a2 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800d91a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d91e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	1c5a      	adds	r2, r3, #1
 800d926:	f107 0314 	add.w	r3, r7, #20
 800d92a:	4611      	mov	r1, r2
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7fe ff16 	bl	800c75e <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800d932:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d936:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d009      	beq.n	800d954 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800d940:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d944:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d948:	f107 0014 	add.w	r0, r7, #20
 800d94c:	2210      	movs	r2, #16
 800d94e:	6819      	ldr	r1, [r3, #0]
 800d950:	f7fe ff14 	bl	800c77c <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800d954:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d958:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800d95c:	881a      	ldrh	r2, [r3, #0]
 800d95e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d962:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d966:	f107 0014 	add.w	r0, r7, #20
 800d96a:	6819      	ldr	r1, [r3, #0]
 800d96c:	f7fe ff06 	bl	800c77c <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800d970:	f107 0214 	add.w	r2, r7, #20
 800d974:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800d978:	4611      	mov	r1, r2
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7fe ffc0 	bl	800c900 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800d980:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800d984:	061a      	lsls	r2, r3, #24
 800d986:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800d98a:	041b      	lsls	r3, r3, #16
 800d98c:	431a      	orrs	r2, r3
 800d98e:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800d992:	021b      	lsls	r3, r3, #8
 800d994:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800d996:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800d99a:	431a      	orrs	r2, r3
 800d99c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800d9a0:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800d9a2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd90      	pop	{r4, r7, pc}

0800d9b0 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d101      	bne.n	800d9c4 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d9c0:	2302      	movs	r3, #2
 800d9c2:	e00a      	b.n	800d9da <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800d9c4:	4a07      	ldr	r2, [pc, #28]	; (800d9e4 <SecureElementInit+0x34>)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800d9ca:	4b06      	ldr	r3, [pc, #24]	; (800d9e4 <SecureElementInit+0x34>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	22c0      	movs	r2, #192	; 0xc0
 800d9d0:	4905      	ldr	r1, [pc, #20]	; (800d9e8 <SecureElementInit+0x38>)
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f00c fd6f 	bl	801a4b6 <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800d9d8:	2300      	movs	r3, #0
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3708      	adds	r7, #8
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	20000b9c 	.word	0x20000b9c
 800d9e8:	0801fd30 	.word	0x0801fd30

0800d9ec <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b085      	sub	sp, #20
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	6039      	str	r1, [r7, #0]
 800d9f6:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	73fb      	strb	r3, [r7, #15]
 800d9fc:	e01a      	b.n	800da34 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800d9fe:	4b12      	ldr	r3, [pc, #72]	; (800da48 <SecureElementGetKeyByID+0x5c>)
 800da00:	6819      	ldr	r1, [r3, #0]
 800da02:	7bfa      	ldrb	r2, [r7, #15]
 800da04:	4613      	mov	r3, r2
 800da06:	011b      	lsls	r3, r3, #4
 800da08:	4413      	add	r3, r2
 800da0a:	440b      	add	r3, r1
 800da0c:	3310      	adds	r3, #16
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	79fa      	ldrb	r2, [r7, #7]
 800da12:	429a      	cmp	r2, r3
 800da14:	d10b      	bne.n	800da2e <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800da16:	4b0c      	ldr	r3, [pc, #48]	; (800da48 <SecureElementGetKeyByID+0x5c>)
 800da18:	6819      	ldr	r1, [r3, #0]
 800da1a:	7bfa      	ldrb	r2, [r7, #15]
 800da1c:	4613      	mov	r3, r2
 800da1e:	011b      	lsls	r3, r3, #4
 800da20:	4413      	add	r3, r2
 800da22:	3310      	adds	r3, #16
 800da24:	18ca      	adds	r2, r1, r3
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800da2a:	2300      	movs	r3, #0
 800da2c:	e006      	b.n	800da3c <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800da2e:	7bfb      	ldrb	r3, [r7, #15]
 800da30:	3301      	adds	r3, #1
 800da32:	73fb      	strb	r3, [r7, #15]
 800da34:	7bfb      	ldrb	r3, [r7, #15]
 800da36:	2b09      	cmp	r3, #9
 800da38:	d9e1      	bls.n	800d9fe <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800da3a:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3714      	adds	r7, #20
 800da40:	46bd      	mov	sp, r7
 800da42:	bc80      	pop	{r7}
 800da44:	4770      	bx	lr
 800da46:	bf00      	nop
 800da48:	20000b9c 	.word	0x20000b9c

0800da4c <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800da4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da4e:	b08b      	sub	sp, #44	; 0x2c
 800da50:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800da52:	4b3f      	ldr	r3, [pc, #252]	; (800db50 <SecureElementPrintKeys+0x104>)
 800da54:	2200      	movs	r2, #0
 800da56:	2100      	movs	r1, #0
 800da58:	2002      	movs	r0, #2
 800da5a:	f011 f881 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800da5e:	2000      	movs	r0, #0
 800da60:	f7ff fe0c 	bl	800d67c <PrintKey>
    PrintKey(NWK_KEY);
 800da64:	2001      	movs	r0, #1
 800da66:	f7ff fe09 	bl	800d67c <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800da6a:	4b3a      	ldr	r3, [pc, #232]	; (800db54 <SecureElementPrintKeys+0x108>)
 800da6c:	2200      	movs	r2, #0
 800da6e:	2100      	movs	r1, #0
 800da70:	2002      	movs	r0, #2
 800da72:	f011 f875 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800da76:	2003      	movs	r0, #3
 800da78:	f7ff fe00 	bl	800d67c <PrintKey>
    PrintKey(NWK_S_KEY);
 800da7c:	2002      	movs	r0, #2
 800da7e:	f7ff fdfd 	bl	800d67c <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800da82:	4b35      	ldr	r3, [pc, #212]	; (800db58 <SecureElementPrintKeys+0x10c>)
 800da84:	2200      	movs	r2, #0
 800da86:	2100      	movs	r1, #0
 800da88:	2002      	movs	r0, #2
 800da8a:	f011 f869 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800da8e:	4b33      	ldr	r3, [pc, #204]	; (800db5c <SecureElementPrintKeys+0x110>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	461a      	mov	r2, r3
 800da96:	4b31      	ldr	r3, [pc, #196]	; (800db5c <SecureElementPrintKeys+0x110>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	785b      	ldrb	r3, [r3, #1]
 800da9c:	4619      	mov	r1, r3
 800da9e:	4b2f      	ldr	r3, [pc, #188]	; (800db5c <SecureElementPrintKeys+0x110>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	789b      	ldrb	r3, [r3, #2]
 800daa4:	4618      	mov	r0, r3
 800daa6:	4b2d      	ldr	r3, [pc, #180]	; (800db5c <SecureElementPrintKeys+0x110>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	78db      	ldrb	r3, [r3, #3]
 800daac:	461c      	mov	r4, r3
 800daae:	4b2b      	ldr	r3, [pc, #172]	; (800db5c <SecureElementPrintKeys+0x110>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	791b      	ldrb	r3, [r3, #4]
 800dab4:	461d      	mov	r5, r3
 800dab6:	4b29      	ldr	r3, [pc, #164]	; (800db5c <SecureElementPrintKeys+0x110>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	795b      	ldrb	r3, [r3, #5]
 800dabc:	461e      	mov	r6, r3
 800dabe:	4b27      	ldr	r3, [pc, #156]	; (800db5c <SecureElementPrintKeys+0x110>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	799b      	ldrb	r3, [r3, #6]
 800dac4:	607b      	str	r3, [r7, #4]
 800dac6:	4b25      	ldr	r3, [pc, #148]	; (800db5c <SecureElementPrintKeys+0x110>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	79db      	ldrb	r3, [r3, #7]
 800dacc:	9307      	str	r3, [sp, #28]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	9306      	str	r3, [sp, #24]
 800dad2:	9605      	str	r6, [sp, #20]
 800dad4:	9504      	str	r5, [sp, #16]
 800dad6:	9403      	str	r4, [sp, #12]
 800dad8:	9002      	str	r0, [sp, #8]
 800dada:	9101      	str	r1, [sp, #4]
 800dadc:	9200      	str	r2, [sp, #0]
 800dade:	4b20      	ldr	r3, [pc, #128]	; (800db60 <SecureElementPrintKeys+0x114>)
 800dae0:	2200      	movs	r2, #0
 800dae2:	2100      	movs	r1, #0
 800dae4:	2002      	movs	r0, #2
 800dae6:	f011 f83b 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800daea:	4b1c      	ldr	r3, [pc, #112]	; (800db5c <SecureElementPrintKeys+0x110>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	7a1b      	ldrb	r3, [r3, #8]
 800daf0:	461a      	mov	r2, r3
 800daf2:	4b1a      	ldr	r3, [pc, #104]	; (800db5c <SecureElementPrintKeys+0x110>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	7a5b      	ldrb	r3, [r3, #9]
 800daf8:	4619      	mov	r1, r3
 800dafa:	4b18      	ldr	r3, [pc, #96]	; (800db5c <SecureElementPrintKeys+0x110>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	7a9b      	ldrb	r3, [r3, #10]
 800db00:	4618      	mov	r0, r3
 800db02:	4b16      	ldr	r3, [pc, #88]	; (800db5c <SecureElementPrintKeys+0x110>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	7adb      	ldrb	r3, [r3, #11]
 800db08:	461c      	mov	r4, r3
 800db0a:	4b14      	ldr	r3, [pc, #80]	; (800db5c <SecureElementPrintKeys+0x110>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	7b1b      	ldrb	r3, [r3, #12]
 800db10:	461d      	mov	r5, r3
 800db12:	4b12      	ldr	r3, [pc, #72]	; (800db5c <SecureElementPrintKeys+0x110>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	7b5b      	ldrb	r3, [r3, #13]
 800db18:	461e      	mov	r6, r3
 800db1a:	4b10      	ldr	r3, [pc, #64]	; (800db5c <SecureElementPrintKeys+0x110>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	7b9b      	ldrb	r3, [r3, #14]
 800db20:	607b      	str	r3, [r7, #4]
 800db22:	4b0e      	ldr	r3, [pc, #56]	; (800db5c <SecureElementPrintKeys+0x110>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	7bdb      	ldrb	r3, [r3, #15]
 800db28:	9307      	str	r3, [sp, #28]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	9306      	str	r3, [sp, #24]
 800db2e:	9605      	str	r6, [sp, #20]
 800db30:	9504      	str	r5, [sp, #16]
 800db32:	9403      	str	r4, [sp, #12]
 800db34:	9002      	str	r0, [sp, #8]
 800db36:	9101      	str	r1, [sp, #4]
 800db38:	9200      	str	r2, [sp, #0]
 800db3a:	4b0a      	ldr	r3, [pc, #40]	; (800db64 <SecureElementPrintKeys+0x118>)
 800db3c:	2200      	movs	r2, #0
 800db3e:	2100      	movs	r1, #0
 800db40:	2002      	movs	r0, #2
 800db42:	f011 f80d 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800db46:	2300      	movs	r3, #0
}
 800db48:	4618      	mov	r0, r3
 800db4a:	370c      	adds	r7, #12
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db50:	0801f434 	.word	0x0801f434
 800db54:	0801f44c 	.word	0x0801f44c
 800db58:	0801f464 	.word	0x0801f464
 800db5c:	20000b9c 	.word	0x20000b9c
 800db60:	0801f47c 	.word	0x0801f47c
 800db64:	0801f4bc 	.word	0x0801f4bc

0800db68 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800db6c:	2004      	movs	r0, #4
 800db6e:	f7ff fd85 	bl	800d67c <PrintKey>
    PrintKey(MC_KE_KEY);
 800db72:	207f      	movs	r0, #127	; 0x7f
 800db74:	f7ff fd82 	bl	800d67c <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800db78:	2002      	movs	r0, #2
 800db7a:	f7ff fd7f 	bl	800d67c <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800db7e:	2003      	movs	r0, #3
 800db80:	f7ff fd7c 	bl	800d67c <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800db84:	2300      	movs	r3, #0
}
 800db86:	4618      	mov	r0, r3
 800db88:	bd80      	pop	{r7, pc}
	...

0800db8c <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b088      	sub	sp, #32
 800db90:	af00      	add	r7, sp, #0
 800db92:	4603      	mov	r3, r0
 800db94:	6039      	str	r1, [r7, #0]
 800db96:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d101      	bne.n	800dba2 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800db9e:	2302      	movs	r3, #2
 800dba0:	e04c      	b.n	800dc3c <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dba2:	2300      	movs	r3, #0
 800dba4:	77fb      	strb	r3, [r7, #31]
 800dba6:	e045      	b.n	800dc34 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800dba8:	4b26      	ldr	r3, [pc, #152]	; (800dc44 <SecureElementSetKey+0xb8>)
 800dbaa:	6819      	ldr	r1, [r3, #0]
 800dbac:	7ffa      	ldrb	r2, [r7, #31]
 800dbae:	4613      	mov	r3, r2
 800dbb0:	011b      	lsls	r3, r3, #4
 800dbb2:	4413      	add	r3, r2
 800dbb4:	440b      	add	r3, r1
 800dbb6:	3310      	adds	r3, #16
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	79fa      	ldrb	r2, [r7, #7]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d136      	bne.n	800dc2e <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800dbc0:	79fb      	ldrb	r3, [r7, #7]
 800dbc2:	2b80      	cmp	r3, #128	; 0x80
 800dbc4:	d123      	bne.n	800dc0e <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800dbc6:	2306      	movs	r3, #6
 800dbc8:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800dbca:	2300      	movs	r3, #0
 800dbcc:	60fb      	str	r3, [r7, #12]
 800dbce:	f107 0310 	add.w	r3, r7, #16
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	601a      	str	r2, [r3, #0]
 800dbd6:	605a      	str	r2, [r3, #4]
 800dbd8:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800dbda:	f107 030c 	add.w	r3, r7, #12
 800dbde:	227f      	movs	r2, #127	; 0x7f
 800dbe0:	2110      	movs	r1, #16
 800dbe2:	6838      	ldr	r0, [r7, #0]
 800dbe4:	f000 f87d 	bl	800dce2 <SecureElementAesEncrypt>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800dbec:	4b15      	ldr	r3, [pc, #84]	; (800dc44 <SecureElementSetKey+0xb8>)
 800dbee:	6819      	ldr	r1, [r3, #0]
 800dbf0:	7ffa      	ldrb	r2, [r7, #31]
 800dbf2:	4613      	mov	r3, r2
 800dbf4:	011b      	lsls	r3, r3, #4
 800dbf6:	4413      	add	r3, r2
 800dbf8:	3310      	adds	r3, #16
 800dbfa:	440b      	add	r3, r1
 800dbfc:	3301      	adds	r3, #1
 800dbfe:	f107 010c 	add.w	r1, r7, #12
 800dc02:	2210      	movs	r2, #16
 800dc04:	4618      	mov	r0, r3
 800dc06:	f00c fc56 	bl	801a4b6 <memcpy1>
                return retval;
 800dc0a:	7fbb      	ldrb	r3, [r7, #30]
 800dc0c:	e016      	b.n	800dc3c <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800dc0e:	4b0d      	ldr	r3, [pc, #52]	; (800dc44 <SecureElementSetKey+0xb8>)
 800dc10:	6819      	ldr	r1, [r3, #0]
 800dc12:	7ffa      	ldrb	r2, [r7, #31]
 800dc14:	4613      	mov	r3, r2
 800dc16:	011b      	lsls	r3, r3, #4
 800dc18:	4413      	add	r3, r2
 800dc1a:	3310      	adds	r3, #16
 800dc1c:	440b      	add	r3, r1
 800dc1e:	3301      	adds	r3, #1
 800dc20:	2210      	movs	r2, #16
 800dc22:	6839      	ldr	r1, [r7, #0]
 800dc24:	4618      	mov	r0, r3
 800dc26:	f00c fc46 	bl	801a4b6 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	e006      	b.n	800dc3c <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dc2e:	7ffb      	ldrb	r3, [r7, #31]
 800dc30:	3301      	adds	r3, #1
 800dc32:	77fb      	strb	r3, [r7, #31]
 800dc34:	7ffb      	ldrb	r3, [r7, #31]
 800dc36:	2b09      	cmp	r3, #9
 800dc38:	d9b6      	bls.n	800dba8 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dc3a:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3720      	adds	r7, #32
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}
 800dc44:	20000b9c 	.word	0x20000b9c

0800dc48 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b086      	sub	sp, #24
 800dc4c:	af02      	add	r7, sp, #8
 800dc4e:	60f8      	str	r0, [r7, #12]
 800dc50:	60b9      	str	r1, [r7, #8]
 800dc52:	4611      	mov	r1, r2
 800dc54:	461a      	mov	r2, r3
 800dc56:	460b      	mov	r3, r1
 800dc58:	80fb      	strh	r3, [r7, #6]
 800dc5a:	4613      	mov	r3, r2
 800dc5c:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800dc5e:	797b      	ldrb	r3, [r7, #5]
 800dc60:	2b7e      	cmp	r3, #126	; 0x7e
 800dc62:	d901      	bls.n	800dc68 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dc64:	2303      	movs	r3, #3
 800dc66:	e009      	b.n	800dc7c <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800dc68:	7979      	ldrb	r1, [r7, #5]
 800dc6a:	88fa      	ldrh	r2, [r7, #6]
 800dc6c:	69bb      	ldr	r3, [r7, #24]
 800dc6e:	9300      	str	r3, [sp, #0]
 800dc70:	460b      	mov	r3, r1
 800dc72:	68b9      	ldr	r1, [r7, #8]
 800dc74:	68f8      	ldr	r0, [r7, #12]
 800dc76:	f7ff fe13 	bl	800d8a0 <ComputeCmac>
 800dc7a:	4603      	mov	r3, r0
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3710      	adds	r7, #16
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b088      	sub	sp, #32
 800dc88:	af02      	add	r7, sp, #8
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	607a      	str	r2, [r7, #4]
 800dc8e:	461a      	mov	r2, r3
 800dc90:	460b      	mov	r3, r1
 800dc92:	817b      	strh	r3, [r7, #10]
 800dc94:	4613      	mov	r3, r2
 800dc96:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d101      	bne.n	800dca2 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800dc9e:	2302      	movs	r3, #2
 800dca0:	e01b      	b.n	800dcda <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800dca2:	2306      	movs	r3, #6
 800dca4:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800dca6:	2300      	movs	r3, #0
 800dca8:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800dcaa:	7a79      	ldrb	r1, [r7, #9]
 800dcac:	897a      	ldrh	r2, [r7, #10]
 800dcae:	f107 0310 	add.w	r3, r7, #16
 800dcb2:	9300      	str	r3, [sp, #0]
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	68f9      	ldr	r1, [r7, #12]
 800dcb8:	2000      	movs	r0, #0
 800dcba:	f7ff fdf1 	bl	800d8a0 <ComputeCmac>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800dcc2:	7dfb      	ldrb	r3, [r7, #23]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d001      	beq.n	800dccc <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800dcc8:	7dfb      	ldrb	r3, [r7, #23]
 800dcca:	e006      	b.n	800dcda <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	687a      	ldr	r2, [r7, #4]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d001      	beq.n	800dcd8 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800dcd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3718      	adds	r7, #24
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}

0800dce2 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800dce2:	b580      	push	{r7, lr}
 800dce4:	b0c2      	sub	sp, #264	; 0x108
 800dce6:	af00      	add	r7, sp, #0
 800dce8:	60f8      	str	r0, [r7, #12]
 800dcea:	4608      	mov	r0, r1
 800dcec:	4611      	mov	r1, r2
 800dcee:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800dcf2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800dcf6:	6013      	str	r3, [r2, #0]
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	817b      	strh	r3, [r7, #10]
 800dcfc:	460b      	mov	r3, r1
 800dcfe:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d006      	beq.n	800dd14 <SecureElementAesEncrypt+0x32>
 800dd06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d101      	bne.n	800dd18 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800dd14:	2302      	movs	r3, #2
 800dd16:	e046      	b.n	800dda6 <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800dd18:	897b      	ldrh	r3, [r7, #10]
 800dd1a:	f003 030f 	and.w	r3, r3, #15
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d001      	beq.n	800dd28 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800dd24:	2305      	movs	r3, #5
 800dd26:	e03e      	b.n	800dda6 <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800dd28:	f107 0314 	add.w	r3, r7, #20
 800dd2c:	22f0      	movs	r2, #240	; 0xf0
 800dd2e:	2100      	movs	r1, #0
 800dd30:	4618      	mov	r0, r3
 800dd32:	f00c fbfb 	bl	801a52c <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800dd36:	f107 0210 	add.w	r2, r7, #16
 800dd3a:	7a7b      	ldrb	r3, [r7, #9]
 800dd3c:	4611      	mov	r1, r2
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7ff fd7e 	bl	800d840 <GetKeyByID>
 800dd44:	4603      	mov	r3, r0
 800dd46:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800dd4a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d127      	bne.n	800dda2 <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	3301      	adds	r3, #1
 800dd56:	f107 0214 	add.w	r2, r7, #20
 800dd5a:	2110      	movs	r1, #16
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f7ff fb65 	bl	800d42c <lorawan_aes_set_key>

        uint8_t block = 0;
 800dd62:	2300      	movs	r3, #0
 800dd64:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800dd68:	e018      	b.n	800dd9c <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800dd6a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800dd6e:	68fa      	ldr	r2, [r7, #12]
 800dd70:	18d0      	adds	r0, r2, r3
 800dd72:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800dd76:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800dd7a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800dd7e:	6812      	ldr	r2, [r2, #0]
 800dd80:	4413      	add	r3, r2
 800dd82:	f107 0214 	add.w	r2, r7, #20
 800dd86:	4619      	mov	r1, r3
 800dd88:	f7ff fc2e 	bl	800d5e8 <lorawan_aes_encrypt>
            block = block + 16;
 800dd8c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800dd90:	3310      	adds	r3, #16
 800dd92:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800dd96:	897b      	ldrh	r3, [r7, #10]
 800dd98:	3b10      	subs	r3, #16
 800dd9a:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800dd9c:	897b      	ldrh	r3, [r7, #10]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d1e3      	bne.n	800dd6a <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800dda2:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b088      	sub	sp, #32
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	460b      	mov	r3, r1
 800ddba:	70fb      	strb	r3, [r7, #3]
 800ddbc:	4613      	mov	r3, r2
 800ddbe:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d101      	bne.n	800ddca <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ddc6:	2302      	movs	r3, #2
 800ddc8:	e02e      	b.n	800de28 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800ddca:	2306      	movs	r3, #6
 800ddcc:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800ddce:	78bb      	ldrb	r3, [r7, #2]
 800ddd0:	2b7f      	cmp	r3, #127	; 0x7f
 800ddd2:	d104      	bne.n	800ddde <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800ddd4:	78fb      	ldrb	r3, [r7, #3]
 800ddd6:	2b04      	cmp	r3, #4
 800ddd8:	d001      	beq.n	800ddde <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ddda:	2303      	movs	r3, #3
 800dddc:	e024      	b.n	800de28 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800ddde:	2300      	movs	r3, #0
 800dde0:	60fb      	str	r3, [r7, #12]
 800dde2:	f107 0310 	add.w	r3, r7, #16
 800dde6:	2200      	movs	r2, #0
 800dde8:	601a      	str	r2, [r3, #0]
 800ddea:	605a      	str	r2, [r3, #4]
 800ddec:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800ddee:	f107 030c 	add.w	r3, r7, #12
 800ddf2:	78fa      	ldrb	r2, [r7, #3]
 800ddf4:	2110      	movs	r1, #16
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f7ff ff73 	bl	800dce2 <SecureElementAesEncrypt>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800de00:	7ffb      	ldrb	r3, [r7, #31]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d001      	beq.n	800de0a <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800de06:	7ffb      	ldrb	r3, [r7, #31]
 800de08:	e00e      	b.n	800de28 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800de0a:	f107 020c 	add.w	r2, r7, #12
 800de0e:	78bb      	ldrb	r3, [r7, #2]
 800de10:	4611      	mov	r1, r2
 800de12:	4618      	mov	r0, r3
 800de14:	f7ff feba 	bl	800db8c <SecureElementSetKey>
 800de18:	4603      	mov	r3, r0
 800de1a:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800de1c:	7ffb      	ldrb	r3, [r7, #31]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d001      	beq.n	800de26 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800de22:	7ffb      	ldrb	r3, [r7, #31]
 800de24:	e000      	b.n	800de28 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800de26:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3720      	adds	r7, #32
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b086      	sub	sp, #24
 800de34:	af00      	add	r7, sp, #0
 800de36:	60b9      	str	r1, [r7, #8]
 800de38:	607b      	str	r3, [r7, #4]
 800de3a:	4603      	mov	r3, r0
 800de3c:	73fb      	strb	r3, [r7, #15]
 800de3e:	4613      	mov	r3, r2
 800de40:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d005      	beq.n	800de54 <SecureElementProcessJoinAccept+0x24>
 800de48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d002      	beq.n	800de54 <SecureElementProcessJoinAccept+0x24>
 800de4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de50:	2b00      	cmp	r3, #0
 800de52:	d101      	bne.n	800de58 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800de54:	2302      	movs	r3, #2
 800de56:	e064      	b.n	800df22 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800de58:	f897 3020 	ldrb.w	r3, [r7, #32]
 800de5c:	2b21      	cmp	r3, #33	; 0x21
 800de5e:	d901      	bls.n	800de64 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800de60:	2305      	movs	r3, #5
 800de62:	e05e      	b.n	800df22 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800de64:	2301      	movs	r3, #1
 800de66:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800de68:	f897 3020 	ldrb.w	r3, [r7, #32]
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	461a      	mov	r2, r3
 800de70:	6879      	ldr	r1, [r7, #4]
 800de72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de74:	f00c fb1f 	bl	801a4b6 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	1c58      	adds	r0, r3, #1
 800de7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800de80:	b29b      	uxth	r3, r3
 800de82:	3b01      	subs	r3, #1
 800de84:	b299      	uxth	r1, r3
 800de86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de88:	3301      	adds	r3, #1
 800de8a:	7dfa      	ldrb	r2, [r7, #23]
 800de8c:	f7ff ff29 	bl	800dce2 <SecureElementAesEncrypt>
 800de90:	4603      	mov	r3, r0
 800de92:	2b00      	cmp	r3, #0
 800de94:	d001      	beq.n	800de9a <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800de96:	2307      	movs	r3, #7
 800de98:	e043      	b.n	800df22 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800de9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9c:	330b      	adds	r3, #11
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	09db      	lsrs	r3, r3, #7
 800dea2:	b2da      	uxtb	r2, r3
 800dea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea6:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800dea8:	2300      	movs	r3, #0
 800deaa:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800deac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800deb0:	3b04      	subs	r3, #4
 800deb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deb4:	4413      	add	r3, r2
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800deba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800debe:	3b03      	subs	r3, #3
 800dec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dec2:	4413      	add	r3, r2
 800dec4:	781b      	ldrb	r3, [r3, #0]
 800dec6:	021b      	lsls	r3, r3, #8
 800dec8:	693a      	ldr	r2, [r7, #16]
 800deca:	4313      	orrs	r3, r2
 800decc:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800dece:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ded2:	3b02      	subs	r3, #2
 800ded4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ded6:	4413      	add	r3, r2
 800ded8:	781b      	ldrb	r3, [r3, #0]
 800deda:	041b      	lsls	r3, r3, #16
 800dedc:	693a      	ldr	r2, [r7, #16]
 800dede:	4313      	orrs	r3, r2
 800dee0:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800dee2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dee6:	3b01      	subs	r3, #1
 800dee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deea:	4413      	add	r3, r2
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	061b      	lsls	r3, r3, #24
 800def0:	693a      	ldr	r2, [r7, #16]
 800def2:	4313      	orrs	r3, r2
 800def4:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800def6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d10e      	bne.n	800df1c <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800defe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800df02:	b29b      	uxth	r3, r3
 800df04:	3b04      	subs	r3, #4
 800df06:	b299      	uxth	r1, r3
 800df08:	2301      	movs	r3, #1
 800df0a:	693a      	ldr	r2, [r7, #16]
 800df0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df0e:	f7ff feb9 	bl	800dc84 <SecureElementVerifyAesCmac>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	d003      	beq.n	800df20 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800df18:	2301      	movs	r3, #1
 800df1a:	e002      	b.n	800df22 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800df1c:	2304      	movs	r3, #4
 800df1e:	e000      	b.n	800df22 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800df20:	2300      	movs	r3, #0
}
 800df22:	4618      	mov	r0, r3
 800df24:	3718      	adds	r7, #24
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}
	...

0800df2c <SecureElementRandomNumber>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d101      	bne.n	800df3e <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800df3a:	2302      	movs	r3, #2
 800df3c:	e006      	b.n	800df4c <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800df3e:	4b05      	ldr	r3, [pc, #20]	; (800df54 <SecureElementRandomNumber+0x28>)
 800df40:	695b      	ldr	r3, [r3, #20]
 800df42:	4798      	blx	r3
 800df44:	4602      	mov	r2, r0
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800df4a:	2300      	movs	r3, #0
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3708      	adds	r7, #8
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	0801fbe4 	.word	0x0801fbe4

0800df58 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d101      	bne.n	800df6a <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800df66:	2302      	movs	r3, #2
 800df68:	e007      	b.n	800df7a <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800df6a:	4b06      	ldr	r3, [pc, #24]	; (800df84 <SecureElementSetDevEui+0x2c>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	2208      	movs	r2, #8
 800df70:	6879      	ldr	r1, [r7, #4]
 800df72:	4618      	mov	r0, r3
 800df74:	f00c fa9f 	bl	801a4b6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800df78:	2300      	movs	r3, #0
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3708      	adds	r7, #8
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
 800df82:	bf00      	nop
 800df84:	20000b9c 	.word	0x20000b9c

0800df88 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800df88:	b480      	push	{r7}
 800df8a:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800df8c:	4b02      	ldr	r3, [pc, #8]	; (800df98 <SecureElementGetDevEui+0x10>)
 800df8e:	681b      	ldr	r3, [r3, #0]
}
 800df90:	4618      	mov	r0, r3
 800df92:	46bd      	mov	sp, r7
 800df94:	bc80      	pop	{r7}
 800df96:	4770      	bx	lr
 800df98:	20000b9c 	.word	0x20000b9c

0800df9c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b082      	sub	sp, #8
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d101      	bne.n	800dfae <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800dfaa:	2302      	movs	r3, #2
 800dfac:	e008      	b.n	800dfc0 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800dfae:	4b06      	ldr	r3, [pc, #24]	; (800dfc8 <SecureElementSetJoinEui+0x2c>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	3308      	adds	r3, #8
 800dfb4:	2208      	movs	r2, #8
 800dfb6:	6879      	ldr	r1, [r7, #4]
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f00c fa7c 	bl	801a4b6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800dfbe:	2300      	movs	r3, #0
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	20000b9c 	.word	0x20000b9c

0800dfcc <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800dfcc:	b480      	push	{r7}
 800dfce:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800dfd0:	4b03      	ldr	r3, [pc, #12]	; (800dfe0 <SecureElementGetJoinEui+0x14>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	3308      	adds	r3, #8
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bc80      	pop	{r7}
 800dfdc:	4770      	bx	lr
 800dfde:	bf00      	nop
 800dfe0:	20000b9c 	.word	0x20000b9c

0800dfe4 <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b082      	sub	sp, #8
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800dfee:	4a1a      	ldr	r2, [pc, #104]	; (800e058 <LmHandlerInit+0x74>)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800dff4:	4b19      	ldr	r3, [pc, #100]	; (800e05c <LmHandlerInit+0x78>)
 800dff6:	4a1a      	ldr	r2, [pc, #104]	; (800e060 <LmHandlerInit+0x7c>)
 800dff8:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800dffa:	4b18      	ldr	r3, [pc, #96]	; (800e05c <LmHandlerInit+0x78>)
 800dffc:	4a19      	ldr	r2, [pc, #100]	; (800e064 <LmHandlerInit+0x80>)
 800dffe:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800e000:	4b16      	ldr	r3, [pc, #88]	; (800e05c <LmHandlerInit+0x78>)
 800e002:	4a19      	ldr	r2, [pc, #100]	; (800e068 <LmHandlerInit+0x84>)
 800e004:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800e006:	4b15      	ldr	r3, [pc, #84]	; (800e05c <LmHandlerInit+0x78>)
 800e008:	4a18      	ldr	r2, [pc, #96]	; (800e06c <LmHandlerInit+0x88>)
 800e00a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800e00c:	4b12      	ldr	r3, [pc, #72]	; (800e058 <LmHandlerInit+0x74>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	4a17      	ldr	r2, [pc, #92]	; (800e070 <LmHandlerInit+0x8c>)
 800e014:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800e016:	4b10      	ldr	r3, [pc, #64]	; (800e058 <LmHandlerInit+0x74>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	4a14      	ldr	r2, [pc, #80]	; (800e070 <LmHandlerInit+0x8c>)
 800e01e:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800e020:	4b0d      	ldr	r3, [pc, #52]	; (800e058 <LmHandlerInit+0x74>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	689b      	ldr	r3, [r3, #8]
 800e026:	4a12      	ldr	r2, [pc, #72]	; (800e070 <LmHandlerInit+0x8c>)
 800e028:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800e02a:	4b11      	ldr	r3, [pc, #68]	; (800e070 <LmHandlerInit+0x8c>)
 800e02c:	4a11      	ldr	r2, [pc, #68]	; (800e074 <LmHandlerInit+0x90>)
 800e02e:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800e030:	4b09      	ldr	r3, [pc, #36]	; (800e058 <LmHandlerInit+0x74>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	699b      	ldr	r3, [r3, #24]
 800e036:	4a0e      	ldr	r2, [pc, #56]	; (800e070 <LmHandlerInit+0x8c>)
 800e038:	6113      	str	r3, [r2, #16]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800e03a:	490f      	ldr	r1, [pc, #60]	; (800e078 <LmHandlerInit+0x94>)
 800e03c:	2000      	movs	r0, #0
 800e03e:	f000 fe8f 	bl	800ed60 <LmHandlerPackageRegister>
 800e042:	4603      	mov	r3, r0
 800e044:	2b00      	cmp	r3, #0
 800e046:	d002      	beq.n	800e04e <LmHandlerInit+0x6a>
    {
        return LORAMAC_HANDLER_ERROR;
 800e048:	f04f 33ff 	mov.w	r3, #4294967295
 800e04c:	e000      	b.n	800e050 <LmHandlerInit+0x6c>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800e04e:	2300      	movs	r3, #0
}
 800e050:	4618      	mov	r0, r3
 800e052:	3708      	adds	r7, #8
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}
 800e058:	20000bc8 	.word	0x20000bc8
 800e05c:	20000bcc 	.word	0x20000bcc
 800e060:	0800e8f5 	.word	0x0800e8f5
 800e064:	0800e95d 	.word	0x0800e95d
 800e068:	0800ea39 	.word	0x0800ea39
 800e06c:	0800ebb1 	.word	0x0800ebb1
 800e070:	20000bdc 	.word	0x20000bdc
 800e074:	0800f0fd 	.word	0x0800f0fd
 800e078:	20000098 	.word	0x20000098

0800e07c <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b094      	sub	sp, #80	; 0x50
 800e080:	af04      	add	r7, sp, #16
 800e082:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800e084:	2214      	movs	r2, #20
 800e086:	6879      	ldr	r1, [r7, #4]
 800e088:	4890      	ldr	r0, [pc, #576]	; (800e2cc <LmHandlerConfigure+0x250>)
 800e08a:	f00f fd19 	bl	801dac0 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
 800e08e:	4b90      	ldr	r3, [pc, #576]	; (800e2d0 <LmHandlerConfigure+0x254>)
 800e090:	2200      	movs	r2, #0
 800e092:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800e094:	f7fe fb08 	bl	800c6a8 <LoraInfo_GetPtr>
 800e098:	63f8      	str	r0, [r7, #60]	; 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800e09a:	4b8c      	ldr	r3, [pc, #560]	; (800e2cc <LmHandlerConfigure+0x250>)
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	461a      	mov	r2, r3
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	4093      	lsls	r3, r2
 800e0a4:	461a      	mov	r2, r3
 800e0a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	4013      	ands	r3, r2
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d106      	bne.n	800e0be <LmHandlerConfigure+0x42>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800e0b0:	4b88      	ldr	r3, [pc, #544]	; (800e2d4 <LmHandlerConfigure+0x258>)
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	2100      	movs	r1, #0
 800e0b6:	2000      	movs	r0, #0
 800e0b8:	f010 fd52 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800e0bc:	e7fe      	b.n	800e0bc <LmHandlerConfigure+0x40>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800e0be:	4b83      	ldr	r3, [pc, #524]	; (800e2cc <LmHandlerConfigure+0x250>)
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	4984      	ldr	r1, [pc, #528]	; (800e2d8 <LmHandlerConfigure+0x25c>)
 800e0c6:	4885      	ldr	r0, [pc, #532]	; (800e2dc <LmHandlerConfigure+0x260>)
 800e0c8:	f004 fcfe 	bl	8012ac8 <LoRaMacInitialization>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d002      	beq.n	800e0d8 <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 800e0d2:	f04f 33ff 	mov.w	r3, #4294967295
 800e0d6:	e0f5      	b.n	800e2c4 <LmHandlerConfigure+0x248>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800e0d8:	2326      	movs	r3, #38	; 0x26
 800e0da:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800e0dc:	f107 0318 	add.w	r3, r7, #24
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f005 fa15 	bl	8013510 <LoRaMacMibSetRequestConfirm>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d103      	bne.n	800e0f4 <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 800e0ec:	4b7c      	ldr	r3, [pc, #496]	; (800e2e0 <LmHandlerConfigure+0x264>)
 800e0ee:	2201      	movs	r2, #1
 800e0f0:	701a      	strb	r2, [r3, #0]
 800e0f2:	e02a      	b.n	800e14a <LmHandlerConfigure+0xce>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800e0f4:	2327      	movs	r3, #39	; 0x27
 800e0f6:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800e0f8:	4b7a      	ldr	r3, [pc, #488]	; (800e2e4 <LmHandlerConfigure+0x268>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	691b      	ldr	r3, [r3, #16]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d00c      	beq.n	800e11c <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800e102:	f107 0318 	add.w	r3, r7, #24
 800e106:	4618      	mov	r0, r3
 800e108:	f005 f87c 	bl	8013204 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800e10c:	4b75      	ldr	r3, [pc, #468]	; (800e2e4 <LmHandlerConfigure+0x268>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	691b      	ldr	r3, [r3, #16]
 800e112:	69fa      	ldr	r2, [r7, #28]
 800e114:	f44f 61e5 	mov.w	r1, #1832	; 0x728
 800e118:	4610      	mov	r0, r2
 800e11a:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800e11c:	2326      	movs	r3, #38	; 0x26
 800e11e:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800e120:	f107 0318 	add.w	r3, r7, #24
 800e124:	4618      	mov	r0, r3
 800e126:	f005 f9f3 	bl	8013510 <LoRaMacMibSetRequestConfirm>
 800e12a:	4603      	mov	r3, r0
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d10c      	bne.n	800e14a <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e130:	2301      	movs	r3, #1
 800e132:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800e134:	f107 0318 	add.w	r3, r7, #24
 800e138:	4618      	mov	r0, r3
 800e13a:	f005 f863 	bl	8013204 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800e13e:	7f3b      	ldrb	r3, [r7, #28]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d002      	beq.n	800e14a <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 800e144:	4b66      	ldr	r3, [pc, #408]	; (800e2e0 <LmHandlerConfigure+0x264>)
 800e146:	2201      	movs	r2, #1
 800e148:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800e14a:	4b65      	ldr	r3, [pc, #404]	; (800e2e0 <LmHandlerConfigure+0x264>)
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d02a      	beq.n	800e1a8 <LmHandlerConfigure+0x12c>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800e152:	4b64      	ldr	r3, [pc, #400]	; (800e2e4 <LmHandlerConfigure+0x268>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	69db      	ldr	r3, [r3, #28]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d004      	beq.n	800e166 <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800e15c:	4b61      	ldr	r3, [pc, #388]	; (800e2e4 <LmHandlerConfigure+0x268>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	69db      	ldr	r3, [r3, #28]
 800e162:	2000      	movs	r0, #0
 800e164:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800e166:	2306      	movs	r3, #6
 800e168:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800e16a:	f107 0318 	add.w	r3, r7, #24
 800e16e:	4618      	mov	r0, r3
 800e170:	f005 f848 	bl	8013204 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e174:	69fb      	ldr	r3, [r7, #28]
 800e176:	4a5c      	ldr	r2, [pc, #368]	; (800e2e8 <LmHandlerConfigure+0x26c>)
 800e178:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800e17a:	2326      	movs	r3, #38	; 0x26
 800e17c:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800e17e:	f107 0318 	add.w	r3, r7, #24
 800e182:	4618      	mov	r0, r3
 800e184:	f005 f83e 	bl	8013204 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800e188:	69fb      	ldr	r3, [r7, #28]
 800e18a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800e18e:	4b4f      	ldr	r3, [pc, #316]	; (800e2cc <LmHandlerConfigure+0x250>)
 800e190:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800e192:	69fb      	ldr	r3, [r7, #28]
 800e194:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800e198:	4b4c      	ldr	r3, [pc, #304]	; (800e2cc <LmHandlerConfigure+0x250>)
 800e19a:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800e1a2:	4b4a      	ldr	r3, [pc, #296]	; (800e2cc <LmHandlerConfigure+0x250>)
 800e1a4:	709a      	strb	r2, [r3, #2]
 800e1a6:	e019      	b.n	800e1dc <LmHandlerConfigure+0x160>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800e1a8:	2305      	movs	r3, #5
 800e1aa:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800e1b0:	f107 0318 	add.w	r3, r7, #24
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f005 f9ab 	bl	8013510 <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800e1ba:	4b4a      	ldr	r3, [pc, #296]	; (800e2e4 <LmHandlerConfigure+0x268>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	68db      	ldr	r3, [r3, #12]
 800e1c0:	4798      	blx	r3
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	4a48      	ldr	r2, [pc, #288]	; (800e2e8 <LmHandlerConfigure+0x26c>)
 800e1c6:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800e1c8:	2306      	movs	r3, #6
 800e1ca:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800e1cc:	4b46      	ldr	r3, [pc, #280]	; (800e2e8 <LmHandlerConfigure+0x26c>)
 800e1ce:	695b      	ldr	r3, [r3, #20]
 800e1d0:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800e1d2:	f107 0318 	add.w	r3, r7, #24
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f005 f99a 	bl	8013510 <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800e1dc:	2302      	movs	r3, #2
 800e1de:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800e1e0:	f107 0318 	add.w	r3, r7, #24
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f005 f80d 	bl	8013204 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800e1ea:	69fb      	ldr	r3, [r7, #28]
 800e1ec:	2208      	movs	r2, #8
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	483d      	ldr	r0, [pc, #244]	; (800e2e8 <LmHandlerConfigure+0x26c>)
 800e1f2:	f00c f960 	bl	801a4b6 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800e1f6:	2303      	movs	r3, #3
 800e1f8:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800e1fa:	f107 0318 	add.w	r3, r7, #24
 800e1fe:	4618      	mov	r0, r3
 800e200:	f005 f800 	bl	8013204 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800e204:	69fb      	ldr	r3, [r7, #28]
 800e206:	2208      	movs	r2, #8
 800e208:	4619      	mov	r1, r3
 800e20a:	4838      	ldr	r0, [pc, #224]	; (800e2ec <LmHandlerConfigure+0x270>)
 800e20c:	f00c f953 	bl	801a4b6 <memcpy1>

    SecureElementPrintKeys();
 800e210:	f7ff fc1c 	bl	800da4c <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800e214:	4b36      	ldr	r3, [pc, #216]	; (800e2f0 <LmHandlerConfigure+0x274>)
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	461a      	mov	r2, r3
 800e21a:	4b36      	ldr	r3, [pc, #216]	; (800e2f4 <LmHandlerConfigure+0x278>)
 800e21c:	781b      	ldrb	r3, [r3, #0]
 800e21e:	4619      	mov	r1, r3
 800e220:	4b35      	ldr	r3, [pc, #212]	; (800e2f8 <LmHandlerConfigure+0x27c>)
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	4618      	mov	r0, r3
 800e226:	4b35      	ldr	r3, [pc, #212]	; (800e2fc <LmHandlerConfigure+0x280>)
 800e228:	781b      	ldrb	r3, [r3, #0]
 800e22a:	9303      	str	r3, [sp, #12]
 800e22c:	9002      	str	r0, [sp, #8]
 800e22e:	9101      	str	r1, [sp, #4]
 800e230:	9200      	str	r2, [sp, #0]
 800e232:	4b33      	ldr	r3, [pc, #204]	; (800e300 <LmHandlerConfigure+0x284>)
 800e234:	2200      	movs	r2, #0
 800e236:	2100      	movs	r1, #0
 800e238:	2002      	movs	r0, #2
 800e23a:	f010 fc91 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800e23e:	230f      	movs	r3, #15
 800e240:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800e242:	2301      	movs	r3, #1
 800e244:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800e246:	f107 0318 	add.w	r3, r7, #24
 800e24a:	4618      	mov	r0, r3
 800e24c:	f005 f960 	bl	8013510 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800e250:	2310      	movs	r3, #16
 800e252:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800e254:	2300      	movs	r3, #0
 800e256:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e258:	f107 0318 	add.w	r3, r7, #24
 800e25c:	4618      	mov	r0, r3
 800e25e:	f005 f957 	bl	8013510 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800e262:	2304      	movs	r3, #4
 800e264:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800e266:	4b19      	ldr	r3, [pc, #100]	; (800e2cc <LmHandlerConfigure+0x250>)
 800e268:	789b      	ldrb	r3, [r3, #2]
 800e26a:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e26c:	f107 0318 	add.w	r3, r7, #24
 800e270:	4618      	mov	r0, r3
 800e272:	f005 f94d 	bl	8013510 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800e276:	2337      	movs	r3, #55	; 0x37
 800e278:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800e27a:	4b14      	ldr	r3, [pc, #80]	; (800e2cc <LmHandlerConfigure+0x250>)
 800e27c:	691b      	ldr	r3, [r3, #16]
 800e27e:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e280:	f107 0318 	add.w	r3, r7, #24
 800e284:	4618      	mov	r0, r3
 800e286:	f005 f943 	bl	8013510 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800e28a:	230f      	movs	r3, #15
 800e28c:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800e28e:	4b0f      	ldr	r3, [pc, #60]	; (800e2cc <LmHandlerConfigure+0x250>)
 800e290:	781b      	ldrb	r3, [r3, #0]
 800e292:	f107 0210 	add.w	r2, r7, #16
 800e296:	4611      	mov	r1, r2
 800e298:	4618      	mov	r0, r3
 800e29a:	f009 fd61 	bl	8017d60 <RegionGetPhyParam>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	bf14      	ite	ne
 800e2a8:	2301      	movne	r3, #1
 800e2aa:	2300      	moveq	r3, #0
 800e2ac:	b2da      	uxtb	r2, r3
 800e2ae:	4b07      	ldr	r3, [pc, #28]	; (800e2cc <LmHandlerConfigure+0x250>)
 800e2b0:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800e2b2:	2014      	movs	r0, #20
 800e2b4:	f000 fb06 	bl	800e8c4 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800e2b8:	4b04      	ldr	r3, [pc, #16]	; (800e2cc <LmHandlerConfigure+0x250>)
 800e2ba:	799b      	ldrb	r3, [r3, #6]
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f005 feb7 	bl	8014030 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800e2c2:	2300      	movs	r3, #0
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	3740      	adds	r7, #64	; 0x40
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}
 800e2cc:	20000bb4 	.word	0x20000bb4
 800e2d0:	20000c0c 	.word	0x20000c0c
 800e2d4:	0801f4fc 	.word	0x0801f4fc
 800e2d8:	20000bdc 	.word	0x20000bdc
 800e2dc:	20000bcc 	.word	0x20000bcc
 800e2e0:	20000d06 	.word	0x20000d06
 800e2e4:	20000bc8 	.word	0x20000bc8
 800e2e8:	20000080 	.word	0x20000080
 800e2ec:	20000088 	.word	0x20000088
 800e2f0:	20000097 	.word	0x20000097
 800e2f4:	20000096 	.word	0x20000096
 800e2f8:	20000095 	.word	0x20000095
 800e2fc:	20000094 	.word	0x20000094
 800e300:	0801f548 	.word	0x0801f548

0800e304 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800e304:	b580      	push	{r7, lr}
 800e306:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800e308:	f002 fbb0 	bl	8010a6c <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800e30c:	f000 fe2c 	bl	800ef68 <LmHandlerPackagesProcess>
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800e310:	bf00      	nop
 800e312:	bd80      	pop	{r7, pc}

0800e314 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800e314:	b480      	push	{r7}
 800e316:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800e318:	4b02      	ldr	r3, [pc, #8]	; (800e324 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800e31a:	681b      	ldr	r3, [r3, #0]
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	46bd      	mov	sp, r7
 800e320:	bc80      	pop	{r7}
 800e322:	4770      	bx	lr
 800e324:	20000c10 	.word	0x20000c10

0800e328 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b090      	sub	sp, #64	; 0x40
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	4603      	mov	r3, r0
 800e330:	460a      	mov	r2, r1
 800e332:	71fb      	strb	r3, [r7, #7]
 800e334:	4613      	mov	r3, r2
 800e336:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800e338:	2301      	movs	r3, #1
 800e33a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800e33e:	4b35      	ldr	r3, [pc, #212]	; (800e414 <LmHandlerJoin+0xec>)
 800e340:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e344:	b2db      	uxtb	r3, r3
 800e346:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800e34a:	79fb      	ldrb	r3, [r7, #7]
 800e34c:	2b02      	cmp	r3, #2
 800e34e:	d110      	bne.n	800e372 <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800e350:	2302      	movs	r3, #2
 800e352:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800e356:	4b30      	ldr	r3, [pc, #192]	; (800e418 <LmHandlerJoin+0xf0>)
 800e358:	2202      	movs	r2, #2
 800e35a:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800e35c:	4a2e      	ldr	r2, [pc, #184]	; (800e418 <LmHandlerJoin+0xf0>)
 800e35e:	79bb      	ldrb	r3, [r7, #6]
 800e360:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800e362:	f004 fe65 	bl	8013030 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800e366:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e36a:	4618      	mov	r0, r3
 800e36c:	f005 fc2a 	bl	8013bc4 <LoRaMacMlmeRequest>
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800e370:	e04b      	b.n	800e40a <LmHandlerJoin+0xe2>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800e372:	2301      	movs	r3, #1
 800e374:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800e378:	4b27      	ldr	r3, [pc, #156]	; (800e418 <LmHandlerJoin+0xf0>)
 800e37a:	2201      	movs	r2, #1
 800e37c:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800e37e:	4b25      	ldr	r3, [pc, #148]	; (800e414 <LmHandlerJoin+0xec>)
 800e380:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800e384:	4b24      	ldr	r3, [pc, #144]	; (800e418 <LmHandlerJoin+0xf0>)
 800e386:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e388:	4b23      	ldr	r3, [pc, #140]	; (800e418 <LmHandlerJoin+0xf0>)
 800e38a:	2200      	movs	r2, #0
 800e38c:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800e38e:	4a22      	ldr	r2, [pc, #136]	; (800e418 <LmHandlerJoin+0xf0>)
 800e390:	79bb      	ldrb	r3, [r7, #6]
 800e392:	71d3      	strb	r3, [r2, #7]
        if (CtxRestoreDone == false)
 800e394:	4b21      	ldr	r3, [pc, #132]	; (800e41c <LmHandlerJoin+0xf4>)
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	f083 0301 	eor.w	r3, r3, #1
 800e39c:	b2db      	uxtb	r3, r3
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d01e      	beq.n	800e3e0 <LmHandlerJoin+0xb8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800e3a2:	231e      	movs	r3, #30
 800e3a4:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800e3a6:	4b1b      	ldr	r3, [pc, #108]	; (800e414 <LmHandlerJoin+0xec>)
 800e3a8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e3ac:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e3ae:	f107 0308 	add.w	r3, r7, #8
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f005 f8ac 	bl	8013510 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800e3b8:	231f      	movs	r3, #31
 800e3ba:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800e3bc:	4b15      	ldr	r3, [pc, #84]	; (800e414 <LmHandlerJoin+0xec>)
 800e3be:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e3c2:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e3c4:	f107 0308 	add.w	r3, r7, #8
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f005 f8a1 	bl	8013510 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800e3ce:	2328      	movs	r3, #40	; 0x28
 800e3d0:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800e3d2:	4b13      	ldr	r3, [pc, #76]	; (800e420 <LmHandlerJoin+0xf8>)
 800e3d4:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800e3d6:	f107 0308 	add.w	r3, r7, #8
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f005 f898 	bl	8013510 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800e3e0:	f004 fe26 	bl	8013030 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800e3ec:	f107 0308 	add.w	r3, r7, #8
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f005 f88d 	bl	8013510 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800e3f6:	4b0b      	ldr	r3, [pc, #44]	; (800e424 <LmHandlerJoin+0xfc>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3fc:	4806      	ldr	r0, [pc, #24]	; (800e418 <LmHandlerJoin+0xf0>)
 800e3fe:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800e400:	4b04      	ldr	r3, [pc, #16]	; (800e414 <LmHandlerJoin+0xec>)
 800e402:	785b      	ldrb	r3, [r3, #1]
 800e404:	4618      	mov	r0, r3
 800e406:	f000 f97b 	bl	800e700 <LmHandlerRequestClass>
}
 800e40a:	bf00      	nop
 800e40c:	3740      	adds	r7, #64	; 0x40
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	20000bb4 	.word	0x20000bb4
 800e418:	200000a4 	.word	0x200000a4
 800e41c:	20000d06 	.word	0x20000d06
 800e420:	01000300 	.word	0x01000300
 800e424:	20000bc8 	.word	0x20000bc8

0800e428 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b08a      	sub	sp, #40	; 0x28
 800e42c:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e42e:	2301      	movs	r3, #1
 800e430:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800e432:	463b      	mov	r3, r7
 800e434:	4618      	mov	r0, r3
 800e436:	f004 fee5 	bl	8013204 <LoRaMacMibGetRequestConfirm>
 800e43a:	4603      	mov	r3, r0
 800e43c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800e440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e444:	2b00      	cmp	r3, #0
 800e446:	d106      	bne.n	800e456 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e448:	793b      	ldrb	r3, [r7, #4]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d101      	bne.n	800e452 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800e44e:	2300      	movs	r3, #0
 800e450:	e002      	b.n	800e458 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800e452:	2301      	movs	r3, #1
 800e454:	e000      	b.n	800e458 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800e456:	2300      	movs	r3, #0
    }
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3728      	adds	r7, #40	; 0x28
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b08a      	sub	sp, #40	; 0x28
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	460b      	mov	r3, r1
 800e46a:	70fb      	strb	r3, [r7, #3]
 800e46c:	4613      	mov	r3, r2
 800e46e:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800e470:	23ff      	movs	r3, #255	; 0xff
 800e472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800e476:	f002 f887 	bl	8010588 <LoRaMacIsBusy>
 800e47a:	4603      	mov	r3, r0
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d002      	beq.n	800e486 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e480:	f06f 0301 	mvn.w	r3, #1
 800e484:	e0b6      	b.n	800e5f4 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800e486:	f7ff ffcf 	bl	800e428 <LmHandlerJoinStatus>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	d00a      	beq.n	800e4a6 <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800e490:	4b5a      	ldr	r3, [pc, #360]	; (800e5fc <LmHandlerSend+0x19c>)
 800e492:	799b      	ldrb	r3, [r3, #6]
 800e494:	4a59      	ldr	r2, [pc, #356]	; (800e5fc <LmHandlerSend+0x19c>)
 800e496:	79d2      	ldrb	r2, [r2, #7]
 800e498:	4611      	mov	r1, r2
 800e49a:	4618      	mov	r0, r3
 800e49c:	f7ff ff44 	bl	800e328 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e4a0:	f06f 0302 	mvn.w	r3, #2
 800e4a4:	e0a6      	b.n	800e5f4 <LmHandlerSend+0x194>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800e4a6:	4b56      	ldr	r3, [pc, #344]	; (800e600 <LmHandlerSend+0x1a0>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	68db      	ldr	r3, [r3, #12]
 800e4ac:	4798      	blx	r3
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d00d      	beq.n	800e4d0 <LmHandlerSend+0x70>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	781a      	ldrb	r2, [r3, #0]
 800e4b8:	4b51      	ldr	r3, [pc, #324]	; (800e600 <LmHandlerSend+0x1a0>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	d006      	beq.n	800e4d0 <LmHandlerSend+0x70>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d002      	beq.n	800e4d0 <LmHandlerSend+0x70>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800e4ca:	f06f 0303 	mvn.w	r3, #3
 800e4ce:	e091      	b.n	800e5f4 <LmHandlerSend+0x194>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800e4d0:	4a4c      	ldr	r2, [pc, #304]	; (800e604 <LmHandlerSend+0x1a4>)
 800e4d2:	78fb      	ldrb	r3, [r7, #3]
 800e4d4:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800e4d6:	78fb      	ldrb	r3, [r7, #3]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	bf14      	ite	ne
 800e4dc:	2301      	movne	r3, #1
 800e4de:	2300      	moveq	r3, #0
 800e4e0:	b2db      	uxtb	r3, r3
 800e4e2:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800e4e4:	4b48      	ldr	r3, [pc, #288]	; (800e608 <LmHandlerSend+0x1a8>)
 800e4e6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e4ea:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	785b      	ldrb	r3, [r3, #1]
 800e4f0:	f107 020c 	add.w	r2, r7, #12
 800e4f4:	4611      	mov	r1, r2
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f004 fdfc 	bl	80130f4 <LoRaMacQueryTxPossible>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d009      	beq.n	800e516 <LmHandlerSend+0xb6>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800e502:	2300      	movs	r3, #0
 800e504:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800e506:	2300      	movs	r3, #0
 800e508:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800e50a:	2300      	movs	r3, #0
 800e50c:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800e50e:	23f9      	movs	r3, #249	; 0xf9
 800e510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e514:	e009      	b.n	800e52a <LmHandlerSend+0xca>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	781b      	ldrb	r3, [r3, #0]
 800e51a:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	785b      	ldrb	r3, [r3, #1]
 800e520:	b29b      	uxth	r3, r3
 800e522:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	685b      	ldr	r3, [r3, #4]
 800e528:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800e52a:	4b36      	ldr	r3, [pc, #216]	; (800e604 <LmHandlerSend+0x1a4>)
 800e52c:	687a      	ldr	r2, [r7, #4]
 800e52e:	3310      	adds	r3, #16
 800e530:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e534:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800e538:	4b33      	ldr	r3, [pc, #204]	; (800e608 <LmHandlerSend+0x1a8>)
 800e53a:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800e53e:	4b31      	ldr	r3, [pc, #196]	; (800e604 <LmHandlerSend+0x1a4>)
 800e540:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800e542:	78ba      	ldrb	r2, [r7, #2]
 800e544:	f107 0310 	add.w	r3, r7, #16
 800e548:	4611      	mov	r1, r2
 800e54a:	4618      	mov	r0, r3
 800e54c:	f005 fc7a 	bl	8013e44 <LoRaMacMcpsRequest>
 800e550:	4603      	mov	r3, r0
 800e552:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800e556:	6a3b      	ldr	r3, [r7, #32]
 800e558:	4a2c      	ldr	r2, [pc, #176]	; (800e60c <LmHandlerSend+0x1ac>)
 800e55a:	6013      	str	r3, [r2, #0]

    switch (status)
 800e55c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e560:	2b11      	cmp	r3, #17
 800e562:	d840      	bhi.n	800e5e6 <LmHandlerSend+0x186>
 800e564:	a201      	add	r2, pc, #4	; (adr r2, 800e56c <LmHandlerSend+0x10c>)
 800e566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e56a:	bf00      	nop
 800e56c:	0800e5b5 	.word	0x0800e5b5
 800e570:	0800e5c7 	.word	0x0800e5c7
 800e574:	0800e5e7 	.word	0x0800e5e7
 800e578:	0800e5e7 	.word	0x0800e5e7
 800e57c:	0800e5e7 	.word	0x0800e5e7
 800e580:	0800e5e7 	.word	0x0800e5e7
 800e584:	0800e5e7 	.word	0x0800e5e7
 800e588:	0800e5cf 	.word	0x0800e5cf
 800e58c:	0800e5e7 	.word	0x0800e5e7
 800e590:	0800e5e7 	.word	0x0800e5e7
 800e594:	0800e5e7 	.word	0x0800e5e7
 800e598:	0800e5df 	.word	0x0800e5df
 800e59c:	0800e5e7 	.word	0x0800e5e7
 800e5a0:	0800e5e7 	.word	0x0800e5e7
 800e5a4:	0800e5c7 	.word	0x0800e5c7
 800e5a8:	0800e5c7 	.word	0x0800e5c7
 800e5ac:	0800e5c7 	.word	0x0800e5c7
 800e5b0:	0800e5d7 	.word	0x0800e5d7
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800e5b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e5b8:	f113 0f07 	cmn.w	r3, #7
 800e5bc:	d017      	beq.n	800e5ee <LmHandlerSend+0x18e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800e5c4:	e013      	b.n	800e5ee <LmHandlerSend+0x18e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800e5c6:	23fe      	movs	r3, #254	; 0xfe
 800e5c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e5cc:	e010      	b.n	800e5f0 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e5ce:	23fd      	movs	r3, #253	; 0xfd
 800e5d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e5d4:	e00c      	b.n	800e5f0 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800e5d6:	23fb      	movs	r3, #251	; 0xfb
 800e5d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e5dc:	e008      	b.n	800e5f0 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800e5de:	23fa      	movs	r3, #250	; 0xfa
 800e5e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e5e4:	e004      	b.n	800e5f0 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e5e6:	23ff      	movs	r3, #255	; 0xff
 800e5e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e5ec:	e000      	b.n	800e5f0 <LmHandlerSend+0x190>
            break;
 800e5ee:	bf00      	nop
    }

    return lmhStatus;
 800e5f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3728      	adds	r7, #40	; 0x28
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}
 800e5fc:	200000a4 	.word	0x200000a4
 800e600:	20000ba0 	.word	0x20000ba0
 800e604:	200000ac 	.word	0x200000ac
 800e608:	20000bb4 	.word	0x20000bb4
 800e60c:	20000c10 	.word	0x20000c10

0800e610 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b086      	sub	sp, #24
 800e614:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800e616:	230a      	movs	r3, #10
 800e618:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800e61a:	463b      	mov	r3, r7
 800e61c:	4618      	mov	r0, r3
 800e61e:	f005 fad1 	bl	8013bc4 <LoRaMacMlmeRequest>
 800e622:	4603      	mov	r3, r0
 800e624:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	4a06      	ldr	r2, [pc, #24]	; (800e644 <LmHandlerDeviceTimeReq+0x34>)
 800e62a:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800e62c:	7dfb      	ldrb	r3, [r7, #23]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d101      	bne.n	800e636 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e632:	2300      	movs	r3, #0
 800e634:	e001      	b.n	800e63a <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e636:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3718      	adds	r7, #24
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	20000c10 	.word	0x20000c10

0800e648 <LmHandlerBeaconReq>:

#if ( LORAMAC_CLASSB_ENABLED == 1 )
static LmHandlerErrorStatus_t LmHandlerBeaconReq( void )
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b086      	sub	sp, #24
 800e64c:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_BEACON_ACQUISITION;
 800e64e:	230c      	movs	r3, #12
 800e650:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800e652:	463b      	mov	r3, r7
 800e654:	4618      	mov	r0, r3
 800e656:	f005 fab5 	bl	8013bc4 <LoRaMacMlmeRequest>
 800e65a:	4603      	mov	r3, r0
 800e65c:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	4a06      	ldr	r2, [pc, #24]	; (800e67c <LmHandlerBeaconReq+0x34>)
 800e662:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800e664:	7dfb      	ldrb	r3, [r7, #23]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d101      	bne.n	800e66e <LmHandlerBeaconReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e66a:	2300      	movs	r3, #0
 800e66c:	e001      	b.n	800e672 <LmHandlerBeaconReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e66e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e672:	4618      	mov	r0, r3
 800e674:	3718      	adds	r7, #24
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	20000c10 	.word	0x20000c10

0800e680 <LmHandlerPingSlotReq>:
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b08a      	sub	sp, #40	; 0x28
 800e684:	af00      	add	r7, sp, #0
 800e686:	4603      	mov	r3, r0
 800e688:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_PING_SLOT_INFO;
 800e68a:	230d      	movs	r3, #13
 800e68c:	743b      	strb	r3, [r7, #16]
    mlmeReq.Req.PingSlotInfo.PingSlot.Fields.Periodicity = periodicity;
 800e68e:	79fb      	ldrb	r3, [r7, #7]
 800e690:	f003 0307 	and.w	r3, r3, #7
 800e694:	b2da      	uxtb	r2, r3
 800e696:	7d3b      	ldrb	r3, [r7, #20]
 800e698:	f362 0302 	bfi	r3, r2, #0, #3
 800e69c:	753b      	strb	r3, [r7, #20]
    mlmeReq.Req.PingSlotInfo.PingSlot.Fields.RFU = 0;
 800e69e:	7d3b      	ldrb	r3, [r7, #20]
 800e6a0:	f36f 03c7 	bfc	r3, #3, #5
 800e6a4:	753b      	strb	r3, [r7, #20]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800e6a6:	f107 0310 	add.w	r3, r7, #16
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f005 fa8a 	bl	8013bc4 <LoRaMacMlmeRequest>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800e6b6:	6a3b      	ldr	r3, [r7, #32]
 800e6b8:	4a0f      	ldr	r2, [pc, #60]	; (800e6f8 <LmHandlerPingSlotReq+0x78>)
 800e6ba:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800e6bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d112      	bne.n	800e6ea <LmHandlerPingSlotReq+0x6a>
    {
        LmHandlerParams.PingSlotPeriodicity = periodicity;
 800e6c4:	4a0d      	ldr	r2, [pc, #52]	; (800e6fc <LmHandlerPingSlotReq+0x7c>)
 800e6c6:	79fb      	ldrb	r3, [r7, #7]
 800e6c8:	7313      	strb	r3, [r2, #12]
        // Send an empty message
        LmHandlerAppData_t appData =
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	723b      	strb	r3, [r7, #8]
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	727b      	strb	r3, [r7, #9]
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	60fb      	str	r3, [r7, #12]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
 800e6d6:	4b09      	ldr	r3, [pc, #36]	; (800e6fc <LmHandlerPingSlotReq+0x7c>)
 800e6d8:	78d9      	ldrb	r1, [r3, #3]
 800e6da:	f107 0308 	add.w	r3, r7, #8
 800e6de:	2200      	movs	r2, #0
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f7ff febd 	bl	800e460 <LmHandlerSend>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	e001      	b.n	800e6ee <LmHandlerPingSlotReq+0x6e>
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800e6ea:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3728      	adds	r7, #40	; 0x28
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	20000c10 	.word	0x20000c10
 800e6fc:	20000bb4 	.word	0x20000bb4

0800e700 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b08c      	sub	sp, #48	; 0x30
 800e704:	af00      	add	r7, sp, #0
 800e706:	4603      	mov	r3, r0
 800e708:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800e70a:	2300      	movs	r3, #0
 800e70c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800e710:	f001 ff3a 	bl	8010588 <LoRaMacIsBusy>
 800e714:	4603      	mov	r3, r0
 800e716:	2b00      	cmp	r3, #0
 800e718:	d002      	beq.n	800e720 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e71a:	f06f 0301 	mvn.w	r3, #1
 800e71e:	e080      	b.n	800e822 <LmHandlerRequestClass+0x122>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800e720:	f7ff fe82 	bl	800e428 <LmHandlerJoinStatus>
 800e724:	4603      	mov	r3, r0
 800e726:	2b01      	cmp	r3, #1
 800e728:	d002      	beq.n	800e730 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e72a:	f06f 0302 	mvn.w	r3, #2
 800e72e:	e078      	b.n	800e822 <LmHandlerRequestClass+0x122>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800e730:	2300      	movs	r3, #0
 800e732:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e734:	f107 0308 	add.w	r3, r7, #8
 800e738:	4618      	mov	r0, r3
 800e73a:	f004 fd63 	bl	8013204 <LoRaMacMibGetRequestConfirm>
 800e73e:	4603      	mov	r3, r0
 800e740:	2b00      	cmp	r3, #0
 800e742:	d002      	beq.n	800e74a <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800e744:	f04f 33ff 	mov.w	r3, #4294967295
 800e748:	e06b      	b.n	800e822 <LmHandlerRequestClass+0x122>
    }
    currentClass = mibReq.Param.Class;
 800e74a:	7b3b      	ldrb	r3, [r7, #12]
 800e74c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800e750:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e754:	79fb      	ldrb	r3, [r7, #7]
 800e756:	429a      	cmp	r2, r3
 800e758:	d05a      	beq.n	800e810 <LmHandlerRequestClass+0x110>
    {
        switch( newClass )
 800e75a:	79fb      	ldrb	r3, [r7, #7]
 800e75c:	2b02      	cmp	r3, #2
 800e75e:	d035      	beq.n	800e7cc <LmHandlerRequestClass+0xcc>
 800e760:	2b02      	cmp	r3, #2
 800e762:	dc57      	bgt.n	800e814 <LmHandlerRequestClass+0x114>
 800e764:	2b00      	cmp	r3, #0
 800e766:	d002      	beq.n	800e76e <LmHandlerRequestClass+0x6e>
 800e768:	2b01      	cmp	r3, #1
 800e76a:	d01e      	beq.n	800e7aa <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800e76c:	e052      	b.n	800e814 <LmHandlerRequestClass+0x114>
                if( currentClass != CLASS_A )
 800e76e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e772:	2b00      	cmp	r3, #0
 800e774:	d050      	beq.n	800e818 <LmHandlerRequestClass+0x118>
                    mibReq.Param.Class = newClass;
 800e776:	79fb      	ldrb	r3, [r7, #7]
 800e778:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e77a:	f107 0308 	add.w	r3, r7, #8
 800e77e:	4618      	mov	r0, r3
 800e780:	f004 fec6 	bl	8013510 <LoRaMacMibSetRequestConfirm>
 800e784:	4603      	mov	r3, r0
 800e786:	2b00      	cmp	r3, #0
 800e788:	d10b      	bne.n	800e7a2 <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800e78a:	4b28      	ldr	r3, [pc, #160]	; (800e82c <LmHandlerRequestClass+0x12c>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e790:	2b00      	cmp	r3, #0
 800e792:	d041      	beq.n	800e818 <LmHandlerRequestClass+0x118>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800e794:	4b25      	ldr	r3, [pc, #148]	; (800e82c <LmHandlerRequestClass+0x12c>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e79a:	79fa      	ldrb	r2, [r7, #7]
 800e79c:	4610      	mov	r0, r2
 800e79e:	4798      	blx	r3
            break;
 800e7a0:	e03a      	b.n	800e818 <LmHandlerRequestClass+0x118>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800e7a2:	23ff      	movs	r3, #255	; 0xff
 800e7a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800e7a8:	e036      	b.n	800e818 <LmHandlerRequestClass+0x118>
                if( currentClass != CLASS_A )
 800e7aa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d003      	beq.n	800e7ba <LmHandlerRequestClass+0xba>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800e7b2:	23ff      	movs	r3, #255	; 0xff
 800e7b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800e7b8:	e031      	b.n	800e81e <LmHandlerRequestClass+0x11e>
                    errorStatus = LmHandlerDeviceTimeReq( );
 800e7ba:	f7ff ff29 	bl	800e610 <LmHandlerDeviceTimeReq>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    IsClassBSwitchPending = true;
 800e7c4:	4b1a      	ldr	r3, [pc, #104]	; (800e830 <LmHandlerRequestClass+0x130>)
 800e7c6:	2201      	movs	r2, #1
 800e7c8:	701a      	strb	r2, [r3, #0]
            break;
 800e7ca:	e028      	b.n	800e81e <LmHandlerRequestClass+0x11e>
                if( currentClass != CLASS_A )
 800e7cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d003      	beq.n	800e7dc <LmHandlerRequestClass+0xdc>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800e7d4:	23ff      	movs	r3, #255	; 0xff
 800e7d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800e7da:	e01f      	b.n	800e81c <LmHandlerRequestClass+0x11c>
                    mibReq.Param.Class = newClass;
 800e7dc:	79fb      	ldrb	r3, [r7, #7]
 800e7de:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800e7e0:	f107 0308 	add.w	r3, r7, #8
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f004 fe93 	bl	8013510 <LoRaMacMibSetRequestConfirm>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d10b      	bne.n	800e808 <LmHandlerRequestClass+0x108>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800e7f0:	4b0e      	ldr	r3, [pc, #56]	; (800e82c <LmHandlerRequestClass+0x12c>)
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d010      	beq.n	800e81c <LmHandlerRequestClass+0x11c>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800e7fa:	4b0c      	ldr	r3, [pc, #48]	; (800e82c <LmHandlerRequestClass+0x12c>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e800:	79fa      	ldrb	r2, [r7, #7]
 800e802:	4610      	mov	r0, r2
 800e804:	4798      	blx	r3
            break;
 800e806:	e009      	b.n	800e81c <LmHandlerRequestClass+0x11c>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800e808:	23ff      	movs	r3, #255	; 0xff
 800e80a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800e80e:	e005      	b.n	800e81c <LmHandlerRequestClass+0x11c>
        }
    }
 800e810:	bf00      	nop
 800e812:	e004      	b.n	800e81e <LmHandlerRequestClass+0x11e>
            break;
 800e814:	bf00      	nop
 800e816:	e002      	b.n	800e81e <LmHandlerRequestClass+0x11e>
            break;
 800e818:	bf00      	nop
 800e81a:	e000      	b.n	800e81e <LmHandlerRequestClass+0x11e>
            break;
 800e81c:	bf00      	nop
    return errorStatus;
 800e81e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e822:	4618      	mov	r0, r3
 800e824:	3730      	adds	r7, #48	; 0x30
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	bf00      	nop
 800e82c:	20000bc8 	.word	0x20000bc8
 800e830:	20000c0c 	.word	0x20000c0c

0800e834 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b08c      	sub	sp, #48	; 0x30
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d102      	bne.n	800e848 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e842:	f04f 33ff 	mov.w	r3, #4294967295
 800e846:	e010      	b.n	800e86a <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800e848:	2300      	movs	r3, #0
 800e84a:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800e84c:	f107 030c 	add.w	r3, r7, #12
 800e850:	4618      	mov	r0, r3
 800e852:	f004 fcd7 	bl	8013204 <LoRaMacMibGetRequestConfirm>
 800e856:	4603      	mov	r3, r0
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d002      	beq.n	800e862 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e85c:	f04f 33ff 	mov.w	r3, #4294967295
 800e860:	e003      	b.n	800e86a <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800e862:	7c3a      	ldrb	r2, [r7, #16]
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800e868:	2300      	movs	r3, #0
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3730      	adds	r7, #48	; 0x30
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
	...

0800e874 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b08c      	sub	sp, #48	; 0x30
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d102      	bne.n	800e888 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e882:	f04f 33ff 	mov.w	r3, #4294967295
 800e886:	e016      	b.n	800e8b6 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800e888:	231f      	movs	r3, #31
 800e88a:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800e88c:	f107 030c 	add.w	r3, r7, #12
 800e890:	4618      	mov	r0, r3
 800e892:	f004 fcb7 	bl	8013204 <LoRaMacMibGetRequestConfirm>
 800e896:	4603      	mov	r3, r0
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d002      	beq.n	800e8a2 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e89c:	f04f 33ff 	mov.w	r3, #4294967295
 800e8a0:	e009      	b.n	800e8b6 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800e8a2:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f993 2000 	ldrsb.w	r2, [r3]
 800e8b0:	4b03      	ldr	r3, [pc, #12]	; (800e8c0 <LmHandlerGetTxDatarate+0x4c>)
 800e8b2:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800e8b4:	2300      	movs	r3, #0
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3730      	adds	r7, #48	; 0x30
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	20000bb4 	.word	0x20000bb4

0800e8c4 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b08c      	sub	sp, #48	; 0x30
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800e8cc:	2322      	movs	r3, #34	; 0x22
 800e8ce:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e8d4:	f107 030c 	add.w	r3, r7, #12
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f004 fe19 	bl	8013510 <LoRaMacMibSetRequestConfirm>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d002      	beq.n	800e8ea <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800e8e4:	f04f 33ff 	mov.w	r3, #4294967295
 800e8e8:	e000      	b.n	800e8ec <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800e8ea:	2300      	movs	r3, #0
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3730      	adds	r7, #48	; 0x30
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b082      	sub	sp, #8
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800e8fc:	4b15      	ldr	r3, [pc, #84]	; (800e954 <McpsConfirm+0x60>)
 800e8fe:	2201      	movs	r2, #1
 800e900:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	785a      	ldrb	r2, [r3, #1]
 800e906:	4b13      	ldr	r3, [pc, #76]	; (800e954 <McpsConfirm+0x60>)
 800e908:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	789b      	ldrb	r3, [r3, #2]
 800e90e:	b25a      	sxtb	r2, r3
 800e910:	4b10      	ldr	r3, [pc, #64]	; (800e954 <McpsConfirm+0x60>)
 800e912:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	68db      	ldr	r3, [r3, #12]
 800e918:	4a0e      	ldr	r2, [pc, #56]	; (800e954 <McpsConfirm+0x60>)
 800e91a:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800e922:	4b0c      	ldr	r3, [pc, #48]	; (800e954 <McpsConfirm+0x60>)
 800e924:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	691b      	ldr	r3, [r3, #16]
 800e92a:	b2da      	uxtb	r2, r3
 800e92c:	4b09      	ldr	r3, [pc, #36]	; (800e954 <McpsConfirm+0x60>)
 800e92e:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	791b      	ldrb	r3, [r3, #4]
 800e934:	461a      	mov	r2, r3
 800e936:	4b07      	ldr	r3, [pc, #28]	; (800e954 <McpsConfirm+0x60>)
 800e938:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800e93a:	4b07      	ldr	r3, [pc, #28]	; (800e958 <McpsConfirm+0x64>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e940:	4804      	ldr	r0, [pc, #16]	; (800e954 <McpsConfirm+0x60>)
 800e942:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800e944:	6879      	ldr	r1, [r7, #4]
 800e946:	2000      	movs	r0, #0
 800e948:	f000 fa7a 	bl	800ee40 <LmHandlerPackagesNotify>
}
 800e94c:	bf00      	nop
 800e94e:	3708      	adds	r7, #8
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}
 800e954:	200000ac 	.word	0x200000ac
 800e958:	20000bc8 	.word	0x20000bc8

0800e95c <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b088      	sub	sp, #32
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
 800e964:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800e966:	2300      	movs	r3, #0
 800e968:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800e96a:	4b31      	ldr	r3, [pc, #196]	; (800ea30 <McpsIndication+0xd4>)
 800e96c:	2201      	movs	r2, #1
 800e96e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	785a      	ldrb	r2, [r3, #1]
 800e974:	4b2e      	ldr	r3, [pc, #184]	; (800ea30 <McpsIndication+0xd4>)
 800e976:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800e978:	4b2d      	ldr	r3, [pc, #180]	; (800ea30 <McpsIndication+0xd4>)
 800e97a:	785b      	ldrb	r3, [r3, #1]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d153      	bne.n	800ea28 <McpsIndication+0xcc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	791b      	ldrb	r3, [r3, #4]
 800e984:	b25a      	sxtb	r2, r3
 800e986:	4b2a      	ldr	r3, [pc, #168]	; (800ea30 <McpsIndication+0xd4>)
 800e988:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e990:	b25a      	sxtb	r2, r3
 800e992:	4b27      	ldr	r3, [pc, #156]	; (800ea30 <McpsIndication+0xd4>)
 800e994:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800e99c:	4b24      	ldr	r3, [pc, #144]	; (800ea30 <McpsIndication+0xd4>)
 800e99e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	78da      	ldrb	r2, [r3, #3]
 800e9a4:	4b22      	ldr	r3, [pc, #136]	; (800ea30 <McpsIndication+0xd4>)
 800e9a6:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	691b      	ldr	r3, [r3, #16]
 800e9ac:	4a20      	ldr	r2, [pc, #128]	; (800ea30 <McpsIndication+0xd4>)
 800e9ae:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	78db      	ldrb	r3, [r3, #3]
 800e9b4:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	7b1b      	ldrb	r3, [r3, #12]
 800e9ba:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	689b      	ldr	r3, [r3, #8]
 800e9c0:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800e9c2:	4b1c      	ldr	r3, [pc, #112]	; (800ea34 <McpsIndication+0xd8>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9c8:	f107 0218 	add.w	r2, r7, #24
 800e9cc:	4918      	ldr	r1, [pc, #96]	; (800ea30 <McpsIndication+0xd4>)
 800e9ce:	4610      	mov	r0, r2
 800e9d0:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800e9d2:	4b18      	ldr	r3, [pc, #96]	; (800ea34 <McpsIndication+0xd8>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d007      	beq.n	800e9ec <McpsIndication+0x90>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	7e1b      	ldrb	r3, [r3, #24]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d003      	beq.n	800e9ec <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800e9e4:	4b13      	ldr	r3, [pc, #76]	; (800ea34 <McpsIndication+0xd8>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9ea:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800e9ec:	6879      	ldr	r1, [r7, #4]
 800e9ee:	2001      	movs	r0, #1
 800e9f0:	f000 fa26 	bl	800ee40 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800e9f4:	f107 0317 	add.w	r3, r7, #23
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f7ff ff1b 	bl	800e834 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	795b      	ldrb	r3, [r3, #5]
 800ea02:	2b01      	cmp	r3, #1
 800ea04:	d111      	bne.n	800ea2a <McpsIndication+0xce>
 800ea06:	7dfb      	ldrb	r3, [r7, #23]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d10e      	bne.n	800ea2a <McpsIndication+0xce>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	733b      	strb	r3, [r7, #12]
 800ea10:	2300      	movs	r3, #0
 800ea12:	737b      	strb	r3, [r7, #13]
 800ea14:	2300      	movs	r3, #0
 800ea16:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
 800ea18:	f107 030c 	add.w	r3, r7, #12
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	2100      	movs	r1, #0
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7ff fd1d 	bl	800e460 <LmHandlerSend>
 800ea26:	e000      	b.n	800ea2a <McpsIndication+0xce>
        return;
 800ea28:	bf00      	nop
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800ea2a:	3720      	adds	r7, #32
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}
 800ea30:	200000c8 	.word	0x200000c8
 800ea34:	20000bc8 	.word	0x20000bc8

0800ea38 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b08c      	sub	sp, #48	; 0x30
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800ea40:	4b53      	ldr	r3, [pc, #332]	; (800eb90 <MlmeConfirm+0x158>)
 800ea42:	2200      	movs	r2, #0
 800ea44:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	785a      	ldrb	r2, [r3, #1]
 800ea4a:	4b51      	ldr	r3, [pc, #324]	; (800eb90 <MlmeConfirm+0x158>)
 800ea4c:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800ea4e:	4b51      	ldr	r3, [pc, #324]	; (800eb94 <MlmeConfirm+0x15c>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea54:	484e      	ldr	r0, [pc, #312]	; (800eb90 <MlmeConfirm+0x158>)
 800ea56:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800ea58:	6879      	ldr	r1, [r7, #4]
 800ea5a:	2002      	movs	r0, #2
 800ea5c:	f000 f9f0 	bl	800ee40 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	3b01      	subs	r3, #1
 800ea66:	2b0c      	cmp	r3, #12
 800ea68:	f200 8088 	bhi.w	800eb7c <MlmeConfirm+0x144>
 800ea6c:	a201      	add	r2, pc, #4	; (adr r2, 800ea74 <MlmeConfirm+0x3c>)
 800ea6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea72:	bf00      	nop
 800ea74:	0800eaa9 	.word	0x0800eaa9
 800ea78:	0800eb7d 	.word	0x0800eb7d
 800ea7c:	0800eb7d 	.word	0x0800eb7d
 800ea80:	0800eafb 	.word	0x0800eafb
 800ea84:	0800eb7d 	.word	0x0800eb7d
 800ea88:	0800eb7d 	.word	0x0800eb7d
 800ea8c:	0800eb7d 	.word	0x0800eb7d
 800ea90:	0800eb7d 	.word	0x0800eb7d
 800ea94:	0800eb7d 	.word	0x0800eb7d
 800ea98:	0800eb13 	.word	0x0800eb13
 800ea9c:	0800eb7d 	.word	0x0800eb7d
 800eaa0:	0800eb21 	.word	0x0800eb21
 800eaa4:	0800eb3b 	.word	0x0800eb3b
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800eaa8:	2306      	movs	r3, #6
 800eaaa:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800eaac:	f107 030c 	add.w	r3, r7, #12
 800eab0:	4618      	mov	r0, r3
 800eab2:	f004 fba7 	bl	8013204 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	4a37      	ldr	r2, [pc, #220]	; (800eb98 <MlmeConfirm+0x160>)
 800eaba:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800eabc:	4837      	ldr	r0, [pc, #220]	; (800eb9c <MlmeConfirm+0x164>)
 800eabe:	f7ff fed9 	bl	800e874 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	785b      	ldrb	r3, [r3, #1]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d108      	bne.n	800eadc <MlmeConfirm+0xa4>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800eaca:	4b35      	ldr	r3, [pc, #212]	; (800eba0 <MlmeConfirm+0x168>)
 800eacc:	2200      	movs	r2, #0
 800eace:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800ead0:	4b34      	ldr	r3, [pc, #208]	; (800eba4 <MlmeConfirm+0x16c>)
 800ead2:	785b      	ldrb	r3, [r3, #1]
 800ead4:	4618      	mov	r0, r3
 800ead6:	f7ff fe13 	bl	800e700 <LmHandlerRequestClass>
 800eada:	e002      	b.n	800eae2 <MlmeConfirm+0xaa>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800eadc:	4b30      	ldr	r3, [pc, #192]	; (800eba0 <MlmeConfirm+0x168>)
 800eade:	22ff      	movs	r2, #255	; 0xff
 800eae0:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800eae2:	4b2c      	ldr	r3, [pc, #176]	; (800eb94 <MlmeConfirm+0x15c>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eae8:	482d      	ldr	r0, [pc, #180]	; (800eba0 <MlmeConfirm+0x168>)
 800eaea:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	785b      	ldrb	r3, [r3, #1]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d145      	bne.n	800eb80 <MlmeConfirm+0x148>
            {
                SecureElementPrintSessionKeys();
 800eaf4:	f7ff f838 	bl	800db68 <SecureElementPrintSessionKeys>
            }
        }
        break;
 800eaf8:	e042      	b.n	800eb80 <MlmeConfirm+0x148>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800eafa:	4b2b      	ldr	r3, [pc, #172]	; (800eba8 <MlmeConfirm+0x170>)
 800eafc:	2201      	movs	r2, #1
 800eafe:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	7a1a      	ldrb	r2, [r3, #8]
 800eb04:	4b28      	ldr	r3, [pc, #160]	; (800eba8 <MlmeConfirm+0x170>)
 800eb06:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	7a5a      	ldrb	r2, [r3, #9]
 800eb0c:	4b26      	ldr	r3, [pc, #152]	; (800eba8 <MlmeConfirm+0x170>)
 800eb0e:	74da      	strb	r2, [r3, #19]
        }
        break;
 800eb10:	e039      	b.n	800eb86 <MlmeConfirm+0x14e>
    case MLME_DEVICE_TIME:
        {
#if ( LORAMAC_CLASSB_ENABLED == 1 )
            if( IsClassBSwitchPending == true )
 800eb12:	4b26      	ldr	r3, [pc, #152]	; (800ebac <MlmeConfirm+0x174>)
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d034      	beq.n	800eb84 <MlmeConfirm+0x14c>
            {
                LmHandlerBeaconReq( );
 800eb1a:	f7ff fd95 	bl	800e648 <LmHandlerBeaconReq>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
 800eb1e:	e031      	b.n	800eb84 <MlmeConfirm+0x14c>
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	785b      	ldrb	r3, [r3, #1]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d105      	bne.n	800eb34 <MlmeConfirm+0xfc>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800eb28:	4b1e      	ldr	r3, [pc, #120]	; (800eba4 <MlmeConfirm+0x16c>)
 800eb2a:	7b1b      	ldrb	r3, [r3, #12]
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f7ff fda7 	bl	800e680 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800eb32:	e028      	b.n	800eb86 <MlmeConfirm+0x14e>
                LmHandlerDeviceTimeReq( );
 800eb34:	f7ff fd6c 	bl	800e610 <LmHandlerDeviceTimeReq>
        break;
 800eb38:	e025      	b.n	800eb86 <MlmeConfirm+0x14e>
    case MLME_PING_SLOT_INFO:
        {
#if ( LORAMAC_CLASSB_ENABLED == 1 )
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	785b      	ldrb	r3, [r3, #1]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d116      	bne.n	800eb70 <MlmeConfirm+0x138>
            {
                MibRequestConfirm_t mibReq;

                // Class B is now activated
                mibReq.Type = MIB_DEVICE_CLASS;
 800eb42:	2300      	movs	r3, #0
 800eb44:	733b      	strb	r3, [r7, #12]
                mibReq.Param.Class = CLASS_B;
 800eb46:	2301      	movs	r3, #1
 800eb48:	743b      	strb	r3, [r7, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800eb4a:	f107 030c 	add.w	r3, r7, #12
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f004 fcde 	bl	8013510 <LoRaMacMibSetRequestConfirm>
                // Notify upper layer
                if (LmHandlerCallbacks->OnClassChange != NULL)
 800eb54:	4b0f      	ldr	r3, [pc, #60]	; (800eb94 <MlmeConfirm+0x15c>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d004      	beq.n	800eb68 <MlmeConfirm+0x130>
                {
                    LmHandlerCallbacks->OnClassChange( CLASS_B );
 800eb5e:	4b0d      	ldr	r3, [pc, #52]	; (800eb94 <MlmeConfirm+0x15c>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb64:	2001      	movs	r0, #1
 800eb66:	4798      	blx	r3
                }
                IsClassBSwitchPending = false;
 800eb68:	4b10      	ldr	r3, [pc, #64]	; (800ebac <MlmeConfirm+0x174>)
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	701a      	strb	r2, [r3, #0]
            {
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
 800eb6e:	e00a      	b.n	800eb86 <MlmeConfirm+0x14e>
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800eb70:	4b0c      	ldr	r3, [pc, #48]	; (800eba4 <MlmeConfirm+0x16c>)
 800eb72:	7b1b      	ldrb	r3, [r3, #12]
 800eb74:	4618      	mov	r0, r3
 800eb76:	f7ff fd83 	bl	800e680 <LmHandlerPingSlotReq>
        break;
 800eb7a:	e004      	b.n	800eb86 <MlmeConfirm+0x14e>
    default:
        break;
 800eb7c:	bf00      	nop
 800eb7e:	e002      	b.n	800eb86 <MlmeConfirm+0x14e>
        break;
 800eb80:	bf00      	nop
 800eb82:	e000      	b.n	800eb86 <MlmeConfirm+0x14e>
        break;
 800eb84:	bf00      	nop
    }
}
 800eb86:	bf00      	nop
 800eb88:	3730      	adds	r7, #48	; 0x30
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	200000ac 	.word	0x200000ac
 800eb94:	20000bc8 	.word	0x20000bc8
 800eb98:	20000080 	.word	0x20000080
 800eb9c:	200000a8 	.word	0x200000a8
 800eba0:	200000a4 	.word	0x200000a4
 800eba4:	20000bb4 	.word	0x20000bb4
 800eba8:	200000c8 	.word	0x200000c8
 800ebac:	20000c0c 	.word	0x20000c0c

0800ebb0 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800ebb0:	b5b0      	push	{r4, r5, r7, lr}
 800ebb2:	b08e      	sub	sp, #56	; 0x38
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800ebba:	4b64      	ldr	r3, [pc, #400]	; (800ed4c <MlmeIndication+0x19c>)
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	785a      	ldrb	r2, [r3, #1]
 800ebc4:	4b61      	ldr	r3, [pc, #388]	; (800ed4c <MlmeIndication+0x19c>)
 800ebc6:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	789b      	ldrb	r3, [r3, #2]
 800ebcc:	b25a      	sxtb	r2, r3
 800ebce:	4b5f      	ldr	r3, [pc, #380]	; (800ed4c <MlmeIndication+0x19c>)
 800ebd0:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ebd8:	b25a      	sxtb	r2, r3
 800ebda:	4b5c      	ldr	r3, [pc, #368]	; (800ed4c <MlmeIndication+0x19c>)
 800ebdc:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ebe4:	4b59      	ldr	r3, [pc, #356]	; (800ed4c <MlmeIndication+0x19c>)
 800ebe6:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	78da      	ldrb	r2, [r3, #3]
 800ebec:	4b57      	ldr	r3, [pc, #348]	; (800ed4c <MlmeIndication+0x19c>)
 800ebee:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	4a55      	ldr	r2, [pc, #340]	; (800ed4c <MlmeIndication+0x19c>)
 800ebf6:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	2b0b      	cmp	r3, #11
 800ebfe:	d009      	beq.n	800ec14 <MlmeIndication+0x64>
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	781b      	ldrb	r3, [r3, #0]
 800ec04:	2b0f      	cmp	r3, #15
 800ec06:	d005      	beq.n	800ec14 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800ec08:	4b51      	ldr	r3, [pc, #324]	; (800ed50 <MlmeIndication+0x1a0>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec0e:	494f      	ldr	r1, [pc, #316]	; (800ed4c <MlmeIndication+0x19c>)
 800ec10:	2000      	movs	r0, #0
 800ec12:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800ec14:	6879      	ldr	r1, [r7, #4]
 800ec16:	2003      	movs	r0, #3
 800ec18:	f000 f912 	bl	800ee40 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	781b      	ldrb	r3, [r3, #0]
 800ec20:	2b0f      	cmp	r3, #15
 800ec22:	d021      	beq.n	800ec68 <MlmeIndication+0xb8>
 800ec24:	2b0f      	cmp	r3, #15
 800ec26:	f300 8087 	bgt.w	800ed38 <MlmeIndication+0x188>
 800ec2a:	2b07      	cmp	r3, #7
 800ec2c:	d002      	beq.n	800ec34 <MlmeIndication+0x84>
 800ec2e:	2b0b      	cmp	r3, #11
 800ec30:	d048      	beq.n	800ecc4 <MlmeIndication+0x114>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800ec32:	e081      	b.n	800ed38 <MlmeIndication+0x188>
            LmHandlerAppData_t appData =
 800ec34:	2300      	movs	r3, #0
 800ec36:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800ec40:	2300      	movs	r3, #0
 800ec42:	637b      	str	r3, [r7, #52]	; 0x34
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800ec44:	4b43      	ldr	r3, [pc, #268]	; (800ed54 <MlmeIndication+0x1a4>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	4798      	blx	r3
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	f083 0301 	eor.w	r3, r3, #1
 800ec52:	b2db      	uxtb	r3, r3
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d071      	beq.n	800ed3c <MlmeIndication+0x18c>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800ec58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ec5c:	2201      	movs	r2, #1
 800ec5e:	2100      	movs	r1, #0
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7ff fbfd 	bl	800e460 <LmHandlerSend>
        break;
 800ec66:	e069      	b.n	800ed3c <MlmeIndication+0x18c>
            mibReq.Type = MIB_DEVICE_CLASS;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.Class = CLASS_A;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ec70:	f107 030c 	add.w	r3, r7, #12
 800ec74:	4618      	mov	r0, r3
 800ec76:	f004 fc4b 	bl	8013510 <LoRaMacMibSetRequestConfirm>
            BeaconParams.State = LORAMAC_HANDLER_BEACON_LOST;
 800ec7a:	4b37      	ldr	r3, [pc, #220]	; (800ed58 <MlmeIndication+0x1a8>)
 800ec7c:	2201      	movs	r2, #1
 800ec7e:	705a      	strb	r2, [r3, #1]
            BeaconParams.Info.Time.Seconds = 0;
 800ec80:	4b35      	ldr	r3, [pc, #212]	; (800ed58 <MlmeIndication+0x1a8>)
 800ec82:	2200      	movs	r2, #0
 800ec84:	605a      	str	r2, [r3, #4]
            BeaconParams.Info.GwSpecific.InfoDesc = 0;
 800ec86:	4b34      	ldr	r3, [pc, #208]	; (800ed58 <MlmeIndication+0x1a8>)
 800ec88:	2200      	movs	r2, #0
 800ec8a:	755a      	strb	r2, [r3, #21]
            UTIL_MEM_set_8( BeaconParams.Info.GwSpecific.Info, 0, 6 );
 800ec8c:	2206      	movs	r2, #6
 800ec8e:	2100      	movs	r1, #0
 800ec90:	4832      	ldr	r0, [pc, #200]	; (800ed5c <MlmeIndication+0x1ac>)
 800ec92:	f00e ff34 	bl	801dafe <UTIL_MEM_set_8>
            if (LmHandlerCallbacks->OnClassChange != NULL)
 800ec96:	4b2e      	ldr	r3, [pc, #184]	; (800ed50 <MlmeIndication+0x1a0>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d004      	beq.n	800ecaa <MlmeIndication+0xfa>
                LmHandlerCallbacks->OnClassChange( CLASS_A );
 800eca0:	4b2b      	ldr	r3, [pc, #172]	; (800ed50 <MlmeIndication+0x1a0>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eca6:	2000      	movs	r0, #0
 800eca8:	4798      	blx	r3
            if (LmHandlerCallbacks->OnBeaconStatusChange != NULL)
 800ecaa:	4b29      	ldr	r3, [pc, #164]	; (800ed50 <MlmeIndication+0x1a0>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d004      	beq.n	800ecbe <MlmeIndication+0x10e>
                LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 800ecb4:	4b26      	ldr	r3, [pc, #152]	; (800ed50 <MlmeIndication+0x1a0>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecba:	4827      	ldr	r0, [pc, #156]	; (800ed58 <MlmeIndication+0x1a8>)
 800ecbc:	4798      	blx	r3
            LmHandlerDeviceTimeReq( );
 800ecbe:	f7ff fca7 	bl	800e610 <LmHandlerDeviceTimeReq>
        break;
 800ecc2:	e03e      	b.n	800ed42 <MlmeIndication+0x192>
            if( mlmeIndication->Status == LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	785b      	ldrb	r3, [r3, #1]
 800ecc8:	2b0e      	cmp	r3, #14
 800ecca:	d118      	bne.n	800ecfe <MlmeIndication+0x14e>
                BeaconParams.State = LORAMAC_HANDLER_BEACON_RX;
 800eccc:	4b22      	ldr	r3, [pc, #136]	; (800ed58 <MlmeIndication+0x1a8>)
 800ecce:	2202      	movs	r2, #2
 800ecd0:	705a      	strb	r2, [r3, #1]
                BeaconParams.Info = mlmeIndication->BeaconInfo;
 800ecd2:	4a21      	ldr	r2, [pc, #132]	; (800ed58 <MlmeIndication+0x1a8>)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	1d14      	adds	r4, r2, #4
 800ecd8:	f103 0508 	add.w	r5, r3, #8
 800ecdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ecde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ece0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ece4:	e884 0003 	stmia.w	r4, {r0, r1}
                if (LmHandlerCallbacks->OnBeaconStatusChange != NULL)
 800ece8:	4b19      	ldr	r3, [pc, #100]	; (800ed50 <MlmeIndication+0x1a0>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d026      	beq.n	800ed40 <MlmeIndication+0x190>
                    LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 800ecf2:	4b17      	ldr	r3, [pc, #92]	; (800ed50 <MlmeIndication+0x1a0>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecf8:	4817      	ldr	r0, [pc, #92]	; (800ed58 <MlmeIndication+0x1a8>)
 800ecfa:	4798      	blx	r3
        break;
 800ecfc:	e020      	b.n	800ed40 <MlmeIndication+0x190>
            else if ( mlmeIndication->Status == LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND )
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	785b      	ldrb	r3, [r3, #1]
 800ed02:	2b10      	cmp	r3, #16
 800ed04:	d11c      	bne.n	800ed40 <MlmeIndication+0x190>
                BeaconParams.State = LORAMAC_HANDLER_BEACON_NRX;
 800ed06:	4b14      	ldr	r3, [pc, #80]	; (800ed58 <MlmeIndication+0x1a8>)
 800ed08:	2203      	movs	r2, #3
 800ed0a:	705a      	strb	r2, [r3, #1]
                BeaconParams.Info = mlmeIndication->BeaconInfo;
 800ed0c:	4a12      	ldr	r2, [pc, #72]	; (800ed58 <MlmeIndication+0x1a8>)
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	1d14      	adds	r4, r2, #4
 800ed12:	f103 0508 	add.w	r5, r3, #8
 800ed16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ed1e:	e884 0003 	stmia.w	r4, {r0, r1}
                if (LmHandlerCallbacks->OnBeaconStatusChange != NULL)
 800ed22:	4b0b      	ldr	r3, [pc, #44]	; (800ed50 <MlmeIndication+0x1a0>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d009      	beq.n	800ed40 <MlmeIndication+0x190>
                    LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 800ed2c:	4b08      	ldr	r3, [pc, #32]	; (800ed50 <MlmeIndication+0x1a0>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed32:	4809      	ldr	r0, [pc, #36]	; (800ed58 <MlmeIndication+0x1a8>)
 800ed34:	4798      	blx	r3
        break;
 800ed36:	e003      	b.n	800ed40 <MlmeIndication+0x190>
        break;
 800ed38:	bf00      	nop
 800ed3a:	e002      	b.n	800ed42 <MlmeIndication+0x192>
        break;
 800ed3c:	bf00      	nop
 800ed3e:	e000      	b.n	800ed42 <MlmeIndication+0x192>
        break;
 800ed40:	bf00      	nop
    }
}
 800ed42:	bf00      	nop
 800ed44:	3738      	adds	r7, #56	; 0x38
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bdb0      	pop	{r4, r5, r7, pc}
 800ed4a:	bf00      	nop
 800ed4c:	200000c8 	.word	0x200000c8
 800ed50:	20000bc8 	.word	0x20000bc8
 800ed54:	20000ba0 	.word	0x20000ba0
 800ed58:	20000bf0 	.word	0x20000bf0
 800ed5c:	20000c06 	.word	0x20000c06

0800ed60 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b084      	sub	sp, #16
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	4603      	mov	r3, r0
 800ed68:	6039      	str	r1, [r7, #0]
 800ed6a:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	60fb      	str	r3, [r7, #12]
    switch( id )
 800ed70:	79fb      	ldrb	r3, [r7, #7]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d103      	bne.n	800ed7e <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800ed76:	f000 f9db 	bl	800f130 <LmhpCompliancePackageFactory>
 800ed7a:	60f8      	str	r0, [r7, #12]
            break;
 800ed7c:	e000      	b.n	800ed80 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800ed7e:	bf00      	nop
        }
    }
    if( package != NULL )
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d02b      	beq.n	800edde <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800ed86:	79fb      	ldrb	r3, [r7, #7]
 800ed88:	4918      	ldr	r1, [pc, #96]	; (800edec <LmHandlerPackageRegister+0x8c>)
 800ed8a:	68fa      	ldr	r2, [r7, #12]
 800ed8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800ed90:	79fb      	ldrb	r3, [r7, #7]
 800ed92:	4a16      	ldr	r2, [pc, #88]	; (800edec <LmHandlerPackageRegister+0x8c>)
 800ed94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed98:	4a15      	ldr	r2, [pc, #84]	; (800edf0 <LmHandlerPackageRegister+0x90>)
 800ed9a:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800ed9c:	79fb      	ldrb	r3, [r7, #7]
 800ed9e:	4a13      	ldr	r2, [pc, #76]	; (800edec <LmHandlerPackageRegister+0x8c>)
 800eda0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eda4:	4a13      	ldr	r2, [pc, #76]	; (800edf4 <LmHandlerPackageRegister+0x94>)
 800eda6:	62da      	str	r2, [r3, #44]	; 0x2c
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800eda8:	79fb      	ldrb	r3, [r7, #7]
 800edaa:	4a10      	ldr	r2, [pc, #64]	; (800edec <LmHandlerPackageRegister+0x8c>)
 800edac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edb0:	4a11      	ldr	r2, [pc, #68]	; (800edf8 <LmHandlerPackageRegister+0x98>)
 800edb2:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800edb4:	4b11      	ldr	r3, [pc, #68]	; (800edfc <LmHandlerPackageRegister+0x9c>)
 800edb6:	681a      	ldr	r2, [r3, #0]
 800edb8:	79fb      	ldrb	r3, [r7, #7]
 800edba:	490c      	ldr	r1, [pc, #48]	; (800edec <LmHandlerPackageRegister+0x8c>)
 800edbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800edc0:	6992      	ldr	r2, [r2, #24]
 800edc2:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800edc4:	79fb      	ldrb	r3, [r7, #7]
 800edc6:	4a09      	ldr	r2, [pc, #36]	; (800edec <LmHandlerPackageRegister+0x8c>)
 800edc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edcc:	685b      	ldr	r3, [r3, #4]
 800edce:	4a0c      	ldr	r2, [pc, #48]	; (800ee00 <LmHandlerPackageRegister+0xa0>)
 800edd0:	6851      	ldr	r1, [r2, #4]
 800edd2:	4a0b      	ldr	r2, [pc, #44]	; (800ee00 <LmHandlerPackageRegister+0xa0>)
 800edd4:	7852      	ldrb	r2, [r2, #1]
 800edd6:	6838      	ldr	r0, [r7, #0]
 800edd8:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800edda:	2300      	movs	r3, #0
 800eddc:	e001      	b.n	800ede2 <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800edde:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3710      	adds	r7, #16
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}
 800edea:	bf00      	nop
 800edec:	20000ba0 	.word	0x20000ba0
 800edf0:	0800e329 	.word	0x0800e329
 800edf4:	0800e461 	.word	0x0800e461
 800edf8:	0800e611 	.word	0x0800e611
 800edfc:	20000bc8 	.word	0x20000bc8
 800ee00:	200000dc 	.word	0x200000dc

0800ee04 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b082      	sub	sp, #8
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800ee0e:	79fb      	ldrb	r3, [r7, #7]
 800ee10:	2b04      	cmp	r3, #4
 800ee12:	d80e      	bhi.n	800ee32 <LmHandlerPackageIsInitialized+0x2e>
 800ee14:	79fb      	ldrb	r3, [r7, #7]
 800ee16:	4a09      	ldr	r2, [pc, #36]	; (800ee3c <LmHandlerPackageIsInitialized+0x38>)
 800ee18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee1c:	689b      	ldr	r3, [r3, #8]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d007      	beq.n	800ee32 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800ee22:	79fb      	ldrb	r3, [r7, #7]
 800ee24:	4a05      	ldr	r2, [pc, #20]	; (800ee3c <LmHandlerPackageIsInitialized+0x38>)
 800ee26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee2a:	689b      	ldr	r3, [r3, #8]
 800ee2c:	4798      	blx	r3
 800ee2e:	4603      	mov	r3, r0
 800ee30:	e000      	b.n	800ee34 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800ee32:	2300      	movs	r3, #0
    }
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	3708      	adds	r7, #8
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}
 800ee3c:	20000ba0 	.word	0x20000ba0

0800ee40 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b084      	sub	sp, #16
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	4603      	mov	r3, r0
 800ee48:	6039      	str	r1, [r7, #0]
 800ee4a:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	73fb      	strb	r3, [r7, #15]
 800ee50:	e07e      	b.n	800ef50 <LmHandlerPackagesNotify+0x110>
    {
        if( LmHandlerPackages[i] != NULL )
 800ee52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee56:	4a43      	ldr	r2, [pc, #268]	; (800ef64 <LmHandlerPackagesNotify+0x124>)
 800ee58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d066      	beq.n	800ef2e <LmHandlerPackagesNotify+0xee>
        {
            switch( notifyType )
 800ee60:	79fb      	ldrb	r3, [r7, #7]
 800ee62:	2b03      	cmp	r3, #3
 800ee64:	d865      	bhi.n	800ef32 <LmHandlerPackagesNotify+0xf2>
 800ee66:	a201      	add	r2, pc, #4	; (adr r2, 800ee6c <LmHandlerPackagesNotify+0x2c>)
 800ee68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee6c:	0800ee7d 	.word	0x0800ee7d
 800ee70:	0800ee9f 	.word	0x0800ee9f
 800ee74:	0800eeeb 	.word	0x0800eeeb
 800ee78:	0800ef0d 	.word	0x0800ef0d
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800ee7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee80:	4a38      	ldr	r2, [pc, #224]	; (800ef64 <LmHandlerPackagesNotify+0x124>)
 800ee82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee86:	699b      	ldr	r3, [r3, #24]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d054      	beq.n	800ef36 <LmHandlerPackagesNotify+0xf6>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800ee8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee90:	4a34      	ldr	r2, [pc, #208]	; (800ef64 <LmHandlerPackagesNotify+0x124>)
 800ee92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee96:	699b      	ldr	r3, [r3, #24]
 800ee98:	6838      	ldr	r0, [r7, #0]
 800ee9a:	4798      	blx	r3
                    }
                    break;
 800ee9c:	e04b      	b.n	800ef36 <LmHandlerPackagesNotify+0xf6>
                }
                case PACKAGE_MCPS_INDICATION:
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800ee9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eea2:	4a30      	ldr	r2, [pc, #192]	; (800ef64 <LmHandlerPackagesNotify+0x124>)
 800eea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eea8:	69db      	ldr	r3, [r3, #28]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d045      	beq.n	800ef3a <LmHandlerPackagesNotify+0xfa>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800eeae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eeb2:	4a2c      	ldr	r2, [pc, #176]	; (800ef64 <LmHandlerPackagesNotify+0x124>)
 800eeb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eeb8:	781a      	ldrb	r2, [r3, #0]
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800eebe:	429a      	cmp	r2, r3
 800eec0:	d00a      	beq.n	800eed8 <LmHandlerPackagesNotify+0x98>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800eec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d137      	bne.n	800ef3a <LmHandlerPackagesNotify+0xfa>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800eeca:	4b26      	ldr	r3, [pc, #152]	; (800ef64 <LmHandlerPackagesNotify+0x124>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	68db      	ldr	r3, [r3, #12]
 800eed0:	4798      	blx	r3
 800eed2:	4603      	mov	r3, r0
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d030      	beq.n	800ef3a <LmHandlerPackagesNotify+0xfa>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800eed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eedc:	4a21      	ldr	r2, [pc, #132]	; (800ef64 <LmHandlerPackagesNotify+0x124>)
 800eede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eee2:	69db      	ldr	r3, [r3, #28]
 800eee4:	6838      	ldr	r0, [r7, #0]
 800eee6:	4798      	blx	r3
                    }
                    break;
 800eee8:	e027      	b.n	800ef3a <LmHandlerPackagesNotify+0xfa>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800eeea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eeee:	4a1d      	ldr	r2, [pc, #116]	; (800ef64 <LmHandlerPackagesNotify+0x124>)
 800eef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eef4:	6a1b      	ldr	r3, [r3, #32]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d021      	beq.n	800ef3e <LmHandlerPackagesNotify+0xfe>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800eefa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eefe:	4a19      	ldr	r2, [pc, #100]	; (800ef64 <LmHandlerPackagesNotify+0x124>)
 800ef00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef04:	6a1b      	ldr	r3, [r3, #32]
 800ef06:	6838      	ldr	r0, [r7, #0]
 800ef08:	4798      	blx	r3
                    }
                    break;
 800ef0a:	e018      	b.n	800ef3e <LmHandlerPackagesNotify+0xfe>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800ef0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef10:	4a14      	ldr	r2, [pc, #80]	; (800ef64 <LmHandlerPackagesNotify+0x124>)
 800ef12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d012      	beq.n	800ef42 <LmHandlerPackagesNotify+0x102>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800ef1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef20:	4a10      	ldr	r2, [pc, #64]	; (800ef64 <LmHandlerPackagesNotify+0x124>)
 800ef22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef28:	6838      	ldr	r0, [r7, #0]
 800ef2a:	4798      	blx	r3
                    }
                    break;
 800ef2c:	e009      	b.n	800ef42 <LmHandlerPackagesNotify+0x102>
                default:
                {
                    break;
                }
            }
        }
 800ef2e:	bf00      	nop
 800ef30:	e008      	b.n	800ef44 <LmHandlerPackagesNotify+0x104>
                    break;
 800ef32:	bf00      	nop
 800ef34:	e006      	b.n	800ef44 <LmHandlerPackagesNotify+0x104>
                    break;
 800ef36:	bf00      	nop
 800ef38:	e004      	b.n	800ef44 <LmHandlerPackagesNotify+0x104>
                    break;
 800ef3a:	bf00      	nop
 800ef3c:	e002      	b.n	800ef44 <LmHandlerPackagesNotify+0x104>
                    break;
 800ef3e:	bf00      	nop
 800ef40:	e000      	b.n	800ef44 <LmHandlerPackagesNotify+0x104>
                    break;
 800ef42:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ef44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef48:	b2db      	uxtb	r3, r3
 800ef4a:	3301      	adds	r3, #1
 800ef4c:	b2db      	uxtb	r3, r3
 800ef4e:	73fb      	strb	r3, [r7, #15]
 800ef50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef54:	2b04      	cmp	r3, #4
 800ef56:	f77f af7c 	ble.w	800ee52 <LmHandlerPackagesNotify+0x12>
    }
}
 800ef5a:	bf00      	nop
 800ef5c:	bf00      	nop
 800ef5e:	3710      	adds	r7, #16
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}
 800ef64:	20000ba0 	.word	0x20000ba0

0800ef68 <LmHandlerPackagesProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b082      	sub	sp, #8
 800ef6c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ef6e:	2300      	movs	r3, #0
 800ef70:	71fb      	strb	r3, [r7, #7]
 800ef72:	e022      	b.n	800efba <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ef74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ef78:	4a14      	ldr	r2, [pc, #80]	; (800efcc <LmHandlerPackagesProcess+0x64>)
 800ef7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d015      	beq.n	800efae <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ef82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ef86:	4a11      	ldr	r2, [pc, #68]	; (800efcc <LmHandlerPackagesProcess+0x64>)
 800ef88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef8c:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d00d      	beq.n	800efae <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800ef92:	79fb      	ldrb	r3, [r7, #7]
 800ef94:	4618      	mov	r0, r3
 800ef96:	f7ff ff35 	bl	800ee04 <LmHandlerPackageIsInitialized>
 800ef9a:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d006      	beq.n	800efae <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800efa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800efa4:	4a09      	ldr	r2, [pc, #36]	; (800efcc <LmHandlerPackagesProcess+0x64>)
 800efa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efaa:	691b      	ldr	r3, [r3, #16]
 800efac:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800efae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800efb2:	b2db      	uxtb	r3, r3
 800efb4:	3301      	adds	r3, #1
 800efb6:	b2db      	uxtb	r3, r3
 800efb8:	71fb      	strb	r3, [r7, #7]
 800efba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800efbe:	2b04      	cmp	r3, #4
 800efc0:	ddd8      	ble.n	800ef74 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800efc2:	bf00      	nop
 800efc4:	bf00      	nop
 800efc6:	3708      	adds	r7, #8
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}
 800efcc:	20000ba0 	.word	0x20000ba0

0800efd0 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b083      	sub	sp, #12
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	4603      	mov	r3, r0
 800efd8:	6039      	str	r1, [r7, #0]
 800efda:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d102      	bne.n	800efe8 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800efe2:	f04f 33ff 	mov.w	r3, #4294967295
 800efe6:	e00e      	b.n	800f006 <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800efe8:	79fb      	ldrb	r3, [r7, #7]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d002      	beq.n	800eff4 <LmHandlerGetVersion+0x24>
 800efee:	2b01      	cmp	r3, #1
 800eff0:	d004      	beq.n	800effc <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800eff2:	e007      	b.n	800f004 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	4a06      	ldr	r2, [pc, #24]	; (800f010 <LmHandlerGetVersion+0x40>)
 800eff8:	601a      	str	r2, [r3, #0]
            break;
 800effa:	e003      	b.n	800f004 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	4a05      	ldr	r2, [pc, #20]	; (800f014 <LmHandlerGetVersion+0x44>)
 800f000:	601a      	str	r2, [r3, #0]
            break;
 800f002:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800f004:	2300      	movs	r3, #0
}
 800f006:	4618      	mov	r0, r3
 800f008:	370c      	adds	r7, #12
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bc80      	pop	{r7}
 800f00e:	4770      	bx	lr
 800f010:	01000300 	.word	0x01000300
 800f014:	01010003 	.word	0x01010003

0800f018 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800f01c:	f005 f826 	bl	801406c <LoRaMacDeInitialization>
 800f020:	4603      	mov	r3, r0
 800f022:	2b00      	cmp	r3, #0
 800f024:	d101      	bne.n	800f02a <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f026:	2300      	movs	r3, #0
 800f028:	e001      	b.n	800f02e <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f02a:	f06f 0301 	mvn.w	r3, #1
    }
}
 800f02e:	4618      	mov	r0, r3
 800f030:	bd80      	pop	{r7, pc}

0800f032 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800f032:	b580      	push	{r7, lr}
 800f034:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800f036:	f004 f825 	bl	8013084 <LoRaMacHalt>
 800f03a:	4603      	mov	r3, r0
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d101      	bne.n	800f044 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f040:	2300      	movs	r3, #0
 800f042:	e001      	b.n	800f048 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f044:	f06f 0301 	mvn.w	r3, #1
    }
}
 800f048:	4618      	mov	r0, r3
 800f04a:	bd80      	pop	{r7, pc}

0800f04c <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b08e      	sub	sp, #56	; 0x38
 800f050:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800f052:	2300      	movs	r3, #0
 800f054:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800f058:	2300      	movs	r3, #0
 800f05a:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800f05c:	f7ff ffe9 	bl	800f032 <LmHandlerHalt>
 800f060:	4603      	mov	r3, r0
 800f062:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800f066:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d12f      	bne.n	800f0ce <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800f06e:	f000 f84f 	bl	800f110 <NvmDataMgmtStoreBegin>
 800f072:	6338      	str	r0, [r7, #48]	; 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800f074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f076:	f113 0f02 	cmn.w	r3, #2
 800f07a:	d103      	bne.n	800f084 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800f07c:	23f8      	movs	r3, #248	; 0xf8
 800f07e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f082:	e01c      	b.n	800f0be <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800f084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f086:	2b00      	cmp	r3, #0
 800f088:	d104      	bne.n	800f094 <LmHandlerNvmDataStore+0x48>
 800f08a:	4b1b      	ldr	r3, [pc, #108]	; (800f0f8 <LmHandlerNvmDataStore+0xac>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	695b      	ldr	r3, [r3, #20]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d103      	bne.n	800f09c <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800f094:	23ff      	movs	r3, #255	; 0xff
 800f096:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f09a:	e010      	b.n	800f0be <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800f09c:	2326      	movs	r3, #38	; 0x26
 800f09e:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800f0a0:	1d3b      	adds	r3, r7, #4
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f004 f8ae 	bl	8013204 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800f0ac:	f44f 63e5 	mov.w	r3, #1832	; 0x728
 800f0b0:	62bb      	str	r3, [r7, #40]	; 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800f0b2:	4b11      	ldr	r3, [pc, #68]	; (800f0f8 <LmHandlerNvmDataStore+0xac>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	695b      	ldr	r3, [r3, #20]
 800f0b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f0ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0bc:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800f0be:	f000 f82f 	bl	800f120 <NvmDataMgmtStoreEnd>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d002      	beq.n	800f0ce <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800f0c8:	23ff      	movs	r3, #255	; 0xff
 800f0ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800f0ce:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d109      	bne.n	800f0ea <LmHandlerNvmDataStore+0x9e>
 800f0d6:	4b08      	ldr	r3, [pc, #32]	; (800f0f8 <LmHandlerNvmDataStore+0xac>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	69db      	ldr	r3, [r3, #28]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d004      	beq.n	800f0ea <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800f0e0:	4b05      	ldr	r3, [pc, #20]	; (800f0f8 <LmHandlerNvmDataStore+0xac>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	69db      	ldr	r3, [r3, #28]
 800f0e6:	2001      	movs	r0, #1
 800f0e8:	4798      	blx	r3
    }

    return lmhStatus;
 800f0ea:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3738      	adds	r7, #56	; 0x38
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	20000bc8 	.word	0x20000bc8

0800f0fc <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b083      	sub	sp, #12
 800f100:	af00      	add	r7, sp, #0
 800f102:	4603      	mov	r3, r0
 800f104:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800f106:	bf00      	nop
 800f108:	370c      	adds	r7, #12
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bc80      	pop	{r7}
 800f10e:	4770      	bx	lr

0800f110 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800f110:	b480      	push	{r7}
 800f112:	af00      	add	r7, sp, #0
    {
        return NVM_DATA_NOT_AVAILABLE;
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 800f114:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800f118:	4618      	mov	r0, r3
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bc80      	pop	{r7}
 800f11e:	4770      	bx	lr

0800f120 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800f120:	b480      	push	{r7}
 800f122:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 800f124:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800f128:	4618      	mov	r0, r3
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bc80      	pop	{r7}
 800f12e:	4770      	bx	lr

0800f130 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800f130:	b480      	push	{r7}
 800f132:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800f134:	4b02      	ldr	r3, [pc, #8]	; (800f140 <LmhpCompliancePackageFactory+0x10>)
}
 800f136:	4618      	mov	r0, r3
 800f138:	46bd      	mov	sp, r7
 800f13a:	bc80      	pop	{r7}
 800f13c:	4770      	bx	lr
 800f13e:	bf00      	nop
 800f140:	200000e4 	.word	0x200000e4

0800f144 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800f144:	b480      	push	{r7}
 800f146:	b085      	sub	sp, #20
 800f148:	af00      	add	r7, sp, #0
 800f14a:	60f8      	str	r0, [r7, #12]
 800f14c:	60b9      	str	r1, [r7, #8]
 800f14e:	4613      	mov	r3, r2
 800f150:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d00f      	beq.n	800f178 <LmhpComplianceInit+0x34>
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d00c      	beq.n	800f178 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800f15e:	4a0c      	ldr	r2, [pc, #48]	; (800f190 <LmhpComplianceInit+0x4c>)
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800f164:	4a0b      	ldr	r2, [pc, #44]	; (800f194 <LmhpComplianceInit+0x50>)
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800f16a:	4a0a      	ldr	r2, [pc, #40]	; (800f194 <LmhpComplianceInit+0x50>)
 800f16c:	79fb      	ldrb	r3, [r7, #7]
 800f16e:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800f170:	4b08      	ldr	r3, [pc, #32]	; (800f194 <LmhpComplianceInit+0x50>)
 800f172:	2201      	movs	r2, #1
 800f174:	701a      	strb	r2, [r3, #0]
 800f176:	e006      	b.n	800f186 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800f178:	4b05      	ldr	r3, [pc, #20]	; (800f190 <LmhpComplianceInit+0x4c>)
 800f17a:	2200      	movs	r2, #0
 800f17c:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800f17e:	4b05      	ldr	r3, [pc, #20]	; (800f194 <LmhpComplianceInit+0x50>)
 800f180:	2200      	movs	r2, #0
 800f182:	701a      	strb	r2, [r3, #0]
    }
}
 800f184:	bf00      	nop
 800f186:	bf00      	nop
 800f188:	3714      	adds	r7, #20
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bc80      	pop	{r7}
 800f18e:	4770      	bx	lr
 800f190:	20000d34 	.word	0x20000d34
 800f194:	20000d20 	.word	0x20000d20

0800f198 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800f198:	b480      	push	{r7}
 800f19a:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800f19c:	4b02      	ldr	r3, [pc, #8]	; (800f1a8 <LmhpComplianceIsInitialized+0x10>)
 800f19e:	781b      	ldrb	r3, [r3, #0]
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bc80      	pop	{r7}
 800f1a6:	4770      	bx	lr
 800f1a8:	20000d20 	.word	0x20000d20

0800f1ac <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800f1b0:	4b07      	ldr	r3, [pc, #28]	; (800f1d0 <LmhpComplianceIsRunning+0x24>)
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	f083 0301 	eor.w	r3, r3, #1
 800f1b8:	b2db      	uxtb	r3, r3
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d001      	beq.n	800f1c2 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	e001      	b.n	800f1c6 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800f1c2:	4b03      	ldr	r3, [pc, #12]	; (800f1d0 <LmhpComplianceIsRunning+0x24>)
 800f1c4:	785b      	ldrb	r3, [r3, #1]
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bc80      	pop	{r7}
 800f1cc:	4770      	bx	lr
 800f1ce:	bf00      	nop
 800f1d0:	20000d20 	.word	0x20000d20

0800f1d4 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	b083      	sub	sp, #12
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800f1dc:	4b0f      	ldr	r3, [pc, #60]	; (800f21c <LmhpComplianceOnMcpsConfirm+0x48>)
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	f083 0301 	eor.w	r3, r3, #1
 800f1e4:	b2db      	uxtb	r3, r3
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d112      	bne.n	800f210 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800f1ea:	4b0c      	ldr	r3, [pc, #48]	; (800f21c <LmhpComplianceOnMcpsConfirm+0x48>)
 800f1ec:	785b      	ldrb	r3, [r3, #1]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d00f      	beq.n	800f212 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800f1f6:	2b01      	cmp	r3, #1
 800f1f8:	d10b      	bne.n	800f212 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d007      	beq.n	800f212 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800f202:	4b06      	ldr	r3, [pc, #24]	; (800f21c <LmhpComplianceOnMcpsConfirm+0x48>)
 800f204:	899b      	ldrh	r3, [r3, #12]
 800f206:	3301      	adds	r3, #1
 800f208:	b29a      	uxth	r2, r3
 800f20a:	4b04      	ldr	r3, [pc, #16]	; (800f21c <LmhpComplianceOnMcpsConfirm+0x48>)
 800f20c:	819a      	strh	r2, [r3, #12]
 800f20e:	e000      	b.n	800f212 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800f210:	bf00      	nop
    }
}
 800f212:	370c      	adds	r7, #12
 800f214:	46bd      	mov	sp, r7
 800f216:	bc80      	pop	{r7}
 800f218:	4770      	bx	lr
 800f21a:	bf00      	nop
 800f21c:	20000d20 	.word	0x20000d20

0800f220 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800f220:	b480      	push	{r7}
 800f222:	b083      	sub	sp, #12
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800f228:	4b12      	ldr	r3, [pc, #72]	; (800f274 <LmhpComplianceOnMlmeConfirm+0x54>)
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	f083 0301 	eor.w	r3, r3, #1
 800f230:	b2db      	uxtb	r3, r3
 800f232:	2b00      	cmp	r3, #0
 800f234:	d116      	bne.n	800f264 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800f236:	4b0f      	ldr	r3, [pc, #60]	; (800f274 <LmhpComplianceOnMlmeConfirm+0x54>)
 800f238:	785b      	ldrb	r3, [r3, #1]
 800f23a:	f083 0301 	eor.w	r3, r3, #1
 800f23e:	b2db      	uxtb	r3, r3
 800f240:	2b00      	cmp	r3, #0
 800f242:	d111      	bne.n	800f268 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	781b      	ldrb	r3, [r3, #0]
 800f248:	2b04      	cmp	r3, #4
 800f24a:	d10e      	bne.n	800f26a <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800f24c:	4b09      	ldr	r3, [pc, #36]	; (800f274 <LmhpComplianceOnMlmeConfirm+0x54>)
 800f24e:	2201      	movs	r2, #1
 800f250:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	7a1a      	ldrb	r2, [r3, #8]
 800f256:	4b07      	ldr	r3, [pc, #28]	; (800f274 <LmhpComplianceOnMlmeConfirm+0x54>)
 800f258:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	7a5a      	ldrb	r2, [r3, #9]
 800f25e:	4b05      	ldr	r3, [pc, #20]	; (800f274 <LmhpComplianceOnMlmeConfirm+0x54>)
 800f260:	741a      	strb	r2, [r3, #16]
 800f262:	e002      	b.n	800f26a <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800f264:	bf00      	nop
 800f266:	e000      	b.n	800f26a <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800f268:	bf00      	nop
    }
}
 800f26a:	370c      	adds	r7, #12
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bc80      	pop	{r7}
 800f270:	4770      	bx	lr
 800f272:	bf00      	nop
 800f274:	20000d20 	.word	0x20000d20

0800f278 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b082      	sub	sp, #8
 800f27c:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800f27e:	4b33      	ldr	r3, [pc, #204]	; (800f34c <LmhpComplianceTxProcess+0xd4>)
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	f083 0301 	eor.w	r3, r3, #1
 800f286:	b2db      	uxtb	r3, r3
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d002      	beq.n	800f292 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800f28c:	f04f 33ff 	mov.w	r3, #4294967295
 800f290:	e057      	b.n	800f342 <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.IsRunning == false )
 800f292:	4b2e      	ldr	r3, [pc, #184]	; (800f34c <LmhpComplianceTxProcess+0xd4>)
 800f294:	785b      	ldrb	r3, [r3, #1]
 800f296:	f083 0301 	eor.w	r3, r3, #1
 800f29a:	b2db      	uxtb	r3, r3
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d001      	beq.n	800f2a4 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	e04e      	b.n	800f342 <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.LinkCheck == true )
 800f2a4:	4b29      	ldr	r3, [pc, #164]	; (800f34c <LmhpComplianceTxProcess+0xd4>)
 800f2a6:	7b9b      	ldrb	r3, [r3, #14]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d019      	beq.n	800f2e0 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800f2ac:	4b27      	ldr	r3, [pc, #156]	; (800f34c <LmhpComplianceTxProcess+0xd4>)
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800f2b2:	4b26      	ldr	r3, [pc, #152]	; (800f34c <LmhpComplianceTxProcess+0xd4>)
 800f2b4:	2203      	movs	r2, #3
 800f2b6:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800f2b8:	4b24      	ldr	r3, [pc, #144]	; (800f34c <LmhpComplianceTxProcess+0xd4>)
 800f2ba:	689b      	ldr	r3, [r3, #8]
 800f2bc:	2205      	movs	r2, #5
 800f2be:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800f2c0:	4b22      	ldr	r3, [pc, #136]	; (800f34c <LmhpComplianceTxProcess+0xd4>)
 800f2c2:	689b      	ldr	r3, [r3, #8]
 800f2c4:	3301      	adds	r3, #1
 800f2c6:	4a21      	ldr	r2, [pc, #132]	; (800f34c <LmhpComplianceTxProcess+0xd4>)
 800f2c8:	7bd2      	ldrb	r2, [r2, #15]
 800f2ca:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800f2cc:	4b1f      	ldr	r3, [pc, #124]	; (800f34c <LmhpComplianceTxProcess+0xd4>)
 800f2ce:	689b      	ldr	r3, [r3, #8]
 800f2d0:	3302      	adds	r3, #2
 800f2d2:	4a1e      	ldr	r2, [pc, #120]	; (800f34c <LmhpComplianceTxProcess+0xd4>)
 800f2d4:	7c12      	ldrb	r2, [r2, #16]
 800f2d6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800f2d8:	4b1c      	ldr	r3, [pc, #112]	; (800f34c <LmhpComplianceTxProcess+0xd4>)
 800f2da:	2201      	movs	r2, #1
 800f2dc:	709a      	strb	r2, [r3, #2]
 800f2de:	e01c      	b.n	800f31a <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800f2e0:	4b1a      	ldr	r3, [pc, #104]	; (800f34c <LmhpComplianceTxProcess+0xd4>)
 800f2e2:	789b      	ldrb	r3, [r3, #2]
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	d005      	beq.n	800f2f4 <LmhpComplianceTxProcess+0x7c>
 800f2e8:	2b04      	cmp	r3, #4
 800f2ea:	d116      	bne.n	800f31a <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800f2ec:	4b17      	ldr	r3, [pc, #92]	; (800f34c <LmhpComplianceTxProcess+0xd4>)
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	709a      	strb	r2, [r3, #2]
            break;
 800f2f2:	e012      	b.n	800f31a <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800f2f4:	4b15      	ldr	r3, [pc, #84]	; (800f34c <LmhpComplianceTxProcess+0xd4>)
 800f2f6:	2202      	movs	r2, #2
 800f2f8:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800f2fa:	4b14      	ldr	r3, [pc, #80]	; (800f34c <LmhpComplianceTxProcess+0xd4>)
 800f2fc:	899b      	ldrh	r3, [r3, #12]
 800f2fe:	0a1b      	lsrs	r3, r3, #8
 800f300:	b29a      	uxth	r2, r3
 800f302:	4b12      	ldr	r3, [pc, #72]	; (800f34c <LmhpComplianceTxProcess+0xd4>)
 800f304:	689b      	ldr	r3, [r3, #8]
 800f306:	b2d2      	uxtb	r2, r2
 800f308:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800f30a:	4b10      	ldr	r3, [pc, #64]	; (800f34c <LmhpComplianceTxProcess+0xd4>)
 800f30c:	899a      	ldrh	r2, [r3, #12]
 800f30e:	4b0f      	ldr	r3, [pc, #60]	; (800f34c <LmhpComplianceTxProcess+0xd4>)
 800f310:	689b      	ldr	r3, [r3, #8]
 800f312:	3301      	adds	r3, #1
 800f314:	b2d2      	uxtb	r2, r2
 800f316:	701a      	strb	r2, [r3, #0]
            break;
 800f318:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800f31a:	23e0      	movs	r3, #224	; 0xe0
 800f31c:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800f31e:	4b0b      	ldr	r3, [pc, #44]	; (800f34c <LmhpComplianceTxProcess+0xd4>)
 800f320:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800f322:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800f324:	4b09      	ldr	r3, [pc, #36]	; (800f34c <LmhpComplianceTxProcess+0xd4>)
 800f326:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800f328:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800f32a:	4809      	ldr	r0, [pc, #36]	; (800f350 <LmhpComplianceTxProcess+0xd8>)
 800f32c:	f00f f9a0 	bl	801e670 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800f330:	4b08      	ldr	r3, [pc, #32]	; (800f354 <LmhpComplianceTxProcess+0xdc>)
 800f332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f334:	4a05      	ldr	r2, [pc, #20]	; (800f34c <LmhpComplianceTxProcess+0xd4>)
 800f336:	78d2      	ldrb	r2, [r2, #3]
 800f338:	4611      	mov	r1, r2
 800f33a:	4638      	mov	r0, r7
 800f33c:	2201      	movs	r2, #1
 800f33e:	4798      	blx	r3
 800f340:	4603      	mov	r3, r0
}
 800f342:	4618      	mov	r0, r3
 800f344:	3708      	adds	r7, #8
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}
 800f34a:	bf00      	nop
 800f34c:	20000d20 	.word	0x20000d20
 800f350:	20000d08 	.word	0x20000d08
 800f354:	200000e4 	.word	0x200000e4

0800f358 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b0a2      	sub	sp, #136	; 0x88
 800f35c:	af02      	add	r7, sp, #8
 800f35e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800f360:	4ba3      	ldr	r3, [pc, #652]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	f083 0301 	eor.w	r3, r3, #1
 800f368:	b2db      	uxtb	r3, r3
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	f040 81c2 	bne.w	800f6f4 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	7b5b      	ldrb	r3, [r3, #13]
 800f374:	f083 0301 	eor.w	r3, r3, #1
 800f378:	b2db      	uxtb	r3, r3
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	f040 81bc 	bne.w	800f6f8 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800f380:	4b9b      	ldr	r3, [pc, #620]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f382:	785b      	ldrb	r3, [r3, #1]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d00c      	beq.n	800f3a2 <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	7b9b      	ldrb	r3, [r3, #14]
 800f38c:	f083 0301 	eor.w	r3, r3, #1
 800f390:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800f392:	2b00      	cmp	r3, #0
 800f394:	d005      	beq.n	800f3a2 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800f396:	4b96      	ldr	r3, [pc, #600]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f398:	899b      	ldrh	r3, [r3, #12]
 800f39a:	3301      	adds	r3, #1
 800f39c:	b29a      	uxth	r2, r3
 800f39e:	4b94      	ldr	r3, [pc, #592]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f3a0:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	78db      	ldrb	r3, [r3, #3]
 800f3a6:	2be0      	cmp	r3, #224	; 0xe0
 800f3a8:	f040 81a8 	bne.w	800f6fc <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800f3ac:	4b90      	ldr	r3, [pc, #576]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f3ae:	785b      	ldrb	r3, [r3, #1]
 800f3b0:	f083 0301 	eor.w	r3, r3, #1
 800f3b4:	b2db      	uxtb	r3, r3
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d060      	beq.n	800f47c <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	7b1b      	ldrb	r3, [r3, #12]
 800f3be:	2b04      	cmp	r3, #4
 800f3c0:	f040 81a1 	bne.w	800f706 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	689b      	ldr	r3, [r3, #8]
 800f3c8:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800f3ca:	2b01      	cmp	r3, #1
 800f3cc:	f040 819b 	bne.w	800f706 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	689b      	ldr	r3, [r3, #8]
 800f3d4:	3301      	adds	r3, #1
 800f3d6:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800f3d8:	2b01      	cmp	r3, #1
 800f3da:	f040 8194 	bne.w	800f706 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	689b      	ldr	r3, [r3, #8]
 800f3e2:	3302      	adds	r3, #2
 800f3e4:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800f3e6:	2b01      	cmp	r3, #1
 800f3e8:	f040 818d 	bne.w	800f706 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	689b      	ldr	r3, [r3, #8]
 800f3f0:	3303      	adds	r3, #3
 800f3f2:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	f040 8186 	bne.w	800f706 <LmhpComplianceOnMcpsIndication+0x3ae>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800f3fa:	4b7d      	ldr	r3, [pc, #500]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800f400:	4b7b      	ldr	r3, [pc, #492]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f402:	22e0      	movs	r2, #224	; 0xe0
 800f404:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800f406:	4b7a      	ldr	r3, [pc, #488]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f408:	2202      	movs	r2, #2
 800f40a:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800f40c:	4b78      	ldr	r3, [pc, #480]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f40e:	2200      	movs	r2, #0
 800f410:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800f412:	4b77      	ldr	r3, [pc, #476]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f414:	2200      	movs	r2, #0
 800f416:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800f418:	4b75      	ldr	r3, [pc, #468]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f41a:	2200      	movs	r2, #0
 800f41c:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800f41e:	4b74      	ldr	r3, [pc, #464]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f420:	2200      	movs	r2, #0
 800f422:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800f424:	4b72      	ldr	r3, [pc, #456]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f426:	2201      	movs	r2, #1
 800f428:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800f42a:	4b71      	ldr	r3, [pc, #452]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f42c:	2201      	movs	r2, #1
 800f42e:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800f430:	2304      	movs	r3, #4
 800f432:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800f434:	2301      	movs	r3, #1
 800f436:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f438:	f107 0308 	add.w	r3, r7, #8
 800f43c:	4618      	mov	r0, r3
 800f43e:	f004 f867 	bl	8013510 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800f442:	2000      	movs	r0, #0
 800f444:	f004 fdf4 	bl	8014030 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800f448:	4b6a      	ldr	r3, [pc, #424]	; (800f5f4 <LmhpComplianceOnMcpsIndication+0x29c>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	685b      	ldr	r3, [r3, #4]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d003      	beq.n	800f45a <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800f452:	4b68      	ldr	r3, [pc, #416]	; (800f5f4 <LmhpComplianceOnMcpsIndication+0x29c>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	685b      	ldr	r3, [r3, #4]
 800f458:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800f45a:	2300      	movs	r3, #0
 800f45c:	9300      	str	r3, [sp, #0]
 800f45e:	4b66      	ldr	r3, [pc, #408]	; (800f5f8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800f460:	2200      	movs	r2, #0
 800f462:	f04f 31ff 	mov.w	r1, #4294967295
 800f466:	4865      	ldr	r0, [pc, #404]	; (800f5fc <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f468:	f00f f8cc 	bl	801e604 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800f46c:	f241 3188 	movw	r1, #5000	; 0x1388
 800f470:	4862      	ldr	r0, [pc, #392]	; (800f5fc <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f472:	f00f f9db 	bl	801e82c <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800f476:	f7ff feff 	bl	800f278 <LmhpComplianceTxProcess>
 800f47a:	e144      	b.n	800f706 <LmhpComplianceOnMcpsIndication+0x3ae>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	689b      	ldr	r3, [r3, #8]
 800f480:	781a      	ldrb	r2, [r3, #0]
 800f482:	4b5b      	ldr	r3, [pc, #364]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f484:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800f486:	4b5a      	ldr	r3, [pc, #360]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f488:	789b      	ldrb	r3, [r3, #2]
 800f48a:	2b0a      	cmp	r3, #10
 800f48c:	f200 8138 	bhi.w	800f700 <LmhpComplianceOnMcpsIndication+0x3a8>
 800f490:	a201      	add	r2, pc, #4	; (adr r2, 800f498 <LmhpComplianceOnMcpsIndication+0x140>)
 800f492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f496:	bf00      	nop
 800f498:	0800f4c5 	.word	0x0800f4c5
 800f49c:	0800f50f 	.word	0x0800f50f
 800f4a0:	0800f517 	.word	0x0800f517
 800f4a4:	0800f525 	.word	0x0800f525
 800f4a8:	0800f533 	.word	0x0800f533
 800f4ac:	0800f58b 	.word	0x0800f58b
 800f4b0:	0800f59d 	.word	0x0800f59d
 800f4b4:	0800f605 	.word	0x0800f605
 800f4b8:	0800f6ad 	.word	0x0800f6ad
 800f4bc:	0800f6bf 	.word	0x0800f6bf
 800f4c0:	0800f6d9 	.word	0x0800f6d9
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800f4c4:	484d      	ldr	r0, [pc, #308]	; (800f5fc <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f4c6:	f00f f941 	bl	801e74c <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800f4ca:	4b49      	ldr	r3, [pc, #292]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800f4d0:	4b47      	ldr	r3, [pc, #284]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 800f4d6:	2304      	movs	r3, #4
 800f4d8:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800f4da:	4b46      	ldr	r3, [pc, #280]	; (800f5f4 <LmhpComplianceOnMcpsIndication+0x29c>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800f4e2:	f107 0308 	add.w	r3, r7, #8
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f004 f812 	bl	8013510 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800f4ec:	4b41      	ldr	r3, [pc, #260]	; (800f5f4 <LmhpComplianceOnMcpsIndication+0x29c>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	785b      	ldrb	r3, [r3, #1]
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f004 fd9c 	bl	8014030 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800f4f8:	4b3e      	ldr	r3, [pc, #248]	; (800f5f4 <LmhpComplianceOnMcpsIndication+0x29c>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	689b      	ldr	r3, [r3, #8]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	f000 8100 	beq.w	800f704 <LmhpComplianceOnMcpsIndication+0x3ac>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800f504:	4b3b      	ldr	r3, [pc, #236]	; (800f5f4 <LmhpComplianceOnMcpsIndication+0x29c>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	689b      	ldr	r3, [r3, #8]
 800f50a:	4798      	blx	r3
                }
            }
            break;
 800f50c:	e0fa      	b.n	800f704 <LmhpComplianceOnMcpsIndication+0x3ac>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800f50e:	4b38      	ldr	r3, [pc, #224]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f510:	2202      	movs	r2, #2
 800f512:	719a      	strb	r2, [r3, #6]
            break;
 800f514:	e0f7      	b.n	800f706 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800f516:	4b36      	ldr	r3, [pc, #216]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f518:	2201      	movs	r2, #1
 800f51a:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800f51c:	4b34      	ldr	r3, [pc, #208]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f51e:	2201      	movs	r2, #1
 800f520:	709a      	strb	r2, [r3, #2]
            break;
 800f522:	e0f0      	b.n	800f706 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800f524:	4b32      	ldr	r3, [pc, #200]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f526:	2200      	movs	r2, #0
 800f528:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800f52a:	4b31      	ldr	r3, [pc, #196]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f52c:	2201      	movs	r2, #1
 800f52e:	709a      	strb	r2, [r3, #2]
            break;
 800f530:	e0e9      	b.n	800f706 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	7b1a      	ldrb	r2, [r3, #12]
 800f536:	4b2e      	ldr	r3, [pc, #184]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f538:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800f53a:	4b2d      	ldr	r3, [pc, #180]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f53c:	689b      	ldr	r3, [r3, #8]
 800f53e:	2204      	movs	r2, #4
 800f540:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800f542:	2301      	movs	r3, #1
 800f544:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800f548:	e012      	b.n	800f570 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	689a      	ldr	r2, [r3, #8]
 800f54e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f552:	4413      	add	r3, r2
 800f554:	781a      	ldrb	r2, [r3, #0]
 800f556:	4b26      	ldr	r3, [pc, #152]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f558:	6899      	ldr	r1, [r3, #8]
 800f55a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f55e:	440b      	add	r3, r1
 800f560:	3201      	adds	r2, #1
 800f562:	b2d2      	uxtb	r2, r2
 800f564:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800f566:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f56a:	3301      	adds	r3, #1
 800f56c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800f570:	4b1f      	ldr	r3, [pc, #124]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f572:	795a      	ldrb	r2, [r3, #5]
 800f574:	4b1e      	ldr	r3, [pc, #120]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f576:	799b      	ldrb	r3, [r3, #6]
 800f578:	4293      	cmp	r3, r2
 800f57a:	bf28      	it	cs
 800f57c:	4613      	movcs	r3, r2
 800f57e:	b2db      	uxtb	r3, r3
 800f580:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800f584:	429a      	cmp	r2, r3
 800f586:	d3e0      	bcc.n	800f54a <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800f588:	e0bd      	b.n	800f706 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800f58a:	2304      	movs	r3, #4
 800f58c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800f590:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f594:	4618      	mov	r0, r3
 800f596:	f004 fb15 	bl	8013bc4 <LoRaMacMlmeRequest>
            }
            break;
 800f59a:	e0b4      	b.n	800f706 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800f59c:	4817      	ldr	r0, [pc, #92]	; (800f5fc <LmhpComplianceOnMcpsIndication+0x2a4>)
 800f59e:	f00f f8d5 	bl	801e74c <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800f5a2:	4b13      	ldr	r3, [pc, #76]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800f5a8:	4b11      	ldr	r3, [pc, #68]	; (800f5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 800f5ae:	2304      	movs	r3, #4
 800f5b0:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800f5b2:	4b10      	ldr	r3, [pc, #64]	; (800f5f4 <LmhpComplianceOnMcpsIndication+0x29c>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800f5ba:	f107 0308 	add.w	r3, r7, #8
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f003 ffa6 	bl	8013510 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800f5c4:	4b0b      	ldr	r3, [pc, #44]	; (800f5f4 <LmhpComplianceOnMcpsIndication+0x29c>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	785b      	ldrb	r3, [r3, #1]
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f004 fd30 	bl	8014030 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800f5d0:	4b08      	ldr	r3, [pc, #32]	; (800f5f4 <LmhpComplianceOnMcpsIndication+0x29c>)
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	689b      	ldr	r3, [r3, #8]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d003      	beq.n	800f5e2 <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800f5da:	4b06      	ldr	r3, [pc, #24]	; (800f5f4 <LmhpComplianceOnMcpsIndication+0x29c>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	689b      	ldr	r3, [r3, #8]
 800f5e0:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800f5e2:	4b07      	ldr	r3, [pc, #28]	; (800f600 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800f5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5e6:	2101      	movs	r1, #1
 800f5e8:	2002      	movs	r0, #2
 800f5ea:	4798      	blx	r3
            }
            break;
 800f5ec:	e08b      	b.n	800f706 <LmhpComplianceOnMcpsIndication+0x3ae>
 800f5ee:	bf00      	nop
 800f5f0:	20000d20 	.word	0x20000d20
 800f5f4:	20000d34 	.word	0x20000d34
 800f5f8:	0800f71d 	.word	0x0800f71d
 800f5fc:	20000d08 	.word	0x20000d08
 800f600:	200000e4 	.word	0x200000e4
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	7b1b      	ldrb	r3, [r3, #12]
 800f608:	2b03      	cmp	r3, #3
 800f60a:	d113      	bne.n	800f634 <LmhpComplianceOnMcpsIndication+0x2dc>
                {
                    mlmeReq.Type = MLME_TXCW;
 800f60c:	2305      	movs	r3, #5
 800f60e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	689b      	ldr	r3, [r3, #8]
 800f616:	3301      	adds	r3, #1
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	021b      	lsls	r3, r3, #8
 800f61c:	b21a      	sxth	r2, r3
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	689b      	ldr	r3, [r3, #8]
 800f622:	3302      	adds	r3, #2
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	b21b      	sxth	r3, r3
 800f628:	4313      	orrs	r3, r2
 800f62a:	b21b      	sxth	r3, r3
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800f632:	e032      	b.n	800f69a <LmhpComplianceOnMcpsIndication+0x342>
                }
                else if( mcpsIndication->BufferSize == 7 )
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	7b1b      	ldrb	r3, [r3, #12]
 800f638:	2b07      	cmp	r3, #7
 800f63a:	d12e      	bne.n	800f69a <LmhpComplianceOnMcpsIndication+0x342>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800f63c:	2306      	movs	r3, #6
 800f63e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	689b      	ldr	r3, [r3, #8]
 800f646:	3301      	adds	r3, #1
 800f648:	781b      	ldrb	r3, [r3, #0]
 800f64a:	021b      	lsls	r3, r3, #8
 800f64c:	b21a      	sxth	r2, r3
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	689b      	ldr	r3, [r3, #8]
 800f652:	3302      	adds	r3, #2
 800f654:	781b      	ldrb	r3, [r3, #0]
 800f656:	b21b      	sxth	r3, r3
 800f658:	4313      	orrs	r3, r2
 800f65a:	b21b      	sxth	r3, r3
 800f65c:	b29b      	uxth	r3, r3
 800f65e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	689b      	ldr	r3, [r3, #8]
 800f666:	3303      	adds	r3, #3
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	041a      	lsls	r2, r3, #16
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	689b      	ldr	r3, [r3, #8]
 800f670:	3304      	adds	r3, #4
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	021b      	lsls	r3, r3, #8
 800f676:	4313      	orrs	r3, r2
 800f678:	687a      	ldr	r2, [r7, #4]
 800f67a:	6892      	ldr	r2, [r2, #8]
 800f67c:	3205      	adds	r2, #5
 800f67e:	7812      	ldrb	r2, [r2, #0]
 800f680:	4313      	orrs	r3, r2
 800f682:	461a      	mov	r2, r3
 800f684:	2364      	movs	r3, #100	; 0x64
 800f686:	fb02 f303 	mul.w	r3, r2, r3
 800f68a:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	689b      	ldr	r3, [r3, #8]
 800f690:	3306      	adds	r3, #6
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	b25b      	sxtb	r3, r3
 800f696:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800f69a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f004 fa90 	bl	8013bc4 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800f6a4:	4b19      	ldr	r3, [pc, #100]	; (800f70c <LmhpComplianceOnMcpsIndication+0x3b4>)
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	709a      	strb	r2, [r3, #2]
            }
            break;
 800f6aa:	e02c      	b.n	800f706 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800f6ac:	230a      	movs	r3, #10
 800f6ae:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800f6b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f004 fa84 	bl	8013bc4 <LoRaMacMlmeRequest>
            }
            break;
 800f6bc:	e023      	b.n	800f706 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	689b      	ldr	r3, [r3, #8]
 800f6c6:	3301      	adds	r3, #1
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800f6cc:	f107 0308 	add.w	r3, r7, #8
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f003 ff1d 	bl	8013510 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800f6d6:	e016      	b.n	800f706 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800f6d8:	230d      	movs	r3, #13
 800f6da:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	689b      	ldr	r3, [r3, #8]
 800f6e2:	785b      	ldrb	r3, [r3, #1]
 800f6e4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800f6e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f004 fa69 	bl	8013bc4 <LoRaMacMlmeRequest>
            }
            break;
 800f6f2:	e008      	b.n	800f706 <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800f6f4:	bf00      	nop
 800f6f6:	e006      	b.n	800f706 <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800f6f8:	bf00      	nop
 800f6fa:	e004      	b.n	800f706 <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800f6fc:	bf00      	nop
 800f6fe:	e002      	b.n	800f706 <LmhpComplianceOnMcpsIndication+0x3ae>
        default:
            break;
 800f700:	bf00      	nop
 800f702:	e000      	b.n	800f706 <LmhpComplianceOnMcpsIndication+0x3ae>
            break;
 800f704:	bf00      	nop
        }
    }
}
 800f706:	3780      	adds	r7, #128	; 0x80
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}
 800f70c:	20000d20 	.word	0x20000d20

0800f710 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800f710:	b480      	push	{r7}
 800f712:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800f714:	bf00      	nop
 800f716:	46bd      	mov	sp, r7
 800f718:	bc80      	pop	{r7}
 800f71a:	4770      	bx	lr

0800f71c <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b082      	sub	sp, #8
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800f724:	f7ff fda8 	bl	800f278 <LmhpComplianceTxProcess>
}
 800f728:	bf00      	nop
 800f72a:	3708      	adds	r7, #8
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}

0800f730 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800f730:	b590      	push	{r4, r7, lr}
 800f732:	b083      	sub	sp, #12
 800f734:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800f736:	f00f f923 	bl	801e980 <UTIL_TIMER_GetCurrentTime>
 800f73a:	4603      	mov	r3, r0
 800f73c:	4a16      	ldr	r2, [pc, #88]	; (800f798 <OnRadioTxDone+0x68>)
 800f73e:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800f740:	4c16      	ldr	r4, [pc, #88]	; (800f79c <OnRadioTxDone+0x6c>)
 800f742:	463b      	mov	r3, r7
 800f744:	4618      	mov	r0, r3
 800f746:	f00e fa95 	bl	801dc74 <SysTimeGet>
 800f74a:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800f74e:	463a      	mov	r2, r7
 800f750:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f754:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800f758:	4a11      	ldr	r2, [pc, #68]	; (800f7a0 <OnRadioTxDone+0x70>)
 800f75a:	7813      	ldrb	r3, [r2, #0]
 800f75c:	f043 0310 	orr.w	r3, r3, #16
 800f760:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f762:	4b0e      	ldr	r3, [pc, #56]	; (800f79c <OnRadioTxDone+0x6c>)
 800f764:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d00a      	beq.n	800f782 <OnRadioTxDone+0x52>
 800f76c:	4b0b      	ldr	r3, [pc, #44]	; (800f79c <OnRadioTxDone+0x6c>)
 800f76e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f772:	691b      	ldr	r3, [r3, #16]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d004      	beq.n	800f782 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f778:	4b08      	ldr	r3, [pc, #32]	; (800f79c <OnRadioTxDone+0x6c>)
 800f77a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f77e:	691b      	ldr	r3, [r3, #16]
 800f780:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800f782:	4b08      	ldr	r3, [pc, #32]	; (800f7a4 <OnRadioTxDone+0x74>)
 800f784:	2201      	movs	r2, #1
 800f786:	2100      	movs	r1, #0
 800f788:	2002      	movs	r0, #2
 800f78a:	f00f f9e9 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
}
 800f78e:	bf00      	nop
 800f790:	370c      	adds	r7, #12
 800f792:	46bd      	mov	sp, r7
 800f794:	bd90      	pop	{r4, r7, pc}
 800f796:	bf00      	nop
 800f798:	20002098 	.word	0x20002098
 800f79c:	20000d38 	.word	0x20000d38
 800f7a0:	20002094 	.word	0x20002094
 800f7a4:	0801f574 	.word	0x0801f574

0800f7a8 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b084      	sub	sp, #16
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	60f8      	str	r0, [r7, #12]
 800f7b0:	4608      	mov	r0, r1
 800f7b2:	4611      	mov	r1, r2
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	817b      	strh	r3, [r7, #10]
 800f7ba:	460b      	mov	r3, r1
 800f7bc:	813b      	strh	r3, [r7, #8]
 800f7be:	4613      	mov	r3, r2
 800f7c0:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800f7c2:	f00f f8dd 	bl	801e980 <UTIL_TIMER_GetCurrentTime>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	4a16      	ldr	r2, [pc, #88]	; (800f824 <OnRadioRxDone+0x7c>)
 800f7ca:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800f7cc:	4a15      	ldr	r2, [pc, #84]	; (800f824 <OnRadioRxDone+0x7c>)
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800f7d2:	4a14      	ldr	r2, [pc, #80]	; (800f824 <OnRadioRxDone+0x7c>)
 800f7d4:	897b      	ldrh	r3, [r7, #10]
 800f7d6:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800f7d8:	4a12      	ldr	r2, [pc, #72]	; (800f824 <OnRadioRxDone+0x7c>)
 800f7da:	893b      	ldrh	r3, [r7, #8]
 800f7dc:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800f7de:	4a11      	ldr	r2, [pc, #68]	; (800f824 <OnRadioRxDone+0x7c>)
 800f7e0:	79fb      	ldrb	r3, [r7, #7]
 800f7e2:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800f7e4:	4a10      	ldr	r2, [pc, #64]	; (800f828 <OnRadioRxDone+0x80>)
 800f7e6:	7813      	ldrb	r3, [r2, #0]
 800f7e8:	f043 0308 	orr.w	r3, r3, #8
 800f7ec:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f7ee:	4b0f      	ldr	r3, [pc, #60]	; (800f82c <OnRadioRxDone+0x84>)
 800f7f0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d00a      	beq.n	800f80e <OnRadioRxDone+0x66>
 800f7f8:	4b0c      	ldr	r3, [pc, #48]	; (800f82c <OnRadioRxDone+0x84>)
 800f7fa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f7fe:	691b      	ldr	r3, [r3, #16]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d004      	beq.n	800f80e <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f804:	4b09      	ldr	r3, [pc, #36]	; (800f82c <OnRadioRxDone+0x84>)
 800f806:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f80a:	691b      	ldr	r3, [r3, #16]
 800f80c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800f80e:	4b08      	ldr	r3, [pc, #32]	; (800f830 <OnRadioRxDone+0x88>)
 800f810:	2201      	movs	r2, #1
 800f812:	2100      	movs	r1, #0
 800f814:	2002      	movs	r0, #2
 800f816:	f00f f9a3 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
}
 800f81a:	bf00      	nop
 800f81c:	3710      	adds	r7, #16
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}
 800f822:	bf00      	nop
 800f824:	2000209c 	.word	0x2000209c
 800f828:	20002094 	.word	0x20002094
 800f82c:	20000d38 	.word	0x20000d38
 800f830:	0801f584 	.word	0x0801f584

0800f834 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800f834:	b580      	push	{r7, lr}
 800f836:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800f838:	4a0e      	ldr	r2, [pc, #56]	; (800f874 <OnRadioTxTimeout+0x40>)
 800f83a:	7813      	ldrb	r3, [r2, #0]
 800f83c:	f043 0304 	orr.w	r3, r3, #4
 800f840:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f842:	4b0d      	ldr	r3, [pc, #52]	; (800f878 <OnRadioTxTimeout+0x44>)
 800f844:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d00a      	beq.n	800f862 <OnRadioTxTimeout+0x2e>
 800f84c:	4b0a      	ldr	r3, [pc, #40]	; (800f878 <OnRadioTxTimeout+0x44>)
 800f84e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f852:	691b      	ldr	r3, [r3, #16]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d004      	beq.n	800f862 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f858:	4b07      	ldr	r3, [pc, #28]	; (800f878 <OnRadioTxTimeout+0x44>)
 800f85a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f85e:	691b      	ldr	r3, [r3, #16]
 800f860:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800f862:	4b06      	ldr	r3, [pc, #24]	; (800f87c <OnRadioTxTimeout+0x48>)
 800f864:	2201      	movs	r2, #1
 800f866:	2100      	movs	r1, #0
 800f868:	2002      	movs	r0, #2
 800f86a:	f00f f979 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
}
 800f86e:	bf00      	nop
 800f870:	bd80      	pop	{r7, pc}
 800f872:	bf00      	nop
 800f874:	20002094 	.word	0x20002094
 800f878:	20000d38 	.word	0x20000d38
 800f87c:	0801f594 	.word	0x0801f594

0800f880 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800f880:	b580      	push	{r7, lr}
 800f882:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800f884:	4a0b      	ldr	r2, [pc, #44]	; (800f8b4 <OnRadioRxError+0x34>)
 800f886:	7813      	ldrb	r3, [r2, #0]
 800f888:	f043 0302 	orr.w	r3, r3, #2
 800f88c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f88e:	4b0a      	ldr	r3, [pc, #40]	; (800f8b8 <OnRadioRxError+0x38>)
 800f890:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f894:	2b00      	cmp	r3, #0
 800f896:	d00a      	beq.n	800f8ae <OnRadioRxError+0x2e>
 800f898:	4b07      	ldr	r3, [pc, #28]	; (800f8b8 <OnRadioRxError+0x38>)
 800f89a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f89e:	691b      	ldr	r3, [r3, #16]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d004      	beq.n	800f8ae <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f8a4:	4b04      	ldr	r3, [pc, #16]	; (800f8b8 <OnRadioRxError+0x38>)
 800f8a6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f8aa:	691b      	ldr	r3, [r3, #16]
 800f8ac:	4798      	blx	r3
    }
}
 800f8ae:	bf00      	nop
 800f8b0:	bd80      	pop	{r7, pc}
 800f8b2:	bf00      	nop
 800f8b4:	20002094 	.word	0x20002094
 800f8b8:	20000d38 	.word	0x20000d38

0800f8bc <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800f8c0:	4a0e      	ldr	r2, [pc, #56]	; (800f8fc <OnRadioRxTimeout+0x40>)
 800f8c2:	7813      	ldrb	r3, [r2, #0]
 800f8c4:	f043 0301 	orr.w	r3, r3, #1
 800f8c8:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f8ca:	4b0d      	ldr	r3, [pc, #52]	; (800f900 <OnRadioRxTimeout+0x44>)
 800f8cc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d00a      	beq.n	800f8ea <OnRadioRxTimeout+0x2e>
 800f8d4:	4b0a      	ldr	r3, [pc, #40]	; (800f900 <OnRadioRxTimeout+0x44>)
 800f8d6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f8da:	691b      	ldr	r3, [r3, #16]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d004      	beq.n	800f8ea <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f8e0:	4b07      	ldr	r3, [pc, #28]	; (800f900 <OnRadioRxTimeout+0x44>)
 800f8e2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f8e6:	691b      	ldr	r3, [r3, #16]
 800f8e8:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800f8ea:	4b06      	ldr	r3, [pc, #24]	; (800f904 <OnRadioRxTimeout+0x48>)
 800f8ec:	2201      	movs	r2, #1
 800f8ee:	2100      	movs	r1, #0
 800f8f0:	2002      	movs	r0, #2
 800f8f2:	f00f f935 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
}
 800f8f6:	bf00      	nop
 800f8f8:	bd80      	pop	{r7, pc}
 800f8fa:	bf00      	nop
 800f8fc:	20002094 	.word	0x20002094
 800f900:	20000d38 	.word	0x20000d38
 800f904:	0801f5a4 	.word	0x0801f5a4

0800f908 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800f908:	b480      	push	{r7}
 800f90a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f90c:	4b08      	ldr	r3, [pc, #32]	; (800f930 <UpdateRxSlotIdleState+0x28>)
 800f90e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f912:	2b02      	cmp	r3, #2
 800f914:	d004      	beq.n	800f920 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800f916:	4b07      	ldr	r3, [pc, #28]	; (800f934 <UpdateRxSlotIdleState+0x2c>)
 800f918:	2206      	movs	r2, #6
 800f91a:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800f91e:	e003      	b.n	800f928 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f920:	4b04      	ldr	r3, [pc, #16]	; (800f934 <UpdateRxSlotIdleState+0x2c>)
 800f922:	2202      	movs	r2, #2
 800f924:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
}
 800f928:	bf00      	nop
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bc80      	pop	{r7}
 800f92e:	4770      	bx	lr
 800f930:	20001244 	.word	0x20001244
 800f934:	20000d38 	.word	0x20000d38

0800f938 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b08e      	sub	sp, #56	; 0x38
 800f93c:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f93e:	4b44      	ldr	r3, [pc, #272]	; (800fa50 <ProcessRadioTxDone+0x118>)
 800f940:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f944:	2b02      	cmp	r3, #2
 800f946:	d002      	beq.n	800f94e <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800f948:	4b42      	ldr	r3, [pc, #264]	; (800fa54 <ProcessRadioTxDone+0x11c>)
 800f94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f94c:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800f94e:	4b42      	ldr	r3, [pc, #264]	; (800fa58 <ProcessRadioTxDone+0x120>)
 800f950:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800f954:	4619      	mov	r1, r3
 800f956:	4841      	ldr	r0, [pc, #260]	; (800fa5c <ProcessRadioTxDone+0x124>)
 800f958:	f00e ff68 	bl	801e82c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800f95c:	483f      	ldr	r0, [pc, #252]	; (800fa5c <ProcessRadioTxDone+0x124>)
 800f95e:	f00e fe87 	bl	801e670 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800f962:	4b3d      	ldr	r3, [pc, #244]	; (800fa58 <ProcessRadioTxDone+0x120>)
 800f964:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800f968:	4619      	mov	r1, r3
 800f96a:	483d      	ldr	r0, [pc, #244]	; (800fa60 <ProcessRadioTxDone+0x128>)
 800f96c:	f00e ff5e 	bl	801e82c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800f970:	483b      	ldr	r0, [pc, #236]	; (800fa60 <ProcessRadioTxDone+0x128>)
 800f972:	f00e fe7d 	bl	801e670 <UTIL_TIMER_Start>
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800f976:	4b36      	ldr	r3, [pc, #216]	; (800fa50 <ProcessRadioTxDone+0x118>)
 800f978:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f97c:	2b02      	cmp	r3, #2
 800f97e:	d004      	beq.n	800f98a <ProcessRadioTxDone+0x52>
 800f980:	4b35      	ldr	r3, [pc, #212]	; (800fa58 <ProcessRadioTxDone+0x120>)
 800f982:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f986:	2b00      	cmp	r3, #0
 800f988:	d019      	beq.n	800f9be <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800f98a:	2316      	movs	r3, #22
 800f98c:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f990:	4b2f      	ldr	r3, [pc, #188]	; (800fa50 <ProcessRadioTxDone+0x118>)
 800f992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f996:	f107 0220 	add.w	r2, r7, #32
 800f99a:	4611      	mov	r1, r2
 800f99c:	4618      	mov	r0, r3
 800f99e:	f008 f9df 	bl	8017d60 <RegionGetPhyParam>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800f9a6:	4b2c      	ldr	r3, [pc, #176]	; (800fa58 <ProcessRadioTxDone+0x120>)
 800f9a8:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800f9ac:	69fb      	ldr	r3, [r7, #28]
 800f9ae:	4413      	add	r3, r2
 800f9b0:	4619      	mov	r1, r3
 800f9b2:	482c      	ldr	r0, [pc, #176]	; (800fa64 <ProcessRadioTxDone+0x12c>)
 800f9b4:	f00e ff3a 	bl	801e82c <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800f9b8:	482a      	ldr	r0, [pc, #168]	; (800fa64 <ProcessRadioTxDone+0x12c>)
 800f9ba:	f00e fe59 	bl	801e670 <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800f9be:	4b2a      	ldr	r3, [pc, #168]	; (800fa68 <ProcessRadioTxDone+0x130>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	4a23      	ldr	r2, [pc, #140]	; (800fa50 <ProcessRadioTxDone+0x118>)
 800f9c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800f9c6:	4b24      	ldr	r3, [pc, #144]	; (800fa58 <ProcessRadioTxDone+0x120>)
 800f9c8:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800f9cc:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800f9ce:	4b26      	ldr	r3, [pc, #152]	; (800fa68 <ProcessRadioTxDone+0x130>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800f9d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f00e f983 	bl	801dce4 <SysTimeGetMcuTime>
 800f9de:	4638      	mov	r0, r7
 800f9e0:	4b1b      	ldr	r3, [pc, #108]	; (800fa50 <ProcessRadioTxDone+0x118>)
 800f9e2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800f9e6:	9200      	str	r2, [sp, #0]
 800f9e8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800f9ec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f9f0:	ca06      	ldmia	r2, {r1, r2}
 800f9f2:	f00e f8d8 	bl	801dba6 <SysTimeSub>
 800f9f6:	f107 0314 	add.w	r3, r7, #20
 800f9fa:	463a      	mov	r2, r7
 800f9fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa00:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800fa04:	4b14      	ldr	r3, [pc, #80]	; (800fa58 <ProcessRadioTxDone+0x120>)
 800fa06:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800fa0a:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fa10:	4b0f      	ldr	r3, [pc, #60]	; (800fa50 <ProcessRadioTxDone+0x118>)
 800fa12:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d101      	bne.n	800fa1e <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800fa1e:	4b0c      	ldr	r3, [pc, #48]	; (800fa50 <ProcessRadioTxDone+0x118>)
 800fa20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fa24:	f107 0208 	add.w	r2, r7, #8
 800fa28:	4611      	mov	r1, r2
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f008 f9b0 	bl	8017d90 <RegionSetBandTxDone>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800fa30:	4b09      	ldr	r3, [pc, #36]	; (800fa58 <ProcessRadioTxDone+0x120>)
 800fa32:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800fa36:	f083 0301 	eor.w	r3, r3, #1
 800fa3a:	b2db      	uxtb	r3, r3
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d003      	beq.n	800fa48 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fa40:	4b05      	ldr	r3, [pc, #20]	; (800fa58 <ProcessRadioTxDone+0x120>)
 800fa42:	2200      	movs	r2, #0
 800fa44:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
#endif /* LORAMAC_VERSION */
}
 800fa48:	bf00      	nop
 800fa4a:	3730      	adds	r7, #48	; 0x30
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}
 800fa50:	20001244 	.word	0x20001244
 800fa54:	0801fbe4 	.word	0x0801fbe4
 800fa58:	20000d38 	.word	0x20000d38
 800fa5c:	200010b8 	.word	0x200010b8
 800fa60:	200010d0 	.word	0x200010d0
 800fa64:	20001130 	.word	0x20001130
 800fa68:	20002098 	.word	0x20002098

0800fa6c <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800fa70:	4b10      	ldr	r3, [pc, #64]	; (800fab4 <PrepareRxDoneAbort+0x48>)
 800fa72:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fa76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa7a:	4a0e      	ldr	r2, [pc, #56]	; (800fab4 <PrepareRxDoneAbort+0x48>)
 800fa7c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800fa80:	4b0c      	ldr	r3, [pc, #48]	; (800fab4 <PrepareRxDoneAbort+0x48>)
 800fa82:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d002      	beq.n	800fa90 <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 800fa8a:	2000      	movs	r0, #0
 800fa8c:	f001 f8f2 	bl	8010c74 <OnAckTimeoutTimerEvent>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800fa90:	4a08      	ldr	r2, [pc, #32]	; (800fab4 <PrepareRxDoneAbort+0x48>)
 800fa92:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800fa96:	f043 0302 	orr.w	r3, r3, #2
 800fa9a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    MacCtx.MacFlags.Bits.MacDone = 1;
 800fa9e:	4a05      	ldr	r2, [pc, #20]	; (800fab4 <PrepareRxDoneAbort+0x48>)
 800faa0:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800faa4:	f043 0320 	orr.w	r3, r3, #32
 800faa8:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

    UpdateRxSlotIdleState( );
 800faac:	f7ff ff2c 	bl	800f908 <UpdateRxSlotIdleState>
}
 800fab0:	bf00      	nop
 800fab2:	bd80      	pop	{r7, pc}
 800fab4:	20000d38 	.word	0x20000d38

0800fab8 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800fab8:	b5b0      	push	{r4, r5, r7, lr}
 800faba:	b0a6      	sub	sp, #152	; 0x98
 800fabc:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800fabe:	2313      	movs	r3, #19
 800fac0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800fac4:	4bb9      	ldr	r3, [pc, #740]	; (800fdac <ProcessRadioRxDone+0x2f4>)
 800fac6:	685b      	ldr	r3, [r3, #4]
 800fac8:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800faca:	4bb8      	ldr	r3, [pc, #736]	; (800fdac <ProcessRadioRxDone+0x2f4>)
 800facc:	891b      	ldrh	r3, [r3, #8]
 800face:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800fad2:	4bb6      	ldr	r3, [pc, #728]	; (800fdac <ProcessRadioRxDone+0x2f4>)
 800fad4:	895b      	ldrh	r3, [r3, #10]
 800fad6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800fada:	4bb4      	ldr	r3, [pc, #720]	; (800fdac <ProcessRadioRxDone+0x2f4>)
 800fadc:	7b1b      	ldrb	r3, [r3, #12]
 800fade:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800fae2:	2300      	movs	r3, #0
 800fae4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800fae8:	2300      	movs	r3, #0
 800faea:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800faec:	4bb0      	ldr	r3, [pc, #704]	; (800fdb0 <ProcessRadioRxDone+0x2f8>)
 800faee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800faf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800faf6:	2300      	movs	r3, #0
 800faf8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800fafc:	2301      	movs	r3, #1
 800fafe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800fb02:	4bac      	ldr	r3, [pc, #688]	; (800fdb4 <ProcessRadioRxDone+0x2fc>)
 800fb04:	2200      	movs	r2, #0
 800fb06:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800fb0a:	4aaa      	ldr	r2, [pc, #680]	; (800fdb4 <ProcessRadioRxDone+0x2fc>)
 800fb0c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800fb10:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    MacCtx.RxStatus.Snr = snr;
 800fb14:	4aa7      	ldr	r2, [pc, #668]	; (800fdb4 <ProcessRadioRxDone+0x2fc>)
 800fb16:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800fb1a:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800fb1e:	4ba5      	ldr	r3, [pc, #660]	; (800fdb4 <ProcessRadioRxDone+0x2fc>)
 800fb20:	f893 2484 	ldrb.w	r2, [r3, #1156]	; 0x484
 800fb24:	4ba3      	ldr	r3, [pc, #652]	; (800fdb4 <ProcessRadioRxDone+0x2fc>)
 800fb26:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
    MacCtx.McpsIndication.Port = 0;
 800fb2a:	4ba2      	ldr	r3, [pc, #648]	; (800fdb4 <ProcessRadioRxDone+0x2fc>)
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800fb32:	4ba0      	ldr	r3, [pc, #640]	; (800fdb4 <ProcessRadioRxDone+0x2fc>)
 800fb34:	2200      	movs	r2, #0
 800fb36:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800fb3a:	4b9e      	ldr	r3, [pc, #632]	; (800fdb4 <ProcessRadioRxDone+0x2fc>)
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800fb42:	4b9c      	ldr	r3, [pc, #624]	; (800fdb4 <ProcessRadioRxDone+0x2fc>)
 800fb44:	2200      	movs	r2, #0
 800fb46:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800fb4a:	4b9a      	ldr	r3, [pc, #616]	; (800fdb4 <ProcessRadioRxDone+0x2fc>)
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800fb52:	4b98      	ldr	r3, [pc, #608]	; (800fdb4 <ProcessRadioRxDone+0x2fc>)
 800fb54:	2200      	movs	r2, #0
 800fb56:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800fb5a:	4b96      	ldr	r3, [pc, #600]	; (800fdb4 <ProcessRadioRxDone+0x2fc>)
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800fb62:	4b94      	ldr	r3, [pc, #592]	; (800fdb4 <ProcessRadioRxDone+0x2fc>)
 800fb64:	2200      	movs	r2, #0
 800fb66:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800fb6a:	4b92      	ldr	r3, [pc, #584]	; (800fdb4 <ProcessRadioRxDone+0x2fc>)
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800fb72:	4b90      	ldr	r3, [pc, #576]	; (800fdb4 <ProcessRadioRxDone+0x2fc>)
 800fb74:	2200      	movs	r2, #0
 800fb76:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800fb7a:	4b8e      	ldr	r3, [pc, #568]	; (800fdb4 <ProcessRadioRxDone+0x2fc>)
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800fb82:	4b8d      	ldr	r3, [pc, #564]	; (800fdb8 <ProcessRadioRxDone+0x300>)
 800fb84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb86:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 800fb88:	488c      	ldr	r0, [pc, #560]	; (800fdbc <ProcessRadioRxDone+0x304>)
 800fb8a:	f00e fddf 	bl	801e74c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800fb8e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800fb92:	4619      	mov	r1, r3
 800fb94:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800fb96:	f005 fd0b 	bl	80155b0 <LoRaMacClassBRxBeacon>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d00a      	beq.n	800fbb6 <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800fba0:	4a84      	ldr	r2, [pc, #528]	; (800fdb4 <ProcessRadioRxDone+0x2fc>)
 800fba2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800fba6:	f8a2 3476 	strh.w	r3, [r2, #1142]	; 0x476
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800fbaa:	4a82      	ldr	r2, [pc, #520]	; (800fdb4 <ProcessRadioRxDone+0x2fc>)
 800fbac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800fbb0:	f882 3478 	strb.w	r3, [r2, #1144]	; 0x478
        return;
 800fbb4:	e3c7      	b.n	8010346 <ProcessRadioRxDone+0x88e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fbb6:	4b7e      	ldr	r3, [pc, #504]	; (800fdb0 <ProcessRadioRxDone+0x2f8>)
 800fbb8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fbbc:	2b01      	cmp	r3, #1
 800fbbe:	d11e      	bne.n	800fbfe <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fbc0:	f005 fe8a 	bl	80158d8 <LoRaMacClassBIsPingExpected>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d00a      	beq.n	800fbe0 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fbca:	2000      	movs	r0, #0
 800fbcc:	f005 f856 	bl	8014c7c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800fbd0:	2000      	movs	r0, #0
 800fbd2:	f005 fa89 	bl	80150e8 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800fbd6:	4b77      	ldr	r3, [pc, #476]	; (800fdb4 <ProcessRadioRxDone+0x2fc>)
 800fbd8:	2204      	movs	r2, #4
 800fbda:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 800fbde:	e00e      	b.n	800fbfe <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fbe0:	f005 fe8a 	bl	80158f8 <LoRaMacClassBIsMulticastExpected>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d009      	beq.n	800fbfe <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fbea:	2000      	movs	r0, #0
 800fbec:	f005 f856 	bl	8014c9c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fbf0:	2000      	movs	r0, #0
 800fbf2:	f005 fb83 	bl	80152fc <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800fbf6:	4b6f      	ldr	r3, [pc, #444]	; (800fdb4 <ProcessRadioRxDone+0x2fc>)
 800fbf8:	2205      	movs	r2, #5
 800fbfa:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800fbfe:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800fc02:	1c5a      	adds	r2, r3, #1
 800fc04:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800fc08:	461a      	mov	r2, r3
 800fc0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fc0c:	4413      	add	r3, r2
 800fc0e:	781b      	ldrb	r3, [r3, #0]
 800fc10:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800fc14:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800fc18:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800fc1c:	b2db      	uxtb	r3, r3
 800fc1e:	3b01      	subs	r3, #1
 800fc20:	2b06      	cmp	r3, #6
 800fc22:	f200 836a 	bhi.w	80102fa <ProcessRadioRxDone+0x842>
 800fc26:	a201      	add	r2, pc, #4	; (adr r2, 800fc2c <ProcessRadioRxDone+0x174>)
 800fc28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc2c:	0800fc49 	.word	0x0800fc49
 800fc30:	080102fb 	.word	0x080102fb
 800fc34:	0800fdc9 	.word	0x0800fdc9
 800fc38:	080102fb 	.word	0x080102fb
 800fc3c:	0800fdc1 	.word	0x0800fdc1
 800fc40:	080102fb 	.word	0x080102fb
 800fc44:	080102a1 	.word	0x080102a1
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800fc48:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800fc4c:	2b10      	cmp	r3, #16
 800fc4e:	d806      	bhi.n	800fc5e <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fc50:	4b58      	ldr	r3, [pc, #352]	; (800fdb4 <ProcessRadioRxDone+0x2fc>)
 800fc52:	2201      	movs	r2, #1
 800fc54:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800fc58:	f7ff ff08 	bl	800fa6c <PrepareRxDoneAbort>
                return;
 800fc5c:	e373      	b.n	8010346 <ProcessRadioRxDone+0x88e>
            }
            macMsgJoinAccept.Buffer = payload;
 800fc5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fc60:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800fc62:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800fc66:	b2db      	uxtb	r3, r3
 800fc68:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800fc6a:	4b51      	ldr	r3, [pc, #324]	; (800fdb0 <ProcessRadioRxDone+0x2f8>)
 800fc6c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d006      	beq.n	800fc82 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fc74:	4b4f      	ldr	r3, [pc, #316]	; (800fdb4 <ProcessRadioRxDone+0x2fc>)
 800fc76:	2201      	movs	r2, #1
 800fc78:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800fc7c:	f7ff fef6 	bl	800fa6c <PrepareRxDoneAbort>
                return;
 800fc80:	e361      	b.n	8010346 <ProcessRadioRxDone+0x88e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800fc82:	f7fe f9a3 	bl	800dfcc <SecureElementGetJoinEui>
 800fc86:	4601      	mov	r1, r0
 800fc88:	f107 0308 	add.w	r3, r7, #8
 800fc8c:	461a      	mov	r2, r3
 800fc8e:	20ff      	movs	r0, #255	; 0xff
 800fc90:	f007 faea 	bl	8017268 <LoRaMacCryptoHandleJoinAccept>
 800fc94:	4603      	mov	r3, r0
 800fc96:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800fc9a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d172      	bne.n	800fd88 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800fca2:	7c7b      	ldrb	r3, [r7, #17]
 800fca4:	461a      	mov	r2, r3
 800fca6:	4b42      	ldr	r3, [pc, #264]	; (800fdb0 <ProcessRadioRxDone+0x2f8>)
 800fca8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800fcac:	4b40      	ldr	r3, [pc, #256]	; (800fdb0 <ProcessRadioRxDone+0x2f8>)
 800fcae:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800fcb2:	7cbb      	ldrb	r3, [r7, #18]
 800fcb4:	021b      	lsls	r3, r3, #8
 800fcb6:	4313      	orrs	r3, r2
 800fcb8:	4a3d      	ldr	r2, [pc, #244]	; (800fdb0 <ProcessRadioRxDone+0x2f8>)
 800fcba:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800fcbe:	4b3c      	ldr	r3, [pc, #240]	; (800fdb0 <ProcessRadioRxDone+0x2f8>)
 800fcc0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800fcc4:	7cfb      	ldrb	r3, [r7, #19]
 800fcc6:	041b      	lsls	r3, r3, #16
 800fcc8:	4313      	orrs	r3, r2
 800fcca:	4a39      	ldr	r2, [pc, #228]	; (800fdb0 <ProcessRadioRxDone+0x2f8>)
 800fccc:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	4a37      	ldr	r2, [pc, #220]	; (800fdb0 <ProcessRadioRxDone+0x2f8>)
 800fcd4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800fcd8:	7e3b      	ldrb	r3, [r7, #24]
 800fcda:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800fcde:	b2db      	uxtb	r3, r3
 800fce0:	461a      	mov	r2, r3
 800fce2:	4b33      	ldr	r3, [pc, #204]	; (800fdb0 <ProcessRadioRxDone+0x2f8>)
 800fce4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fce8:	7e3b      	ldrb	r3, [r7, #24]
 800fcea:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fcee:	b2db      	uxtb	r3, r3
 800fcf0:	461a      	mov	r2, r3
 800fcf2:	4b2f      	ldr	r3, [pc, #188]	; (800fdb0 <ProcessRadioRxDone+0x2f8>)
 800fcf4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fcf8:	7e3b      	ldrb	r3, [r7, #24]
 800fcfa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fcfe:	b2db      	uxtb	r3, r3
 800fd00:	461a      	mov	r2, r3
 800fd02:	4b2b      	ldr	r3, [pc, #172]	; (800fdb0 <ProcessRadioRxDone+0x2f8>)
 800fd04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800fd08:	7e7b      	ldrb	r3, [r7, #25]
 800fd0a:	461a      	mov	r2, r3
 800fd0c:	4b28      	ldr	r3, [pc, #160]	; (800fdb0 <ProcessRadioRxDone+0x2f8>)
 800fd0e:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800fd10:	4b27      	ldr	r3, [pc, #156]	; (800fdb0 <ProcessRadioRxDone+0x2f8>)
 800fd12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d102      	bne.n	800fd1e <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800fd18:	4b25      	ldr	r3, [pc, #148]	; (800fdb0 <ProcessRadioRxDone+0x2f8>)
 800fd1a:	2201      	movs	r2, #1
 800fd1c:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800fd1e:	4b24      	ldr	r3, [pc, #144]	; (800fdb0 <ProcessRadioRxDone+0x2f8>)
 800fd20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fd26:	fb02 f303 	mul.w	r3, r2, r3
 800fd2a:	4a21      	ldr	r2, [pc, #132]	; (800fdb0 <ProcessRadioRxDone+0x2f8>)
 800fd2c:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800fd2e:	4b20      	ldr	r3, [pc, #128]	; (800fdb0 <ProcessRadioRxDone+0x2f8>)
 800fd30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd32:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800fd36:	4a1e      	ldr	r2, [pc, #120]	; (800fdb0 <ProcessRadioRxDone+0x2f8>)
 800fd38:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800fd3a:	4b1d      	ldr	r3, [pc, #116]	; (800fdb0 <ProcessRadioRxDone+0x2f8>)
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800fd42:	f107 0308 	add.w	r3, r7, #8
 800fd46:	3312      	adds	r3, #18
 800fd48:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800fd4a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800fd4e:	b2db      	uxtb	r3, r3
 800fd50:	3b11      	subs	r3, #17
 800fd52:	b2db      	uxtb	r3, r3
 800fd54:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800fd58:	4b15      	ldr	r3, [pc, #84]	; (800fdb0 <ProcessRadioRxDone+0x2f8>)
 800fd5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fd5e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800fd62:	4611      	mov	r1, r2
 800fd64:	4618      	mov	r0, r3
 800fd66:	f008 f84d 	bl	8017e04 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800fd6a:	4b11      	ldr	r3, [pc, #68]	; (800fdb0 <ProcessRadioRxDone+0x2f8>)
 800fd6c:	2202      	movs	r2, #2
 800fd6e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800fd72:	2001      	movs	r0, #1
 800fd74:	f006 fd70 	bl	8016858 <LoRaMacConfirmQueueIsCmdActive>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d00e      	beq.n	800fd9c <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800fd7e:	2101      	movs	r1, #1
 800fd80:	2000      	movs	r0, #0
 800fd82:	f006 fcdd 	bl	8016740 <LoRaMacConfirmQueueSetStatus>
 800fd86:	e009      	b.n	800fd9c <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800fd88:	2001      	movs	r0, #1
 800fd8a:	f006 fd65 	bl	8016858 <LoRaMacConfirmQueueIsCmdActive>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d003      	beq.n	800fd9c <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800fd94:	2101      	movs	r1, #1
 800fd96:	2007      	movs	r0, #7
 800fd98:	f006 fcd2 	bl	8016740 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800fd9c:	4a05      	ldr	r2, [pc, #20]	; (800fdb4 <ProcessRadioRxDone+0x2fc>)
 800fd9e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800fda2:	f043 0308 	orr.w	r3, r3, #8
 800fda6:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 800fdaa:	e2ad      	b.n	8010308 <ProcessRadioRxDone+0x850>
 800fdac:	2000209c 	.word	0x2000209c
 800fdb0:	20001244 	.word	0x20001244
 800fdb4:	20000d38 	.word	0x20000d38
 800fdb8:	0801fbe4 	.word	0x0801fbe4
 800fdbc:	200010d0 	.word	0x200010d0
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800fdc0:	4bb0      	ldr	r3, [pc, #704]	; (8010084 <ProcessRadioRxDone+0x5cc>)
 800fdc2:	2201      	movs	r2, #1
 800fdc4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fdc8:	4baf      	ldr	r3, [pc, #700]	; (8010088 <ProcessRadioRxDone+0x5d0>)
 800fdca:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800fdce:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800fdd2:	4bac      	ldr	r3, [pc, #688]	; (8010084 <ProcessRadioRxDone+0x5cc>)
 800fdd4:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800fdd8:	b25b      	sxtb	r3, r3
 800fdda:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800fdde:	230d      	movs	r3, #13
 800fde0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800fde4:	4ba8      	ldr	r3, [pc, #672]	; (8010088 <ProcessRadioRxDone+0x5d0>)
 800fde6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d002      	beq.n	800fdf4 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800fdee:	230e      	movs	r3, #14
 800fdf0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fdf4:	4ba4      	ldr	r3, [pc, #656]	; (8010088 <ProcessRadioRxDone+0x5d0>)
 800fdf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fdfa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800fdfe:	4611      	mov	r1, r2
 800fe00:	4618      	mov	r0, r3
 800fe02:	f007 ffad 	bl	8017d60 <RegionGetPhyParam>
 800fe06:	4603      	mov	r3, r0
 800fe08:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800fe0a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800fe0e:	3b0d      	subs	r3, #13
 800fe10:	b29b      	uxth	r3, r3
 800fe12:	b21b      	sxth	r3, r3
 800fe14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fe18:	b21a      	sxth	r2, r3
 800fe1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe1c:	b21b      	sxth	r3, r3
 800fe1e:	429a      	cmp	r2, r3
 800fe20:	dc03      	bgt.n	800fe2a <ProcessRadioRxDone+0x372>
 800fe22:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800fe26:	2b0b      	cmp	r3, #11
 800fe28:	d806      	bhi.n	800fe38 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fe2a:	4b96      	ldr	r3, [pc, #600]	; (8010084 <ProcessRadioRxDone+0x5cc>)
 800fe2c:	2201      	movs	r2, #1
 800fe2e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800fe32:	f7ff fe1b 	bl	800fa6c <PrepareRxDoneAbort>
                return;
 800fe36:	e286      	b.n	8010346 <ProcessRadioRxDone+0x88e>
            }
            macMsgData.Buffer = payload;
 800fe38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fe3a:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800fe3c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800fe40:	b2db      	uxtb	r3, r3
 800fe42:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800fe46:	4b91      	ldr	r3, [pc, #580]	; (801008c <ProcessRadioRxDone+0x5d4>)
 800fe48:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800fe4a:	23ff      	movs	r3, #255	; 0xff
 800fe4c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800fe50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fe54:	4618      	mov	r0, r3
 800fe56:	f007 fd06 	bl	8017866 <LoRaMacParserData>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d006      	beq.n	800fe6e <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fe60:	4b88      	ldr	r3, [pc, #544]	; (8010084 <ProcessRadioRxDone+0x5cc>)
 800fe62:	2201      	movs	r2, #1
 800fe64:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800fe68:	f7ff fe00 	bl	800fa6c <PrepareRxDoneAbort>
                return;
 800fe6c:	e26b      	b.n	8010346 <ProcessRadioRxDone+0x88e>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800fe6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe70:	4a84      	ldr	r2, [pc, #528]	; (8010084 <ProcessRadioRxDone+0x5cc>)
 800fe72:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800fe76:	1cba      	adds	r2, r7, #2
 800fe78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fe7c:	4611      	mov	r1, r2
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f002 fc9e 	bl	80127c0 <DetermineFrameType>
 800fe84:	4603      	mov	r3, r0
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d006      	beq.n	800fe98 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fe8a:	4b7e      	ldr	r3, [pc, #504]	; (8010084 <ProcessRadioRxDone+0x5cc>)
 800fe8c:	2201      	movs	r2, #1
 800fe8e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800fe92:	f7ff fdeb 	bl	800fa6c <PrepareRxDoneAbort>
                return;
 800fe96:	e256      	b.n	8010346 <ProcessRadioRxDone+0x88e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fea2:	2300      	movs	r3, #0
 800fea4:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800fea8:	e049      	b.n	800ff3e <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800feaa:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800feae:	4a76      	ldr	r2, [pc, #472]	; (8010088 <ProcessRadioRxDone+0x5d0>)
 800feb0:	212c      	movs	r1, #44	; 0x2c
 800feb2:	fb01 f303 	mul.w	r3, r1, r3
 800feb6:	4413      	add	r3, r2
 800feb8:	33dc      	adds	r3, #220	; 0xdc
 800feba:	681a      	ldr	r2, [r3, #0]
 800febc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800febe:	429a      	cmp	r2, r3
 800fec0:	d138      	bne.n	800ff34 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800fec2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800fec6:	4a70      	ldr	r2, [pc, #448]	; (8010088 <ProcessRadioRxDone+0x5d0>)
 800fec8:	212c      	movs	r1, #44	; 0x2c
 800feca:	fb01 f303 	mul.w	r3, r1, r3
 800fece:	4413      	add	r3, r2
 800fed0:	33da      	adds	r3, #218	; 0xda
 800fed2:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d02d      	beq.n	800ff34 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800fed8:	2301      	movs	r3, #1
 800feda:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800fede:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800fee2:	4a69      	ldr	r2, [pc, #420]	; (8010088 <ProcessRadioRxDone+0x5d0>)
 800fee4:	212c      	movs	r1, #44	; 0x2c
 800fee6:	fb01 f303 	mul.w	r3, r1, r3
 800feea:	4413      	add	r3, r2
 800feec:	33db      	adds	r3, #219	; 0xdb
 800feee:	781b      	ldrb	r3, [r3, #0]
 800fef0:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800fef4:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800fef8:	4a63      	ldr	r2, [pc, #396]	; (8010088 <ProcessRadioRxDone+0x5d0>)
 800fefa:	212c      	movs	r1, #44	; 0x2c
 800fefc:	fb01 f303 	mul.w	r3, r1, r3
 800ff00:	4413      	add	r3, r2
 800ff02:	33f8      	adds	r3, #248	; 0xf8
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800ff0a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ff0e:	4a5e      	ldr	r2, [pc, #376]	; (8010088 <ProcessRadioRxDone+0x5d0>)
 800ff10:	212c      	movs	r1, #44	; 0x2c
 800ff12:	fb01 f303 	mul.w	r3, r1, r3
 800ff16:	4413      	add	r3, r2
 800ff18:	33dc      	adds	r3, #220	; 0xdc
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ff20:	4b59      	ldr	r3, [pc, #356]	; (8010088 <ProcessRadioRxDone+0x5d0>)
 800ff22:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ff26:	2b02      	cmp	r3, #2
 800ff28:	d10e      	bne.n	800ff48 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ff2a:	4b56      	ldr	r3, [pc, #344]	; (8010084 <ProcessRadioRxDone+0x5cc>)
 800ff2c:	2203      	movs	r2, #3
 800ff2e:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
                    }
                    break;
 800ff32:	e009      	b.n	800ff48 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ff34:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ff38:	3301      	adds	r3, #1
 800ff3a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800ff3e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d0b1      	beq.n	800feaa <ProcessRadioRxDone+0x3f2>
 800ff46:	e000      	b.n	800ff4a <ProcessRadioRxDone+0x492>
                    break;
 800ff48:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ff4a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ff4e:	2b01      	cmp	r3, #1
 800ff50:	d117      	bne.n	800ff82 <ProcessRadioRxDone+0x4ca>
 800ff52:	78bb      	ldrb	r3, [r7, #2]
 800ff54:	2b03      	cmp	r3, #3
 800ff56:	d10d      	bne.n	800ff74 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ff58:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ff5c:	f003 0320 	and.w	r3, r3, #32
 800ff60:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d106      	bne.n	800ff74 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800ff66:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ff6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff6e:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d006      	beq.n	800ff82 <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ff74:	4b43      	ldr	r3, [pc, #268]	; (8010084 <ProcessRadioRxDone+0x5cc>)
 800ff76:	2201      	movs	r2, #1
 800ff78:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800ff7c:	f7ff fd76 	bl	800fa6c <PrepareRxDoneAbort>
                return;
 800ff80:	e1e1      	b.n	8010346 <ProcessRadioRxDone+0x88e>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800ff82:	2315      	movs	r3, #21
 800ff84:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ff88:	4b3f      	ldr	r3, [pc, #252]	; (8010088 <ProcessRadioRxDone+0x5d0>)
 800ff8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff8e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800ff92:	4611      	mov	r1, r2
 800ff94:	4618      	mov	r0, r3
 800ff96:	f007 fee3 	bl	8017d60 <RegionGetPhyParam>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800ff9e:	78b9      	ldrb	r1, [r7, #2]
 800ffa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ffa2:	b29b      	uxth	r3, r3
 800ffa4:	4d38      	ldr	r5, [pc, #224]	; (8010088 <ProcessRadioRxDone+0x5d0>)
 800ffa6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800ffaa:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800ffae:	1d3a      	adds	r2, r7, #4
 800ffb0:	9202      	str	r2, [sp, #8]
 800ffb2:	1cfa      	adds	r2, r7, #3
 800ffb4:	9201      	str	r2, [sp, #4]
 800ffb6:	9300      	str	r3, [sp, #0]
 800ffb8:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 800ffbc:	4622      	mov	r2, r4
 800ffbe:	f000 fe8f 	bl	8010ce0 <GetFCntDown>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ffc8:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d035      	beq.n	801003c <ProcessRadioRxDone+0x584>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800ffd0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800ffd4:	2b07      	cmp	r3, #7
 800ffd6:	d119      	bne.n	801000c <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800ffd8:	4b2a      	ldr	r3, [pc, #168]	; (8010084 <ProcessRadioRxDone+0x5cc>)
 800ffda:	2208      	movs	r2, #8
 800ffdc:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800ffe0:	4b29      	ldr	r3, [pc, #164]	; (8010088 <ProcessRadioRxDone+0x5d0>)
 800ffe2:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d11d      	bne.n	8010026 <ProcessRadioRxDone+0x56e>
 800ffea:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800ffee:	f023 031f 	bic.w	r3, r3, #31
 800fff2:	b2db      	uxtb	r3, r3
 800fff4:	2ba0      	cmp	r3, #160	; 0xa0
 800fff6:	d116      	bne.n	8010026 <ProcessRadioRxDone+0x56e>
 800fff8:	4b23      	ldr	r3, [pc, #140]	; (8010088 <ProcessRadioRxDone+0x5d0>)
 800fffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fffe:	429a      	cmp	r2, r3
 8010000:	d111      	bne.n	8010026 <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 8010002:	4b21      	ldr	r3, [pc, #132]	; (8010088 <ProcessRadioRxDone+0x5d0>)
 8010004:	2201      	movs	r2, #1
 8010006:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 801000a:	e00c      	b.n	8010026 <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 801000c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8010010:	2b08      	cmp	r3, #8
 8010012:	d104      	bne.n	801001e <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8010014:	4b1b      	ldr	r3, [pc, #108]	; (8010084 <ProcessRadioRxDone+0x5cc>)
 8010016:	220a      	movs	r2, #10
 8010018:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 801001c:	e003      	b.n	8010026 <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801001e:	4b19      	ldr	r3, [pc, #100]	; (8010084 <ProcessRadioRxDone+0x5cc>)
 8010020:	2201      	movs	r2, #1
 8010022:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	4a16      	ldr	r2, [pc, #88]	; (8010084 <ProcessRadioRxDone+0x5cc>)
 801002a:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	4a14      	ldr	r2, [pc, #80]	; (8010084 <ProcessRadioRxDone+0x5cc>)
 8010032:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
                PrepareRxDoneAbort( );
 8010036:	f7ff fd19 	bl	800fa6c <PrepareRxDoneAbort>
                return;
 801003a:	e184      	b.n	8010346 <ProcessRadioRxDone+0x88e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 801003c:	78fa      	ldrb	r2, [r7, #3]
 801003e:	6879      	ldr	r1, [r7, #4]
 8010040:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 8010044:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010048:	9300      	str	r3, [sp, #0]
 801004a:	460b      	mov	r3, r1
 801004c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8010050:	f007 fa56 	bl	8017500 <LoRaMacCryptoUnsecureMessage>
 8010054:	4603      	mov	r3, r0
 8010056:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801005a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801005e:	2b00      	cmp	r3, #0
 8010060:	d016      	beq.n	8010090 <ProcessRadioRxDone+0x5d8>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8010062:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8010066:	2b02      	cmp	r3, #2
 8010068:	d104      	bne.n	8010074 <ProcessRadioRxDone+0x5bc>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 801006a:	4b06      	ldr	r3, [pc, #24]	; (8010084 <ProcessRadioRxDone+0x5cc>)
 801006c:	220b      	movs	r2, #11
 801006e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8010072:	e003      	b.n	801007c <ProcessRadioRxDone+0x5c4>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8010074:	4b03      	ldr	r3, [pc, #12]	; (8010084 <ProcessRadioRxDone+0x5cc>)
 8010076:	220c      	movs	r2, #12
 8010078:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 801007c:	f7ff fcf6 	bl	800fa6c <PrepareRxDoneAbort>
                return;
 8010080:	e161      	b.n	8010346 <ProcessRadioRxDone+0x88e>
 8010082:	bf00      	nop
 8010084:	20000d38 	.word	0x20000d38
 8010088:	20001244 	.word	0x20001244
 801008c:	20000f70 	.word	0x20000f70
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010090:	4bae      	ldr	r3, [pc, #696]	; (801034c <ProcessRadioRxDone+0x894>)
 8010092:	2200      	movs	r2, #0
 8010094:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 8010098:	4aac      	ldr	r2, [pc, #688]	; (801034c <ProcessRadioRxDone+0x894>)
 801009a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801009e:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80100a2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80100a6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80100aa:	b2db      	uxtb	r3, r3
 80100ac:	461a      	mov	r2, r3
 80100ae:	4ba7      	ldr	r3, [pc, #668]	; (801034c <ProcessRadioRxDone+0x894>)
 80100b0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 80100b4:	4ba5      	ldr	r3, [pc, #660]	; (801034c <ProcessRadioRxDone+0x894>)
 80100b6:	2200      	movs	r2, #0
 80100b8:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 80100bc:	4ba3      	ldr	r3, [pc, #652]	; (801034c <ProcessRadioRxDone+0x894>)
 80100be:	2200      	movs	r2, #0
 80100c0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	4aa1      	ldr	r2, [pc, #644]	; (801034c <ProcessRadioRxDone+0x894>)
 80100c8:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	4a9f      	ldr	r2, [pc, #636]	; (801034c <ProcessRadioRxDone+0x894>)
 80100d0:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80100d4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80100d8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80100dc:	b2db      	uxtb	r3, r3
 80100de:	2b00      	cmp	r3, #0
 80100e0:	bf14      	ite	ne
 80100e2:	2301      	movne	r3, #1
 80100e4:	2300      	moveq	r3, #0
 80100e6:	b2da      	uxtb	r2, r3
 80100e8:	4b98      	ldr	r3, [pc, #608]	; (801034c <ProcessRadioRxDone+0x894>)
 80100ea:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80100ee:	4b97      	ldr	r3, [pc, #604]	; (801034c <ProcessRadioRxDone+0x894>)
 80100f0:	2200      	movs	r2, #0
 80100f2:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80100f6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80100fa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80100fe:	b2db      	uxtb	r3, r3
 8010100:	2b00      	cmp	r3, #0
 8010102:	bf14      	ite	ne
 8010104:	2301      	movne	r3, #1
 8010106:	2300      	moveq	r3, #0
 8010108:	b2da      	uxtb	r2, r3
 801010a:	4b90      	ldr	r3, [pc, #576]	; (801034c <ProcessRadioRxDone+0x894>)
 801010c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010110:	4b8e      	ldr	r3, [pc, #568]	; (801034c <ProcessRadioRxDone+0x894>)
 8010112:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8010116:	2b00      	cmp	r3, #0
 8010118:	d004      	beq.n	8010124 <ProcessRadioRxDone+0x66c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 801011a:	4b8c      	ldr	r3, [pc, #560]	; (801034c <ProcessRadioRxDone+0x894>)
 801011c:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010120:	2b01      	cmp	r3, #1
 8010122:	d102      	bne.n	801012a <ProcessRadioRxDone+0x672>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 8010124:	4b8a      	ldr	r3, [pc, #552]	; (8010350 <ProcessRadioRxDone+0x898>)
 8010126:	2200      	movs	r2, #0
 8010128:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 801012a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801012e:	2b01      	cmp	r3, #1
 8010130:	d104      	bne.n	801013c <ProcessRadioRxDone+0x684>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8010132:	4b86      	ldr	r3, [pc, #536]	; (801034c <ProcessRadioRxDone+0x894>)
 8010134:	2202      	movs	r2, #2
 8010136:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 801013a:	e01f      	b.n	801017c <ProcessRadioRxDone+0x6c4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 801013c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8010140:	f023 031f 	bic.w	r3, r3, #31
 8010144:	b2db      	uxtb	r3, r3
 8010146:	2ba0      	cmp	r3, #160	; 0xa0
 8010148:	d110      	bne.n	801016c <ProcessRadioRxDone+0x6b4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 801014a:	4b81      	ldr	r3, [pc, #516]	; (8010350 <ProcessRadioRxDone+0x898>)
 801014c:	2201      	movs	r2, #1
 801014e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8010152:	4b7f      	ldr	r3, [pc, #508]	; (8010350 <ProcessRadioRxDone+0x898>)
 8010154:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8010158:	2b00      	cmp	r3, #0
 801015a:	d102      	bne.n	8010162 <ProcessRadioRxDone+0x6aa>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 801015c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801015e:	4a7c      	ldr	r2, [pc, #496]	; (8010350 <ProcessRadioRxDone+0x898>)
 8010160:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8010162:	4b7a      	ldr	r3, [pc, #488]	; (801034c <ProcessRadioRxDone+0x894>)
 8010164:	2201      	movs	r2, #1
 8010166:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 801016a:	e007      	b.n	801017c <ProcessRadioRxDone+0x6c4>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 801016c:	4b78      	ldr	r3, [pc, #480]	; (8010350 <ProcessRadioRxDone+0x898>)
 801016e:	2200      	movs	r2, #0
 8010170:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8010174:	4b75      	ldr	r3, [pc, #468]	; (801034c <ProcessRadioRxDone+0x894>)
 8010176:	2200      	movs	r2, #0
 8010178:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 801017c:	4b73      	ldr	r3, [pc, #460]	; (801034c <ProcessRadioRxDone+0x894>)
 801017e:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8010182:	4a72      	ldr	r2, [pc, #456]	; (801034c <ProcessRadioRxDone+0x894>)
 8010184:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 8010188:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 801018c:	4618      	mov	r0, r3
 801018e:	f001 fee9 	bl	8011f64 <RemoveMacCommands>

            switch( fType )
 8010192:	78bb      	ldrb	r3, [r7, #2]
 8010194:	2b03      	cmp	r3, #3
 8010196:	d874      	bhi.n	8010282 <ProcessRadioRxDone+0x7ca>
 8010198:	a201      	add	r2, pc, #4	; (adr r2, 80101a0 <ProcessRadioRxDone+0x6e8>)
 801019a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801019e:	bf00      	nop
 80101a0:	080101b1 	.word	0x080101b1
 80101a4:	08010201 	.word	0x08010201
 80101a8:	08010237 	.word	0x08010237
 80101ac:	0801025d 	.word	0x0801025d
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80101b0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80101b4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80101b8:	b2db      	uxtb	r3, r3
 80101ba:	461c      	mov	r4, r3
 80101bc:	4b63      	ldr	r3, [pc, #396]	; (801034c <ProcessRadioRxDone+0x894>)
 80101be:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 80101c2:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 80101c6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80101ca:	f102 0010 	add.w	r0, r2, #16
 80101ce:	9300      	str	r3, [sp, #0]
 80101d0:	460b      	mov	r3, r1
 80101d2:	4622      	mov	r2, r4
 80101d4:	2100      	movs	r1, #0
 80101d6:	f000 fee5 	bl	8010fa4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80101da:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80101de:	4b5b      	ldr	r3, [pc, #364]	; (801034c <ProcessRadioRxDone+0x894>)
 80101e0:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80101e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101e6:	4a59      	ldr	r2, [pc, #356]	; (801034c <ProcessRadioRxDone+0x894>)
 80101e8:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80101ec:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80101f0:	4b56      	ldr	r3, [pc, #344]	; (801034c <ProcessRadioRxDone+0x894>)
 80101f2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 80101f6:	4b55      	ldr	r3, [pc, #340]	; (801034c <ProcessRadioRxDone+0x894>)
 80101f8:	2201      	movs	r2, #1
 80101fa:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 80101fe:	e047      	b.n	8010290 <ProcessRadioRxDone+0x7d8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8010200:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010204:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010208:	b2db      	uxtb	r3, r3
 801020a:	461c      	mov	r4, r3
 801020c:	4b4f      	ldr	r3, [pc, #316]	; (801034c <ProcessRadioRxDone+0x894>)
 801020e:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8010212:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8010216:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801021a:	f102 0010 	add.w	r0, r2, #16
 801021e:	9300      	str	r3, [sp, #0]
 8010220:	460b      	mov	r3, r1
 8010222:	4622      	mov	r2, r4
 8010224:	2100      	movs	r1, #0
 8010226:	f000 febd 	bl	8010fa4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801022a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801022e:	4b47      	ldr	r3, [pc, #284]	; (801034c <ProcessRadioRxDone+0x894>)
 8010230:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 8010234:	e02c      	b.n	8010290 <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8010236:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010238:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 801023c:	4b43      	ldr	r3, [pc, #268]	; (801034c <ProcessRadioRxDone+0x894>)
 801023e:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8010242:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8010246:	9300      	str	r3, [sp, #0]
 8010248:	460b      	mov	r3, r1
 801024a:	2100      	movs	r1, #0
 801024c:	f000 feaa 	bl	8010fa4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010250:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8010254:	4b3d      	ldr	r3, [pc, #244]	; (801034c <ProcessRadioRxDone+0x894>)
 8010256:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 801025a:	e019      	b.n	8010290 <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801025c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8010260:	4b3a      	ldr	r3, [pc, #232]	; (801034c <ProcessRadioRxDone+0x894>)
 8010262:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8010266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010268:	4a38      	ldr	r2, [pc, #224]	; (801034c <ProcessRadioRxDone+0x894>)
 801026a:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 801026e:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8010272:	4b36      	ldr	r3, [pc, #216]	; (801034c <ProcessRadioRxDone+0x894>)
 8010274:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8010278:	4b34      	ldr	r3, [pc, #208]	; (801034c <ProcessRadioRxDone+0x894>)
 801027a:	2201      	movs	r2, #1
 801027c:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 8010280:	e006      	b.n	8010290 <ProcessRadioRxDone+0x7d8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010282:	4b32      	ldr	r3, [pc, #200]	; (801034c <ProcessRadioRxDone+0x894>)
 8010284:	2201      	movs	r2, #1
 8010286:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 801028a:	f7ff fbef 	bl	800fa6c <PrepareRxDoneAbort>
                    break;
 801028e:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8010290:	4a2e      	ldr	r2, [pc, #184]	; (801034c <ProcessRadioRxDone+0x894>)
 8010292:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010296:	f043 0302 	orr.w	r3, r3, #2
 801029a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

            break;
 801029e:	e033      	b.n	8010308 <ProcessRadioRxDone+0x850>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 80102a0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80102a4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80102a6:	18d1      	adds	r1, r2, r3
 80102a8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80102ac:	b29b      	uxth	r3, r3
 80102ae:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80102b2:	1ad3      	subs	r3, r2, r3
 80102b4:	b29b      	uxth	r3, r3
 80102b6:	461a      	mov	r2, r3
 80102b8:	4826      	ldr	r0, [pc, #152]	; (8010354 <ProcessRadioRxDone+0x89c>)
 80102ba:	f00a f8fc 	bl	801a4b6 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80102be:	4b23      	ldr	r3, [pc, #140]	; (801034c <ProcessRadioRxDone+0x894>)
 80102c0:	2203      	movs	r2, #3
 80102c2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80102c6:	4b21      	ldr	r3, [pc, #132]	; (801034c <ProcessRadioRxDone+0x894>)
 80102c8:	2200      	movs	r2, #0
 80102ca:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80102ce:	4b1f      	ldr	r3, [pc, #124]	; (801034c <ProcessRadioRxDone+0x894>)
 80102d0:	4a20      	ldr	r2, [pc, #128]	; (8010354 <ProcessRadioRxDone+0x89c>)
 80102d2:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80102d6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80102da:	b2da      	uxtb	r2, r3
 80102dc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80102e0:	1ad3      	subs	r3, r2, r3
 80102e2:	b2da      	uxtb	r2, r3
 80102e4:	4b19      	ldr	r3, [pc, #100]	; (801034c <ProcessRadioRxDone+0x894>)
 80102e6:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 80102ea:	4a18      	ldr	r2, [pc, #96]	; (801034c <ProcessRadioRxDone+0x894>)
 80102ec:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80102f0:	f043 0302 	orr.w	r3, r3, #2
 80102f4:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 80102f8:	e006      	b.n	8010308 <ProcessRadioRxDone+0x850>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80102fa:	4b14      	ldr	r3, [pc, #80]	; (801034c <ProcessRadioRxDone+0x894>)
 80102fc:	2201      	movs	r2, #1
 80102fe:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 8010302:	f7ff fbb3 	bl	800fa6c <PrepareRxDoneAbort>
            break;
 8010306:	bf00      	nop
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 8010308:	4b10      	ldr	r3, [pc, #64]	; (801034c <ProcessRadioRxDone+0x894>)
 801030a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801030e:	2b00      	cmp	r3, #0
 8010310:	d008      	beq.n	8010324 <ProcessRadioRxDone+0x86c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8010312:	4b0e      	ldr	r3, [pc, #56]	; (801034c <ProcessRadioRxDone+0x894>)
 8010314:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8010318:	2b00      	cmp	r3, #0
 801031a:	d00b      	beq.n	8010334 <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 801031c:	2000      	movs	r0, #0
 801031e:	f000 fca9 	bl	8010c74 <OnAckTimeoutTimerEvent>
 8010322:	e007      	b.n	8010334 <ProcessRadioRxDone+0x87c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8010324:	4b0a      	ldr	r3, [pc, #40]	; (8010350 <ProcessRadioRxDone+0x898>)
 8010326:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801032a:	2b02      	cmp	r3, #2
 801032c:	d102      	bne.n	8010334 <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 801032e:	2000      	movs	r0, #0
 8010330:	f000 fca0 	bl	8010c74 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010334:	4a05      	ldr	r2, [pc, #20]	; (801034c <ProcessRadioRxDone+0x894>)
 8010336:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801033a:	f043 0320 	orr.w	r3, r3, #32
 801033e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 8010342:	f7ff fae1 	bl	800f908 <UpdateRxSlotIdleState>
}
 8010346:	3788      	adds	r7, #136	; 0x88
 8010348:	46bd      	mov	sp, r7
 801034a:	bdb0      	pop	{r4, r5, r7, pc}
 801034c:	20000d38 	.word	0x20000d38
 8010350:	20001244 	.word	0x20001244
 8010354:	20000f70 	.word	0x20000f70

08010358 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8010358:	b580      	push	{r7, lr}
 801035a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 801035c:	4b11      	ldr	r3, [pc, #68]	; (80103a4 <ProcessRadioTxTimeout+0x4c>)
 801035e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010362:	2b02      	cmp	r3, #2
 8010364:	d002      	beq.n	801036c <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8010366:	4b10      	ldr	r3, [pc, #64]	; (80103a8 <ProcessRadioTxTimeout+0x50>)
 8010368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801036a:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 801036c:	f7ff facc 	bl	800f908 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8010370:	4b0e      	ldr	r3, [pc, #56]	; (80103ac <ProcessRadioTxTimeout+0x54>)
 8010372:	2202      	movs	r2, #2
 8010374:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8010378:	2002      	movs	r0, #2
 801037a:	f006 fa39 	bl	80167f0 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 801037e:	4b0b      	ldr	r3, [pc, #44]	; (80103ac <ProcessRadioTxTimeout+0x54>)
 8010380:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8010384:	2b00      	cmp	r3, #0
 8010386:	d003      	beq.n	8010390 <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 8010388:	4b08      	ldr	r3, [pc, #32]	; (80103ac <ProcessRadioTxTimeout+0x54>)
 801038a:	2201      	movs	r2, #1
 801038c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010390:	4a06      	ldr	r2, [pc, #24]	; (80103ac <ProcessRadioTxTimeout+0x54>)
 8010392:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010396:	f043 0320 	orr.w	r3, r3, #32
 801039a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
}
 801039e:	bf00      	nop
 80103a0:	bd80      	pop	{r7, pc}
 80103a2:	bf00      	nop
 80103a4:	20001244 	.word	0x20001244
 80103a8:	0801fbe4 	.word	0x0801fbe4
 80103ac:	20000d38 	.word	0x20000d38

080103b0 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b084      	sub	sp, #16
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	4603      	mov	r3, r0
 80103b8:	460a      	mov	r2, r1
 80103ba:	71fb      	strb	r3, [r7, #7]
 80103bc:	4613      	mov	r3, r2
 80103be:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 80103c0:	2300      	movs	r3, #0
 80103c2:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80103c4:	4b40      	ldr	r3, [pc, #256]	; (80104c8 <HandleRadioRxErrorTimeout+0x118>)
 80103c6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80103ca:	2b02      	cmp	r3, #2
 80103cc:	d002      	beq.n	80103d4 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 80103ce:	4b3f      	ldr	r3, [pc, #252]	; (80104cc <HandleRadioRxErrorTimeout+0x11c>)
 80103d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103d2:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80103d4:	f005 fa68 	bl	80158a8 <LoRaMacClassBIsBeaconExpected>
 80103d8:	4603      	mov	r3, r0
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d007      	beq.n	80103ee <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80103de:	2002      	movs	r0, #2
 80103e0:	f004 fc16 	bl	8014c10 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80103e4:	2000      	movs	r0, #0
 80103e6:	f004 fc7f 	bl	8014ce8 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 80103ea:	2301      	movs	r3, #1
 80103ec:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80103ee:	4b36      	ldr	r3, [pc, #216]	; (80104c8 <HandleRadioRxErrorTimeout+0x118>)
 80103f0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80103f4:	2b01      	cmp	r3, #1
 80103f6:	d119      	bne.n	801042c <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80103f8:	f005 fa6e 	bl	80158d8 <LoRaMacClassBIsPingExpected>
 80103fc:	4603      	mov	r3, r0
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d007      	beq.n	8010412 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010402:	2000      	movs	r0, #0
 8010404:	f004 fc3a 	bl	8014c7c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8010408:	2000      	movs	r0, #0
 801040a:	f004 fe6d 	bl	80150e8 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 801040e:	2301      	movs	r3, #1
 8010410:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010412:	f005 fa71 	bl	80158f8 <LoRaMacClassBIsMulticastExpected>
 8010416:	4603      	mov	r3, r0
 8010418:	2b00      	cmp	r3, #0
 801041a:	d007      	beq.n	801042c <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801041c:	2000      	movs	r0, #0
 801041e:	f004 fc3d 	bl	8014c9c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8010422:	2000      	movs	r0, #0
 8010424:	f004 ff6a 	bl	80152fc <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8010428:	2301      	movs	r3, #1
 801042a:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 801042c:	7bfb      	ldrb	r3, [r7, #15]
 801042e:	f083 0301 	eor.w	r3, r3, #1
 8010432:	b2db      	uxtb	r3, r3
 8010434:	2b00      	cmp	r3, #0
 8010436:	d040      	beq.n	80104ba <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010438:	4b25      	ldr	r3, [pc, #148]	; (80104d0 <HandleRadioRxErrorTimeout+0x120>)
 801043a:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 801043e:	2b00      	cmp	r3, #0
 8010440:	d122      	bne.n	8010488 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 8010442:	4b23      	ldr	r3, [pc, #140]	; (80104d0 <HandleRadioRxErrorTimeout+0x120>)
 8010444:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8010448:	2b00      	cmp	r3, #0
 801044a:	d003      	beq.n	8010454 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 801044c:	4a20      	ldr	r2, [pc, #128]	; (80104d0 <HandleRadioRxErrorTimeout+0x120>)
 801044e:	79fb      	ldrb	r3, [r7, #7]
 8010450:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8010454:	79fb      	ldrb	r3, [r7, #7]
 8010456:	4618      	mov	r0, r3
 8010458:	f006 f9ca 	bl	80167f0 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 801045c:	4b1a      	ldr	r3, [pc, #104]	; (80104c8 <HandleRadioRxErrorTimeout+0x118>)
 801045e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010460:	4618      	mov	r0, r3
 8010462:	f00e fa9f 	bl	801e9a4 <UTIL_TIMER_GetElapsedTime>
 8010466:	4602      	mov	r2, r0
 8010468:	4b19      	ldr	r3, [pc, #100]	; (80104d0 <HandleRadioRxErrorTimeout+0x120>)
 801046a:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 801046e:	429a      	cmp	r2, r3
 8010470:	d323      	bcc.n	80104ba <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 8010472:	4818      	ldr	r0, [pc, #96]	; (80104d4 <HandleRadioRxErrorTimeout+0x124>)
 8010474:	f00e f96a 	bl	801e74c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8010478:	4a15      	ldr	r2, [pc, #84]	; (80104d0 <HandleRadioRxErrorTimeout+0x120>)
 801047a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801047e:	f043 0320 	orr.w	r3, r3, #32
 8010482:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8010486:	e018      	b.n	80104ba <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8010488:	4b11      	ldr	r3, [pc, #68]	; (80104d0 <HandleRadioRxErrorTimeout+0x120>)
 801048a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801048e:	2b00      	cmp	r3, #0
 8010490:	d003      	beq.n	801049a <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8010492:	4a0f      	ldr	r2, [pc, #60]	; (80104d0 <HandleRadioRxErrorTimeout+0x120>)
 8010494:	79bb      	ldrb	r3, [r7, #6]
 8010496:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 801049a:	79bb      	ldrb	r3, [r7, #6]
 801049c:	4618      	mov	r0, r3
 801049e:	f006 f9a7 	bl	80167f0 <LoRaMacConfirmQueueSetStatusCmn>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80104a2:	4b09      	ldr	r3, [pc, #36]	; (80104c8 <HandleRadioRxErrorTimeout+0x118>)
 80104a4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80104a8:	2b02      	cmp	r3, #2
 80104aa:	d006      	beq.n	80104ba <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 80104ac:	4a08      	ldr	r2, [pc, #32]	; (80104d0 <HandleRadioRxErrorTimeout+0x120>)
 80104ae:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80104b2:	f043 0320 	orr.w	r3, r3, #32
 80104b6:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 80104ba:	f7ff fa25 	bl	800f908 <UpdateRxSlotIdleState>
}
 80104be:	bf00      	nop
 80104c0:	3710      	adds	r7, #16
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}
 80104c6:	bf00      	nop
 80104c8:	20001244 	.word	0x20001244
 80104cc:	0801fbe4 	.word	0x0801fbe4
 80104d0:	20000d38 	.word	0x20000d38
 80104d4:	200010d0 	.word	0x200010d0

080104d8 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 80104dc:	2106      	movs	r1, #6
 80104de:	2005      	movs	r0, #5
 80104e0:	f7ff ff66 	bl	80103b0 <HandleRadioRxErrorTimeout>
}
 80104e4:	bf00      	nop
 80104e6:	bd80      	pop	{r7, pc}

080104e8 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 80104ec:	2104      	movs	r1, #4
 80104ee:	2003      	movs	r0, #3
 80104f0:	f7ff ff5e 	bl	80103b0 <HandleRadioRxErrorTimeout>
}
 80104f4:	bf00      	nop
 80104f6:	bd80      	pop	{r7, pc}

080104f8 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b084      	sub	sp, #16
 80104fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104fe:	f3ef 8310 	mrs	r3, PRIMASK
 8010502:	607b      	str	r3, [r7, #4]
  return(result);
 8010504:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8010506:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010508:	b672      	cpsid	i
}
 801050a:	bf00      	nop
    events = LoRaMacRadioEvents;
 801050c:	4b1d      	ldr	r3, [pc, #116]	; (8010584 <LoRaMacHandleIrqEvents+0x8c>)
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 8010512:	4b1c      	ldr	r3, [pc, #112]	; (8010584 <LoRaMacHandleIrqEvents+0x8c>)
 8010514:	2200      	movs	r2, #0
 8010516:	601a      	str	r2, [r3, #0]
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801051c:	68bb      	ldr	r3, [r7, #8]
 801051e:	f383 8810 	msr	PRIMASK, r3
}
 8010522:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8010524:	683b      	ldr	r3, [r7, #0]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d027      	beq.n	801057a <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 801052a:	783b      	ldrb	r3, [r7, #0]
 801052c:	f003 0310 	and.w	r3, r3, #16
 8010530:	b2db      	uxtb	r3, r3
 8010532:	2b00      	cmp	r3, #0
 8010534:	d001      	beq.n	801053a <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 8010536:	f7ff f9ff 	bl	800f938 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 801053a:	783b      	ldrb	r3, [r7, #0]
 801053c:	f003 0308 	and.w	r3, r3, #8
 8010540:	b2db      	uxtb	r3, r3
 8010542:	2b00      	cmp	r3, #0
 8010544:	d001      	beq.n	801054a <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 8010546:	f7ff fab7 	bl	800fab8 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 801054a:	783b      	ldrb	r3, [r7, #0]
 801054c:	f003 0304 	and.w	r3, r3, #4
 8010550:	b2db      	uxtb	r3, r3
 8010552:	2b00      	cmp	r3, #0
 8010554:	d001      	beq.n	801055a <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 8010556:	f7ff feff 	bl	8010358 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 801055a:	783b      	ldrb	r3, [r7, #0]
 801055c:	f003 0302 	and.w	r3, r3, #2
 8010560:	b2db      	uxtb	r3, r3
 8010562:	2b00      	cmp	r3, #0
 8010564:	d001      	beq.n	801056a <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8010566:	f7ff ffb7 	bl	80104d8 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 801056a:	783b      	ldrb	r3, [r7, #0]
 801056c:	f003 0301 	and.w	r3, r3, #1
 8010570:	b2db      	uxtb	r3, r3
 8010572:	2b00      	cmp	r3, #0
 8010574:	d001      	beq.n	801057a <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8010576:	f7ff ffb7 	bl	80104e8 <ProcessRadioRxTimeout>
        }
    }
}
 801057a:	bf00      	nop
 801057c:	3710      	adds	r7, #16
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}
 8010582:	bf00      	nop
 8010584:	20002094 	.word	0x20002094

08010588 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8010588:	b480      	push	{r7}
 801058a:	af00      	add	r7, sp, #0
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 801058c:	4b08      	ldr	r3, [pc, #32]	; (80105b0 <LoRaMacIsBusy+0x28>)
 801058e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010592:	2b00      	cmp	r3, #0
 8010594:	d106      	bne.n	80105a4 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8010596:	4b06      	ldr	r3, [pc, #24]	; (80105b0 <LoRaMacIsBusy+0x28>)
 8010598:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 801059c:	2b01      	cmp	r3, #1
 801059e:	d101      	bne.n	80105a4 <LoRaMacIsBusy+0x1c>
    {
        return false;
 80105a0:	2300      	movs	r3, #0
 80105a2:	e000      	b.n	80105a6 <LoRaMacIsBusy+0x1e>
    }
    return true;
 80105a4:	2301      	movs	r3, #1
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bc80      	pop	{r7}
 80105ac:	4770      	bx	lr
 80105ae:	bf00      	nop
 80105b0:	20000d38 	.word	0x20000d38

080105b4 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 80105b4:	b480      	push	{r7}
 80105b6:	b083      	sub	sp, #12
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	4603      	mov	r3, r0
 80105bc:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 80105be:	4a04      	ldr	r2, [pc, #16]	; (80105d0 <LoRaMacEnableRequests+0x1c>)
 80105c0:	79fb      	ldrb	r3, [r7, #7]
 80105c2:	f882 3486 	strb.w	r3, [r2, #1158]	; 0x486
}
 80105c6:	bf00      	nop
 80105c8:	370c      	adds	r7, #12
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bc80      	pop	{r7}
 80105ce:	4770      	bx	lr
 80105d0:	20000d38 	.word	0x20000d38

080105d4 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 80105da:	4b2c      	ldr	r3, [pc, #176]	; (801068c <LoRaMacHandleRequestEvents+0xb8>)
 80105dc:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80105e0:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 80105e2:	4b2a      	ldr	r3, [pc, #168]	; (801068c <LoRaMacHandleRequestEvents+0xb8>)
 80105e4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d14a      	bne.n	8010682 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80105ec:	4b27      	ldr	r3, [pc, #156]	; (801068c <LoRaMacHandleRequestEvents+0xb8>)
 80105ee:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80105f2:	f003 0301 	and.w	r3, r3, #1
 80105f6:	b2db      	uxtb	r3, r3
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d006      	beq.n	801060a <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80105fc:	4a23      	ldr	r2, [pc, #140]	; (801068c <LoRaMacHandleRequestEvents+0xb8>)
 80105fe:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010602:	f36f 0300 	bfc	r3, #0, #1
 8010606:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 801060a:	4b20      	ldr	r3, [pc, #128]	; (801068c <LoRaMacHandleRequestEvents+0xb8>)
 801060c:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8010610:	f003 0304 	and.w	r3, r3, #4
 8010614:	b2db      	uxtb	r3, r3
 8010616:	2b00      	cmp	r3, #0
 8010618:	d006      	beq.n	8010628 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801061a:	4a1c      	ldr	r2, [pc, #112]	; (801068c <LoRaMacHandleRequestEvents+0xb8>)
 801061c:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010620:	f36f 0382 	bfc	r3, #2, #1
 8010624:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010628:	2001      	movs	r0, #1
 801062a:	f7ff ffc3 	bl	80105b4 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 801062e:	793b      	ldrb	r3, [r7, #4]
 8010630:	f003 0301 	and.w	r3, r3, #1
 8010634:	b2db      	uxtb	r3, r3
 8010636:	2b00      	cmp	r3, #0
 8010638:	d005      	beq.n	8010646 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 801063a:	4b14      	ldr	r3, [pc, #80]	; (801068c <LoRaMacHandleRequestEvents+0xb8>)
 801063c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	4813      	ldr	r0, [pc, #76]	; (8010690 <LoRaMacHandleRequestEvents+0xbc>)
 8010644:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8010646:	793b      	ldrb	r3, [r7, #4]
 8010648:	f003 0304 	and.w	r3, r3, #4
 801064c:	b2db      	uxtb	r3, r3
 801064e:	2b00      	cmp	r3, #0
 8010650:	d00e      	beq.n	8010670 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8010652:	4810      	ldr	r0, [pc, #64]	; (8010694 <LoRaMacHandleRequestEvents+0xc0>)
 8010654:	f006 f91a 	bl	801688c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8010658:	f006 f964 	bl	8016924 <LoRaMacConfirmQueueGetCnt>
 801065c:	4603      	mov	r3, r0
 801065e:	2b00      	cmp	r3, #0
 8010660:	d006      	beq.n	8010670 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8010662:	4a0a      	ldr	r2, [pc, #40]	; (801068c <LoRaMacHandleRequestEvents+0xb8>)
 8010664:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010668:	f043 0304 	orr.w	r3, r3, #4
 801066c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8010670:	f005 f9d6 	bl	8015a20 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8010674:	4a05      	ldr	r2, [pc, #20]	; (801068c <LoRaMacHandleRequestEvents+0xb8>)
 8010676:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801067a:	f36f 1345 	bfc	r3, #5, #1
 801067e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
}
 8010682:	bf00      	nop
 8010684:	3708      	adds	r7, #8
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}
 801068a:	bf00      	nop
 801068c:	20000d38 	.word	0x20000d38
 8010690:	20001170 	.word	0x20001170
 8010694:	20001184 	.word	0x20001184

08010698 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b082      	sub	sp, #8
 801069c:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 801069e:	4b07      	ldr	r3, [pc, #28]	; (80106bc <LoRaMacHandleScheduleUplinkEvent+0x24>)
 80106a0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d105      	bne.n	80106b4 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 80106a8:	2300      	movs	r3, #0
 80106aa:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 80106ac:	1dfb      	adds	r3, r7, #7
 80106ae:	4618      	mov	r0, r3
 80106b0:	f005 fed2 	bl	8016458 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 80106b4:	bf00      	nop
 80106b6:	3708      	adds	r7, #8
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}
 80106bc:	20000d38 	.word	0x20000d38

080106c0 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80106c4:	4b16      	ldr	r3, [pc, #88]	; (8010720 <LoRaMacHandleIndicationEvents+0x60>)
 80106c6:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80106ca:	f003 0308 	and.w	r3, r3, #8
 80106ce:	b2db      	uxtb	r3, r3
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d00d      	beq.n	80106f0 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80106d4:	4a12      	ldr	r2, [pc, #72]	; (8010720 <LoRaMacHandleIndicationEvents+0x60>)
 80106d6:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80106da:	f36f 03c3 	bfc	r3, #3, #1
 80106de:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 80106e2:	4b0f      	ldr	r3, [pc, #60]	; (8010720 <LoRaMacHandleIndicationEvents+0x60>)
 80106e4:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 80106e8:	68db      	ldr	r3, [r3, #12]
 80106ea:	490e      	ldr	r1, [pc, #56]	; (8010724 <LoRaMacHandleIndicationEvents+0x64>)
 80106ec:	480e      	ldr	r0, [pc, #56]	; (8010728 <LoRaMacHandleIndicationEvents+0x68>)
 80106ee:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80106f0:	4b0b      	ldr	r3, [pc, #44]	; (8010720 <LoRaMacHandleIndicationEvents+0x60>)
 80106f2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80106f6:	f003 0302 	and.w	r3, r3, #2
 80106fa:	b2db      	uxtb	r3, r3
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d00d      	beq.n	801071c <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8010700:	4a07      	ldr	r2, [pc, #28]	; (8010720 <LoRaMacHandleIndicationEvents+0x60>)
 8010702:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010706:	f36f 0341 	bfc	r3, #1, #1
 801070a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 801070e:	4b04      	ldr	r3, [pc, #16]	; (8010720 <LoRaMacHandleIndicationEvents+0x60>)
 8010710:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	4903      	ldr	r1, [pc, #12]	; (8010724 <LoRaMacHandleIndicationEvents+0x64>)
 8010718:	4804      	ldr	r0, [pc, #16]	; (801072c <LoRaMacHandleIndicationEvents+0x6c>)
 801071a:	4798      	blx	r3
    }
}
 801071c:	bf00      	nop
 801071e:	bd80      	pop	{r7, pc}
 8010720:	20000d38 	.word	0x20000d38
 8010724:	200011b8 	.word	0x200011b8
 8010728:	20001198 	.word	0x20001198
 801072c:	20001154 	.word	0x20001154

08010730 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b082      	sub	sp, #8
 8010734:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010736:	4b32      	ldr	r3, [pc, #200]	; (8010800 <LoRaMacHandleMcpsRequest+0xd0>)
 8010738:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801073c:	f003 0301 	and.w	r3, r3, #1
 8010740:	b2db      	uxtb	r3, r3
 8010742:	2b00      	cmp	r3, #0
 8010744:	d058      	beq.n	80107f8 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 8010746:	2300      	movs	r3, #0
 8010748:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 801074a:	2300      	movs	r3, #0
 801074c:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801074e:	4b2c      	ldr	r3, [pc, #176]	; (8010800 <LoRaMacHandleMcpsRequest+0xd0>)
 8010750:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8010754:	2b00      	cmp	r3, #0
 8010756:	d004      	beq.n	8010762 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8010758:	4b29      	ldr	r3, [pc, #164]	; (8010800 <LoRaMacHandleMcpsRequest+0xd0>)
 801075a:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801075e:	2b03      	cmp	r3, #3
 8010760:	d104      	bne.n	801076c <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8010762:	f002 f87b 	bl	801285c <CheckRetransUnconfirmedUplink>
 8010766:	4603      	mov	r3, r0
 8010768:	71fb      	strb	r3, [r7, #7]
 801076a:	e020      	b.n	80107ae <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 801076c:	4b24      	ldr	r3, [pc, #144]	; (8010800 <LoRaMacHandleMcpsRequest+0xd0>)
 801076e:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8010772:	2b01      	cmp	r3, #1
 8010774:	d11b      	bne.n	80107ae <LoRaMacHandleMcpsRequest+0x7e>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 8010776:	4b22      	ldr	r3, [pc, #136]	; (8010800 <LoRaMacHandleMcpsRequest+0xd0>)
 8010778:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 801077c:	2b00      	cmp	r3, #0
 801077e:	d014      	beq.n	80107aa <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8010780:	f002 f898 	bl	80128b4 <CheckRetransConfirmedUplink>
 8010784:	4603      	mov	r3, r0
 8010786:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8010788:	4b1e      	ldr	r3, [pc, #120]	; (8010804 <LoRaMacHandleMcpsRequest+0xd4>)
 801078a:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 801078e:	2b00      	cmp	r3, #0
 8010790:	d10d      	bne.n	80107ae <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 8010792:	79fb      	ldrb	r3, [r7, #7]
 8010794:	f083 0301 	eor.w	r3, r3, #1
 8010798:	b2db      	uxtb	r3, r3
 801079a:	2b00      	cmp	r3, #0
 801079c:	d002      	beq.n	80107a4 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 801079e:	f002 f905 	bl	80129ac <AckTimeoutRetriesProcess>
 80107a2:	e004      	b.n	80107ae <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 80107a4:	f002 f940 	bl	8012a28 <AckTimeoutRetriesFinalize>
 80107a8:	e001      	b.n	80107ae <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 80107aa:	2301      	movs	r3, #1
 80107ac:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 80107ae:	79fb      	ldrb	r3, [r7, #7]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d00d      	beq.n	80107d0 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 80107b4:	4814      	ldr	r0, [pc, #80]	; (8010808 <LoRaMacHandleMcpsRequest+0xd8>)
 80107b6:	f00d ffc9 	bl	801e74c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80107ba:	4b11      	ldr	r3, [pc, #68]	; (8010800 <LoRaMacHandleMcpsRequest+0xd0>)
 80107bc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80107c0:	f023 0320 	bic.w	r3, r3, #32
 80107c4:	4a0e      	ldr	r2, [pc, #56]	; (8010800 <LoRaMacHandleMcpsRequest+0xd0>)
 80107c6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 80107ca:	f002 f895 	bl	80128f8 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 80107ce:	e013      	b.n	80107f8 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 80107d0:	79bb      	ldrb	r3, [r7, #6]
 80107d2:	f083 0301 	eor.w	r3, r3, #1
 80107d6:	b2db      	uxtb	r3, r3
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d00d      	beq.n	80107f8 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80107dc:	4a08      	ldr	r2, [pc, #32]	; (8010800 <LoRaMacHandleMcpsRequest+0xd0>)
 80107de:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80107e2:	f36f 1345 	bfc	r3, #5, #1
 80107e6:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 80107ea:	4b05      	ldr	r3, [pc, #20]	; (8010800 <LoRaMacHandleMcpsRequest+0xd0>)
 80107ec:	2200      	movs	r2, #0
 80107ee:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 80107f2:	2000      	movs	r0, #0
 80107f4:	f000 f994 	bl	8010b20 <OnTxDelayedTimerEvent>
}
 80107f8:	bf00      	nop
 80107fa:	3708      	adds	r7, #8
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}
 8010800:	20000d38 	.word	0x20000d38
 8010804:	20001244 	.word	0x20001244
 8010808:	200010a0 	.word	0x200010a0

0801080c <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 801080c:	b580      	push	{r7, lr}
 801080e:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010810:	4b1b      	ldr	r3, [pc, #108]	; (8010880 <LoRaMacHandleMlmeRequest+0x74>)
 8010812:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8010816:	f003 0304 	and.w	r3, r3, #4
 801081a:	b2db      	uxtb	r3, r3
 801081c:	2b00      	cmp	r3, #0
 801081e:	d02c      	beq.n	801087a <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010820:	2001      	movs	r0, #1
 8010822:	f006 f819 	bl	8016858 <LoRaMacConfirmQueueIsCmdActive>
 8010826:	4603      	mov	r3, r0
 8010828:	2b00      	cmp	r3, #0
 801082a:	d012      	beq.n	8010852 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 801082c:	2001      	movs	r0, #1
 801082e:	f005 ffb5 	bl	801679c <LoRaMacConfirmQueueGetStatus>
 8010832:	4603      	mov	r3, r0
 8010834:	2b00      	cmp	r3, #0
 8010836:	d103      	bne.n	8010840 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8010838:	4b11      	ldr	r3, [pc, #68]	; (8010880 <LoRaMacHandleMlmeRequest+0x74>)
 801083a:	2200      	movs	r2, #0
 801083c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010840:	4b0f      	ldr	r3, [pc, #60]	; (8010880 <LoRaMacHandleMlmeRequest+0x74>)
 8010842:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010846:	f023 0302 	bic.w	r3, r3, #2
 801084a:	4a0d      	ldr	r2, [pc, #52]	; (8010880 <LoRaMacHandleMlmeRequest+0x74>)
 801084c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8010850:	e013      	b.n	801087a <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8010852:	2005      	movs	r0, #5
 8010854:	f006 f800 	bl	8016858 <LoRaMacConfirmQueueIsCmdActive>
 8010858:	4603      	mov	r3, r0
 801085a:	2b00      	cmp	r3, #0
 801085c:	d105      	bne.n	801086a <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 801085e:	2006      	movs	r0, #6
 8010860:	f005 fffa 	bl	8016858 <LoRaMacConfirmQueueIsCmdActive>
 8010864:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8010866:	2b00      	cmp	r3, #0
 8010868:	d007      	beq.n	801087a <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801086a:	4b05      	ldr	r3, [pc, #20]	; (8010880 <LoRaMacHandleMlmeRequest+0x74>)
 801086c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010870:	f023 0302 	bic.w	r3, r3, #2
 8010874:	4a02      	ldr	r2, [pc, #8]	; (8010880 <LoRaMacHandleMlmeRequest+0x74>)
 8010876:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 801087a:	bf00      	nop
 801087c:	bd80      	pop	{r7, pc}
 801087e:	bf00      	nop
 8010880:	20000d38 	.word	0x20000d38

08010884 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8010884:	b580      	push	{r7, lr}
 8010886:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010888:	200c      	movs	r0, #12
 801088a:	f005 ffe5 	bl	8016858 <LoRaMacConfirmQueueIsCmdActive>
 801088e:	4603      	mov	r3, r0
 8010890:	2b00      	cmp	r3, #0
 8010892:	d019      	beq.n	80108c8 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8010894:	4b0e      	ldr	r3, [pc, #56]	; (80108d0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010896:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801089a:	f003 0301 	and.w	r3, r3, #1
 801089e:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d111      	bne.n	80108c8 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80108a4:	4b0a      	ldr	r3, [pc, #40]	; (80108d0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80108a6:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80108aa:	f003 0304 	and.w	r3, r3, #4
 80108ae:	b2db      	uxtb	r3, r3
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d009      	beq.n	80108c8 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80108b4:	4b06      	ldr	r3, [pc, #24]	; (80108d0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80108b6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80108ba:	f023 0302 	bic.w	r3, r3, #2
 80108be:	4a04      	ldr	r2, [pc, #16]	; (80108d0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80108c0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 80108c4:	2301      	movs	r3, #1
 80108c6:	e000      	b.n	80108ca <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 80108c8:	2300      	movs	r3, #0
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	bd80      	pop	{r7, pc}
 80108ce:	bf00      	nop
 80108d0:	20000d38 	.word	0x20000d38

080108d4 <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 80108d4:	b480      	push	{r7}
 80108d6:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80108d8:	4b0d      	ldr	r3, [pc, #52]	; (8010910 <LoRaMacCheckForRxAbort+0x3c>)
 80108da:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80108de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d00f      	beq.n	8010906 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 80108e6:	4b0a      	ldr	r3, [pc, #40]	; (8010910 <LoRaMacCheckForRxAbort+0x3c>)
 80108e8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80108ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80108f0:	4a07      	ldr	r2, [pc, #28]	; (8010910 <LoRaMacCheckForRxAbort+0x3c>)
 80108f2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80108f6:	4b06      	ldr	r3, [pc, #24]	; (8010910 <LoRaMacCheckForRxAbort+0x3c>)
 80108f8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80108fc:	f023 0302 	bic.w	r3, r3, #2
 8010900:	4a03      	ldr	r2, [pc, #12]	; (8010910 <LoRaMacCheckForRxAbort+0x3c>)
 8010902:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8010906:	bf00      	nop
 8010908:	46bd      	mov	sp, r7
 801090a:	bc80      	pop	{r7}
 801090c:	4770      	bx	lr
 801090e:	bf00      	nop
 8010910:	20000d38 	.word	0x20000d38

08010914 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b084      	sub	sp, #16
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 801091c:	2300      	movs	r3, #0
 801091e:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8010920:	2300      	movs	r3, #0
 8010922:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8010924:	4b50      	ldr	r3, [pc, #320]	; (8010a68 <LoRaMacHandleNvm+0x154>)
 8010926:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801092a:	2b00      	cmp	r3, #0
 801092c:	f040 8098 	bne.w	8010a60 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2124      	movs	r1, #36	; 0x24
 8010934:	4618      	mov	r0, r3
 8010936:	f009 fe13 	bl	801a560 <Crc32>
 801093a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010940:	68ba      	ldr	r2, [r7, #8]
 8010942:	429a      	cmp	r2, r3
 8010944:	d006      	beq.n	8010954 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	68ba      	ldr	r2, [r7, #8]
 801094a:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 801094c:	89fb      	ldrh	r3, [r7, #14]
 801094e:	f043 0301 	orr.w	r3, r3, #1
 8010952:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	3328      	adds	r3, #40	; 0x28
 8010958:	2114      	movs	r1, #20
 801095a:	4618      	mov	r0, r3
 801095c:	f009 fe00 	bl	801a560 <Crc32>
 8010960:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010966:	68ba      	ldr	r2, [r7, #8]
 8010968:	429a      	cmp	r2, r3
 801096a:	d006      	beq.n	801097a <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	68ba      	ldr	r2, [r7, #8]
 8010970:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8010972:	89fb      	ldrh	r3, [r7, #14]
 8010974:	f043 0302 	orr.w	r3, r3, #2
 8010978:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	3340      	adds	r3, #64	; 0x40
 801097e:	21dc      	movs	r1, #220	; 0xdc
 8010980:	4618      	mov	r0, r3
 8010982:	f009 fded 	bl	801a560 <Crc32>
 8010986:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801098e:	68ba      	ldr	r2, [r7, #8]
 8010990:	429a      	cmp	r2, r3
 8010992:	d007      	beq.n	80109a4 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	68ba      	ldr	r2, [r7, #8]
 8010998:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 801099c:	89fb      	ldrh	r3, [r7, #14]
 801099e:	f043 0304 	orr.w	r3, r3, #4
 80109a2:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80109aa:	21bc      	movs	r1, #188	; 0xbc
 80109ac:	4618      	mov	r0, r3
 80109ae:	f009 fdd7 	bl	801a560 <Crc32>
 80109b2:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80109ba:	68ba      	ldr	r2, [r7, #8]
 80109bc:	429a      	cmp	r2, r3
 80109be:	d007      	beq.n	80109d0 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	68ba      	ldr	r2, [r7, #8]
 80109c4:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 80109c8:	89fb      	ldrh	r3, [r7, #14]
 80109ca:	f043 0308 	orr.w	r3, r3, #8
 80109ce:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80109d6:	2190      	movs	r1, #144	; 0x90
 80109d8:	4618      	mov	r0, r3
 80109da:	f009 fdc1 	bl	801a560 <Crc32>
 80109de:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80109e6:	68ba      	ldr	r2, [r7, #8]
 80109e8:	429a      	cmp	r2, r3
 80109ea:	d007      	beq.n	80109fc <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	68ba      	ldr	r2, [r7, #8]
 80109f0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 80109f4:	89fb      	ldrh	r3, [r7, #14]
 80109f6:	f043 0310 	orr.w	r3, r3, #16
 80109fa:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8010a02:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8010a06:	4618      	mov	r0, r3
 8010a08:	f009 fdaa 	bl	801a560 <Crc32>
 8010a0c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 8010a14:	68ba      	ldr	r2, [r7, #8]
 8010a16:	429a      	cmp	r2, r3
 8010a18:	d007      	beq.n	8010a2a <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	68ba      	ldr	r2, [r7, #8]
 8010a1e:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8010a22:	89fb      	ldrh	r3, [r7, #14]
 8010a24:	f043 0320 	orr.w	r3, r3, #32
 8010a28:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 8010a30:	2114      	movs	r1, #20
 8010a32:	4618      	mov	r0, r3
 8010a34:	f009 fd94 	bl	801a560 <Crc32>
 8010a38:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 8010a40:	68ba      	ldr	r2, [r7, #8]
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d007      	beq.n	8010a56 <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	68ba      	ldr	r2, [r7, #8]
 8010a4a:	f8c3 2724 	str.w	r2, [r3, #1828]	; 0x724
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8010a4e:	89fb      	ldrh	r3, [r7, #14]
 8010a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a54:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8010a56:	89fb      	ldrh	r3, [r7, #14]
 8010a58:	4618      	mov	r0, r3
 8010a5a:	f001 ff89 	bl	8012970 <CallNvmDataChangeCallback>
 8010a5e:	e000      	b.n	8010a62 <LoRaMacHandleNvm+0x14e>
        return;
 8010a60:	bf00      	nop
}
 8010a62:	3710      	adds	r7, #16
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}
 8010a68:	20000d38 	.word	0x20000d38

08010a6c <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b082      	sub	sp, #8
 8010a70:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8010a72:	2300      	movs	r3, #0
 8010a74:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 8010a76:	f7ff fd3f 	bl	80104f8 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8010a7a:	f005 fa77 	bl	8015f6c <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8010a7e:	4b26      	ldr	r3, [pc, #152]	; (8010b18 <LoRaMacProcess+0xac>)
 8010a80:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8010a84:	f003 0320 	and.w	r3, r3, #32
 8010a88:	b2db      	uxtb	r3, r3
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d025      	beq.n	8010ada <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8010a8e:	2000      	movs	r0, #0
 8010a90:	f7ff fd90 	bl	80105b4 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8010a94:	f7ff ff1e 	bl	80108d4 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8010a98:	f001 fffa 	bl	8012a90 <IsRequestPending>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d006      	beq.n	8010ab0 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8010aa2:	f7ff feef 	bl	8010884 <LoRaMacCheckForBeaconAcquisition>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	461a      	mov	r2, r3
 8010aaa:	79fb      	ldrb	r3, [r7, #7]
 8010aac:	4313      	orrs	r3, r2
 8010aae:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8010ab0:	79fb      	ldrb	r3, [r7, #7]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d103      	bne.n	8010abe <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8010ab6:	f7ff fea9 	bl	801080c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8010aba:	f7ff fe39 	bl	8010730 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8010abe:	f7ff fd89 	bl	80105d4 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8010ac2:	f7ff fde9 	bl	8010698 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010ac6:	2001      	movs	r0, #1
 8010ac8:	f7ff fd74 	bl	80105b4 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8010acc:	4a12      	ldr	r2, [pc, #72]	; (8010b18 <LoRaMacProcess+0xac>)
 8010ace:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ad6:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    LoRaMacHandleIndicationEvents( );
 8010ada:	f7ff fdf1 	bl	80106c0 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8010ade:	4b0e      	ldr	r3, [pc, #56]	; (8010b18 <LoRaMacProcess+0xac>)
 8010ae0:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8010ae4:	2b02      	cmp	r3, #2
 8010ae6:	d101      	bne.n	8010aec <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 8010ae8:	f001 fb7e 	bl	80121e8 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8010aec:	4b0a      	ldr	r3, [pc, #40]	; (8010b18 <LoRaMacProcess+0xac>)
 8010aee:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8010af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010af6:	b2db      	uxtb	r3, r3
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d009      	beq.n	8010b10 <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8010afc:	4a06      	ldr	r2, [pc, #24]	; (8010b18 <LoRaMacProcess+0xac>)
 8010afe:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010b02:	f36f 1386 	bfc	r3, #6, #1
 8010b06:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        LoRaMacHandleNvm( &Nvm );
 8010b0a:	4804      	ldr	r0, [pc, #16]	; (8010b1c <LoRaMacProcess+0xb0>)
 8010b0c:	f7ff ff02 	bl	8010914 <LoRaMacHandleNvm>
    }
}
 8010b10:	bf00      	nop
 8010b12:	3708      	adds	r7, #8
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}
 8010b18:	20000d38 	.word	0x20000d38
 8010b1c:	20001244 	.word	0x20001244

08010b20 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b082      	sub	sp, #8
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8010b28:	4817      	ldr	r0, [pc, #92]	; (8010b88 <OnTxDelayedTimerEvent+0x68>)
 8010b2a:	f00d fe0f 	bl	801e74c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010b2e:	4b17      	ldr	r3, [pc, #92]	; (8010b8c <OnTxDelayedTimerEvent+0x6c>)
 8010b30:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010b34:	f023 0320 	bic.w	r3, r3, #32
 8010b38:	4a14      	ldr	r2, [pc, #80]	; (8010b8c <OnTxDelayedTimerEvent+0x6c>)
 8010b3a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8010b3e:	2001      	movs	r0, #1
 8010b40:	f001 f8e6 	bl	8011d10 <ScheduleTx>
 8010b44:	4603      	mov	r3, r0
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d018      	beq.n	8010b7c <OnTxDelayedTimerEvent+0x5c>
 8010b4a:	2b0b      	cmp	r3, #11
 8010b4c:	d016      	beq.n	8010b7c <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010b4e:	4b10      	ldr	r3, [pc, #64]	; (8010b90 <OnTxDelayedTimerEvent+0x70>)
 8010b50:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010b54:	b2da      	uxtb	r2, r3
 8010b56:	4b0d      	ldr	r3, [pc, #52]	; (8010b8c <OnTxDelayedTimerEvent+0x6c>)
 8010b58:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8010b5c:	4b0b      	ldr	r3, [pc, #44]	; (8010b8c <OnTxDelayedTimerEvent+0x6c>)
 8010b5e:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8010b62:	4b0a      	ldr	r3, [pc, #40]	; (8010b8c <OnTxDelayedTimerEvent+0x6c>)
 8010b64:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8010b68:	4b08      	ldr	r3, [pc, #32]	; (8010b8c <OnTxDelayedTimerEvent+0x6c>)
 8010b6a:	2209      	movs	r2, #9
 8010b6c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8010b70:	2009      	movs	r0, #9
 8010b72:	f005 fe3d 	bl	80167f0 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8010b76:	f001 febf 	bl	80128f8 <StopRetransmission>
            break;
 8010b7a:	e000      	b.n	8010b7e <OnTxDelayedTimerEvent+0x5e>
            break;
 8010b7c:	bf00      	nop
        }
    }
}
 8010b7e:	bf00      	nop
 8010b80:	3708      	adds	r7, #8
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}
 8010b86:	bf00      	nop
 8010b88:	200010a0 	.word	0x200010a0
 8010b8c:	20000d38 	.word	0x20000d38
 8010b90:	20001244 	.word	0x20001244

08010b94 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b082      	sub	sp, #8
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8010b9c:	4b14      	ldr	r3, [pc, #80]	; (8010bf0 <OnRxWindow1TimerEvent+0x5c>)
 8010b9e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8010ba2:	4b13      	ldr	r3, [pc, #76]	; (8010bf0 <OnRxWindow1TimerEvent+0x5c>)
 8010ba4:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8010ba8:	4b12      	ldr	r3, [pc, #72]	; (8010bf4 <OnRxWindow1TimerEvent+0x60>)
 8010baa:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8010bae:	b25a      	sxtb	r2, r3
 8010bb0:	4b0f      	ldr	r3, [pc, #60]	; (8010bf0 <OnRxWindow1TimerEvent+0x5c>)
 8010bb2:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010bb6:	4b0f      	ldr	r3, [pc, #60]	; (8010bf4 <OnRxWindow1TimerEvent+0x60>)
 8010bb8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010bbc:	4b0c      	ldr	r3, [pc, #48]	; (8010bf0 <OnRxWindow1TimerEvent+0x5c>)
 8010bbe:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010bc2:	4b0c      	ldr	r3, [pc, #48]	; (8010bf4 <OnRxWindow1TimerEvent+0x60>)
 8010bc4:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010bc8:	4b09      	ldr	r3, [pc, #36]	; (8010bf0 <OnRxWindow1TimerEvent+0x5c>)
 8010bca:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8010bce:	4b08      	ldr	r3, [pc, #32]	; (8010bf0 <OnRxWindow1TimerEvent+0x5c>)
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8010bd6:	4b06      	ldr	r3, [pc, #24]	; (8010bf0 <OnRxWindow1TimerEvent+0x5c>)
 8010bd8:	2200      	movs	r2, #0
 8010bda:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8010bde:	4906      	ldr	r1, [pc, #24]	; (8010bf8 <OnRxWindow1TimerEvent+0x64>)
 8010be0:	4806      	ldr	r0, [pc, #24]	; (8010bfc <OnRxWindow1TimerEvent+0x68>)
 8010be2:	f001 facd 	bl	8012180 <RxWindowSetup>
}
 8010be6:	bf00      	nop
 8010be8:	3708      	adds	r7, #8
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}
 8010bee:	bf00      	nop
 8010bf0:	20000d38 	.word	0x20000d38
 8010bf4:	20001244 	.word	0x20001244
 8010bf8:	200010f0 	.word	0x200010f0
 8010bfc:	200010b8 	.word	0x200010b8

08010c00 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b082      	sub	sp, #8
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010c08:	4b16      	ldr	r3, [pc, #88]	; (8010c64 <OnRxWindow2TimerEvent+0x64>)
 8010c0a:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d023      	beq.n	8010c5a <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010c12:	4b14      	ldr	r3, [pc, #80]	; (8010c64 <OnRxWindow2TimerEvent+0x64>)
 8010c14:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8010c18:	4b12      	ldr	r3, [pc, #72]	; (8010c64 <OnRxWindow2TimerEvent+0x64>)
 8010c1a:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010c1e:	4b12      	ldr	r3, [pc, #72]	; (8010c68 <OnRxWindow2TimerEvent+0x68>)
 8010c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010c22:	4a10      	ldr	r2, [pc, #64]	; (8010c64 <OnRxWindow2TimerEvent+0x64>)
 8010c24:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010c28:	4b0f      	ldr	r3, [pc, #60]	; (8010c68 <OnRxWindow2TimerEvent+0x68>)
 8010c2a:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010c2e:	4b0d      	ldr	r3, [pc, #52]	; (8010c64 <OnRxWindow2TimerEvent+0x64>)
 8010c30:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010c34:	4b0c      	ldr	r3, [pc, #48]	; (8010c68 <OnRxWindow2TimerEvent+0x68>)
 8010c36:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010c3a:	4b0a      	ldr	r3, [pc, #40]	; (8010c64 <OnRxWindow2TimerEvent+0x64>)
 8010c3c:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010c40:	4b08      	ldr	r3, [pc, #32]	; (8010c64 <OnRxWindow2TimerEvent+0x64>)
 8010c42:	2200      	movs	r2, #0
 8010c44:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010c48:	4b06      	ldr	r3, [pc, #24]	; (8010c64 <OnRxWindow2TimerEvent+0x64>)
 8010c4a:	2201      	movs	r2, #1
 8010c4c:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8010c50:	4906      	ldr	r1, [pc, #24]	; (8010c6c <OnRxWindow2TimerEvent+0x6c>)
 8010c52:	4807      	ldr	r0, [pc, #28]	; (8010c70 <OnRxWindow2TimerEvent+0x70>)
 8010c54:	f001 fa94 	bl	8012180 <RxWindowSetup>
 8010c58:	e000      	b.n	8010c5c <OnRxWindow2TimerEvent+0x5c>
        return;
 8010c5a:	bf00      	nop
}
 8010c5c:	3708      	adds	r7, #8
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}
 8010c62:	bf00      	nop
 8010c64:	20000d38 	.word	0x20000d38
 8010c68:	20001244 	.word	0x20001244
 8010c6c:	20001104 	.word	0x20001104
 8010c70:	200010d0 	.word	0x200010d0

08010c74 <OnAckTimeoutTimerEvent>:
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b082      	sub	sp, #8
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 8010c7c:	4815      	ldr	r0, [pc, #84]	; (8010cd4 <OnAckTimeoutTimerEvent+0x60>)
 8010c7e:	f00d fd65 	bl	801e74c <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8010c82:	4b15      	ldr	r3, [pc, #84]	; (8010cd8 <OnAckTimeoutTimerEvent+0x64>)
 8010c84:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d003      	beq.n	8010c94 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 8010c8c:	4b12      	ldr	r3, [pc, #72]	; (8010cd8 <OnAckTimeoutTimerEvent+0x64>)
 8010c8e:	2201      	movs	r2, #1
 8010c90:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8010c94:	4b11      	ldr	r3, [pc, #68]	; (8010cdc <OnAckTimeoutTimerEvent+0x68>)
 8010c96:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010c9a:	2b02      	cmp	r3, #2
 8010c9c:	d106      	bne.n	8010cac <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8010c9e:	4a0e      	ldr	r2, [pc, #56]	; (8010cd8 <OnAckTimeoutTimerEvent+0x64>)
 8010ca0:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010ca4:	f043 0320 	orr.w	r3, r3, #32
 8010ca8:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010cac:	4b0a      	ldr	r3, [pc, #40]	; (8010cd8 <OnAckTimeoutTimerEvent+0x64>)
 8010cae:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d00a      	beq.n	8010ccc <OnAckTimeoutTimerEvent+0x58>
 8010cb6:	4b08      	ldr	r3, [pc, #32]	; (8010cd8 <OnAckTimeoutTimerEvent+0x64>)
 8010cb8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010cbc:	691b      	ldr	r3, [r3, #16]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d004      	beq.n	8010ccc <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010cc2:	4b05      	ldr	r3, [pc, #20]	; (8010cd8 <OnAckTimeoutTimerEvent+0x64>)
 8010cc4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010cc8:	691b      	ldr	r3, [r3, #16]
 8010cca:	4798      	blx	r3
    }
}
 8010ccc:	bf00      	nop
 8010cce:	3708      	adds	r7, #8
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}
 8010cd4:	20001130 	.word	0x20001130
 8010cd8:	20000d38 	.word	0x20000d38
 8010cdc:	20001244 	.word	0x20001244

08010ce0 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b084      	sub	sp, #16
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	60ba      	str	r2, [r7, #8]
 8010ce8:	607b      	str	r3, [r7, #4]
 8010cea:	4603      	mov	r3, r0
 8010cec:	73fb      	strb	r3, [r7, #15]
 8010cee:	460b      	mov	r3, r1
 8010cf0:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8010cf2:	68bb      	ldr	r3, [r7, #8]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d005      	beq.n	8010d04 <GetFCntDown+0x24>
 8010cf8:	69fb      	ldr	r3, [r7, #28]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d002      	beq.n	8010d04 <GetFCntDown+0x24>
 8010cfe:	6a3b      	ldr	r3, [r7, #32]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d101      	bne.n	8010d08 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010d04:	230a      	movs	r3, #10
 8010d06:	e029      	b.n	8010d5c <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8010d08:	7bfb      	ldrb	r3, [r7, #15]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d016      	beq.n	8010d3c <GetFCntDown+0x5c>
 8010d0e:	2b01      	cmp	r3, #1
 8010d10:	d118      	bne.n	8010d44 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8010d12:	79bb      	ldrb	r3, [r7, #6]
 8010d14:	2b01      	cmp	r3, #1
 8010d16:	d10d      	bne.n	8010d34 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8010d18:	7bbb      	ldrb	r3, [r7, #14]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d002      	beq.n	8010d24 <GetFCntDown+0x44>
 8010d1e:	7bbb      	ldrb	r3, [r7, #14]
 8010d20:	2b03      	cmp	r3, #3
 8010d22:	d103      	bne.n	8010d2c <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8010d24:	69fb      	ldr	r3, [r7, #28]
 8010d26:	2202      	movs	r2, #2
 8010d28:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8010d2a:	e00d      	b.n	8010d48 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8010d2c:	69fb      	ldr	r3, [r7, #28]
 8010d2e:	2201      	movs	r2, #1
 8010d30:	701a      	strb	r2, [r3, #0]
            break;
 8010d32:	e009      	b.n	8010d48 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8010d34:	69fb      	ldr	r3, [r7, #28]
 8010d36:	2203      	movs	r2, #3
 8010d38:	701a      	strb	r2, [r3, #0]
            break;
 8010d3a:	e005      	b.n	8010d48 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8010d3c:	69fb      	ldr	r3, [r7, #28]
 8010d3e:	2204      	movs	r2, #4
 8010d40:	701a      	strb	r2, [r3, #0]
            break;
 8010d42:	e001      	b.n	8010d48 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8010d44:	2305      	movs	r3, #5
 8010d46:	e009      	b.n	8010d5c <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8010d48:	69fb      	ldr	r3, [r7, #28]
 8010d4a:	7818      	ldrb	r0, [r3, #0]
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	89db      	ldrh	r3, [r3, #14]
 8010d50:	461a      	mov	r2, r3
 8010d52:	8b39      	ldrh	r1, [r7, #24]
 8010d54:	6a3b      	ldr	r3, [r7, #32]
 8010d56:	f006 f975 	bl	8017044 <LoRaMacCryptoGetFCntDown>
 8010d5a:	4603      	mov	r3, r0
}
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	3710      	adds	r7, #16
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}

08010d64 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8010d64:	b5b0      	push	{r4, r5, r7, lr}
 8010d66:	b084      	sub	sp, #16
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010d6e:	2303      	movs	r3, #3
 8010d70:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8010d72:	4b61      	ldr	r3, [pc, #388]	; (8010ef8 <SwitchClass+0x194>)
 8010d74:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010d78:	2b02      	cmp	r3, #2
 8010d7a:	f000 80a5 	beq.w	8010ec8 <SwitchClass+0x164>
 8010d7e:	2b02      	cmp	r3, #2
 8010d80:	f300 80b4 	bgt.w	8010eec <SwitchClass+0x188>
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d003      	beq.n	8010d90 <SwitchClass+0x2c>
 8010d88:	2b01      	cmp	r3, #1
 8010d8a:	f000 808f 	beq.w	8010eac <SwitchClass+0x148>
 8010d8e:	e0ad      	b.n	8010eec <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8010d90:	79fb      	ldrb	r3, [r7, #7]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d107      	bne.n	8010da6 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8010d96:	4b58      	ldr	r3, [pc, #352]	; (8010ef8 <SwitchClass+0x194>)
 8010d98:	4a57      	ldr	r2, [pc, #348]	; (8010ef8 <SwitchClass+0x194>)
 8010d9a:	336c      	adds	r3, #108	; 0x6c
 8010d9c:	3264      	adds	r2, #100	; 0x64
 8010d9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010da2:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 8010da6:	79fb      	ldrb	r3, [r7, #7]
 8010da8:	2b01      	cmp	r3, #1
 8010daa:	d10c      	bne.n	8010dc6 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8010dac:	79fb      	ldrb	r3, [r7, #7]
 8010dae:	4618      	mov	r0, r3
 8010db0:	f004 fe58 	bl	8015a64 <LoRaMacClassBSwitchClass>
 8010db4:	4603      	mov	r3, r0
 8010db6:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8010db8:	7bfb      	ldrb	r3, [r7, #15]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d103      	bne.n	8010dc6 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8010dbe:	4a4e      	ldr	r2, [pc, #312]	; (8010ef8 <SwitchClass+0x194>)
 8010dc0:	79fb      	ldrb	r3, [r7, #7]
 8010dc2:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
                }
            }

            if( deviceClass == CLASS_C )
 8010dc6:	79fb      	ldrb	r3, [r7, #7]
 8010dc8:	2b02      	cmp	r3, #2
 8010dca:	f040 808a 	bne.w	8010ee2 <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010dce:	4a4a      	ldr	r2, [pc, #296]	; (8010ef8 <SwitchClass+0x194>)
 8010dd0:	79fb      	ldrb	r3, [r7, #7]
 8010dd2:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010dd6:	4a49      	ldr	r2, [pc, #292]	; (8010efc <SwitchClass+0x198>)
 8010dd8:	4b48      	ldr	r3, [pc, #288]	; (8010efc <SwitchClass+0x198>)
 8010dda:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8010dde:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8010de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010de6:	682b      	ldr	r3, [r5, #0]
 8010de8:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010dea:	4b44      	ldr	r3, [pc, #272]	; (8010efc <SwitchClass+0x198>)
 8010dec:	2202      	movs	r2, #2
 8010dee:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010df2:	2300      	movs	r3, #0
 8010df4:	73bb      	strb	r3, [r7, #14]
 8010df6:	e049      	b.n	8010e8c <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8010df8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010dfc:	4a3e      	ldr	r2, [pc, #248]	; (8010ef8 <SwitchClass+0x194>)
 8010dfe:	212c      	movs	r1, #44	; 0x2c
 8010e00:	fb01 f303 	mul.w	r3, r1, r3
 8010e04:	4413      	add	r3, r2
 8010e06:	33da      	adds	r3, #218	; 0xda
 8010e08:	781b      	ldrb	r3, [r3, #0]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d038      	beq.n	8010e80 <SwitchClass+0x11c>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8010e0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010e12:	4a39      	ldr	r2, [pc, #228]	; (8010ef8 <SwitchClass+0x194>)
 8010e14:	212c      	movs	r1, #44	; 0x2c
 8010e16:	fb01 f303 	mul.w	r3, r1, r3
 8010e1a:	4413      	add	r3, r2
 8010e1c:	33f0      	adds	r3, #240	; 0xf0
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	4a35      	ldr	r2, [pc, #212]	; (8010ef8 <SwitchClass+0x194>)
 8010e22:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8010e24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010e28:	4a33      	ldr	r2, [pc, #204]	; (8010ef8 <SwitchClass+0x194>)
 8010e2a:	212c      	movs	r1, #44	; 0x2c
 8010e2c:	fb01 f303 	mul.w	r3, r1, r3
 8010e30:	4413      	add	r3, r2
 8010e32:	33f4      	adds	r3, #244	; 0xf4
 8010e34:	f993 3000 	ldrsb.w	r3, [r3]
 8010e38:	b2da      	uxtb	r2, r3
 8010e3a:	4b2f      	ldr	r3, [pc, #188]	; (8010ef8 <SwitchClass+0x194>)
 8010e3c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010e40:	4b2e      	ldr	r3, [pc, #184]	; (8010efc <SwitchClass+0x198>)
 8010e42:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8010e46:	4b2d      	ldr	r3, [pc, #180]	; (8010efc <SwitchClass+0x198>)
 8010e48:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010e4c:	4b2a      	ldr	r3, [pc, #168]	; (8010ef8 <SwitchClass+0x194>)
 8010e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e50:	4a2a      	ldr	r2, [pc, #168]	; (8010efc <SwitchClass+0x198>)
 8010e52:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010e56:	4b28      	ldr	r3, [pc, #160]	; (8010ef8 <SwitchClass+0x194>)
 8010e58:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010e5c:	4b27      	ldr	r3, [pc, #156]	; (8010efc <SwitchClass+0x198>)
 8010e5e:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010e62:	4b25      	ldr	r3, [pc, #148]	; (8010ef8 <SwitchClass+0x194>)
 8010e64:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010e68:	4b24      	ldr	r3, [pc, #144]	; (8010efc <SwitchClass+0x198>)
 8010e6a:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010e6e:	4b23      	ldr	r3, [pc, #140]	; (8010efc <SwitchClass+0x198>)
 8010e70:	2203      	movs	r2, #3
 8010e72:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010e76:	4b21      	ldr	r3, [pc, #132]	; (8010efc <SwitchClass+0x198>)
 8010e78:	2201      	movs	r2, #1
 8010e7a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 8010e7e:	e009      	b.n	8010e94 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010e80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010e84:	b2db      	uxtb	r3, r3
 8010e86:	3301      	adds	r3, #1
 8010e88:	b2db      	uxtb	r3, r3
 8010e8a:	73bb      	strb	r3, [r7, #14]
 8010e8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	ddb1      	ble.n	8010df8 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8010e94:	4b19      	ldr	r3, [pc, #100]	; (8010efc <SwitchClass+0x198>)
 8010e96:	2200      	movs	r2, #0
 8010e98:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8010e9c:	4b18      	ldr	r3, [pc, #96]	; (8010f00 <SwitchClass+0x19c>)
 8010e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ea0:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8010ea2:	f001 f9a1 	bl	80121e8 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8010eaa:	e01a      	b.n	8010ee2 <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8010eac:	79fb      	ldrb	r3, [r7, #7]
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f004 fdd8 	bl	8015a64 <LoRaMacClassBSwitchClass>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8010eb8:	7bfb      	ldrb	r3, [r7, #15]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d113      	bne.n	8010ee6 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010ebe:	4a0e      	ldr	r2, [pc, #56]	; (8010ef8 <SwitchClass+0x194>)
 8010ec0:	79fb      	ldrb	r3, [r7, #7]
 8010ec2:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
            }
            break;
 8010ec6:	e00e      	b.n	8010ee6 <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8010ec8:	79fb      	ldrb	r3, [r7, #7]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d10d      	bne.n	8010eea <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010ece:	4a0a      	ldr	r2, [pc, #40]	; (8010ef8 <SwitchClass+0x194>)
 8010ed0:	79fb      	ldrb	r3, [r7, #7]
 8010ed2:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8010ed6:	4b0a      	ldr	r3, [pc, #40]	; (8010f00 <SwitchClass+0x19c>)
 8010ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010eda:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8010edc:	2300      	movs	r3, #0
 8010ede:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8010ee0:	e003      	b.n	8010eea <SwitchClass+0x186>
            break;
 8010ee2:	bf00      	nop
 8010ee4:	e002      	b.n	8010eec <SwitchClass+0x188>
            break;
 8010ee6:	bf00      	nop
 8010ee8:	e000      	b.n	8010eec <SwitchClass+0x188>
            break;
 8010eea:	bf00      	nop
        }
    }

    return status;
 8010eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8010eee:	4618      	mov	r0, r3
 8010ef0:	3710      	adds	r7, #16
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bdb0      	pop	{r4, r5, r7, pc}
 8010ef6:	bf00      	nop
 8010ef8:	20001244 	.word	0x20001244
 8010efc:	20000d38 	.word	0x20000d38
 8010f00:	0801fbe4 	.word	0x0801fbe4

08010f04 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b086      	sub	sp, #24
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010f0e:	4b10      	ldr	r3, [pc, #64]	; (8010f50 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010f10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010f14:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8010f16:	79fb      	ldrb	r3, [r7, #7]
 8010f18:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8010f1a:	230d      	movs	r3, #13
 8010f1c:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8010f1e:	4b0c      	ldr	r3, [pc, #48]	; (8010f50 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010f20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d001      	beq.n	8010f2c <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010f28:	230e      	movs	r3, #14
 8010f2a:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f2c:	4b08      	ldr	r3, [pc, #32]	; (8010f50 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010f2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f32:	f107 0210 	add.w	r2, r7, #16
 8010f36:	4611      	mov	r1, r2
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f006 ff11 	bl	8017d60 <RegionGetPhyParam>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	b2db      	uxtb	r3, r3
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	3718      	adds	r7, #24
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}
 8010f4e:	bf00      	nop
 8010f50:	20001244 	.word	0x20001244

08010f54 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b084      	sub	sp, #16
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	71fb      	strb	r3, [r7, #7]
 8010f5e:	460b      	mov	r3, r1
 8010f60:	71bb      	strb	r3, [r7, #6]
 8010f62:	4613      	mov	r3, r2
 8010f64:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8010f66:	2300      	movs	r3, #0
 8010f68:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010f6e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010f72:	4618      	mov	r0, r3
 8010f74:	f7ff ffc6 	bl	8010f04 <GetMaxAppPayloadWithoutFOptsLength>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8010f7c:	79fb      	ldrb	r3, [r7, #7]
 8010f7e:	b29a      	uxth	r2, r3
 8010f80:	797b      	ldrb	r3, [r7, #5]
 8010f82:	b29b      	uxth	r3, r3
 8010f84:	4413      	add	r3, r2
 8010f86:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8010f88:	89ba      	ldrh	r2, [r7, #12]
 8010f8a:	89fb      	ldrh	r3, [r7, #14]
 8010f8c:	429a      	cmp	r2, r3
 8010f8e:	d804      	bhi.n	8010f9a <ValidatePayloadLength+0x46>
 8010f90:	89bb      	ldrh	r3, [r7, #12]
 8010f92:	2bff      	cmp	r3, #255	; 0xff
 8010f94:	d801      	bhi.n	8010f9a <ValidatePayloadLength+0x46>
    {
        return true;
 8010f96:	2301      	movs	r3, #1
 8010f98:	e000      	b.n	8010f9c <ValidatePayloadLength+0x48>
    }
    return false;
 8010f9a:	2300      	movs	r3, #0
}
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	3710      	adds	r7, #16
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}

08010fa4 <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8010fa4:	b590      	push	{r4, r7, lr}
 8010fa6:	b0a5      	sub	sp, #148	; 0x94
 8010fa8:	af02      	add	r7, sp, #8
 8010faa:	6078      	str	r0, [r7, #4]
 8010fac:	4608      	mov	r0, r1
 8010fae:	4611      	mov	r1, r2
 8010fb0:	461a      	mov	r2, r3
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	70fb      	strb	r3, [r7, #3]
 8010fb6:	460b      	mov	r3, r1
 8010fb8:	70bb      	strb	r3, [r7, #2]
 8010fba:	4613      	mov	r3, r2
 8010fbc:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8010fca:	2300      	movs	r3, #0
 8010fcc:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8010fd0:	f000 bc6d 	b.w	80118ae <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8010fd4:	78fb      	ldrb	r3, [r7, #3]
 8010fd6:	687a      	ldr	r2, [r7, #4]
 8010fd8:	4413      	add	r3, r2
 8010fda:	781b      	ldrb	r3, [r3, #0]
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f005 fa63 	bl	80164a8 <LoRaMacCommandsGetCmdSize>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	461a      	mov	r2, r3
 8010fe6:	78fb      	ldrb	r3, [r7, #3]
 8010fe8:	441a      	add	r2, r3
 8010fea:	78bb      	ldrb	r3, [r7, #2]
 8010fec:	429a      	cmp	r2, r3
 8010fee:	f300 8464 	bgt.w	80118ba <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8010ff2:	78fb      	ldrb	r3, [r7, #3]
 8010ff4:	1c5a      	adds	r2, r3, #1
 8010ff6:	70fa      	strb	r2, [r7, #3]
 8010ff8:	461a      	mov	r2, r3
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	4413      	add	r3, r2
 8010ffe:	781b      	ldrb	r3, [r3, #0]
 8011000:	3b02      	subs	r3, #2
 8011002:	2b11      	cmp	r3, #17
 8011004:	f200 845b 	bhi.w	80118be <ProcessMacCommands+0x91a>
 8011008:	a201      	add	r2, pc, #4	; (adr r2, 8011010 <ProcessMacCommands+0x6c>)
 801100a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801100e:	bf00      	nop
 8011010:	08011059 	.word	0x08011059
 8011014:	0801109b 	.word	0x0801109b
 8011018:	080111b7 	.word	0x080111b7
 801101c:	080111f5 	.word	0x080111f5
 8011020:	080112e1 	.word	0x080112e1
 8011024:	0801133d 	.word	0x0801133d
 8011028:	080113f9 	.word	0x080113f9
 801102c:	0801144f 	.word	0x0801144f
 8011030:	08011533 	.word	0x08011533
 8011034:	080118bf 	.word	0x080118bf
 8011038:	080118bf 	.word	0x080118bf
 801103c:	080115d9 	.word	0x080115d9
 8011040:	080118bf 	.word	0x080118bf
 8011044:	080118bf 	.word	0x080118bf
 8011048:	080116ef 	.word	0x080116ef
 801104c:	08011723 	.word	0x08011723
 8011050:	080117b3 	.word	0x080117b3
 8011054:	08011829 	.word	0x08011829
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8011058:	2004      	movs	r0, #4
 801105a:	f005 fbfd 	bl	8016858 <LoRaMacConfirmQueueIsCmdActive>
 801105e:	4603      	mov	r3, r0
 8011060:	2b00      	cmp	r3, #0
 8011062:	f000 8424 	beq.w	80118ae <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8011066:	2104      	movs	r1, #4
 8011068:	2000      	movs	r0, #0
 801106a:	f005 fb69 	bl	8016740 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 801106e:	78fb      	ldrb	r3, [r7, #3]
 8011070:	1c5a      	adds	r2, r3, #1
 8011072:	70fa      	strb	r2, [r7, #3]
 8011074:	461a      	mov	r2, r3
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	4413      	add	r3, r2
 801107a:	781a      	ldrb	r2, [r3, #0]
 801107c:	4bac      	ldr	r3, [pc, #688]	; (8011330 <ProcessMacCommands+0x38c>)
 801107e:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8011082:	78fb      	ldrb	r3, [r7, #3]
 8011084:	1c5a      	adds	r2, r3, #1
 8011086:	70fa      	strb	r2, [r7, #3]
 8011088:	461a      	mov	r2, r3
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	4413      	add	r3, r2
 801108e:	781a      	ldrb	r2, [r3, #0]
 8011090:	4ba7      	ldr	r3, [pc, #668]	; (8011330 <ProcessMacCommands+0x38c>)
 8011092:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 8011096:	f000 bc0a 	b.w	80118ae <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 801109a:	2300      	movs	r3, #0
 801109c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 80110a0:	2300      	movs	r3, #0
 80110a2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 80110a6:	2300      	movs	r3, #0
 80110a8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 80110ac:	2300      	movs	r3, #0
 80110ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 80110b2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80110b6:	f083 0301 	eor.w	r3, r3, #1
 80110ba:	b2db      	uxtb	r3, r3
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d078      	beq.n	80111b2 <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 80110c0:	2301      	movs	r3, #1
 80110c2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 80110c6:	78fb      	ldrb	r3, [r7, #3]
 80110c8:	3b01      	subs	r3, #1
 80110ca:	687a      	ldr	r2, [r7, #4]
 80110cc:	4413      	add	r3, r2
 80110ce:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80110d0:	78ba      	ldrb	r2, [r7, #2]
 80110d2:	78fb      	ldrb	r3, [r7, #3]
 80110d4:	1ad3      	subs	r3, r2, r3
 80110d6:	b2db      	uxtb	r3, r3
 80110d8:	3301      	adds	r3, #1
 80110da:	b2db      	uxtb	r3, r3
 80110dc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80110e0:	4b94      	ldr	r3, [pc, #592]	; (8011334 <ProcessMacCommands+0x390>)
 80110e2:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80110e6:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80110ea:	4b92      	ldr	r3, [pc, #584]	; (8011334 <ProcessMacCommands+0x390>)
 80110ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80110f0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80110f4:	4b8f      	ldr	r3, [pc, #572]	; (8011334 <ProcessMacCommands+0x390>)
 80110f6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80110fa:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80110fe:	4b8d      	ldr	r3, [pc, #564]	; (8011334 <ProcessMacCommands+0x390>)
 8011100:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8011104:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011108:	4b8a      	ldr	r3, [pc, #552]	; (8011334 <ProcessMacCommands+0x390>)
 801110a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801110e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8011112:	4b88      	ldr	r3, [pc, #544]	; (8011334 <ProcessMacCommands+0x390>)
 8011114:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8011118:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 801111a:	4b86      	ldr	r3, [pc, #536]	; (8011334 <ProcessMacCommands+0x390>)
 801111c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011120:	f107 0456 	add.w	r4, r7, #86	; 0x56
 8011124:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8011128:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801112c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011130:	9301      	str	r3, [sp, #4]
 8011132:	f107 0355 	add.w	r3, r7, #85	; 0x55
 8011136:	9300      	str	r3, [sp, #0]
 8011138:	4623      	mov	r3, r4
 801113a:	f006 fece 	bl	8017eda <RegionLinkAdrReq>
 801113e:	4603      	mov	r3, r0
 8011140:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 8011144:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011148:	f003 0307 	and.w	r3, r3, #7
 801114c:	2b07      	cmp	r3, #7
 801114e:	d10e      	bne.n	801116e <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8011150:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8011154:	4b77      	ldr	r3, [pc, #476]	; (8011334 <ProcessMacCommands+0x390>)
 8011156:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 801115a:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 801115e:	4b75      	ldr	r3, [pc, #468]	; (8011334 <ProcessMacCommands+0x390>)
 8011160:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8011164:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8011168:	4b72      	ldr	r3, [pc, #456]	; (8011334 <ProcessMacCommands+0x390>)
 801116a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 801116e:	2300      	movs	r3, #0
 8011170:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8011174:	e00b      	b.n	801118e <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8011176:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 801117a:	2201      	movs	r2, #1
 801117c:	4619      	mov	r1, r3
 801117e:	2003      	movs	r0, #3
 8011180:	f005 f842 	bl	8016208 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8011184:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8011188:	3301      	adds	r3, #1
 801118a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 801118e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8011192:	4a69      	ldr	r2, [pc, #420]	; (8011338 <ProcessMacCommands+0x394>)
 8011194:	fba2 2303 	umull	r2, r3, r2, r3
 8011198:	089b      	lsrs	r3, r3, #2
 801119a:	b2db      	uxtb	r3, r3
 801119c:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80111a0:	429a      	cmp	r2, r3
 80111a2:	d3e8      	bcc.n	8011176 <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 80111a4:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80111a8:	78fb      	ldrb	r3, [r7, #3]
 80111aa:	4413      	add	r3, r2
 80111ac:	b2db      	uxtb	r3, r3
 80111ae:	3b01      	subs	r3, #1
 80111b0:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 80111b2:	bf00      	nop
 80111b4:	e37b      	b.n	80118ae <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80111b6:	78fb      	ldrb	r3, [r7, #3]
 80111b8:	1c5a      	adds	r2, r3, #1
 80111ba:	70fa      	strb	r2, [r7, #3]
 80111bc:	461a      	mov	r2, r3
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	4413      	add	r3, r2
 80111c2:	781b      	ldrb	r3, [r3, #0]
 80111c4:	f003 030f 	and.w	r3, r3, #15
 80111c8:	b2da      	uxtb	r2, r3
 80111ca:	4b5a      	ldr	r3, [pc, #360]	; (8011334 <ProcessMacCommands+0x390>)
 80111cc:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80111d0:	4b58      	ldr	r3, [pc, #352]	; (8011334 <ProcessMacCommands+0x390>)
 80111d2:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80111d6:	461a      	mov	r2, r3
 80111d8:	2301      	movs	r3, #1
 80111da:	4093      	lsls	r3, r2
 80111dc:	b29a      	uxth	r2, r3
 80111de:	4b55      	ldr	r3, [pc, #340]	; (8011334 <ProcessMacCommands+0x390>)
 80111e0:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80111e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80111e8:	2200      	movs	r2, #0
 80111ea:	4619      	mov	r1, r3
 80111ec:	2004      	movs	r0, #4
 80111ee:	f005 f80b 	bl	8016208 <LoRaMacCommandsAddCmd>
                break;
 80111f2:	e35c      	b.n	80118ae <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 80111f4:	2307      	movs	r3, #7
 80111f6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80111fa:	78fb      	ldrb	r3, [r7, #3]
 80111fc:	687a      	ldr	r2, [r7, #4]
 80111fe:	4413      	add	r3, r2
 8011200:	781b      	ldrb	r3, [r3, #0]
 8011202:	091b      	lsrs	r3, r3, #4
 8011204:	b2db      	uxtb	r3, r3
 8011206:	b25b      	sxtb	r3, r3
 8011208:	f003 0307 	and.w	r3, r3, #7
 801120c:	b25b      	sxtb	r3, r3
 801120e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8011212:	78fb      	ldrb	r3, [r7, #3]
 8011214:	687a      	ldr	r2, [r7, #4]
 8011216:	4413      	add	r3, r2
 8011218:	781b      	ldrb	r3, [r3, #0]
 801121a:	b25b      	sxtb	r3, r3
 801121c:	f003 030f 	and.w	r3, r3, #15
 8011220:	b25b      	sxtb	r3, r3
 8011222:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 8011226:	78fb      	ldrb	r3, [r7, #3]
 8011228:	3301      	adds	r3, #1
 801122a:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 801122c:	78fb      	ldrb	r3, [r7, #3]
 801122e:	1c5a      	adds	r2, r3, #1
 8011230:	70fa      	strb	r2, [r7, #3]
 8011232:	461a      	mov	r2, r3
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	4413      	add	r3, r2
 8011238:	781b      	ldrb	r3, [r3, #0]
 801123a:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801123c:	78fb      	ldrb	r3, [r7, #3]
 801123e:	1c5a      	adds	r2, r3, #1
 8011240:	70fa      	strb	r2, [r7, #3]
 8011242:	461a      	mov	r2, r3
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	4413      	add	r3, r2
 8011248:	781b      	ldrb	r3, [r3, #0]
 801124a:	021a      	lsls	r2, r3, #8
 801124c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801124e:	4313      	orrs	r3, r2
 8011250:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011252:	78fb      	ldrb	r3, [r7, #3]
 8011254:	1c5a      	adds	r2, r3, #1
 8011256:	70fa      	strb	r2, [r7, #3]
 8011258:	461a      	mov	r2, r3
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	4413      	add	r3, r2
 801125e:	781b      	ldrb	r3, [r3, #0]
 8011260:	041a      	lsls	r2, r3, #16
 8011262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011264:	4313      	orrs	r3, r2
 8011266:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8011268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801126a:	2264      	movs	r2, #100	; 0x64
 801126c:	fb02 f303 	mul.w	r3, r2, r3
 8011270:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8011272:	4b30      	ldr	r3, [pc, #192]	; (8011334 <ProcessMacCommands+0x390>)
 8011274:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011278:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801127c:	4611      	mov	r1, r2
 801127e:	4618      	mov	r0, r3
 8011280:	f006 fe45 	bl	8017f0e <RegionRxParamSetupReq>
 8011284:	4603      	mov	r3, r0
 8011286:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 801128a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801128e:	f003 0307 	and.w	r3, r3, #7
 8011292:	2b07      	cmp	r3, #7
 8011294:	d117      	bne.n	80112c6 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8011296:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 801129a:	b2da      	uxtb	r2, r3
 801129c:	4b25      	ldr	r3, [pc, #148]	; (8011334 <ProcessMacCommands+0x390>)
 801129e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80112a2:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80112a6:	b2da      	uxtb	r2, r3
 80112a8:	4b22      	ldr	r3, [pc, #136]	; (8011334 <ProcessMacCommands+0x390>)
 80112aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80112ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112b0:	4a20      	ldr	r2, [pc, #128]	; (8011334 <ProcessMacCommands+0x390>)
 80112b2:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80112b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112b6:	4a1f      	ldr	r2, [pc, #124]	; (8011334 <ProcessMacCommands+0x390>)
 80112b8:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80112ba:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80112be:	b2da      	uxtb	r2, r3
 80112c0:	4b1c      	ldr	r3, [pc, #112]	; (8011334 <ProcessMacCommands+0x390>)
 80112c2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 80112c6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80112ca:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80112ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80112d2:	2201      	movs	r2, #1
 80112d4:	4619      	mov	r1, r3
 80112d6:	2005      	movs	r0, #5
 80112d8:	f004 ff96 	bl	8016208 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 80112dc:	bf00      	nop
 80112de:	e2e6      	b.n	80118ae <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80112e0:	23ff      	movs	r3, #255	; 0xff
 80112e2:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80112e6:	4b12      	ldr	r3, [pc, #72]	; (8011330 <ProcessMacCommands+0x38c>)
 80112e8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d00d      	beq.n	801130c <ProcessMacCommands+0x368>
 80112f0:	4b0f      	ldr	r3, [pc, #60]	; (8011330 <ProcessMacCommands+0x38c>)
 80112f2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d007      	beq.n	801130c <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80112fc:	4b0c      	ldr	r3, [pc, #48]	; (8011330 <ProcessMacCommands+0x38c>)
 80112fe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	4798      	blx	r3
 8011306:	4603      	mov	r3, r0
 8011308:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 801130c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8011310:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8011314:	787b      	ldrb	r3, [r7, #1]
 8011316:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801131a:	b2db      	uxtb	r3, r3
 801131c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8011320:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011324:	2202      	movs	r2, #2
 8011326:	4619      	mov	r1, r3
 8011328:	2006      	movs	r0, #6
 801132a:	f004 ff6d 	bl	8016208 <LoRaMacCommandsAddCmd>
                break;
 801132e:	e2be      	b.n	80118ae <ProcessMacCommands+0x90a>
 8011330:	20000d38 	.word	0x20000d38
 8011334:	20001244 	.word	0x20001244
 8011338:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 801133c:	2303      	movs	r3, #3
 801133e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8011342:	78fb      	ldrb	r3, [r7, #3]
 8011344:	1c5a      	adds	r2, r3, #1
 8011346:	70fa      	strb	r2, [r7, #3]
 8011348:	461a      	mov	r2, r3
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	4413      	add	r3, r2
 801134e:	781b      	ldrb	r3, [r3, #0]
 8011350:	b25b      	sxtb	r3, r3
 8011352:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 8011356:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801135a:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 801135c:	78fb      	ldrb	r3, [r7, #3]
 801135e:	1c5a      	adds	r2, r3, #1
 8011360:	70fa      	strb	r2, [r7, #3]
 8011362:	461a      	mov	r2, r3
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	4413      	add	r3, r2
 8011368:	781b      	ldrb	r3, [r3, #0]
 801136a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801136c:	78fb      	ldrb	r3, [r7, #3]
 801136e:	1c5a      	adds	r2, r3, #1
 8011370:	70fa      	strb	r2, [r7, #3]
 8011372:	461a      	mov	r2, r3
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	4413      	add	r3, r2
 8011378:	781b      	ldrb	r3, [r3, #0]
 801137a:	021a      	lsls	r2, r3, #8
 801137c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801137e:	4313      	orrs	r3, r2
 8011380:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011382:	78fb      	ldrb	r3, [r7, #3]
 8011384:	1c5a      	adds	r2, r3, #1
 8011386:	70fa      	strb	r2, [r7, #3]
 8011388:	461a      	mov	r2, r3
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	4413      	add	r3, r2
 801138e:	781b      	ldrb	r3, [r3, #0]
 8011390:	041a      	lsls	r2, r3, #16
 8011392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011394:	4313      	orrs	r3, r2
 8011396:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8011398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801139a:	2264      	movs	r2, #100	; 0x64
 801139c:	fb02 f303 	mul.w	r3, r2, r3
 80113a0:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 80113a2:	2300      	movs	r3, #0
 80113a4:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80113a6:	78fb      	ldrb	r3, [r7, #3]
 80113a8:	1c5a      	adds	r2, r3, #1
 80113aa:	70fa      	strb	r2, [r7, #3]
 80113ac:	461a      	mov	r2, r3
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	4413      	add	r3, r2
 80113b2:	781b      	ldrb	r3, [r3, #0]
 80113b4:	b25b      	sxtb	r3, r3
 80113b6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80113ba:	4b85      	ldr	r3, [pc, #532]	; (80115d0 <ProcessMacCommands+0x62c>)
 80113bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80113c0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80113c4:	4611      	mov	r1, r2
 80113c6:	4618      	mov	r0, r3
 80113c8:	f006 fdb4 	bl	8017f34 <RegionNewChannelReq>
 80113cc:	4603      	mov	r3, r0
 80113ce:	b2db      	uxtb	r3, r3
 80113d0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80113d4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80113d8:	b25b      	sxtb	r3, r3
 80113da:	2b00      	cmp	r3, #0
 80113dc:	db0a      	blt.n	80113f4 <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 80113de:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80113e2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80113e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80113ea:	2201      	movs	r2, #1
 80113ec:	4619      	mov	r1, r3
 80113ee:	2007      	movs	r0, #7
 80113f0:	f004 ff0a 	bl	8016208 <LoRaMacCommandsAddCmd>
                }
                break;
 80113f4:	bf00      	nop
 80113f6:	e25a      	b.n	80118ae <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 80113f8:	78fb      	ldrb	r3, [r7, #3]
 80113fa:	1c5a      	adds	r2, r3, #1
 80113fc:	70fa      	strb	r2, [r7, #3]
 80113fe:	461a      	mov	r2, r3
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	4413      	add	r3, r2
 8011404:	781b      	ldrb	r3, [r3, #0]
 8011406:	f003 030f 	and.w	r3, r3, #15
 801140a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 801140e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8011412:	2b00      	cmp	r3, #0
 8011414:	d104      	bne.n	8011420 <ProcessMacCommands+0x47c>
                {
                    delay++;
 8011416:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801141a:	3301      	adds	r3, #1
 801141c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8011420:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8011424:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011428:	fb02 f303 	mul.w	r3, r2, r3
 801142c:	461a      	mov	r2, r3
 801142e:	4b68      	ldr	r3, [pc, #416]	; (80115d0 <ProcessMacCommands+0x62c>)
 8011430:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8011432:	4b67      	ldr	r3, [pc, #412]	; (80115d0 <ProcessMacCommands+0x62c>)
 8011434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011436:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801143a:	4a65      	ldr	r2, [pc, #404]	; (80115d0 <ProcessMacCommands+0x62c>)
 801143c:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 801143e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011442:	2200      	movs	r2, #0
 8011444:	4619      	mov	r1, r3
 8011446:	2008      	movs	r0, #8
 8011448:	f004 fede 	bl	8016208 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 801144c:	e22f      	b.n	80118ae <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 801144e:	78fb      	ldrb	r3, [r7, #3]
 8011450:	1c5a      	adds	r2, r3, #1
 8011452:	70fa      	strb	r2, [r7, #3]
 8011454:	461a      	mov	r2, r3
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	4413      	add	r3, r2
 801145a:	781b      	ldrb	r3, [r3, #0]
 801145c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8011460:	2300      	movs	r3, #0
 8011462:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8011466:	2300      	movs	r3, #0
 8011468:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 801146c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8011470:	f003 0320 	and.w	r3, r3, #32
 8011474:	2b00      	cmp	r3, #0
 8011476:	d002      	beq.n	801147e <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8011478:	2301      	movs	r3, #1
 801147a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 801147e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8011482:	f003 0310 	and.w	r3, r3, #16
 8011486:	2b00      	cmp	r3, #0
 8011488:	d002      	beq.n	8011490 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 801148a:	2301      	movs	r3, #1
 801148c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8011490:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8011494:	f003 030f 	and.w	r3, r3, #15
 8011498:	b2db      	uxtb	r3, r3
 801149a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 801149e:	4b4c      	ldr	r3, [pc, #304]	; (80115d0 <ProcessMacCommands+0x62c>)
 80114a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80114a4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80114a8:	4611      	mov	r1, r2
 80114aa:	4618      	mov	r0, r3
 80114ac:	f006 fd55 	bl	8017f5a <RegionTxParamSetupReq>
 80114b0:	4603      	mov	r3, r0
 80114b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114b6:	d03a      	beq.n	801152e <ProcessMacCommands+0x58a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80114b8:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80114bc:	4b44      	ldr	r3, [pc, #272]	; (80115d0 <ProcessMacCommands+0x62c>)
 80114be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80114c2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80114c6:	4b42      	ldr	r3, [pc, #264]	; (80115d0 <ProcessMacCommands+0x62c>)
 80114c8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80114cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80114d0:	461a      	mov	r2, r3
 80114d2:	4b40      	ldr	r3, [pc, #256]	; (80115d4 <ProcessMacCommands+0x630>)
 80114d4:	5c9b      	ldrb	r3, [r3, r2]
 80114d6:	4618      	mov	r0, r3
 80114d8:	f7ef fbda 	bl	8000c90 <__aeabi_ui2f>
 80114dc:	4603      	mov	r3, r0
 80114de:	4a3c      	ldr	r2, [pc, #240]	; (80115d0 <ProcessMacCommands+0x62c>)
 80114e0:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80114e2:	2302      	movs	r3, #2
 80114e4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80114e8:	4b39      	ldr	r3, [pc, #228]	; (80115d0 <ProcessMacCommands+0x62c>)
 80114ea:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80114ee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80114f2:	4b37      	ldr	r3, [pc, #220]	; (80115d0 <ProcessMacCommands+0x62c>)
 80114f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80114f8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80114fc:	4611      	mov	r1, r2
 80114fe:	4618      	mov	r0, r3
 8011500:	f006 fc2e 	bl	8017d60 <RegionGetPhyParam>
 8011504:	4603      	mov	r3, r0
 8011506:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8011508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801150a:	b25a      	sxtb	r2, r3
 801150c:	4b30      	ldr	r3, [pc, #192]	; (80115d0 <ProcessMacCommands+0x62c>)
 801150e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011512:	4293      	cmp	r3, r2
 8011514:	bfb8      	it	lt
 8011516:	4613      	movlt	r3, r2
 8011518:	b25a      	sxtb	r2, r3
 801151a:	4b2d      	ldr	r3, [pc, #180]	; (80115d0 <ProcessMacCommands+0x62c>)
 801151c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8011520:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011524:	2200      	movs	r2, #0
 8011526:	4619      	mov	r1, r3
 8011528:	2009      	movs	r0, #9
 801152a:	f004 fe6d 	bl	8016208 <LoRaMacCommandsAddCmd>
                }
                break;
 801152e:	bf00      	nop
 8011530:	e1bd      	b.n	80118ae <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8011532:	2303      	movs	r3, #3
 8011534:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8011538:	78fb      	ldrb	r3, [r7, #3]
 801153a:	1c5a      	adds	r2, r3, #1
 801153c:	70fa      	strb	r2, [r7, #3]
 801153e:	461a      	mov	r2, r3
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	4413      	add	r3, r2
 8011544:	781b      	ldrb	r3, [r3, #0]
 8011546:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 801154a:	78fb      	ldrb	r3, [r7, #3]
 801154c:	1c5a      	adds	r2, r3, #1
 801154e:	70fa      	strb	r2, [r7, #3]
 8011550:	461a      	mov	r2, r3
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	4413      	add	r3, r2
 8011556:	781b      	ldrb	r3, [r3, #0]
 8011558:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801155a:	78fb      	ldrb	r3, [r7, #3]
 801155c:	1c5a      	adds	r2, r3, #1
 801155e:	70fa      	strb	r2, [r7, #3]
 8011560:	461a      	mov	r2, r3
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	4413      	add	r3, r2
 8011566:	781b      	ldrb	r3, [r3, #0]
 8011568:	021a      	lsls	r2, r3, #8
 801156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801156c:	4313      	orrs	r3, r2
 801156e:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011570:	78fb      	ldrb	r3, [r7, #3]
 8011572:	1c5a      	adds	r2, r3, #1
 8011574:	70fa      	strb	r2, [r7, #3]
 8011576:	461a      	mov	r2, r3
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	4413      	add	r3, r2
 801157c:	781b      	ldrb	r3, [r3, #0]
 801157e:	041a      	lsls	r2, r3, #16
 8011580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011582:	4313      	orrs	r3, r2
 8011584:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8011586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011588:	2264      	movs	r2, #100	; 0x64
 801158a:	fb02 f303 	mul.w	r3, r2, r3
 801158e:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8011590:	4b0f      	ldr	r3, [pc, #60]	; (80115d0 <ProcessMacCommands+0x62c>)
 8011592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011596:	f107 0220 	add.w	r2, r7, #32
 801159a:	4611      	mov	r1, r2
 801159c:	4618      	mov	r0, r3
 801159e:	f006 fcef 	bl	8017f80 <RegionDlChannelReq>
 80115a2:	4603      	mov	r3, r0
 80115a4:	b2db      	uxtb	r3, r3
 80115a6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80115aa:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80115ae:	b25b      	sxtb	r3, r3
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	db0a      	blt.n	80115ca <ProcessMacCommands+0x626>
                {
                    macCmdPayload[0] = status;
 80115b4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80115b8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80115bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80115c0:	2201      	movs	r2, #1
 80115c2:	4619      	mov	r1, r3
 80115c4:	200a      	movs	r0, #10
 80115c6:	f004 fe1f 	bl	8016208 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 80115ca:	bf00      	nop
 80115cc:	e16f      	b.n	80118ae <ProcessMacCommands+0x90a>
 80115ce:	bf00      	nop
 80115d0:	20001244 	.word	0x20001244
 80115d4:	0801fb9c 	.word	0x0801fb9c
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80115d8:	200a      	movs	r0, #10
 80115da:	f005 f93d 	bl	8016858 <LoRaMacConfirmQueueIsCmdActive>
 80115de:	4603      	mov	r3, r0
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	f000 8164 	beq.w	80118ae <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80115e6:	210a      	movs	r1, #10
 80115e8:	2000      	movs	r0, #0
 80115ea:	f005 f8a9 	bl	8016740 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 80115ee:	f107 0318 	add.w	r3, r7, #24
 80115f2:	2200      	movs	r2, #0
 80115f4:	601a      	str	r2, [r3, #0]
 80115f6:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 80115f8:	f107 0310 	add.w	r3, r7, #16
 80115fc:	2200      	movs	r2, #0
 80115fe:	601a      	str	r2, [r3, #0]
 8011600:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8011602:	f107 0308 	add.w	r3, r7, #8
 8011606:	2200      	movs	r2, #0
 8011608:	601a      	str	r2, [r3, #0]
 801160a:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 801160c:	78fb      	ldrb	r3, [r7, #3]
 801160e:	1c5a      	adds	r2, r3, #1
 8011610:	70fa      	strb	r2, [r7, #3]
 8011612:	461a      	mov	r2, r3
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	4413      	add	r3, r2
 8011618:	781b      	ldrb	r3, [r3, #0]
 801161a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 801161c:	78fb      	ldrb	r3, [r7, #3]
 801161e:	1c5a      	adds	r2, r3, #1
 8011620:	70fa      	strb	r2, [r7, #3]
 8011622:	461a      	mov	r2, r3
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	4413      	add	r3, r2
 8011628:	781b      	ldrb	r3, [r3, #0]
 801162a:	021a      	lsls	r2, r3, #8
 801162c:	69bb      	ldr	r3, [r7, #24]
 801162e:	4313      	orrs	r3, r2
 8011630:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8011632:	78fb      	ldrb	r3, [r7, #3]
 8011634:	1c5a      	adds	r2, r3, #1
 8011636:	70fa      	strb	r2, [r7, #3]
 8011638:	461a      	mov	r2, r3
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	4413      	add	r3, r2
 801163e:	781b      	ldrb	r3, [r3, #0]
 8011640:	041a      	lsls	r2, r3, #16
 8011642:	69bb      	ldr	r3, [r7, #24]
 8011644:	4313      	orrs	r3, r2
 8011646:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8011648:	78fb      	ldrb	r3, [r7, #3]
 801164a:	1c5a      	adds	r2, r3, #1
 801164c:	70fa      	strb	r2, [r7, #3]
 801164e:	461a      	mov	r2, r3
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	4413      	add	r3, r2
 8011654:	781b      	ldrb	r3, [r3, #0]
 8011656:	061a      	lsls	r2, r3, #24
 8011658:	69bb      	ldr	r3, [r7, #24]
 801165a:	4313      	orrs	r3, r2
 801165c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 801165e:	78fb      	ldrb	r3, [r7, #3]
 8011660:	1c5a      	adds	r2, r3, #1
 8011662:	70fa      	strb	r2, [r7, #3]
 8011664:	461a      	mov	r2, r3
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	4413      	add	r3, r2
 801166a:	781b      	ldrb	r3, [r3, #0]
 801166c:	b21b      	sxth	r3, r3
 801166e:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8011670:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8011674:	461a      	mov	r2, r3
 8011676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801167a:	fb02 f303 	mul.w	r3, r2, r3
 801167e:	121b      	asrs	r3, r3, #8
 8011680:	b21b      	sxth	r3, r3
 8011682:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8011684:	f107 0310 	add.w	r3, r7, #16
 8011688:	f107 0218 	add.w	r2, r7, #24
 801168c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011690:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8011694:	693a      	ldr	r2, [r7, #16]
 8011696:	4b8c      	ldr	r3, [pc, #560]	; (80118c8 <ProcessMacCommands+0x924>)
 8011698:	4413      	add	r3, r2
 801169a:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 801169c:	f107 0308 	add.w	r3, r7, #8
 80116a0:	4618      	mov	r0, r3
 80116a2:	f00c fae7 	bl	801dc74 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80116a6:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80116aa:	4b88      	ldr	r3, [pc, #544]	; (80118cc <ProcessMacCommands+0x928>)
 80116ac:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 80116b0:	9200      	str	r2, [sp, #0]
 80116b2:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 80116b6:	f107 0210 	add.w	r2, r7, #16
 80116ba:	ca06      	ldmia	r2, {r1, r2}
 80116bc:	f00c fa73 	bl	801dba6 <SysTimeSub>
 80116c0:	f107 0010 	add.w	r0, r7, #16
 80116c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80116c6:	9300      	str	r3, [sp, #0]
 80116c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80116ca:	f107 0208 	add.w	r2, r7, #8
 80116ce:	ca06      	ldmia	r2, {r1, r2}
 80116d0:	f00c fa30 	bl	801db34 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 80116d4:	f107 0310 	add.w	r3, r7, #16
 80116d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80116dc:	f00c fa9c 	bl	801dc18 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80116e0:	f004 fb10 	bl	8015d04 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80116e4:	4b79      	ldr	r3, [pc, #484]	; (80118cc <ProcessMacCommands+0x928>)
 80116e6:	2201      	movs	r2, #1
 80116e8:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 80116ec:	e0df      	b.n	80118ae <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80116ee:	200d      	movs	r0, #13
 80116f0:	f005 f8b2 	bl	8016858 <LoRaMacConfirmQueueIsCmdActive>
 80116f4:	4603      	mov	r3, r0
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	f000 80d9 	beq.w	80118ae <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80116fc:	210d      	movs	r1, #13
 80116fe:	2000      	movs	r0, #0
 8011700:	f005 f81e 	bl	8016740 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8011704:	4b71      	ldr	r3, [pc, #452]	; (80118cc <ProcessMacCommands+0x928>)
 8011706:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 801170a:	2b04      	cmp	r3, #4
 801170c:	f000 80cf 	beq.w	80118ae <ProcessMacCommands+0x90a>
 8011710:	4b6e      	ldr	r3, [pc, #440]	; (80118cc <ProcessMacCommands+0x928>)
 8011712:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8011716:	2b05      	cmp	r3, #5
 8011718:	f000 80c9 	beq.w	80118ae <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 801171c:	f004 fa12 	bl	8015b44 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8011720:	e0c5      	b.n	80118ae <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8011722:	2303      	movs	r3, #3
 8011724:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8011728:	2300      	movs	r3, #0
 801172a:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 801172c:	78fb      	ldrb	r3, [r7, #3]
 801172e:	1c5a      	adds	r2, r3, #1
 8011730:	70fa      	strb	r2, [r7, #3]
 8011732:	461a      	mov	r2, r3
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	4413      	add	r3, r2
 8011738:	781b      	ldrb	r3, [r3, #0]
 801173a:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 801173c:	78fb      	ldrb	r3, [r7, #3]
 801173e:	1c5a      	adds	r2, r3, #1
 8011740:	70fa      	strb	r2, [r7, #3]
 8011742:	461a      	mov	r2, r3
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	4413      	add	r3, r2
 8011748:	781b      	ldrb	r3, [r3, #0]
 801174a:	021b      	lsls	r3, r3, #8
 801174c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801174e:	4313      	orrs	r3, r2
 8011750:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011752:	78fb      	ldrb	r3, [r7, #3]
 8011754:	1c5a      	adds	r2, r3, #1
 8011756:	70fa      	strb	r2, [r7, #3]
 8011758:	461a      	mov	r2, r3
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	4413      	add	r3, r2
 801175e:	781b      	ldrb	r3, [r3, #0]
 8011760:	041b      	lsls	r3, r3, #16
 8011762:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011764:	4313      	orrs	r3, r2
 8011766:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8011768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801176a:	2264      	movs	r2, #100	; 0x64
 801176c:	fb02 f303 	mul.w	r3, r2, r3
 8011770:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8011772:	78fb      	ldrb	r3, [r7, #3]
 8011774:	1c5a      	adds	r2, r3, #1
 8011776:	70fa      	strb	r2, [r7, #3]
 8011778:	461a      	mov	r2, r3
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	4413      	add	r3, r2
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	f003 030f 	and.w	r3, r3, #15
 8011784:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8011788:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801178c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801178e:	4618      	mov	r0, r3
 8011790:	f004 f9ee 	bl	8015b70 <LoRaMacClassBPingSlotChannelReq>
 8011794:	4603      	mov	r3, r0
 8011796:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 801179a:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 801179e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 80117a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80117a6:	2201      	movs	r2, #1
 80117a8:	4619      	mov	r1, r3
 80117aa:	2011      	movs	r0, #17
 80117ac:	f004 fd2c 	bl	8016208 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 80117b0:	e07d      	b.n	80118ae <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80117b2:	200e      	movs	r0, #14
 80117b4:	f005 f850 	bl	8016858 <LoRaMacConfirmQueueIsCmdActive>
 80117b8:	4603      	mov	r3, r0
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d077      	beq.n	80118ae <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80117be:	210e      	movs	r1, #14
 80117c0:	2000      	movs	r0, #0
 80117c2:	f004 ffbd 	bl	8016740 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 80117c6:	2300      	movs	r3, #0
 80117c8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 80117cc:	2300      	movs	r3, #0
 80117ce:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80117d2:	78fb      	ldrb	r3, [r7, #3]
 80117d4:	1c5a      	adds	r2, r3, #1
 80117d6:	70fa      	strb	r2, [r7, #3]
 80117d8:	461a      	mov	r2, r3
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	4413      	add	r3, r2
 80117de:	781b      	ldrb	r3, [r3, #0]
 80117e0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80117e4:	78fb      	ldrb	r3, [r7, #3]
 80117e6:	1c5a      	adds	r2, r3, #1
 80117e8:	70fa      	strb	r2, [r7, #3]
 80117ea:	461a      	mov	r2, r3
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	4413      	add	r3, r2
 80117f0:	781b      	ldrb	r3, [r3, #0]
 80117f2:	021b      	lsls	r3, r3, #8
 80117f4:	b21a      	sxth	r2, r3
 80117f6:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80117fa:	4313      	orrs	r3, r2
 80117fc:	b21b      	sxth	r3, r3
 80117fe:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8011802:	78fb      	ldrb	r3, [r7, #3]
 8011804:	1c5a      	adds	r2, r3, #1
 8011806:	70fa      	strb	r2, [r7, #3]
 8011808:	461a      	mov	r2, r3
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	4413      	add	r3, r2
 801180e:	781b      	ldrb	r3, [r3, #0]
 8011810:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8011814:	4b2e      	ldr	r3, [pc, #184]	; (80118d0 <ProcessMacCommands+0x92c>)
 8011816:	681a      	ldr	r2, [r3, #0]
 8011818:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 801181c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8011820:	4618      	mov	r0, r3
 8011822:	f004 fa11 	bl	8015c48 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8011826:	e042      	b.n	80118ae <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8011828:	2300      	movs	r3, #0
 801182a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 801182e:	78fb      	ldrb	r3, [r7, #3]
 8011830:	1c5a      	adds	r2, r3, #1
 8011832:	70fa      	strb	r2, [r7, #3]
 8011834:	461a      	mov	r2, r3
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	4413      	add	r3, r2
 801183a:	781b      	ldrb	r3, [r3, #0]
 801183c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011840:	78fb      	ldrb	r3, [r7, #3]
 8011842:	1c5a      	adds	r2, r3, #1
 8011844:	70fa      	strb	r2, [r7, #3]
 8011846:	461a      	mov	r2, r3
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	4413      	add	r3, r2
 801184c:	781b      	ldrb	r3, [r3, #0]
 801184e:	021b      	lsls	r3, r3, #8
 8011850:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011854:	4313      	orrs	r3, r2
 8011856:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 801185a:	78fb      	ldrb	r3, [r7, #3]
 801185c:	1c5a      	adds	r2, r3, #1
 801185e:	70fa      	strb	r2, [r7, #3]
 8011860:	461a      	mov	r2, r3
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	4413      	add	r3, r2
 8011866:	781b      	ldrb	r3, [r3, #0]
 8011868:	041b      	lsls	r3, r3, #16
 801186a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801186e:	4313      	orrs	r3, r2
 8011870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8011874:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011878:	2264      	movs	r2, #100	; 0x64
 801187a:	fb02 f303 	mul.w	r3, r2, r3
 801187e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8011882:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8011886:	f004 fab5 	bl	8015df4 <LoRaMacClassBBeaconFreqReq>
 801188a:	4603      	mov	r3, r0
 801188c:	2b00      	cmp	r3, #0
 801188e:	d003      	beq.n	8011898 <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 8011890:	2301      	movs	r3, #1
 8011892:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8011896:	e002      	b.n	801189e <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8011898:	2300      	movs	r3, #0
 801189a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 801189e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80118a2:	2201      	movs	r2, #1
 80118a4:	4619      	mov	r1, r3
 80118a6:	2013      	movs	r0, #19
 80118a8:	f004 fcae 	bl	8016208 <LoRaMacCommandsAddCmd>
                }
                break;
 80118ac:	bf00      	nop
    while( macIndex < commandsSize )
 80118ae:	78fa      	ldrb	r2, [r7, #3]
 80118b0:	78bb      	ldrb	r3, [r7, #2]
 80118b2:	429a      	cmp	r2, r3
 80118b4:	f4ff ab8e 	bcc.w	8010fd4 <ProcessMacCommands+0x30>
 80118b8:	e002      	b.n	80118c0 <ProcessMacCommands+0x91c>
            return;
 80118ba:	bf00      	nop
 80118bc:	e000      	b.n	80118c0 <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 80118be:	bf00      	nop
        }
    }
}
 80118c0:	378c      	adds	r7, #140	; 0x8c
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd90      	pop	{r4, r7, pc}
 80118c6:	bf00      	nop
 80118c8:	12d53d80 	.word	0x12d53d80
 80118cc:	20000d38 	.word	0x20000d38
 80118d0:	2000209c 	.word	0x2000209c

080118d4 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b08e      	sub	sp, #56	; 0x38
 80118d8:	af02      	add	r7, sp, #8
 80118da:	60f8      	str	r0, [r7, #12]
 80118dc:	607a      	str	r2, [r7, #4]
 80118de:	461a      	mov	r2, r3
 80118e0:	460b      	mov	r3, r1
 80118e2:	72fb      	strb	r3, [r7, #11]
 80118e4:	4613      	mov	r3, r2
 80118e6:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80118e8:	2303      	movs	r3, #3
 80118ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 80118ee:	4b65      	ldr	r3, [pc, #404]	; (8011a84 <Send+0x1b0>)
 80118f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80118f4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 80118f8:	4b62      	ldr	r3, [pc, #392]	; (8011a84 <Send+0x1b0>)
 80118fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80118fe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011902:	4b60      	ldr	r3, [pc, #384]	; (8011a84 <Send+0x1b0>)
 8011904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011906:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011908:	4b5e      	ldr	r3, [pc, #376]	; (8011a84 <Send+0x1b0>)
 801190a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801190e:	2b00      	cmp	r3, #0
 8011910:	d101      	bne.n	8011916 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8011912:	2307      	movs	r3, #7
 8011914:	e0b1      	b.n	8011a7a <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8011916:	4b5b      	ldr	r3, [pc, #364]	; (8011a84 <Send+0x1b0>)
 8011918:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 801191c:	2b00      	cmp	r3, #0
 801191e:	d102      	bne.n	8011926 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011920:	4b58      	ldr	r3, [pc, #352]	; (8011a84 <Send+0x1b0>)
 8011922:	2200      	movs	r2, #0
 8011924:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8011926:	2300      	movs	r3, #0
 8011928:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 801192c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011930:	f36f 0303 	bfc	r3, #0, #4
 8011934:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8011938:	4b52      	ldr	r3, [pc, #328]	; (8011a84 <Send+0x1b0>)
 801193a:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 801193e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011942:	f362 13c7 	bfi	r3, r2, #7, #1
 8011946:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801194a:	4b4e      	ldr	r3, [pc, #312]	; (8011a84 <Send+0x1b0>)
 801194c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011950:	2b01      	cmp	r3, #1
 8011952:	d106      	bne.n	8011962 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8011954:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011958:	f043 0310 	orr.w	r3, r3, #16
 801195c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8011960:	e005      	b.n	801196e <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8011962:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011966:	f36f 1304 	bfc	r3, #4, #1
 801196a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 801196e:	4b45      	ldr	r3, [pc, #276]	; (8011a84 <Send+0x1b0>)
 8011970:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011974:	2b00      	cmp	r3, #0
 8011976:	d005      	beq.n	8011984 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8011978:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801197c:	f043 0320 	orr.w	r3, r3, #32
 8011980:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8011984:	4b3f      	ldr	r3, [pc, #252]	; (8011a84 <Send+0x1b0>)
 8011986:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 801198a:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 801198c:	2301      	movs	r3, #1
 801198e:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8011990:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011994:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011998:	b2db      	uxtb	r3, r3
 801199a:	2b00      	cmp	r3, #0
 801199c:	bf14      	ite	ne
 801199e:	2301      	movne	r3, #1
 80119a0:	2300      	moveq	r3, #0
 80119a2:	b2db      	uxtb	r3, r3
 80119a4:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80119a6:	4b37      	ldr	r3, [pc, #220]	; (8011a84 <Send+0x1b0>)
 80119a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119aa:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80119ac:	4b36      	ldr	r3, [pc, #216]	; (8011a88 <Send+0x1b4>)
 80119ae:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 80119b2:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80119b4:	4b34      	ldr	r3, [pc, #208]	; (8011a88 <Send+0x1b4>)
 80119b6:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 80119ba:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80119bc:	4b31      	ldr	r3, [pc, #196]	; (8011a84 <Send+0x1b0>)
 80119be:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80119c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80119c6:	4b2f      	ldr	r3, [pc, #188]	; (8011a84 <Send+0x1b0>)
 80119c8:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80119cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80119d0:	4b2c      	ldr	r3, [pc, #176]	; (8011a84 <Send+0x1b0>)
 80119d2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80119d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 80119da:	4b2a      	ldr	r3, [pc, #168]	; (8011a84 <Send+0x1b0>)
 80119dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80119e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80119e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80119e8:	f107 0014 	add.w	r0, r7, #20
 80119ec:	4a27      	ldr	r2, [pc, #156]	; (8011a8c <Send+0x1b8>)
 80119ee:	4928      	ldr	r1, [pc, #160]	; (8011a90 <Send+0x1bc>)
 80119f0:	f002 fc1a 	bl	8014228 <LoRaMacAdrCalcNext>
 80119f4:	4603      	mov	r3, r0
 80119f6:	461a      	mov	r2, r3
 80119f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80119fc:	f362 1386 	bfi	r3, r2, #6, #1
 8011a00:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8011a04:	7afa      	ldrb	r2, [r7, #11]
 8011a06:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8011a0a:	893b      	ldrh	r3, [r7, #8]
 8011a0c:	9300      	str	r3, [sp, #0]
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	68f8      	ldr	r0, [r7, #12]
 8011a12:	f000 fc2d 	bl	8012270 <PrepareFrame>
 8011a16:	4603      	mov	r3, r0
 8011a18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8011a1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d003      	beq.n	8011a2c <Send+0x158>
 8011a24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a28:	2b0a      	cmp	r3, #10
 8011a2a:	d107      	bne.n	8011a3c <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8011a2c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8011a30:	4618      	mov	r0, r3
 8011a32:	f000 f96d 	bl	8011d10 <ScheduleTx>
 8011a36:	4603      	mov	r3, r0
 8011a38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8011a3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d00a      	beq.n	8011a5a <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8011a44:	4a0f      	ldr	r2, [pc, #60]	; (8011a84 <Send+0x1b0>)
 8011a46:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011a4a:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8011a4e:	4a0d      	ldr	r2, [pc, #52]	; (8011a84 <Send+0x1b0>)
 8011a50:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011a54:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8011a58:	e00d      	b.n	8011a76 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8011a5a:	4b0a      	ldr	r3, [pc, #40]	; (8011a84 <Send+0x1b0>)
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8011a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a64:	4a07      	ldr	r2, [pc, #28]	; (8011a84 <Send+0x1b0>)
 8011a66:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8011a68:	f004 fc46 	bl	80162f8 <LoRaMacCommandsRemoveNoneStickyCmds>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d001      	beq.n	8011a76 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011a72:	2313      	movs	r3, #19
 8011a74:	e001      	b.n	8011a7a <Send+0x1a6>
        }
    }
    return status;
 8011a76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	3730      	adds	r7, #48	; 0x30
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}
 8011a82:	bf00      	nop
 8011a84:	20001244 	.word	0x20001244
 8011a88:	20000d38 	.word	0x20000d38
 8011a8c:	2000127c 	.word	0x2000127c
 8011a90:	2000127d 	.word	0x2000127d

08011a94 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b084      	sub	sp, #16
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8011aaa:	79fb      	ldrb	r3, [r7, #7]
 8011aac:	2bff      	cmp	r3, #255	; 0xff
 8011aae:	d129      	bne.n	8011b04 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8011ab0:	2000      	movs	r0, #0
 8011ab2:	f7ff f957 	bl	8010d64 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8011ab6:	4b1a      	ldr	r3, [pc, #104]	; (8011b20 <SendReJoinReq+0x8c>)
 8011ab8:	2200      	movs	r2, #0
 8011aba:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8011abe:	4b18      	ldr	r3, [pc, #96]	; (8011b20 <SendReJoinReq+0x8c>)
 8011ac0:	4a18      	ldr	r2, [pc, #96]	; (8011b24 <SendReJoinReq+0x90>)
 8011ac2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011ac6:	4b16      	ldr	r3, [pc, #88]	; (8011b20 <SendReJoinReq+0x8c>)
 8011ac8:	22ff      	movs	r2, #255	; 0xff
 8011aca:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8011ace:	7b3b      	ldrb	r3, [r7, #12]
 8011ad0:	f36f 1347 	bfc	r3, #5, #3
 8011ad4:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8011ad6:	7b3a      	ldrb	r2, [r7, #12]
 8011ad8:	4b11      	ldr	r3, [pc, #68]	; (8011b20 <SendReJoinReq+0x8c>)
 8011ada:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8011ade:	f7fc fa75 	bl	800dfcc <SecureElementGetJoinEui>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	2208      	movs	r2, #8
 8011ae6:	4619      	mov	r1, r3
 8011ae8:	480f      	ldr	r0, [pc, #60]	; (8011b28 <SendReJoinReq+0x94>)
 8011aea:	f008 fce4 	bl	801a4b6 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8011aee:	f7fc fa4b 	bl	800df88 <SecureElementGetDevEui>
 8011af2:	4603      	mov	r3, r0
 8011af4:	2208      	movs	r2, #8
 8011af6:	4619      	mov	r1, r3
 8011af8:	480c      	ldr	r0, [pc, #48]	; (8011b2c <SendReJoinReq+0x98>)
 8011afa:	f008 fcdc 	bl	801a4b6 <memcpy1>

            allowDelayedTx = false;
 8011afe:	2300      	movs	r3, #0
 8011b00:	73fb      	strb	r3, [r7, #15]

            break;
 8011b02:	e002      	b.n	8011b0a <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011b04:	2302      	movs	r3, #2
 8011b06:	73bb      	strb	r3, [r7, #14]
            break;
 8011b08:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8011b0a:	7bfb      	ldrb	r3, [r7, #15]
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f000 f8ff 	bl	8011d10 <ScheduleTx>
 8011b12:	4603      	mov	r3, r0
 8011b14:	73bb      	strb	r3, [r7, #14]
    return status;
 8011b16:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b18:	4618      	mov	r0, r3
 8011b1a:	3710      	adds	r7, #16
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	bd80      	pop	{r7, pc}
 8011b20:	20000d38 	.word	0x20000d38
 8011b24:	20000d3a 	.word	0x20000d3a
 8011b28:	20000e46 	.word	0x20000e46
 8011b2c:	20000e4e 	.word	0x20000e4e

08011b30 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011b34:	f003 feb8 	bl	80158a8 <LoRaMacClassBIsBeaconExpected>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d001      	beq.n	8011b42 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8011b3e:	230e      	movs	r3, #14
 8011b40:	e013      	b.n	8011b6a <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011b42:	4b0b      	ldr	r3, [pc, #44]	; (8011b70 <CheckForClassBCollision+0x40>)
 8011b44:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011b48:	2b01      	cmp	r3, #1
 8011b4a:	d10d      	bne.n	8011b68 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011b4c:	f003 fec4 	bl	80158d8 <LoRaMacClassBIsPingExpected>
 8011b50:	4603      	mov	r3, r0
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d001      	beq.n	8011b5a <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011b56:	230f      	movs	r3, #15
 8011b58:	e007      	b.n	8011b6a <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011b5a:	f003 fecd 	bl	80158f8 <LoRaMacClassBIsMulticastExpected>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d001      	beq.n	8011b68 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011b64:	230f      	movs	r3, #15
 8011b66:	e000      	b.n	8011b6a <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8011b68:	2300      	movs	r3, #0
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	bd80      	pop	{r7, pc}
 8011b6e:	bf00      	nop
 8011b70:	20001244 	.word	0x20001244

08011b74 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8011b74:	b590      	push	{r4, r7, lr}
 8011b76:	b083      	sub	sp, #12
 8011b78:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011b7a:	4b2d      	ldr	r3, [pc, #180]	; (8011c30 <ComputeRxWindowParameters+0xbc>)
 8011b7c:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8011b80:	4b2b      	ldr	r3, [pc, #172]	; (8011c30 <ComputeRxWindowParameters+0xbc>)
 8011b82:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011b86:	4b2a      	ldr	r3, [pc, #168]	; (8011c30 <ComputeRxWindowParameters+0xbc>)
 8011b88:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 8011b8c:	4b28      	ldr	r3, [pc, #160]	; (8011c30 <ComputeRxWindowParameters+0xbc>)
 8011b8e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8011b92:	4b27      	ldr	r3, [pc, #156]	; (8011c30 <ComputeRxWindowParameters+0xbc>)
 8011b94:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8011b98:	b25b      	sxtb	r3, r3
 8011b9a:	f006 fa48 	bl	801802e <RegionApplyDrOffset>
 8011b9e:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011ba0:	b259      	sxtb	r1, r3
 8011ba2:	4b23      	ldr	r3, [pc, #140]	; (8011c30 <ComputeRxWindowParameters+0xbc>)
 8011ba4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011ba8:	4b21      	ldr	r3, [pc, #132]	; (8011c30 <ComputeRxWindowParameters+0xbc>)
 8011baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bac:	4821      	ldr	r0, [pc, #132]	; (8011c34 <ComputeRxWindowParameters+0xc0>)
 8011bae:	9000      	str	r0, [sp, #0]
 8011bb0:	4620      	mov	r0, r4
 8011bb2:	f006 f94c 	bl	8017e4e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011bb6:	4b1e      	ldr	r3, [pc, #120]	; (8011c30 <ComputeRxWindowParameters+0xbc>)
 8011bb8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8011bbc:	4b1c      	ldr	r3, [pc, #112]	; (8011c30 <ComputeRxWindowParameters+0xbc>)
 8011bbe:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011bc2:	b259      	sxtb	r1, r3
 8011bc4:	4b1a      	ldr	r3, [pc, #104]	; (8011c30 <ComputeRxWindowParameters+0xbc>)
 8011bc6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011bca:	4b19      	ldr	r3, [pc, #100]	; (8011c30 <ComputeRxWindowParameters+0xbc>)
 8011bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bce:	4c1a      	ldr	r4, [pc, #104]	; (8011c38 <ComputeRxWindowParameters+0xc4>)
 8011bd0:	9400      	str	r4, [sp, #0]
 8011bd2:	f006 f93c 	bl	8017e4e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011bd6:	4b16      	ldr	r3, [pc, #88]	; (8011c30 <ComputeRxWindowParameters+0xbc>)
 8011bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011bda:	4a18      	ldr	r2, [pc, #96]	; (8011c3c <ComputeRxWindowParameters+0xc8>)
 8011bdc:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8011be0:	4413      	add	r3, r2
 8011be2:	4a16      	ldr	r2, [pc, #88]	; (8011c3c <ComputeRxWindowParameters+0xc8>)
 8011be4:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011be8:	4b11      	ldr	r3, [pc, #68]	; (8011c30 <ComputeRxWindowParameters+0xbc>)
 8011bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bec:	4a13      	ldr	r2, [pc, #76]	; (8011c3c <ComputeRxWindowParameters+0xc8>)
 8011bee:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8011bf2:	4413      	add	r3, r2
 8011bf4:	4a11      	ldr	r2, [pc, #68]	; (8011c3c <ComputeRxWindowParameters+0xc8>)
 8011bf6:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011bfa:	4b0d      	ldr	r3, [pc, #52]	; (8011c30 <ComputeRxWindowParameters+0xbc>)
 8011bfc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d111      	bne.n	8011c28 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011c04:	4b0a      	ldr	r3, [pc, #40]	; (8011c30 <ComputeRxWindowParameters+0xbc>)
 8011c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c08:	4a0c      	ldr	r2, [pc, #48]	; (8011c3c <ComputeRxWindowParameters+0xc8>)
 8011c0a:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8011c0e:	4413      	add	r3, r2
 8011c10:	4a0a      	ldr	r2, [pc, #40]	; (8011c3c <ComputeRxWindowParameters+0xc8>)
 8011c12:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011c16:	4b06      	ldr	r3, [pc, #24]	; (8011c30 <ComputeRxWindowParameters+0xbc>)
 8011c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011c1a:	4a08      	ldr	r2, [pc, #32]	; (8011c3c <ComputeRxWindowParameters+0xc8>)
 8011c1c:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8011c20:	4413      	add	r3, r2
 8011c22:	4a06      	ldr	r2, [pc, #24]	; (8011c3c <ComputeRxWindowParameters+0xc8>)
 8011c24:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8011c28:	bf00      	nop
 8011c2a:	3704      	adds	r7, #4
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd90      	pop	{r4, r7, pc}
 8011c30:	20001244 	.word	0x20001244
 8011c34:	200010f0 	.word	0x200010f0
 8011c38:	20001104 	.word	0x20001104
 8011c3c:	20000d38 	.word	0x20000d38

08011c40 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b082      	sub	sp, #8
 8011c44:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8011c46:	2300      	movs	r3, #0
 8011c48:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8011c4a:	4b13      	ldr	r3, [pc, #76]	; (8011c98 <VerifyTxFrame+0x58>)
 8011c4c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d01b      	beq.n	8011c8c <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011c54:	1d3b      	adds	r3, r7, #4
 8011c56:	4618      	mov	r0, r3
 8011c58:	f004 fb94 	bl	8016384 <LoRaMacCommandsGetSizeSerializedCmds>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d001      	beq.n	8011c66 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011c62:	2313      	movs	r3, #19
 8011c64:	e013      	b.n	8011c8e <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8011c66:	4b0d      	ldr	r3, [pc, #52]	; (8011c9c <VerifyTxFrame+0x5c>)
 8011c68:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011c6c:	4a0a      	ldr	r2, [pc, #40]	; (8011c98 <VerifyTxFrame+0x58>)
 8011c6e:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8011c72:	687a      	ldr	r2, [r7, #4]
 8011c74:	b2d2      	uxtb	r2, r2
 8011c76:	4618      	mov	r0, r3
 8011c78:	f7ff f96c 	bl	8010f54 <ValidatePayloadLength>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	f083 0301 	eor.w	r3, r3, #1
 8011c82:	b2db      	uxtb	r3, r3
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d001      	beq.n	8011c8c <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8011c88:	2308      	movs	r3, #8
 8011c8a:	e000      	b.n	8011c8e <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8011c8c:	2300      	movs	r3, #0
}
 8011c8e:	4618      	mov	r0, r3
 8011c90:	3708      	adds	r7, #8
 8011c92:	46bd      	mov	sp, r7
 8011c94:	bd80      	pop	{r7, pc}
 8011c96:	bf00      	nop
 8011c98:	20001244 	.word	0x20001244
 8011c9c:	20000d38 	.word	0x20000d38

08011ca0 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b082      	sub	sp, #8
 8011ca4:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8011ca6:	4b18      	ldr	r3, [pc, #96]	; (8011d08 <SerializeTxFrame+0x68>)
 8011ca8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d002      	beq.n	8011cb6 <SerializeTxFrame+0x16>
 8011cb0:	2b04      	cmp	r3, #4
 8011cb2:	d011      	beq.n	8011cd8 <SerializeTxFrame+0x38>
 8011cb4:	e021      	b.n	8011cfa <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011cb6:	4815      	ldr	r0, [pc, #84]	; (8011d0c <SerializeTxFrame+0x6c>)
 8011cb8:	f005 fec9 	bl	8017a4e <LoRaMacSerializerJoinRequest>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011cc0:	79fb      	ldrb	r3, [r7, #7]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d001      	beq.n	8011cca <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011cc6:	2311      	movs	r3, #17
 8011cc8:	e01a      	b.n	8011d00 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011cca:	4b0f      	ldr	r3, [pc, #60]	; (8011d08 <SerializeTxFrame+0x68>)
 8011ccc:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011cd0:	b29a      	uxth	r2, r3
 8011cd2:	4b0d      	ldr	r3, [pc, #52]	; (8011d08 <SerializeTxFrame+0x68>)
 8011cd4:	801a      	strh	r2, [r3, #0]
            break;
 8011cd6:	e012      	b.n	8011cfe <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8011cd8:	480c      	ldr	r0, [pc, #48]	; (8011d0c <SerializeTxFrame+0x6c>)
 8011cda:	f005 ff3a 	bl	8017b52 <LoRaMacSerializerData>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011ce2:	79fb      	ldrb	r3, [r7, #7]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d001      	beq.n	8011cec <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011ce8:	2311      	movs	r3, #17
 8011cea:	e009      	b.n	8011d00 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011cec:	4b06      	ldr	r3, [pc, #24]	; (8011d08 <SerializeTxFrame+0x68>)
 8011cee:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011cf2:	b29a      	uxth	r2, r3
 8011cf4:	4b04      	ldr	r3, [pc, #16]	; (8011d08 <SerializeTxFrame+0x68>)
 8011cf6:	801a      	strh	r2, [r3, #0]
            break;
 8011cf8:	e001      	b.n	8011cfe <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011cfa:	2303      	movs	r3, #3
 8011cfc:	e000      	b.n	8011d00 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8011cfe:	2300      	movs	r3, #0
}
 8011d00:	4618      	mov	r0, r3
 8011d02:	3708      	adds	r7, #8
 8011d04:	46bd      	mov	sp, r7
 8011d06:	bd80      	pop	{r7, pc}
 8011d08:	20000d38 	.word	0x20000d38
 8011d0c:	20000e40 	.word	0x20000e40

08011d10 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b090      	sub	sp, #64	; 0x40
 8011d14:	af02      	add	r7, sp, #8
 8011d16:	4603      	mov	r3, r0
 8011d18:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d1a:	2303      	movs	r3, #3
 8011d1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8011d20:	f7ff ff06 	bl	8011b30 <CheckForClassBCollision>
 8011d24:	4603      	mov	r3, r0
 8011d26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8011d2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d002      	beq.n	8011d38 <ScheduleTx+0x28>
    {
        return status;
 8011d32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d36:	e08f      	b.n	8011e58 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8011d38:	f000 f8fa 	bl	8011f30 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8011d3c:	f7ff ffb0 	bl	8011ca0 <SerializeTxFrame>
 8011d40:	4603      	mov	r3, r0
 8011d42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8011d46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d002      	beq.n	8011d54 <ScheduleTx+0x44>
    {
        return status;
 8011d4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d52:	e081      	b.n	8011e58 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8011d54:	4b42      	ldr	r3, [pc, #264]	; (8011e60 <ScheduleTx+0x150>)
 8011d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d58:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011d5a:	4b41      	ldr	r3, [pc, #260]	; (8011e60 <ScheduleTx+0x150>)
 8011d5c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011d60:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8011d62:	4b3f      	ldr	r3, [pc, #252]	; (8011e60 <ScheduleTx+0x150>)
 8011d64:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8011d68:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8011d6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f00b ffb8 	bl	801dce4 <SysTimeGetMcuTime>
 8011d74:	4638      	mov	r0, r7
 8011d76:	4b3a      	ldr	r3, [pc, #232]	; (8011e60 <ScheduleTx+0x150>)
 8011d78:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8011d7c:	9200      	str	r2, [sp, #0]
 8011d7e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8011d82:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011d86:	ca06      	ldmia	r2, {r1, r2}
 8011d88:	f00b ff0d 	bl	801dba6 <SysTimeSub>
 8011d8c:	f107 0320 	add.w	r3, r7, #32
 8011d90:	463a      	mov	r2, r7
 8011d92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011d96:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8011d9a:	4b31      	ldr	r3, [pc, #196]	; (8011e60 <ScheduleTx+0x150>)
 8011d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d9e:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8011da0:	2300      	movs	r3, #0
 8011da2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8011da6:	2301      	movs	r3, #1
 8011da8:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8011daa:	4b2e      	ldr	r3, [pc, #184]	; (8011e64 <ScheduleTx+0x154>)
 8011dac:	881b      	ldrh	r3, [r3, #0]
 8011dae:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011db0:	4b2b      	ldr	r3, [pc, #172]	; (8011e60 <ScheduleTx+0x150>)
 8011db2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d104      	bne.n	8011dc4 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8011dba:	2301      	movs	r3, #1
 8011dbc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8011dc4:	4b26      	ldr	r3, [pc, #152]	; (8011e60 <ScheduleTx+0x150>)
 8011dc6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011dca:	f107 0114 	add.w	r1, r7, #20
 8011dce:	4b26      	ldr	r3, [pc, #152]	; (8011e68 <ScheduleTx+0x158>)
 8011dd0:	9300      	str	r3, [sp, #0]
 8011dd2:	4b26      	ldr	r3, [pc, #152]	; (8011e6c <ScheduleTx+0x15c>)
 8011dd4:	4a26      	ldr	r2, [pc, #152]	; (8011e70 <ScheduleTx+0x160>)
 8011dd6:	f006 f900 	bl	8017fda <RegionNextChannel>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8011de0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d022      	beq.n	8011e2e <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8011de8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011dec:	2b0b      	cmp	r3, #11
 8011dee:	d11b      	bne.n	8011e28 <ScheduleTx+0x118>
 8011df0:	7bfb      	ldrb	r3, [r7, #15]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d018      	beq.n	8011e28 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 8011df6:	4b1b      	ldr	r3, [pc, #108]	; (8011e64 <ScheduleTx+0x154>)
 8011df8:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d011      	beq.n	8011e24 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8011e00:	4b18      	ldr	r3, [pc, #96]	; (8011e64 <ScheduleTx+0x154>)
 8011e02:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e06:	f043 0320 	orr.w	r3, r3, #32
 8011e0a:	4a16      	ldr	r2, [pc, #88]	; (8011e64 <ScheduleTx+0x154>)
 8011e0c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8011e10:	4b14      	ldr	r3, [pc, #80]	; (8011e64 <ScheduleTx+0x154>)
 8011e12:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8011e16:	4619      	mov	r1, r3
 8011e18:	4816      	ldr	r0, [pc, #88]	; (8011e74 <ScheduleTx+0x164>)
 8011e1a:	f00c fd07 	bl	801e82c <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8011e1e:	4815      	ldr	r0, [pc, #84]	; (8011e74 <ScheduleTx+0x164>)
 8011e20:	f00c fc26 	bl	801e670 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8011e24:	2300      	movs	r3, #0
 8011e26:	e017      	b.n	8011e58 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011e28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e2c:	e014      	b.n	8011e58 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8011e2e:	f7ff fea1 	bl	8011b74 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8011e32:	f7ff ff05 	bl	8011c40 <VerifyTxFrame>
 8011e36:	4603      	mov	r3, r0
 8011e38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8011e3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d002      	beq.n	8011e4a <ScheduleTx+0x13a>
    {
        return status;
 8011e44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e48:	e006      	b.n	8011e58 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8011e4a:	4b06      	ldr	r3, [pc, #24]	; (8011e64 <ScheduleTx+0x154>)
 8011e4c:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8011e50:	4618      	mov	r0, r3
 8011e52:	f000 fb29 	bl	80124a8 <SendFrameOnChannel>
 8011e56:	4603      	mov	r3, r0
}
 8011e58:	4618      	mov	r0, r3
 8011e5a:	3738      	adds	r7, #56	; 0x38
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}
 8011e60:	20001244 	.word	0x20001244
 8011e64:	20000d38 	.word	0x20000d38
 8011e68:	20001274 	.word	0x20001274
 8011e6c:	200011c0 	.word	0x200011c0
 8011e70:	2000114d 	.word	0x2000114d
 8011e74:	200010a0 	.word	0x200010a0

08011e78 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b084      	sub	sp, #16
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	4603      	mov	r3, r0
 8011e80:	460a      	mov	r2, r1
 8011e82:	71fb      	strb	r3, [r7, #7]
 8011e84:	4613      	mov	r3, r2
 8011e86:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011e88:	2313      	movs	r3, #19
 8011e8a:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8011e90:	4b25      	ldr	r3, [pc, #148]	; (8011f28 <SecureFrame+0xb0>)
 8011e92:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d002      	beq.n	8011ea0 <SecureFrame+0x28>
 8011e9a:	2b04      	cmp	r3, #4
 8011e9c:	d011      	beq.n	8011ec2 <SecureFrame+0x4a>
 8011e9e:	e03b      	b.n	8011f18 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011ea0:	4822      	ldr	r0, [pc, #136]	; (8011f2c <SecureFrame+0xb4>)
 8011ea2:	f005 f99d 	bl	80171e0 <LoRaMacCryptoPrepareJoinRequest>
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011eaa:	7bfb      	ldrb	r3, [r7, #15]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d001      	beq.n	8011eb4 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011eb0:	2311      	movs	r3, #17
 8011eb2:	e034      	b.n	8011f1e <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011eb4:	4b1c      	ldr	r3, [pc, #112]	; (8011f28 <SecureFrame+0xb0>)
 8011eb6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011eba:	b29a      	uxth	r2, r3
 8011ebc:	4b1a      	ldr	r3, [pc, #104]	; (8011f28 <SecureFrame+0xb0>)
 8011ebe:	801a      	strh	r2, [r3, #0]
            break;
 8011ec0:	e02c      	b.n	8011f1c <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011ec2:	f107 0308 	add.w	r3, r7, #8
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f005 f8a4 	bl	8017014 <LoRaMacCryptoGetFCntUp>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d001      	beq.n	8011ed6 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011ed2:	2312      	movs	r3, #18
 8011ed4:	e023      	b.n	8011f1e <SecureFrame+0xa6>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8011ed6:	4b14      	ldr	r3, [pc, #80]	; (8011f28 <SecureFrame+0xb0>)
 8011ed8:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d104      	bne.n	8011eea <SecureFrame+0x72>
 8011ee0:	4b11      	ldr	r3, [pc, #68]	; (8011f28 <SecureFrame+0xb0>)
 8011ee2:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8011ee6:	2b01      	cmp	r3, #1
 8011ee8:	d902      	bls.n	8011ef0 <SecureFrame+0x78>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8011eea:	68bb      	ldr	r3, [r7, #8]
 8011eec:	3b01      	subs	r3, #1
 8011eee:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8011ef0:	68b8      	ldr	r0, [r7, #8]
 8011ef2:	79ba      	ldrb	r2, [r7, #6]
 8011ef4:	79f9      	ldrb	r1, [r7, #7]
 8011ef6:	4b0d      	ldr	r3, [pc, #52]	; (8011f2c <SecureFrame+0xb4>)
 8011ef8:	f005 fa8a 	bl	8017410 <LoRaMacCryptoSecureMessage>
 8011efc:	4603      	mov	r3, r0
 8011efe:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011f00:	7bfb      	ldrb	r3, [r7, #15]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d001      	beq.n	8011f0a <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011f06:	2311      	movs	r3, #17
 8011f08:	e009      	b.n	8011f1e <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011f0a:	4b07      	ldr	r3, [pc, #28]	; (8011f28 <SecureFrame+0xb0>)
 8011f0c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011f10:	b29a      	uxth	r2, r3
 8011f12:	4b05      	ldr	r3, [pc, #20]	; (8011f28 <SecureFrame+0xb0>)
 8011f14:	801a      	strh	r2, [r3, #0]
            break;
 8011f16:	e001      	b.n	8011f1c <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011f18:	2303      	movs	r3, #3
 8011f1a:	e000      	b.n	8011f1e <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 8011f1c:	2300      	movs	r3, #0
}
 8011f1e:	4618      	mov	r0, r3
 8011f20:	3710      	adds	r7, #16
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}
 8011f26:	bf00      	nop
 8011f28:	20000d38 	.word	0x20000d38
 8011f2c:	20000e40 	.word	0x20000e40

08011f30 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8011f30:	b480      	push	{r7}
 8011f32:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8011f34:	4b09      	ldr	r3, [pc, #36]	; (8011f5c <CalculateBackOff+0x2c>)
 8011f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d10a      	bne.n	8011f52 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8011f3c:	4b07      	ldr	r3, [pc, #28]	; (8011f5c <CalculateBackOff+0x2c>)
 8011f3e:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8011f42:	3b01      	subs	r3, #1
 8011f44:	4a06      	ldr	r2, [pc, #24]	; (8011f60 <CalculateBackOff+0x30>)
 8011f46:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 8011f4a:	fb02 f303 	mul.w	r3, r2, r3
 8011f4e:	4a03      	ldr	r2, [pc, #12]	; (8011f5c <CalculateBackOff+0x2c>)
 8011f50:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8011f52:	bf00      	nop
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bc80      	pop	{r7}
 8011f58:	4770      	bx	lr
 8011f5a:	bf00      	nop
 8011f5c:	20001244 	.word	0x20001244
 8011f60:	20000d38 	.word	0x20000d38

08011f64 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b082      	sub	sp, #8
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	7139      	strb	r1, [r7, #4]
 8011f6e:	71fb      	strb	r3, [r7, #7]
 8011f70:	4613      	mov	r3, r2
 8011f72:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8011f74:	79fb      	ldrb	r3, [r7, #7]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d002      	beq.n	8011f80 <RemoveMacCommands+0x1c>
 8011f7a:	79fb      	ldrb	r3, [r7, #7]
 8011f7c:	2b01      	cmp	r3, #1
 8011f7e:	d10d      	bne.n	8011f9c <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8011f80:	79bb      	ldrb	r3, [r7, #6]
 8011f82:	2b01      	cmp	r3, #1
 8011f84:	d108      	bne.n	8011f98 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8011f86:	793b      	ldrb	r3, [r7, #4]
 8011f88:	f003 0320 	and.w	r3, r3, #32
 8011f8c:	b2db      	uxtb	r3, r3
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d004      	beq.n	8011f9c <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8011f92:	f004 f9d5 	bl	8016340 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8011f96:	e001      	b.n	8011f9c <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8011f98:	f004 f9d2 	bl	8016340 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8011f9c:	bf00      	nop
 8011f9e:	3708      	adds	r7, #8
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}

08011fa4 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8011fa4:	b5b0      	push	{r4, r5, r7, lr}
 8011fa6:	b08e      	sub	sp, #56	; 0x38
 8011fa8:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8011faa:	4b68      	ldr	r3, [pc, #416]	; (801214c <ResetMacParameters+0x1a8>)
 8011fac:	2200      	movs	r2, #0
 8011fae:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8011fb2:	4b66      	ldr	r3, [pc, #408]	; (801214c <ResetMacParameters+0x1a8>)
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8011fb8:	4b65      	ldr	r3, [pc, #404]	; (8012150 <ResetMacParameters+0x1ac>)
 8011fba:	2200      	movs	r2, #0
 8011fbc:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 8011fc0:	4b63      	ldr	r3, [pc, #396]	; (8012150 <ResetMacParameters+0x1ac>)
 8011fc2:	2201      	movs	r2, #1
 8011fc4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011fc8:	4b61      	ldr	r3, [pc, #388]	; (8012150 <ResetMacParameters+0x1ac>)
 8011fca:	2201      	movs	r2, #1
 8011fcc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 8011fd0:	4b5f      	ldr	r3, [pc, #380]	; (8012150 <ResetMacParameters+0x1ac>)
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8011fd8:	4b5c      	ldr	r3, [pc, #368]	; (801214c <ResetMacParameters+0x1a8>)
 8011fda:	2200      	movs	r2, #0
 8011fdc:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8011fe0:	4b5a      	ldr	r3, [pc, #360]	; (801214c <ResetMacParameters+0x1a8>)
 8011fe2:	2201      	movs	r2, #1
 8011fe4:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011fe8:	4b58      	ldr	r3, [pc, #352]	; (801214c <ResetMacParameters+0x1a8>)
 8011fea:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 8011fee:	4b57      	ldr	r3, [pc, #348]	; (801214c <ResetMacParameters+0x1a8>)
 8011ff0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011ff4:	4b55      	ldr	r3, [pc, #340]	; (801214c <ResetMacParameters+0x1a8>)
 8011ff6:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 8011ffa:	4b54      	ldr	r3, [pc, #336]	; (801214c <ResetMacParameters+0x1a8>)
 8011ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8012000:	4b52      	ldr	r3, [pc, #328]	; (801214c <ResetMacParameters+0x1a8>)
 8012002:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 8012006:	4b51      	ldr	r3, [pc, #324]	; (801214c <ResetMacParameters+0x1a8>)
 8012008:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 801200c:	4b4f      	ldr	r3, [pc, #316]	; (801214c <ResetMacParameters+0x1a8>)
 801200e:	4a4f      	ldr	r2, [pc, #316]	; (801214c <ResetMacParameters+0x1a8>)
 8012010:	3364      	adds	r3, #100	; 0x64
 8012012:	32a8      	adds	r2, #168	; 0xa8
 8012014:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012018:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801201c:	4b4b      	ldr	r3, [pc, #300]	; (801214c <ResetMacParameters+0x1a8>)
 801201e:	4a4b      	ldr	r2, [pc, #300]	; (801214c <ResetMacParameters+0x1a8>)
 8012020:	336c      	adds	r3, #108	; 0x6c
 8012022:	32b0      	adds	r2, #176	; 0xb0
 8012024:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012028:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 801202c:	4b47      	ldr	r3, [pc, #284]	; (801214c <ResetMacParameters+0x1a8>)
 801202e:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8012032:	4b46      	ldr	r3, [pc, #280]	; (801214c <ResetMacParameters+0x1a8>)
 8012034:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8012038:	4b44      	ldr	r3, [pc, #272]	; (801214c <ResetMacParameters+0x1a8>)
 801203a:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 801203e:	4b43      	ldr	r3, [pc, #268]	; (801214c <ResetMacParameters+0x1a8>)
 8012040:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8012044:	4b41      	ldr	r3, [pc, #260]	; (801214c <ResetMacParameters+0x1a8>)
 8012046:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801204a:	4a40      	ldr	r2, [pc, #256]	; (801214c <ResetMacParameters+0x1a8>)
 801204c:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801204e:	4b3f      	ldr	r3, [pc, #252]	; (801214c <ResetMacParameters+0x1a8>)
 8012050:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8012054:	4a3d      	ldr	r2, [pc, #244]	; (801214c <ResetMacParameters+0x1a8>)
 8012056:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 8012058:	4b3d      	ldr	r3, [pc, #244]	; (8012150 <ResetMacParameters+0x1ac>)
 801205a:	2200      	movs	r2, #0
 801205c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 8012060:	4b3a      	ldr	r3, [pc, #232]	; (801214c <ResetMacParameters+0x1a8>)
 8012062:	2200      	movs	r2, #0
 8012064:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8012068:	2301      	movs	r3, #1
 801206a:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801206c:	4b39      	ldr	r3, [pc, #228]	; (8012154 <ResetMacParameters+0x1b0>)
 801206e:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8012070:	4b39      	ldr	r3, [pc, #228]	; (8012158 <ResetMacParameters+0x1b4>)
 8012072:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012074:	4b35      	ldr	r3, [pc, #212]	; (801214c <ResetMacParameters+0x1a8>)
 8012076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801207a:	1d3a      	adds	r2, r7, #4
 801207c:	4611      	mov	r1, r2
 801207e:	4618      	mov	r0, r3
 8012080:	f005 fe97 	bl	8017db2 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8012084:	4b32      	ldr	r3, [pc, #200]	; (8012150 <ResetMacParameters+0x1ac>)
 8012086:	2200      	movs	r2, #0
 8012088:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801208c:	4b30      	ldr	r3, [pc, #192]	; (8012150 <ResetMacParameters+0x1ac>)
 801208e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8012092:	4b2f      	ldr	r3, [pc, #188]	; (8012150 <ResetMacParameters+0x1ac>)
 8012094:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8012098:	4b2c      	ldr	r3, [pc, #176]	; (801214c <ResetMacParameters+0x1a8>)
 801209a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801209c:	4a2c      	ldr	r2, [pc, #176]	; (8012150 <ResetMacParameters+0x1ac>)
 801209e:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80120a2:	4b2a      	ldr	r3, [pc, #168]	; (801214c <ResetMacParameters+0x1a8>)
 80120a4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80120a8:	4b29      	ldr	r3, [pc, #164]	; (8012150 <ResetMacParameters+0x1ac>)
 80120aa:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80120ae:	4b27      	ldr	r3, [pc, #156]	; (801214c <ResetMacParameters+0x1a8>)
 80120b0:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80120b4:	4b26      	ldr	r3, [pc, #152]	; (8012150 <ResetMacParameters+0x1ac>)
 80120b6:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 80120ba:	4b25      	ldr	r3, [pc, #148]	; (8012150 <ResetMacParameters+0x1ac>)
 80120bc:	2200      	movs	r2, #0
 80120be:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80120c2:	4b23      	ldr	r3, [pc, #140]	; (8012150 <ResetMacParameters+0x1ac>)
 80120c4:	2201      	movs	r2, #1
 80120c6:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80120ca:	4a21      	ldr	r2, [pc, #132]	; (8012150 <ResetMacParameters+0x1ac>)
 80120cc:	4b20      	ldr	r3, [pc, #128]	; (8012150 <ResetMacParameters+0x1ac>)
 80120ce:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 80120d2:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 80120d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80120d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80120da:	682b      	ldr	r3, [r5, #0]
 80120dc:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80120de:	4b1c      	ldr	r3, [pc, #112]	; (8012150 <ResetMacParameters+0x1ac>)
 80120e0:	2201      	movs	r2, #1
 80120e2:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80120e6:	4b1a      	ldr	r3, [pc, #104]	; (8012150 <ResetMacParameters+0x1ac>)
 80120e8:	2202      	movs	r2, #2
 80120ea:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 80120ee:	2300      	movs	r3, #0
 80120f0:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 80120f2:	2300      	movs	r3, #0
 80120f4:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 80120f6:	4b16      	ldr	r3, [pc, #88]	; (8012150 <ResetMacParameters+0x1ac>)
 80120f8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d009      	beq.n	8012114 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8012100:	4b13      	ldr	r3, [pc, #76]	; (8012150 <ResetMacParameters+0x1ac>)
 8012102:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012106:	685b      	ldr	r3, [r3, #4]
 8012108:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 801210a:	4b11      	ldr	r3, [pc, #68]	; (8012150 <ResetMacParameters+0x1ac>)
 801210c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012110:	691b      	ldr	r3, [r3, #16]
 8012112:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8012114:	4b11      	ldr	r3, [pc, #68]	; (801215c <ResetMacParameters+0x1b8>)
 8012116:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8012118:	4b11      	ldr	r3, [pc, #68]	; (8012160 <ResetMacParameters+0x1bc>)
 801211a:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 801211c:	4b11      	ldr	r3, [pc, #68]	; (8012164 <ResetMacParameters+0x1c0>)
 801211e:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8012120:	4b11      	ldr	r3, [pc, #68]	; (8012168 <ResetMacParameters+0x1c4>)
 8012122:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8012124:	4b11      	ldr	r3, [pc, #68]	; (801216c <ResetMacParameters+0x1c8>)
 8012126:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8012128:	4b11      	ldr	r3, [pc, #68]	; (8012170 <ResetMacParameters+0x1cc>)
 801212a:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 801212c:	4b11      	ldr	r3, [pc, #68]	; (8012174 <ResetMacParameters+0x1d0>)
 801212e:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8012130:	4b11      	ldr	r3, [pc, #68]	; (8012178 <ResetMacParameters+0x1d4>)
 8012132:	62fb      	str	r3, [r7, #44]	; 0x2c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8012134:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012138:	f107 0310 	add.w	r3, r7, #16
 801213c:	4a0f      	ldr	r2, [pc, #60]	; (801217c <ResetMacParameters+0x1d8>)
 801213e:	4618      	mov	r0, r3
 8012140:	f002 fd16 	bl	8014b70 <LoRaMacClassBInit>
}
 8012144:	bf00      	nop
 8012146:	3738      	adds	r7, #56	; 0x38
 8012148:	46bd      	mov	sp, r7
 801214a:	bdb0      	pop	{r4, r5, r7, pc}
 801214c:	20001244 	.word	0x20001244
 8012150:	20000d38 	.word	0x20000d38
 8012154:	20001424 	.word	0x20001424
 8012158:	200014b8 	.word	0x200014b8
 801215c:	20001198 	.word	0x20001198
 8012160:	20001154 	.word	0x20001154
 8012164:	20001184 	.word	0x20001184
 8012168:	200011bd 	.word	0x200011bd
 801216c:	20001318 	.word	0x20001318
 8012170:	20001284 	.word	0x20001284
 8012174:	20001288 	.word	0x20001288
 8012178:	2000131c 	.word	0x2000131c
 801217c:	20001954 	.word	0x20001954

08012180 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b082      	sub	sp, #8
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
 8012188:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 801218a:	6878      	ldr	r0, [r7, #4]
 801218c:	f00c fade 	bl	801e74c <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8012190:	4b11      	ldr	r3, [pc, #68]	; (80121d8 <RxWindowSetup+0x58>)
 8012192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012194:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8012196:	4b11      	ldr	r3, [pc, #68]	; (80121dc <RxWindowSetup+0x5c>)
 8012198:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801219c:	4a10      	ldr	r2, [pc, #64]	; (80121e0 <RxWindowSetup+0x60>)
 801219e:	6839      	ldr	r1, [r7, #0]
 80121a0:	4618      	mov	r0, r3
 80121a2:	f005 fe6e 	bl	8017e82 <RegionRxConfig>
 80121a6:	4603      	mov	r3, r0
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d010      	beq.n	80121ce <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80121ac:	4b0d      	ldr	r3, [pc, #52]	; (80121e4 <RxWindowSetup+0x64>)
 80121ae:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 80121b2:	4b0c      	ldr	r3, [pc, #48]	; (80121e4 <RxWindowSetup+0x64>)
 80121b4:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80121b8:	4b07      	ldr	r3, [pc, #28]	; (80121d8 <RxWindowSetup+0x58>)
 80121ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121bc:	4a07      	ldr	r2, [pc, #28]	; (80121dc <RxWindowSetup+0x5c>)
 80121be:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80121c0:	4610      	mov	r0, r2
 80121c2:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	7cda      	ldrb	r2, [r3, #19]
 80121c8:	4b06      	ldr	r3, [pc, #24]	; (80121e4 <RxWindowSetup+0x64>)
 80121ca:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 80121ce:	bf00      	nop
 80121d0:	3708      	adds	r7, #8
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd80      	pop	{r7, pc}
 80121d6:	bf00      	nop
 80121d8:	0801fbe4 	.word	0x0801fbe4
 80121dc:	20001244 	.word	0x20001244
 80121e0:	20001158 	.word	0x20001158
 80121e4:	20000d38 	.word	0x20000d38

080121e8 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 80121e8:	b590      	push	{r4, r7, lr}
 80121ea:	b083      	sub	sp, #12
 80121ec:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80121ee:	4b1b      	ldr	r3, [pc, #108]	; (801225c <OpenContinuousRxCWindow+0x74>)
 80121f0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 80121f4:	4b19      	ldr	r3, [pc, #100]	; (801225c <OpenContinuousRxCWindow+0x74>)
 80121f6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80121fa:	b259      	sxtb	r1, r3
 80121fc:	4b17      	ldr	r3, [pc, #92]	; (801225c <OpenContinuousRxCWindow+0x74>)
 80121fe:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012202:	4b16      	ldr	r3, [pc, #88]	; (801225c <OpenContinuousRxCWindow+0x74>)
 8012204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012206:	4c16      	ldr	r4, [pc, #88]	; (8012260 <OpenContinuousRxCWindow+0x78>)
 8012208:	9400      	str	r4, [sp, #0]
 801220a:	f005 fe20 	bl	8017e4e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801220e:	4b15      	ldr	r3, [pc, #84]	; (8012264 <OpenContinuousRxCWindow+0x7c>)
 8012210:	2202      	movs	r2, #2
 8012212:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012216:	4b13      	ldr	r3, [pc, #76]	; (8012264 <OpenContinuousRxCWindow+0x7c>)
 8012218:	2201      	movs	r2, #1
 801221a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801221e:	4b0f      	ldr	r3, [pc, #60]	; (801225c <OpenContinuousRxCWindow+0x74>)
 8012220:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012224:	4a10      	ldr	r2, [pc, #64]	; (8012268 <OpenContinuousRxCWindow+0x80>)
 8012226:	490e      	ldr	r1, [pc, #56]	; (8012260 <OpenContinuousRxCWindow+0x78>)
 8012228:	4618      	mov	r0, r3
 801222a:	f005 fe2a 	bl	8017e82 <RegionRxConfig>
 801222e:	4603      	mov	r3, r0
 8012230:	2b00      	cmp	r3, #0
 8012232:	d00f      	beq.n	8012254 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8012234:	4b0b      	ldr	r3, [pc, #44]	; (8012264 <OpenContinuousRxCWindow+0x7c>)
 8012236:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 801223a:	4b0a      	ldr	r3, [pc, #40]	; (8012264 <OpenContinuousRxCWindow+0x7c>)
 801223c:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( 0 ); // Continuous mode
 8012240:	4b0a      	ldr	r3, [pc, #40]	; (801226c <OpenContinuousRxCWindow+0x84>)
 8012242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012244:	2000      	movs	r0, #0
 8012246:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8012248:	4b06      	ldr	r3, [pc, #24]	; (8012264 <OpenContinuousRxCWindow+0x7c>)
 801224a:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 801224e:	4b05      	ldr	r3, [pc, #20]	; (8012264 <OpenContinuousRxCWindow+0x7c>)
 8012250:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 8012254:	bf00      	nop
 8012256:	3704      	adds	r7, #4
 8012258:	46bd      	mov	sp, r7
 801225a:	bd90      	pop	{r4, r7, pc}
 801225c:	20001244 	.word	0x20001244
 8012260:	20001118 	.word	0x20001118
 8012264:	20000d38 	.word	0x20000d38
 8012268:	20001158 	.word	0x20001158
 801226c:	0801fbe4 	.word	0x0801fbe4

08012270 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b088      	sub	sp, #32
 8012274:	af00      	add	r7, sp, #0
 8012276:	60f8      	str	r0, [r7, #12]
 8012278:	60b9      	str	r1, [r7, #8]
 801227a:	603b      	str	r3, [r7, #0]
 801227c:	4613      	mov	r3, r2
 801227e:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8012280:	4b82      	ldr	r3, [pc, #520]	; (801248c <PrepareFrame+0x21c>)
 8012282:	2200      	movs	r2, #0
 8012284:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8012286:	4b81      	ldr	r3, [pc, #516]	; (801248c <PrepareFrame+0x21c>)
 8012288:	2200      	movs	r2, #0
 801228a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 801228e:	2300      	movs	r3, #0
 8012290:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8012292:	2300      	movs	r3, #0
 8012294:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8012296:	2300      	movs	r3, #0
 8012298:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 801229a:	683b      	ldr	r3, [r7, #0]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d101      	bne.n	80122a4 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80122a0:	2300      	movs	r3, #0
 80122a2:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80122a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80122a6:	461a      	mov	r2, r3
 80122a8:	6839      	ldr	r1, [r7, #0]
 80122aa:	4879      	ldr	r0, [pc, #484]	; (8012490 <PrepareFrame+0x220>)
 80122ac:	f008 f903 	bl	801a4b6 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80122b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80122b2:	b2da      	uxtb	r2, r3
 80122b4:	4b75      	ldr	r3, [pc, #468]	; (801248c <PrepareFrame+0x21c>)
 80122b6:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	781a      	ldrb	r2, [r3, #0]
 80122be:	4b73      	ldr	r3, [pc, #460]	; (801248c <PrepareFrame+0x21c>)
 80122c0:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	781b      	ldrb	r3, [r3, #0]
 80122c6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80122ca:	b2db      	uxtb	r3, r3
 80122cc:	2b07      	cmp	r3, #7
 80122ce:	f000 80b9 	beq.w	8012444 <PrepareFrame+0x1d4>
 80122d2:	2b07      	cmp	r3, #7
 80122d4:	f300 80d0 	bgt.w	8012478 <PrepareFrame+0x208>
 80122d8:	2b02      	cmp	r3, #2
 80122da:	d006      	beq.n	80122ea <PrepareFrame+0x7a>
 80122dc:	2b04      	cmp	r3, #4
 80122de:	f040 80cb 	bne.w	8012478 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80122e2:	4b6a      	ldr	r3, [pc, #424]	; (801248c <PrepareFrame+0x21c>)
 80122e4:	2201      	movs	r2, #1
 80122e6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80122ea:	4b68      	ldr	r3, [pc, #416]	; (801248c <PrepareFrame+0x21c>)
 80122ec:	2204      	movs	r2, #4
 80122ee:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80122f2:	4b66      	ldr	r3, [pc, #408]	; (801248c <PrepareFrame+0x21c>)
 80122f4:	4a67      	ldr	r2, [pc, #412]	; (8012494 <PrepareFrame+0x224>)
 80122f6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80122fa:	4b64      	ldr	r3, [pc, #400]	; (801248c <PrepareFrame+0x21c>)
 80122fc:	22ff      	movs	r2, #255	; 0xff
 80122fe:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	781a      	ldrb	r2, [r3, #0]
 8012306:	4b61      	ldr	r3, [pc, #388]	; (801248c <PrepareFrame+0x21c>)
 8012308:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 801230c:	4a5f      	ldr	r2, [pc, #380]	; (801248c <PrepareFrame+0x21c>)
 801230e:	79fb      	ldrb	r3, [r7, #7]
 8012310:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8012314:	4b60      	ldr	r3, [pc, #384]	; (8012498 <PrepareFrame+0x228>)
 8012316:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801231a:	4a5c      	ldr	r2, [pc, #368]	; (801248c <PrepareFrame+0x21c>)
 801231c:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8012320:	68bb      	ldr	r3, [r7, #8]
 8012322:	781a      	ldrb	r2, [r3, #0]
 8012324:	4b59      	ldr	r3, [pc, #356]	; (801248c <PrepareFrame+0x21c>)
 8012326:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 801232a:	4b58      	ldr	r3, [pc, #352]	; (801248c <PrepareFrame+0x21c>)
 801232c:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8012330:	4b56      	ldr	r3, [pc, #344]	; (801248c <PrepareFrame+0x21c>)
 8012332:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8012336:	4b55      	ldr	r3, [pc, #340]	; (801248c <PrepareFrame+0x21c>)
 8012338:	4a55      	ldr	r2, [pc, #340]	; (8012490 <PrepareFrame+0x220>)
 801233a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801233e:	f107 0318 	add.w	r3, r7, #24
 8012342:	4618      	mov	r0, r3
 8012344:	f004 fe66 	bl	8017014 <LoRaMacCryptoGetFCntUp>
 8012348:	4603      	mov	r3, r0
 801234a:	2b00      	cmp	r3, #0
 801234c:	d001      	beq.n	8012352 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801234e:	2312      	movs	r3, #18
 8012350:	e098      	b.n	8012484 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8012352:	69bb      	ldr	r3, [r7, #24]
 8012354:	b29a      	uxth	r2, r3
 8012356:	4b4d      	ldr	r3, [pc, #308]	; (801248c <PrepareFrame+0x21c>)
 8012358:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 801235c:	4b4b      	ldr	r3, [pc, #300]	; (801248c <PrepareFrame+0x21c>)
 801235e:	2200      	movs	r2, #0
 8012360:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8012364:	4b49      	ldr	r3, [pc, #292]	; (801248c <PrepareFrame+0x21c>)
 8012366:	2200      	movs	r2, #0
 8012368:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 801236c:	69bb      	ldr	r3, [r7, #24]
 801236e:	4a47      	ldr	r2, [pc, #284]	; (801248c <PrepareFrame+0x21c>)
 8012370:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012374:	f107 0314 	add.w	r3, r7, #20
 8012378:	4618      	mov	r0, r3
 801237a:	f004 f803 	bl	8016384 <LoRaMacCommandsGetSizeSerializedCmds>
 801237e:	4603      	mov	r3, r0
 8012380:	2b00      	cmp	r3, #0
 8012382:	d001      	beq.n	8012388 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012384:	2313      	movs	r3, #19
 8012386:	e07d      	b.n	8012484 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8012388:	697b      	ldr	r3, [r7, #20]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d076      	beq.n	801247c <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 801238e:	4b42      	ldr	r3, [pc, #264]	; (8012498 <PrepareFrame+0x228>)
 8012390:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012394:	4618      	mov	r0, r3
 8012396:	f7fe fdb5 	bl	8010f04 <GetMaxAppPayloadWithoutFOptsLength>
 801239a:	4603      	mov	r3, r0
 801239c:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801239e:	4b3b      	ldr	r3, [pc, #236]	; (801248c <PrepareFrame+0x21c>)
 80123a0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d01d      	beq.n	80123e4 <PrepareFrame+0x174>
 80123a8:	697b      	ldr	r3, [r7, #20]
 80123aa:	2b0f      	cmp	r3, #15
 80123ac:	d81a      	bhi.n	80123e4 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80123ae:	f107 0314 	add.w	r3, r7, #20
 80123b2:	4a3a      	ldr	r2, [pc, #232]	; (801249c <PrepareFrame+0x22c>)
 80123b4:	4619      	mov	r1, r3
 80123b6:	200f      	movs	r0, #15
 80123b8:	f003 fffa 	bl	80163b0 <LoRaMacCommandsSerializeCmds>
 80123bc:	4603      	mov	r3, r0
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d001      	beq.n	80123c6 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80123c2:	2313      	movs	r3, #19
 80123c4:	e05e      	b.n	8012484 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80123c6:	697b      	ldr	r3, [r7, #20]
 80123c8:	f003 030f 	and.w	r3, r3, #15
 80123cc:	b2d9      	uxtb	r1, r3
 80123ce:	68ba      	ldr	r2, [r7, #8]
 80123d0:	7813      	ldrb	r3, [r2, #0]
 80123d2:	f361 0303 	bfi	r3, r1, #0, #4
 80123d6:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80123d8:	68bb      	ldr	r3, [r7, #8]
 80123da:	781a      	ldrb	r2, [r3, #0]
 80123dc:	4b2b      	ldr	r3, [pc, #172]	; (801248c <PrepareFrame+0x21c>)
 80123de:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80123e2:	e04b      	b.n	801247c <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80123e4:	4b29      	ldr	r3, [pc, #164]	; (801248c <PrepareFrame+0x21c>)
 80123e6:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d010      	beq.n	8012410 <PrepareFrame+0x1a0>
 80123ee:	697b      	ldr	r3, [r7, #20]
 80123f0:	2b0f      	cmp	r3, #15
 80123f2:	d90d      	bls.n	8012410 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80123f4:	7ffb      	ldrb	r3, [r7, #31]
 80123f6:	f107 0114 	add.w	r1, r7, #20
 80123fa:	4a29      	ldr	r2, [pc, #164]	; (80124a0 <PrepareFrame+0x230>)
 80123fc:	4618      	mov	r0, r3
 80123fe:	f003 ffd7 	bl	80163b0 <LoRaMacCommandsSerializeCmds>
 8012402:	4603      	mov	r3, r0
 8012404:	2b00      	cmp	r3, #0
 8012406:	d001      	beq.n	801240c <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012408:	2313      	movs	r3, #19
 801240a:	e03b      	b.n	8012484 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 801240c:	230a      	movs	r3, #10
 801240e:	e039      	b.n	8012484 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012410:	7ffb      	ldrb	r3, [r7, #31]
 8012412:	f107 0114 	add.w	r1, r7, #20
 8012416:	4a22      	ldr	r2, [pc, #136]	; (80124a0 <PrepareFrame+0x230>)
 8012418:	4618      	mov	r0, r3
 801241a:	f003 ffc9 	bl	80163b0 <LoRaMacCommandsSerializeCmds>
 801241e:	4603      	mov	r3, r0
 8012420:	2b00      	cmp	r3, #0
 8012422:	d001      	beq.n	8012428 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012424:	2313      	movs	r3, #19
 8012426:	e02d      	b.n	8012484 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8012428:	4b18      	ldr	r3, [pc, #96]	; (801248c <PrepareFrame+0x21c>)
 801242a:	2200      	movs	r2, #0
 801242c:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8012430:	4b16      	ldr	r3, [pc, #88]	; (801248c <PrepareFrame+0x21c>)
 8012432:	4a1b      	ldr	r2, [pc, #108]	; (80124a0 <PrepareFrame+0x230>)
 8012434:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	b2da      	uxtb	r2, r3
 801243c:	4b13      	ldr	r3, [pc, #76]	; (801248c <PrepareFrame+0x21c>)
 801243e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8012442:	e01b      	b.n	801247c <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d01a      	beq.n	8012480 <PrepareFrame+0x210>
 801244a:	4b10      	ldr	r3, [pc, #64]	; (801248c <PrepareFrame+0x21c>)
 801244c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8012450:	2b00      	cmp	r3, #0
 8012452:	d015      	beq.n	8012480 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8012454:	4813      	ldr	r0, [pc, #76]	; (80124a4 <PrepareFrame+0x234>)
 8012456:	4b0d      	ldr	r3, [pc, #52]	; (801248c <PrepareFrame+0x21c>)
 8012458:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801245c:	b29b      	uxth	r3, r3
 801245e:	461a      	mov	r2, r3
 8012460:	6839      	ldr	r1, [r7, #0]
 8012462:	f008 f828 	bl	801a4b6 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8012466:	4b09      	ldr	r3, [pc, #36]	; (801248c <PrepareFrame+0x21c>)
 8012468:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801246c:	b29b      	uxth	r3, r3
 801246e:	3301      	adds	r3, #1
 8012470:	b29a      	uxth	r2, r3
 8012472:	4b06      	ldr	r3, [pc, #24]	; (801248c <PrepareFrame+0x21c>)
 8012474:	801a      	strh	r2, [r3, #0]
            }
            break;
 8012476:	e003      	b.n	8012480 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012478:	2302      	movs	r3, #2
 801247a:	e003      	b.n	8012484 <PrepareFrame+0x214>
            break;
 801247c:	bf00      	nop
 801247e:	e000      	b.n	8012482 <PrepareFrame+0x212>
            break;
 8012480:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8012482:	2300      	movs	r3, #0
}
 8012484:	4618      	mov	r0, r3
 8012486:	3720      	adds	r7, #32
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}
 801248c:	20000d38 	.word	0x20000d38
 8012490:	20000e70 	.word	0x20000e70
 8012494:	20000d3a 	.word	0x20000d3a
 8012498:	20001244 	.word	0x20001244
 801249c:	20000e50 	.word	0x20000e50
 80124a0:	200011c4 	.word	0x200011c4
 80124a4:	20000d3b 	.word	0x20000d3b

080124a8 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b08a      	sub	sp, #40	; 0x28
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	4603      	mov	r3, r0
 80124b0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80124b2:	2303      	movs	r3, #3
 80124b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80124b8:	2300      	movs	r3, #0
 80124ba:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80124bc:	79fb      	ldrb	r3, [r7, #7]
 80124be:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80124c0:	4b47      	ldr	r3, [pc, #284]	; (80125e0 <SendFrameOnChannel+0x138>)
 80124c2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80124c6:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80124c8:	4b45      	ldr	r3, [pc, #276]	; (80125e0 <SendFrameOnChannel+0x138>)
 80124ca:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80124ce:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80124d0:	4b43      	ldr	r3, [pc, #268]	; (80125e0 <SendFrameOnChannel+0x138>)
 80124d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80124d4:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80124d6:	4b42      	ldr	r3, [pc, #264]	; (80125e0 <SendFrameOnChannel+0x138>)
 80124d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80124da:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80124dc:	4b41      	ldr	r3, [pc, #260]	; (80125e4 <SendFrameOnChannel+0x13c>)
 80124de:	881b      	ldrh	r3, [r3, #0]
 80124e0:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80124e2:	4b3f      	ldr	r3, [pc, #252]	; (80125e0 <SendFrameOnChannel+0x138>)
 80124e4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80124e8:	f107 020f 	add.w	r2, r7, #15
 80124ec:	f107 0110 	add.w	r1, r7, #16
 80124f0:	4b3d      	ldr	r3, [pc, #244]	; (80125e8 <SendFrameOnChannel+0x140>)
 80124f2:	f005 fcdb 	bl	8017eac <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80124f6:	4b3b      	ldr	r3, [pc, #236]	; (80125e4 <SendFrameOnChannel+0x13c>)
 80124f8:	2201      	movs	r2, #1
 80124fa:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80124fe:	4b38      	ldr	r3, [pc, #224]	; (80125e0 <SendFrameOnChannel+0x138>)
 8012500:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012504:	b2da      	uxtb	r2, r3
 8012506:	4b37      	ldr	r3, [pc, #220]	; (80125e4 <SendFrameOnChannel+0x13c>)
 8012508:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 801250c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8012510:	4b34      	ldr	r3, [pc, #208]	; (80125e4 <SendFrameOnChannel+0x13c>)
 8012512:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 8012516:	79fb      	ldrb	r3, [r7, #7]
 8012518:	4a32      	ldr	r2, [pc, #200]	; (80125e4 <SendFrameOnChannel+0x13c>)
 801251a:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801251e:	4b31      	ldr	r3, [pc, #196]	; (80125e4 <SendFrameOnChannel+0x13c>)
 8012520:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8012524:	4a2f      	ldr	r2, [pc, #188]	; (80125e4 <SendFrameOnChannel+0x13c>)
 8012526:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801252a:	4b2e      	ldr	r3, [pc, #184]	; (80125e4 <SendFrameOnChannel+0x13c>)
 801252c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8012530:	4a2c      	ldr	r2, [pc, #176]	; (80125e4 <SendFrameOnChannel+0x13c>)
 8012532:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8012536:	f003 fa01 	bl	801593c <LoRaMacClassBIsBeaconModeActive>
 801253a:	4603      	mov	r3, r0
 801253c:	2b00      	cmp	r3, #0
 801253e:	d00b      	beq.n	8012558 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8012540:	4b28      	ldr	r3, [pc, #160]	; (80125e4 <SendFrameOnChannel+0x13c>)
 8012542:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8012546:	4618      	mov	r0, r3
 8012548:	f003 fc88 	bl	8015e5c <LoRaMacClassBIsUplinkCollision>
 801254c:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 801254e:	6a3b      	ldr	r3, [r7, #32]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d001      	beq.n	8012558 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8012554:	2310      	movs	r3, #16
 8012556:	e03e      	b.n	80125d6 <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012558:	4b21      	ldr	r3, [pc, #132]	; (80125e0 <SendFrameOnChannel+0x138>)
 801255a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801255e:	2b01      	cmp	r3, #1
 8012560:	d101      	bne.n	8012566 <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8012562:	f003 fcaf 	bl	8015ec4 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8012566:	f003 fa1f 	bl	80159a8 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 801256a:	4b1d      	ldr	r3, [pc, #116]	; (80125e0 <SendFrameOnChannel+0x138>)
 801256c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012570:	b2db      	uxtb	r3, r3
 8012572:	4a1c      	ldr	r2, [pc, #112]	; (80125e4 <SendFrameOnChannel+0x13c>)
 8012574:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 8012578:	4611      	mov	r1, r2
 801257a:	4618      	mov	r0, r3
 801257c:	f7ff fc7c 	bl	8011e78 <SecureFrame>
 8012580:	4603      	mov	r3, r0
 8012582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8012586:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801258a:	2b00      	cmp	r3, #0
 801258c:	d002      	beq.n	8012594 <SendFrameOnChannel+0xec>
    {
        return status;
 801258e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012592:	e020      	b.n	80125d6 <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012594:	4b13      	ldr	r3, [pc, #76]	; (80125e4 <SendFrameOnChannel+0x13c>)
 8012596:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801259a:	f043 0302 	orr.w	r3, r3, #2
 801259e:	4a11      	ldr	r2, [pc, #68]	; (80125e4 <SendFrameOnChannel+0x13c>)
 80125a0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 80125a4:	4b0f      	ldr	r3, [pc, #60]	; (80125e4 <SendFrameOnChannel+0x13c>)
 80125a6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80125aa:	f083 0301 	eor.w	r3, r3, #1
 80125ae:	b2db      	uxtb	r3, r3
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d007      	beq.n	80125c4 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 80125b4:	4b0b      	ldr	r3, [pc, #44]	; (80125e4 <SendFrameOnChannel+0x13c>)
 80125b6:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80125ba:	3301      	adds	r3, #1
 80125bc:	b2da      	uxtb	r2, r3
 80125be:	4b09      	ldr	r3, [pc, #36]	; (80125e4 <SendFrameOnChannel+0x13c>)
 80125c0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80125c4:	4b09      	ldr	r3, [pc, #36]	; (80125ec <SendFrameOnChannel+0x144>)
 80125c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125c8:	4a06      	ldr	r2, [pc, #24]	; (80125e4 <SendFrameOnChannel+0x13c>)
 80125ca:	8812      	ldrh	r2, [r2, #0]
 80125cc:	b2d2      	uxtb	r2, r2
 80125ce:	4611      	mov	r1, r2
 80125d0:	4807      	ldr	r0, [pc, #28]	; (80125f0 <SendFrameOnChannel+0x148>)
 80125d2:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80125d4:	2300      	movs	r3, #0
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	3728      	adds	r7, #40	; 0x28
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd80      	pop	{r7, pc}
 80125de:	bf00      	nop
 80125e0:	20001244 	.word	0x20001244
 80125e4:	20000d38 	.word	0x20000d38
 80125e8:	20001150 	.word	0x20001150
 80125ec:	0801fbe4 	.word	0x0801fbe4
 80125f0:	20000d3a 	.word	0x20000d3a

080125f4 <SetTxContinuousWave>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b086      	sub	sp, #24
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	4603      	mov	r3, r0
 80125fc:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 80125fe:	4b15      	ldr	r3, [pc, #84]	; (8012654 <SetTxContinuousWave+0x60>)
 8012600:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8012604:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012606:	4b14      	ldr	r3, [pc, #80]	; (8012658 <SetTxContinuousWave+0x64>)
 8012608:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801260c:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801260e:	4b12      	ldr	r3, [pc, #72]	; (8012658 <SetTxContinuousWave+0x64>)
 8012610:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012614:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8012616:	4b10      	ldr	r3, [pc, #64]	; (8012658 <SetTxContinuousWave+0x64>)
 8012618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801261a:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801261c:	4b0e      	ldr	r3, [pc, #56]	; (8012658 <SetTxContinuousWave+0x64>)
 801261e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012620:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 8012622:	88fb      	ldrh	r3, [r7, #6]
 8012624:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8012626:	4b0c      	ldr	r3, [pc, #48]	; (8012658 <SetTxContinuousWave+0x64>)
 8012628:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801262c:	f107 0208 	add.w	r2, r7, #8
 8012630:	4611      	mov	r1, r2
 8012632:	4618      	mov	r0, r3
 8012634:	f005 fce9 	bl	801800a <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012638:	4b06      	ldr	r3, [pc, #24]	; (8012654 <SetTxContinuousWave+0x60>)
 801263a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801263e:	f043 0302 	orr.w	r3, r3, #2
 8012642:	4a04      	ldr	r2, [pc, #16]	; (8012654 <SetTxContinuousWave+0x60>)
 8012644:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8012648:	2300      	movs	r3, #0
}
 801264a:	4618      	mov	r0, r3
 801264c:	3718      	adds	r7, #24
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}
 8012652:	bf00      	nop
 8012654:	20000d38 	.word	0x20000d38
 8012658:	20001244 	.word	0x20001244

0801265c <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b082      	sub	sp, #8
 8012660:	af00      	add	r7, sp, #0
 8012662:	4603      	mov	r3, r0
 8012664:	6039      	str	r1, [r7, #0]
 8012666:	80fb      	strh	r3, [r7, #6]
 8012668:	4613      	mov	r3, r2
 801266a:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 801266c:	4b09      	ldr	r3, [pc, #36]	; (8012694 <SetTxContinuousWave1+0x38>)
 801266e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012670:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8012674:	88fa      	ldrh	r2, [r7, #6]
 8012676:	6838      	ldr	r0, [r7, #0]
 8012678:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801267a:	4b07      	ldr	r3, [pc, #28]	; (8012698 <SetTxContinuousWave1+0x3c>)
 801267c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012680:	f043 0302 	orr.w	r3, r3, #2
 8012684:	4a04      	ldr	r2, [pc, #16]	; (8012698 <SetTxContinuousWave1+0x3c>)
 8012686:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801268a:	2300      	movs	r3, #0
}
 801268c:	4618      	mov	r0, r3
 801268e:	3708      	adds	r7, #8
 8012690:	46bd      	mov	sp, r7
 8012692:	bd80      	pop	{r7, pc}
 8012694:	0801fbe4 	.word	0x0801fbe4
 8012698:	20000d38 	.word	0x20000d38

0801269c <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b082      	sub	sp, #8
 80126a0:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 80126a2:	2300      	movs	r3, #0
 80126a4:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80126a6:	4b3e      	ldr	r3, [pc, #248]	; (80127a0 <RestoreNvmData+0x104>)
 80126a8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80126ac:	2b01      	cmp	r3, #1
 80126ae:	d001      	beq.n	80126b4 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 80126b0:	2301      	movs	r3, #1
 80126b2:	e071      	b.n	8012798 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 80126b4:	2124      	movs	r1, #36	; 0x24
 80126b6:	483b      	ldr	r0, [pc, #236]	; (80127a4 <RestoreNvmData+0x108>)
 80126b8:	f007 ff52 	bl	801a560 <Crc32>
 80126bc:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 80126be:	4b39      	ldr	r3, [pc, #228]	; (80127a4 <RestoreNvmData+0x108>)
 80126c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126c2:	687a      	ldr	r2, [r7, #4]
 80126c4:	429a      	cmp	r2, r3
 80126c6:	d001      	beq.n	80126cc <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80126c8:	2317      	movs	r3, #23
 80126ca:	e065      	b.n	8012798 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 80126cc:	2114      	movs	r1, #20
 80126ce:	4836      	ldr	r0, [pc, #216]	; (80127a8 <RestoreNvmData+0x10c>)
 80126d0:	f007 ff46 	bl	801a560 <Crc32>
 80126d4:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 80126d6:	4b33      	ldr	r3, [pc, #204]	; (80127a4 <RestoreNvmData+0x108>)
 80126d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80126da:	687a      	ldr	r2, [r7, #4]
 80126dc:	429a      	cmp	r2, r3
 80126de:	d001      	beq.n	80126e4 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80126e0:	2317      	movs	r3, #23
 80126e2:	e059      	b.n	8012798 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 80126e4:	21dc      	movs	r1, #220	; 0xdc
 80126e6:	4831      	ldr	r0, [pc, #196]	; (80127ac <RestoreNvmData+0x110>)
 80126e8:	f007 ff3a 	bl	801a560 <Crc32>
 80126ec:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 80126ee:	4b2d      	ldr	r3, [pc, #180]	; (80127a4 <RestoreNvmData+0x108>)
 80126f0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80126f4:	687a      	ldr	r2, [r7, #4]
 80126f6:	429a      	cmp	r2, r3
 80126f8:	d001      	beq.n	80126fe <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80126fa:	2317      	movs	r3, #23
 80126fc:	e04c      	b.n	8012798 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 80126fe:	21bc      	movs	r1, #188	; 0xbc
 8012700:	482b      	ldr	r0, [pc, #172]	; (80127b0 <RestoreNvmData+0x114>)
 8012702:	f007 ff2d 	bl	801a560 <Crc32>
 8012706:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8012708:	4b26      	ldr	r3, [pc, #152]	; (80127a4 <RestoreNvmData+0x108>)
 801270a:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801270e:	687a      	ldr	r2, [r7, #4]
 8012710:	429a      	cmp	r2, r3
 8012712:	d001      	beq.n	8012718 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012714:	2317      	movs	r3, #23
 8012716:	e03f      	b.n	8012798 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8012718:	2190      	movs	r1, #144	; 0x90
 801271a:	4826      	ldr	r0, [pc, #152]	; (80127b4 <RestoreNvmData+0x118>)
 801271c:	f007 ff20 	bl	801a560 <Crc32>
 8012720:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8012722:	4b20      	ldr	r3, [pc, #128]	; (80127a4 <RestoreNvmData+0x108>)
 8012724:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012728:	687a      	ldr	r2, [r7, #4]
 801272a:	429a      	cmp	r2, r3
 801272c:	d001      	beq.n	8012732 <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801272e:	2317      	movs	r3, #23
 8012730:	e032      	b.n	8012798 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8012732:	2114      	movs	r1, #20
 8012734:	4820      	ldr	r0, [pc, #128]	; (80127b8 <RestoreNvmData+0x11c>)
 8012736:	f007 ff13 	bl	801a560 <Crc32>
 801273a:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 801273c:	4b19      	ldr	r3, [pc, #100]	; (80127a4 <RestoreNvmData+0x108>)
 801273e:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 8012742:	687a      	ldr	r2, [r7, #4]
 8012744:	429a      	cmp	r2, r3
 8012746:	d001      	beq.n	801274c <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012748:	2317      	movs	r3, #23
 801274a:	e025      	b.n	8012798 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 801274c:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8012750:	4914      	ldr	r1, [pc, #80]	; (80127a4 <RestoreNvmData+0x108>)
 8012752:	481a      	ldr	r0, [pc, #104]	; (80127bc <RestoreNvmData+0x120>)
 8012754:	f007 feaf 	bl	801a4b6 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8012758:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 801275c:	2100      	movs	r1, #0
 801275e:	4811      	ldr	r0, [pc, #68]	; (80127a4 <RestoreNvmData+0x108>)
 8012760:	f007 fee4 	bl	801a52c <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8012764:	4b0e      	ldr	r3, [pc, #56]	; (80127a0 <RestoreNvmData+0x104>)
 8012766:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 801276a:	4b0d      	ldr	r3, [pc, #52]	; (80127a0 <RestoreNvmData+0x104>)
 801276c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8012770:	4b12      	ldr	r3, [pc, #72]	; (80127bc <RestoreNvmData+0x120>)
 8012772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012774:	4a0a      	ldr	r2, [pc, #40]	; (80127a0 <RestoreNvmData+0x104>)
 8012776:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801277a:	4b10      	ldr	r3, [pc, #64]	; (80127bc <RestoreNvmData+0x120>)
 801277c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8012780:	4b07      	ldr	r3, [pc, #28]	; (80127a0 <RestoreNvmData+0x104>)
 8012782:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012786:	4b06      	ldr	r3, [pc, #24]	; (80127a0 <RestoreNvmData+0x104>)
 8012788:	2201      	movs	r2, #1
 801278a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801278e:	4b04      	ldr	r3, [pc, #16]	; (80127a0 <RestoreNvmData+0x104>)
 8012790:	2202      	movs	r2, #2
 8012792:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    return LORAMAC_STATUS_OK;
 8012796:	2300      	movs	r3, #0
}
 8012798:	4618      	mov	r0, r3
 801279a:	3708      	adds	r7, #8
 801279c:	46bd      	mov	sp, r7
 801279e:	bd80      	pop	{r7, pc}
 80127a0:	20000d38 	.word	0x20000d38
 80127a4:	2000196c 	.word	0x2000196c
 80127a8:	20001994 	.word	0x20001994
 80127ac:	200019ac 	.word	0x200019ac
 80127b0:	20001a8c 	.word	0x20001a8c
 80127b4:	20001b4c 	.word	0x20001b4c
 80127b8:	2000207c 	.word	0x2000207c
 80127bc:	20001244 	.word	0x20001244

080127c0 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80127c0:	b480      	push	{r7}
 80127c2:	b083      	sub	sp, #12
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
 80127c8:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d002      	beq.n	80127d6 <DetermineFrameType+0x16>
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d101      	bne.n	80127da <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80127d6:	2303      	movs	r3, #3
 80127d8:	e03b      	b.n	8012852 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	7b1b      	ldrb	r3, [r3, #12]
 80127de:	f003 030f 	and.w	r3, r3, #15
 80127e2:	b2db      	uxtb	r3, r3
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d008      	beq.n	80127fa <DetermineFrameType+0x3a>
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d003      	beq.n	80127fa <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80127f2:	683b      	ldr	r3, [r7, #0]
 80127f4:	2200      	movs	r2, #0
 80127f6:	701a      	strb	r2, [r3, #0]
 80127f8:	e02a      	b.n	8012850 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012800:	2b00      	cmp	r3, #0
 8012802:	d103      	bne.n	801280c <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	2201      	movs	r2, #1
 8012808:	701a      	strb	r2, [r3, #0]
 801280a:	e021      	b.n	8012850 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	7b1b      	ldrb	r3, [r3, #12]
 8012810:	f003 030f 	and.w	r3, r3, #15
 8012814:	b2db      	uxtb	r3, r3
 8012816:	2b00      	cmp	r3, #0
 8012818:	d108      	bne.n	801282c <DetermineFrameType+0x6c>
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d103      	bne.n	801282c <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8012824:	683b      	ldr	r3, [r7, #0]
 8012826:	2202      	movs	r2, #2
 8012828:	701a      	strb	r2, [r3, #0]
 801282a:	e011      	b.n	8012850 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	7b1b      	ldrb	r3, [r3, #12]
 8012830:	f003 030f 	and.w	r3, r3, #15
 8012834:	b2db      	uxtb	r3, r3
 8012836:	2b00      	cmp	r3, #0
 8012838:	d108      	bne.n	801284c <DetermineFrameType+0x8c>
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d003      	beq.n	801284c <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8012844:	683b      	ldr	r3, [r7, #0]
 8012846:	2203      	movs	r2, #3
 8012848:	701a      	strb	r2, [r3, #0]
 801284a:	e001      	b.n	8012850 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 801284c:	2318      	movs	r3, #24
 801284e:	e000      	b.n	8012852 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8012850:	2300      	movs	r3, #0
}
 8012852:	4618      	mov	r0, r3
 8012854:	370c      	adds	r7, #12
 8012856:	46bd      	mov	sp, r7
 8012858:	bc80      	pop	{r7}
 801285a:	4770      	bx	lr

0801285c <CheckRetransUnconfirmedUplink>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 801285c:	b480      	push	{r7}
 801285e:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8012860:	4b12      	ldr	r3, [pc, #72]	; (80128ac <CheckRetransUnconfirmedUplink+0x50>)
 8012862:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8012866:	4b12      	ldr	r3, [pc, #72]	; (80128b0 <CheckRetransUnconfirmedUplink+0x54>)
 8012868:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 801286c:	429a      	cmp	r2, r3
 801286e:	d301      	bcc.n	8012874 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8012870:	2301      	movs	r3, #1
 8012872:	e016      	b.n	80128a2 <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012874:	4b0d      	ldr	r3, [pc, #52]	; (80128ac <CheckRetransUnconfirmedUplink+0x50>)
 8012876:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801287a:	f003 0302 	and.w	r3, r3, #2
 801287e:	b2db      	uxtb	r3, r3
 8012880:	2b00      	cmp	r3, #0
 8012882:	d00d      	beq.n	80128a0 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8012884:	4b0a      	ldr	r3, [pc, #40]	; (80128b0 <CheckRetransUnconfirmedUplink+0x54>)
 8012886:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801288a:	2b00      	cmp	r3, #0
 801288c:	d101      	bne.n	8012892 <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 801288e:	2301      	movs	r3, #1
 8012890:	e007      	b.n	80128a2 <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8012892:	4b06      	ldr	r3, [pc, #24]	; (80128ac <CheckRetransUnconfirmedUplink+0x50>)
 8012894:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8012898:	2b00      	cmp	r3, #0
 801289a:	d101      	bne.n	80128a0 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 801289c:	2301      	movs	r3, #1
 801289e:	e000      	b.n	80128a2 <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 80128a0:	2300      	movs	r3, #0
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bc80      	pop	{r7}
 80128a8:	4770      	bx	lr
 80128aa:	bf00      	nop
 80128ac:	20000d38 	.word	0x20000d38
 80128b0:	20001244 	.word	0x20001244

080128b4 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80128b4:	b480      	push	{r7}
 80128b6:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 80128b8:	4b0e      	ldr	r3, [pc, #56]	; (80128f4 <CheckRetransConfirmedUplink+0x40>)
 80128ba:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 80128be:	4b0d      	ldr	r3, [pc, #52]	; (80128f4 <CheckRetransConfirmedUplink+0x40>)
 80128c0:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 80128c4:	429a      	cmp	r2, r3
 80128c6:	d301      	bcc.n	80128cc <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 80128c8:	2301      	movs	r3, #1
 80128ca:	e00f      	b.n	80128ec <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80128cc:	4b09      	ldr	r3, [pc, #36]	; (80128f4 <CheckRetransConfirmedUplink+0x40>)
 80128ce:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80128d2:	f003 0302 	and.w	r3, r3, #2
 80128d6:	b2db      	uxtb	r3, r3
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d006      	beq.n	80128ea <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80128dc:	4b05      	ldr	r3, [pc, #20]	; (80128f4 <CheckRetransConfirmedUplink+0x40>)
 80128de:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d001      	beq.n	80128ea <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 80128e6:	2301      	movs	r3, #1
 80128e8:	e000      	b.n	80128ec <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 80128ea:	2300      	movs	r3, #0
}
 80128ec:	4618      	mov	r0, r3
 80128ee:	46bd      	mov	sp, r7
 80128f0:	bc80      	pop	{r7}
 80128f2:	4770      	bx	lr
 80128f4:	20000d38 	.word	0x20000d38

080128f8 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80128f8:	b480      	push	{r7}
 80128fa:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80128fc:	4b1a      	ldr	r3, [pc, #104]	; (8012968 <StopRetransmission+0x70>)
 80128fe:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8012902:	f003 0302 	and.w	r3, r3, #2
 8012906:	b2db      	uxtb	r3, r3
 8012908:	2b00      	cmp	r3, #0
 801290a:	d009      	beq.n	8012920 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 801290c:	4b16      	ldr	r3, [pc, #88]	; (8012968 <StopRetransmission+0x70>)
 801290e:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012912:	2b00      	cmp	r3, #0
 8012914:	d00e      	beq.n	8012934 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8012916:	4b14      	ldr	r3, [pc, #80]	; (8012968 <StopRetransmission+0x70>)
 8012918:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 801291c:	2b01      	cmp	r3, #1
 801291e:	d009      	beq.n	8012934 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8012920:	4b12      	ldr	r3, [pc, #72]	; (801296c <StopRetransmission+0x74>)
 8012922:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8012926:	2b00      	cmp	r3, #0
 8012928:	d004      	beq.n	8012934 <StopRetransmission+0x3c>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 801292a:	4b10      	ldr	r3, [pc, #64]	; (801296c <StopRetransmission+0x74>)
 801292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801292e:	3301      	adds	r3, #1
 8012930:	4a0e      	ldr	r2, [pc, #56]	; (801296c <StopRetransmission+0x74>)
 8012932:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8012934:	4b0c      	ldr	r3, [pc, #48]	; (8012968 <StopRetransmission+0x70>)
 8012936:	2200      	movs	r2, #0
 8012938:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 801293c:	4b0a      	ldr	r3, [pc, #40]	; (8012968 <StopRetransmission+0x70>)
 801293e:	2200      	movs	r2, #0
 8012940:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8012944:	4b08      	ldr	r3, [pc, #32]	; (8012968 <StopRetransmission+0x70>)
 8012946:	2200      	movs	r2, #0
 8012948:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801294c:	4b06      	ldr	r3, [pc, #24]	; (8012968 <StopRetransmission+0x70>)
 801294e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012952:	f023 0302 	bic.w	r3, r3, #2
 8012956:	4a04      	ldr	r2, [pc, #16]	; (8012968 <StopRetransmission+0x70>)
 8012958:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 801295c:	2301      	movs	r3, #1
}
 801295e:	4618      	mov	r0, r3
 8012960:	46bd      	mov	sp, r7
 8012962:	bc80      	pop	{r7}
 8012964:	4770      	bx	lr
 8012966:	bf00      	nop
 8012968:	20000d38 	.word	0x20000d38
 801296c:	20001244 	.word	0x20001244

08012970 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b082      	sub	sp, #8
 8012974:	af00      	add	r7, sp, #0
 8012976:	4603      	mov	r3, r0
 8012978:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 801297a:	4b0b      	ldr	r3, [pc, #44]	; (80129a8 <CallNvmDataChangeCallback+0x38>)
 801297c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012980:	2b00      	cmp	r3, #0
 8012982:	d00c      	beq.n	801299e <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8012984:	4b08      	ldr	r3, [pc, #32]	; (80129a8 <CallNvmDataChangeCallback+0x38>)
 8012986:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801298a:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 801298c:	2b00      	cmp	r3, #0
 801298e:	d006      	beq.n	801299e <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8012990:	4b05      	ldr	r3, [pc, #20]	; (80129a8 <CallNvmDataChangeCallback+0x38>)
 8012992:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012996:	68db      	ldr	r3, [r3, #12]
 8012998:	88fa      	ldrh	r2, [r7, #6]
 801299a:	4610      	mov	r0, r2
 801299c:	4798      	blx	r3
    }
}
 801299e:	bf00      	nop
 80129a0:	3708      	adds	r7, #8
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}
 80129a6:	bf00      	nop
 80129a8:	20000d38 	.word	0x20000d38

080129ac <AckTimeoutRetriesProcess>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b084      	sub	sp, #16
 80129b0:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 80129b2:	4b1b      	ldr	r3, [pc, #108]	; (8012a20 <AckTimeoutRetriesProcess+0x74>)
 80129b4:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 80129b8:	4b19      	ldr	r3, [pc, #100]	; (8012a20 <AckTimeoutRetriesProcess+0x74>)
 80129ba:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 80129be:	429a      	cmp	r2, r3
 80129c0:	d229      	bcs.n	8012a16 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 80129c2:	4b17      	ldr	r3, [pc, #92]	; (8012a20 <AckTimeoutRetriesProcess+0x74>)
 80129c4:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 80129c8:	3301      	adds	r3, #1
 80129ca:	b2da      	uxtb	r2, r3
 80129cc:	4b14      	ldr	r3, [pc, #80]	; (8012a20 <AckTimeoutRetriesProcess+0x74>)
 80129ce:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 80129d2:	4b13      	ldr	r3, [pc, #76]	; (8012a20 <AckTimeoutRetriesProcess+0x74>)
 80129d4:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 80129d8:	f003 0301 	and.w	r3, r3, #1
 80129dc:	b2db      	uxtb	r3, r3
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d019      	beq.n	8012a16 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80129e2:	2322      	movs	r3, #34	; 0x22
 80129e4:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80129e6:	4b0f      	ldr	r3, [pc, #60]	; (8012a24 <AckTimeoutRetriesProcess+0x78>)
 80129e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80129ec:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80129ee:	4b0d      	ldr	r3, [pc, #52]	; (8012a24 <AckTimeoutRetriesProcess+0x78>)
 80129f0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80129f4:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80129f6:	4b0b      	ldr	r3, [pc, #44]	; (8012a24 <AckTimeoutRetriesProcess+0x78>)
 80129f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80129fc:	f107 0208 	add.w	r2, r7, #8
 8012a00:	4611      	mov	r1, r2
 8012a02:	4618      	mov	r0, r3
 8012a04:	f005 f9ac 	bl	8017d60 <RegionGetPhyParam>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	b25a      	sxtb	r2, r3
 8012a10:	4b04      	ldr	r3, [pc, #16]	; (8012a24 <AckTimeoutRetriesProcess+0x78>)
 8012a12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8012a16:	bf00      	nop
 8012a18:	3710      	adds	r7, #16
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	bd80      	pop	{r7, pc}
 8012a1e:	bf00      	nop
 8012a20:	20000d38 	.word	0x20000d38
 8012a24:	20001244 	.word	0x20001244

08012a28 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b084      	sub	sp, #16
 8012a2c:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8012a2e:	4b14      	ldr	r3, [pc, #80]	; (8012a80 <AckTimeoutRetriesFinalize+0x58>)
 8012a30:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8012a34:	f083 0301 	eor.w	r3, r3, #1
 8012a38:	b2db      	uxtb	r3, r3
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d015      	beq.n	8012a6a <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012a3e:	2302      	movs	r3, #2
 8012a40:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8012a42:	4b10      	ldr	r3, [pc, #64]	; (8012a84 <AckTimeoutRetriesFinalize+0x5c>)
 8012a44:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8012a46:	4b10      	ldr	r3, [pc, #64]	; (8012a88 <AckTimeoutRetriesFinalize+0x60>)
 8012a48:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012a4a:	4b10      	ldr	r3, [pc, #64]	; (8012a8c <AckTimeoutRetriesFinalize+0x64>)
 8012a4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a50:	1d3a      	adds	r2, r7, #4
 8012a52:	4611      	mov	r1, r2
 8012a54:	4618      	mov	r0, r3
 8012a56:	f005 f9ac 	bl	8017db2 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8012a5a:	4b09      	ldr	r3, [pc, #36]	; (8012a80 <AckTimeoutRetriesFinalize+0x58>)
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 8012a62:	4b07      	ldr	r3, [pc, #28]	; (8012a80 <AckTimeoutRetriesFinalize+0x58>)
 8012a64:	2200      	movs	r2, #0
 8012a66:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8012a6a:	4b05      	ldr	r3, [pc, #20]	; (8012a80 <AckTimeoutRetriesFinalize+0x58>)
 8012a6c:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8012a70:	4b03      	ldr	r3, [pc, #12]	; (8012a80 <AckTimeoutRetriesFinalize+0x58>)
 8012a72:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8012a76:	bf00      	nop
 8012a78:	3710      	adds	r7, #16
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	bd80      	pop	{r7, pc}
 8012a7e:	bf00      	nop
 8012a80:	20000d38 	.word	0x20000d38
 8012a84:	20001424 	.word	0x20001424
 8012a88:	200014b8 	.word	0x200014b8
 8012a8c:	20001244 	.word	0x20001244

08012a90 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8012a90:	b480      	push	{r7}
 8012a92:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012a94:	4b0b      	ldr	r3, [pc, #44]	; (8012ac4 <IsRequestPending+0x34>)
 8012a96:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8012a9a:	f003 0304 	and.w	r3, r3, #4
 8012a9e:	b2db      	uxtb	r3, r3
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d107      	bne.n	8012ab4 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8012aa4:	4b07      	ldr	r3, [pc, #28]	; (8012ac4 <IsRequestPending+0x34>)
 8012aa6:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8012aaa:	f003 0301 	and.w	r3, r3, #1
 8012aae:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d001      	beq.n	8012ab8 <IsRequestPending+0x28>
    {
        return 1;
 8012ab4:	2301      	movs	r3, #1
 8012ab6:	e000      	b.n	8012aba <IsRequestPending+0x2a>
    }
    return 0;
 8012ab8:	2300      	movs	r3, #0
}
 8012aba:	4618      	mov	r0, r3
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bc80      	pop	{r7}
 8012ac0:	4770      	bx	lr
 8012ac2:	bf00      	nop
 8012ac4:	20000d38 	.word	0x20000d38

08012ac8 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8012ac8:	b590      	push	{r4, r7, lr}
 8012aca:	b08f      	sub	sp, #60	; 0x3c
 8012acc:	af02      	add	r7, sp, #8
 8012ace:	6178      	str	r0, [r7, #20]
 8012ad0:	6139      	str	r1, [r7, #16]
 8012ad2:	4613      	mov	r3, r2
 8012ad4:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8012ad6:	697b      	ldr	r3, [r7, #20]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d002      	beq.n	8012ae2 <LoRaMacInitialization+0x1a>
 8012adc:	693b      	ldr	r3, [r7, #16]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d101      	bne.n	8012ae6 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012ae2:	2303      	movs	r3, #3
 8012ae4:	e275      	b.n	8012fd2 <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012ae6:	697b      	ldr	r3, [r7, #20]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d00b      	beq.n	8012b06 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8012aee:	697b      	ldr	r3, [r7, #20]
 8012af0:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d007      	beq.n	8012b06 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012af6:	697b      	ldr	r3, [r7, #20]
 8012af8:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d003      	beq.n	8012b06 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8012afe:	697b      	ldr	r3, [r7, #20]
 8012b00:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d101      	bne.n	8012b0a <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012b06:	2303      	movs	r3, #3
 8012b08:	e263      	b.n	8012fd2 <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8012b0a:	7bfb      	ldrb	r3, [r7, #15]
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f005 f917 	bl	8017d40 <RegionIsActive>
 8012b12:	4603      	mov	r3, r0
 8012b14:	f083 0301 	eor.w	r3, r3, #1
 8012b18:	b2db      	uxtb	r3, r3
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d001      	beq.n	8012b22 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8012b1e:	2309      	movs	r3, #9
 8012b20:	e257      	b.n	8012fd2 <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8012b22:	6978      	ldr	r0, [r7, #20]
 8012b24:	f003 fd8e 	bl	8016644 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8012b28:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8012b2c:	2100      	movs	r1, #0
 8012b2e:	48c7      	ldr	r0, [pc, #796]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012b30:	f007 fcfc 	bl	801a52c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8012b34:	f240 520c 	movw	r2, #1292	; 0x50c
 8012b38:	2100      	movs	r1, #0
 8012b3a:	48c5      	ldr	r0, [pc, #788]	; (8012e50 <LoRaMacInitialization+0x388>)
 8012b3c:	f007 fcf6 	bl	801a52c <memset1>

    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8012b40:	4bc3      	ldr	r3, [pc, #780]	; (8012e50 <LoRaMacInitialization+0x388>)
 8012b42:	2201      	movs	r2, #1
 8012b44:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8012b48:	4bc1      	ldr	r3, [pc, #772]	; (8012e50 <LoRaMacInitialization+0x388>)
 8012b4a:	2201      	movs	r2, #1
 8012b4c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8012b50:	4abe      	ldr	r2, [pc, #760]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012b52:	7bfb      	ldrb	r3, [r7, #15]
 8012b54:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8012b58:	4bbc      	ldr	r3, [pc, #752]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8012b60:	4bba      	ldr	r3, [pc, #744]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012b62:	2200      	movs	r2, #0
 8012b64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8012b68:	4bb8      	ldr	r3, [pc, #736]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012b6a:	4aba      	ldr	r2, [pc, #744]	; (8012e54 <LoRaMacInitialization+0x38c>)
 8012b6c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8012b70:	230f      	movs	r3, #15
 8012b72:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012b76:	4bb5      	ldr	r3, [pc, #724]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012b78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012b7c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012b80:	4611      	mov	r1, r2
 8012b82:	4618      	mov	r0, r3
 8012b84:	f005 f8ec 	bl	8017d60 <RegionGetPhyParam>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8012b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	bf14      	ite	ne
 8012b92:	2301      	movne	r3, #1
 8012b94:	2300      	moveq	r3, #0
 8012b96:	b2da      	uxtb	r2, r3
 8012b98:	4bac      	ldr	r3, [pc, #688]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012b9a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8012b9e:	230a      	movs	r3, #10
 8012ba0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ba4:	4ba9      	ldr	r3, [pc, #676]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012baa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012bae:	4611      	mov	r1, r2
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f005 f8d5 	bl	8017d60 <RegionGetPhyParam>
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8012bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bbc:	b25a      	sxtb	r2, r3
 8012bbe:	4ba3      	ldr	r3, [pc, #652]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012bc0:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8012bc4:	2306      	movs	r3, #6
 8012bc6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012bca:	4ba0      	ldr	r3, [pc, #640]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012bcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012bd0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012bd4:	4611      	mov	r1, r2
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f005 f8c2 	bl	8017d60 <RegionGetPhyParam>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8012be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be2:	b25a      	sxtb	r2, r3
 8012be4:	4b99      	ldr	r3, [pc, #612]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012be6:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8012bea:	2310      	movs	r3, #16
 8012bec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012bf0:	4b96      	ldr	r3, [pc, #600]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012bf6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012bfa:	4611      	mov	r1, r2
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f005 f8af 	bl	8017d60 <RegionGetPhyParam>
 8012c02:	4603      	mov	r3, r0
 8012c04:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8012c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c08:	4a90      	ldr	r2, [pc, #576]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012c0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8012c0e:	2311      	movs	r3, #17
 8012c10:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c14:	4b8d      	ldr	r3, [pc, #564]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012c16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012c1e:	4611      	mov	r1, r2
 8012c20:	4618      	mov	r0, r3
 8012c22:	f005 f89d 	bl	8017d60 <RegionGetPhyParam>
 8012c26:	4603      	mov	r3, r0
 8012c28:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8012c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c2c:	4a87      	ldr	r2, [pc, #540]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012c2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8012c32:	2312      	movs	r3, #18
 8012c34:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c38:	4b84      	ldr	r3, [pc, #528]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012c42:	4611      	mov	r1, r2
 8012c44:	4618      	mov	r0, r3
 8012c46:	f005 f88b 	bl	8017d60 <RegionGetPhyParam>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8012c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c50:	4a7e      	ldr	r2, [pc, #504]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012c52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8012c56:	2313      	movs	r3, #19
 8012c58:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c5c:	4b7b      	ldr	r3, [pc, #492]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012c66:	4611      	mov	r1, r2
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f005 f879 	bl	8017d60 <RegionGetPhyParam>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8012c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c74:	4a75      	ldr	r2, [pc, #468]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012c76:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8012c7a:	2314      	movs	r3, #20
 8012c7c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c80:	4b72      	ldr	r3, [pc, #456]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012c82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012c8a:	4611      	mov	r1, r2
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f005 f867 	bl	8017d60 <RegionGetPhyParam>
 8012c92:	4603      	mov	r3, r0
 8012c94:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8012c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c98:	4a6c      	ldr	r2, [pc, #432]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012c9a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8012c9e:	2317      	movs	r3, #23
 8012ca0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ca4:	4b69      	ldr	r3, [pc, #420]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012caa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012cae:	4611      	mov	r1, r2
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f005 f855 	bl	8017d60 <RegionGetPhyParam>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8012cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cbc:	b2da      	uxtb	r2, r3
 8012cbe:	4b63      	ldr	r3, [pc, #396]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012cc0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8012cc4:	2318      	movs	r3, #24
 8012cc6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012cca:	4b60      	ldr	r3, [pc, #384]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012ccc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012cd0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012cd4:	4611      	mov	r1, r2
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	f005 f842 	bl	8017d60 <RegionGetPhyParam>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8012ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ce2:	4a5a      	ldr	r2, [pc, #360]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012ce4:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8012ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cea:	4a58      	ldr	r2, [pc, #352]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012cec:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8012cf0:	2319      	movs	r3, #25
 8012cf2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012cf6:	4b55      	ldr	r3, [pc, #340]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012cf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012cfc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012d00:	4611      	mov	r1, r2
 8012d02:	4618      	mov	r0, r3
 8012d04:	f005 f82c 	bl	8017d60 <RegionGetPhyParam>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8012d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d0e:	b2da      	uxtb	r2, r3
 8012d10:	4b4e      	ldr	r3, [pc, #312]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012d12:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8012d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d18:	b2da      	uxtb	r2, r3
 8012d1a:	4b4c      	ldr	r3, [pc, #304]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012d1c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8012d20:	231e      	movs	r3, #30
 8012d22:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d26:	4b49      	ldr	r3, [pc, #292]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012d28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012d2c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012d30:	4611      	mov	r1, r2
 8012d32:	4618      	mov	r0, r3
 8012d34:	f005 f814 	bl	8017d60 <RegionGetPhyParam>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8012d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d3e:	b2da      	uxtb	r2, r3
 8012d40:	4b42      	ldr	r3, [pc, #264]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012d42:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8012d46:	231f      	movs	r3, #31
 8012d48:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d4c:	4b3f      	ldr	r3, [pc, #252]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012d4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012d52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012d56:	4611      	mov	r1, r2
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f005 f801 	bl	8017d60 <RegionGetPhyParam>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8012d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d64:	b2da      	uxtb	r2, r3
 8012d66:	4b39      	ldr	r3, [pc, #228]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012d68:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8012d6c:	2320      	movs	r3, #32
 8012d6e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d72:	4b36      	ldr	r3, [pc, #216]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012d74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012d78:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012d7c:	4611      	mov	r1, r2
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f004 ffee 	bl	8017d60 <RegionGetPhyParam>
 8012d84:	4603      	mov	r3, r0
 8012d86:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8012d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d8a:	4a30      	ldr	r2, [pc, #192]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012d8c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8012d90:	2321      	movs	r3, #33	; 0x21
 8012d92:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d96:	4b2d      	ldr	r3, [pc, #180]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012d98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012d9c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012da0:	4611      	mov	r1, r2
 8012da2:	4618      	mov	r0, r3
 8012da4:	f004 ffdc 	bl	8017d60 <RegionGetPhyParam>
 8012da8:	4603      	mov	r3, r0
 8012daa:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8012dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dae:	4a27      	ldr	r2, [pc, #156]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012db0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8012db4:	230b      	movs	r3, #11
 8012db6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012dba:	4b24      	ldr	r3, [pc, #144]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012dbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012dc0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012dc4:	4611      	mov	r1, r2
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	f004 ffca 	bl	8017d60 <RegionGetPhyParam>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8012dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dd2:	b29a      	uxth	r2, r3
 8012dd4:	4b1e      	ldr	r3, [pc, #120]	; (8012e50 <LoRaMacInitialization+0x388>)
 8012dd6:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8012dda:	230c      	movs	r3, #12
 8012ddc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012de0:	4b1a      	ldr	r3, [pc, #104]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012de6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012dea:	4611      	mov	r1, r2
 8012dec:	4618      	mov	r0, r3
 8012dee:	f004 ffb7 	bl	8017d60 <RegionGetPhyParam>
 8012df2:	4603      	mov	r3, r0
 8012df4:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8012df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df8:	b29a      	uxth	r2, r3
 8012dfa:	4b15      	ldr	r3, [pc, #84]	; (8012e50 <LoRaMacInitialization+0x388>)
 8012dfc:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8012e00:	4b12      	ldr	r3, [pc, #72]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012e02:	2201      	movs	r2, #1
 8012e04:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8012e08:	4b10      	ldr	r3, [pc, #64]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012e0a:	220a      	movs	r2, #10
 8012e0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8012e10:	4b0e      	ldr	r3, [pc, #56]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012e12:	2206      	movs	r2, #6
 8012e14:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8012e18:	4b0c      	ldr	r3, [pc, #48]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012e1e:	4a0b      	ldr	r2, [pc, #44]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012e20:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8012e22:	4b0a      	ldr	r3, [pc, #40]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012e24:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8012e28:	4b08      	ldr	r3, [pc, #32]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012e2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8012e2e:	4b07      	ldr	r3, [pc, #28]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e34:	4a05      	ldr	r2, [pc, #20]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012e36:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8012e38:	4b04      	ldr	r3, [pc, #16]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012e3e:	4a03      	ldr	r2, [pc, #12]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012e40:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8012e42:	4b02      	ldr	r3, [pc, #8]	; (8012e4c <LoRaMacInitialization+0x384>)
 8012e44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012e48:	e006      	b.n	8012e58 <LoRaMacInitialization+0x390>
 8012e4a:	bf00      	nop
 8012e4c:	20001244 	.word	0x20001244
 8012e50:	20000d38 	.word	0x20000d38
 8012e54:	01000300 	.word	0x01000300
 8012e58:	4a60      	ldr	r2, [pc, #384]	; (8012fdc <LoRaMacInitialization+0x514>)
 8012e5a:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8012e5c:	4b5f      	ldr	r3, [pc, #380]	; (8012fdc <LoRaMacInitialization+0x514>)
 8012e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012e62:	4a5e      	ldr	r2, [pc, #376]	; (8012fdc <LoRaMacInitialization+0x514>)
 8012e64:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8012e66:	4b5d      	ldr	r3, [pc, #372]	; (8012fdc <LoRaMacInitialization+0x514>)
 8012e68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012e6c:	4a5b      	ldr	r2, [pc, #364]	; (8012fdc <LoRaMacInitialization+0x514>)
 8012e6e:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8012e70:	4b5a      	ldr	r3, [pc, #360]	; (8012fdc <LoRaMacInitialization+0x514>)
 8012e72:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 8012e76:	4b59      	ldr	r3, [pc, #356]	; (8012fdc <LoRaMacInitialization+0x514>)
 8012e78:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8012e82:	4b57      	ldr	r3, [pc, #348]	; (8012fe0 <LoRaMacInitialization+0x518>)
 8012e84:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8012e86:	4b57      	ldr	r3, [pc, #348]	; (8012fe4 <LoRaMacInitialization+0x51c>)
 8012e88:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012e8a:	4b54      	ldr	r3, [pc, #336]	; (8012fdc <LoRaMacInitialization+0x514>)
 8012e8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012e90:	f107 0218 	add.w	r2, r7, #24
 8012e94:	4611      	mov	r1, r2
 8012e96:	4618      	mov	r0, r3
 8012e98:	f004 ff8b 	bl	8017db2 <RegionInitDefaults>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8012e9c:	4a52      	ldr	r2, [pc, #328]	; (8012fe8 <LoRaMacInitialization+0x520>)
 8012e9e:	693b      	ldr	r3, [r7, #16]
 8012ea0:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8012ea4:	f7ff f87e 	bl	8011fa4 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8012ea8:	4b4c      	ldr	r3, [pc, #304]	; (8012fdc <LoRaMacInitialization+0x514>)
 8012eaa:	2201      	movs	r2, #1
 8012eac:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 8012eb0:	4a4d      	ldr	r2, [pc, #308]	; (8012fe8 <LoRaMacInitialization+0x520>)
 8012eb2:	697b      	ldr	r3, [r7, #20]
 8012eb4:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8012eb8:	4b4b      	ldr	r3, [pc, #300]	; (8012fe8 <LoRaMacInitialization+0x520>)
 8012eba:	2200      	movs	r2, #0
 8012ebc:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    MacCtx.MacState = LORAMAC_STOPPED;
 8012ec0:	4b49      	ldr	r3, [pc, #292]	; (8012fe8 <LoRaMacInitialization+0x520>)
 8012ec2:	2201      	movs	r2, #1
 8012ec4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8012ec8:	4b44      	ldr	r3, [pc, #272]	; (8012fdc <LoRaMacInitialization+0x514>)
 8012eca:	2200      	movs	r2, #0
 8012ecc:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8012ece:	4b43      	ldr	r3, [pc, #268]	; (8012fdc <LoRaMacInitialization+0x514>)
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	9300      	str	r3, [sp, #0]
 8012ed8:	4b44      	ldr	r3, [pc, #272]	; (8012fec <LoRaMacInitialization+0x524>)
 8012eda:	2200      	movs	r2, #0
 8012edc:	f04f 31ff 	mov.w	r1, #4294967295
 8012ee0:	4843      	ldr	r0, [pc, #268]	; (8012ff0 <LoRaMacInitialization+0x528>)
 8012ee2:	f00b fb8f 	bl	801e604 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	9300      	str	r3, [sp, #0]
 8012eea:	4b42      	ldr	r3, [pc, #264]	; (8012ff4 <LoRaMacInitialization+0x52c>)
 8012eec:	2200      	movs	r2, #0
 8012eee:	f04f 31ff 	mov.w	r1, #4294967295
 8012ef2:	4841      	ldr	r0, [pc, #260]	; (8012ff8 <LoRaMacInitialization+0x530>)
 8012ef4:	f00b fb86 	bl	801e604 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8012ef8:	2300      	movs	r3, #0
 8012efa:	9300      	str	r3, [sp, #0]
 8012efc:	4b3f      	ldr	r3, [pc, #252]	; (8012ffc <LoRaMacInitialization+0x534>)
 8012efe:	2200      	movs	r2, #0
 8012f00:	f04f 31ff 	mov.w	r1, #4294967295
 8012f04:	483e      	ldr	r0, [pc, #248]	; (8013000 <LoRaMacInitialization+0x538>)
 8012f06:	f00b fb7d 	bl	801e604 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	9300      	str	r3, [sp, #0]
 8012f0e:	4b3d      	ldr	r3, [pc, #244]	; (8013004 <LoRaMacInitialization+0x53c>)
 8012f10:	2200      	movs	r2, #0
 8012f12:	f04f 31ff 	mov.w	r1, #4294967295
 8012f16:	483c      	ldr	r0, [pc, #240]	; (8013008 <LoRaMacInitialization+0x540>)
 8012f18:	f00b fb74 	bl	801e604 <UTIL_TIMER_Create>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8012f1c:	4c2f      	ldr	r4, [pc, #188]	; (8012fdc <LoRaMacInitialization+0x514>)
 8012f1e:	463b      	mov	r3, r7
 8012f20:	4618      	mov	r0, r3
 8012f22:	f00a fedf 	bl	801dce4 <SysTimeGetMcuTime>
 8012f26:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8012f2a:	463a      	mov	r2, r7
 8012f2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012f30:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8012f34:	4b2c      	ldr	r3, [pc, #176]	; (8012fe8 <LoRaMacInitialization+0x520>)
 8012f36:	4a35      	ldr	r2, [pc, #212]	; (801300c <LoRaMacInitialization+0x544>)
 8012f38:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8012f3c:	4b2a      	ldr	r3, [pc, #168]	; (8012fe8 <LoRaMacInitialization+0x520>)
 8012f3e:	4a34      	ldr	r2, [pc, #208]	; (8013010 <LoRaMacInitialization+0x548>)
 8012f40:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8012f44:	4b28      	ldr	r3, [pc, #160]	; (8012fe8 <LoRaMacInitialization+0x520>)
 8012f46:	4a33      	ldr	r2, [pc, #204]	; (8013014 <LoRaMacInitialization+0x54c>)
 8012f48:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8012f4c:	4b26      	ldr	r3, [pc, #152]	; (8012fe8 <LoRaMacInitialization+0x520>)
 8012f4e:	4a32      	ldr	r2, [pc, #200]	; (8013018 <LoRaMacInitialization+0x550>)
 8012f50:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8012f54:	4b24      	ldr	r3, [pc, #144]	; (8012fe8 <LoRaMacInitialization+0x520>)
 8012f56:	4a31      	ldr	r2, [pc, #196]	; (801301c <LoRaMacInitialization+0x554>)
 8012f58:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8012f5c:	4b30      	ldr	r3, [pc, #192]	; (8013020 <LoRaMacInitialization+0x558>)
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	4830      	ldr	r0, [pc, #192]	; (8013024 <LoRaMacInitialization+0x55c>)
 8012f62:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8012f64:	693b      	ldr	r3, [r7, #16]
 8012f66:	689b      	ldr	r3, [r3, #8]
 8012f68:	4619      	mov	r1, r3
 8012f6a:	482f      	ldr	r0, [pc, #188]	; (8013028 <LoRaMacInitialization+0x560>)
 8012f6c:	f7fa fd20 	bl	800d9b0 <SecureElementInit>
 8012f70:	4603      	mov	r3, r0
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d001      	beq.n	8012f7a <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012f76:	2311      	movs	r3, #17
 8012f78:	e02b      	b.n	8012fd2 <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8012f7a:	4818      	ldr	r0, [pc, #96]	; (8012fdc <LoRaMacInitialization+0x514>)
 8012f7c:	f004 f80e 	bl	8016f9c <LoRaMacCryptoInit>
 8012f80:	4603      	mov	r3, r0
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d001      	beq.n	8012f8a <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012f86:	2311      	movs	r3, #17
 8012f88:	e023      	b.n	8012fd2 <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8012f8a:	f003 f92d 	bl	80161e8 <LoRaMacCommandsInit>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d001      	beq.n	8012f98 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012f94:	2313      	movs	r3, #19
 8012f96:	e01c      	b.n	8012fd2 <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8012f98:	4824      	ldr	r0, [pc, #144]	; (801302c <LoRaMacInitialization+0x564>)
 8012f9a:	f004 f8c9 	bl	8017130 <LoRaMacCryptoSetMulticastReference>
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d001      	beq.n	8012fa8 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012fa4:	2311      	movs	r3, #17
 8012fa6:	e014      	b.n	8012fd2 <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8012fa8:	4b1d      	ldr	r3, [pc, #116]	; (8013020 <LoRaMacInitialization+0x558>)
 8012faa:	695b      	ldr	r3, [r3, #20]
 8012fac:	4798      	blx	r3
 8012fae:	4603      	mov	r3, r0
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	f007 fa5b 	bl	801a46c <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012fb6:	4b1a      	ldr	r3, [pc, #104]	; (8013020 <LoRaMacInitialization+0x558>)
 8012fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012fba:	4a08      	ldr	r2, [pc, #32]	; (8012fdc <LoRaMacInitialization+0x514>)
 8012fbc:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8012fc0:	4610      	mov	r0, r2
 8012fc2:	4798      	blx	r3
    Radio.Sleep( );
 8012fc4:	4b16      	ldr	r3, [pc, #88]	; (8013020 <LoRaMacInitialization+0x558>)
 8012fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fc8:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012fca:	2001      	movs	r0, #1
 8012fcc:	f7fd faf2 	bl	80105b4 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8012fd0:	2300      	movs	r3, #0
}
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	3734      	adds	r7, #52	; 0x34
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	bd90      	pop	{r4, r7, pc}
 8012fda:	bf00      	nop
 8012fdc:	20001244 	.word	0x20001244
 8012fe0:	20001424 	.word	0x20001424
 8012fe4:	200014b8 	.word	0x200014b8
 8012fe8:	20000d38 	.word	0x20000d38
 8012fec:	08010b21 	.word	0x08010b21
 8012ff0:	200010a0 	.word	0x200010a0
 8012ff4:	08010b95 	.word	0x08010b95
 8012ff8:	200010b8 	.word	0x200010b8
 8012ffc:	08010c01 	.word	0x08010c01
 8013000:	200010d0 	.word	0x200010d0
 8013004:	08010c75 	.word	0x08010c75
 8013008:	20001130 	.word	0x20001130
 801300c:	0800f731 	.word	0x0800f731
 8013010:	0800f7a9 	.word	0x0800f7a9
 8013014:	0800f881 	.word	0x0800f881
 8013018:	0800f835 	.word	0x0800f835
 801301c:	0800f8bd 	.word	0x0800f8bd
 8013020:	0801fbe4 	.word	0x0801fbe4
 8013024:	20001084 	.word	0x20001084
 8013028:	20001364 	.word	0x20001364
 801302c:	2000131c 	.word	0x2000131c

08013030 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8013030:	b480      	push	{r7}
 8013032:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8013034:	4b04      	ldr	r3, [pc, #16]	; (8013048 <LoRaMacStart+0x18>)
 8013036:	2200      	movs	r2, #0
 8013038:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 801303c:	2300      	movs	r3, #0
}
 801303e:	4618      	mov	r0, r3
 8013040:	46bd      	mov	sp, r7
 8013042:	bc80      	pop	{r7}
 8013044:	4770      	bx	lr
 8013046:	bf00      	nop
 8013048:	20000d38 	.word	0x20000d38

0801304c <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 801304c:	b580      	push	{r7, lr}
 801304e:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8013050:	f7fd fa9a 	bl	8010588 <LoRaMacIsBusy>
 8013054:	4603      	mov	r3, r0
 8013056:	f083 0301 	eor.w	r3, r3, #1
 801305a:	b2db      	uxtb	r3, r3
 801305c:	2b00      	cmp	r3, #0
 801305e:	d005      	beq.n	801306c <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 8013060:	4b07      	ldr	r3, [pc, #28]	; (8013080 <LoRaMacStop+0x34>)
 8013062:	2201      	movs	r2, #1
 8013064:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8013068:	2300      	movs	r3, #0
 801306a:	e007      	b.n	801307c <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 801306c:	4b04      	ldr	r3, [pc, #16]	; (8013080 <LoRaMacStop+0x34>)
 801306e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013072:	2b01      	cmp	r3, #1
 8013074:	d101      	bne.n	801307a <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 8013076:	2300      	movs	r3, #0
 8013078:	e000      	b.n	801307c <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 801307a:	2301      	movs	r3, #1
}
 801307c:	4618      	mov	r0, r3
 801307e:	bd80      	pop	{r7, pc}
 8013080:	20000d38 	.word	0x20000d38

08013084 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8013084:	b580      	push	{r7, lr}
 8013086:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8013088:	4812      	ldr	r0, [pc, #72]	; (80130d4 <LoRaMacHalt+0x50>)
 801308a:	f00b fb5f 	bl	801e74c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 801308e:	4812      	ldr	r0, [pc, #72]	; (80130d8 <LoRaMacHalt+0x54>)
 8013090:	f00b fb5c 	bl	801e74c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8013094:	4811      	ldr	r0, [pc, #68]	; (80130dc <LoRaMacHalt+0x58>)
 8013096:	f00b fb59 	bl	801e74c <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 801309a:	4811      	ldr	r0, [pc, #68]	; (80130e0 <LoRaMacHalt+0x5c>)
 801309c:	f00b fb56 	bl	801e74c <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80130a0:	f002 fc82 	bl	80159a8 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80130a4:	4b0f      	ldr	r3, [pc, #60]	; (80130e4 <LoRaMacHalt+0x60>)
 80130a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130a8:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80130aa:	4b0f      	ldr	r3, [pc, #60]	; (80130e8 <LoRaMacHalt+0x64>)
 80130ac:	2200      	movs	r2, #0
 80130ae:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 80130b2:	480e      	ldr	r0, [pc, #56]	; (80130ec <LoRaMacHalt+0x68>)
 80130b4:	f7fd fc2e 	bl	8010914 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 80130b8:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80130bc:	490b      	ldr	r1, [pc, #44]	; (80130ec <LoRaMacHalt+0x68>)
 80130be:	480c      	ldr	r0, [pc, #48]	; (80130f0 <LoRaMacHalt+0x6c>)
 80130c0:	f007 f9f9 	bl	801a4b6 <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 80130c4:	4b08      	ldr	r3, [pc, #32]	; (80130e8 <LoRaMacHalt+0x64>)
 80130c6:	2201      	movs	r2, #1
 80130c8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80130cc:	2300      	movs	r3, #0
}
 80130ce:	4618      	mov	r0, r3
 80130d0:	bd80      	pop	{r7, pc}
 80130d2:	bf00      	nop
 80130d4:	200010a0 	.word	0x200010a0
 80130d8:	200010b8 	.word	0x200010b8
 80130dc:	200010d0 	.word	0x200010d0
 80130e0:	20001130 	.word	0x20001130
 80130e4:	0801fbe4 	.word	0x0801fbe4
 80130e8:	20000d38 	.word	0x20000d38
 80130ec:	20001244 	.word	0x20001244
 80130f0:	2000196c 	.word	0x2000196c

080130f4 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b08a      	sub	sp, #40	; 0x28
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	4603      	mov	r3, r0
 80130fc:	6039      	str	r1, [r7, #0]
 80130fe:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8013100:	4b3e      	ldr	r3, [pc, #248]	; (80131fc <LoRaMacQueryTxPossible+0x108>)
 8013102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013104:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013106:	4b3d      	ldr	r3, [pc, #244]	; (80131fc <LoRaMacQueryTxPossible+0x108>)
 8013108:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 801310c:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801310e:	4b3b      	ldr	r3, [pc, #236]	; (80131fc <LoRaMacQueryTxPossible+0x108>)
 8013110:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 8013114:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8013116:	2300      	movs	r3, #0
 8013118:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 801311a:	683b      	ldr	r3, [r7, #0]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d101      	bne.n	8013124 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013120:	2303      	movs	r3, #3
 8013122:	e066      	b.n	80131f2 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8013124:	4b35      	ldr	r3, [pc, #212]	; (80131fc <LoRaMacQueryTxPossible+0x108>)
 8013126:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 801312a:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 801312c:	2300      	movs	r3, #0
 801312e:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8013130:	4b32      	ldr	r3, [pc, #200]	; (80131fc <LoRaMacQueryTxPossible+0x108>)
 8013132:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8013136:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8013138:	4b30      	ldr	r3, [pc, #192]	; (80131fc <LoRaMacQueryTxPossible+0x108>)
 801313a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801313c:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 801313e:	4b30      	ldr	r3, [pc, #192]	; (8013200 <LoRaMacQueryTxPossible+0x10c>)
 8013140:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8013144:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8013146:	4b2e      	ldr	r3, [pc, #184]	; (8013200 <LoRaMacQueryTxPossible+0x10c>)
 8013148:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 801314c:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801314e:	4b2b      	ldr	r3, [pc, #172]	; (80131fc <LoRaMacQueryTxPossible+0x108>)
 8013150:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013154:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013158:	4b28      	ldr	r3, [pc, #160]	; (80131fc <LoRaMacQueryTxPossible+0x108>)
 801315a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801315e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013162:	4b26      	ldr	r3, [pc, #152]	; (80131fc <LoRaMacQueryTxPossible+0x108>)
 8013164:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8013168:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 801316c:	4b23      	ldr	r3, [pc, #140]	; (80131fc <LoRaMacQueryTxPossible+0x108>)
 801316e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8013176:	f107 0310 	add.w	r3, r7, #16
 801317a:	f107 020e 	add.w	r2, r7, #14
 801317e:	f107 010f 	add.w	r1, r7, #15
 8013182:	f107 0014 	add.w	r0, r7, #20
 8013186:	f001 f84f 	bl	8014228 <LoRaMacAdrCalcNext>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801318a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801318e:	4618      	mov	r0, r3
 8013190:	f7fd feb8 	bl	8010f04 <GetMaxAppPayloadWithoutFOptsLength>
 8013194:	4603      	mov	r3, r0
 8013196:	461a      	mov	r2, r3
 8013198:	683b      	ldr	r3, [r7, #0]
 801319a:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801319c:	f107 0308 	add.w	r3, r7, #8
 80131a0:	4618      	mov	r0, r3
 80131a2:	f003 f8ef 	bl	8016384 <LoRaMacCommandsGetSizeSerializedCmds>
 80131a6:	4603      	mov	r3, r0
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d001      	beq.n	80131b0 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80131ac:	2313      	movs	r3, #19
 80131ae:	e020      	b.n	80131f2 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80131b0:	68bb      	ldr	r3, [r7, #8]
 80131b2:	2b0f      	cmp	r3, #15
 80131b4:	d819      	bhi.n	80131ea <LoRaMacQueryTxPossible+0xf6>
 80131b6:	683b      	ldr	r3, [r7, #0]
 80131b8:	785b      	ldrb	r3, [r3, #1]
 80131ba:	461a      	mov	r2, r3
 80131bc:	68bb      	ldr	r3, [r7, #8]
 80131be:	429a      	cmp	r2, r3
 80131c0:	d313      	bcc.n	80131ea <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	785a      	ldrb	r2, [r3, #1]
 80131c6:	68bb      	ldr	r3, [r7, #8]
 80131c8:	b2db      	uxtb	r3, r3
 80131ca:	1ad3      	subs	r3, r2, r3
 80131cc:	b2da      	uxtb	r2, r3
 80131ce:	683b      	ldr	r3, [r7, #0]
 80131d0:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	785b      	ldrb	r3, [r3, #1]
 80131d6:	4619      	mov	r1, r3
 80131d8:	79fa      	ldrb	r2, [r7, #7]
 80131da:	68bb      	ldr	r3, [r7, #8]
 80131dc:	4413      	add	r3, r2
 80131de:	4299      	cmp	r1, r3
 80131e0:	d301      	bcc.n	80131e6 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 80131e2:	2300      	movs	r3, #0
 80131e4:	e005      	b.n	80131f2 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80131e6:	2308      	movs	r3, #8
 80131e8:	e003      	b.n	80131f2 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80131ea:	683b      	ldr	r3, [r7, #0]
 80131ec:	2200      	movs	r2, #0
 80131ee:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80131f0:	2308      	movs	r3, #8
    }
}
 80131f2:	4618      	mov	r0, r3
 80131f4:	3728      	adds	r7, #40	; 0x28
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd80      	pop	{r7, pc}
 80131fa:	bf00      	nop
 80131fc:	20001244 	.word	0x20001244
 8013200:	20000d38 	.word	0x20000d38

08013204 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8013204:	b590      	push	{r4, r7, lr}
 8013206:	b087      	sub	sp, #28
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801320c:	2300      	movs	r3, #0
 801320e:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d101      	bne.n	801321a <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013216:	2303      	movs	r3, #3
 8013218:	e171      	b.n	80134fe <LoRaMacMibGetRequestConfirm+0x2fa>
    }

    switch( mibGet->Type )
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	781b      	ldrb	r3, [r3, #0]
 801321e:	2b37      	cmp	r3, #55	; 0x37
 8013220:	f200 8166 	bhi.w	80134f0 <LoRaMacMibGetRequestConfirm+0x2ec>
 8013224:	a201      	add	r2, pc, #4	; (adr r2, 801322c <LoRaMacMibGetRequestConfirm+0x28>)
 8013226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801322a:	bf00      	nop
 801322c:	0801330d 	.word	0x0801330d
 8013230:	08013319 	.word	0x08013319
 8013234:	08013325 	.word	0x08013325
 8013238:	08013331 	.word	0x08013331
 801323c:	0801333d 	.word	0x0801333d
 8013240:	08013349 	.word	0x08013349
 8013244:	08013355 	.word	0x08013355
 8013248:	080134f1 	.word	0x080134f1
 801324c:	080134f1 	.word	0x080134f1
 8013250:	080134f1 	.word	0x080134f1
 8013254:	080134f1 	.word	0x080134f1
 8013258:	080134f1 	.word	0x080134f1
 801325c:	080134f1 	.word	0x080134f1
 8013260:	080134f1 	.word	0x080134f1
 8013264:	080134f1 	.word	0x080134f1
 8013268:	08013361 	.word	0x08013361
 801326c:	0801336d 	.word	0x0801336d
 8013270:	08013379 	.word	0x08013379
 8013274:	0801339b 	.word	0x0801339b
 8013278:	080133ad 	.word	0x080133ad
 801327c:	080133bf 	.word	0x080133bf
 8013280:	080133d1 	.word	0x080133d1
 8013284:	08013405 	.word	0x08013405
 8013288:	080133e3 	.word	0x080133e3
 801328c:	08013427 	.word	0x08013427
 8013290:	08013433 	.word	0x08013433
 8013294:	0801343d 	.word	0x0801343d
 8013298:	08013447 	.word	0x08013447
 801329c:	08013451 	.word	0x08013451
 80132a0:	0801345b 	.word	0x0801345b
 80132a4:	08013465 	.word	0x08013465
 80132a8:	08013471 	.word	0x08013471
 80132ac:	08013489 	.word	0x08013489
 80132b0:	0801347d 	.word	0x0801347d
 80132b4:	08013495 	.word	0x08013495
 80132b8:	0801349f 	.word	0x0801349f
 80132bc:	080134ab 	.word	0x080134ab
 80132c0:	080134c5 	.word	0x080134c5
 80132c4:	080134b5 	.word	0x080134b5
 80132c8:	080134bd 	.word	0x080134bd
 80132cc:	080134f1 	.word	0x080134f1
 80132d0:	080134d1 	.word	0x080134d1
 80132d4:	080134f1 	.word	0x080134f1
 80132d8:	080134f1 	.word	0x080134f1
 80132dc:	080134f1 	.word	0x080134f1
 80132e0:	080134f1 	.word	0x080134f1
 80132e4:	080134f1 	.word	0x080134f1
 80132e8:	080134f1 	.word	0x080134f1
 80132ec:	080134f1 	.word	0x080134f1
 80132f0:	080134f1 	.word	0x080134f1
 80132f4:	080134f1 	.word	0x080134f1
 80132f8:	080134f1 	.word	0x080134f1
 80132fc:	080134f1 	.word	0x080134f1
 8013300:	080134f1 	.word	0x080134f1
 8013304:	080134f1 	.word	0x080134f1
 8013308:	080134e5 	.word	0x080134e5
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 801330c:	4b7e      	ldr	r3, [pc, #504]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 801330e:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	711a      	strb	r2, [r3, #4]
            break;
 8013316:	e0f1      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8013318:	4b7b      	ldr	r3, [pc, #492]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 801331a:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	711a      	strb	r2, [r3, #4]
            break;
 8013322:	e0eb      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8013324:	f7fa fe30 	bl	800df88 <SecureElementGetDevEui>
 8013328:	4602      	mov	r2, r0
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	605a      	str	r2, [r3, #4]
            break;
 801332e:	e0e5      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8013330:	f7fa fe4c 	bl	800dfcc <SecureElementGetJoinEui>
 8013334:	4602      	mov	r2, r0
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	605a      	str	r2, [r3, #4]
            break;
 801333a:	e0df      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 801333c:	4b72      	ldr	r3, [pc, #456]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 801333e:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	711a      	strb	r2, [r3, #4]
            break;
 8013346:	e0d9      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8013348:	4b6f      	ldr	r3, [pc, #444]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 801334a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	605a      	str	r2, [r3, #4]
            break;
 8013352:	e0d3      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8013354:	4b6c      	ldr	r3, [pc, #432]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 8013356:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	605a      	str	r2, [r3, #4]
            break;
 801335e:	e0cd      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8013360:	4b69      	ldr	r3, [pc, #420]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 8013362:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	711a      	strb	r2, [r3, #4]
            break;
 801336a:	e0c7      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801336c:	4b66      	ldr	r3, [pc, #408]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 801336e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	711a      	strb	r2, [r3, #4]
            break;
 8013376:	e0c1      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8013378:	231d      	movs	r3, #29
 801337a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801337c:	4b62      	ldr	r3, [pc, #392]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 801337e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013382:	f107 0210 	add.w	r2, r7, #16
 8013386:	4611      	mov	r1, r2
 8013388:	4618      	mov	r0, r3
 801338a:	f004 fce9 	bl	8017d60 <RegionGetPhyParam>
 801338e:	4603      	mov	r3, r0
 8013390:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8013392:	68fa      	ldr	r2, [r7, #12]
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	605a      	str	r2, [r3, #4]
            break;
 8013398:	e0b0      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	4a5a      	ldr	r2, [pc, #360]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 801339e:	3304      	adds	r3, #4
 80133a0:	3264      	adds	r2, #100	; 0x64
 80133a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80133a6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80133aa:	e0a7      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	4a56      	ldr	r2, [pc, #344]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 80133b0:	3304      	adds	r3, #4
 80133b2:	32a8      	adds	r2, #168	; 0xa8
 80133b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80133b8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80133bc:	e09e      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	4a51      	ldr	r2, [pc, #324]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 80133c2:	3304      	adds	r3, #4
 80133c4:	326c      	adds	r2, #108	; 0x6c
 80133c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80133ca:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80133ce:	e095      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	4a4d      	ldr	r2, [pc, #308]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 80133d4:	3304      	adds	r3, #4
 80133d6:	32b0      	adds	r2, #176	; 0xb0
 80133d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80133dc:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80133e0:	e08c      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80133e2:	231b      	movs	r3, #27
 80133e4:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80133e6:	4b48      	ldr	r3, [pc, #288]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 80133e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80133ec:	f107 0210 	add.w	r2, r7, #16
 80133f0:	4611      	mov	r1, r2
 80133f2:	4618      	mov	r0, r3
 80133f4:	f004 fcb4 	bl	8017d60 <RegionGetPhyParam>
 80133f8:	4603      	mov	r3, r0
 80133fa:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80133fc:	68fa      	ldr	r2, [r7, #12]
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	605a      	str	r2, [r3, #4]
            break;
 8013402:	e07b      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8013404:	231a      	movs	r3, #26
 8013406:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013408:	4b3f      	ldr	r3, [pc, #252]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 801340a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801340e:	f107 0210 	add.w	r2, r7, #16
 8013412:	4611      	mov	r1, r2
 8013414:	4618      	mov	r0, r3
 8013416:	f004 fca3 	bl	8017d60 <RegionGetPhyParam>
 801341a:	4603      	mov	r3, r0
 801341c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801341e:	68fa      	ldr	r2, [r7, #12]
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	605a      	str	r2, [r3, #4]
            break;
 8013424:	e06a      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8013426:	4b38      	ldr	r3, [pc, #224]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 8013428:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	711a      	strb	r2, [r3, #4]
            break;
 8013430:	e064      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8013432:	4b35      	ldr	r3, [pc, #212]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 8013434:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	605a      	str	r2, [r3, #4]
            break;
 801343a:	e05f      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 801343c:	4b32      	ldr	r3, [pc, #200]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 801343e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	605a      	str	r2, [r3, #4]
            break;
 8013444:	e05a      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8013446:	4b30      	ldr	r3, [pc, #192]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 8013448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	605a      	str	r2, [r3, #4]
            break;
 801344e:	e055      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8013450:	4b2d      	ldr	r3, [pc, #180]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 8013452:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	605a      	str	r2, [r3, #4]
            break;
 8013458:	e050      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 801345a:	4b2b      	ldr	r3, [pc, #172]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 801345c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	605a      	str	r2, [r3, #4]
            break;
 8013462:	e04b      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013464:	4b28      	ldr	r3, [pc, #160]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 8013466:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	711a      	strb	r2, [r3, #4]
            break;
 801346e:	e045      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8013470:	4b25      	ldr	r3, [pc, #148]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 8013472:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	711a      	strb	r2, [r3, #4]
            break;
 801347a:	e03f      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801347c:	4b22      	ldr	r3, [pc, #136]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 801347e:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	711a      	strb	r2, [r3, #4]
            break;
 8013486:	e039      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013488:	4b1f      	ldr	r3, [pc, #124]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 801348a:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	711a      	strb	r2, [r3, #4]
            break;
 8013492:	e033      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8013494:	4b1c      	ldr	r3, [pc, #112]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 8013496:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	605a      	str	r2, [r3, #4]
            break;
 801349c:	e02e      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 801349e:	4b1a      	ldr	r3, [pc, #104]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 80134a0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	711a      	strb	r2, [r3, #4]
            break;
 80134a8:	e028      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80134aa:	4b17      	ldr	r3, [pc, #92]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 80134ac:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	605a      	str	r2, [r3, #4]
            break;
 80134b2:	e023      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	4a14      	ldr	r2, [pc, #80]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 80134b8:	605a      	str	r2, [r3, #4]
            break;
 80134ba:	e01f      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	4a13      	ldr	r2, [pc, #76]	; (801350c <LoRaMacMibGetRequestConfirm+0x308>)
 80134c0:	605a      	str	r2, [r3, #4]
            break;
 80134c2:	e01b      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80134c4:	4b10      	ldr	r3, [pc, #64]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 80134c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	605a      	str	r2, [r3, #4]
            break;
 80134ce:	e015      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	4a0d      	ldr	r2, [pc, #52]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 80134d4:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 80134d8:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80134da:	687c      	ldr	r4, [r7, #4]
 80134dc:	f004 fddc 	bl	8018098 <RegionGetVersion>
 80134e0:	60a0      	str	r0, [r4, #8]
            break;
 80134e2:	e00b      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80134e4:	4b08      	ldr	r3, [pc, #32]	; (8013508 <LoRaMacMibGetRequestConfirm+0x304>)
 80134e6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	605a      	str	r2, [r3, #4]
            break;
 80134ee:	e005      	b.n	80134fc <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80134f0:	6878      	ldr	r0, [r7, #4]
 80134f2:	f002 fae3 	bl	8015abc <LoRaMacClassBMibGetRequestConfirm>
 80134f6:	4603      	mov	r3, r0
 80134f8:	75fb      	strb	r3, [r7, #23]
            break;
 80134fa:	bf00      	nop
        }
    }
    return status;
 80134fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80134fe:	4618      	mov	r0, r3
 8013500:	371c      	adds	r7, #28
 8013502:	46bd      	mov	sp, r7
 8013504:	bd90      	pop	{r4, r7, pc}
 8013506:	bf00      	nop
 8013508:	20001244 	.word	0x20001244
 801350c:	2000196c 	.word	0x2000196c

08013510 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b086      	sub	sp, #24
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013518:	2300      	movs	r3, #0
 801351a:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d101      	bne.n	8013526 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013522:	2303      	movs	r3, #3
 8013524:	e348      	b.n	8013bb8 <LoRaMacMibSetRequestConfirm+0x6a8>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8013526:	4bb7      	ldr	r3, [pc, #732]	; (8013804 <LoRaMacMibSetRequestConfirm+0x2f4>)
 8013528:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801352c:	f003 0302 	and.w	r3, r3, #2
 8013530:	2b00      	cmp	r3, #0
 8013532:	d001      	beq.n	8013538 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8013534:	2301      	movs	r3, #1
 8013536:	e33f      	b.n	8013bb8 <LoRaMacMibSetRequestConfirm+0x6a8>
    }

    switch( mibSet->Type )
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	781b      	ldrb	r3, [r3, #0]
 801353c:	2b37      	cmp	r3, #55	; 0x37
 801353e:	f200 8319 	bhi.w	8013b74 <LoRaMacMibSetRequestConfirm+0x664>
 8013542:	a201      	add	r2, pc, #4	; (adr r2, 8013548 <LoRaMacMibSetRequestConfirm+0x38>)
 8013544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013548:	08013629 	.word	0x08013629
 801354c:	08013639 	.word	0x08013639
 8013550:	08013653 	.word	0x08013653
 8013554:	0801366b 	.word	0x0801366b
 8013558:	08013683 	.word	0x08013683
 801355c:	0801368f 	.word	0x0801368f
 8013560:	0801369b 	.word	0x0801369b
 8013564:	080136a7 	.word	0x080136a7
 8013568:	080136cd 	.word	0x080136cd
 801356c:	080136f3 	.word	0x080136f3
 8013570:	08013719 	.word	0x08013719
 8013574:	0801373f 	.word	0x0801373f
 8013578:	08013765 	.word	0x08013765
 801357c:	0801378b 	.word	0x0801378b
 8013580:	080137b1 	.word	0x080137b1
 8013584:	080137d7 	.word	0x080137d7
 8013588:	080137f7 	.word	0x080137f7
 801358c:	08013b75 	.word	0x08013b75
 8013590:	08013811 	.word	0x08013811
 8013594:	08013881 	.word	0x08013881
 8013598:	080138c1 	.word	0x080138c1
 801359c:	08013923 	.word	0x08013923
 80135a0:	08013993 	.word	0x08013993
 80135a4:	08013963 	.word	0x08013963
 80135a8:	080139c3 	.word	0x080139c3
 80135ac:	080139e5 	.word	0x080139e5
 80135b0:	080139ef 	.word	0x080139ef
 80135b4:	080139f9 	.word	0x080139f9
 80135b8:	08013a03 	.word	0x08013a03
 80135bc:	08013a0d 	.word	0x08013a0d
 80135c0:	08013a17 	.word	0x08013a17
 80135c4:	08013a49 	.word	0x08013a49
 80135c8:	08013ab5 	.word	0x08013ab5
 80135cc:	08013a83 	.word	0x08013a83
 80135d0:	08013af1 	.word	0x08013af1
 80135d4:	08013b07 	.word	0x08013b07
 80135d8:	08013b1f 	.word	0x08013b1f
 80135dc:	08013b29 	.word	0x08013b29
 80135e0:	08013b35 	.word	0x08013b35
 80135e4:	08013b75 	.word	0x08013b75
 80135e8:	08013b3f 	.word	0x08013b3f
 80135ec:	08013b75 	.word	0x08013b75
 80135f0:	08013b75 	.word	0x08013b75
 80135f4:	08013b75 	.word	0x08013b75
 80135f8:	08013b75 	.word	0x08013b75
 80135fc:	08013b75 	.word	0x08013b75
 8013600:	08013b75 	.word	0x08013b75
 8013604:	08013b75 	.word	0x08013b75
 8013608:	08013b75 	.word	0x08013b75
 801360c:	08013b75 	.word	0x08013b75
 8013610:	08013b75 	.word	0x08013b75
 8013614:	08013b75 	.word	0x08013b75
 8013618:	08013b75 	.word	0x08013b75
 801361c:	08013b75 	.word	0x08013b75
 8013620:	08013b75 	.word	0x08013b75
 8013624:	08013b69 	.word	0x08013b69
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	791b      	ldrb	r3, [r3, #4]
 801362c:	4618      	mov	r0, r3
 801362e:	f7fd fb99 	bl	8010d64 <SwitchClass>
 8013632:	4603      	mov	r3, r0
 8013634:	75fb      	strb	r3, [r7, #23]
            break;
 8013636:	e2be      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	791b      	ldrb	r3, [r3, #4]
 801363c:	2b02      	cmp	r3, #2
 801363e:	d005      	beq.n	801364c <LoRaMacMibSetRequestConfirm+0x13c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	791a      	ldrb	r2, [r3, #4]
 8013644:	4b70      	ldr	r3, [pc, #448]	; (8013808 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8013646:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801364a:	e2b4      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801364c:	2303      	movs	r3, #3
 801364e:	75fb      	strb	r3, [r7, #23]
            break;
 8013650:	e2b1      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	685b      	ldr	r3, [r3, #4]
 8013656:	4618      	mov	r0, r3
 8013658:	f7fa fc7e 	bl	800df58 <SecureElementSetDevEui>
 801365c:	4603      	mov	r3, r0
 801365e:	2b00      	cmp	r3, #0
 8013660:	f000 828e 	beq.w	8013b80 <LoRaMacMibSetRequestConfirm+0x670>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013664:	2303      	movs	r3, #3
 8013666:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013668:	e28a      	b.n	8013b80 <LoRaMacMibSetRequestConfirm+0x670>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	685b      	ldr	r3, [r3, #4]
 801366e:	4618      	mov	r0, r3
 8013670:	f7fa fc94 	bl	800df9c <SecureElementSetJoinEui>
 8013674:	4603      	mov	r3, r0
 8013676:	2b00      	cmp	r3, #0
 8013678:	f000 8284 	beq.w	8013b84 <LoRaMacMibSetRequestConfirm+0x674>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801367c:	2303      	movs	r3, #3
 801367e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013680:	e280      	b.n	8013b84 <LoRaMacMibSetRequestConfirm+0x674>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	791a      	ldrb	r2, [r3, #4]
 8013686:	4b60      	ldr	r3, [pc, #384]	; (8013808 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8013688:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            break;
 801368c:	e293      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	685b      	ldr	r3, [r3, #4]
 8013692:	4a5d      	ldr	r2, [pc, #372]	; (8013808 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8013694:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            break;
 8013698:	e28d      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	685b      	ldr	r3, [r3, #4]
 801369e:	4a5a      	ldr	r2, [pc, #360]	; (8013808 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80136a0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
            break;
 80136a4:	e287      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	685b      	ldr	r3, [r3, #4]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d00b      	beq.n	80136c6 <LoRaMacMibSetRequestConfirm+0x1b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	685b      	ldr	r3, [r3, #4]
 80136b2:	4619      	mov	r1, r3
 80136b4:	2000      	movs	r0, #0
 80136b6:	f003 fd63 	bl	8017180 <LoRaMacCryptoSetKey>
 80136ba:	4603      	mov	r3, r0
 80136bc:	2b00      	cmp	r3, #0
 80136be:	f000 8263 	beq.w	8013b88 <LoRaMacMibSetRequestConfirm+0x678>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80136c2:	2311      	movs	r3, #17
 80136c4:	e278      	b.n	8013bb8 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80136c6:	2303      	movs	r3, #3
 80136c8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80136ca:	e25d      	b.n	8013b88 <LoRaMacMibSetRequestConfirm+0x678>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	685b      	ldr	r3, [r3, #4]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d00b      	beq.n	80136ec <LoRaMacMibSetRequestConfirm+0x1dc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	685b      	ldr	r3, [r3, #4]
 80136d8:	4619      	mov	r1, r3
 80136da:	2001      	movs	r0, #1
 80136dc:	f003 fd50 	bl	8017180 <LoRaMacCryptoSetKey>
 80136e0:	4603      	mov	r3, r0
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	f000 8252 	beq.w	8013b8c <LoRaMacMibSetRequestConfirm+0x67c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80136e8:	2311      	movs	r3, #17
 80136ea:	e265      	b.n	8013bb8 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80136ec:	2303      	movs	r3, #3
 80136ee:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80136f0:	e24c      	b.n	8013b8c <LoRaMacMibSetRequestConfirm+0x67c>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	685b      	ldr	r3, [r3, #4]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d00b      	beq.n	8013712 <LoRaMacMibSetRequestConfirm+0x202>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	685b      	ldr	r3, [r3, #4]
 80136fe:	4619      	mov	r1, r3
 8013700:	2002      	movs	r0, #2
 8013702:	f003 fd3d 	bl	8017180 <LoRaMacCryptoSetKey>
 8013706:	4603      	mov	r3, r0
 8013708:	2b00      	cmp	r3, #0
 801370a:	f000 8241 	beq.w	8013b90 <LoRaMacMibSetRequestConfirm+0x680>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801370e:	2311      	movs	r3, #17
 8013710:	e252      	b.n	8013bb8 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013712:	2303      	movs	r3, #3
 8013714:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013716:	e23b      	b.n	8013b90 <LoRaMacMibSetRequestConfirm+0x680>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	685b      	ldr	r3, [r3, #4]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d00b      	beq.n	8013738 <LoRaMacMibSetRequestConfirm+0x228>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	685b      	ldr	r3, [r3, #4]
 8013724:	4619      	mov	r1, r3
 8013726:	2003      	movs	r0, #3
 8013728:	f003 fd2a 	bl	8017180 <LoRaMacCryptoSetKey>
 801372c:	4603      	mov	r3, r0
 801372e:	2b00      	cmp	r3, #0
 8013730:	f000 8230 	beq.w	8013b94 <LoRaMacMibSetRequestConfirm+0x684>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013734:	2311      	movs	r3, #17
 8013736:	e23f      	b.n	8013bb8 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013738:	2303      	movs	r3, #3
 801373a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801373c:	e22a      	b.n	8013b94 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	685b      	ldr	r3, [r3, #4]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d00b      	beq.n	801375e <LoRaMacMibSetRequestConfirm+0x24e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	685b      	ldr	r3, [r3, #4]
 801374a:	4619      	mov	r1, r3
 801374c:	207f      	movs	r0, #127	; 0x7f
 801374e:	f003 fd17 	bl	8017180 <LoRaMacCryptoSetKey>
 8013752:	4603      	mov	r3, r0
 8013754:	2b00      	cmp	r3, #0
 8013756:	f000 821f 	beq.w	8013b98 <LoRaMacMibSetRequestConfirm+0x688>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801375a:	2311      	movs	r3, #17
 801375c:	e22c      	b.n	8013bb8 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801375e:	2303      	movs	r3, #3
 8013760:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013762:	e219      	b.n	8013b98 <LoRaMacMibSetRequestConfirm+0x688>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	685b      	ldr	r3, [r3, #4]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d00b      	beq.n	8013784 <LoRaMacMibSetRequestConfirm+0x274>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	685b      	ldr	r3, [r3, #4]
 8013770:	4619      	mov	r1, r3
 8013772:	2080      	movs	r0, #128	; 0x80
 8013774:	f003 fd04 	bl	8017180 <LoRaMacCryptoSetKey>
 8013778:	4603      	mov	r3, r0
 801377a:	2b00      	cmp	r3, #0
 801377c:	f000 820e 	beq.w	8013b9c <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013780:	2311      	movs	r3, #17
 8013782:	e219      	b.n	8013bb8 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013784:	2303      	movs	r3, #3
 8013786:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013788:	e208      	b.n	8013b9c <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	685b      	ldr	r3, [r3, #4]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d00b      	beq.n	80137aa <LoRaMacMibSetRequestConfirm+0x29a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	685b      	ldr	r3, [r3, #4]
 8013796:	4619      	mov	r1, r3
 8013798:	2081      	movs	r0, #129	; 0x81
 801379a:	f003 fcf1 	bl	8017180 <LoRaMacCryptoSetKey>
 801379e:	4603      	mov	r3, r0
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	f000 81fd 	beq.w	8013ba0 <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80137a6:	2311      	movs	r3, #17
 80137a8:	e206      	b.n	8013bb8 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80137aa:	2303      	movs	r3, #3
 80137ac:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80137ae:	e1f7      	b.n	8013ba0 <LoRaMacMibSetRequestConfirm+0x690>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	685b      	ldr	r3, [r3, #4]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d00b      	beq.n	80137d0 <LoRaMacMibSetRequestConfirm+0x2c0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	685b      	ldr	r3, [r3, #4]
 80137bc:	4619      	mov	r1, r3
 80137be:	2082      	movs	r0, #130	; 0x82
 80137c0:	f003 fcde 	bl	8017180 <LoRaMacCryptoSetKey>
 80137c4:	4603      	mov	r3, r0
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	f000 81ec 	beq.w	8013ba4 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80137cc:	2311      	movs	r3, #17
 80137ce:	e1f3      	b.n	8013bb8 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80137d0:	2303      	movs	r3, #3
 80137d2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80137d4:	e1e6      	b.n	8013ba4 <LoRaMacMibSetRequestConfirm+0x694>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	791a      	ldrb	r2, [r3, #4]
 80137da:	4b0b      	ldr	r3, [pc, #44]	; (8013808 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80137dc:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80137e0:	4b0a      	ldr	r3, [pc, #40]	; (801380c <LoRaMacMibSetRequestConfirm+0x2fc>)
 80137e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80137e4:	4a08      	ldr	r2, [pc, #32]	; (8013808 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80137e6:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 80137ea:	4610      	mov	r0, r2
 80137ec:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 80137ee:	4b07      	ldr	r3, [pc, #28]	; (801380c <LoRaMacMibSetRequestConfirm+0x2fc>)
 80137f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137f2:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 80137f4:	e1df      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	791a      	ldrb	r2, [r3, #4]
 80137fa:	4b03      	ldr	r3, [pc, #12]	; (8013808 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80137fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 8013800:	e1d9      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
 8013802:	bf00      	nop
 8013804:	20000d38 	.word	0x20000d38
 8013808:	20001244 	.word	0x20001244
 801380c:	0801fbe4 	.word	0x0801fbe4
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	7a1b      	ldrb	r3, [r3, #8]
 8013814:	b25b      	sxtb	r3, r3
 8013816:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013818:	4bb3      	ldr	r3, [pc, #716]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801381a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801381e:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8013820:	4bb1      	ldr	r3, [pc, #708]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013826:	f107 0108 	add.w	r1, r7, #8
 801382a:	2207      	movs	r2, #7
 801382c:	4618      	mov	r0, r3
 801382e:	f004 fad2 	bl	8017dd6 <RegionVerify>
 8013832:	4603      	mov	r3, r0
 8013834:	f083 0301 	eor.w	r3, r3, #1
 8013838:	b2db      	uxtb	r3, r3
 801383a:	2b00      	cmp	r3, #0
 801383c:	d002      	beq.n	8013844 <LoRaMacMibSetRequestConfirm+0x334>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801383e:	2303      	movs	r3, #3
 8013840:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8013842:	e1b8      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	685b      	ldr	r3, [r3, #4]
 8013848:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 801384a:	4ba7      	ldr	r3, [pc, #668]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801384c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013850:	f107 0108 	add.w	r1, r7, #8
 8013854:	2200      	movs	r2, #0
 8013856:	4618      	mov	r0, r3
 8013858:	f004 fabd 	bl	8017dd6 <RegionVerify>
 801385c:	4603      	mov	r3, r0
 801385e:	f083 0301 	eor.w	r3, r3, #1
 8013862:	b2db      	uxtb	r3, r3
 8013864:	2b00      	cmp	r3, #0
 8013866:	d002      	beq.n	801386e <LoRaMacMibSetRequestConfirm+0x35e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013868:	2303      	movs	r3, #3
 801386a:	75fb      	strb	r3, [r7, #23]
            break;
 801386c:	e1a3      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 801386e:	4b9e      	ldr	r3, [pc, #632]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013870:	687a      	ldr	r2, [r7, #4]
 8013872:	3364      	adds	r3, #100	; 0x64
 8013874:	3204      	adds	r2, #4
 8013876:	e892 0003 	ldmia.w	r2, {r0, r1}
 801387a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801387e:	e19a      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	7a1b      	ldrb	r3, [r3, #8]
 8013884:	b25b      	sxtb	r3, r3
 8013886:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013888:	4b97      	ldr	r3, [pc, #604]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801388a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801388e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013890:	4b95      	ldr	r3, [pc, #596]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013896:	f107 0108 	add.w	r1, r7, #8
 801389a:	2207      	movs	r2, #7
 801389c:	4618      	mov	r0, r3
 801389e:	f004 fa9a 	bl	8017dd6 <RegionVerify>
 80138a2:	4603      	mov	r3, r0
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d008      	beq.n	80138ba <LoRaMacMibSetRequestConfirm+0x3aa>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80138a8:	4b8f      	ldr	r3, [pc, #572]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80138aa:	687a      	ldr	r2, [r7, #4]
 80138ac:	33a8      	adds	r3, #168	; 0xa8
 80138ae:	3204      	adds	r2, #4
 80138b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80138b4:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80138b8:	e17d      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138ba:	2303      	movs	r3, #3
 80138bc:	75fb      	strb	r3, [r7, #23]
            break;
 80138be:	e17a      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	7a1b      	ldrb	r3, [r3, #8]
 80138c4:	b25b      	sxtb	r3, r3
 80138c6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80138c8:	4b87      	ldr	r3, [pc, #540]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80138ca:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80138ce:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80138d0:	4b85      	ldr	r3, [pc, #532]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80138d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80138d6:	f107 0108 	add.w	r1, r7, #8
 80138da:	2207      	movs	r2, #7
 80138dc:	4618      	mov	r0, r3
 80138de:	f004 fa7a 	bl	8017dd6 <RegionVerify>
 80138e2:	4603      	mov	r3, r0
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d019      	beq.n	801391c <LoRaMacMibSetRequestConfirm+0x40c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80138e8:	4b7f      	ldr	r3, [pc, #508]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80138ea:	687a      	ldr	r2, [r7, #4]
 80138ec:	336c      	adds	r3, #108	; 0x6c
 80138ee:	3204      	adds	r2, #4
 80138f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80138f4:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80138f8:	4b7b      	ldr	r3, [pc, #492]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80138fa:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80138fe:	2b02      	cmp	r3, #2
 8013900:	f040 8152 	bne.w	8013ba8 <LoRaMacMibSetRequestConfirm+0x698>
 8013904:	4b78      	ldr	r3, [pc, #480]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013906:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801390a:	2b00      	cmp	r3, #0
 801390c:	f000 814c 	beq.w	8013ba8 <LoRaMacMibSetRequestConfirm+0x698>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8013910:	4b76      	ldr	r3, [pc, #472]	; (8013aec <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013914:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8013916:	f7fe fc67 	bl	80121e8 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801391a:	e145      	b.n	8013ba8 <LoRaMacMibSetRequestConfirm+0x698>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801391c:	2303      	movs	r3, #3
 801391e:	75fb      	strb	r3, [r7, #23]
            break;
 8013920:	e142      	b.n	8013ba8 <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	7a1b      	ldrb	r3, [r3, #8]
 8013926:	b25b      	sxtb	r3, r3
 8013928:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801392a:	4b6f      	ldr	r3, [pc, #444]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801392c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8013930:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013932:	4b6d      	ldr	r3, [pc, #436]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013934:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013938:	f107 0108 	add.w	r1, r7, #8
 801393c:	2207      	movs	r2, #7
 801393e:	4618      	mov	r0, r3
 8013940:	f004 fa49 	bl	8017dd6 <RegionVerify>
 8013944:	4603      	mov	r3, r0
 8013946:	2b00      	cmp	r3, #0
 8013948:	d008      	beq.n	801395c <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 801394a:	4b67      	ldr	r3, [pc, #412]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801394c:	687a      	ldr	r2, [r7, #4]
 801394e:	33b0      	adds	r3, #176	; 0xb0
 8013950:	3204      	adds	r2, #4
 8013952:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013956:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801395a:	e12c      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801395c:	2303      	movs	r3, #3
 801395e:	75fb      	strb	r3, [r7, #23]
            break;
 8013960:	e129      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	685b      	ldr	r3, [r3, #4]
 8013966:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8013968:	2301      	movs	r3, #1
 801396a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 801396c:	4b5e      	ldr	r3, [pc, #376]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801396e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013972:	f107 020c 	add.w	r2, r7, #12
 8013976:	4611      	mov	r1, r2
 8013978:	4618      	mov	r0, r3
 801397a:	f004 fa55 	bl	8017e28 <RegionChanMaskSet>
 801397e:	4603      	mov	r3, r0
 8013980:	f083 0301 	eor.w	r3, r3, #1
 8013984:	b2db      	uxtb	r3, r3
 8013986:	2b00      	cmp	r3, #0
 8013988:	f000 8110 	beq.w	8013bac <LoRaMacMibSetRequestConfirm+0x69c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801398c:	2303      	movs	r3, #3
 801398e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013990:	e10c      	b.n	8013bac <LoRaMacMibSetRequestConfirm+0x69c>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	685b      	ldr	r3, [r3, #4]
 8013996:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8013998:	2300      	movs	r3, #0
 801399a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 801399c:	4b52      	ldr	r3, [pc, #328]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801399e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80139a2:	f107 020c 	add.w	r2, r7, #12
 80139a6:	4611      	mov	r1, r2
 80139a8:	4618      	mov	r0, r3
 80139aa:	f004 fa3d 	bl	8017e28 <RegionChanMaskSet>
 80139ae:	4603      	mov	r3, r0
 80139b0:	f083 0301 	eor.w	r3, r3, #1
 80139b4:	b2db      	uxtb	r3, r3
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	f000 80fa 	beq.w	8013bb0 <LoRaMacMibSetRequestConfirm+0x6a0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80139bc:	2303      	movs	r3, #3
 80139be:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80139c0:	e0f6      	b.n	8013bb0 <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	791b      	ldrb	r3, [r3, #4]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d009      	beq.n	80139de <LoRaMacMibSetRequestConfirm+0x4ce>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80139ce:	2b0f      	cmp	r3, #15
 80139d0:	d805      	bhi.n	80139de <LoRaMacMibSetRequestConfirm+0x4ce>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	791a      	ldrb	r2, [r3, #4]
 80139d6:	4b44      	ldr	r3, [pc, #272]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80139d8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80139dc:	e0eb      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80139de:	2303      	movs	r3, #3
 80139e0:	75fb      	strb	r3, [r7, #23]
            break;
 80139e2:	e0e8      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	685b      	ldr	r3, [r3, #4]
 80139e8:	4a3f      	ldr	r2, [pc, #252]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80139ea:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 80139ec:	e0e3      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	685b      	ldr	r3, [r3, #4]
 80139f2:	4a3d      	ldr	r2, [pc, #244]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80139f4:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 80139f6:	e0de      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	685b      	ldr	r3, [r3, #4]
 80139fc:	4a3a      	ldr	r2, [pc, #232]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80139fe:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8013a00:	e0d9      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	685b      	ldr	r3, [r3, #4]
 8013a06:	4a38      	ldr	r2, [pc, #224]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013a08:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8013a0a:	e0d4      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	685b      	ldr	r3, [r3, #4]
 8013a10:	4a35      	ldr	r2, [pc, #212]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013a12:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8013a14:	e0cf      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013a1c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8013a1e:	4b32      	ldr	r3, [pc, #200]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013a20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013a24:	f107 0108 	add.w	r1, r7, #8
 8013a28:	2206      	movs	r2, #6
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f004 f9d3 	bl	8017dd6 <RegionVerify>
 8013a30:	4603      	mov	r3, r0
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d005      	beq.n	8013a42 <LoRaMacMibSetRequestConfirm+0x532>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8013a36:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013a3a:	4b2b      	ldr	r3, [pc, #172]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013a3c:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013a40:	e0b9      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a42:	2303      	movs	r3, #3
 8013a44:	75fb      	strb	r3, [r7, #23]
            break;
 8013a46:	e0b6      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013a4e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013a50:	4b25      	ldr	r3, [pc, #148]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013a52:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8013a56:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8013a58:	4b23      	ldr	r3, [pc, #140]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013a5e:	f107 0108 	add.w	r1, r7, #8
 8013a62:	2205      	movs	r2, #5
 8013a64:	4618      	mov	r0, r3
 8013a66:	f004 f9b6 	bl	8017dd6 <RegionVerify>
 8013a6a:	4603      	mov	r3, r0
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d005      	beq.n	8013a7c <LoRaMacMibSetRequestConfirm+0x56c>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013a70:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013a74:	4b1c      	ldr	r3, [pc, #112]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013a76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013a7a:	e09c      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a7c:	2303      	movs	r3, #3
 8013a7e:	75fb      	strb	r3, [r7, #23]
            break;
 8013a80:	e099      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013a88:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8013a8a:	4b17      	ldr	r3, [pc, #92]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013a8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013a90:	f107 0108 	add.w	r1, r7, #8
 8013a94:	220a      	movs	r2, #10
 8013a96:	4618      	mov	r0, r3
 8013a98:	f004 f99d 	bl	8017dd6 <RegionVerify>
 8013a9c:	4603      	mov	r3, r0
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d005      	beq.n	8013aae <LoRaMacMibSetRequestConfirm+0x59e>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8013aa2:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013aa6:	4b10      	ldr	r3, [pc, #64]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013aa8:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013aac:	e083      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013aae:	2303      	movs	r3, #3
 8013ab0:	75fb      	strb	r3, [r7, #23]
            break;
 8013ab2:	e080      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013aba:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8013abc:	4b0a      	ldr	r3, [pc, #40]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013ac2:	f107 0108 	add.w	r1, r7, #8
 8013ac6:	2209      	movs	r2, #9
 8013ac8:	4618      	mov	r0, r3
 8013aca:	f004 f984 	bl	8017dd6 <RegionVerify>
 8013ace:	4603      	mov	r3, r0
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d005      	beq.n	8013ae0 <LoRaMacMibSetRequestConfirm+0x5d0>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8013ad4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013ad8:	4b03      	ldr	r3, [pc, #12]	; (8013ae8 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013ada:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013ade:	e06a      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ae0:	2303      	movs	r3, #3
 8013ae2:	75fb      	strb	r3, [r7, #23]
            break;
 8013ae4:	e067      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
 8013ae6:	bf00      	nop
 8013ae8:	20001244 	.word	0x20001244
 8013aec:	0801fbe4 	.word	0x0801fbe4
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	685b      	ldr	r3, [r3, #4]
 8013af4:	4a32      	ldr	r2, [pc, #200]	; (8013bc0 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8013af6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8013afa:	4b31      	ldr	r3, [pc, #196]	; (8013bc0 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8013afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013b00:	4a2f      	ldr	r2, [pc, #188]	; (8013bc0 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8013b02:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8013b04:	e057      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	791a      	ldrb	r2, [r3, #4]
 8013b0a:	4b2d      	ldr	r3, [pc, #180]	; (8013bc0 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8013b0c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8013b10:	4b2b      	ldr	r3, [pc, #172]	; (8013bc0 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8013b12:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8013b16:	4b2a      	ldr	r3, [pc, #168]	; (8013bc0 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8013b18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8013b1c:	e04b      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	685b      	ldr	r3, [r3, #4]
 8013b22:	4a27      	ldr	r2, [pc, #156]	; (8013bc0 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8013b24:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8013b26:	e046      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	685b      	ldr	r3, [r3, #4]
 8013b2c:	4a24      	ldr	r2, [pc, #144]	; (8013bc0 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8013b2e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
            break;
 8013b32:	e040      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8013b34:	f7fe fdb2 	bl	801269c <RestoreNvmData>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	75fb      	strb	r3, [r7, #23]
            break;
 8013b3c:	e03b      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	799b      	ldrb	r3, [r3, #6]
 8013b42:	2b01      	cmp	r3, #1
 8013b44:	d80d      	bhi.n	8013b62 <LoRaMacMibSetRequestConfirm+0x652>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8013b46:	4a1e      	ldr	r2, [pc, #120]	; (8013bc0 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	685b      	ldr	r3, [r3, #4]
 8013b4c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	6858      	ldr	r0, [r3, #4]
 8013b54:	f003 fa4e 	bl	8016ff4 <LoRaMacCryptoSetLrWanVersion>
 8013b58:	4603      	mov	r3, r0
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d02a      	beq.n	8013bb4 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013b5e:	2311      	movs	r3, #17
 8013b60:	e02a      	b.n	8013bb8 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b62:	2303      	movs	r3, #3
 8013b64:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013b66:	e025      	b.n	8013bb4 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	685b      	ldr	r3, [r3, #4]
 8013b6c:	4a14      	ldr	r2, [pc, #80]	; (8013bc0 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8013b6e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8013b72:	e020      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8013b74:	6878      	ldr	r0, [r7, #4]
 8013b76:	f001 ffc9 	bl	8015b0c <LoRaMacMibClassBSetRequestConfirm>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	75fb      	strb	r3, [r7, #23]
            break;
 8013b7e:	e01a      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013b80:	bf00      	nop
 8013b82:	e018      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013b84:	bf00      	nop
 8013b86:	e016      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013b88:	bf00      	nop
 8013b8a:	e014      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013b8c:	bf00      	nop
 8013b8e:	e012      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013b90:	bf00      	nop
 8013b92:	e010      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013b94:	bf00      	nop
 8013b96:	e00e      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013b98:	bf00      	nop
 8013b9a:	e00c      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013b9c:	bf00      	nop
 8013b9e:	e00a      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013ba0:	bf00      	nop
 8013ba2:	e008      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013ba4:	bf00      	nop
 8013ba6:	e006      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013ba8:	bf00      	nop
 8013baa:	e004      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013bac:	bf00      	nop
 8013bae:	e002      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013bb0:	bf00      	nop
 8013bb2:	e000      	b.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013bb4:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8013bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013bb8:	4618      	mov	r0, r3
 8013bba:	3718      	adds	r7, #24
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	bd80      	pop	{r7, pc}
 8013bc0:	20001244 	.word	0x20001244

08013bc4 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b086      	sub	sp, #24
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013bcc:	2302      	movs	r3, #2
 8013bce:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d101      	bne.n	8013bde <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013bda:	2303      	movs	r3, #3
 8013bdc:	e127      	b.n	8013e2e <LoRaMacMlmeRequest+0x26a>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8013bde:	f7fc fcd3 	bl	8010588 <LoRaMacIsBusy>
 8013be2:	4603      	mov	r3, r0
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d001      	beq.n	8013bec <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8013be8:	2301      	movs	r3, #1
 8013bea:	e120      	b.n	8013e2e <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8013bec:	f002 fea6 	bl	801693c <LoRaMacConfirmQueueIsFull>
 8013bf0:	4603      	mov	r3, r0
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d001      	beq.n	8013bfa <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8013bf6:	2301      	movs	r3, #1
 8013bf8:	e119      	b.n	8013e2e <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013bfa:	f002 fe93 	bl	8016924 <LoRaMacConfirmQueueGetCnt>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d104      	bne.n	8013c0e <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8013c04:	2214      	movs	r2, #20
 8013c06:	2100      	movs	r1, #0
 8013c08:	488b      	ldr	r0, [pc, #556]	; (8013e38 <LoRaMacMlmeRequest+0x274>)
 8013c0a:	f006 fc8f 	bl	801a52c <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013c0e:	4b8b      	ldr	r3, [pc, #556]	; (8013e3c <LoRaMacMlmeRequest+0x278>)
 8013c10:	2201      	movs	r2, #1
 8013c12:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8013c16:	4a89      	ldr	r2, [pc, #548]	; (8013e3c <LoRaMacMlmeRequest+0x278>)
 8013c18:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8013c1c:	f043 0304 	orr.w	r3, r3, #4
 8013c20:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    queueElement.Request = mlmeRequest->Type;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	781b      	ldrb	r3, [r3, #0]
 8013c28:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013c2a:	2301      	movs	r3, #1
 8013c2c:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8013c2e:	2300      	movs	r3, #0
 8013c30:	74fb      	strb	r3, [r7, #19]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	781b      	ldrb	r3, [r3, #0]
 8013c36:	3b01      	subs	r3, #1
 8013c38:	2b0d      	cmp	r3, #13
 8013c3a:	f200 80ce 	bhi.w	8013dda <LoRaMacMlmeRequest+0x216>
 8013c3e:	a201      	add	r2, pc, #4	; (adr r2, 8013c44 <LoRaMacMlmeRequest+0x80>)
 8013c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c44:	08013c7d 	.word	0x08013c7d
 8013c48:	08013ddb 	.word	0x08013ddb
 8013c4c:	08013ddb 	.word	0x08013ddb
 8013c50:	08013ce7 	.word	0x08013ce7
 8013c54:	08013d05 	.word	0x08013d05
 8013c58:	08013d15 	.word	0x08013d15
 8013c5c:	08013ddb 	.word	0x08013ddb
 8013c60:	08013ddb 	.word	0x08013ddb
 8013c64:	08013ddb 	.word	0x08013ddb
 8013c68:	08013d31 	.word	0x08013d31
 8013c6c:	08013ddb 	.word	0x08013ddb
 8013c70:	08013daf 	.word	0x08013daf
 8013c74:	08013d4f 	.word	0x08013d4f
 8013c78:	08013d91 	.word	0x08013d91
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8013c7c:	4b6f      	ldr	r3, [pc, #444]	; (8013e3c <LoRaMacMlmeRequest+0x278>)
 8013c7e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013c82:	f003 0320 	and.w	r3, r3, #32
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d001      	beq.n	8013c8e <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8013c8a:	2301      	movs	r3, #1
 8013c8c:	e0cf      	b.n	8013e2e <LoRaMacMlmeRequest+0x26a>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( );
 8013c8e:	f7fe f989 	bl	8011fa4 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8013c92:	4b6b      	ldr	r3, [pc, #428]	; (8013e40 <LoRaMacMlmeRequest+0x27c>)
 8013c94:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	795b      	ldrb	r3, [r3, #5]
 8013c9c:	b25b      	sxtb	r3, r3
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	4619      	mov	r1, r3
 8013ca2:	f004 f980 	bl	8017fa6 <RegionAlternateDr>
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	461a      	mov	r2, r3
 8013caa:	4b65      	ldr	r3, [pc, #404]	; (8013e40 <LoRaMacMlmeRequest+0x27c>)
 8013cac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8013cb0:	2307      	movs	r3, #7
 8013cb2:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8013cb4:	20ff      	movs	r0, #255	; 0xff
 8013cb6:	f7fd feed 	bl	8011a94 <SendReJoinReq>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8013cbe:	7dfb      	ldrb	r3, [r7, #23]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	f000 808c 	beq.w	8013dde <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8013cc6:	4b5e      	ldr	r3, [pc, #376]	; (8013e40 <LoRaMacMlmeRequest+0x27c>)
 8013cc8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	795b      	ldrb	r3, [r3, #5]
 8013cd0:	b25b      	sxtb	r3, r3
 8013cd2:	2201      	movs	r2, #1
 8013cd4:	4619      	mov	r1, r3
 8013cd6:	f004 f966 	bl	8017fa6 <RegionAlternateDr>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	461a      	mov	r2, r3
 8013cde:	4b58      	ldr	r3, [pc, #352]	; (8013e40 <LoRaMacMlmeRequest+0x27c>)
 8013ce0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8013ce4:	e07b      	b.n	8013dde <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013ce6:	2300      	movs	r3, #0
 8013ce8:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013cea:	f107 030c 	add.w	r3, r7, #12
 8013cee:	2200      	movs	r2, #0
 8013cf0:	4619      	mov	r1, r3
 8013cf2:	2002      	movs	r0, #2
 8013cf4:	f002 fa88 	bl	8016208 <LoRaMacCommandsAddCmd>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d071      	beq.n	8013de2 <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013cfe:	2313      	movs	r3, #19
 8013d00:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013d02:	e06e      	b.n	8013de2 <LoRaMacMlmeRequest+0x21e>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	889b      	ldrh	r3, [r3, #4]
 8013d08:	4618      	mov	r0, r3
 8013d0a:	f7fe fc73 	bl	80125f4 <SetTxContinuousWave>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	75fb      	strb	r3, [r7, #23]
            break;
 8013d12:	e06d      	b.n	8013df0 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	8898      	ldrh	r0, [r3, #4]
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	6899      	ldr	r1, [r3, #8]
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8013d22:	b2db      	uxtb	r3, r3
 8013d24:	461a      	mov	r2, r3
 8013d26:	f7fe fc99 	bl	801265c <SetTxContinuousWave1>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	75fb      	strb	r3, [r7, #23]
            break;
 8013d2e:	e05f      	b.n	8013df0 <LoRaMacMlmeRequest+0x22c>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013d30:	2300      	movs	r3, #0
 8013d32:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013d34:	f107 030c 	add.w	r3, r7, #12
 8013d38:	2200      	movs	r2, #0
 8013d3a:	4619      	mov	r1, r3
 8013d3c:	200d      	movs	r0, #13
 8013d3e:	f002 fa63 	bl	8016208 <LoRaMacCommandsAddCmd>
 8013d42:	4603      	mov	r3, r0
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d04e      	beq.n	8013de6 <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013d48:	2313      	movs	r3, #19
 8013d4a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013d4c:	e04b      	b.n	8013de6 <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8013d4e:	4b3c      	ldr	r3, [pc, #240]	; (8013e40 <LoRaMacMlmeRequest+0x27c>)
 8013d50:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d148      	bne.n	8013dea <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	791b      	ldrb	r3, [r3, #4]
 8013d5c:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	791b      	ldrb	r3, [r3, #4]
 8013d62:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013d66:	b2db      	uxtb	r3, r3
 8013d68:	4618      	mov	r0, r3
 8013d6a:	f001 fdff 	bl	801596c <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8013d6e:	7dbb      	ldrb	r3, [r7, #22]
 8013d70:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8013d72:	2300      	movs	r3, #0
 8013d74:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8013d76:	f107 030c 	add.w	r3, r7, #12
 8013d7a:	2201      	movs	r2, #1
 8013d7c:	4619      	mov	r1, r3
 8013d7e:	2010      	movs	r0, #16
 8013d80:	f002 fa42 	bl	8016208 <LoRaMacCommandsAddCmd>
 8013d84:	4603      	mov	r3, r0
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d02f      	beq.n	8013dea <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013d8a:	2313      	movs	r3, #19
 8013d8c:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8013d8e:	e02c      	b.n	8013dea <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013d90:	2300      	movs	r3, #0
 8013d92:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013d94:	f107 030c 	add.w	r3, r7, #12
 8013d98:	2200      	movs	r2, #0
 8013d9a:	4619      	mov	r1, r3
 8013d9c:	2012      	movs	r0, #18
 8013d9e:	f002 fa33 	bl	8016208 <LoRaMacCommandsAddCmd>
 8013da2:	4603      	mov	r3, r0
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d022      	beq.n	8013dee <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013da8:	2313      	movs	r3, #19
 8013daa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013dac:	e01f      	b.n	8013dee <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8013dae:	2301      	movs	r3, #1
 8013db0:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8013db2:	f000 ff83 	bl	8014cbc <LoRaMacClassBIsAcquisitionInProgress>
 8013db6:	4603      	mov	r3, r0
 8013db8:	f083 0301 	eor.w	r3, r3, #1
 8013dbc:	b2db      	uxtb	r3, r3
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d008      	beq.n	8013dd4 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8013dc2:	2000      	movs	r0, #0
 8013dc4:	f000 ff24 	bl	8014c10 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8013dc8:	2000      	movs	r0, #0
 8013dca:	f000 ff8d 	bl	8014ce8 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8013dce:	2300      	movs	r3, #0
 8013dd0:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8013dd2:	e00d      	b.n	8013df0 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8013dd4:	2301      	movs	r3, #1
 8013dd6:	75fb      	strb	r3, [r7, #23]
            break;
 8013dd8:	e00a      	b.n	8013df0 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8013dda:	bf00      	nop
 8013ddc:	e008      	b.n	8013df0 <LoRaMacMlmeRequest+0x22c>
            break;
 8013dde:	bf00      	nop
 8013de0:	e006      	b.n	8013df0 <LoRaMacMlmeRequest+0x22c>
            break;
 8013de2:	bf00      	nop
 8013de4:	e004      	b.n	8013df0 <LoRaMacMlmeRequest+0x22c>
            break;
 8013de6:	bf00      	nop
 8013de8:	e002      	b.n	8013df0 <LoRaMacMlmeRequest+0x22c>
            break;
 8013dea:	bf00      	nop
 8013dec:	e000      	b.n	8013df0 <LoRaMacMlmeRequest+0x22c>
            break;
 8013dee:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013df0:	4b12      	ldr	r3, [pc, #72]	; (8013e3c <LoRaMacMlmeRequest+0x278>)
 8013df2:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8013dfa:	7dfb      	ldrb	r3, [r7, #23]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d010      	beq.n	8013e22 <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013e00:	f002 fd90 	bl	8016924 <LoRaMacConfirmQueueGetCnt>
 8013e04:	4603      	mov	r3, r0
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d110      	bne.n	8013e2c <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8013e0a:	4b0c      	ldr	r3, [pc, #48]	; (8013e3c <LoRaMacMlmeRequest+0x278>)
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8013e12:	4a0a      	ldr	r2, [pc, #40]	; (8013e3c <LoRaMacMlmeRequest+0x278>)
 8013e14:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8013e18:	f36f 0382 	bfc	r3, #2, #1
 8013e1c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8013e20:	e004      	b.n	8013e2c <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8013e22:	f107 0310 	add.w	r3, r7, #16
 8013e26:	4618      	mov	r0, r3
 8013e28:	f002 fc2e 	bl	8016688 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8013e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e2e:	4618      	mov	r0, r3
 8013e30:	3718      	adds	r7, #24
 8013e32:	46bd      	mov	sp, r7
 8013e34:	bd80      	pop	{r7, pc}
 8013e36:	bf00      	nop
 8013e38:	20001184 	.word	0x20001184
 8013e3c:	20000d38 	.word	0x20000d38
 8013e40:	20001244 	.word	0x20001244

08013e44 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b08c      	sub	sp, #48	; 0x30
 8013e48:	af02      	add	r7, sp, #8
 8013e4a:	6078      	str	r0, [r7, #4]
 8013e4c:	460b      	mov	r3, r1
 8013e4e:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013e50:	2302      	movs	r3, #2
 8013e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8013e56:	2300      	movs	r3, #0
 8013e58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8013e60:	2300      	movs	r3, #0
 8013e62:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8013e64:	2300      	movs	r3, #0
 8013e66:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d101      	bne.n	8013e72 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013e6e:	2303      	movs	r3, #3
 8013e70:	e0d4      	b.n	801401c <LoRaMacMcpsRequest+0x1d8>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 8013e72:	f7fc fb89 	bl	8010588 <LoRaMacIsBusy>
 8013e76:	4603      	mov	r3, r0
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d001      	beq.n	8013e80 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8013e7c:	2301      	movs	r3, #1
 8013e7e:	e0cd      	b.n	801401c <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8013e80:	2300      	movs	r3, #0
 8013e82:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8013e84:	2214      	movs	r2, #20
 8013e86:	2100      	movs	r1, #0
 8013e88:	4866      	ldr	r0, [pc, #408]	; (8014024 <LoRaMacMcpsRequest+0x1e0>)
 8013e8a:	f006 fb4f 	bl	801a52c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013e8e:	4b66      	ldr	r3, [pc, #408]	; (8014028 <LoRaMacMcpsRequest+0x1e4>)
 8013e90:	2201      	movs	r2, #1
 8013e92:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8013e96:	4b64      	ldr	r3, [pc, #400]	; (8014028 <LoRaMacMcpsRequest+0x1e4>)
 8013e98:	2201      	movs	r2, #1
 8013e9a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	781b      	ldrb	r3, [r3, #0]
 8013ea2:	2b03      	cmp	r3, #3
 8013ea4:	d03d      	beq.n	8013f22 <LoRaMacMcpsRequest+0xde>
 8013ea6:	2b03      	cmp	r3, #3
 8013ea8:	dc4f      	bgt.n	8013f4a <LoRaMacMcpsRequest+0x106>
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d002      	beq.n	8013eb4 <LoRaMacMcpsRequest+0x70>
 8013eae:	2b01      	cmp	r3, #1
 8013eb0:	d019      	beq.n	8013ee6 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8013eb2:	e04a      	b.n	8013f4a <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8013eb4:	2301      	movs	r3, #1
 8013eb6:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8013eb8:	4b5b      	ldr	r3, [pc, #364]	; (8014028 <LoRaMacMcpsRequest+0x1e4>)
 8013eba:	2201      	movs	r2, #1
 8013ebc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8013ec0:	7b3b      	ldrb	r3, [r7, #12]
 8013ec2:	2202      	movs	r2, #2
 8013ec4:	f362 1347 	bfi	r3, r2, #5, #3
 8013ec8:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	791b      	ldrb	r3, [r3, #4]
 8013ece:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	689b      	ldr	r3, [r3, #8]
 8013ed6:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	899b      	ldrh	r3, [r3, #12]
 8013edc:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	7b9b      	ldrb	r3, [r3, #14]
 8013ee2:	777b      	strb	r3, [r7, #29]
            break;
 8013ee4:	e032      	b.n	8013f4c <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8013ee6:	2301      	movs	r3, #1
 8013ee8:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	7bdb      	ldrb	r3, [r3, #15]
 8013eee:	2b08      	cmp	r3, #8
 8013ef0:	bf28      	it	cs
 8013ef2:	2308      	movcs	r3, #8
 8013ef4:	b2da      	uxtb	r2, r3
 8013ef6:	4b4c      	ldr	r3, [pc, #304]	; (8014028 <LoRaMacMcpsRequest+0x1e4>)
 8013ef8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8013efc:	7b3b      	ldrb	r3, [r7, #12]
 8013efe:	2204      	movs	r2, #4
 8013f00:	f362 1347 	bfi	r3, r2, #5, #3
 8013f04:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	791b      	ldrb	r3, [r3, #4]
 8013f0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	689b      	ldr	r3, [r3, #8]
 8013f12:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	899b      	ldrh	r3, [r3, #12]
 8013f18:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	7b9b      	ldrb	r3, [r3, #14]
 8013f1e:	777b      	strb	r3, [r7, #29]
            break;
 8013f20:	e014      	b.n	8013f4c <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8013f22:	2301      	movs	r3, #1
 8013f24:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8013f26:	4b40      	ldr	r3, [pc, #256]	; (8014028 <LoRaMacMcpsRequest+0x1e4>)
 8013f28:	2201      	movs	r2, #1
 8013f2a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8013f2e:	7b3b      	ldrb	r3, [r7, #12]
 8013f30:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8013f34:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	685b      	ldr	r3, [r3, #4]
 8013f3a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	891b      	ldrh	r3, [r3, #8]
 8013f40:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	7a9b      	ldrb	r3, [r3, #10]
 8013f46:	777b      	strb	r3, [r7, #29]
            break;
 8013f48:	e000      	b.n	8013f4c <LoRaMacMcpsRequest+0x108>
            break;
 8013f4a:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8013f4c:	2302      	movs	r3, #2
 8013f4e:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013f50:	4b36      	ldr	r3, [pc, #216]	; (801402c <LoRaMacMcpsRequest+0x1e8>)
 8013f52:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8013f56:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013f58:	4b34      	ldr	r3, [pc, #208]	; (801402c <LoRaMacMcpsRequest+0x1e8>)
 8013f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013f5e:	f107 0214 	add.w	r2, r7, #20
 8013f62:	4611      	mov	r1, r2
 8013f64:	4618      	mov	r0, r3
 8013f66:	f003 fefb 	bl	8017d60 <RegionGetPhyParam>
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8013f6e:	693b      	ldr	r3, [r7, #16]
 8013f70:	b25b      	sxtb	r3, r3
 8013f72:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8013f76:	4293      	cmp	r3, r2
 8013f78:	bfb8      	it	lt
 8013f7a:	4613      	movlt	r3, r2
 8013f7c:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8013f7e:	7f3b      	ldrb	r3, [r7, #28]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d044      	beq.n	801400e <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8013f84:	4b29      	ldr	r3, [pc, #164]	; (801402c <LoRaMacMcpsRequest+0x1e8>)
 8013f86:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8013f8a:	f083 0301 	eor.w	r3, r3, #1
 8013f8e:	b2db      	uxtb	r3, r3
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d019      	beq.n	8013fc8 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8013f94:	7f7b      	ldrb	r3, [r7, #29]
 8013f96:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013f98:	4b24      	ldr	r3, [pc, #144]	; (801402c <LoRaMacMcpsRequest+0x1e8>)
 8013f9a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8013f9e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8013fa0:	4b22      	ldr	r3, [pc, #136]	; (801402c <LoRaMacMcpsRequest+0x1e8>)
 8013fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013fa6:	f107 0108 	add.w	r1, r7, #8
 8013faa:	2205      	movs	r2, #5
 8013fac:	4618      	mov	r0, r3
 8013fae:	f003 ff12 	bl	8017dd6 <RegionVerify>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d005      	beq.n	8013fc4 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013fb8:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013fbc:	4b1b      	ldr	r3, [pc, #108]	; (801402c <LoRaMacMcpsRequest+0x1e8>)
 8013fbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8013fc2:	e001      	b.n	8013fc8 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8013fc4:	2303      	movs	r3, #3
 8013fc6:	e029      	b.n	801401c <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8013fc8:	8bfa      	ldrh	r2, [r7, #30]
 8013fca:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8013fce:	f107 000c 	add.w	r0, r7, #12
 8013fd2:	78fb      	ldrb	r3, [r7, #3]
 8013fd4:	9300      	str	r3, [sp, #0]
 8013fd6:	4613      	mov	r3, r2
 8013fd8:	6a3a      	ldr	r2, [r7, #32]
 8013fda:	f7fd fc7b 	bl	80118d4 <Send>
 8013fde:	4603      	mov	r3, r0
 8013fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8013fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d10c      	bne.n	8014006 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	781a      	ldrb	r2, [r3, #0]
 8013ff0:	4b0d      	ldr	r3, [pc, #52]	; (8014028 <LoRaMacMcpsRequest+0x1e4>)
 8013ff2:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8013ff6:	4a0c      	ldr	r2, [pc, #48]	; (8014028 <LoRaMacMcpsRequest+0x1e4>)
 8013ff8:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8013ffc:	f043 0301 	orr.w	r3, r3, #1
 8014000:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8014004:	e003      	b.n	801400e <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8014006:	4b08      	ldr	r3, [pc, #32]	; (8014028 <LoRaMacMcpsRequest+0x1e4>)
 8014008:	2200      	movs	r2, #0
 801400a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801400e:	4b06      	ldr	r3, [pc, #24]	; (8014028 <LoRaMacMcpsRequest+0x1e4>)
 8014010:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	611a      	str	r2, [r3, #16]

    return status;
 8014018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801401c:	4618      	mov	r0, r3
 801401e:	3728      	adds	r7, #40	; 0x28
 8014020:	46bd      	mov	sp, r7
 8014022:	bd80      	pop	{r7, pc}
 8014024:	20001170 	.word	0x20001170
 8014028:	20000d38 	.word	0x20000d38
 801402c:	20001244 	.word	0x20001244

08014030 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b084      	sub	sp, #16
 8014034:	af00      	add	r7, sp, #0
 8014036:	4603      	mov	r3, r0
 8014038:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 801403a:	79fb      	ldrb	r3, [r7, #7]
 801403c:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 801403e:	4b0a      	ldr	r3, [pc, #40]	; (8014068 <LoRaMacTestSetDutyCycleOn+0x38>)
 8014040:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014044:	f107 010c 	add.w	r1, r7, #12
 8014048:	220f      	movs	r2, #15
 801404a:	4618      	mov	r0, r3
 801404c:	f003 fec3 	bl	8017dd6 <RegionVerify>
 8014050:	4603      	mov	r3, r0
 8014052:	2b00      	cmp	r3, #0
 8014054:	d003      	beq.n	801405e <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8014056:	4a04      	ldr	r2, [pc, #16]	; (8014068 <LoRaMacTestSetDutyCycleOn+0x38>)
 8014058:	79fb      	ldrb	r3, [r7, #7]
 801405a:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
    }
}
 801405e:	bf00      	nop
 8014060:	3710      	adds	r7, #16
 8014062:	46bd      	mov	sp, r7
 8014064:	bd80      	pop	{r7, pc}
 8014066:	bf00      	nop
 8014068:	20001244 	.word	0x20001244

0801406c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 801406c:	b580      	push	{r7, lr}
 801406e:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8014070:	f7fe ffec 	bl	801304c <LoRaMacStop>
 8014074:	4603      	mov	r3, r0
 8014076:	2b00      	cmp	r3, #0
 8014078:	d114      	bne.n	80140a4 <LoRaMacDeInitialization+0x38>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 801407a:	480c      	ldr	r0, [pc, #48]	; (80140ac <LoRaMacDeInitialization+0x40>)
 801407c:	f00a fb66 	bl	801e74c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8014080:	480b      	ldr	r0, [pc, #44]	; (80140b0 <LoRaMacDeInitialization+0x44>)
 8014082:	f00a fb63 	bl	801e74c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8014086:	480b      	ldr	r0, [pc, #44]	; (80140b4 <LoRaMacDeInitialization+0x48>)
 8014088:	f00a fb60 	bl	801e74c <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 801408c:	480a      	ldr	r0, [pc, #40]	; (80140b8 <LoRaMacDeInitialization+0x4c>)
 801408e:	f00a fb5d 	bl	801e74c <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8014092:	f001 fc89 	bl	80159a8 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 8014096:	f7fd ff85 	bl	8011fa4 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 801409a:	4b08      	ldr	r3, [pc, #32]	; (80140bc <LoRaMacDeInitialization+0x50>)
 801409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801409e:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 80140a0:	2300      	movs	r3, #0
 80140a2:	e000      	b.n	80140a6 <LoRaMacDeInitialization+0x3a>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 80140a4:	2301      	movs	r3, #1
    }
}
 80140a6:	4618      	mov	r0, r3
 80140a8:	bd80      	pop	{r7, pc}
 80140aa:	bf00      	nop
 80140ac:	200010a0 	.word	0x200010a0
 80140b0:	200010b8 	.word	0x200010b8
 80140b4:	200010d0 	.word	0x200010d0
 80140b8:	20001130 	.word	0x20001130
 80140bc:	0801fbe4 	.word	0x0801fbe4

080140c0 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b08c      	sub	sp, #48	; 0x30
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	60f8      	str	r0, [r7, #12]
 80140c8:	60b9      	str	r1, [r7, #8]
 80140ca:	607a      	str	r2, [r7, #4]
 80140cc:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80140ce:	2300      	movs	r3, #0
 80140d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	7c1b      	ldrb	r3, [r3, #16]
 80140d8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	7c5b      	ldrb	r3, [r3, #17]
 80140e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	689a      	ldr	r2, [r3, #8]
 80140e8:	683b      	ldr	r3, [r7, #0]
 80140ea:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	795b      	ldrb	r3, [r3, #5]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	f000 808b 	beq.w	801420c <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80140f6:	2302      	movs	r3, #2
 80140f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	7c9b      	ldrb	r3, [r3, #18]
 8014100:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	7cdb      	ldrb	r3, [r3, #19]
 8014108:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801410c:	4611      	mov	r1, r2
 801410e:	4618      	mov	r0, r3
 8014110:	f003 fe26 	bl	8017d60 <RegionGetPhyParam>
 8014114:	4603      	mov	r3, r0
 8014116:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8014118:	6a3b      	ldr	r3, [r7, #32]
 801411a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 801411e:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8014122:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8014126:	4293      	cmp	r3, r2
 8014128:	bfb8      	it	lt
 801412a:	4613      	movlt	r3, r2
 801412c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8014130:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8014134:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8014138:	429a      	cmp	r2, r3
 801413a:	d106      	bne.n	801414a <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 801413c:	683b      	ldr	r3, [r7, #0]
 801413e:	2200      	movs	r2, #0
 8014140:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8014142:	2300      	movs	r3, #0
 8014144:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014148:	e060      	b.n	801420c <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	689b      	ldr	r3, [r3, #8]
 801414e:	68fa      	ldr	r2, [r7, #12]
 8014150:	8992      	ldrh	r2, [r2, #12]
 8014152:	4293      	cmp	r3, r2
 8014154:	d303      	bcc.n	801415e <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8014156:	2301      	movs	r3, #1
 8014158:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801415c:	e002      	b.n	8014164 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 801415e:	2300      	movs	r3, #0
 8014160:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	689b      	ldr	r3, [r3, #8]
 8014168:	68fa      	ldr	r2, [r7, #12]
 801416a:	8992      	ldrh	r2, [r2, #12]
 801416c:	4611      	mov	r1, r2
 801416e:	68fa      	ldr	r2, [r7, #12]
 8014170:	89d2      	ldrh	r2, [r2, #14]
 8014172:	440a      	add	r2, r1
 8014174:	4293      	cmp	r3, r2
 8014176:	d349      	bcc.n	801420c <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8014178:	2308      	movs	r3, #8
 801417a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	7cdb      	ldrb	r3, [r3, #19]
 8014182:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014186:	4611      	mov	r1, r2
 8014188:	4618      	mov	r0, r3
 801418a:	f003 fde9 	bl	8017d60 <RegionGetPhyParam>
 801418e:	4603      	mov	r3, r0
 8014190:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8014192:	6a3b      	ldr	r3, [r7, #32]
 8014194:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	689b      	ldr	r3, [r3, #8]
 801419c:	68fa      	ldr	r2, [r7, #12]
 801419e:	89d2      	ldrh	r2, [r2, #14]
 80141a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80141a4:	fb01 f202 	mul.w	r2, r1, r2
 80141a8:	1a9b      	subs	r3, r3, r2
 80141aa:	2b01      	cmp	r3, #1
 80141ac:	d12e      	bne.n	801420c <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80141ae:	2322      	movs	r3, #34	; 0x22
 80141b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 80141b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80141b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	7c9b      	ldrb	r3, [r3, #18]
 80141c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	7cdb      	ldrb	r3, [r3, #19]
 80141c8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80141cc:	4611      	mov	r1, r2
 80141ce:	4618      	mov	r0, r3
 80141d0:	f003 fdc6 	bl	8017d60 <RegionGetPhyParam>
 80141d4:	4603      	mov	r3, r0
 80141d6:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 80141d8:	6a3b      	ldr	r3, [r7, #32]
 80141da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 80141de:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80141e2:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80141e6:	429a      	cmp	r2, r3
 80141e8:	d110      	bne.n	801420c <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 80141ea:	2300      	movs	r3, #0
 80141ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	791b      	ldrb	r3, [r3, #4]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d009      	beq.n	801420c <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80141f8:	2302      	movs	r3, #2
 80141fa:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	7cdb      	ldrb	r3, [r3, #19]
 8014200:	f107 0214 	add.w	r2, r7, #20
 8014204:	4611      	mov	r1, r2
 8014206:	4618      	mov	r0, r3
 8014208:	f003 fdd3 	bl	8017db2 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8014212:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801421a:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 801421c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014220:	4618      	mov	r0, r3
 8014222:	3730      	adds	r7, #48	; 0x30
 8014224:	46bd      	mov	sp, r7
 8014226:	bd80      	pop	{r7, pc}

08014228 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8014228:	b580      	push	{r7, lr}
 801422a:	b084      	sub	sp, #16
 801422c:	af00      	add	r7, sp, #0
 801422e:	60f8      	str	r0, [r7, #12]
 8014230:	60b9      	str	r1, [r7, #8]
 8014232:	607a      	str	r2, [r7, #4]
 8014234:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	789b      	ldrb	r3, [r3, #2]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d107      	bne.n	801424e <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	687a      	ldr	r2, [r7, #4]
 8014242:	68b9      	ldr	r1, [r7, #8]
 8014244:	68f8      	ldr	r0, [r7, #12]
 8014246:	f7ff ff3b 	bl	80140c0 <CalcNextV10X>
 801424a:	4603      	mov	r3, r0
 801424c:	e000      	b.n	8014250 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 801424e:	2300      	movs	r3, #0
}
 8014250:	4618      	mov	r0, r3
 8014252:	3710      	adds	r7, #16
 8014254:	46bd      	mov	sp, r7
 8014256:	bd80      	pop	{r7, pc}

08014258 <TimerTempCompensation>:
 * \retval Compensated time period
 */
static TimerTime_t TimerTempCompensation( TimerTime_t period, int16_t temperature );

static TimerTime_t TimerTempCompensation( TimerTime_t period, int16_t temperature )
{
 8014258:	b590      	push	{r4, r7, lr}
 801425a:	b089      	sub	sp, #36	; 0x24
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
 8014260:	460b      	mov	r3, r1
 8014262:	807b      	strh	r3, [r7, #2]
  float k = RTC_TEMP_COEFFICIENT;
 8014264:	4b3e      	ldr	r3, [pc, #248]	; (8014360 <TimerTempCompensation+0x108>)
 8014266:	617b      	str	r3, [r7, #20]
  float kDev = RTC_TEMP_DEV_COEFFICIENT;
 8014268:	4b3e      	ldr	r3, [pc, #248]	; (8014364 <TimerTempCompensation+0x10c>)
 801426a:	613b      	str	r3, [r7, #16]
  float t = RTC_TEMP_TURNOVER;
 801426c:	4b3e      	ldr	r3, [pc, #248]	; (8014368 <TimerTempCompensation+0x110>)
 801426e:	60fb      	str	r3, [r7, #12]
  float tDev = RTC_TEMP_DEV_TURNOVER;
 8014270:	4b3e      	ldr	r3, [pc, #248]	; (801436c <TimerTempCompensation+0x114>)
 8014272:	60bb      	str	r3, [r7, #8]
  float interim = 0.0f;
 8014274:	f04f 0300 	mov.w	r3, #0
 8014278:	61fb      	str	r3, [r7, #28]
  float ppm = 0.0f;
 801427a:	f04f 0300 	mov.w	r3, #0
 801427e:	61bb      	str	r3, [r7, #24]

  if (k < 0.0f)
 8014280:	f04f 0100 	mov.w	r1, #0
 8014284:	6978      	ldr	r0, [r7, #20]
 8014286:	f7ec fef9 	bl	800107c <__aeabi_fcmplt>
 801428a:	4603      	mov	r3, r0
 801428c:	2b00      	cmp	r3, #0
 801428e:	d006      	beq.n	801429e <TimerTempCompensation+0x46>
  {
    ppm = (k - kDev);
 8014290:	6939      	ldr	r1, [r7, #16]
 8014292:	6978      	ldr	r0, [r7, #20]
 8014294:	f7ec fc4a 	bl	8000b2c <__aeabi_fsub>
 8014298:	4603      	mov	r3, r0
 801429a:	61bb      	str	r3, [r7, #24]
 801429c:	e005      	b.n	80142aa <TimerTempCompensation+0x52>
  }
  else
  {
    ppm = (k + kDev);
 801429e:	6939      	ldr	r1, [r7, #16]
 80142a0:	6978      	ldr	r0, [r7, #20]
 80142a2:	f7ec fc45 	bl	8000b30 <__addsf3>
 80142a6:	4603      	mov	r3, r0
 80142a8:	61bb      	str	r3, [r7, #24]
  }
  interim = (float)temperature - (t - tDev);
 80142aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80142ae:	4618      	mov	r0, r3
 80142b0:	f7ec fcf2 	bl	8000c98 <__aeabi_i2f>
 80142b4:	4604      	mov	r4, r0
 80142b6:	68b9      	ldr	r1, [r7, #8]
 80142b8:	68f8      	ldr	r0, [r7, #12]
 80142ba:	f7ec fc37 	bl	8000b2c <__aeabi_fsub>
 80142be:	4603      	mov	r3, r0
 80142c0:	4619      	mov	r1, r3
 80142c2:	4620      	mov	r0, r4
 80142c4:	f7ec fc32 	bl	8000b2c <__aeabi_fsub>
 80142c8:	4603      	mov	r3, r0
 80142ca:	61fb      	str	r3, [r7, #28]
  ppm *=  interim * interim;
 80142cc:	69f9      	ldr	r1, [r7, #28]
 80142ce:	69f8      	ldr	r0, [r7, #28]
 80142d0:	f7ec fd36 	bl	8000d40 <__aeabi_fmul>
 80142d4:	4603      	mov	r3, r0
 80142d6:	4619      	mov	r1, r3
 80142d8:	69b8      	ldr	r0, [r7, #24]
 80142da:	f7ec fd31 	bl	8000d40 <__aeabi_fmul>
 80142de:	4603      	mov	r3, r0
 80142e0:	61bb      	str	r3, [r7, #24]

  // Calculate the drift in time
  interim = ((float) period * ppm) / 1000000.0f;
 80142e2:	6878      	ldr	r0, [r7, #4]
 80142e4:	f7ec fcd4 	bl	8000c90 <__aeabi_ui2f>
 80142e8:	4603      	mov	r3, r0
 80142ea:	69b9      	ldr	r1, [r7, #24]
 80142ec:	4618      	mov	r0, r3
 80142ee:	f7ec fd27 	bl	8000d40 <__aeabi_fmul>
 80142f2:	4603      	mov	r3, r0
 80142f4:	491e      	ldr	r1, [pc, #120]	; (8014370 <TimerTempCompensation+0x118>)
 80142f6:	4618      	mov	r0, r3
 80142f8:	f7ec fdd6 	bl	8000ea8 <__aeabi_fdiv>
 80142fc:	4603      	mov	r3, r0
 80142fe:	61fb      	str	r3, [r7, #28]
  // Calculate the resulting time period
  interim += period;
 8014300:	6878      	ldr	r0, [r7, #4]
 8014302:	f7ec fcc5 	bl	8000c90 <__aeabi_ui2f>
 8014306:	4603      	mov	r3, r0
 8014308:	4619      	mov	r1, r3
 801430a:	69f8      	ldr	r0, [r7, #28]
 801430c:	f7ec fc10 	bl	8000b30 <__addsf3>
 8014310:	4603      	mov	r3, r0
 8014312:	61fb      	str	r3, [r7, #28]
  interim = floor(interim);
 8014314:	69f8      	ldr	r0, [r7, #28]
 8014316:	f7ec f89b 	bl	8000450 <__aeabi_f2d>
 801431a:	4602      	mov	r2, r0
 801431c:	460b      	mov	r3, r1
 801431e:	4610      	mov	r0, r2
 8014320:	4619      	mov	r1, r3
 8014322:	f00a ff29 	bl	801f178 <floor>
 8014326:	4602      	mov	r2, r0
 8014328:	460b      	mov	r3, r1
 801432a:	4610      	mov	r0, r2
 801432c:	4619      	mov	r1, r3
 801432e:	f7ec fba9 	bl	8000a84 <__aeabi_d2f>
 8014332:	4603      	mov	r3, r0
 8014334:	61fb      	str	r3, [r7, #28]

  if (interim < 0.0f)
 8014336:	f04f 0100 	mov.w	r1, #0
 801433a:	69f8      	ldr	r0, [r7, #28]
 801433c:	f7ec fe9e 	bl	800107c <__aeabi_fcmplt>
 8014340:	4603      	mov	r3, r0
 8014342:	2b00      	cmp	r3, #0
 8014344:	d004      	beq.n	8014350 <TimerTempCompensation+0xf8>
  {
    interim = (float)period;
 8014346:	6878      	ldr	r0, [r7, #4]
 8014348:	f7ec fca2 	bl	8000c90 <__aeabi_ui2f>
 801434c:	4603      	mov	r3, r0
 801434e:	61fb      	str	r3, [r7, #28]
  }

  // Calculate the resulting period
  return ( TimerTime_t ) interim;
 8014350:	69f8      	ldr	r0, [r7, #28]
 8014352:	f7ec fee1 	bl	8001118 <__aeabi_f2uiz>
 8014356:	4603      	mov	r3, r0
}
 8014358:	4618      	mov	r0, r3
 801435a:	3724      	adds	r7, #36	; 0x24
 801435c:	46bd      	mov	sp, r7
 801435e:	bd90      	pop	{r4, r7, pc}
 8014360:	bd0f5c29 	.word	0xbd0f5c29
 8014364:	3b656042 	.word	0x3b656042
 8014368:	41c80000 	.word	0x41c80000
 801436c:	40a00000 	.word	0x40a00000
 8014370:	49742400 	.word	0x49742400

08014374 <ComputePingOffset>:
 * \param [in]  address         - Frame address
 * \param [in]  pingPeriod      - Ping period of the node
 * \param [out] pingOffset      - Pseudo random ping offset
 */
static void ComputePingOffset( uint64_t beaconTime, uint32_t address, uint16_t pingPeriod, uint16_t *pingOffset )
{
 8014374:	b580      	push	{r7, lr}
 8014376:	b08e      	sub	sp, #56	; 0x38
 8014378:	af00      	add	r7, sp, #0
 801437a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 801437e:	607a      	str	r2, [r7, #4]
 8014380:	807b      	strh	r3, [r7, #2]
    uint8_t buffer[16];
    uint8_t cipher[16];
    uint32_t result = 0;
 8014382:	2300      	movs	r3, #0
 8014384:	637b      	str	r3, [r7, #52]	; 0x34
    /* Refer to chapter 15.2 of the LoRaWAN specification v1.1. The beacon time
     * GPS time in seconds modulo 2^32
     */
    uint32_t time = ( beaconTime % ( ( ( uint64_t ) 1 ) << 32 ) );
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	633b      	str	r3, [r7, #48]	; 0x30

    memset1( buffer, 0, 16 );
 801438a:	f107 0320 	add.w	r3, r7, #32
 801438e:	2210      	movs	r2, #16
 8014390:	2100      	movs	r1, #0
 8014392:	4618      	mov	r0, r3
 8014394:	f006 f8ca 	bl	801a52c <memset1>
    memset1( cipher, 0, 16 );
 8014398:	f107 0310 	add.w	r3, r7, #16
 801439c:	2210      	movs	r2, #16
 801439e:	2100      	movs	r1, #0
 80143a0:	4618      	mov	r0, r3
 80143a2:	f006 f8c3 	bl	801a52c <memset1>

    buffer[0] = ( time ) & 0xFF;
 80143a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143a8:	b2db      	uxtb	r3, r3
 80143aa:	f887 3020 	strb.w	r3, [r7, #32]
    buffer[1] = ( time >> 8 ) & 0xFF;
 80143ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143b0:	0a1b      	lsrs	r3, r3, #8
 80143b2:	b2db      	uxtb	r3, r3
 80143b4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    buffer[2] = ( time >> 16 ) & 0xFF;
 80143b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ba:	0c1b      	lsrs	r3, r3, #16
 80143bc:	b2db      	uxtb	r3, r3
 80143be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    buffer[3] = ( time >> 24 ) & 0xFF;
 80143c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143c4:	0e1b      	lsrs	r3, r3, #24
 80143c6:	b2db      	uxtb	r3, r3
 80143c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    buffer[4] = ( address ) & 0xFF;
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	b2db      	uxtb	r3, r3
 80143d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    buffer[5] = ( address >> 8 ) & 0xFF;
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	0a1b      	lsrs	r3, r3, #8
 80143d8:	b2db      	uxtb	r3, r3
 80143da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    buffer[6] = ( address >> 16 ) & 0xFF;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	0c1b      	lsrs	r3, r3, #16
 80143e2:	b2db      	uxtb	r3, r3
 80143e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    buffer[7] = ( address >> 24 ) & 0xFF;
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	0e1b      	lsrs	r3, r3, #24
 80143ec:	b2db      	uxtb	r3, r3
 80143ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    SecureElementAesEncrypt( buffer, 16, SLOT_RAND_ZERO_KEY, cipher );
 80143f2:	f107 0310 	add.w	r3, r7, #16
 80143f6:	f107 0020 	add.w	r0, r7, #32
 80143fa:	2283      	movs	r2, #131	; 0x83
 80143fc:	2110      	movs	r1, #16
 80143fe:	f7f9 fc70 	bl	800dce2 <SecureElementAesEncrypt>

    result = ( ( ( uint32_t ) cipher[0] ) + ( ( ( uint32_t ) cipher[1] ) * 256 ) );
 8014402:	7c3b      	ldrb	r3, [r7, #16]
 8014404:	461a      	mov	r2, r3
 8014406:	7c7b      	ldrb	r3, [r7, #17]
 8014408:	021b      	lsls	r3, r3, #8
 801440a:	4413      	add	r3, r2
 801440c:	637b      	str	r3, [r7, #52]	; 0x34

    *pingOffset = ( uint16_t )( result % pingPeriod );
 801440e:	887a      	ldrh	r2, [r7, #2]
 8014410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014412:	fbb3 f1f2 	udiv	r1, r3, r2
 8014416:	fb01 f202 	mul.w	r2, r1, r2
 801441a:	1a9b      	subs	r3, r3, r2
 801441c:	b29a      	uxth	r2, r3
 801441e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014420:	801a      	strh	r2, [r3, #0]
}
 8014422:	bf00      	nop
 8014424:	3738      	adds	r7, #56	; 0x38
 8014426:	46bd      	mov	sp, r7
 8014428:	bd80      	pop	{r7, pc}
	...

0801442c <CalcDownlinkFrequency>:
 *                      calculate the frequency for a beacon.
 *
 * \retval The downlink frequency
 */
static uint32_t CalcDownlinkFrequency( uint8_t channel, bool isBeacon )
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b086      	sub	sp, #24
 8014430:	af00      	add	r7, sp, #0
 8014432:	4603      	mov	r3, r0
 8014434:	460a      	mov	r2, r1
 8014436:	71fb      	strb	r3, [r7, #7]
 8014438:	4613      	mov	r3, r2
 801443a:	71bb      	strb	r3, [r7, #6]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    getPhy.Attribute = PHY_PING_SLOT_CHANNEL_FREQ;
 801443c:	2335      	movs	r3, #53	; 0x35
 801443e:	743b      	strb	r3, [r7, #16]

    if( isBeacon == true )
 8014440:	79bb      	ldrb	r3, [r7, #6]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d001      	beq.n	801444a <CalcDownlinkFrequency+0x1e>
    {
        getPhy.Attribute = PHY_BEACON_CHANNEL_FREQ;
 8014446:	2330      	movs	r3, #48	; 0x30
 8014448:	743b      	strb	r3, [r7, #16]
    }
    getPhy.Channel = channel;
 801444a:	79fb      	ldrb	r3, [r7, #7]
 801444c:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 801444e:	4b08      	ldr	r3, [pc, #32]	; (8014470 <CalcDownlinkFrequency+0x44>)
 8014450:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014454:	781b      	ldrb	r3, [r3, #0]
 8014456:	f107 0210 	add.w	r2, r7, #16
 801445a:	4611      	mov	r1, r2
 801445c:	4618      	mov	r0, r3
 801445e:	f003 fc7f 	bl	8017d60 <RegionGetPhyParam>
 8014462:	4603      	mov	r3, r0
 8014464:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8014466:	68fb      	ldr	r3, [r7, #12]
}
 8014468:	4618      	mov	r0, r3
 801446a:	3718      	adds	r7, #24
 801446c:	46bd      	mov	sp, r7
 801446e:	bd80      	pop	{r7, pc}
 8014470:	200020b0 	.word	0x200020b0

08014474 <CalcDownlinkChannelAndFrequency>:
 *
 * \retval The downlink channel
 */
static uint32_t CalcDownlinkChannelAndFrequency( uint32_t devAddr, TimerTime_t beaconTime,
                                                 TimerTime_t beaconInterval, bool isBeacon )
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b088      	sub	sp, #32
 8014478:	af00      	add	r7, sp, #0
 801447a:	60f8      	str	r0, [r7, #12]
 801447c:	60b9      	str	r1, [r7, #8]
 801447e:	607a      	str	r2, [r7, #4]
 8014480:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    uint32_t channel = 0;
 8014482:	2300      	movs	r3, #0
 8014484:	61fb      	str	r3, [r7, #28]
    uint8_t nbChannels = 0;
 8014486:	2300      	movs	r3, #0
 8014488:	76fb      	strb	r3, [r7, #27]
    uint8_t offset = 0;
 801448a:	2300      	movs	r3, #0
 801448c:	76bb      	strb	r3, [r7, #26]

    // Default initialization - ping slot channels
    getPhy.Attribute = PHY_PING_SLOT_NB_CHANNELS;
 801448e:	2337      	movs	r3, #55	; 0x37
 8014490:	753b      	strb	r3, [r7, #20]

    if( isBeacon == true )
 8014492:	78fb      	ldrb	r3, [r7, #3]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d001      	beq.n	801449c <CalcDownlinkChannelAndFrequency+0x28>
    {
        // Beacon channels
        getPhy.Attribute = PHY_BEACON_NB_CHANNELS;
 8014498:	2333      	movs	r3, #51	; 0x33
 801449a:	753b      	strb	r3, [r7, #20]
    }
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 801449c:	4b21      	ldr	r3, [pc, #132]	; (8014524 <CalcDownlinkChannelAndFrequency+0xb0>)
 801449e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80144a2:	781b      	ldrb	r3, [r3, #0]
 80144a4:	f107 0214 	add.w	r2, r7, #20
 80144a8:	4611      	mov	r1, r2
 80144aa:	4618      	mov	r0, r3
 80144ac:	f003 fc58 	bl	8017d60 <RegionGetPhyParam>
 80144b0:	4603      	mov	r3, r0
 80144b2:	613b      	str	r3, [r7, #16]
    nbChannels = ( uint8_t ) phyParam.Value;
 80144b4:	693b      	ldr	r3, [r7, #16]
 80144b6:	76fb      	strb	r3, [r7, #27]

    // nbChannels is > 1, when the channel plan requires more than one possible channel
    // defined by the calculation below.
    if( nbChannels > 1 )
 80144b8:	7efb      	ldrb	r3, [r7, #27]
 80144ba:	2b01      	cmp	r3, #1
 80144bc:	d926      	bls.n	801450c <CalcDownlinkChannelAndFrequency+0x98>
    {
        getPhy.Attribute = PHY_BEACON_CHANNEL_OFFSET;
 80144be:	2334      	movs	r3, #52	; 0x34
 80144c0:	753b      	strb	r3, [r7, #20]
        phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 80144c2:	4b18      	ldr	r3, [pc, #96]	; (8014524 <CalcDownlinkChannelAndFrequency+0xb0>)
 80144c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80144c8:	781b      	ldrb	r3, [r3, #0]
 80144ca:	f107 0214 	add.w	r2, r7, #20
 80144ce:	4611      	mov	r1, r2
 80144d0:	4618      	mov	r0, r3
 80144d2:	f003 fc45 	bl	8017d60 <RegionGetPhyParam>
 80144d6:	4603      	mov	r3, r0
 80144d8:	613b      	str	r3, [r7, #16]
        offset = ( uint8_t ) phyParam.Value;
 80144da:	693b      	ldr	r3, [r7, #16]
 80144dc:	76bb      	strb	r3, [r7, #26]

        // Calculate the channel for the next downlink
        channel = devAddr + ( beaconTime / ( beaconInterval / 1000 ) );
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	4a11      	ldr	r2, [pc, #68]	; (8014528 <CalcDownlinkChannelAndFrequency+0xb4>)
 80144e2:	fba2 2303 	umull	r2, r3, r2, r3
 80144e6:	099b      	lsrs	r3, r3, #6
 80144e8:	68ba      	ldr	r2, [r7, #8]
 80144ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80144ee:	68fa      	ldr	r2, [r7, #12]
 80144f0:	4413      	add	r3, r2
 80144f2:	61fb      	str	r3, [r7, #28]
        channel = channel % nbChannels;
 80144f4:	7efa      	ldrb	r2, [r7, #27]
 80144f6:	69fb      	ldr	r3, [r7, #28]
 80144f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80144fc:	fb01 f202 	mul.w	r2, r1, r2
 8014500:	1a9b      	subs	r3, r3, r2
 8014502:	61fb      	str	r3, [r7, #28]
        channel += offset;
 8014504:	7ebb      	ldrb	r3, [r7, #26]
 8014506:	69fa      	ldr	r2, [r7, #28]
 8014508:	4413      	add	r3, r2
 801450a:	61fb      	str	r3, [r7, #28]
    }

    // Calculate the frequency for the next downlink. This holds
    // for beacons and ping slots.
    return CalcDownlinkFrequency( channel, isBeacon );
 801450c:	69fb      	ldr	r3, [r7, #28]
 801450e:	b2db      	uxtb	r3, r3
 8014510:	78fa      	ldrb	r2, [r7, #3]
 8014512:	4611      	mov	r1, r2
 8014514:	4618      	mov	r0, r3
 8014516:	f7ff ff89 	bl	801442c <CalcDownlinkFrequency>
 801451a:	4603      	mov	r3, r0
}
 801451c:	4618      	mov	r0, r3
 801451e:	3720      	adds	r7, #32
 8014520:	46bd      	mov	sp, r7
 8014522:	bd80      	pop	{r7, pc}
 8014524:	200020b0 	.word	0x200020b0
 8014528:	10624dd3 	.word	0x10624dd3

0801452c <CalculateBeaconRxWindowConfig>:
 * \param [in] rxConfig Reception parameters for the beacon window.
 *
 * \param [in] currentSymbolTimeout Current symbol timeout.
 */
static void CalculateBeaconRxWindowConfig( RxConfigParams_t* rxConfig, uint16_t currentSymbolTimeout )
{
 801452c:	b590      	push	{r4, r7, lr}
 801452e:	b089      	sub	sp, #36	; 0x24
 8014530:	af02      	add	r7, sp, #8
 8014532:	6078      	str	r0, [r7, #4]
 8014534:	460b      	mov	r3, r1
 8014536:	807b      	strh	r3, [r7, #2]
    PhyParam_t phyParam;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint32_t maxRxError = 0;
#endif /* LORAMAC_VERSION */

    rxConfig->WindowTimeout = currentSymbolTimeout;
 8014538:	887a      	ldrh	r2, [r7, #2]
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	609a      	str	r2, [r3, #8]
    rxConfig->WindowOffset = 0;
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	2200      	movs	r2, #0
 8014542:	60da      	str	r2, [r3, #12]

    if( ( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 8014544:	4b19      	ldr	r3, [pc, #100]	; (80145ac <CalculateBeaconRxWindowConfig+0x80>)
 8014546:	7b1b      	ldrb	r3, [r3, #12]
 8014548:	f003 0302 	and.w	r3, r3, #2
 801454c:	b2db      	uxtb	r3, r3
 801454e:	2b00      	cmp	r3, #0
 8014550:	d106      	bne.n	8014560 <CalculateBeaconRxWindowConfig+0x34>
 8014552:	4b16      	ldr	r3, [pc, #88]	; (80145ac <CalculateBeaconRxWindowConfig+0x80>)
 8014554:	7b1b      	ldrb	r3, [r3, #12]
 8014556:	f003 0310 	and.w	r3, r3, #16
 801455a:	b2db      	uxtb	r3, r3
 801455c:	2b00      	cmp	r3, #0
 801455e:	d020      	beq.n	80145a2 <CalculateBeaconRxWindowConfig+0x76>
    {
        // Apply the symbol timeout only if we have acquired the beacon
        // Otherwise, take the window enlargement into account
        // Read beacon datarate
        getPhy.Attribute = PHY_BEACON_CHANNEL_DR;
 8014560:	2332      	movs	r3, #50	; 0x32
 8014562:	743b      	strb	r3, [r7, #16]
        phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8014564:	4b11      	ldr	r3, [pc, #68]	; (80145ac <CalculateBeaconRxWindowConfig+0x80>)
 8014566:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801456a:	781b      	ldrb	r3, [r3, #0]
 801456c:	f107 0210 	add.w	r2, r7, #16
 8014570:	4611      	mov	r1, r2
 8014572:	4618      	mov	r0, r3
 8014574:	f003 fbf4 	bl	8017d60 <RegionGetPhyParam>
 8014578:	4603      	mov	r3, r0
 801457a:	60fb      	str	r3, [r7, #12]

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        // Calculate downlink symbols
        RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 801457c:	4b0b      	ldr	r3, [pc, #44]	; (80145ac <CalculateBeaconRxWindowConfig+0x80>)
 801457e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014582:	7818      	ldrb	r0, [r3, #0]
                                        ( int8_t )phyParam.Value, // datarate
 8014584:	68fb      	ldr	r3, [r7, #12]
        RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8014586:	b259      	sxtb	r1, r3
                                        Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 8014588:	4b08      	ldr	r3, [pc, #32]	; (80145ac <CalculateBeaconRxWindowConfig+0x80>)
 801458a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
        RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 801458e:	791a      	ldrb	r2, [r3, #4]
                                        Ctx.LoRaMacClassBParams.LoRaMacParams->SystemMaxRxError,
 8014590:	4b06      	ldr	r3, [pc, #24]	; (80145ac <CalculateBeaconRxWindowConfig+0x80>)
 8014592:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
        RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8014596:	681c      	ldr	r4, [r3, #0]
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	9300      	str	r3, [sp, #0]
 801459c:	4623      	mov	r3, r4
 801459e:	f003 fc56 	bl	8017e4e <RegionComputeRxWindowParameters>
                                        Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
                                        maxRxError,
                                        rxConfig );
    }
#endif /* LORAMAC_VERSION */
}
 80145a2:	bf00      	nop
 80145a4:	371c      	adds	r7, #28
 80145a6:	46bd      	mov	sp, r7
 80145a8:	bd90      	pop	{r4, r7, pc}
 80145aa:	bf00      	nop
 80145ac:	200020b0 	.word	0x200020b0

080145b0 <RxBeaconSetup>:
 * \param [in] activateDefaultChannel Set to true, if the function shall setup the default channel
 *
 * \param [in] symbolTimeout Symbol timeout
 */
static void RxBeaconSetup( TimerTime_t rxTime, bool activateDefaultChannel, uint16_t symbolTimeout )
{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b086      	sub	sp, #24
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	6078      	str	r0, [r7, #4]
 80145b8:	460b      	mov	r3, r1
 80145ba:	70fb      	strb	r3, [r7, #3]
 80145bc:	4613      	mov	r3, r2
 80145be:	803b      	strh	r3, [r7, #0]
    RxBeaconSetup_t rxBeaconSetup;
    uint32_t frequency = 0;
 80145c0:	2300      	movs	r3, #0
 80145c2:	617b      	str	r3, [r7, #20]

    if( activateDefaultChannel == true )
 80145c4:	78fb      	ldrb	r3, [r7, #3]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d005      	beq.n	80145d6 <RxBeaconSetup+0x26>
    {
        // This is the default frequency in case we don't know when the next
        // beacon will be transmitted. We select channel 0 as default.
        frequency = CalcDownlinkFrequency( 0, true );
 80145ca:	2101      	movs	r1, #1
 80145cc:	2000      	movs	r0, #0
 80145ce:	f7ff ff2d 	bl	801442c <CalcDownlinkFrequency>
 80145d2:	6178      	str	r0, [r7, #20]
 80145d4:	e00a      	b.n	80145ec <RxBeaconSetup+0x3c>
    }
    else
    {
        // This is the frequency according to the channel plan
        frequency = CalcDownlinkChannelAndFrequency( 0, Ctx.BeaconCtx.BeaconTime.Seconds + ( CLASSB_BEACON_INTERVAL / 1000 ),
 80145d6:	4b27      	ldr	r3, [pc, #156]	; (8014674 <RxBeaconSetup+0xc4>)
 80145d8:	691b      	ldr	r3, [r3, #16]
 80145da:	f103 0180 	add.w	r1, r3, #128	; 0x80
 80145de:	2301      	movs	r3, #1
 80145e0:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 80145e4:	2000      	movs	r0, #0
 80145e6:	f7ff ff45 	bl	8014474 <CalcDownlinkChannelAndFrequency>
 80145ea:	6178      	str	r0, [r7, #20]
                                                     CLASSB_BEACON_INTERVAL, true );
    }

    if( ClassBNvm->BeaconCtx.Ctrl.CustomFreq == 1 )
 80145ec:	4b22      	ldr	r3, [pc, #136]	; (8014678 <RxBeaconSetup+0xc8>)
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	7b1b      	ldrb	r3, [r3, #12]
 80145f2:	f003 0301 	and.w	r3, r3, #1
 80145f6:	b2db      	uxtb	r3, r3
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d003      	beq.n	8014604 <RxBeaconSetup+0x54>
    {
        // Set the frequency from the BeaconFreqReq
        frequency = ClassBNvm->BeaconCtx.Frequency;
 80145fc:	4b1e      	ldr	r3, [pc, #120]	; (8014678 <RxBeaconSetup+0xc8>)
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	691b      	ldr	r3, [r3, #16]
 8014602:	617b      	str	r3, [r7, #20]
    }

    if( Ctx.BeaconCtx.Ctrl.BeaconChannelSet == 1 )
 8014604:	4b1b      	ldr	r3, [pc, #108]	; (8014674 <RxBeaconSetup+0xc4>)
 8014606:	7b1b      	ldrb	r3, [r3, #12]
 8014608:	f003 0308 	and.w	r3, r3, #8
 801460c:	b2db      	uxtb	r3, r3
 801460e:	2b00      	cmp	r3, #0
 8014610:	d00c      	beq.n	801462c <RxBeaconSetup+0x7c>
    {
        // Set the frequency which was provided by BeaconTimingAns MAC command
        Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 0;
 8014612:	4a18      	ldr	r2, [pc, #96]	; (8014674 <RxBeaconSetup+0xc4>)
 8014614:	7b13      	ldrb	r3, [r2, #12]
 8014616:	f36f 03c3 	bfc	r3, #3, #1
 801461a:	7313      	strb	r3, [r2, #12]
        frequency = CalcDownlinkFrequency( Ctx.BeaconCtx.BeaconTimingChannel, true );
 801461c:	4b15      	ldr	r3, [pc, #84]	; (8014674 <RxBeaconSetup+0xc4>)
 801461e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014622:	2101      	movs	r1, #1
 8014624:	4618      	mov	r0, r3
 8014626:	f7ff ff01 	bl	801442c <CalcDownlinkFrequency>
 801462a:	6178      	str	r0, [r7, #20]
    }

    rxBeaconSetup.SymbolTimeout = symbolTimeout;
 801462c:	883b      	ldrh	r3, [r7, #0]
 801462e:	813b      	strh	r3, [r7, #8]
    rxBeaconSetup.RxTime = rxTime;
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	60fb      	str	r3, [r7, #12]
    rxBeaconSetup.Frequency = frequency;
 8014634:	697b      	ldr	r3, [r7, #20]
 8014636:	613b      	str	r3, [r7, #16]

    RegionRxBeaconSetup( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &rxBeaconSetup, &Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 8014638:	4b0e      	ldr	r3, [pc, #56]	; (8014674 <RxBeaconSetup+0xc4>)
 801463a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801463e:	7818      	ldrb	r0, [r3, #0]
 8014640:	4b0c      	ldr	r3, [pc, #48]	; (8014674 <RxBeaconSetup+0xc4>)
 8014642:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014646:	1d1a      	adds	r2, r3, #4
 8014648:	f107 0308 	add.w	r3, r7, #8
 801464c:	4619      	mov	r1, r3
 801464e:	f003 fd0f 	bl	8018070 <RegionRxBeaconSetup>

    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Frequency = frequency;
 8014652:	4b08      	ldr	r3, [pc, #32]	; (8014674 <RxBeaconSetup+0xc4>)
 8014654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014658:	697a      	ldr	r2, [r7, #20]
 801465a:	611a      	str	r2, [r3, #16]
    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Datarate = Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate;
 801465c:	4b05      	ldr	r3, [pc, #20]	; (8014674 <RxBeaconSetup+0xc4>)
 801465e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8014662:	4b04      	ldr	r3, [pc, #16]	; (8014674 <RxBeaconSetup+0xc4>)
 8014664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014668:	7912      	ldrb	r2, [r2, #4]
 801466a:	751a      	strb	r2, [r3, #20]
}
 801466c:	bf00      	nop
 801466e:	3718      	adds	r7, #24
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}
 8014674:	200020b0 	.word	0x200020b0
 8014678:	20002164 	.word	0x20002164

0801467c <CalcNextSlotTime>:
 * \param [out] timeOffset Time offset of the next slot, based on current time
 *
 * \retval [true: ping slot found, false: no ping slot found]
 */
static bool CalcNextSlotTime( uint16_t slotOffset, uint16_t pingPeriod, uint16_t pingNb, TimerTime_t* timeOffset )
{
 801467c:	b580      	push	{r7, lr}
 801467e:	b088      	sub	sp, #32
 8014680:	af00      	add	r7, sp, #0
 8014682:	607b      	str	r3, [r7, #4]
 8014684:	4603      	mov	r3, r0
 8014686:	81fb      	strh	r3, [r7, #14]
 8014688:	460b      	mov	r3, r1
 801468a:	81bb      	strh	r3, [r7, #12]
 801468c:	4613      	mov	r3, r2
 801468e:	817b      	strh	r3, [r7, #10]
    uint8_t currentPingSlot = 0;
 8014690:	2300      	movs	r3, #0
 8014692:	77fb      	strb	r3, [r7, #31]
    TimerTime_t slotTime = 0;
 8014694:	2300      	movs	r3, #0
 8014696:	61bb      	str	r3, [r7, #24]
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8014698:	f00a f972 	bl	801e980 <UTIL_TIMER_GetCurrentTime>
 801469c:	6178      	str	r0, [r7, #20]

    // Calculate the point in time of the last beacon even if we missed it
    slotTime = ( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) % CLASSB_BEACON_INTERVAL );
 801469e:	4b38      	ldr	r3, [pc, #224]	; (8014780 <CalcNextSlotTime+0x104>)
 80146a0:	3318      	adds	r3, #24
 80146a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80146a6:	f009 fb3d 	bl	801dd24 <SysTimeToMs>
 80146aa:	4602      	mov	r2, r0
 80146ac:	697b      	ldr	r3, [r7, #20]
 80146ae:	1a9b      	subs	r3, r3, r2
 80146b0:	4a34      	ldr	r2, [pc, #208]	; (8014784 <CalcNextSlotTime+0x108>)
 80146b2:	fba2 1203 	umull	r1, r2, r2, r3
 80146b6:	0b52      	lsrs	r2, r2, #13
 80146b8:	f44f 31fa 	mov.w	r1, #128000	; 0x1f400
 80146bc:	fb01 f202 	mul.w	r2, r1, r2
 80146c0:	1a9b      	subs	r3, r3, r2
 80146c2:	61bb      	str	r3, [r7, #24]
    slotTime = currentTime - slotTime;
 80146c4:	697a      	ldr	r2, [r7, #20]
 80146c6:	69bb      	ldr	r3, [r7, #24]
 80146c8:	1ad3      	subs	r3, r2, r3
 80146ca:	61bb      	str	r3, [r7, #24]

    // Add the reserved time and the ping offset
    slotTime += CLASSB_BEACON_RESERVED;
 80146cc:	69bb      	ldr	r3, [r7, #24]
 80146ce:	f603 0348 	addw	r3, r3, #2120	; 0x848
 80146d2:	61bb      	str	r3, [r7, #24]
    slotTime += slotOffset * CLASSB_PING_SLOT_WINDOW;
 80146d4:	89fa      	ldrh	r2, [r7, #14]
 80146d6:	4613      	mov	r3, r2
 80146d8:	011b      	lsls	r3, r3, #4
 80146da:	1a9b      	subs	r3, r3, r2
 80146dc:	005b      	lsls	r3, r3, #1
 80146de:	461a      	mov	r2, r3
 80146e0:	69bb      	ldr	r3, [r7, #24]
 80146e2:	4413      	add	r3, r2
 80146e4:	61bb      	str	r3, [r7, #24]

    if( slotTime < currentTime )
 80146e6:	69ba      	ldr	r2, [r7, #24]
 80146e8:	697b      	ldr	r3, [r7, #20]
 80146ea:	429a      	cmp	r2, r3
 80146ec:	d219      	bcs.n	8014722 <CalcNextSlotTime+0xa6>
    {
        currentPingSlot = ( ( currentTime - slotTime ) /
 80146ee:	697a      	ldr	r2, [r7, #20]
 80146f0:	69bb      	ldr	r3, [r7, #24]
 80146f2:	1ad1      	subs	r1, r2, r3
                          ( pingPeriod * CLASSB_PING_SLOT_WINDOW ) ) + 1;
 80146f4:	89ba      	ldrh	r2, [r7, #12]
 80146f6:	4613      	mov	r3, r2
 80146f8:	011b      	lsls	r3, r3, #4
 80146fa:	1a9b      	subs	r3, r3, r2
 80146fc:	005b      	lsls	r3, r3, #1
        currentPingSlot = ( ( currentTime - slotTime ) /
 80146fe:	fbb1 f3f3 	udiv	r3, r1, r3
                          ( pingPeriod * CLASSB_PING_SLOT_WINDOW ) ) + 1;
 8014702:	b2db      	uxtb	r3, r3
        currentPingSlot = ( ( currentTime - slotTime ) /
 8014704:	3301      	adds	r3, #1
 8014706:	77fb      	strb	r3, [r7, #31]
        slotTime += ( ( TimerTime_t )( currentPingSlot * pingPeriod ) *
 8014708:	7ffb      	ldrb	r3, [r7, #31]
 801470a:	89ba      	ldrh	r2, [r7, #12]
 801470c:	fb02 f303 	mul.w	r3, r2, r3
 8014710:	461a      	mov	r2, r3
 8014712:	4613      	mov	r3, r2
 8014714:	011b      	lsls	r3, r3, #4
 8014716:	1a9b      	subs	r3, r3, r2
 8014718:	005b      	lsls	r3, r3, #1
 801471a:	461a      	mov	r2, r3
 801471c:	69bb      	ldr	r3, [r7, #24]
 801471e:	4413      	add	r3, r2
 8014720:	61bb      	str	r3, [r7, #24]
                    CLASSB_PING_SLOT_WINDOW );
    }

    if( currentPingSlot < pingNb )
 8014722:	7ffb      	ldrb	r3, [r7, #31]
 8014724:	b29b      	uxth	r3, r3
 8014726:	897a      	ldrh	r2, [r7, #10]
 8014728:	429a      	cmp	r2, r3
 801472a:	d923      	bls.n	8014774 <CalcNextSlotTime+0xf8>
    {
        if( slotTime <= ( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - CLASSB_BEACON_GUARD - CLASSB_PING_SLOT_WINDOW ) )
 801472c:	4b14      	ldr	r3, [pc, #80]	; (8014780 <CalcNextSlotTime+0x104>)
 801472e:	3320      	adds	r3, #32
 8014730:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014734:	f009 faf6 	bl	801dd24 <SysTimeToMs>
 8014738:	4603      	mov	r3, r0
 801473a:	f6a3 33d6 	subw	r3, r3, #3030	; 0xbd6
 801473e:	69ba      	ldr	r2, [r7, #24]
 8014740:	429a      	cmp	r2, r3
 8014742:	d817      	bhi.n	8014774 <CalcNextSlotTime+0xf8>
        {
            // Calculate the relative ping slot time
            slotTime -= currentTime;
 8014744:	69ba      	ldr	r2, [r7, #24]
 8014746:	697b      	ldr	r3, [r7, #20]
 8014748:	1ad3      	subs	r3, r2, r3
 801474a:	61bb      	str	r3, [r7, #24]
            slotTime -= Radio.GetWakeupTime( );
 801474c:	4b0e      	ldr	r3, [pc, #56]	; (8014788 <CalcNextSlotTime+0x10c>)
 801474e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014750:	4798      	blx	r3
 8014752:	4602      	mov	r2, r0
 8014754:	69bb      	ldr	r3, [r7, #24]
 8014756:	1a9b      	subs	r3, r3, r2
 8014758:	61bb      	str	r3, [r7, #24]
            slotTime = TimerTempCompensation( slotTime, Ctx.BeaconCtx.Temperature );
 801475a:	4b09      	ldr	r3, [pc, #36]	; (8014780 <CalcNextSlotTime+0x104>)
 801475c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014760:	4619      	mov	r1, r3
 8014762:	69b8      	ldr	r0, [r7, #24]
 8014764:	f7ff fd78 	bl	8014258 <TimerTempCompensation>
 8014768:	61b8      	str	r0, [r7, #24]
            *timeOffset = slotTime;
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	69ba      	ldr	r2, [r7, #24]
 801476e:	601a      	str	r2, [r3, #0]
            return true;
 8014770:	2301      	movs	r3, #1
 8014772:	e000      	b.n	8014776 <CalcNextSlotTime+0xfa>
        }
    }
    return false;
 8014774:	2300      	movs	r3, #0
}
 8014776:	4618      	mov	r0, r3
 8014778:	3720      	adds	r7, #32
 801477a:	46bd      	mov	sp, r7
 801477c:	bd80      	pop	{r7, pc}
 801477e:	bf00      	nop
 8014780:	200020b0 	.word	0x200020b0
 8014784:	10624dd3 	.word	0x10624dd3
 8014788:	0801fbe4 	.word	0x0801fbe4

0801478c <BeaconCrc>:
 * \param [in] length Length of the data
 *
 * \retval CRC
 */
static uint16_t BeaconCrc( uint8_t *buffer, uint16_t length )
{
 801478c:	b480      	push	{r7}
 801478e:	b085      	sub	sp, #20
 8014790:	af00      	add	r7, sp, #0
 8014792:	6078      	str	r0, [r7, #4]
 8014794:	460b      	mov	r3, r1
 8014796:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint16_t crc = 0x0000;
 8014798:	2300      	movs	r3, #0
 801479a:	81fb      	strh	r3, [r7, #14]

    if( buffer == NULL )
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d101      	bne.n	80147a6 <BeaconCrc+0x1a>
    {
        return 0;
 80147a2:	2300      	movs	r3, #0
 80147a4:	e030      	b.n	8014808 <BeaconCrc+0x7c>
    }

    for( uint16_t i = 0; i < length; ++i )
 80147a6:	2300      	movs	r3, #0
 80147a8:	81bb      	strh	r3, [r7, #12]
 80147aa:	e028      	b.n	80147fe <BeaconCrc+0x72>
    {
        crc ^= ( uint16_t ) buffer[i] << 8;
 80147ac:	89bb      	ldrh	r3, [r7, #12]
 80147ae:	687a      	ldr	r2, [r7, #4]
 80147b0:	4413      	add	r3, r2
 80147b2:	781b      	ldrb	r3, [r3, #0]
 80147b4:	021b      	lsls	r3, r3, #8
 80147b6:	b21a      	sxth	r2, r3
 80147b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80147bc:	4053      	eors	r3, r2
 80147be:	b21b      	sxth	r3, r3
 80147c0:	81fb      	strh	r3, [r7, #14]
        for( uint16_t j = 0; j < 8; ++j )
 80147c2:	2300      	movs	r3, #0
 80147c4:	817b      	strh	r3, [r7, #10]
 80147c6:	e014      	b.n	80147f2 <BeaconCrc+0x66>
        {
            crc = ( crc & 0x8000 ) ? ( crc << 1 ) ^ polynom : ( crc << 1 );
 80147c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	da09      	bge.n	80147e4 <BeaconCrc+0x58>
 80147d0:	89fb      	ldrh	r3, [r7, #14]
 80147d2:	005b      	lsls	r3, r3, #1
 80147d4:	b21a      	sxth	r2, r3
 80147d6:	f241 0321 	movw	r3, #4129	; 0x1021
 80147da:	b21b      	sxth	r3, r3
 80147dc:	4053      	eors	r3, r2
 80147de:	b21b      	sxth	r3, r3
 80147e0:	b29b      	uxth	r3, r3
 80147e2:	e002      	b.n	80147ea <BeaconCrc+0x5e>
 80147e4:	89fb      	ldrh	r3, [r7, #14]
 80147e6:	005b      	lsls	r3, r3, #1
 80147e8:	b29b      	uxth	r3, r3
 80147ea:	81fb      	strh	r3, [r7, #14]
        for( uint16_t j = 0; j < 8; ++j )
 80147ec:	897b      	ldrh	r3, [r7, #10]
 80147ee:	3301      	adds	r3, #1
 80147f0:	817b      	strh	r3, [r7, #10]
 80147f2:	897b      	ldrh	r3, [r7, #10]
 80147f4:	2b07      	cmp	r3, #7
 80147f6:	d9e7      	bls.n	80147c8 <BeaconCrc+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 80147f8:	89bb      	ldrh	r3, [r7, #12]
 80147fa:	3301      	adds	r3, #1
 80147fc:	81bb      	strh	r3, [r7, #12]
 80147fe:	89ba      	ldrh	r2, [r7, #12]
 8014800:	887b      	ldrh	r3, [r7, #2]
 8014802:	429a      	cmp	r2, r3
 8014804:	d3d2      	bcc.n	80147ac <BeaconCrc+0x20>
        }
    }

    return crc;
 8014806:	89fb      	ldrh	r3, [r7, #14]
}
 8014808:	4618      	mov	r0, r3
 801480a:	3714      	adds	r7, #20
 801480c:	46bd      	mov	sp, r7
 801480e:	bc80      	pop	{r7}
 8014810:	4770      	bx	lr

08014812 <GetTemperature>:

static void GetTemperature( LoRaMacClassBCallback_t *callbacks, BeaconContext_t *beaconCtx )
{
 8014812:	b580      	push	{r7, lr}
 8014814:	b082      	sub	sp, #8
 8014816:	af00      	add	r7, sp, #0
 8014818:	6078      	str	r0, [r7, #4]
 801481a:	6039      	str	r1, [r7, #0]
    // Measure temperature, if available
    if( ( callbacks != NULL ) && ( callbacks->GetTemperatureLevel != NULL ) )
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d00a      	beq.n	8014838 <GetTemperature+0x26>
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d006      	beq.n	8014838 <GetTemperature+0x26>
    {
        beaconCtx->Temperature = callbacks->GetTemperatureLevel( );
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	4798      	blx	r3
 8014830:	4603      	mov	r3, r0
 8014832:	461a      	mov	r2, r3
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	805a      	strh	r2, [r3, #2]
    }
}
 8014838:	bf00      	nop
 801483a:	3708      	adds	r7, #8
 801483c:	46bd      	mov	sp, r7
 801483e:	bd80      	pop	{r7, pc}

08014840 <InitClassB>:

static void InitClassB( void )
{
 8014840:	b580      	push	{r7, lr}
 8014842:	b084      	sub	sp, #16
 8014844:	af00      	add	r7, sp, #0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Init events
    LoRaMacClassBEvents.Value = 0;
 8014846:	4b1f      	ldr	r3, [pc, #124]	; (80148c4 <InitClassB+0x84>)
 8014848:	2200      	movs	r2, #0
 801484a:	601a      	str	r2, [r3, #0]

    // Init variables to default
    memset1( ( uint8_t* ) ClassBNvm, 0, sizeof( LoRaMacClassBNvmData_t ) );
 801484c:	4b1e      	ldr	r3, [pc, #120]	; (80148c8 <InitClassB+0x88>)
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	2218      	movs	r2, #24
 8014852:	2100      	movs	r1, #0
 8014854:	4618      	mov	r0, r3
 8014856:	f005 fe69 	bl	801a52c <memset1>
    memset1( ( uint8_t* ) &Ctx.PingSlotCtx, 0, sizeof( PingSlotContext_t ) );
 801485a:	220c      	movs	r2, #12
 801485c:	2100      	movs	r1, #0
 801485e:	481b      	ldr	r0, [pc, #108]	; (80148cc <InitClassB+0x8c>)
 8014860:	f005 fe64 	bl	801a52c <memset1>
    memset1( ( uint8_t* ) &Ctx.BeaconCtx, 0, sizeof( BeaconContext_t ) );
 8014864:	2234      	movs	r2, #52	; 0x34
 8014866:	2100      	movs	r1, #0
 8014868:	4819      	ldr	r0, [pc, #100]	; (80148d0 <InitClassB+0x90>)
 801486a:	f005 fe5f 	bl	801a52c <memset1>

    // Setup default temperature
    Ctx.BeaconCtx.Temperature = 25.0;
 801486e:	4b17      	ldr	r3, [pc, #92]	; (80148cc <InitClassB+0x8c>)
 8014870:	2219      	movs	r2, #25
 8014872:	81da      	strh	r2, [r3, #14]
    GetTemperature( &Ctx.LoRaMacClassBCallbacks, &Ctx.BeaconCtx );
 8014874:	4916      	ldr	r1, [pc, #88]	; (80148d0 <InitClassB+0x90>)
 8014876:	4817      	ldr	r0, [pc, #92]	; (80148d4 <InitClassB+0x94>)
 8014878:	f7ff ffcb 	bl	8014812 <GetTemperature>

    // Setup default ping slot datarate
    getPhy.Attribute = PHY_PING_SLOT_CHANNEL_DR;
 801487c:	2336      	movs	r3, #54	; 0x36
 801487e:	723b      	strb	r3, [r7, #8]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8014880:	4b12      	ldr	r3, [pc, #72]	; (80148cc <InitClassB+0x8c>)
 8014882:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014886:	781b      	ldrb	r3, [r3, #0]
 8014888:	f107 0208 	add.w	r2, r7, #8
 801488c:	4611      	mov	r1, r2
 801488e:	4618      	mov	r0, r3
 8014890:	f003 fa66 	bl	8017d60 <RegionGetPhyParam>
 8014894:	4603      	mov	r3, r0
 8014896:	607b      	str	r3, [r7, #4]
    ClassBNvm->PingSlotCtx.Datarate = ( int8_t )( phyParam.Value );
 8014898:	687a      	ldr	r2, [r7, #4]
 801489a:	4b0b      	ldr	r3, [pc, #44]	; (80148c8 <InitClassB+0x88>)
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	b252      	sxtb	r2, r2
 80148a0:	721a      	strb	r2, [r3, #8]
    // Setup default FPending bit
    ClassBNvm->PingSlotCtx.FPendingSet = 0;
#endif /* LORAMAC_VERSION */

    // Setup default states
    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 80148a2:	4b0a      	ldr	r3, [pc, #40]	; (80148cc <InitClassB+0x8c>)
 80148a4:	2200      	movs	r2, #0
 80148a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 80148aa:	4b08      	ldr	r3, [pc, #32]	; (80148cc <InitClassB+0x8c>)
 80148ac:	2200      	movs	r2, #0
 80148ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 80148b2:	4b06      	ldr	r3, [pc, #24]	; (80148cc <InitClassB+0x8c>)
 80148b4:	2200      	movs	r2, #0
 80148b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 80148ba:	bf00      	nop
 80148bc:	3710      	adds	r7, #16
 80148be:	46bd      	mov	sp, r7
 80148c0:	bd80      	pop	{r7, pc}
 80148c2:	bf00      	nop
 80148c4:	200020ac 	.word	0x200020ac
 80148c8:	20002164 	.word	0x20002164
 80148cc:	200020b0 	.word	0x200020b0
 80148d0:	200020bc 	.word	0x200020bc
 80148d4:	2000213c 	.word	0x2000213c

080148d8 <InitClassBDefaults>:

static void InitClassBDefaults( void )
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b086      	sub	sp, #24
 80148dc:	af00      	add	r7, sp, #0
    // This function shall reset the Class B settings to default,
    // but should keep important configurations
    LoRaMacClassBBeaconNvmData_t beaconCtx = ClassBNvm->BeaconCtx;
 80148de:	4b1b      	ldr	r3, [pc, #108]	; (801494c <InitClassBDefaults+0x74>)
 80148e0:	681a      	ldr	r2, [r3, #0]
 80148e2:	f107 0310 	add.w	r3, r7, #16
 80148e6:	320c      	adds	r2, #12
 80148e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148ec:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacClassBPingSlotNvmData_t pingSlotCtx = ClassBNvm->PingSlotCtx;
 80148f0:	4b16      	ldr	r3, [pc, #88]	; (801494c <InitClassBDefaults+0x74>)
 80148f2:	681a      	ldr	r2, [r3, #0]
 80148f4:	1d3b      	adds	r3, r7, #4
 80148f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80148f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    InitClassB( );
 80148fc:	f7ff ffa0 	bl	8014840 <InitClassB>

    // Parameters from BeaconFreqReq
    ClassBNvm->BeaconCtx.Frequency = beaconCtx.Frequency;
 8014900:	4b12      	ldr	r3, [pc, #72]	; (801494c <InitClassBDefaults+0x74>)
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	697a      	ldr	r2, [r7, #20]
 8014906:	611a      	str	r2, [r3, #16]
    ClassBNvm->BeaconCtx.Ctrl.CustomFreq = beaconCtx.Ctrl.CustomFreq;
 8014908:	4b10      	ldr	r3, [pc, #64]	; (801494c <InitClassBDefaults+0x74>)
 801490a:	681a      	ldr	r2, [r3, #0]
 801490c:	7c3b      	ldrb	r3, [r7, #16]
 801490e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8014912:	b2d9      	uxtb	r1, r3
 8014914:	7b13      	ldrb	r3, [r2, #12]
 8014916:	f361 0300 	bfi	r3, r1, #0, #1
 801491a:	7313      	strb	r3, [r2, #12]

    // Parameters from PingSlotChannelReq
    ClassBNvm->PingSlotCtx.Ctrl.CustomFreq = pingSlotCtx.Ctrl.CustomFreq;
 801491c:	4b0b      	ldr	r3, [pc, #44]	; (801494c <InitClassBDefaults+0x74>)
 801491e:	681a      	ldr	r2, [r3, #0]
 8014920:	793b      	ldrb	r3, [r7, #4]
 8014922:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8014926:	b2d9      	uxtb	r1, r3
 8014928:	7813      	ldrb	r3, [r2, #0]
 801492a:	f361 0341 	bfi	r3, r1, #1, #1
 801492e:	7013      	strb	r3, [r2, #0]
    ClassBNvm->PingSlotCtx.Frequency = pingSlotCtx.Frequency;
 8014930:	4b06      	ldr	r3, [pc, #24]	; (801494c <InitClassBDefaults+0x74>)
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	68ba      	ldr	r2, [r7, #8]
 8014936:	605a      	str	r2, [r3, #4]
    ClassBNvm->PingSlotCtx.Datarate = pingSlotCtx.Datarate;
 8014938:	4b04      	ldr	r3, [pc, #16]	; (801494c <InitClassBDefaults+0x74>)
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8014940:	721a      	strb	r2, [r3, #8]
}
 8014942:	bf00      	nop
 8014944:	3718      	adds	r7, #24
 8014946:	46bd      	mov	sp, r7
 8014948:	bd80      	pop	{r7, pc}
 801494a:	bf00      	nop
 801494c:	20002164 	.word	0x20002164

08014950 <EnlargeWindowTimeout>:

static void EnlargeWindowTimeout( void )
{
 8014950:	b480      	push	{r7}
 8014952:	af00      	add	r7, sp, #0
    // Update beacon movement
    Ctx.BeaconCtx.BeaconWindowMovement *= CLASSB_WINDOW_MOVE_EXPANSION_FACTOR;
 8014954:	4b15      	ldr	r3, [pc, #84]	; (80149ac <EnlargeWindowTimeout+0x5c>)
 8014956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014958:	005b      	lsls	r3, r3, #1
 801495a:	4a14      	ldr	r2, [pc, #80]	; (80149ac <EnlargeWindowTimeout+0x5c>)
 801495c:	6313      	str	r3, [r2, #48]	; 0x30
    if( Ctx.BeaconCtx.BeaconWindowMovement > CLASSB_WINDOW_MOVE_EXPANSION_MAX )
 801495e:	4b13      	ldr	r3, [pc, #76]	; (80149ac <EnlargeWindowTimeout+0x5c>)
 8014960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014966:	d903      	bls.n	8014970 <EnlargeWindowTimeout+0x20>
    {
        Ctx.BeaconCtx.BeaconWindowMovement = CLASSB_WINDOW_MOVE_EXPANSION_MAX;
 8014968:	4b10      	ldr	r3, [pc, #64]	; (80149ac <EnlargeWindowTimeout+0x5c>)
 801496a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801496e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    // Update symbol timeout
    Ctx.BeaconCtx.SymbolTimeout *= CLASSB_BEACON_SYMBOL_TO_EXPANSION_FACTOR;
 8014970:	4b0e      	ldr	r3, [pc, #56]	; (80149ac <EnlargeWindowTimeout+0x5c>)
 8014972:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8014974:	005b      	lsls	r3, r3, #1
 8014976:	b29a      	uxth	r2, r3
 8014978:	4b0c      	ldr	r3, [pc, #48]	; (80149ac <EnlargeWindowTimeout+0x5c>)
 801497a:	859a      	strh	r2, [r3, #44]	; 0x2c
    if( Ctx.BeaconCtx.SymbolTimeout > CLASSB_BEACON_SYMBOL_TO_EXPANSION_MAX )
 801497c:	4b0b      	ldr	r3, [pc, #44]	; (80149ac <EnlargeWindowTimeout+0x5c>)
 801497e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8014980:	2bff      	cmp	r3, #255	; 0xff
 8014982:	d902      	bls.n	801498a <EnlargeWindowTimeout+0x3a>
    {
        Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_EXPANSION_MAX;
 8014984:	4b09      	ldr	r3, [pc, #36]	; (80149ac <EnlargeWindowTimeout+0x5c>)
 8014986:	22ff      	movs	r2, #255	; 0xff
 8014988:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
    Ctx.PingSlotCtx.SymbolTimeout *= CLASSB_BEACON_SYMBOL_TO_EXPANSION_FACTOR;
 801498a:	4b08      	ldr	r3, [pc, #32]	; (80149ac <EnlargeWindowTimeout+0x5c>)
 801498c:	88db      	ldrh	r3, [r3, #6]
 801498e:	005b      	lsls	r3, r3, #1
 8014990:	b29a      	uxth	r2, r3
 8014992:	4b06      	ldr	r3, [pc, #24]	; (80149ac <EnlargeWindowTimeout+0x5c>)
 8014994:	80da      	strh	r2, [r3, #6]
    if( Ctx.PingSlotCtx.SymbolTimeout > CLASSB_PING_SLOT_SYMBOL_TO_EXPANSION_MAX )
 8014996:	4b05      	ldr	r3, [pc, #20]	; (80149ac <EnlargeWindowTimeout+0x5c>)
 8014998:	88db      	ldrh	r3, [r3, #6]
 801499a:	2b1e      	cmp	r3, #30
 801499c:	d902      	bls.n	80149a4 <EnlargeWindowTimeout+0x54>
    {
        Ctx.PingSlotCtx.SymbolTimeout = CLASSB_PING_SLOT_SYMBOL_TO_EXPANSION_MAX;
 801499e:	4b03      	ldr	r3, [pc, #12]	; (80149ac <EnlargeWindowTimeout+0x5c>)
 80149a0:	221e      	movs	r2, #30
 80149a2:	80da      	strh	r2, [r3, #6]
    }
}
 80149a4:	bf00      	nop
 80149a6:	46bd      	mov	sp, r7
 80149a8:	bc80      	pop	{r7}
 80149aa:	4770      	bx	lr
 80149ac:	200020b0 	.word	0x200020b0

080149b0 <ResetWindowTimeout>:

static void ResetWindowTimeout( void )
{
 80149b0:	b480      	push	{r7}
 80149b2:	af00      	add	r7, sp, #0
    Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 80149b4:	4b06      	ldr	r3, [pc, #24]	; (80149d0 <ResetWindowTimeout+0x20>)
 80149b6:	2208      	movs	r2, #8
 80149b8:	859a      	strh	r2, [r3, #44]	; 0x2c
    Ctx.PingSlotCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 80149ba:	4b05      	ldr	r3, [pc, #20]	; (80149d0 <ResetWindowTimeout+0x20>)
 80149bc:	2208      	movs	r2, #8
 80149be:	80da      	strh	r2, [r3, #6]
    Ctx.BeaconCtx.BeaconWindowMovement  = CLASSB_WINDOW_MOVE_DEFAULT;
 80149c0:	4b03      	ldr	r3, [pc, #12]	; (80149d0 <ResetWindowTimeout+0x20>)
 80149c2:	2202      	movs	r2, #2
 80149c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80149c6:	bf00      	nop
 80149c8:	46bd      	mov	sp, r7
 80149ca:	bc80      	pop	{r7}
 80149cc:	4770      	bx	lr
 80149ce:	bf00      	nop
 80149d0:	200020b0 	.word	0x200020b0

080149d4 <CalcDelayForNextBeacon>:

static TimerTime_t CalcDelayForNextBeacon( TimerTime_t currentTime, TimerTime_t lastBeaconRx )
{
 80149d4:	b480      	push	{r7}
 80149d6:	b085      	sub	sp, #20
 80149d8:	af00      	add	r7, sp, #0
 80149da:	6078      	str	r0, [r7, #4]
 80149dc:	6039      	str	r1, [r7, #0]
    TimerTime_t nextBeaconRxTime = 0;
 80149de:	2300      	movs	r3, #0
 80149e0:	60fb      	str	r3, [r7, #12]

    // Calculate the point in time of the next beacon
    nextBeaconRxTime = ( ( currentTime - lastBeaconRx ) % CLASSB_BEACON_INTERVAL );
 80149e2:	687a      	ldr	r2, [r7, #4]
 80149e4:	683b      	ldr	r3, [r7, #0]
 80149e6:	1ad3      	subs	r3, r2, r3
 80149e8:	4a08      	ldr	r2, [pc, #32]	; (8014a0c <CalcDelayForNextBeacon+0x38>)
 80149ea:	fba2 1203 	umull	r1, r2, r2, r3
 80149ee:	0b52      	lsrs	r2, r2, #13
 80149f0:	f44f 31fa 	mov.w	r1, #128000	; 0x1f400
 80149f4:	fb01 f202 	mul.w	r2, r1, r2
 80149f8:	1a9b      	subs	r3, r3, r2
 80149fa:	60fb      	str	r3, [r7, #12]
    return ( CLASSB_BEACON_INTERVAL - nextBeaconRxTime );
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	f5c3 33fa 	rsb	r3, r3, #128000	; 0x1f400
}
 8014a02:	4618      	mov	r0, r3
 8014a04:	3714      	adds	r7, #20
 8014a06:	46bd      	mov	sp, r7
 8014a08:	bc80      	pop	{r7}
 8014a0a:	4770      	bx	lr
 8014a0c:	10624dd3 	.word	0x10624dd3

08014a10 <IndicateBeaconStatus>:

static void IndicateBeaconStatus( LoRaMacEventInfoStatus_t status )
{
 8014a10:	b480      	push	{r7}
 8014a12:	b083      	sub	sp, #12
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	4603      	mov	r3, r0
 8014a18:	71fb      	strb	r3, [r7, #7]
    if( Ctx.BeaconCtx.Ctrl.ResumeBeaconing == 0 )
 8014a1a:	4b14      	ldr	r3, [pc, #80]	; (8014a6c <IndicateBeaconStatus+0x5c>)
 8014a1c:	7b1b      	ldrb	r3, [r3, #12]
 8014a1e:	f003 0320 	and.w	r3, r3, #32
 8014a22:	b2db      	uxtb	r3, r3
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d117      	bne.n	8014a58 <IndicateBeaconStatus+0x48>
    {
        Ctx.LoRaMacClassBParams.MlmeIndication->MlmeIndication = MLME_BEACON;
 8014a28:	4b10      	ldr	r3, [pc, #64]	; (8014a6c <IndicateBeaconStatus+0x5c>)
 8014a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014a2e:	220b      	movs	r2, #11
 8014a30:	701a      	strb	r2, [r3, #0]
        Ctx.LoRaMacClassBParams.MlmeIndication->Status = status;
 8014a32:	4b0e      	ldr	r3, [pc, #56]	; (8014a6c <IndicateBeaconStatus+0x5c>)
 8014a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014a38:	79fa      	ldrb	r2, [r7, #7]
 8014a3a:	705a      	strb	r2, [r3, #1]
        Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeInd = 1;
 8014a3c:	4b0b      	ldr	r3, [pc, #44]	; (8014a6c <IndicateBeaconStatus+0x5c>)
 8014a3e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8014a42:	7813      	ldrb	r3, [r2, #0]
 8014a44:	f043 0308 	orr.w	r3, r3, #8
 8014a48:	7013      	strb	r3, [r2, #0]

        Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MacDone = 1;
 8014a4a:	4b08      	ldr	r3, [pc, #32]	; (8014a6c <IndicateBeaconStatus+0x5c>)
 8014a4c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8014a50:	7813      	ldrb	r3, [r2, #0]
 8014a52:	f043 0320 	orr.w	r3, r3, #32
 8014a56:	7013      	strb	r3, [r2, #0]
    }
    Ctx.BeaconCtx.Ctrl.ResumeBeaconing = 0;
 8014a58:	4a04      	ldr	r2, [pc, #16]	; (8014a6c <IndicateBeaconStatus+0x5c>)
 8014a5a:	7b13      	ldrb	r3, [r2, #12]
 8014a5c:	f36f 1345 	bfc	r3, #5, #1
 8014a60:	7313      	strb	r3, [r2, #12]
}
 8014a62:	bf00      	nop
 8014a64:	370c      	adds	r7, #12
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bc80      	pop	{r7}
 8014a6a:	4770      	bx	lr
 8014a6c:	200020b0 	.word	0x200020b0

08014a70 <ApplyGuardTime>:

static TimerTime_t ApplyGuardTime( TimerTime_t beaconEventTime )
{
 8014a70:	b480      	push	{r7}
 8014a72:	b085      	sub	sp, #20
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
    TimerTime_t timeGuard = beaconEventTime;
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	60fb      	str	r3, [r7, #12]

    if( timeGuard > CLASSB_BEACON_GUARD )
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8014a82:	4293      	cmp	r3, r2
 8014a84:	d903      	bls.n	8014a8e <ApplyGuardTime+0x1e>
    {
        timeGuard -= CLASSB_BEACON_GUARD;
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8014a8c:	60fb      	str	r3, [r7, #12]
    }
    return timeGuard;
 8014a8e:	68fb      	ldr	r3, [r7, #12]
}
 8014a90:	4618      	mov	r0, r3
 8014a92:	3714      	adds	r7, #20
 8014a94:	46bd      	mov	sp, r7
 8014a96:	bc80      	pop	{r7}
 8014a98:	4770      	bx	lr
	...

08014a9c <UpdateBeaconState>:

static TimerTime_t UpdateBeaconState( LoRaMacEventInfoStatus_t status,
                                      TimerTime_t windowMovement, TimerTime_t currentTime )

{
 8014a9c:	b590      	push	{r4, r7, lr}
 8014a9e:	b089      	sub	sp, #36	; 0x24
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	6139      	str	r1, [r7, #16]
 8014aa6:	60fa      	str	r2, [r7, #12]
 8014aa8:	75fb      	strb	r3, [r7, #23]
    TimerTime_t beaconEventTime = 0;
 8014aaa:	2300      	movs	r3, #0
 8014aac:	61fb      	str	r3, [r7, #28]

    // Calculate the next beacon RX time
    beaconEventTime = CalcDelayForNextBeacon( currentTime, SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) );
 8014aae:	4b1f      	ldr	r3, [pc, #124]	; (8014b2c <UpdateBeaconState+0x90>)
 8014ab0:	3318      	adds	r3, #24
 8014ab2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014ab6:	f009 f935 	bl	801dd24 <SysTimeToMs>
 8014aba:	4603      	mov	r3, r0
 8014abc:	4619      	mov	r1, r3
 8014abe:	68f8      	ldr	r0, [r7, #12]
 8014ac0:	f7ff ff88 	bl	80149d4 <CalcDelayForNextBeacon>
 8014ac4:	61f8      	str	r0, [r7, #28]
    Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( currentTime + beaconEventTime );
 8014ac6:	68fa      	ldr	r2, [r7, #12]
 8014ac8:	69fb      	ldr	r3, [r7, #28]
 8014aca:	441a      	add	r2, r3
 8014acc:	4c17      	ldr	r4, [pc, #92]	; (8014b2c <UpdateBeaconState+0x90>)
 8014ace:	463b      	mov	r3, r7
 8014ad0:	4611      	mov	r1, r2
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	f009 f94e 	bl	801dd74 <SysTimeFromMs>
 8014ad8:	f104 0320 	add.w	r3, r4, #32
 8014adc:	463a      	mov	r2, r7
 8014ade:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014ae2:	e883 0003 	stmia.w	r3, {r0, r1}

    // Take temperature compensation into account
    beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 8014ae6:	4b11      	ldr	r3, [pc, #68]	; (8014b2c <UpdateBeaconState+0x90>)
 8014ae8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014aec:	4619      	mov	r1, r3
 8014aee:	69f8      	ldr	r0, [r7, #28]
 8014af0:	f7ff fbb2 	bl	8014258 <TimerTempCompensation>
 8014af4:	61f8      	str	r0, [r7, #28]

    // Move the window
    if( beaconEventTime > windowMovement )
 8014af6:	69fa      	ldr	r2, [r7, #28]
 8014af8:	693b      	ldr	r3, [r7, #16]
 8014afa:	429a      	cmp	r2, r3
 8014afc:	d903      	bls.n	8014b06 <UpdateBeaconState+0x6a>
    {
        beaconEventTime -= windowMovement;
 8014afe:	69fa      	ldr	r2, [r7, #28]
 8014b00:	693b      	ldr	r3, [r7, #16]
 8014b02:	1ad3      	subs	r3, r2, r3
 8014b04:	61fb      	str	r3, [r7, #28]
    }
    Ctx.BeaconCtx.NextBeaconRxAdjusted = currentTime + beaconEventTime;
 8014b06:	68fa      	ldr	r2, [r7, #12]
 8014b08:	69fb      	ldr	r3, [r7, #28]
 8014b0a:	4413      	add	r3, r2
 8014b0c:	4a07      	ldr	r2, [pc, #28]	; (8014b2c <UpdateBeaconState+0x90>)
 8014b0e:	6293      	str	r3, [r2, #40]	; 0x28

    // Start the RX slot state machine for ping and multicast slots
    LoRaMacClassBStartRxSlots( );
 8014b10:	f001 fa02 	bl	8015f18 <LoRaMacClassBStartRxSlots>

    // Setup an MLME_BEACON indication to inform the upper layer
    IndicateBeaconStatus( status );
 8014b14:	7dfb      	ldrb	r3, [r7, #23]
 8014b16:	4618      	mov	r0, r3
 8014b18:	f7ff ff7a 	bl	8014a10 <IndicateBeaconStatus>

    // Apply guard time
    return ApplyGuardTime( beaconEventTime );
 8014b1c:	69f8      	ldr	r0, [r7, #28]
 8014b1e:	f7ff ffa7 	bl	8014a70 <ApplyGuardTime>
 8014b22:	4603      	mov	r3, r0
}
 8014b24:	4618      	mov	r0, r3
 8014b26:	3724      	adds	r7, #36	; 0x24
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bd90      	pop	{r4, r7, pc}
 8014b2c:	200020b0 	.word	0x200020b0

08014b30 <CalcPingNb>:

static uint8_t CalcPingNb( uint16_t periodicity )
{
 8014b30:	b480      	push	{r7}
 8014b32:	b083      	sub	sp, #12
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	4603      	mov	r3, r0
 8014b38:	80fb      	strh	r3, [r7, #6]
    return 128 / ( 1 << periodicity );
 8014b3a:	88fb      	ldrh	r3, [r7, #6]
 8014b3c:	2280      	movs	r2, #128	; 0x80
 8014b3e:	fa42 f303 	asr.w	r3, r2, r3
 8014b42:	b2db      	uxtb	r3, r3
}
 8014b44:	4618      	mov	r0, r3
 8014b46:	370c      	adds	r7, #12
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	bc80      	pop	{r7}
 8014b4c:	4770      	bx	lr

08014b4e <CalcPingPeriod>:

static uint16_t CalcPingPeriod( uint8_t pingNb )
{
 8014b4e:	b480      	push	{r7}
 8014b50:	b083      	sub	sp, #12
 8014b52:	af00      	add	r7, sp, #0
 8014b54:	4603      	mov	r3, r0
 8014b56:	71fb      	strb	r3, [r7, #7]
    return CLASSB_BEACON_WINDOW_SLOTS / pingNb;
 8014b58:	79fb      	ldrb	r3, [r7, #7]
 8014b5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014b5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8014b62:	b29b      	uxth	r3, r3
}
 8014b64:	4618      	mov	r0, r3
 8014b66:	370c      	adds	r7, #12
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	bc80      	pop	{r7}
 8014b6c:	4770      	bx	lr
	...

08014b70 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8014b70:	b5b0      	push	{r4, r5, r7, lr}
 8014b72:	b086      	sub	sp, #24
 8014b74:	af02      	add	r7, sp, #8
 8014b76:	60f8      	str	r0, [r7, #12]
 8014b78:	60b9      	str	r1, [r7, #8]
 8014b7a:	607a      	str	r2, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    // Assign non-volatile context
    if( nvm == NULL )
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d032      	beq.n	8014be8 <LoRaMacClassBInit+0x78>
    {
        return;
    }
    ClassBNvm = nvm;
 8014b82:	4a1b      	ldr	r2, [pc, #108]	; (8014bf0 <LoRaMacClassBInit+0x80>)
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	6013      	str	r3, [r2, #0]

    // Store callbacks
    Ctx.LoRaMacClassBCallbacks = *callbacks;
 8014b88:	4b1a      	ldr	r3, [pc, #104]	; (8014bf4 <LoRaMacClassBInit+0x84>)
 8014b8a:	68ba      	ldr	r2, [r7, #8]
 8014b8c:	338c      	adds	r3, #140	; 0x8c
 8014b8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014b92:	e883 0003 	stmia.w	r3, {r0, r1}

    // Store parameter pointers
    Ctx.LoRaMacClassBParams = *classBParams;
 8014b96:	4b17      	ldr	r3, [pc, #92]	; (8014bf4 <LoRaMacClassBInit+0x84>)
 8014b98:	68fa      	ldr	r2, [r7, #12]
 8014b9a:	f103 0494 	add.w	r4, r3, #148	; 0x94
 8014b9e:	4615      	mov	r5, r2
 8014ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ba4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014ba8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Initialize timers
    TimerInit( &Ctx.BeaconTimer, LoRaMacClassBBeaconTimerEvent );
 8014bac:	2300      	movs	r3, #0
 8014bae:	9300      	str	r3, [sp, #0]
 8014bb0:	4b11      	ldr	r3, [pc, #68]	; (8014bf8 <LoRaMacClassBInit+0x88>)
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8014bb8:	4810      	ldr	r0, [pc, #64]	; (8014bfc <LoRaMacClassBInit+0x8c>)
 8014bba:	f009 fd23 	bl	801e604 <UTIL_TIMER_Create>
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	9300      	str	r3, [sp, #0]
 8014bc2:	4b0f      	ldr	r3, [pc, #60]	; (8014c00 <LoRaMacClassBInit+0x90>)
 8014bc4:	2200      	movs	r2, #0
 8014bc6:	f04f 31ff 	mov.w	r1, #4294967295
 8014bca:	480e      	ldr	r0, [pc, #56]	; (8014c04 <LoRaMacClassBInit+0x94>)
 8014bcc:	f009 fd1a 	bl	801e604 <UTIL_TIMER_Create>
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	9300      	str	r3, [sp, #0]
 8014bd4:	4b0c      	ldr	r3, [pc, #48]	; (8014c08 <LoRaMacClassBInit+0x98>)
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8014bdc:	480b      	ldr	r0, [pc, #44]	; (8014c0c <LoRaMacClassBInit+0x9c>)
 8014bde:	f009 fd11 	bl	801e604 <UTIL_TIMER_Create>

    InitClassB( );
 8014be2:	f7ff fe2d 	bl	8014840 <InitClassB>
 8014be6:	e000      	b.n	8014bea <LoRaMacClassBInit+0x7a>
        return;
 8014be8:	bf00      	nop
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014bea:	3710      	adds	r7, #16
 8014bec:	46bd      	mov	sp, r7
 8014bee:	bdb0      	pop	{r4, r5, r7, pc}
 8014bf0:	20002164 	.word	0x20002164
 8014bf4:	200020b0 	.word	0x200020b0
 8014bf8:	08014ce9 	.word	0x08014ce9
 8014bfc:	200020f4 	.word	0x200020f4
 8014c00:	080150e9 	.word	0x080150e9
 8014c04:	2000210c 	.word	0x2000210c
 8014c08:	080152fd 	.word	0x080152fd
 8014c0c:	20002124 	.word	0x20002124

08014c10 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b082      	sub	sp, #8
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	4603      	mov	r3, r0
 8014c18:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( beaconState == BEACON_STATE_ACQUISITION )
 8014c1a:	79fb      	ldrb	r3, [r7, #7]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d118      	bne.n	8014c52 <LoRaMacClassBSetBeaconState+0x42>
    {
        // If the MAC has received a time reference for the beacon,
        // apply the state BEACON_STATE_ACQUISITION_BY_TIME.
        if( ( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 ) &&
 8014c20:	4b15      	ldr	r3, [pc, #84]	; (8014c78 <LoRaMacClassBSetBeaconState+0x68>)
 8014c22:	7b1b      	ldrb	r3, [r3, #12]
 8014c24:	f003 0304 	and.w	r3, r3, #4
 8014c28:	b2db      	uxtb	r3, r3
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d00c      	beq.n	8014c48 <LoRaMacClassBSetBeaconState+0x38>
            ( LoRaMacClassBIsAcquisitionPending( ) == false ) )
 8014c2e:	f000 fe73 	bl	8015918 <LoRaMacClassBIsAcquisitionPending>
 8014c32:	4603      	mov	r3, r0
 8014c34:	f083 0301 	eor.w	r3, r3, #1
 8014c38:	b2db      	uxtb	r3, r3
        if( ( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 ) &&
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d004      	beq.n	8014c48 <LoRaMacClassBSetBeaconState+0x38>
        {
            Ctx.BeaconState = BEACON_STATE_ACQUISITION_BY_TIME;
 8014c3e:	4b0e      	ldr	r3, [pc, #56]	; (8014c78 <LoRaMacClassBSetBeaconState+0x68>)
 8014c40:	2201      	movs	r2, #1
 8014c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014c46:	e012      	b.n	8014c6e <LoRaMacClassBSetBeaconState+0x5e>
           Ctx.BeaconState = beaconState;
 8014c48:	4a0b      	ldr	r2, [pc, #44]	; (8014c78 <LoRaMacClassBSetBeaconState+0x68>)
 8014c4a:	79fb      	ldrb	r3, [r7, #7]
 8014c4c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
}
 8014c50:	e00d      	b.n	8014c6e <LoRaMacClassBSetBeaconState+0x5e>
        if( ( Ctx.BeaconState != BEACON_STATE_ACQUISITION ) &&
 8014c52:	4b09      	ldr	r3, [pc, #36]	; (8014c78 <LoRaMacClassBSetBeaconState+0x68>)
 8014c54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d008      	beq.n	8014c6e <LoRaMacClassBSetBeaconState+0x5e>
            ( Ctx.BeaconState != BEACON_STATE_ACQUISITION_BY_TIME ) )
 8014c5c:	4b06      	ldr	r3, [pc, #24]	; (8014c78 <LoRaMacClassBSetBeaconState+0x68>)
 8014c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
        if( ( Ctx.BeaconState != BEACON_STATE_ACQUISITION ) &&
 8014c62:	2b01      	cmp	r3, #1
 8014c64:	d003      	beq.n	8014c6e <LoRaMacClassBSetBeaconState+0x5e>
            Ctx.BeaconState = beaconState;
 8014c66:	4a04      	ldr	r2, [pc, #16]	; (8014c78 <LoRaMacClassBSetBeaconState+0x68>)
 8014c68:	79fb      	ldrb	r3, [r7, #7]
 8014c6a:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
}
 8014c6e:	bf00      	nop
 8014c70:	3708      	adds	r7, #8
 8014c72:	46bd      	mov	sp, r7
 8014c74:	bd80      	pop	{r7, pc}
 8014c76:	bf00      	nop
 8014c78:	200020b0 	.word	0x200020b0

08014c7c <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8014c7c:	b480      	push	{r7}
 8014c7e:	b083      	sub	sp, #12
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	4603      	mov	r3, r0
 8014c84:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
 8014c86:	4a04      	ldr	r2, [pc, #16]	; (8014c98 <LoRaMacClassBSetPingSlotState+0x1c>)
 8014c88:	79fb      	ldrb	r3, [r7, #7]
 8014c8a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014c8e:	bf00      	nop
 8014c90:	370c      	adds	r7, #12
 8014c92:	46bd      	mov	sp, r7
 8014c94:	bc80      	pop	{r7}
 8014c96:	4770      	bx	lr
 8014c98:	200020b0 	.word	0x200020b0

08014c9c <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8014c9c:	b480      	push	{r7}
 8014c9e:	b083      	sub	sp, #12
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	4603      	mov	r3, r0
 8014ca4:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
 8014ca6:	4a04      	ldr	r2, [pc, #16]	; (8014cb8 <LoRaMacClassBSetMulticastSlotState+0x1c>)
 8014ca8:	79fb      	ldrb	r3, [r7, #7]
 8014caa:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014cae:	bf00      	nop
 8014cb0:	370c      	adds	r7, #12
 8014cb2:	46bd      	mov	sp, r7
 8014cb4:	bc80      	pop	{r7}
 8014cb6:	4770      	bx	lr
 8014cb8:	200020b0 	.word	0x200020b0

08014cbc <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME )
 8014cc0:	4b08      	ldr	r3, [pc, #32]	; (8014ce4 <LoRaMacClassBIsAcquisitionInProgress+0x28>)
 8014cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014cc6:	2b01      	cmp	r3, #1
 8014cc8:	d101      	bne.n	8014cce <LoRaMacClassBIsAcquisitionInProgress+0x12>
    {
        // In this case the acquisition is in progress, as the MAC has
        // a time reference for the next beacon RX.
        return true;
 8014cca:	2301      	movs	r3, #1
 8014ccc:	e007      	b.n	8014cde <LoRaMacClassBIsAcquisitionInProgress+0x22>
    }
    if( LoRaMacClassBIsAcquisitionPending( ) == true )
 8014cce:	f000 fe23 	bl	8015918 <LoRaMacClassBIsAcquisitionPending>
 8014cd2:	4603      	mov	r3, r0
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d001      	beq.n	8014cdc <LoRaMacClassBIsAcquisitionInProgress+0x20>
    {
        // In this case the acquisition is in progress, as the MAC
        // searches for a beacon.
        return true;
 8014cd8:	2301      	movs	r3, #1
 8014cda:	e000      	b.n	8014cde <LoRaMacClassBIsAcquisitionInProgress+0x22>
    }
    return false;
 8014cdc:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014cde:	4618      	mov	r0, r3
 8014ce0:	bd80      	pop	{r7, pc}
 8014ce2:	bf00      	nop
 8014ce4:	200020b0 	.word	0x200020b0

08014ce8 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b082      	sub	sp, #8
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
 8014cf0:	f009 fe46 	bl	801e980 <UTIL_TIMER_GetCurrentTime>
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	4a0b      	ldr	r2, [pc, #44]	; (8014d24 <LoRaMacClassBBeaconTimerEvent+0x3c>)
 8014cf8:	63d3      	str	r3, [r2, #60]	; 0x3c
    TimerStop( &Ctx.BeaconTimer );
 8014cfa:	480b      	ldr	r0, [pc, #44]	; (8014d28 <LoRaMacClassBBeaconTimerEvent+0x40>)
 8014cfc:	f009 fd26 	bl	801e74c <UTIL_TIMER_Stop>
    LoRaMacClassBEvents.Events.Beacon = 1;
 8014d00:	4a0a      	ldr	r2, [pc, #40]	; (8014d2c <LoRaMacClassBBeaconTimerEvent+0x44>)
 8014d02:	7813      	ldrb	r3, [r2, #0]
 8014d04:	f043 0301 	orr.w	r3, r3, #1
 8014d08:	7013      	strb	r3, [r2, #0]

    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 8014d0a:	4b06      	ldr	r3, [pc, #24]	; (8014d24 <LoRaMacClassBBeaconTimerEvent+0x3c>)
 8014d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d003      	beq.n	8014d1c <LoRaMacClassBBeaconTimerEvent+0x34>
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 8014d14:	4b03      	ldr	r3, [pc, #12]	; (8014d24 <LoRaMacClassBBeaconTimerEvent+0x3c>)
 8014d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014d1a:	4798      	blx	r3
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014d1c:	bf00      	nop
 8014d1e:	3708      	adds	r7, #8
 8014d20:	46bd      	mov	sp, r7
 8014d22:	bd80      	pop	{r7, pc}
 8014d24:	200020b0 	.word	0x200020b0
 8014d28:	200020f4 	.word	0x200020f4
 8014d2c:	200020ac 	.word	0x200020ac

08014d30 <LoRaMacClassBProcessBeacon>:

#if ( LORAMAC_CLASSB_ENABLED == 1 )
static void LoRaMacClassBProcessBeacon( void )
{
 8014d30:	b590      	push	{r4, r7, lr}
 8014d32:	b08b      	sub	sp, #44	; 0x2c
 8014d34:	af02      	add	r7, sp, #8
    bool activateTimer = false;
 8014d36:	2300      	movs	r3, #0
 8014d38:	77fb      	strb	r3, [r7, #31]
    TimerTime_t beaconEventTime = 1;
 8014d3a:	2301      	movs	r3, #1
 8014d3c:	61bb      	str	r3, [r7, #24]
    RxConfigParams_t beaconRxConfig;
    TimerTime_t currentTime = Ctx.BeaconCtx.TimeStamp;
 8014d3e:	4bb3      	ldr	r3, [pc, #716]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d42:	617b      	str	r3, [r7, #20]

    // Beacon state machine
    switch( Ctx.BeaconState )
 8014d44:	4bb1      	ldr	r3, [pc, #708]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014d46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014d4a:	2b0a      	cmp	r3, #10
 8014d4c:	f200 81a8 	bhi.w	80150a0 <LoRaMacClassBProcessBeacon+0x370>
 8014d50:	a201      	add	r2, pc, #4	; (adr r2, 8014d58 <LoRaMacClassBProcessBeacon+0x28>)
 8014d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d56:	bf00      	nop
 8014d58:	08014e83 	.word	0x08014e83
 8014d5c:	08014d85 	.word	0x08014d85
 8014d60:	08014ed7 	.word	0x08014ed7
 8014d64:	080150a1 	.word	0x080150a1
 8014d68:	08014ef3 	.word	0x08014ef3
 8014d6c:	08014f3d 	.word	0x08014f3d
 8014d70:	080150a1 	.word	0x080150a1
 8014d74:	08014f91 	.word	0x08014f91
 8014d78:	08015021 	.word	0x08015021
 8014d7c:	080150a1 	.word	0x080150a1
 8014d80:	0801503f 	.word	0x0801503f
    {
        case BEACON_STATE_ACQUISITION_BY_TIME:
        {
            activateTimer = true;
 8014d84:	2301      	movs	r3, #1
 8014d86:	77fb      	strb	r3, [r7, #31]

            if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 8014d88:	4ba0      	ldr	r3, [pc, #640]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014d8a:	7b1b      	ldrb	r3, [r3, #12]
 8014d8c:	f003 0310 	and.w	r3, r3, #16
 8014d90:	b2db      	uxtb	r3, r3
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d007      	beq.n	8014da6 <LoRaMacClassBProcessBeacon+0x76>
            {
                Radio.Sleep();
 8014d96:	4b9e      	ldr	r3, [pc, #632]	; (8015010 <LoRaMacClassBProcessBeacon+0x2e0>)
 8014d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d9a:	4798      	blx	r3
                Ctx.BeaconState = BEACON_STATE_LOST;
 8014d9c:	4b9b      	ldr	r3, [pc, #620]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014d9e:	220a      	movs	r2, #10
 8014da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                    Ctx.BeaconCtx.BeaconTimingDelay = 0;

                    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
                }
            }
            break;
 8014da4:	e182      	b.n	80150ac <LoRaMacClassBProcessBeacon+0x37c>
                ResetWindowTimeout( );
 8014da6:	f7ff fe03 	bl	80149b0 <ResetWindowTimeout>
                if( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 )
 8014daa:	4b98      	ldr	r3, [pc, #608]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014dac:	7b1b      	ldrb	r3, [r3, #12]
 8014dae:	f003 0304 	and.w	r3, r3, #4
 8014db2:	b2db      	uxtb	r3, r3
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d056      	beq.n	8014e66 <LoRaMacClassBProcessBeacon+0x136>
                    CalculateBeaconRxWindowConfig( &beaconRxConfig, Ctx.BeaconCtx.SymbolTimeout );
 8014db8:	4b94      	ldr	r3, [pc, #592]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014dba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8014dbc:	463b      	mov	r3, r7
 8014dbe:	4611      	mov	r1, r2
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f7ff fbb3 	bl	801452c <CalculateBeaconRxWindowConfig>
                    if( Ctx.BeaconCtx.BeaconTimingDelay > 0 )
 8014dc6:	4b91      	ldr	r3, [pc, #580]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d036      	beq.n	8014e3c <LoRaMacClassBProcessBeacon+0x10c>
                        if( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) > currentTime )
 8014dce:	4b8f      	ldr	r3, [pc, #572]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014dd0:	3320      	adds	r3, #32
 8014dd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014dd6:	f008 ffa5 	bl	801dd24 <SysTimeToMs>
 8014dda:	4602      	mov	r2, r0
 8014ddc:	697b      	ldr	r3, [r7, #20]
 8014dde:	4293      	cmp	r3, r2
 8014de0:	d21a      	bcs.n	8014e18 <LoRaMacClassBProcessBeacon+0xe8>
                            beaconEventTime = TimerTempCompensation( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTime, Ctx.BeaconCtx.Temperature );
 8014de2:	4b8a      	ldr	r3, [pc, #552]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014de4:	3320      	adds	r3, #32
 8014de6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014dea:	f008 ff9b 	bl	801dd24 <SysTimeToMs>
 8014dee:	4602      	mov	r2, r0
 8014df0:	697b      	ldr	r3, [r7, #20]
 8014df2:	1ad3      	subs	r3, r2, r3
 8014df4:	4a85      	ldr	r2, [pc, #532]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014df6:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8014dfa:	4611      	mov	r1, r2
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	f7ff fa2b 	bl	8014258 <TimerTempCompensation>
 8014e02:	61b8      	str	r0, [r7, #24]
                            if( ( int32_t ) beaconEventTime > beaconRxConfig.WindowOffset )
 8014e04:	68fa      	ldr	r2, [r7, #12]
 8014e06:	69bb      	ldr	r3, [r7, #24]
 8014e08:	429a      	cmp	r2, r3
 8014e0a:	da13      	bge.n	8014e34 <LoRaMacClassBProcessBeacon+0x104>
                                beaconEventTime += beaconRxConfig.WindowOffset;
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	461a      	mov	r2, r3
 8014e10:	69bb      	ldr	r3, [r7, #24]
 8014e12:	4413      	add	r3, r2
 8014e14:	61bb      	str	r3, [r7, #24]
 8014e16:	e00d      	b.n	8014e34 <LoRaMacClassBProcessBeacon+0x104>
                            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 0;
 8014e18:	4a7c      	ldr	r2, [pc, #496]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014e1a:	7b13      	ldrb	r3, [r2, #12]
 8014e1c:	f36f 0382 	bfc	r3, #2, #1
 8014e20:	7313      	strb	r3, [r2, #12]
                            Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 0;
 8014e22:	4a7a      	ldr	r2, [pc, #488]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014e24:	7b13      	ldrb	r3, [r2, #12]
 8014e26:	f36f 03c3 	bfc	r3, #3, #1
 8014e2a:	7313      	strb	r3, [r2, #12]
                            Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 8014e2c:	4b77      	ldr	r3, [pc, #476]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014e2e:	2200      	movs	r2, #0
 8014e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                        Ctx.BeaconCtx.BeaconTimingDelay = 0;
 8014e34:	4b75      	ldr	r3, [pc, #468]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014e36:	2200      	movs	r2, #0
 8014e38:	639a      	str	r2, [r3, #56]	; 0x38
            break;
 8014e3a:	e137      	b.n	80150ac <LoRaMacClassBProcessBeacon+0x37c>
                        activateTimer = false;
 8014e3c:	2300      	movs	r3, #0
 8014e3e:	77fb      	strb	r3, [r7, #31]
                        Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 0;
 8014e40:	4a72      	ldr	r2, [pc, #456]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014e42:	7b13      	ldrb	r3, [r2, #12]
 8014e44:	f36f 0382 	bfc	r3, #2, #1
 8014e48:	7313      	strb	r3, [r2, #12]
                        Ctx.BeaconCtx.Ctrl.AcquisitionPending = 1;
 8014e4a:	4a70      	ldr	r2, [pc, #448]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014e4c:	7b13      	ldrb	r3, [r2, #12]
 8014e4e:	f043 0310 	orr.w	r3, r3, #16
 8014e52:	7313      	strb	r3, [r2, #12]
                        RxBeaconSetup( CLASSB_BEACON_RESERVED, false, beaconRxConfig.WindowTimeout );
 8014e54:	68bb      	ldr	r3, [r7, #8]
 8014e56:	b29b      	uxth	r3, r3
 8014e58:	461a      	mov	r2, r3
 8014e5a:	2100      	movs	r1, #0
 8014e5c:	f640 0048 	movw	r0, #2120	; 0x848
 8014e60:	f7ff fba6 	bl	80145b0 <RxBeaconSetup>
            break;
 8014e64:	e122      	b.n	80150ac <LoRaMacClassBProcessBeacon+0x37c>
                    Ctx.BeaconCtx.NextBeaconRx.Seconds = 0;
 8014e66:	4b69      	ldr	r3, [pc, #420]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014e68:	2200      	movs	r2, #0
 8014e6a:	621a      	str	r2, [r3, #32]
                    Ctx.BeaconCtx.NextBeaconRx.SubSeconds = 0;
 8014e6c:	4b67      	ldr	r3, [pc, #412]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014e6e:	2200      	movs	r2, #0
 8014e70:	849a      	strh	r2, [r3, #36]	; 0x24
                    Ctx.BeaconCtx.BeaconTimingDelay = 0;
 8014e72:	4b66      	ldr	r3, [pc, #408]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014e74:	2200      	movs	r2, #0
 8014e76:	639a      	str	r2, [r3, #56]	; 0x38
                    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 8014e78:	4b64      	ldr	r3, [pc, #400]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014e7a:	2200      	movs	r2, #0
 8014e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            break;
 8014e80:	e114      	b.n	80150ac <LoRaMacClassBProcessBeacon+0x37c>
        }
        case BEACON_STATE_ACQUISITION:
        {
            activateTimer = true;
 8014e82:	2301      	movs	r3, #1
 8014e84:	77fb      	strb	r3, [r7, #31]

            if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 8014e86:	4b61      	ldr	r3, [pc, #388]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014e88:	7b1b      	ldrb	r3, [r3, #12]
 8014e8a:	f003 0310 	and.w	r3, r3, #16
 8014e8e:	b2db      	uxtb	r3, r3
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d007      	beq.n	8014ea4 <LoRaMacClassBProcessBeacon+0x174>
            {
                Radio.Sleep();
 8014e94:	4b5e      	ldr	r3, [pc, #376]	; (8015010 <LoRaMacClassBProcessBeacon+0x2e0>)
 8014e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e98:	4798      	blx	r3
                Ctx.BeaconState = BEACON_STATE_LOST;
 8014e9a:	4b5c      	ldr	r3, [pc, #368]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014e9c:	220a      	movs	r2, #10
 8014e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                // find a beacon, the state machine will stay in state BEACON_STATE_ACQUISITION.
                // This state detects that a acquisition was pending previously and will change the next
                // state to BEACON_STATE_LOST.
                RxBeaconSetup( 0, true, beaconRxConfig.WindowTimeout );
            }
            break;
 8014ea2:	e103      	b.n	80150ac <LoRaMacClassBProcessBeacon+0x37c>
                ResetWindowTimeout( );
 8014ea4:	f7ff fd84 	bl	80149b0 <ResetWindowTimeout>
                Ctx.BeaconCtx.Ctrl.AcquisitionPending = 1;
 8014ea8:	4a58      	ldr	r2, [pc, #352]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014eaa:	7b13      	ldrb	r3, [r2, #12]
 8014eac:	f043 0310 	orr.w	r3, r3, #16
 8014eb0:	7313      	strb	r3, [r2, #12]
                beaconEventTime = CLASSB_BEACON_INTERVAL;
 8014eb2:	f44f 33fa 	mov.w	r3, #128000	; 0x1f400
 8014eb6:	61bb      	str	r3, [r7, #24]
                CalculateBeaconRxWindowConfig( &beaconRxConfig, Ctx.BeaconCtx.SymbolTimeout );
 8014eb8:	4b54      	ldr	r3, [pc, #336]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014eba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8014ebc:	463b      	mov	r3, r7
 8014ebe:	4611      	mov	r1, r2
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	f7ff fb33 	bl	801452c <CalculateBeaconRxWindowConfig>
                RxBeaconSetup( 0, true, beaconRxConfig.WindowTimeout );
 8014ec6:	68bb      	ldr	r3, [r7, #8]
 8014ec8:	b29b      	uxth	r3, r3
 8014eca:	461a      	mov	r2, r3
 8014ecc:	2101      	movs	r1, #1
 8014ece:	2000      	movs	r0, #0
 8014ed0:	f7ff fb6e 	bl	80145b0 <RxBeaconSetup>
            break;
 8014ed4:	e0ea      	b.n	80150ac <LoRaMacClassBProcessBeacon+0x37c>
        }
        case BEACON_STATE_TIMEOUT:
        {
            // We have to update the beacon time, since we missed a beacon
            Ctx.BeaconCtx.BeaconTime.Seconds += ( CLASSB_BEACON_INTERVAL / 1000 );
 8014ed6:	4b4d      	ldr	r3, [pc, #308]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014ed8:	691b      	ldr	r3, [r3, #16]
 8014eda:	3380      	adds	r3, #128	; 0x80
 8014edc:	4a4b      	ldr	r2, [pc, #300]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014ede:	6113      	str	r3, [r2, #16]
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 8014ee0:	4b4a      	ldr	r3, [pc, #296]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	829a      	strh	r2, [r3, #20]

            // Enlarge window timeouts to increase the chance to receive the next beacon
            EnlargeWindowTimeout( );
 8014ee6:	f7ff fd33 	bl	8014950 <EnlargeWindowTimeout>

            // Setup next state
            Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 8014eea:	4b48      	ldr	r3, [pc, #288]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014eec:	2204      	movs	r2, #4
 8014eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }
            // Intentional fall through
        case BEACON_STATE_REACQUISITION:
        {
            activateTimer = true;
 8014ef2:	2301      	movs	r3, #1
 8014ef4:	77fb      	strb	r3, [r7, #31]

            // The beacon is no longer acquired
            Ctx.BeaconCtx.Ctrl.BeaconAcquired = 0;
 8014ef6:	4a45      	ldr	r2, [pc, #276]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014ef8:	7b13      	ldrb	r3, [r2, #12]
 8014efa:	f36f 0341 	bfc	r3, #1, #1
 8014efe:	7313      	strb	r3, [r2, #12]

            // Verify if the maximum beacon less period has been elapsed
            if( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) > CLASSB_MAX_BEACON_LESS_PERIOD )
 8014f00:	4b42      	ldr	r3, [pc, #264]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014f02:	3318      	adds	r3, #24
 8014f04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014f08:	f008 ff0c 	bl	801dd24 <SysTimeToMs>
 8014f0c:	4602      	mov	r2, r0
 8014f0e:	697b      	ldr	r3, [r7, #20]
 8014f10:	1a9b      	subs	r3, r3, r2
 8014f12:	4a40      	ldr	r2, [pc, #256]	; (8015014 <LoRaMacClassBProcessBeacon+0x2e4>)
 8014f14:	4293      	cmp	r3, r2
 8014f16:	d904      	bls.n	8014f22 <LoRaMacClassBProcessBeacon+0x1f2>
            {
                Ctx.BeaconState = BEACON_STATE_LOST;
 8014f18:	4b3c      	ldr	r3, [pc, #240]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014f1a:	220a      	movs	r2, #10
 8014f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                     Ctx.BeaconCtx.BeaconWindowMovement, currentTime );

                // Setup next state
                Ctx.BeaconState = BEACON_STATE_IDLE;
            }
            break;
 8014f20:	e0c4      	b.n	80150ac <LoRaMacClassBProcessBeacon+0x37c>
                beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND,
 8014f22:	4b3a      	ldr	r3, [pc, #232]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f26:	697a      	ldr	r2, [r7, #20]
 8014f28:	4619      	mov	r1, r3
 8014f2a:	2010      	movs	r0, #16
 8014f2c:	f7ff fdb6 	bl	8014a9c <UpdateBeaconState>
 8014f30:	61b8      	str	r0, [r7, #24]
                Ctx.BeaconState = BEACON_STATE_IDLE;
 8014f32:	4b36      	ldr	r3, [pc, #216]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014f34:	2207      	movs	r2, #7
 8014f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            break;
 8014f3a:	e0b7      	b.n	80150ac <LoRaMacClassBProcessBeacon+0x37c>
        }
        case BEACON_STATE_LOCKED:
        {
            activateTimer = true;
 8014f3c:	2301      	movs	r3, #1
 8014f3e:	77fb      	strb	r3, [r7, #31]

            // We have received a beacon. Acquisition is no longer pending.
            Ctx.BeaconCtx.Ctrl.AcquisitionPending = 0;
 8014f40:	4a32      	ldr	r2, [pc, #200]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014f42:	7b13      	ldrb	r3, [r2, #12]
 8014f44:	f36f 1304 	bfc	r3, #4, #1
 8014f48:	7313      	strb	r3, [r2, #12]

            // Handle beacon reception
            beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED,
 8014f4a:	697a      	ldr	r2, [r7, #20]
 8014f4c:	2100      	movs	r1, #0
 8014f4e:	200e      	movs	r0, #14
 8014f50:	f7ff fda4 	bl	8014a9c <UpdateBeaconState>
 8014f54:	61b8      	str	r0, [r7, #24]
                                                 0, currentTime );

            // Setup the MLME confirm for the MLME_BEACON_ACQUISITION
            if( Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeReq == 1 )
 8014f56:	4b2d      	ldr	r3, [pc, #180]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014f58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014f5c:	781b      	ldrb	r3, [r3, #0]
 8014f5e:	f003 0304 	and.w	r3, r3, #4
 8014f62:	b2db      	uxtb	r3, r3
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d00e      	beq.n	8014f86 <LoRaMacClassBProcessBeacon+0x256>
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true )
 8014f68:	200c      	movs	r0, #12
 8014f6a:	f001 fc75 	bl	8016858 <LoRaMacConfirmQueueIsCmdActive>
 8014f6e:	4603      	mov	r3, r0
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d008      	beq.n	8014f86 <LoRaMacClassBProcessBeacon+0x256>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_ACQUISITION );
 8014f74:	210c      	movs	r1, #12
 8014f76:	2000      	movs	r0, #0
 8014f78:	f001 fbe2 	bl	8016740 <LoRaMacConfirmQueueSetStatus>
                    Ctx.LoRaMacClassBParams.MlmeConfirm->TxTimeOnAir = 0;
 8014f7c:	4b23      	ldr	r3, [pc, #140]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014f7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014f82:	2200      	movs	r2, #0
 8014f84:	605a      	str	r2, [r3, #4]
                }
            }

            // Setup next state
            Ctx.BeaconState = BEACON_STATE_IDLE;
 8014f86:	4b21      	ldr	r3, [pc, #132]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014f88:	2207      	movs	r2, #7
 8014f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            break;
 8014f8e:	e08d      	b.n	80150ac <LoRaMacClassBProcessBeacon+0x37c>
        }
        case BEACON_STATE_IDLE:
        {
            activateTimer = true;
 8014f90:	2301      	movs	r3, #1
 8014f92:	77fb      	strb	r3, [r7, #31]
            GetTemperature( &Ctx.LoRaMacClassBCallbacks, &Ctx.BeaconCtx );
 8014f94:	4920      	ldr	r1, [pc, #128]	; (8015018 <LoRaMacClassBProcessBeacon+0x2e8>)
 8014f96:	4821      	ldr	r0, [pc, #132]	; (801501c <LoRaMacClassBProcessBeacon+0x2ec>)
 8014f98:	f7ff fc3b 	bl	8014812 <GetTemperature>
            beaconEventTime = Ctx.BeaconCtx.NextBeaconRxAdjusted - Radio.GetWakeupTime( );
 8014f9c:	4b1b      	ldr	r3, [pc, #108]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014f9e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8014fa0:	4b1b      	ldr	r3, [pc, #108]	; (8015010 <LoRaMacClassBProcessBeacon+0x2e0>)
 8014fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014fa4:	4798      	blx	r3
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	1ae3      	subs	r3, r4, r3
 8014faa:	61bb      	str	r3, [r7, #24]
            currentTime = TimerGetCurrentTime( );
 8014fac:	f009 fce8 	bl	801e980 <UTIL_TIMER_GetCurrentTime>
 8014fb0:	6178      	str	r0, [r7, #20]

            // The goal is to calculate beaconRxConfig.WindowTimeout and beaconRxConfig.WindowOffset
            CalculateBeaconRxWindowConfig( &beaconRxConfig, Ctx.BeaconCtx.SymbolTimeout );
 8014fb2:	4b16      	ldr	r3, [pc, #88]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014fb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8014fb6:	463b      	mov	r3, r7
 8014fb8:	4611      	mov	r1, r2
 8014fba:	4618      	mov	r0, r3
 8014fbc:	f7ff fab6 	bl	801452c <CalculateBeaconRxWindowConfig>

            if( beaconEventTime > currentTime )
 8014fc0:	69ba      	ldr	r2, [r7, #24]
 8014fc2:	697b      	ldr	r3, [r7, #20]
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	d919      	bls.n	8014ffc <LoRaMacClassBProcessBeacon+0x2cc>
            {
                Ctx.BeaconState = BEACON_STATE_GUARD;
 8014fc8:	4b10      	ldr	r3, [pc, #64]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014fca:	2208      	movs	r2, #8
 8014fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                beaconEventTime -= currentTime;
 8014fd0:	69ba      	ldr	r2, [r7, #24]
 8014fd2:	697b      	ldr	r3, [r7, #20]
 8014fd4:	1ad3      	subs	r3, r2, r3
 8014fd6:	61bb      	str	r3, [r7, #24]
                beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 8014fd8:	4b0c      	ldr	r3, [pc, #48]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014fda:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014fde:	4619      	mov	r1, r3
 8014fe0:	69b8      	ldr	r0, [r7, #24]
 8014fe2:	f7ff f939 	bl	8014258 <TimerTempCompensation>
 8014fe6:	61b8      	str	r0, [r7, #24]

                if( ( int32_t ) beaconEventTime > beaconRxConfig.WindowOffset )
 8014fe8:	68fa      	ldr	r2, [r7, #12]
 8014fea:	69bb      	ldr	r3, [r7, #24]
 8014fec:	429a      	cmp	r2, r3
 8014fee:	da5c      	bge.n	80150aa <LoRaMacClassBProcessBeacon+0x37a>
                {
                    // Apply the offset of the system error respectively beaconing precision setting
                    beaconEventTime += beaconRxConfig.WindowOffset;
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	461a      	mov	r2, r3
 8014ff4:	69bb      	ldr	r3, [r7, #24]
 8014ff6:	4413      	add	r3, r2
 8014ff8:	61bb      	str	r3, [r7, #24]
            else
            {
                Ctx.BeaconState = BEACON_STATE_REACQUISITION;
                beaconEventTime = 1;
            }
            break;
 8014ffa:	e056      	b.n	80150aa <LoRaMacClassBProcessBeacon+0x37a>
                Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 8014ffc:	4b03      	ldr	r3, [pc, #12]	; (801500c <LoRaMacClassBProcessBeacon+0x2dc>)
 8014ffe:	2204      	movs	r2, #4
 8015000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                beaconEventTime = 1;
 8015004:	2301      	movs	r3, #1
 8015006:	61bb      	str	r3, [r7, #24]
            break;
 8015008:	e04f      	b.n	80150aa <LoRaMacClassBProcessBeacon+0x37a>
 801500a:	bf00      	nop
 801500c:	200020b0 	.word	0x200020b0
 8015010:	0801fbe4 	.word	0x0801fbe4
 8015014:	006ddd00 	.word	0x006ddd00
 8015018:	200020bc 	.word	0x200020bc
 801501c:	2000213c 	.word	0x2000213c
        }
        case BEACON_STATE_GUARD:
        {
            Ctx.BeaconState = BEACON_STATE_RX;
 8015020:	4b2e      	ldr	r3, [pc, #184]	; (80150dc <LoRaMacClassBProcessBeacon+0x3ac>)
 8015022:	2209      	movs	r2, #9
 8015024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            // Stop slot timers
            LoRaMacClassBStopRxSlots( );
 8015028:	f000 ff4c 	bl	8015ec4 <LoRaMacClassBStopRxSlots>

            // Don't use the default channel. We know on which
            // channel the next beacon will be transmitted
            RxBeaconSetup( CLASSB_BEACON_RESERVED, false, beaconRxConfig.WindowTimeout );
 801502c:	68bb      	ldr	r3, [r7, #8]
 801502e:	b29b      	uxth	r3, r3
 8015030:	461a      	mov	r2, r3
 8015032:	2100      	movs	r1, #0
 8015034:	f640 0048 	movw	r0, #2120	; 0x848
 8015038:	f7ff faba 	bl	80145b0 <RxBeaconSetup>
            break;
 801503c:	e036      	b.n	80150ac <LoRaMacClassBProcessBeacon+0x37c>
        }
        case BEACON_STATE_LOST:
        {
            // Handle events
            if( Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeReq == 1 )
 801503e:	4b27      	ldr	r3, [pc, #156]	; (80150dc <LoRaMacClassBProcessBeacon+0x3ac>)
 8015040:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015044:	781b      	ldrb	r3, [r3, #0]
 8015046:	f003 0304 	and.w	r3, r3, #4
 801504a:	b2db      	uxtb	r3, r3
 801504c:	2b00      	cmp	r3, #0
 801504e:	d00a      	beq.n	8015066 <LoRaMacClassBProcessBeacon+0x336>
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true )
 8015050:	200c      	movs	r0, #12
 8015052:	f001 fc01 	bl	8016858 <LoRaMacConfirmQueueIsCmdActive>
 8015056:	4603      	mov	r3, r0
 8015058:	2b00      	cmp	r3, #0
 801505a:	d015      	beq.n	8015088 <LoRaMacClassBProcessBeacon+0x358>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_BEACON_ACQUISITION );
 801505c:	210c      	movs	r1, #12
 801505e:	2010      	movs	r0, #16
 8015060:	f001 fb6e 	bl	8016740 <LoRaMacConfirmQueueSetStatus>
 8015064:	e010      	b.n	8015088 <LoRaMacClassBProcessBeacon+0x358>
                }
            }
            else
            {
                Ctx.LoRaMacClassBParams.MlmeIndication->MlmeIndication = MLME_BEACON_LOST;
 8015066:	4b1d      	ldr	r3, [pc, #116]	; (80150dc <LoRaMacClassBProcessBeacon+0x3ac>)
 8015068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801506c:	220f      	movs	r2, #15
 801506e:	701a      	strb	r2, [r3, #0]
                Ctx.LoRaMacClassBParams.MlmeIndication->Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8015070:	4b1a      	ldr	r3, [pc, #104]	; (80150dc <LoRaMacClassBProcessBeacon+0x3ac>)
 8015072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015076:	2200      	movs	r2, #0
 8015078:	705a      	strb	r2, [r3, #1]
                Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeInd = 1;
 801507a:	4b18      	ldr	r3, [pc, #96]	; (80150dc <LoRaMacClassBProcessBeacon+0x3ac>)
 801507c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8015080:	7813      	ldrb	r3, [r2, #0]
 8015082:	f043 0308 	orr.w	r3, r3, #8
 8015086:	7013      	strb	r3, [r2, #0]
            }

            // Stop slot timers
            LoRaMacClassBStopRxSlots( );
 8015088:	f000 ff1c 	bl	8015ec4 <LoRaMacClassBStopRxSlots>

            // Initialize default state for class b
            InitClassBDefaults( );
 801508c:	f7ff fc24 	bl	80148d8 <InitClassBDefaults>

            Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MacDone = 1;
 8015090:	4b12      	ldr	r3, [pc, #72]	; (80150dc <LoRaMacClassBProcessBeacon+0x3ac>)
 8015092:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8015096:	7813      	ldrb	r3, [r2, #0]
 8015098:	f043 0320 	orr.w	r3, r3, #32
 801509c:	7013      	strb	r3, [r2, #0]

            break;
 801509e:	e005      	b.n	80150ac <LoRaMacClassBProcessBeacon+0x37c>
        }
        default:
        {
            Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 80150a0:	4b0e      	ldr	r3, [pc, #56]	; (80150dc <LoRaMacClassBProcessBeacon+0x3ac>)
 80150a2:	2200      	movs	r2, #0
 80150a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            break;
 80150a8:	e000      	b.n	80150ac <LoRaMacClassBProcessBeacon+0x37c>
            break;
 80150aa:	bf00      	nop
        }
    }
    MW_LOG(TS_ON, VLEVEL_H, "beacon state %d\r\n", Ctx.BeaconState);
 80150ac:	4b0b      	ldr	r3, [pc, #44]	; (80150dc <LoRaMacClassBProcessBeacon+0x3ac>)
 80150ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80150b2:	9300      	str	r3, [sp, #0]
 80150b4:	4b0a      	ldr	r3, [pc, #40]	; (80150e0 <LoRaMacClassBProcessBeacon+0x3b0>)
 80150b6:	2201      	movs	r2, #1
 80150b8:	2100      	movs	r1, #0
 80150ba:	2003      	movs	r0, #3
 80150bc:	f009 fd50 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>

    if( activateTimer == true )
 80150c0:	7ffb      	ldrb	r3, [r7, #31]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d006      	beq.n	80150d4 <LoRaMacClassBProcessBeacon+0x3a4>
    {
        TimerSetValue( &Ctx.BeaconTimer, beaconEventTime );
 80150c6:	69b9      	ldr	r1, [r7, #24]
 80150c8:	4806      	ldr	r0, [pc, #24]	; (80150e4 <LoRaMacClassBProcessBeacon+0x3b4>)
 80150ca:	f009 fbaf 	bl	801e82c <UTIL_TIMER_SetPeriod>
        TimerStart( &Ctx.BeaconTimer );
 80150ce:	4805      	ldr	r0, [pc, #20]	; (80150e4 <LoRaMacClassBProcessBeacon+0x3b4>)
 80150d0:	f009 face 	bl	801e670 <UTIL_TIMER_Start>
    }
}
 80150d4:	bf00      	nop
 80150d6:	3724      	adds	r7, #36	; 0x24
 80150d8:	46bd      	mov	sp, r7
 80150da:	bd90      	pop	{r4, r7, pc}
 80150dc:	200020b0 	.word	0x200020b0
 80150e0:	0801f5b4 	.word	0x0801f5b4
 80150e4:	200020f4 	.word	0x200020f4

080150e8 <LoRaMacClassBPingSlotTimerEvent>:
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b082      	sub	sp, #8
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;
 80150f0:	4a08      	ldr	r2, [pc, #32]	; (8015114 <LoRaMacClassBPingSlotTimerEvent+0x2c>)
 80150f2:	7813      	ldrb	r3, [r2, #0]
 80150f4:	f043 0302 	orr.w	r3, r3, #2
 80150f8:	7013      	strb	r3, [r2, #0]

    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 80150fa:	4b07      	ldr	r3, [pc, #28]	; (8015118 <LoRaMacClassBPingSlotTimerEvent+0x30>)
 80150fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015100:	2b00      	cmp	r3, #0
 8015102:	d003      	beq.n	801510c <LoRaMacClassBPingSlotTimerEvent+0x24>
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 8015104:	4b04      	ldr	r3, [pc, #16]	; (8015118 <LoRaMacClassBPingSlotTimerEvent+0x30>)
 8015106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801510a:	4798      	blx	r3
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801510c:	bf00      	nop
 801510e:	3708      	adds	r7, #8
 8015110:	46bd      	mov	sp, r7
 8015112:	bd80      	pop	{r7, pc}
 8015114:	200020ac 	.word	0x200020ac
 8015118:	200020b0 	.word	0x200020b0

0801511c <LoRaMacClassBProcessPingSlot>:

#if ( LORAMAC_CLASSB_ENABLED == 1 )
static void LoRaMacClassBProcessPingSlot( void )
{
 801511c:	b590      	push	{r4, r7, lr}
 801511e:	b085      	sub	sp, #20
 8015120:	af02      	add	r7, sp, #8
    static RxConfigParams_t pingSlotRxConfig;
    TimerTime_t pingSlotTime = 0;
 8015122:	2300      	movs	r3, #0
 8015124:	603b      	str	r3, [r7, #0]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint32_t maxRxError = 0;
    bool slotHasPriority = false;
#endif /* LORAMAC_VERSION */

    switch( Ctx.PingSlotState )
 8015126:	4b6f      	ldr	r3, [pc, #444]	; (80152e4 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8015128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801512c:	2b02      	cmp	r3, #2
 801512e:	d063      	beq.n	80151f8 <LoRaMacClassBProcessPingSlot+0xdc>
 8015130:	2b02      	cmp	r3, #2
 8015132:	f300 80cc 	bgt.w	80152ce <LoRaMacClassBProcessPingSlot+0x1b2>
 8015136:	2b00      	cmp	r3, #0
 8015138:	d002      	beq.n	8015140 <LoRaMacClassBProcessPingSlot+0x24>
 801513a:	2b01      	cmp	r3, #1
 801513c:	d014      	beq.n	8015168 <LoRaMacClassBProcessPingSlot+0x4c>
 801513e:	e0c6      	b.n	80152ce <LoRaMacClassBProcessPingSlot+0x1b2>
    {
        case PINGSLOT_STATE_CALC_PING_OFFSET:
        {
            ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 8015140:	4b68      	ldr	r3, [pc, #416]	; (80152e4 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8015142:	691b      	ldr	r3, [r3, #16]
 8015144:	2200      	movs	r2, #0
 8015146:	4618      	mov	r0, r3
 8015148:	4611      	mov	r1, r2
                               *Ctx.LoRaMacClassBParams.LoRaMacDevAddr,
 801514a:	4b66      	ldr	r3, [pc, #408]	; (80152e4 <LoRaMacClassBProcessPingSlot+0x1c8>)
 801514c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
            ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 8015150:	681a      	ldr	r2, [r3, #0]
                               ClassBNvm->PingSlotCtx.PingPeriod,
 8015152:	4b65      	ldr	r3, [pc, #404]	; (80152e8 <LoRaMacClassBProcessPingSlot+0x1cc>)
 8015154:	681b      	ldr	r3, [r3, #0]
            ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 8015156:	885b      	ldrh	r3, [r3, #2]
 8015158:	4c64      	ldr	r4, [pc, #400]	; (80152ec <LoRaMacClassBProcessPingSlot+0x1d0>)
 801515a:	9400      	str	r4, [sp, #0]
 801515c:	f7ff f90a 	bl	8014374 <ComputePingOffset>
                               &( Ctx.PingSlotCtx.PingOffset ) );
            Ctx.PingSlotState = PINGSLOT_STATE_SET_TIMER;
 8015160:	4b60      	ldr	r3, [pc, #384]	; (80152e4 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8015162:	2201      	movs	r2, #1
 8015164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
            // Intentional fall through
        case PINGSLOT_STATE_SET_TIMER:
        {
            if( CalcNextSlotTime( Ctx.PingSlotCtx.PingOffset, ClassBNvm->PingSlotCtx.PingPeriod, ClassBNvm->PingSlotCtx.PingNb, &pingSlotTime ) == true )
 8015168:	4b5e      	ldr	r3, [pc, #376]	; (80152e4 <LoRaMacClassBProcessPingSlot+0x1c8>)
 801516a:	8898      	ldrh	r0, [r3, #4]
 801516c:	4b5e      	ldr	r3, [pc, #376]	; (80152e8 <LoRaMacClassBProcessPingSlot+0x1cc>)
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	8859      	ldrh	r1, [r3, #2]
 8015172:	4b5d      	ldr	r3, [pc, #372]	; (80152e8 <LoRaMacClassBProcessPingSlot+0x1cc>)
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	785b      	ldrb	r3, [r3, #1]
 8015178:	b29a      	uxth	r2, r3
 801517a:	463b      	mov	r3, r7
 801517c:	f7ff fa7e 	bl	801467c <CalcNextSlotTime>
 8015180:	4603      	mov	r3, r0
 8015182:	2b00      	cmp	r3, #0
 8015184:	f000 80a8 	beq.w	80152d8 <LoRaMacClassBProcessPingSlot+0x1bc>
            {
                if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 )
 8015188:	4b56      	ldr	r3, [pc, #344]	; (80152e4 <LoRaMacClassBProcessPingSlot+0x1c8>)
 801518a:	7b1b      	ldrb	r3, [r3, #12]
 801518c:	f003 0302 	and.w	r3, r3, #2
 8015190:	b2db      	uxtb	r3, r3
 8015192:	2b00      	cmp	r3, #0
 8015194:	d023      	beq.n	80151de <LoRaMacClassBProcessPingSlot+0xc2>
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    // Compute the symbol timeout. Apply it only, if the beacon is acquired
                    // Otherwise, take the enlargement of the symbols into account.
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8015196:	4b53      	ldr	r3, [pc, #332]	; (80152e4 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8015198:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801519c:	7818      	ldrb	r0, [r3, #0]
                                                     ClassBNvm->PingSlotCtx.Datarate,
 801519e:	4b52      	ldr	r3, [pc, #328]	; (80152e8 <LoRaMacClassBProcessPingSlot+0x1cc>)
 80151a0:	681b      	ldr	r3, [r3, #0]
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 80151a2:	f993 1008 	ldrsb.w	r1, [r3, #8]
                                                     Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 80151a6:	4b4f      	ldr	r3, [pc, #316]	; (80152e4 <LoRaMacClassBProcessPingSlot+0x1c8>)
 80151a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 80151ac:	791a      	ldrb	r2, [r3, #4]
                                                     Ctx.LoRaMacClassBParams.LoRaMacParams->SystemMaxRxError,
 80151ae:	4b4d      	ldr	r3, [pc, #308]	; (80152e4 <LoRaMacClassBProcessPingSlot+0x1c8>)
 80151b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	4c4e      	ldr	r4, [pc, #312]	; (80152f0 <LoRaMacClassBProcessPingSlot+0x1d4>)
 80151b8:	9400      	str	r4, [sp, #0]
 80151ba:	f002 fe48 	bl	8017e4e <RegionComputeRxWindowParameters>
                                                     ClassBNvm->PingSlotCtx.Datarate,
                                                     Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
                                                     maxRxError,
                                                     &pingSlotRxConfig );
#endif /* LORAMAC_VERSION */
                    Ctx.PingSlotCtx.SymbolTimeout = pingSlotRxConfig.WindowTimeout;
 80151be:	4b4c      	ldr	r3, [pc, #304]	; (80152f0 <LoRaMacClassBProcessPingSlot+0x1d4>)
 80151c0:	689b      	ldr	r3, [r3, #8]
 80151c2:	b29a      	uxth	r2, r3
 80151c4:	4b47      	ldr	r3, [pc, #284]	; (80152e4 <LoRaMacClassBProcessPingSlot+0x1c8>)
 80151c6:	80da      	strh	r2, [r3, #6]

                    if( ( int32_t )pingSlotTime > pingSlotRxConfig.WindowOffset )
 80151c8:	4b49      	ldr	r3, [pc, #292]	; (80152f0 <LoRaMacClassBProcessPingSlot+0x1d4>)
 80151ca:	68db      	ldr	r3, [r3, #12]
 80151cc:	683a      	ldr	r2, [r7, #0]
 80151ce:	4293      	cmp	r3, r2
 80151d0:	da05      	bge.n	80151de <LoRaMacClassBProcessPingSlot+0xc2>
                    {// Apply the window offset
                        pingSlotTime += pingSlotRxConfig.WindowOffset;
 80151d2:	4b47      	ldr	r3, [pc, #284]	; (80152f0 <LoRaMacClassBProcessPingSlot+0x1d4>)
 80151d4:	68db      	ldr	r3, [r3, #12]
 80151d6:	461a      	mov	r2, r3
 80151d8:	683b      	ldr	r3, [r7, #0]
 80151da:	4413      	add	r3, r2
 80151dc:	603b      	str	r3, [r7, #0]
                    }
                }

                // Start the timer if the ping slot time is in range
                Ctx.PingSlotState = PINGSLOT_STATE_IDLE;
 80151de:	4b41      	ldr	r3, [pc, #260]	; (80152e4 <LoRaMacClassBProcessPingSlot+0x1c8>)
 80151e0:	2202      	movs	r2, #2
 80151e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                TimerSetValue( &Ctx.PingSlotTimer, pingSlotTime );
 80151e6:	683b      	ldr	r3, [r7, #0]
 80151e8:	4619      	mov	r1, r3
 80151ea:	4842      	ldr	r0, [pc, #264]	; (80152f4 <LoRaMacClassBProcessPingSlot+0x1d8>)
 80151ec:	f009 fb1e 	bl	801e82c <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.PingSlotTimer );
 80151f0:	4840      	ldr	r0, [pc, #256]	; (80152f4 <LoRaMacClassBProcessPingSlot+0x1d8>)
 80151f2:	f009 fa3d 	bl	801e670 <UTIL_TIMER_Start>
            }
            break;
 80151f6:	e06f      	b.n	80152d8 <LoRaMacClassBProcessPingSlot+0x1bc>
        }
        case PINGSLOT_STATE_IDLE:
        {
            uint32_t frequency = ClassBNvm->PingSlotCtx.Frequency;
 80151f8:	4b3b      	ldr	r3, [pc, #236]	; (80152e8 <LoRaMacClassBProcessPingSlot+0x1cc>)
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	685b      	ldr	r3, [r3, #4]
 80151fe:	607b      	str	r3, [r7, #4]

            // Apply a custom frequency if the following bit is set
            if( ClassBNvm->PingSlotCtx.Ctrl.CustomFreq == 0 )
 8015200:	4b39      	ldr	r3, [pc, #228]	; (80152e8 <LoRaMacClassBProcessPingSlot+0x1cc>)
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	781b      	ldrb	r3, [r3, #0]
 8015206:	f003 0302 	and.w	r3, r3, #2
 801520a:	b2db      	uxtb	r3, r3
 801520c:	2b00      	cmp	r3, #0
 801520e:	d10b      	bne.n	8015228 <LoRaMacClassBProcessPingSlot+0x10c>
            {
                // Restore floor plan
                frequency = CalcDownlinkChannelAndFrequency( *Ctx.LoRaMacClassBParams.LoRaMacDevAddr, Ctx.BeaconCtx.BeaconTime.Seconds,
 8015210:	4b34      	ldr	r3, [pc, #208]	; (80152e4 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8015212:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015216:	6818      	ldr	r0, [r3, #0]
 8015218:	4b32      	ldr	r3, [pc, #200]	; (80152e4 <LoRaMacClassBProcessPingSlot+0x1c8>)
 801521a:	6919      	ldr	r1, [r3, #16]
 801521c:	2300      	movs	r3, #0
 801521e:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 8015222:	f7ff f927 	bl	8014474 <CalcDownlinkChannelAndFrequency>
 8015226:	6078      	str	r0, [r7, #4]
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Open the ping slot window only, if there is no multicast ping slot
            // open. Multicast ping slots have always priority
            if( Ctx.MulticastSlotState != PINGSLOT_STATE_RX )
 8015228:	4b2e      	ldr	r3, [pc, #184]	; (80152e4 <LoRaMacClassBProcessPingSlot+0x1c8>)
 801522a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801522e:	2b03      	cmp	r3, #3
 8015230:	d041      	beq.n	80152b6 <LoRaMacClassBProcessPingSlot+0x19a>
            {
                Ctx.PingSlotState = PINGSLOT_STATE_RX;
 8015232:	4b2c      	ldr	r3, [pc, #176]	; (80152e4 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8015234:	2203      	movs	r2, #3
 8015236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

                pingSlotRxConfig.Datarate = ClassBNvm->PingSlotCtx.Datarate;
 801523a:	4b2b      	ldr	r3, [pc, #172]	; (80152e8 <LoRaMacClassBProcessPingSlot+0x1cc>)
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015242:	4b2b      	ldr	r3, [pc, #172]	; (80152f0 <LoRaMacClassBProcessPingSlot+0x1d4>)
 8015244:	705a      	strb	r2, [r3, #1]
                pingSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 8015246:	4b27      	ldr	r3, [pc, #156]	; (80152e4 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8015248:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801524c:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8015250:	4b27      	ldr	r3, [pc, #156]	; (80152f0 <LoRaMacClassBProcessPingSlot+0x1d4>)
 8015252:	741a      	strb	r2, [r3, #16]
                pingSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport; /* ST_WORKAROUND: keep repeater feature */
 8015254:	4b23      	ldr	r3, [pc, #140]	; (80152e4 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8015256:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801525a:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 801525e:	4b24      	ldr	r3, [pc, #144]	; (80152f0 <LoRaMacClassBProcessPingSlot+0x1d4>)
 8015260:	745a      	strb	r2, [r3, #17]
                pingSlotRxConfig.Frequency = frequency;
 8015262:	4a23      	ldr	r2, [pc, #140]	; (80152f0 <LoRaMacClassBProcessPingSlot+0x1d4>)
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	6053      	str	r3, [r2, #4]
                pingSlotRxConfig.RxContinuous = false;
 8015268:	4b21      	ldr	r3, [pc, #132]	; (80152f0 <LoRaMacClassBProcessPingSlot+0x1d4>)
 801526a:	2200      	movs	r2, #0
 801526c:	749a      	strb	r2, [r3, #18]
                pingSlotRxConfig.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 801526e:	4b20      	ldr	r3, [pc, #128]	; (80152f0 <LoRaMacClassBProcessPingSlot+0x1d4>)
 8015270:	2204      	movs	r2, #4
 8015272:	74da      	strb	r2, [r3, #19]

                RegionRxConfig( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &pingSlotRxConfig, ( int8_t* )&Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 8015274:	4b1b      	ldr	r3, [pc, #108]	; (80152e4 <LoRaMacClassBProcessPingSlot+0x1c8>)
 8015276:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801527a:	7818      	ldrb	r0, [r3, #0]
 801527c:	4b19      	ldr	r3, [pc, #100]	; (80152e4 <LoRaMacClassBProcessPingSlot+0x1c8>)
 801527e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015282:	3304      	adds	r3, #4
 8015284:	461a      	mov	r2, r3
 8015286:	491a      	ldr	r1, [pc, #104]	; (80152f0 <LoRaMacClassBProcessPingSlot+0x1d4>)
 8015288:	f002 fdfb 	bl	8017e82 <RegionRxConfig>

                if( pingSlotRxConfig.RxContinuous == false )
 801528c:	4b18      	ldr	r3, [pc, #96]	; (80152f0 <LoRaMacClassBProcessPingSlot+0x1d4>)
 801528e:	7c9b      	ldrb	r3, [r3, #18]
 8015290:	f083 0301 	eor.w	r3, r3, #1
 8015294:	b2db      	uxtb	r3, r3
 8015296:	2b00      	cmp	r3, #0
 8015298:	d008      	beq.n	80152ac <LoRaMacClassBProcessPingSlot+0x190>
                {
                    Radio.Rx( Ctx.LoRaMacClassBParams.LoRaMacParams->MaxRxWindow );
 801529a:	4b17      	ldr	r3, [pc, #92]	; (80152f8 <LoRaMacClassBProcessPingSlot+0x1dc>)
 801529c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801529e:	4a11      	ldr	r2, [pc, #68]	; (80152e4 <LoRaMacClassBProcessPingSlot+0x1c8>)
 80152a0:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 80152a4:	6892      	ldr	r2, [r2, #8]
 80152a6:	4610      	mov	r0, r2
 80152a8:	4798      	blx	r3
                Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
                TimerStart( &Ctx.PingSlotTimer );
            }
#endif /* LORAMAC_VERSION */
            break;
 80152aa:	e016      	b.n	80152da <LoRaMacClassBProcessPingSlot+0x1be>
                    Radio.Rx( 0 ); // Continuous mode
 80152ac:	4b12      	ldr	r3, [pc, #72]	; (80152f8 <LoRaMacClassBProcessPingSlot+0x1dc>)
 80152ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80152b0:	2000      	movs	r0, #0
 80152b2:	4798      	blx	r3
            break;
 80152b4:	e011      	b.n	80152da <LoRaMacClassBProcessPingSlot+0x1be>
                Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 80152b6:	4b0b      	ldr	r3, [pc, #44]	; (80152e4 <LoRaMacClassBProcessPingSlot+0x1c8>)
 80152b8:	2200      	movs	r2, #0
 80152ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 80152be:	211e      	movs	r1, #30
 80152c0:	480c      	ldr	r0, [pc, #48]	; (80152f4 <LoRaMacClassBProcessPingSlot+0x1d8>)
 80152c2:	f009 fab3 	bl	801e82c <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.PingSlotTimer );
 80152c6:	480b      	ldr	r0, [pc, #44]	; (80152f4 <LoRaMacClassBProcessPingSlot+0x1d8>)
 80152c8:	f009 f9d2 	bl	801e670 <UTIL_TIMER_Start>
            break;
 80152cc:	e005      	b.n	80152da <LoRaMacClassBProcessPingSlot+0x1be>
        }
        default:
        {
            Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 80152ce:	4b05      	ldr	r3, [pc, #20]	; (80152e4 <LoRaMacClassBProcessPingSlot+0x1c8>)
 80152d0:	2200      	movs	r2, #0
 80152d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            break;
 80152d6:	e000      	b.n	80152da <LoRaMacClassBProcessPingSlot+0x1be>
            break;
 80152d8:	bf00      	nop
        }
    }
}
 80152da:	bf00      	nop
 80152dc:	370c      	adds	r7, #12
 80152de:	46bd      	mov	sp, r7
 80152e0:	bd90      	pop	{r4, r7, pc}
 80152e2:	bf00      	nop
 80152e4:	200020b0 	.word	0x200020b0
 80152e8:	20002164 	.word	0x20002164
 80152ec:	200020b4 	.word	0x200020b4
 80152f0:	20002168 	.word	0x20002168
 80152f4:	2000210c 	.word	0x2000210c
 80152f8:	0801fbe4 	.word	0x0801fbe4

080152fc <LoRaMacClassBMulticastSlotTimerEvent>:
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80152fc:	b580      	push	{r7, lr}
 80152fe:	b082      	sub	sp, #8
 8015300:	af00      	add	r7, sp, #0
 8015302:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;
 8015304:	4a08      	ldr	r2, [pc, #32]	; (8015328 <LoRaMacClassBMulticastSlotTimerEvent+0x2c>)
 8015306:	7813      	ldrb	r3, [r2, #0]
 8015308:	f043 0304 	orr.w	r3, r3, #4
 801530c:	7013      	strb	r3, [r2, #0]

    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 801530e:	4b07      	ldr	r3, [pc, #28]	; (801532c <LoRaMacClassBMulticastSlotTimerEvent+0x30>)
 8015310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015314:	2b00      	cmp	r3, #0
 8015316:	d003      	beq.n	8015320 <LoRaMacClassBMulticastSlotTimerEvent+0x24>
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 8015318:	4b04      	ldr	r3, [pc, #16]	; (801532c <LoRaMacClassBMulticastSlotTimerEvent+0x30>)
 801531a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801531e:	4798      	blx	r3
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015320:	bf00      	nop
 8015322:	3708      	adds	r7, #8
 8015324:	46bd      	mov	sp, r7
 8015326:	bd80      	pop	{r7, pc}
 8015328:	200020ac 	.word	0x200020ac
 801532c:	200020b0 	.word	0x200020b0

08015330 <LoRaMacClassBProcessMulticastSlot>:

#if ( LORAMAC_CLASSB_ENABLED == 1 )
static void LoRaMacClassBProcessMulticastSlot( void )
{
 8015330:	b5b0      	push	{r4, r5, r7, lr}
 8015332:	b088      	sub	sp, #32
 8015334:	af02      	add	r7, sp, #8
    static RxConfigParams_t multicastSlotRxConfig;
    TimerTime_t multicastSlotTime = 0;
 8015336:	2300      	movs	r3, #0
 8015338:	617b      	str	r3, [r7, #20]
    TimerTime_t slotTime = 0;
 801533a:	2300      	movs	r3, #0
 801533c:	607b      	str	r3, [r7, #4]
    MulticastCtx_t *cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 801533e:	4b96      	ldr	r3, [pc, #600]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8015340:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015344:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint32_t maxRxError = 0;
    bool slotHasPriority = false;
#endif /* LORAMAC_VERSION */

    if( cur == NULL )
 8015346:	693b      	ldr	r3, [r7, #16]
 8015348:	2b00      	cmp	r3, #0
 801534a:	f000 811c 	beq.w	8015586 <LoRaMacClassBProcessMulticastSlot+0x256>
    {
        return;
    }

    if( Ctx.MulticastSlotState == PINGSLOT_STATE_RX )
 801534e:	4b92      	ldr	r3, [pc, #584]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8015350:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015354:	2b03      	cmp	r3, #3
 8015356:	f000 8118 	beq.w	801558a <LoRaMacClassBProcessMulticastSlot+0x25a>
    {
        // A multicast slot is already open
        return;
    }

    switch( Ctx.MulticastSlotState )
 801535a:	4b8f      	ldr	r3, [pc, #572]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801535c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015360:	2b02      	cmp	r3, #2
 8015362:	f000 8092 	beq.w	801548a <LoRaMacClassBProcessMulticastSlot+0x15a>
 8015366:	2b02      	cmp	r3, #2
 8015368:	f300 8108 	bgt.w	801557c <LoRaMacClassBProcessMulticastSlot+0x24c>
 801536c:	2b00      	cmp	r3, #0
 801536e:	d002      	beq.n	8015376 <LoRaMacClassBProcessMulticastSlot+0x46>
 8015370:	2b01      	cmp	r3, #1
 8015372:	d021      	beq.n	80153b8 <LoRaMacClassBProcessMulticastSlot+0x88>
 8015374:	e102      	b.n	801557c <LoRaMacClassBProcessMulticastSlot+0x24c>
    {
        case PINGSLOT_STATE_CALC_PING_OFFSET:
        {
            // Compute all offsets for every multicast slots
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
 8015376:	2300      	movs	r3, #0
 8015378:	73fb      	strb	r3, [r7, #15]
 801537a:	e016      	b.n	80153aa <LoRaMacClassBProcessMulticastSlot+0x7a>
            {
                ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 801537c:	4b86      	ldr	r3, [pc, #536]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801537e:	691b      	ldr	r3, [r3, #16]
 8015380:	2200      	movs	r2, #0
 8015382:	461c      	mov	r4, r3
 8015384:	4615      	mov	r5, r2
 8015386:	693b      	ldr	r3, [r7, #16]
 8015388:	685a      	ldr	r2, [r3, #4]
 801538a:	693b      	ldr	r3, [r7, #16]
 801538c:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 801538e:	693b      	ldr	r3, [r7, #16]
 8015390:	3328      	adds	r3, #40	; 0x28
 8015392:	9300      	str	r3, [sp, #0]
 8015394:	460b      	mov	r3, r1
 8015396:	4620      	mov	r0, r4
 8015398:	4629      	mov	r1, r5
 801539a:	f7fe ffeb 	bl	8014374 <ComputePingOffset>
                                   cur->ChannelParams.Address,
                                   cur->PingPeriod,
                                   &( cur->PingOffset ) );
                cur++;
 801539e:	693b      	ldr	r3, [r7, #16]
 80153a0:	332c      	adds	r3, #44	; 0x2c
 80153a2:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
 80153a4:	7bfb      	ldrb	r3, [r7, #15]
 80153a6:	3301      	adds	r3, #1
 80153a8:	73fb      	strb	r3, [r7, #15]
 80153aa:	7bfb      	ldrb	r3, [r7, #15]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d0e5      	beq.n	801537c <LoRaMacClassBProcessMulticastSlot+0x4c>
            }
            Ctx.MulticastSlotState = PINGSLOT_STATE_SET_TIMER;
 80153b0:	4b79      	ldr	r3, [pc, #484]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80153b2:	2201      	movs	r2, #1
 80153b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }
            // Intentional fall through
        case PINGSLOT_STATE_SET_TIMER:
        {
            cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 80153b8:	4b77      	ldr	r3, [pc, #476]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80153ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80153be:	613b      	str	r3, [r7, #16]
            Ctx.PingSlotCtx.NextMulticastChannel = NULL;
 80153c0:	4b75      	ldr	r3, [pc, #468]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80153c2:	2200      	movs	r2, #0
 80153c4:	609a      	str	r2, [r3, #8]

            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80153c6:	2300      	movs	r3, #0
 80153c8:	73bb      	strb	r3, [r7, #14]
 80153ca:	e01f      	b.n	801540c <LoRaMacClassBProcessMulticastSlot+0xdc>
            {
                // Calculate the next slot time for every multicast slot
                if( CalcNextSlotTime( cur->PingOffset, cur->PingPeriod, cur->PingNb, &slotTime ) == true )
 80153cc:	693b      	ldr	r3, [r7, #16]
 80153ce:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 80153d0:	693b      	ldr	r3, [r7, #16]
 80153d2:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 80153d4:	693b      	ldr	r3, [r7, #16]
 80153d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80153da:	b29a      	uxth	r2, r3
 80153dc:	1d3b      	adds	r3, r7, #4
 80153de:	f7ff f94d 	bl	801467c <CalcNextSlotTime>
 80153e2:	4603      	mov	r3, r0
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d00b      	beq.n	8015400 <LoRaMacClassBProcessMulticastSlot+0xd0>
                {
                    if( ( multicastSlotTime == 0 ) || ( multicastSlotTime > slotTime ) )
 80153e8:	697b      	ldr	r3, [r7, #20]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d003      	beq.n	80153f6 <LoRaMacClassBProcessMulticastSlot+0xc6>
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	697a      	ldr	r2, [r7, #20]
 80153f2:	429a      	cmp	r2, r3
 80153f4:	d904      	bls.n	8015400 <LoRaMacClassBProcessMulticastSlot+0xd0>
                    {
                        // Update the slot time and the next multicast channel
                        multicastSlotTime = slotTime;
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	617b      	str	r3, [r7, #20]
                        Ctx.PingSlotCtx.NextMulticastChannel = cur;
 80153fa:	4a67      	ldr	r2, [pc, #412]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80153fc:	693b      	ldr	r3, [r7, #16]
 80153fe:	6093      	str	r3, [r2, #8]
                    }
                }
                cur++;
 8015400:	693b      	ldr	r3, [r7, #16]
 8015402:	332c      	adds	r3, #44	; 0x2c
 8015404:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015406:	7bbb      	ldrb	r3, [r7, #14]
 8015408:	3301      	adds	r3, #1
 801540a:	73bb      	strb	r3, [r7, #14]
 801540c:	7bbb      	ldrb	r3, [r7, #14]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d0dc      	beq.n	80153cc <LoRaMacClassBProcessMulticastSlot+0x9c>
            }

            // Schedule the next multicast slot
            if( Ctx.PingSlotCtx.NextMulticastChannel != NULL )
 8015412:	4b61      	ldr	r3, [pc, #388]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8015414:	689b      	ldr	r3, [r3, #8]
 8015416:	2b00      	cmp	r3, #0
 8015418:	f000 80b9 	beq.w	801558e <LoRaMacClassBProcessMulticastSlot+0x25e>
            {
                if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 )
 801541c:	4b5e      	ldr	r3, [pc, #376]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801541e:	7b1b      	ldrb	r3, [r3, #12]
 8015420:	f003 0302 	and.w	r3, r3, #2
 8015424:	b2db      	uxtb	r3, r3
 8015426:	2b00      	cmp	r3, #0
 8015428:	d018      	beq.n	801545c <LoRaMacClassBProcessMulticastSlot+0x12c>
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 801542a:	4b5b      	ldr	r3, [pc, #364]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801542c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015430:	7818      	ldrb	r0, [r3, #0]
                                                    ClassBNvm->PingSlotCtx.Datarate,
 8015432:	4b5a      	ldr	r3, [pc, #360]	; (801559c <LoRaMacClassBProcessMulticastSlot+0x26c>)
 8015434:	681b      	ldr	r3, [r3, #0]
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8015436:	f993 1008 	ldrsb.w	r1, [r3, #8]
                                                    Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
 801543a:	4b57      	ldr	r3, [pc, #348]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801543c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8015440:	791a      	ldrb	r2, [r3, #4]
                                                    Ctx.LoRaMacClassBParams.LoRaMacParams->SystemMaxRxError,
 8015442:	4b55      	ldr	r3, [pc, #340]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8015444:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	4c55      	ldr	r4, [pc, #340]	; (80155a0 <LoRaMacClassBProcessMulticastSlot+0x270>)
 801544c:	9400      	str	r4, [sp, #0]
 801544e:	f002 fcfe 	bl	8017e4e <RegionComputeRxWindowParameters>
                                                    ClassBNvm->PingSlotCtx.Datarate,
                                                    Ctx.LoRaMacClassBParams.LoRaMacParams->MinRxSymbols,
                                                    maxRxError,
                                                    &multicastSlotRxConfig );
#endif /* LORAMAC_VERSION */
                    Ctx.PingSlotCtx.SymbolTimeout = multicastSlotRxConfig.WindowTimeout;
 8015452:	4b53      	ldr	r3, [pc, #332]	; (80155a0 <LoRaMacClassBProcessMulticastSlot+0x270>)
 8015454:	689b      	ldr	r3, [r3, #8]
 8015456:	b29a      	uxth	r2, r3
 8015458:	4b4f      	ldr	r3, [pc, #316]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801545a:	80da      	strh	r2, [r3, #6]
                }

                if( ( int32_t )multicastSlotTime > multicastSlotRxConfig.WindowOffset )
 801545c:	4b50      	ldr	r3, [pc, #320]	; (80155a0 <LoRaMacClassBProcessMulticastSlot+0x270>)
 801545e:	68da      	ldr	r2, [r3, #12]
 8015460:	697b      	ldr	r3, [r7, #20]
 8015462:	429a      	cmp	r2, r3
 8015464:	da05      	bge.n	8015472 <LoRaMacClassBProcessMulticastSlot+0x142>
                {// Apply the window offset
                    multicastSlotTime += multicastSlotRxConfig.WindowOffset;
 8015466:	4b4e      	ldr	r3, [pc, #312]	; (80155a0 <LoRaMacClassBProcessMulticastSlot+0x270>)
 8015468:	68db      	ldr	r3, [r3, #12]
 801546a:	461a      	mov	r2, r3
 801546c:	697b      	ldr	r3, [r7, #20]
 801546e:	4413      	add	r3, r2
 8015470:	617b      	str	r3, [r7, #20]
                }

                // Start the timer if the ping slot time is in range
                Ctx.MulticastSlotState = PINGSLOT_STATE_IDLE;
 8015472:	4b49      	ldr	r3, [pc, #292]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8015474:	2202      	movs	r2, #2
 8015476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                TimerSetValue( &Ctx.MulticastSlotTimer, multicastSlotTime );
 801547a:	6979      	ldr	r1, [r7, #20]
 801547c:	4849      	ldr	r0, [pc, #292]	; (80155a4 <LoRaMacClassBProcessMulticastSlot+0x274>)
 801547e:	f009 f9d5 	bl	801e82c <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.MulticastSlotTimer );
 8015482:	4848      	ldr	r0, [pc, #288]	; (80155a4 <LoRaMacClassBProcessMulticastSlot+0x274>)
 8015484:	f009 f8f4 	bl	801e670 <UTIL_TIMER_Start>
            }
            break;
 8015488:	e081      	b.n	801558e <LoRaMacClassBProcessMulticastSlot+0x25e>
        }
        case PINGSLOT_STATE_IDLE:
        {
            uint32_t frequency = 0;
 801548a:	2300      	movs	r3, #0
 801548c:	60bb      	str	r3, [r7, #8]

            // Verify if the multicast channel is valid
            if( Ctx.PingSlotCtx.NextMulticastChannel == NULL )
 801548e:	4b42      	ldr	r3, [pc, #264]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8015490:	689b      	ldr	r3, [r3, #8]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d10b      	bne.n	80154ae <LoRaMacClassBProcessMulticastSlot+0x17e>
            {
                Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8015496:	4b40      	ldr	r3, [pc, #256]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8015498:	2200      	movs	r2, #0
 801549a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                TimerSetValue( &Ctx.MulticastSlotTimer, 1 );
 801549e:	2101      	movs	r1, #1
 80154a0:	4840      	ldr	r0, [pc, #256]	; (80155a4 <LoRaMacClassBProcessMulticastSlot+0x274>)
 80154a2:	f009 f9c3 	bl	801e82c <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.MulticastSlotTimer );
 80154a6:	483f      	ldr	r0, [pc, #252]	; (80155a4 <LoRaMacClassBProcessMulticastSlot+0x274>)
 80154a8:	f009 f8e2 	bl	801e670 <UTIL_TIMER_Start>
                break;
 80154ac:	e070      	b.n	8015590 <LoRaMacClassBProcessMulticastSlot+0x260>
            }

            // Apply frequency
            frequency = Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.RxParams.ClassB.Frequency;
 80154ae:	4b3a      	ldr	r3, [pc, #232]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80154b0:	689b      	ldr	r3, [r3, #8]
 80154b2:	699b      	ldr	r3, [r3, #24]
 80154b4:	60bb      	str	r3, [r7, #8]

            // Restore the floor plan frequency if there is no individual frequency assigned
            if( frequency == 0 )
 80154b6:	68bb      	ldr	r3, [r7, #8]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d10a      	bne.n	80154d2 <LoRaMacClassBProcessMulticastSlot+0x1a2>
            {
                // Restore floor plan
                frequency = CalcDownlinkChannelAndFrequency( Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.Address,
 80154bc:	4b36      	ldr	r3, [pc, #216]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80154be:	689b      	ldr	r3, [r3, #8]
 80154c0:	6858      	ldr	r0, [r3, #4]
 80154c2:	4b35      	ldr	r3, [pc, #212]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80154c4:	6919      	ldr	r1, [r3, #16]
 80154c6:	2300      	movs	r3, #0
 80154c8:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 80154cc:	f7fe ffd2 	bl	8014474 <CalcDownlinkChannelAndFrequency>
 80154d0:	60b8      	str	r0, [r7, #8]
                                                             Ctx.BeaconCtx.BeaconTime.Seconds, CLASSB_BEACON_INTERVAL, false );
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Ctx.MulticastSlotState = PINGSLOT_STATE_RX;
 80154d2:	4b31      	ldr	r3, [pc, #196]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80154d4:	2203      	movs	r2, #3
 80154d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

            multicastSlotRxConfig.Datarate = Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.RxParams.ClassB.Datarate;
 80154da:	4b2f      	ldr	r3, [pc, #188]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80154dc:	689b      	ldr	r3, [r3, #8]
 80154de:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80154e2:	4b2f      	ldr	r3, [pc, #188]	; (80155a0 <LoRaMacClassBProcessMulticastSlot+0x270>)
 80154e4:	705a      	strb	r2, [r3, #1]
            multicastSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 80154e6:	4b2c      	ldr	r3, [pc, #176]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80154e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80154ec:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80154f0:	4b2b      	ldr	r3, [pc, #172]	; (80155a0 <LoRaMacClassBProcessMulticastSlot+0x270>)
 80154f2:	741a      	strb	r2, [r3, #16]
            multicastSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport; /* ST_WORKAROUND: keep repeater feature */
 80154f4:	4b28      	ldr	r3, [pc, #160]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 80154f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80154fa:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80154fe:	4b28      	ldr	r3, [pc, #160]	; (80155a0 <LoRaMacClassBProcessMulticastSlot+0x270>)
 8015500:	745a      	strb	r2, [r3, #17]
            multicastSlotRxConfig.Frequency = frequency;
 8015502:	4a27      	ldr	r2, [pc, #156]	; (80155a0 <LoRaMacClassBProcessMulticastSlot+0x270>)
 8015504:	68bb      	ldr	r3, [r7, #8]
 8015506:	6053      	str	r3, [r2, #4]
            multicastSlotRxConfig.RxContinuous = false;
 8015508:	4b25      	ldr	r3, [pc, #148]	; (80155a0 <LoRaMacClassBProcessMulticastSlot+0x270>)
 801550a:	2200      	movs	r2, #0
 801550c:	749a      	strb	r2, [r3, #18]
            multicastSlotRxConfig.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 801550e:	4b24      	ldr	r3, [pc, #144]	; (80155a0 <LoRaMacClassBProcessMulticastSlot+0x270>)
 8015510:	2205      	movs	r2, #5
 8015512:	74da      	strb	r2, [r3, #19]

            RegionRxConfig( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &multicastSlotRxConfig, ( int8_t* )&Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 8015514:	4b20      	ldr	r3, [pc, #128]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8015516:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801551a:	7818      	ldrb	r0, [r3, #0]
 801551c:	4b1e      	ldr	r3, [pc, #120]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801551e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015522:	3304      	adds	r3, #4
 8015524:	461a      	mov	r2, r3
 8015526:	491e      	ldr	r1, [pc, #120]	; (80155a0 <LoRaMacClassBProcessMulticastSlot+0x270>)
 8015528:	f002 fcab 	bl	8017e82 <RegionRxConfig>

            if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 801552c:	4b1a      	ldr	r3, [pc, #104]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801552e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015532:	2b03      	cmp	r3, #3
 8015534:	d10d      	bne.n	8015552 <LoRaMacClassBProcessMulticastSlot+0x222>
            {
                // Close ping slot window, if necessary. Multicast slots have priority
                Radio.Standby( );
 8015536:	4b1c      	ldr	r3, [pc, #112]	; (80155a8 <LoRaMacClassBProcessMulticastSlot+0x278>)
 8015538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801553a:	4798      	blx	r3
                Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 801553c:	4b16      	ldr	r3, [pc, #88]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801553e:	2200      	movs	r2, #0
 8015540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 8015544:	211e      	movs	r1, #30
 8015546:	4819      	ldr	r0, [pc, #100]	; (80155ac <LoRaMacClassBProcessMulticastSlot+0x27c>)
 8015548:	f009 f970 	bl	801e82c <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.PingSlotTimer );
 801554c:	4817      	ldr	r0, [pc, #92]	; (80155ac <LoRaMacClassBProcessMulticastSlot+0x27c>)
 801554e:	f009 f88f 	bl	801e670 <UTIL_TIMER_Start>
            }

            if( multicastSlotRxConfig.RxContinuous == false )
 8015552:	4b13      	ldr	r3, [pc, #76]	; (80155a0 <LoRaMacClassBProcessMulticastSlot+0x270>)
 8015554:	7c9b      	ldrb	r3, [r3, #18]
 8015556:	f083 0301 	eor.w	r3, r3, #1
 801555a:	b2db      	uxtb	r3, r3
 801555c:	2b00      	cmp	r3, #0
 801555e:	d008      	beq.n	8015572 <LoRaMacClassBProcessMulticastSlot+0x242>
            {
                Radio.Rx( Ctx.LoRaMacClassBParams.LoRaMacParams->MaxRxWindow );
 8015560:	4b11      	ldr	r3, [pc, #68]	; (80155a8 <LoRaMacClassBProcessMulticastSlot+0x278>)
 8015562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015564:	4a0c      	ldr	r2, [pc, #48]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 8015566:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 801556a:	6892      	ldr	r2, [r2, #8]
 801556c:	4610      	mov	r0, r2
 801556e:	4798      	blx	r3
                Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
                TimerSetValue( &Ctx.MulticastSlotTimer, CLASSB_PING_SLOT_WINDOW );
                TimerStart( &Ctx.MulticastSlotTimer );
            }
#endif /* LORAMAC_VERSION */
            break;
 8015570:	e00e      	b.n	8015590 <LoRaMacClassBProcessMulticastSlot+0x260>
                Radio.Rx( 0 ); // Continuous mode
 8015572:	4b0d      	ldr	r3, [pc, #52]	; (80155a8 <LoRaMacClassBProcessMulticastSlot+0x278>)
 8015574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015576:	2000      	movs	r0, #0
 8015578:	4798      	blx	r3
            break;
 801557a:	e009      	b.n	8015590 <LoRaMacClassBProcessMulticastSlot+0x260>
        }
        default:
        {
            Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 801557c:	4b06      	ldr	r3, [pc, #24]	; (8015598 <LoRaMacClassBProcessMulticastSlot+0x268>)
 801557e:	2200      	movs	r2, #0
 8015580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            break;
 8015584:	e004      	b.n	8015590 <LoRaMacClassBProcessMulticastSlot+0x260>
        return;
 8015586:	bf00      	nop
 8015588:	e002      	b.n	8015590 <LoRaMacClassBProcessMulticastSlot+0x260>
        return;
 801558a:	bf00      	nop
 801558c:	e000      	b.n	8015590 <LoRaMacClassBProcessMulticastSlot+0x260>
            break;
 801558e:	bf00      	nop
        }
    }
}
 8015590:	3718      	adds	r7, #24
 8015592:	46bd      	mov	sp, r7
 8015594:	bdb0      	pop	{r4, r5, r7, pc}
 8015596:	bf00      	nop
 8015598:	200020b0 	.word	0x200020b0
 801559c:	20002164 	.word	0x20002164
 80155a0:	2000217c 	.word	0x2000217c
 80155a4:	20002124 	.word	0x20002124
 80155a8:	0801fbe4 	.word	0x0801fbe4
 80155ac:	2000210c 	.word	0x2000210c

080155b0 <LoRaMacClassBRxBeacon>:
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80155b0:	b590      	push	{r4, r7, lr}
 80155b2:	b095      	sub	sp, #84	; 0x54
 80155b4:	af04      	add	r7, sp, #16
 80155b6:	6078      	str	r0, [r7, #4]
 80155b8:	460b      	mov	r3, r1
 80155ba:	807b      	strh	r3, [r7, #2]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    bool beaconProcessed = false;
 80155bc:	2300      	movs	r3, #0
 80155be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint16_t crc0 = 0;
 80155c2:	2300      	movs	r3, #0
 80155c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    uint16_t crc1 = 0;
 80155c6:	2300      	movs	r3, #0
 80155c8:	877b      	strh	r3, [r7, #58]	; 0x3a
    uint16_t beaconCrc0 = 0;
 80155ca:	2300      	movs	r3, #0
 80155cc:	873b      	strh	r3, [r7, #56]	; 0x38
    uint16_t beaconCrc1 = 0;
 80155ce:	2300      	movs	r3, #0
 80155d0:	86fb      	strh	r3, [r7, #54]	; 0x36

    getPhy.Attribute = PHY_BEACON_FORMAT;
 80155d2:	2331      	movs	r3, #49	; 0x31
 80155d4:	763b      	strb	r3, [r7, #24]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 80155d6:	4bb0      	ldr	r3, [pc, #704]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 80155d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80155dc:	781b      	ldrb	r3, [r3, #0]
 80155de:	f107 0218 	add.w	r2, r7, #24
 80155e2:	4611      	mov	r1, r2
 80155e4:	4618      	mov	r0, r3
 80155e6:	f002 fbbb 	bl	8017d60 <RegionGetPhyParam>
 80155ea:	4603      	mov	r3, r0
 80155ec:	617b      	str	r3, [r7, #20]

    // Verify if we are in the state where we expect a beacon
    if( ( Ctx.BeaconState == BEACON_STATE_RX ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 80155ee:	4baa      	ldr	r3, [pc, #680]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 80155f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80155f4:	2b09      	cmp	r3, #9
 80155f6:	d007      	beq.n	8015608 <LoRaMacClassBRxBeacon+0x58>
 80155f8:	4ba7      	ldr	r3, [pc, #668]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 80155fa:	7b1b      	ldrb	r3, [r3, #12]
 80155fc:	f003 0310 	and.w	r3, r3, #16
 8015600:	b2db      	uxtb	r3, r3
 8015602:	2b00      	cmp	r3, #0
 8015604:	f000 8142 	beq.w	801588c <LoRaMacClassBRxBeacon+0x2dc>
    {
        if( size == phyParam.BeaconFormat.BeaconSize )
 8015608:	7d3b      	ldrb	r3, [r7, #20]
 801560a:	b29b      	uxth	r3, r3
 801560c:	887a      	ldrh	r2, [r7, #2]
 801560e:	429a      	cmp	r2, r3
 8015610:	f040 812d 	bne.w	801586e <LoRaMacClassBRxBeacon+0x2be>
            // Field: | RFU1 | Time | CRC1 | GwSpecific | RFU2 | CRC2 |
            //
            // Field RFU1 and RFU2 have variable sizes. It depends on the region specific implementation

            // Read CRC1 field from the frame
            beaconCrc0 = ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4] ) & 0x00FF;
 8015614:	7d7b      	ldrb	r3, [r7, #21]
 8015616:	3304      	adds	r3, #4
 8015618:	687a      	ldr	r2, [r7, #4]
 801561a:	4413      	add	r3, r2
 801561c:	781b      	ldrb	r3, [r3, #0]
 801561e:	873b      	strh	r3, [r7, #56]	; 0x38
            beaconCrc0 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 1] << 8 ) & 0xFF00;
 8015620:	7d7b      	ldrb	r3, [r7, #21]
 8015622:	3305      	adds	r3, #5
 8015624:	687a      	ldr	r2, [r7, #4]
 8015626:	4413      	add	r3, r2
 8015628:	781b      	ldrb	r3, [r3, #0]
 801562a:	021b      	lsls	r3, r3, #8
 801562c:	b21a      	sxth	r2, r3
 801562e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8015632:	4313      	orrs	r3, r2
 8015634:	b21b      	sxth	r3, r3
 8015636:	873b      	strh	r3, [r7, #56]	; 0x38
            crc0 = BeaconCrc( payload, phyParam.BeaconFormat.Rfu1Size + 4 );
 8015638:	7d7b      	ldrb	r3, [r7, #21]
 801563a:	b29b      	uxth	r3, r3
 801563c:	3304      	adds	r3, #4
 801563e:	b29b      	uxth	r3, r3
 8015640:	4619      	mov	r1, r3
 8015642:	6878      	ldr	r0, [r7, #4]
 8015644:	f7ff f8a2 	bl	801478c <BeaconCrc>
 8015648:	4603      	mov	r3, r0
 801564a:	87bb      	strh	r3, [r7, #60]	; 0x3c

            // Validate the first crc of the beacon frame
            if( crc0 == beaconCrc0 )
 801564c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801564e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015650:	429a      	cmp	r2, r3
 8015652:	d13b      	bne.n	80156cc <LoRaMacClassBRxBeacon+0x11c>
            {
                // Read Time field from the frame
                Ctx.BeaconCtx.BeaconTime.Seconds  = ( ( uint32_t )payload[phyParam.BeaconFormat.Rfu1Size] ) & 0x000000FF;
 8015654:	7d7b      	ldrb	r3, [r7, #21]
 8015656:	461a      	mov	r2, r3
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	4413      	add	r3, r2
 801565c:	781b      	ldrb	r3, [r3, #0]
 801565e:	461a      	mov	r2, r3
 8015660:	4b8d      	ldr	r3, [pc, #564]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 8015662:	611a      	str	r2, [r3, #16]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 1] << 8 ) ) & 0x0000FF00;
 8015664:	4b8c      	ldr	r3, [pc, #560]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 8015666:	691a      	ldr	r2, [r3, #16]
 8015668:	7d7b      	ldrb	r3, [r7, #21]
 801566a:	3301      	adds	r3, #1
 801566c:	6879      	ldr	r1, [r7, #4]
 801566e:	440b      	add	r3, r1
 8015670:	781b      	ldrb	r3, [r3, #0]
 8015672:	021b      	lsls	r3, r3, #8
 8015674:	b29b      	uxth	r3, r3
 8015676:	4313      	orrs	r3, r2
 8015678:	4a87      	ldr	r2, [pc, #540]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 801567a:	6113      	str	r3, [r2, #16]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 2] << 16 ) ) & 0x00FF0000;
 801567c:	4b86      	ldr	r3, [pc, #536]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 801567e:	691a      	ldr	r2, [r3, #16]
 8015680:	7d7b      	ldrb	r3, [r7, #21]
 8015682:	3302      	adds	r3, #2
 8015684:	6879      	ldr	r1, [r7, #4]
 8015686:	440b      	add	r3, r1
 8015688:	781b      	ldrb	r3, [r3, #0]
 801568a:	041b      	lsls	r3, r3, #16
 801568c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015690:	4313      	orrs	r3, r2
 8015692:	4a81      	ldr	r2, [pc, #516]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 8015694:	6113      	str	r3, [r2, #16]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 3] << 24 ) ) & 0xFF000000;
 8015696:	4b80      	ldr	r3, [pc, #512]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 8015698:	691b      	ldr	r3, [r3, #16]
 801569a:	7d7a      	ldrb	r2, [r7, #21]
 801569c:	3203      	adds	r2, #3
 801569e:	6879      	ldr	r1, [r7, #4]
 80156a0:	440a      	add	r2, r1
 80156a2:	7812      	ldrb	r2, [r2, #0]
 80156a4:	0612      	lsls	r2, r2, #24
 80156a6:	4313      	orrs	r3, r2
 80156a8:	4a7b      	ldr	r2, [pc, #492]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 80156aa:	6113      	str	r3, [r2, #16]
                Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 80156ac:	4b7a      	ldr	r3, [pc, #488]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 80156ae:	2200      	movs	r2, #0
 80156b0:	829a      	strh	r2, [r3, #20]
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Time = Ctx.BeaconCtx.BeaconTime;
 80156b2:	4b79      	ldr	r3, [pc, #484]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 80156b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80156b8:	4a77      	ldr	r2, [pc, #476]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 80156ba:	3308      	adds	r3, #8
 80156bc:	3210      	adds	r2, #16
 80156be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80156c2:	e883 0003 	stmia.w	r3, {r0, r1}
                beaconProcessed = true;
 80156c6:	2301      	movs	r3, #1
 80156c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            }

            // Read CRC2 field from the frame
            beaconCrc1 = ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 7 + phyParam.BeaconFormat.Rfu2Size] ) & 0x00FF;
 80156cc:	7d7b      	ldrb	r3, [r7, #21]
 80156ce:	330d      	adds	r3, #13
 80156d0:	7dba      	ldrb	r2, [r7, #22]
 80156d2:	4413      	add	r3, r2
 80156d4:	461a      	mov	r2, r3
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	4413      	add	r3, r2
 80156da:	781b      	ldrb	r3, [r3, #0]
 80156dc:	86fb      	strh	r3, [r7, #54]	; 0x36
            beaconCrc1 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 7 + phyParam.BeaconFormat.Rfu2Size + 1] << 8 ) & 0xFF00;
 80156de:	7d7b      	ldrb	r3, [r7, #21]
 80156e0:	330d      	adds	r3, #13
 80156e2:	7dba      	ldrb	r2, [r7, #22]
 80156e4:	4413      	add	r3, r2
 80156e6:	3301      	adds	r3, #1
 80156e8:	687a      	ldr	r2, [r7, #4]
 80156ea:	4413      	add	r3, r2
 80156ec:	781b      	ldrb	r3, [r3, #0]
 80156ee:	021b      	lsls	r3, r3, #8
 80156f0:	b21a      	sxth	r2, r3
 80156f2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80156f6:	4313      	orrs	r3, r2
 80156f8:	b21b      	sxth	r3, r3
 80156fa:	86fb      	strh	r3, [r7, #54]	; 0x36
            crc1 = BeaconCrc( &payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2], 7 + phyParam.BeaconFormat.Rfu2Size );
 80156fc:	7d7b      	ldrb	r3, [r7, #21]
 80156fe:	3306      	adds	r3, #6
 8015700:	687a      	ldr	r2, [r7, #4]
 8015702:	441a      	add	r2, r3
 8015704:	7dbb      	ldrb	r3, [r7, #22]
 8015706:	b29b      	uxth	r3, r3
 8015708:	3307      	adds	r3, #7
 801570a:	b29b      	uxth	r3, r3
 801570c:	4619      	mov	r1, r3
 801570e:	4610      	mov	r0, r2
 8015710:	f7ff f83c 	bl	801478c <BeaconCrc>
 8015714:	4603      	mov	r3, r0
 8015716:	877b      	strh	r3, [r7, #58]	; 0x3a

            // Validate the second crc of the beacon frame
            if( crc1 == beaconCrc1 )
 8015718:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801571a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801571c:	429a      	cmp	r2, r3
 801571e:	d115      	bne.n	801574c <LoRaMacClassBRxBeacon+0x19c>
            {
                // Read GwSpecific field from the frame
                // The GwSpecific field contains 1 byte InfoDesc and 6 bytes Info
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.InfoDesc = payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2];
 8015720:	7d7b      	ldrb	r3, [r7, #21]
 8015722:	3306      	adds	r3, #6
 8015724:	687a      	ldr	r2, [r7, #4]
 8015726:	441a      	add	r2, r3
 8015728:	4b5b      	ldr	r3, [pc, #364]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 801572a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801572e:	7812      	ldrb	r2, [r2, #0]
 8015730:	765a      	strb	r2, [r3, #25]
                memcpy1( Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.Info, &payload[phyParam.BeaconFormat.Rfu1Size + 4 + 2 + 1], 6 );
 8015732:	4b59      	ldr	r3, [pc, #356]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 8015734:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015738:	f103 001a 	add.w	r0, r3, #26
 801573c:	7d7b      	ldrb	r3, [r7, #21]
 801573e:	3307      	adds	r3, #7
 8015740:	687a      	ldr	r2, [r7, #4]
 8015742:	4413      	add	r3, r2
 8015744:	2206      	movs	r2, #6
 8015746:	4619      	mov	r1, r3
 8015748:	f004 feb5 	bl	801a4b6 <memcpy1>
                memcpy1( Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.Info, &payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4 + 2 + 1], 6 );
            }
#endif /* LORAMAC_VERSION */

            // Reset beacon variables, if one of the crc is valid
            if( beaconProcessed == true )
 801574c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015750:	2b00      	cmp	r3, #0
 8015752:	f000 808c 	beq.w	801586e <LoRaMacClassBRxBeacon+0x2be>
            {
                uint32_t spreadingFactor = 0;
 8015756:	2300      	movs	r3, #0
 8015758:	633b      	str	r3, [r7, #48]	; 0x30
                uint32_t bandwidth = 0;
 801575a:	2300      	movs	r3, #0
 801575c:	62fb      	str	r3, [r7, #44]	; 0x2c

                getPhy.Attribute = PHY_BEACON_CHANNEL_DR;
 801575e:	2332      	movs	r3, #50	; 0x32
 8015760:	763b      	strb	r3, [r7, #24]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8015762:	4b4d      	ldr	r3, [pc, #308]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 8015764:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015768:	781b      	ldrb	r3, [r3, #0]
 801576a:	f107 0218 	add.w	r2, r7, #24
 801576e:	4611      	mov	r1, r2
 8015770:	4618      	mov	r0, r3
 8015772:	f002 faf5 	bl	8017d60 <RegionGetPhyParam>
 8015776:	4603      	mov	r3, r0
 8015778:	617b      	str	r3, [r7, #20]

                getPhy.Attribute = PHY_SF_FROM_DR;
 801577a:	2338      	movs	r3, #56	; 0x38
 801577c:	763b      	strb	r3, [r7, #24]
                getPhy.Datarate = phyParam.Value;
 801577e:	697b      	ldr	r3, [r7, #20]
 8015780:	b25b      	sxtb	r3, r3
 8015782:	767b      	strb	r3, [r7, #25]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 8015784:	4b44      	ldr	r3, [pc, #272]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 8015786:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801578a:	781b      	ldrb	r3, [r3, #0]
 801578c:	f107 0218 	add.w	r2, r7, #24
 8015790:	4611      	mov	r1, r2
 8015792:	4618      	mov	r0, r3
 8015794:	f002 fae4 	bl	8017d60 <RegionGetPhyParam>
 8015798:	4603      	mov	r3, r0
 801579a:	617b      	str	r3, [r7, #20]
                spreadingFactor = phyParam.Value;
 801579c:	697b      	ldr	r3, [r7, #20]
 801579e:	633b      	str	r3, [r7, #48]	; 0x30

                getPhy.Attribute = PHY_BW_FROM_DR;
 80157a0:	2339      	movs	r3, #57	; 0x39
 80157a2:	763b      	strb	r3, [r7, #24]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 80157a4:	4b3c      	ldr	r3, [pc, #240]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 80157a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80157aa:	781b      	ldrb	r3, [r3, #0]
 80157ac:	f107 0218 	add.w	r2, r7, #24
 80157b0:	4611      	mov	r1, r2
 80157b2:	4618      	mov	r0, r3
 80157b4:	f002 fad4 	bl	8017d60 <RegionGetPhyParam>
 80157b8:	4603      	mov	r3, r0
 80157ba:	617b      	str	r3, [r7, #20]
                bandwidth = phyParam.Value;
 80157bc:	697b      	ldr	r3, [r7, #20]
 80157be:	62fb      	str	r3, [r7, #44]	; 0x2c

                TimerTime_t time = Radio.TimeOnAir( MODEM_LORA, bandwidth, spreadingFactor, 1, 10, true, size, false );
 80157c0:	4b36      	ldr	r3, [pc, #216]	; (801589c <LoRaMacClassBRxBeacon+0x2ec>)
 80157c2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80157c4:	887b      	ldrh	r3, [r7, #2]
 80157c6:	b2db      	uxtb	r3, r3
 80157c8:	2200      	movs	r2, #0
 80157ca:	9203      	str	r2, [sp, #12]
 80157cc:	9302      	str	r3, [sp, #8]
 80157ce:	2301      	movs	r3, #1
 80157d0:	9301      	str	r3, [sp, #4]
 80157d2:	230a      	movs	r3, #10
 80157d4:	9300      	str	r3, [sp, #0]
 80157d6:	2301      	movs	r3, #1
 80157d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80157da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80157dc:	2001      	movs	r0, #1
 80157de:	47a0      	blx	r4
 80157e0:	62b8      	str	r0, [r7, #40]	; 0x28
                SysTime_t timeOnAir;
                timeOnAir.Seconds = time / 1000;
 80157e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157e4:	4a2e      	ldr	r2, [pc, #184]	; (80158a0 <LoRaMacClassBRxBeacon+0x2f0>)
 80157e6:	fba2 2303 	umull	r2, r3, r2, r3
 80157ea:	099b      	lsrs	r3, r3, #6
 80157ec:	60fb      	str	r3, [r7, #12]
                timeOnAir.SubSeconds = time - timeOnAir.Seconds * 1000;
 80157ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157f0:	b29a      	uxth	r2, r3
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	b29b      	uxth	r3, r3
 80157f6:	4619      	mov	r1, r3
 80157f8:	0149      	lsls	r1, r1, #5
 80157fa:	1ac9      	subs	r1, r1, r3
 80157fc:	0089      	lsls	r1, r1, #2
 80157fe:	440b      	add	r3, r1
 8015800:	00db      	lsls	r3, r3, #3
 8015802:	b29b      	uxth	r3, r3
 8015804:	1ad3      	subs	r3, r2, r3
 8015806:	b29b      	uxth	r3, r3
 8015808:	b21b      	sxth	r3, r3
 801580a:	823b      	strh	r3, [r7, #16]

                Ctx.BeaconCtx.LastBeaconRx = Ctx.BeaconCtx.BeaconTime;
 801580c:	4b22      	ldr	r3, [pc, #136]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 801580e:	4a22      	ldr	r2, [pc, #136]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 8015810:	3318      	adds	r3, #24
 8015812:	3210      	adds	r2, #16
 8015814:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015818:	e883 0003 	stmia.w	r3, {r0, r1}
                Ctx.BeaconCtx.LastBeaconRx.Seconds += UNIX_GPS_EPOCH_OFFSET;
 801581c:	4b1e      	ldr	r3, [pc, #120]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 801581e:	699a      	ldr	r2, [r3, #24]
 8015820:	4b20      	ldr	r3, [pc, #128]	; (80158a4 <LoRaMacClassBRxBeacon+0x2f4>)
 8015822:	4413      	add	r3, r2
 8015824:	4a1c      	ldr	r2, [pc, #112]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 8015826:	6193      	str	r3, [r2, #24]

                // Update system time.
                SysTimeSet( SysTimeAdd( Ctx.BeaconCtx.LastBeaconRx, timeOnAir ) );
 8015828:	f107 0020 	add.w	r0, r7, #32
 801582c:	4a1a      	ldr	r2, [pc, #104]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 801582e:	693b      	ldr	r3, [r7, #16]
 8015830:	9300      	str	r3, [sp, #0]
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	3218      	adds	r2, #24
 8015836:	ca06      	ldmia	r2, {r1, r2}
 8015838:	f008 f97c 	bl	801db34 <SysTimeAdd>
 801583c:	f107 0320 	add.w	r3, r7, #32
 8015840:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015844:	f008 f9e8 	bl	801dc18 <SysTimeSet>

                Ctx.BeaconCtx.Ctrl.BeaconAcquired = 1;
 8015848:	4a13      	ldr	r2, [pc, #76]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 801584a:	7b13      	ldrb	r3, [r2, #12]
 801584c:	f043 0302 	orr.w	r3, r3, #2
 8015850:	7313      	strb	r3, [r2, #12]
                Ctx.BeaconCtx.Ctrl.BeaconMode = 1;
 8015852:	4a11      	ldr	r2, [pc, #68]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 8015854:	7b13      	ldrb	r3, [r2, #12]
 8015856:	f043 0301 	orr.w	r3, r3, #1
 801585a:	7313      	strb	r3, [r2, #12]
                ResetWindowTimeout( );
 801585c:	f7ff f8a8 	bl	80149b0 <ResetWindowTimeout>
                Ctx.BeaconState = BEACON_STATE_LOCKED;
 8015860:	4b0d      	ldr	r3, [pc, #52]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 8015862:	2205      	movs	r2, #5
 8015864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

                LoRaMacClassBBeaconTimerEvent( NULL );
 8015868:	2000      	movs	r0, #0
 801586a:	f7ff fa3d 	bl	8014ce8 <LoRaMacClassBBeaconTimerEvent>
            }
        }

        if( Ctx.BeaconState == BEACON_STATE_RX )
 801586e:	4b0a      	ldr	r3, [pc, #40]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 8015870:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015874:	2b09      	cmp	r3, #9
 8015876:	d106      	bne.n	8015886 <LoRaMacClassBRxBeacon+0x2d6>
        {
            Ctx.BeaconState = BEACON_STATE_TIMEOUT;
 8015878:	4b07      	ldr	r3, [pc, #28]	; (8015898 <LoRaMacClassBRxBeacon+0x2e8>)
 801587a:	2202      	movs	r2, #2
 801587c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            LoRaMacClassBBeaconTimerEvent( NULL );
 8015880:	2000      	movs	r0, #0
 8015882:	f7ff fa31 	bl	8014ce8 <LoRaMacClassBBeaconTimerEvent>
        // If it receives a frame which is
        // 1. not a beacon or
        // 2. a beacon with a crc fail
        // the MAC shall ignore the frame completely. Thus, the function must always return true, even if no
        // valid beacon has been received.
        beaconProcessed = true;
 8015886:	2301      	movs	r3, #1
 8015888:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    return beaconProcessed;
 801588c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015890:	4618      	mov	r0, r3
 8015892:	3744      	adds	r7, #68	; 0x44
 8015894:	46bd      	mov	sp, r7
 8015896:	bd90      	pop	{r4, r7, pc}
 8015898:	200020b0 	.word	0x200020b0
 801589c:	0801fbe4 	.word	0x0801fbe4
 80158a0:	10624dd3 	.word	0x10624dd3
 80158a4:	12d53d80 	.word	0x12d53d80

080158a8 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80158a8:	b480      	push	{r7}
 80158aa:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) ||
 80158ac:	4b09      	ldr	r3, [pc, #36]	; (80158d4 <LoRaMacClassBIsBeaconExpected+0x2c>)
 80158ae:	7b1b      	ldrb	r3, [r3, #12]
 80158b0:	f003 0310 	and.w	r3, r3, #16
 80158b4:	b2db      	uxtb	r3, r3
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d104      	bne.n	80158c4 <LoRaMacClassBIsBeaconExpected+0x1c>
        ( Ctx.BeaconState == BEACON_STATE_RX ) )
 80158ba:	4b06      	ldr	r3, [pc, #24]	; (80158d4 <LoRaMacClassBIsBeaconExpected+0x2c>)
 80158bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    if( ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) ||
 80158c0:	2b09      	cmp	r3, #9
 80158c2:	d101      	bne.n	80158c8 <LoRaMacClassBIsBeaconExpected+0x20>
    {
        return true;
 80158c4:	2301      	movs	r3, #1
 80158c6:	e000      	b.n	80158ca <LoRaMacClassBIsBeaconExpected+0x22>
    }
    return false;
 80158c8:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158ca:	4618      	mov	r0, r3
 80158cc:	46bd      	mov	sp, r7
 80158ce:	bc80      	pop	{r7}
 80158d0:	4770      	bx	lr
 80158d2:	bf00      	nop
 80158d4:	200020b0 	.word	0x200020b0

080158d8 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80158d8:	b480      	push	{r7}
 80158da:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 80158dc:	4b05      	ldr	r3, [pc, #20]	; (80158f4 <LoRaMacClassBIsPingExpected+0x1c>)
 80158de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80158e2:	2b03      	cmp	r3, #3
 80158e4:	d101      	bne.n	80158ea <LoRaMacClassBIsPingExpected+0x12>
    {
        return true;
 80158e6:	2301      	movs	r3, #1
 80158e8:	e000      	b.n	80158ec <LoRaMacClassBIsPingExpected+0x14>
    }
    return false;
 80158ea:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158ec:	4618      	mov	r0, r3
 80158ee:	46bd      	mov	sp, r7
 80158f0:	bc80      	pop	{r7}
 80158f2:	4770      	bx	lr
 80158f4:	200020b0 	.word	0x200020b0

080158f8 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80158f8:	b480      	push	{r7}
 80158fa:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.MulticastSlotState == PINGSLOT_STATE_RX )
 80158fc:	4b05      	ldr	r3, [pc, #20]	; (8015914 <LoRaMacClassBIsMulticastExpected+0x1c>)
 80158fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015902:	2b03      	cmp	r3, #3
 8015904:	d101      	bne.n	801590a <LoRaMacClassBIsMulticastExpected+0x12>
    {
        return true;
 8015906:	2301      	movs	r3, #1
 8015908:	e000      	b.n	801590c <LoRaMacClassBIsMulticastExpected+0x14>
    }
    return false;
 801590a:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801590c:	4618      	mov	r0, r3
 801590e:	46bd      	mov	sp, r7
 8015910:	bc80      	pop	{r7}
 8015912:	4770      	bx	lr
 8015914:	200020b0 	.word	0x200020b0

08015918 <LoRaMacClassBIsAcquisitionPending>:

bool LoRaMacClassBIsAcquisitionPending( void )
{
 8015918:	b480      	push	{r7}
 801591a:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 801591c:	4b06      	ldr	r3, [pc, #24]	; (8015938 <LoRaMacClassBIsAcquisitionPending+0x20>)
 801591e:	7b1b      	ldrb	r3, [r3, #12]
 8015920:	f003 0310 	and.w	r3, r3, #16
 8015924:	b2db      	uxtb	r3, r3
 8015926:	2b00      	cmp	r3, #0
 8015928:	d001      	beq.n	801592e <LoRaMacClassBIsAcquisitionPending+0x16>
    {
        return true;
 801592a:	2301      	movs	r3, #1
 801592c:	e000      	b.n	8015930 <LoRaMacClassBIsAcquisitionPending+0x18>
    }
    return false;
 801592e:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015930:	4618      	mov	r0, r3
 8015932:	46bd      	mov	sp, r7
 8015934:	bc80      	pop	{r7}
 8015936:	4770      	bx	lr
 8015938:	200020b0 	.word	0x200020b0

0801593c <LoRaMacClassBIsBeaconModeActive>:

bool LoRaMacClassBIsBeaconModeActive( void )
{
 801593c:	b480      	push	{r7}
 801593e:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) ||
 8015940:	4b09      	ldr	r3, [pc, #36]	; (8015968 <LoRaMacClassBIsBeaconModeActive+0x2c>)
 8015942:	7b1b      	ldrb	r3, [r3, #12]
 8015944:	f003 0301 	and.w	r3, r3, #1
 8015948:	b2db      	uxtb	r3, r3
 801594a:	2b00      	cmp	r3, #0
 801594c:	d104      	bne.n	8015958 <LoRaMacClassBIsBeaconModeActive+0x1c>
        ( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME ) )
 801594e:	4b06      	ldr	r3, [pc, #24]	; (8015968 <LoRaMacClassBIsBeaconModeActive+0x2c>)
 8015950:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) ||
 8015954:	2b01      	cmp	r3, #1
 8015956:	d101      	bne.n	801595c <LoRaMacClassBIsBeaconModeActive+0x20>
    {
        return true;
 8015958:	2301      	movs	r3, #1
 801595a:	e000      	b.n	801595e <LoRaMacClassBIsBeaconModeActive+0x22>
    }
    return false;
 801595c:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801595e:	4618      	mov	r0, r3
 8015960:	46bd      	mov	sp, r7
 8015962:	bc80      	pop	{r7}
 8015964:	4770      	bx	lr
 8015966:	bf00      	nop
 8015968:	200020b0 	.word	0x200020b0

0801596c <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 801596c:	b590      	push	{r4, r7, lr}
 801596e:	b083      	sub	sp, #12
 8015970:	af00      	add	r7, sp, #0
 8015972:	4603      	mov	r3, r0
 8015974:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
 8015976:	79fb      	ldrb	r3, [r7, #7]
 8015978:	b29b      	uxth	r3, r3
 801597a:	4a0a      	ldr	r2, [pc, #40]	; (80159a4 <LoRaMacClassBSetPingSlotInfo+0x38>)
 801597c:	6814      	ldr	r4, [r2, #0]
 801597e:	4618      	mov	r0, r3
 8015980:	f7ff f8d6 	bl	8014b30 <CalcPingNb>
 8015984:	4603      	mov	r3, r0
 8015986:	7063      	strb	r3, [r4, #1]
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
 8015988:	4b06      	ldr	r3, [pc, #24]	; (80159a4 <LoRaMacClassBSetPingSlotInfo+0x38>)
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	785b      	ldrb	r3, [r3, #1]
 801598e:	4a05      	ldr	r2, [pc, #20]	; (80159a4 <LoRaMacClassBSetPingSlotInfo+0x38>)
 8015990:	6814      	ldr	r4, [r2, #0]
 8015992:	4618      	mov	r0, r3
 8015994:	f7ff f8db 	bl	8014b4e <CalcPingPeriod>
 8015998:	4603      	mov	r3, r0
 801599a:	8063      	strh	r3, [r4, #2]
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801599c:	bf00      	nop
 801599e:	370c      	adds	r7, #12
 80159a0:	46bd      	mov	sp, r7
 80159a2:	bd90      	pop	{r4, r7, pc}
 80159a4:	20002164 	.word	0x20002164

080159a8 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b084      	sub	sp, #16
 80159ac:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 )
 80159ae:	4b19      	ldr	r3, [pc, #100]	; (8015a14 <LoRaMacClassBHaltBeaconing+0x6c>)
 80159b0:	7b1b      	ldrb	r3, [r3, #12]
 80159b2:	f003 0301 	and.w	r3, r3, #1
 80159b6:	b2db      	uxtb	r3, r3
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d027      	beq.n	8015a0c <LoRaMacClassBHaltBeaconing+0x64>
    {
        if( ( Ctx.BeaconState == BEACON_STATE_TIMEOUT ) ||
 80159bc:	4b15      	ldr	r3, [pc, #84]	; (8015a14 <LoRaMacClassBHaltBeaconing+0x6c>)
 80159be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80159c2:	2b02      	cmp	r3, #2
 80159c4:	d004      	beq.n	80159d0 <LoRaMacClassBHaltBeaconing+0x28>
            ( Ctx.BeaconState == BEACON_STATE_LOST ) )
 80159c6:	4b13      	ldr	r3, [pc, #76]	; (8015a14 <LoRaMacClassBHaltBeaconing+0x6c>)
 80159c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
        if( ( Ctx.BeaconState == BEACON_STATE_TIMEOUT ) ||
 80159cc:	2b0a      	cmp	r3, #10
 80159ce:	d102      	bne.n	80159d6 <LoRaMacClassBHaltBeaconing+0x2e>
        {
            // Update the state machine before halt
            LoRaMacClassBBeaconTimerEvent( NULL );
 80159d0:	2000      	movs	r0, #0
 80159d2:	f7ff f989 	bl	8014ce8 <LoRaMacClassBBeaconTimerEvent>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80159d6:	f3ef 8310 	mrs	r3, PRIMASK
 80159da:	607b      	str	r3, [r7, #4]
  return(result);
 80159dc:	687b      	ldr	r3, [r7, #4]
        }

        CRITICAL_SECTION_BEGIN( );
 80159de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80159e0:	b672      	cpsid	i
}
 80159e2:	bf00      	nop
        LoRaMacClassBEvents.Events.Beacon = 0;
 80159e4:	4a0c      	ldr	r2, [pc, #48]	; (8015a18 <LoRaMacClassBHaltBeaconing+0x70>)
 80159e6:	7813      	ldrb	r3, [r2, #0]
 80159e8:	f36f 0300 	bfc	r3, #0, #1
 80159ec:	7013      	strb	r3, [r2, #0]
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80159f2:	68bb      	ldr	r3, [r7, #8]
 80159f4:	f383 8810 	msr	PRIMASK, r3
}
 80159f8:	bf00      	nop
        CRITICAL_SECTION_END( );

        // Halt ping slot state machine
        TimerStop( &Ctx.BeaconTimer );
 80159fa:	4808      	ldr	r0, [pc, #32]	; (8015a1c <LoRaMacClassBHaltBeaconing+0x74>)
 80159fc:	f008 fea6 	bl	801e74c <UTIL_TIMER_Stop>

        // Halt beacon state machine
        Ctx.BeaconState = BEACON_STATE_HALT;
 8015a00:	4b04      	ldr	r3, [pc, #16]	; (8015a14 <LoRaMacClassBHaltBeaconing+0x6c>)
 8015a02:	2206      	movs	r2, #6
 8015a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
 8015a08:	f000 fa5c 	bl	8015ec4 <LoRaMacClassBStopRxSlots>
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a0c:	bf00      	nop
 8015a0e:	3710      	adds	r7, #16
 8015a10:	46bd      	mov	sp, r7
 8015a12:	bd80      	pop	{r7, pc}
 8015a14:	200020b0 	.word	0x200020b0
 8015a18:	200020ac 	.word	0x200020ac
 8015a1c:	200020f4 	.word	0x200020f4

08015a20 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconState == BEACON_STATE_HALT )
 8015a24:	4b0e      	ldr	r3, [pc, #56]	; (8015a60 <LoRaMacClassBResumeBeaconing+0x40>)
 8015a26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015a2a:	2b06      	cmp	r3, #6
 8015a2c:	d116      	bne.n	8015a5c <LoRaMacClassBResumeBeaconing+0x3c>
    {
        Ctx.BeaconCtx.Ctrl.ResumeBeaconing = 1;
 8015a2e:	4a0c      	ldr	r2, [pc, #48]	; (8015a60 <LoRaMacClassBResumeBeaconing+0x40>)
 8015a30:	7b13      	ldrb	r3, [r2, #12]
 8015a32:	f043 0320 	orr.w	r3, r3, #32
 8015a36:	7313      	strb	r3, [r2, #12]

        // Set default state
        Ctx.BeaconState = BEACON_STATE_LOCKED;
 8015a38:	4b09      	ldr	r3, [pc, #36]	; (8015a60 <LoRaMacClassBResumeBeaconing+0x40>)
 8015a3a:	2205      	movs	r2, #5
 8015a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 0 )
 8015a40:	4b07      	ldr	r3, [pc, #28]	; (8015a60 <LoRaMacClassBResumeBeaconing+0x40>)
 8015a42:	7b1b      	ldrb	r3, [r3, #12]
 8015a44:	f003 0302 	and.w	r3, r3, #2
 8015a48:	b2db      	uxtb	r3, r3
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d103      	bne.n	8015a56 <LoRaMacClassBResumeBeaconing+0x36>
        {
            // Set the default state for beacon less operation
            Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 8015a4e:	4b04      	ldr	r3, [pc, #16]	; (8015a60 <LoRaMacClassBResumeBeaconing+0x40>)
 8015a50:	2204      	movs	r2, #4
 8015a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
 8015a56:	2000      	movs	r0, #0
 8015a58:	f7ff f946 	bl	8014ce8 <LoRaMacClassBBeaconTimerEvent>
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a5c:	bf00      	nop
 8015a5e:	bd80      	pop	{r7, pc}
 8015a60:	200020b0 	.word	0x200020b0

08015a64 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b082      	sub	sp, #8
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( nextClass == CLASS_B )
 8015a6e:	79fb      	ldrb	r3, [r7, #7]
 8015a70:	2b01      	cmp	r3, #1
 8015a72:	d110      	bne.n	8015a96 <LoRaMacClassBSwitchClass+0x32>
    {// Switch to from class a to class b
        if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) && ( ClassBNvm->PingSlotCtx.Ctrl.Assigned == 1 ) )
 8015a74:	4b0f      	ldr	r3, [pc, #60]	; (8015ab4 <LoRaMacClassBSwitchClass+0x50>)
 8015a76:	7b1b      	ldrb	r3, [r3, #12]
 8015a78:	f003 0301 	and.w	r3, r3, #1
 8015a7c:	b2db      	uxtb	r3, r3
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d009      	beq.n	8015a96 <LoRaMacClassBSwitchClass+0x32>
 8015a82:	4b0d      	ldr	r3, [pc, #52]	; (8015ab8 <LoRaMacClassBSwitchClass+0x54>)
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	781b      	ldrb	r3, [r3, #0]
 8015a88:	f003 0301 	and.w	r3, r3, #1
 8015a8c:	b2db      	uxtb	r3, r3
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d001      	beq.n	8015a96 <LoRaMacClassBSwitchClass+0x32>
        {
            return LORAMAC_STATUS_OK;
 8015a92:	2300      	movs	r3, #0
 8015a94:	e009      	b.n	8015aaa <LoRaMacClassBSwitchClass+0x46>
        }
    }
    if( nextClass == CLASS_A )
 8015a96:	79fb      	ldrb	r3, [r7, #7]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d105      	bne.n	8015aa8 <LoRaMacClassBSwitchClass+0x44>
    {// Switch from class b to class a
        LoRaMacClassBHaltBeaconing( );
 8015a9c:	f7ff ff84 	bl	80159a8 <LoRaMacClassBHaltBeaconing>

        // Initialize default state for class b
        InitClassBDefaults( );
 8015aa0:	f7fe ff1a 	bl	80148d8 <InitClassBDefaults>

        return LORAMAC_STATUS_OK;
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	e000      	b.n	8015aaa <LoRaMacClassBSwitchClass+0x46>
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015aa8:	2302      	movs	r3, #2
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015aaa:	4618      	mov	r0, r3
 8015aac:	3708      	adds	r7, #8
 8015aae:	46bd      	mov	sp, r7
 8015ab0:	bd80      	pop	{r7, pc}
 8015ab2:	bf00      	nop
 8015ab4:	200020b0 	.word	0x200020b0
 8015ab8:	20002164 	.word	0x20002164

08015abc <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8015abc:	b480      	push	{r7}
 8015abe:	b085      	sub	sp, #20
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	73fb      	strb	r3, [r7, #15]

    switch( mibGet->Type )
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	781b      	ldrb	r3, [r3, #0]
 8015acc:	2b36      	cmp	r3, #54	; 0x36
 8015ace:	d002      	beq.n	8015ad6 <LoRaMacClassBMibGetRequestConfirm+0x1a>
 8015ad0:	2b38      	cmp	r3, #56	; 0x38
 8015ad2:	d007      	beq.n	8015ae4 <LoRaMacClassBMibGetRequestConfirm+0x28>
 8015ad4:	e00c      	b.n	8015af0 <LoRaMacClassBMibGetRequestConfirm+0x34>
    {
        case MIB_PING_SLOT_DATARATE:
        {
            mibGet->Param.PingSlotDatarate = ClassBNvm->PingSlotCtx.Datarate;
 8015ad6:	4b0b      	ldr	r3, [pc, #44]	; (8015b04 <LoRaMacClassBMibGetRequestConfirm+0x48>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	711a      	strb	r2, [r3, #4]
            break;
 8015ae2:	e008      	b.n	8015af6 <LoRaMacClassBMibGetRequestConfirm+0x3a>
        }
        case MIB_BEACON_STATE:
        {
            mibGet->Param.BeaconState = Ctx.BeaconState;
 8015ae4:	4b08      	ldr	r3, [pc, #32]	; (8015b08 <LoRaMacClassBMibGetRequestConfirm+0x4c>)
 8015ae6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	711a      	strb	r2, [r3, #4]
            break;
 8015aee:	e002      	b.n	8015af6 <LoRaMacClassBMibGetRequestConfirm+0x3a>
        }
        default:
        {
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015af0:	2302      	movs	r3, #2
 8015af2:	73fb      	strb	r3, [r7, #15]
            break;
 8015af4:	bf00      	nop
        }
    }
    return status;
 8015af6:	7bfb      	ldrb	r3, [r7, #15]
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015af8:	4618      	mov	r0, r3
 8015afa:	3714      	adds	r7, #20
 8015afc:	46bd      	mov	sp, r7
 8015afe:	bc80      	pop	{r7}
 8015b00:	4770      	bx	lr
 8015b02:	bf00      	nop
 8015b04:	20002164 	.word	0x20002164
 8015b08:	200020b0 	.word	0x200020b0

08015b0c <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8015b0c:	b480      	push	{r7}
 8015b0e:	b085      	sub	sp, #20
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8015b14:	2300      	movs	r3, #0
 8015b16:	73fb      	strb	r3, [r7, #15]

    switch( mibSet->Type )
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	781b      	ldrb	r3, [r3, #0]
 8015b1c:	2b36      	cmp	r3, #54	; 0x36
 8015b1e:	d106      	bne.n	8015b2e <LoRaMacMibClassBSetRequestConfirm+0x22>
    {
        case MIB_PING_SLOT_DATARATE:
        {
            ClassBNvm->PingSlotCtx.Datarate = mibSet->Param.PingSlotDatarate;
 8015b20:	4b07      	ldr	r3, [pc, #28]	; (8015b40 <LoRaMacMibClassBSetRequestConfirm+0x34>)
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	687a      	ldr	r2, [r7, #4]
 8015b26:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8015b2a:	721a      	strb	r2, [r3, #8]
            break;
 8015b2c:	e002      	b.n	8015b34 <LoRaMacMibClassBSetRequestConfirm+0x28>
        }
        default:
        {
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015b2e:	2302      	movs	r3, #2
 8015b30:	73fb      	strb	r3, [r7, #15]
            break;
 8015b32:	bf00      	nop
        }
    }
    return status;
 8015b34:	7bfb      	ldrb	r3, [r7, #15]
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015b36:	4618      	mov	r0, r3
 8015b38:	3714      	adds	r7, #20
 8015b3a:	46bd      	mov	sp, r7
 8015b3c:	bc80      	pop	{r7}
 8015b3e:	4770      	bx	lr
 8015b40:	20002164 	.word	0x20002164

08015b44 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8015b48:	200d      	movs	r0, #13
 8015b4a:	f000 fe85 	bl	8016858 <LoRaMacConfirmQueueIsCmdActive>
 8015b4e:	4603      	mov	r3, r0
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d009      	beq.n	8015b68 <LoRaMacClassBPingSlotInfoAns+0x24>
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8015b54:	210d      	movs	r1, #13
 8015b56:	2000      	movs	r0, #0
 8015b58:	f000 fdf2 	bl	8016740 <LoRaMacConfirmQueueSetStatus>
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
 8015b5c:	4b03      	ldr	r3, [pc, #12]	; (8015b6c <LoRaMacClassBPingSlotInfoAns+0x28>)
 8015b5e:	681a      	ldr	r2, [r3, #0]
 8015b60:	7813      	ldrb	r3, [r2, #0]
 8015b62:	f043 0301 	orr.w	r3, r3, #1
 8015b66:	7013      	strb	r3, [r2, #0]
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015b68:	bf00      	nop
 8015b6a:	bd80      	pop	{r7, pc}
 8015b6c:	20002164 	.word	0x20002164

08015b70 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b084      	sub	sp, #16
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	4603      	mov	r3, r0
 8015b78:	6039      	str	r1, [r7, #0]
 8015b7a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    uint8_t status = 0x03;
 8015b7c:	2303      	movs	r3, #3
 8015b7e:	73fb      	strb	r3, [r7, #15]
    VerifyParams_t verify;
    bool isCustomFreq = false;
 8015b80:	2300      	movs	r3, #0
 8015b82:	73bb      	strb	r3, [r7, #14]

    if( frequency != 0 )
 8015b84:	683b      	ldr	r3, [r7, #0]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d017      	beq.n	8015bba <LoRaMacClassBPingSlotChannelReq+0x4a>
    {
        isCustomFreq = true;
 8015b8a:	2301      	movs	r3, #1
 8015b8c:	73bb      	strb	r3, [r7, #14]
        verify.Frequency = frequency;
 8015b8e:	683b      	ldr	r3, [r7, #0]
 8015b90:	60bb      	str	r3, [r7, #8]
        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == false )
 8015b92:	4b2b      	ldr	r3, [pc, #172]	; (8015c40 <LoRaMacClassBPingSlotChannelReq+0xd0>)
 8015b94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015b98:	781b      	ldrb	r3, [r3, #0]
 8015b9a:	f107 0108 	add.w	r1, r7, #8
 8015b9e:	2200      	movs	r2, #0
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	f002 f918 	bl	8017dd6 <RegionVerify>
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	f083 0301 	eor.w	r3, r3, #1
 8015bac:	b2db      	uxtb	r3, r3
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d003      	beq.n	8015bba <LoRaMacClassBPingSlotChannelReq+0x4a>
        {
            status &= 0xFE; // Channel frequency KO
 8015bb2:	7bfb      	ldrb	r3, [r7, #15]
 8015bb4:	f023 0301 	bic.w	r3, r3, #1
 8015bb8:	73fb      	strb	r3, [r7, #15]
        }
    }

    verify.DatarateParams.Datarate = datarate;
 8015bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015bbe:	723b      	strb	r3, [r7, #8]
    verify.DatarateParams.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 8015bc0:	4b1f      	ldr	r3, [pc, #124]	; (8015c40 <LoRaMacClassBPingSlotChannelReq+0xd0>)
 8015bc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015bc6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015bca:	727b      	strb	r3, [r7, #9]

    if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_RX_DR ) == false )
 8015bcc:	4b1c      	ldr	r3, [pc, #112]	; (8015c40 <LoRaMacClassBPingSlotChannelReq+0xd0>)
 8015bce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015bd2:	781b      	ldrb	r3, [r3, #0]
 8015bd4:	f107 0108 	add.w	r1, r7, #8
 8015bd8:	2207      	movs	r2, #7
 8015bda:	4618      	mov	r0, r3
 8015bdc:	f002 f8fb 	bl	8017dd6 <RegionVerify>
 8015be0:	4603      	mov	r3, r0
 8015be2:	f083 0301 	eor.w	r3, r3, #1
 8015be6:	b2db      	uxtb	r3, r3
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d003      	beq.n	8015bf4 <LoRaMacClassBPingSlotChannelReq+0x84>
    {
        status &= 0xFD; // Datarate range KO
 8015bec:	7bfb      	ldrb	r3, [r7, #15]
 8015bee:	f023 0302 	bic.w	r3, r3, #2
 8015bf2:	73fb      	strb	r3, [r7, #15]
    }

    if( status == 0x03 )
 8015bf4:	7bfb      	ldrb	r3, [r7, #15]
 8015bf6:	2b03      	cmp	r3, #3
 8015bf8:	d11c      	bne.n	8015c34 <LoRaMacClassBPingSlotChannelReq+0xc4>
    {
        if( isCustomFreq == true )
 8015bfa:	7bbb      	ldrb	r3, [r7, #14]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d00a      	beq.n	8015c16 <LoRaMacClassBPingSlotChannelReq+0xa6>
        {
            ClassBNvm->PingSlotCtx.Ctrl.CustomFreq = 1;
 8015c00:	4b10      	ldr	r3, [pc, #64]	; (8015c44 <LoRaMacClassBPingSlotChannelReq+0xd4>)
 8015c02:	681a      	ldr	r2, [r3, #0]
 8015c04:	7813      	ldrb	r3, [r2, #0]
 8015c06:	f043 0302 	orr.w	r3, r3, #2
 8015c0a:	7013      	strb	r3, [r2, #0]
            ClassBNvm->PingSlotCtx.Frequency = frequency;
 8015c0c:	4b0d      	ldr	r3, [pc, #52]	; (8015c44 <LoRaMacClassBPingSlotChannelReq+0xd4>)
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	683a      	ldr	r2, [r7, #0]
 8015c12:	605a      	str	r2, [r3, #4]
 8015c14:	e009      	b.n	8015c2a <LoRaMacClassBPingSlotChannelReq+0xba>
        }
        else
        {
            ClassBNvm->PingSlotCtx.Ctrl.CustomFreq = 0;
 8015c16:	4b0b      	ldr	r3, [pc, #44]	; (8015c44 <LoRaMacClassBPingSlotChannelReq+0xd4>)
 8015c18:	681a      	ldr	r2, [r3, #0]
 8015c1a:	7813      	ldrb	r3, [r2, #0]
 8015c1c:	f36f 0341 	bfc	r3, #1, #1
 8015c20:	7013      	strb	r3, [r2, #0]
            ClassBNvm->PingSlotCtx.Frequency = 0;
 8015c22:	4b08      	ldr	r3, [pc, #32]	; (8015c44 <LoRaMacClassBPingSlotChannelReq+0xd4>)
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	2200      	movs	r2, #0
 8015c28:	605a      	str	r2, [r3, #4]
        }
        ClassBNvm->PingSlotCtx.Datarate = datarate;
 8015c2a:	4b06      	ldr	r3, [pc, #24]	; (8015c44 <LoRaMacClassBPingSlotChannelReq+0xd4>)
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015c32:	721a      	strb	r2, [r3, #8]
    }

    return status;
 8015c34:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015c36:	4618      	mov	r0, r3
 8015c38:	3710      	adds	r7, #16
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd80      	pop	{r7, pc}
 8015c3e:	bf00      	nop
 8015c40:	200020b0 	.word	0x200020b0
 8015c44:	20002164 	.word	0x20002164

08015c48 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8015c48:	b590      	push	{r4, r7, lr}
 8015c4a:	b085      	sub	sp, #20
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	4603      	mov	r3, r0
 8015c50:	60ba      	str	r2, [r7, #8]
 8015c52:	81fb      	strh	r3, [r7, #14]
 8015c54:	460b      	mov	r3, r1
 8015c56:	737b      	strb	r3, [r7, #13]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.BeaconCtx.BeaconTimingDelay = ( CLASSB_BEACON_DELAY_BEACON_TIMING_ANS * beaconTimingDelay );
 8015c58:	89fa      	ldrh	r2, [r7, #14]
 8015c5a:	4613      	mov	r3, r2
 8015c5c:	011b      	lsls	r3, r3, #4
 8015c5e:	1a9b      	subs	r3, r3, r2
 8015c60:	005b      	lsls	r3, r3, #1
 8015c62:	461a      	mov	r2, r3
 8015c64:	4b26      	ldr	r3, [pc, #152]	; (8015d00 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8015c66:	639a      	str	r2, [r3, #56]	; 0x38
    Ctx.BeaconCtx.BeaconTimingChannel = beaconTimingChannel;
 8015c68:	4a25      	ldr	r2, [pc, #148]	; (8015d00 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8015c6a:	7b7b      	ldrb	r3, [r7, #13]
 8015c6c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34

    if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8015c70:	200e      	movs	r0, #14
 8015c72:	f000 fdf1 	bl	8016858 <LoRaMacConfirmQueueIsCmdActive>
 8015c76:	4603      	mov	r3, r0
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d03c      	beq.n	8015cf6 <LoRaMacClassBBeaconTimingAns+0xae>
    {
        if( Ctx.BeaconCtx.BeaconTimingDelay > CLASSB_BEACON_INTERVAL )
 8015c7c:	4b20      	ldr	r3, [pc, #128]	; (8015d00 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8015c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c80:	f5b3 3ffa 	cmp.w	r3, #128000	; 0x1f400
 8015c84:	d90b      	bls.n	8015c9e <LoRaMacClassBBeaconTimingAns+0x56>
        {
            // We missed the beacon already
            Ctx.BeaconCtx.BeaconTimingDelay = 0;
 8015c86:	4b1e      	ldr	r3, [pc, #120]	; (8015d00 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8015c88:	2200      	movs	r2, #0
 8015c8a:	639a      	str	r2, [r3, #56]	; 0x38
            Ctx.BeaconCtx.BeaconTimingChannel = 0;
 8015c8c:	4b1c      	ldr	r3, [pc, #112]	; (8015d00 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8015c8e:	2200      	movs	r2, #0
 8015c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_BEACON_TIMING );
 8015c94:	210e      	movs	r1, #14
 8015c96:	2010      	movs	r0, #16
 8015c98:	f000 fd52 	bl	8016740 <LoRaMacConfirmQueueSetStatus>
 8015c9c:	e01e      	b.n	8015cdc <LoRaMacClassBBeaconTimingAns+0x94>
        }
        else
        {
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 8015c9e:	4a18      	ldr	r2, [pc, #96]	; (8015d00 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8015ca0:	7b13      	ldrb	r3, [r2, #12]
 8015ca2:	f043 0304 	orr.w	r3, r3, #4
 8015ca6:	7313      	strb	r3, [r2, #12]
            Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 1;
 8015ca8:	4a15      	ldr	r2, [pc, #84]	; (8015d00 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8015caa:	7b13      	ldrb	r3, [r2, #12]
 8015cac:	f043 0308 	orr.w	r3, r3, #8
 8015cb0:	7313      	strb	r3, [r2, #12]
            Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( lastRxDone + Ctx.BeaconCtx.BeaconTimingDelay );
 8015cb2:	4b13      	ldr	r3, [pc, #76]	; (8015d00 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8015cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015cb6:	68bb      	ldr	r3, [r7, #8]
 8015cb8:	441a      	add	r2, r3
 8015cba:	4c11      	ldr	r4, [pc, #68]	; (8015d00 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8015cbc:	463b      	mov	r3, r7
 8015cbe:	4611      	mov	r1, r2
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	f008 f857 	bl	801dd74 <SysTimeFromMs>
 8015cc6:	f104 0320 	add.w	r3, r4, #32
 8015cca:	463a      	mov	r2, r7
 8015ccc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015cd0:	e883 0003 	stmia.w	r3, {r0, r1}
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8015cd4:	210e      	movs	r1, #14
 8015cd6:	2000      	movs	r0, #0
 8015cd8:	f000 fd32 	bl	8016740 <LoRaMacConfirmQueueSetStatus>
        }

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
 8015cdc:	4b08      	ldr	r3, [pc, #32]	; (8015d00 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8015cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8015ce2:	4a07      	ldr	r2, [pc, #28]	; (8015d00 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8015ce4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8015ce6:	60da      	str	r2, [r3, #12]
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
 8015ce8:	4b05      	ldr	r3, [pc, #20]	; (8015d00 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8015cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8015cee:	4a04      	ldr	r2, [pc, #16]	; (8015d00 <LoRaMacClassBBeaconTimingAns+0xb8>)
 8015cf0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8015cf4:	741a      	strb	r2, [r3, #16]
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015cf6:	bf00      	nop
 8015cf8:	3714      	adds	r7, #20
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	bd90      	pop	{r4, r7, pc}
 8015cfe:	bf00      	nop
 8015d00:	200020b0 	.word	0x200020b0

08015d04 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8015d04:	b590      	push	{r4, r7, lr}
 8015d06:	b08b      	sub	sp, #44	; 0x2c
 8015d08:	af02      	add	r7, sp, #8
#if ( LORAMAC_CLASSB_ENABLED == 1 )

    SysTime_t nextBeacon = SysTimeGet( );
 8015d0a:	f107 0314 	add.w	r3, r7, #20
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f007 ffb0 	bl	801dc74 <SysTimeGet>
    uint32_t currentTimeMs = SysTimeToMs( nextBeacon );
 8015d14:	f107 0314 	add.w	r3, r7, #20
 8015d18:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015d1c:	f008 f802 	bl	801dd24 <SysTimeToMs>
 8015d20:	61f8      	str	r0, [r7, #28]

    nextBeacon.Seconds = nextBeacon.Seconds + ( 128 - ( nextBeacon.Seconds % 128 ) );
 8015d22:	697b      	ldr	r3, [r7, #20]
 8015d24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015d28:	3380      	adds	r3, #128	; 0x80
 8015d2a:	617b      	str	r3, [r7, #20]
    nextBeacon.SubSeconds = 0;
 8015d2c:	2300      	movs	r3, #0
 8015d2e:	833b      	strh	r3, [r7, #24]

    Ctx.BeaconCtx.NextBeaconRx = nextBeacon;
 8015d30:	4b2e      	ldr	r3, [pc, #184]	; (8015dec <LoRaMacClassBDeviceTimeAns+0xe8>)
 8015d32:	3320      	adds	r3, #32
 8015d34:	f107 0214 	add.w	r2, r7, #20
 8015d38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015d3c:	e883 0003 	stmia.w	r3, {r0, r1}
    Ctx.BeaconCtx.LastBeaconRx = SysTimeSub( Ctx.BeaconCtx.NextBeaconRx, ( SysTime_t ){ .Seconds = CLASSB_BEACON_INTERVAL / 1000, .SubSeconds = 0 } );
 8015d40:	2380      	movs	r3, #128	; 0x80
 8015d42:	60fb      	str	r3, [r7, #12]
 8015d44:	2300      	movs	r3, #0
 8015d46:	823b      	strh	r3, [r7, #16]
 8015d48:	4c28      	ldr	r4, [pc, #160]	; (8015dec <LoRaMacClassBDeviceTimeAns+0xe8>)
 8015d4a:	4638      	mov	r0, r7
 8015d4c:	4a27      	ldr	r2, [pc, #156]	; (8015dec <LoRaMacClassBDeviceTimeAns+0xe8>)
 8015d4e:	693b      	ldr	r3, [r7, #16]
 8015d50:	9300      	str	r3, [sp, #0]
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	3220      	adds	r2, #32
 8015d56:	ca06      	ldmia	r2, {r1, r2}
 8015d58:	f007 ff25 	bl	801dba6 <SysTimeSub>
 8015d5c:	f104 0318 	add.w	r3, r4, #24
 8015d60:	463a      	mov	r2, r7
 8015d62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015d66:	e883 0003 	stmia.w	r3, {r0, r1}

    if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8015d6a:	200a      	movs	r0, #10
 8015d6c:	f000 fd74 	bl	8016858 <LoRaMacConfirmQueueIsCmdActive>
 8015d70:	4603      	mov	r3, r0
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d036      	beq.n	8015de4 <LoRaMacClassBDeviceTimeAns+0xe0>
    {
        if( currentTimeMs > SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) )
 8015d76:	4b1d      	ldr	r3, [pc, #116]	; (8015dec <LoRaMacClassBDeviceTimeAns+0xe8>)
 8015d78:	3320      	adds	r3, #32
 8015d7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015d7e:	f007 ffd1 	bl	801dd24 <SysTimeToMs>
 8015d82:	4602      	mov	r2, r0
 8015d84:	69fb      	ldr	r3, [r7, #28]
 8015d86:	4293      	cmp	r3, r2
 8015d88:	d910      	bls.n	8015dac <LoRaMacClassBDeviceTimeAns+0xa8>
        {
            // We missed the beacon already
            Ctx.BeaconCtx.LastBeaconRx.Seconds = 0;
 8015d8a:	4b18      	ldr	r3, [pc, #96]	; (8015dec <LoRaMacClassBDeviceTimeAns+0xe8>)
 8015d8c:	2200      	movs	r2, #0
 8015d8e:	619a      	str	r2, [r3, #24]
            Ctx.BeaconCtx.LastBeaconRx.SubSeconds = 0;
 8015d90:	4b16      	ldr	r3, [pc, #88]	; (8015dec <LoRaMacClassBDeviceTimeAns+0xe8>)
 8015d92:	2200      	movs	r2, #0
 8015d94:	839a      	strh	r2, [r3, #28]
            Ctx.BeaconCtx.NextBeaconRx.Seconds = 0;
 8015d96:	4b15      	ldr	r3, [pc, #84]	; (8015dec <LoRaMacClassBDeviceTimeAns+0xe8>)
 8015d98:	2200      	movs	r2, #0
 8015d9a:	621a      	str	r2, [r3, #32]
            Ctx.BeaconCtx.NextBeaconRx.SubSeconds = 0;
 8015d9c:	4b13      	ldr	r3, [pc, #76]	; (8015dec <LoRaMacClassBDeviceTimeAns+0xe8>)
 8015d9e:	2200      	movs	r2, #0
 8015da0:	849a      	strh	r2, [r3, #36]	; 0x24
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_DEVICE_TIME );
 8015da2:	210a      	movs	r1, #10
 8015da4:	2010      	movs	r0, #16
 8015da6:	f000 fccb 	bl	8016740 <LoRaMacConfirmQueueSetStatus>
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015daa:	e01b      	b.n	8015de4 <LoRaMacClassBDeviceTimeAns+0xe0>
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 8015dac:	4a0f      	ldr	r2, [pc, #60]	; (8015dec <LoRaMacClassBDeviceTimeAns+0xe8>)
 8015dae:	7b13      	ldrb	r3, [r2, #12]
 8015db0:	f043 0304 	orr.w	r3, r3, #4
 8015db4:	7313      	strb	r3, [r2, #12]
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
 8015db6:	4b0d      	ldr	r3, [pc, #52]	; (8015dec <LoRaMacClassBDeviceTimeAns+0xe8>)
 8015db8:	3320      	adds	r3, #32
 8015dba:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015dbe:	f007 ffb1 	bl	801dd24 <SysTimeToMs>
 8015dc2:	4602      	mov	r2, r0
 8015dc4:	69fb      	ldr	r3, [r7, #28]
 8015dc6:	1ad3      	subs	r3, r2, r3
 8015dc8:	4a08      	ldr	r2, [pc, #32]	; (8015dec <LoRaMacClassBDeviceTimeAns+0xe8>)
 8015dca:	6393      	str	r3, [r2, #56]	; 0x38
            Ctx.BeaconCtx.BeaconTime.Seconds = nextBeacon.Seconds - UNIX_GPS_EPOCH_OFFSET - 128;
 8015dcc:	697a      	ldr	r2, [r7, #20]
 8015dce:	4b08      	ldr	r3, [pc, #32]	; (8015df0 <LoRaMacClassBDeviceTimeAns+0xec>)
 8015dd0:	4413      	add	r3, r2
 8015dd2:	4a06      	ldr	r2, [pc, #24]	; (8015dec <LoRaMacClassBDeviceTimeAns+0xe8>)
 8015dd4:	6113      	str	r3, [r2, #16]
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 8015dd6:	4b05      	ldr	r3, [pc, #20]	; (8015dec <LoRaMacClassBDeviceTimeAns+0xe8>)
 8015dd8:	2200      	movs	r2, #0
 8015dda:	829a      	strh	r2, [r3, #20]
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8015ddc:	210a      	movs	r1, #10
 8015dde:	2000      	movs	r0, #0
 8015de0:	f000 fcae 	bl	8016740 <LoRaMacConfirmQueueSetStatus>
}
 8015de4:	bf00      	nop
 8015de6:	3724      	adds	r7, #36	; 0x24
 8015de8:	46bd      	mov	sp, r7
 8015dea:	bd90      	pop	{r4, r7, pc}
 8015dec:	200020b0 	.word	0x200020b0
 8015df0:	ed2ac200 	.word	0xed2ac200

08015df4 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b084      	sub	sp, #16
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    VerifyParams_t verify;

    if( frequency != 0 )
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d01a      	beq.n	8015e38 <LoRaMacClassBBeaconFreqReq+0x44>
    {
        verify.Frequency = frequency;
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	60fb      	str	r3, [r7, #12]

        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == true )
 8015e06:	4b13      	ldr	r3, [pc, #76]	; (8015e54 <LoRaMacClassBBeaconFreqReq+0x60>)
 8015e08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015e0c:	781b      	ldrb	r3, [r3, #0]
 8015e0e:	f107 010c 	add.w	r1, r7, #12
 8015e12:	2200      	movs	r2, #0
 8015e14:	4618      	mov	r0, r3
 8015e16:	f001 ffde 	bl	8017dd6 <RegionVerify>
 8015e1a:	4603      	mov	r3, r0
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d013      	beq.n	8015e48 <LoRaMacClassBBeaconFreqReq+0x54>
        {
            ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 1;
 8015e20:	4b0d      	ldr	r3, [pc, #52]	; (8015e58 <LoRaMacClassBBeaconFreqReq+0x64>)
 8015e22:	681a      	ldr	r2, [r3, #0]
 8015e24:	7b13      	ldrb	r3, [r2, #12]
 8015e26:	f043 0301 	orr.w	r3, r3, #1
 8015e2a:	7313      	strb	r3, [r2, #12]
            ClassBNvm->BeaconCtx.Frequency = frequency;
 8015e2c:	4b0a      	ldr	r3, [pc, #40]	; (8015e58 <LoRaMacClassBBeaconFreqReq+0x64>)
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	687a      	ldr	r2, [r7, #4]
 8015e32:	611a      	str	r2, [r3, #16]
            return true;
 8015e34:	2301      	movs	r3, #1
 8015e36:	e008      	b.n	8015e4a <LoRaMacClassBBeaconFreqReq+0x56>
        }
    }
    else
    {
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
 8015e38:	4b07      	ldr	r3, [pc, #28]	; (8015e58 <LoRaMacClassBBeaconFreqReq+0x64>)
 8015e3a:	681a      	ldr	r2, [r3, #0]
 8015e3c:	7b13      	ldrb	r3, [r2, #12]
 8015e3e:	f36f 0300 	bfc	r3, #0, #1
 8015e42:	7313      	strb	r3, [r2, #12]
        return true;
 8015e44:	2301      	movs	r3, #1
 8015e46:	e000      	b.n	8015e4a <LoRaMacClassBBeaconFreqReq+0x56>
    }
    return false;
 8015e48:	2300      	movs	r3, #0
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	3710      	adds	r7, #16
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	bd80      	pop	{r7, pc}
 8015e52:	bf00      	nop
 8015e54:	200020b0 	.word	0x200020b0
 8015e58:	20002164 	.word	0x20002164

08015e5c <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	b086      	sub	sp, #24
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8015e64:	f008 fd8c 	bl	801e980 <UTIL_TIMER_GetCurrentTime>
 8015e68:	6178      	str	r0, [r7, #20]
    TimerTime_t beaconReserved = 0;
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	613b      	str	r3, [r7, #16]
    TimerTime_t nextBeacon = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx );
 8015e6e:	4b14      	ldr	r3, [pc, #80]	; (8015ec0 <LoRaMacClassBIsUplinkCollision+0x64>)
 8015e70:	3320      	adds	r3, #32
 8015e72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015e76:	f007 ff55 	bl	801dd24 <SysTimeToMs>
 8015e7a:	60f8      	str	r0, [r7, #12]

    beaconReserved = nextBeacon -
                     CLASSB_BEACON_GUARD -
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay1 -
 8015e7c:	4b10      	ldr	r3, [pc, #64]	; (8015ec0 <LoRaMacClassBIsUplinkCollision+0x64>)
 8015e7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015e82:	68db      	ldr	r3, [r3, #12]
                     CLASSB_BEACON_GUARD -
 8015e84:	68fa      	ldr	r2, [r7, #12]
 8015e86:	1ad2      	subs	r2, r2, r3
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay2 -
 8015e88:	4b0d      	ldr	r3, [pc, #52]	; (8015ec0 <LoRaMacClassBIsUplinkCollision+0x64>)
 8015e8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015e8e:	691b      	ldr	r3, [r3, #16]
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay1 -
 8015e90:	1ad2      	subs	r2, r2, r3
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay2 -
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	1ad3      	subs	r3, r2, r3
    beaconReserved = nextBeacon -
 8015e96:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8015e9a:	613b      	str	r3, [r7, #16]
                     txTimeOnAir;

    // Check if the next beacon will be received during the next uplink.
    if( ( currentTime >= beaconReserved ) && ( currentTime < ( nextBeacon + CLASSB_BEACON_RESERVED ) ) )
 8015e9c:	697a      	ldr	r2, [r7, #20]
 8015e9e:	693b      	ldr	r3, [r7, #16]
 8015ea0:	429a      	cmp	r2, r3
 8015ea2:	d308      	bcc.n	8015eb6 <LoRaMacClassBIsUplinkCollision+0x5a>
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	f603 0348 	addw	r3, r3, #2120	; 0x848
 8015eaa:	697a      	ldr	r2, [r7, #20]
 8015eac:	429a      	cmp	r2, r3
 8015eae:	d202      	bcs.n	8015eb6 <LoRaMacClassBIsUplinkCollision+0x5a>
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
 8015eb0:	f640 0348 	movw	r3, #2120	; 0x848
 8015eb4:	e000      	b.n	8015eb8 <LoRaMacClassBIsUplinkCollision+0x5c>
    }
    return 0;
 8015eb6:	2300      	movs	r3, #0
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015eb8:	4618      	mov	r0, r3
 8015eba:	3718      	adds	r7, #24
 8015ebc:	46bd      	mov	sp, r7
 8015ebe:	bd80      	pop	{r7, pc}
 8015ec0:	200020b0 	.word	0x200020b0

08015ec4 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b084      	sub	sp, #16
 8015ec8:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    TimerStop( &Ctx.PingSlotTimer );
 8015eca:	4810      	ldr	r0, [pc, #64]	; (8015f0c <LoRaMacClassBStopRxSlots+0x48>)
 8015ecc:	f008 fc3e 	bl	801e74c <UTIL_TIMER_Stop>
    TimerStop( &Ctx.MulticastSlotTimer );
 8015ed0:	480f      	ldr	r0, [pc, #60]	; (8015f10 <LoRaMacClassBStopRxSlots+0x4c>)
 8015ed2:	f008 fc3b 	bl	801e74c <UTIL_TIMER_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8015eda:	607b      	str	r3, [r7, #4]
  return(result);
 8015edc:	687b      	ldr	r3, [r7, #4]

    CRITICAL_SECTION_BEGIN( );
 8015ede:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8015ee0:	b672      	cpsid	i
}
 8015ee2:	bf00      	nop
    LoRaMacClassBEvents.Events.PingSlot = 0;
 8015ee4:	4a0b      	ldr	r2, [pc, #44]	; (8015f14 <LoRaMacClassBStopRxSlots+0x50>)
 8015ee6:	7813      	ldrb	r3, [r2, #0]
 8015ee8:	f36f 0341 	bfc	r3, #1, #1
 8015eec:	7013      	strb	r3, [r2, #0]
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
 8015eee:	4a09      	ldr	r2, [pc, #36]	; (8015f14 <LoRaMacClassBStopRxSlots+0x50>)
 8015ef0:	7813      	ldrb	r3, [r2, #0]
 8015ef2:	f36f 0382 	bfc	r3, #2, #1
 8015ef6:	7013      	strb	r3, [r2, #0]
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015efc:	68bb      	ldr	r3, [r7, #8]
 8015efe:	f383 8810 	msr	PRIMASK, r3
}
 8015f02:	bf00      	nop
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015f04:	bf00      	nop
 8015f06:	3710      	adds	r7, #16
 8015f08:	46bd      	mov	sp, r7
 8015f0a:	bd80      	pop	{r7, pc}
 8015f0c:	2000210c 	.word	0x2000210c
 8015f10:	20002124 	.word	0x20002124
 8015f14:	200020ac 	.word	0x200020ac

08015f18 <LoRaMacClassBStartRxSlots>:

void LoRaMacClassBStartRxSlots( void )
{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	af00      	add	r7, sp, #0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( ClassBNvm->PingSlotCtx.Ctrl.Assigned == 1 )
 8015f1c:	4b0f      	ldr	r3, [pc, #60]	; (8015f5c <LoRaMacClassBStartRxSlots+0x44>)
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	781b      	ldrb	r3, [r3, #0]
 8015f22:	f003 0301 	and.w	r3, r3, #1
 8015f26:	b2db      	uxtb	r3, r3
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d015      	beq.n	8015f58 <LoRaMacClassBStartRxSlots+0x40>
    {
        Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8015f2c:	4b0c      	ldr	r3, [pc, #48]	; (8015f60 <LoRaMacClassBStartRxSlots+0x48>)
 8015f2e:	2200      	movs	r2, #0
 8015f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        TimerSetValue( &Ctx.PingSlotTimer, 1 );
 8015f34:	2101      	movs	r1, #1
 8015f36:	480b      	ldr	r0, [pc, #44]	; (8015f64 <LoRaMacClassBStartRxSlots+0x4c>)
 8015f38:	f008 fc78 	bl	801e82c <UTIL_TIMER_SetPeriod>
        TimerStart( &Ctx.PingSlotTimer );
 8015f3c:	4809      	ldr	r0, [pc, #36]	; (8015f64 <LoRaMacClassBStartRxSlots+0x4c>)
 8015f3e:	f008 fb97 	bl	801e670 <UTIL_TIMER_Start>

        Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 8015f42:	4b07      	ldr	r3, [pc, #28]	; (8015f60 <LoRaMacClassBStartRxSlots+0x48>)
 8015f44:	2200      	movs	r2, #0
 8015f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        TimerSetValue( &Ctx.MulticastSlotTimer, 1 );
 8015f4a:	2101      	movs	r1, #1
 8015f4c:	4806      	ldr	r0, [pc, #24]	; (8015f68 <LoRaMacClassBStartRxSlots+0x50>)
 8015f4e:	f008 fc6d 	bl	801e82c <UTIL_TIMER_SetPeriod>
        TimerStart( &Ctx.MulticastSlotTimer );
 8015f52:	4805      	ldr	r0, [pc, #20]	; (8015f68 <LoRaMacClassBStartRxSlots+0x50>)
 8015f54:	f008 fb8c 	bl	801e670 <UTIL_TIMER_Start>
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015f58:	bf00      	nop
 8015f5a:	bd80      	pop	{r7, pc}
 8015f5c:	20002164 	.word	0x20002164
 8015f60:	200020b0 	.word	0x200020b0
 8015f64:	2000210c 	.word	0x2000210c
 8015f68:	20002124 	.word	0x20002124

08015f6c <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	b084      	sub	sp, #16
 8015f70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015f72:	f3ef 8310 	mrs	r3, PRIMASK
 8015f76:	607b      	str	r3, [r7, #4]
  return(result);
 8015f78:	687b      	ldr	r3, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8015f7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8015f7c:	b672      	cpsid	i
}
 8015f7e:	bf00      	nop
    events = LoRaMacClassBEvents;
 8015f80:	4b15      	ldr	r3, [pc, #84]	; (8015fd8 <LoRaMacClassBProcess+0x6c>)
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	603b      	str	r3, [r7, #0]
    LoRaMacClassBEvents.Value = 0;
 8015f86:	4b14      	ldr	r3, [pc, #80]	; (8015fd8 <LoRaMacClassBProcess+0x6c>)
 8015f88:	2200      	movs	r2, #0
 8015f8a:	601a      	str	r2, [r3, #0]
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015f90:	68bb      	ldr	r3, [r7, #8]
 8015f92:	f383 8810 	msr	PRIMASK, r3
}
 8015f96:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8015f98:	683b      	ldr	r3, [r7, #0]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d017      	beq.n	8015fce <LoRaMacClassBProcess+0x62>
    {
        if( events.Events.Beacon == 1 )
 8015f9e:	783b      	ldrb	r3, [r7, #0]
 8015fa0:	f003 0301 	and.w	r3, r3, #1
 8015fa4:	b2db      	uxtb	r3, r3
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d001      	beq.n	8015fae <LoRaMacClassBProcess+0x42>
        {
            LoRaMacClassBProcessBeacon( );
 8015faa:	f7fe fec1 	bl	8014d30 <LoRaMacClassBProcessBeacon>
        }
        if( events.Events.PingSlot == 1 )
 8015fae:	783b      	ldrb	r3, [r7, #0]
 8015fb0:	f003 0302 	and.w	r3, r3, #2
 8015fb4:	b2db      	uxtb	r3, r3
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d001      	beq.n	8015fbe <LoRaMacClassBProcess+0x52>
        {
            LoRaMacClassBProcessPingSlot( );
 8015fba:	f7ff f8af 	bl	801511c <LoRaMacClassBProcessPingSlot>
        }
        if( events.Events.MulticastSlot == 1 )
 8015fbe:	783b      	ldrb	r3, [r7, #0]
 8015fc0:	f003 0304 	and.w	r3, r3, #4
 8015fc4:	b2db      	uxtb	r3, r3
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d001      	beq.n	8015fce <LoRaMacClassBProcess+0x62>
        {
            LoRaMacClassBProcessMulticastSlot( );
 8015fca:	f7ff f9b1 	bl	8015330 <LoRaMacClassBProcessMulticastSlot>
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015fce:	bf00      	nop
 8015fd0:	3710      	adds	r7, #16
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}
 8015fd6:	bf00      	nop
 8015fd8:	200020ac 	.word	0x200020ac

08015fdc <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8015fdc:	b480      	push	{r7}
 8015fde:	b085      	sub	sp, #20
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015fe8:	2300      	movs	r3, #0
 8015fea:	81fb      	strh	r3, [r7, #14]
 8015fec:	e00a      	b.n	8016004 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8015fee:	89fb      	ldrh	r3, [r7, #14]
 8015ff0:	68ba      	ldr	r2, [r7, #8]
 8015ff2:	4413      	add	r3, r2
 8015ff4:	781b      	ldrb	r3, [r3, #0]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d001      	beq.n	8015ffe <IsSlotFree+0x22>
        {
            return false;
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	e006      	b.n	801600c <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015ffe:	89fb      	ldrh	r3, [r7, #14]
 8016000:	3301      	adds	r3, #1
 8016002:	81fb      	strh	r3, [r7, #14]
 8016004:	89fb      	ldrh	r3, [r7, #14]
 8016006:	2b0f      	cmp	r3, #15
 8016008:	d9f1      	bls.n	8015fee <IsSlotFree+0x12>
        }
    }
    return true;
 801600a:	2301      	movs	r3, #1
}
 801600c:	4618      	mov	r0, r3
 801600e:	3714      	adds	r7, #20
 8016010:	46bd      	mov	sp, r7
 8016012:	bc80      	pop	{r7}
 8016014:	4770      	bx	lr
	...

08016018 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8016018:	b580      	push	{r7, lr}
 801601a:	b082      	sub	sp, #8
 801601c:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 801601e:	2300      	movs	r3, #0
 8016020:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8016022:	e007      	b.n	8016034 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8016024:	79fb      	ldrb	r3, [r7, #7]
 8016026:	3301      	adds	r3, #1
 8016028:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 801602a:	79fb      	ldrb	r3, [r7, #7]
 801602c:	2b0f      	cmp	r3, #15
 801602e:	d101      	bne.n	8016034 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8016030:	2300      	movs	r3, #0
 8016032:	e012      	b.n	801605a <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8016034:	79fb      	ldrb	r3, [r7, #7]
 8016036:	011b      	lsls	r3, r3, #4
 8016038:	3308      	adds	r3, #8
 801603a:	4a0a      	ldr	r2, [pc, #40]	; (8016064 <MallocNewMacCommandSlot+0x4c>)
 801603c:	4413      	add	r3, r2
 801603e:	4618      	mov	r0, r3
 8016040:	f7ff ffcc 	bl	8015fdc <IsSlotFree>
 8016044:	4603      	mov	r3, r0
 8016046:	f083 0301 	eor.w	r3, r3, #1
 801604a:	b2db      	uxtb	r3, r3
 801604c:	2b00      	cmp	r3, #0
 801604e:	d1e9      	bne.n	8016024 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8016050:	79fb      	ldrb	r3, [r7, #7]
 8016052:	011b      	lsls	r3, r3, #4
 8016054:	3308      	adds	r3, #8
 8016056:	4a03      	ldr	r2, [pc, #12]	; (8016064 <MallocNewMacCommandSlot+0x4c>)
 8016058:	4413      	add	r3, r2
}
 801605a:	4618      	mov	r0, r3
 801605c:	3708      	adds	r7, #8
 801605e:	46bd      	mov	sp, r7
 8016060:	bd80      	pop	{r7, pc}
 8016062:	bf00      	nop
 8016064:	20002190 	.word	0x20002190

08016068 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b082      	sub	sp, #8
 801606c:	af00      	add	r7, sp, #0
 801606e:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d101      	bne.n	801607a <FreeMacCommandSlot+0x12>
    {
        return false;
 8016076:	2300      	movs	r3, #0
 8016078:	e005      	b.n	8016086 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801607a:	2210      	movs	r2, #16
 801607c:	2100      	movs	r1, #0
 801607e:	6878      	ldr	r0, [r7, #4]
 8016080:	f004 fa54 	bl	801a52c <memset1>

    return true;
 8016084:	2301      	movs	r3, #1
}
 8016086:	4618      	mov	r0, r3
 8016088:	3708      	adds	r7, #8
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}

0801608e <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 801608e:	b480      	push	{r7}
 8016090:	b083      	sub	sp, #12
 8016092:	af00      	add	r7, sp, #0
 8016094:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d101      	bne.n	80160a0 <LinkedListInit+0x12>
    {
        return false;
 801609c:	2300      	movs	r3, #0
 801609e:	e006      	b.n	80160ae <LinkedListInit+0x20>
    }

    list->First = NULL;
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	2200      	movs	r2, #0
 80160a4:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	2200      	movs	r2, #0
 80160aa:	605a      	str	r2, [r3, #4]

    return true;
 80160ac:	2301      	movs	r3, #1
}
 80160ae:	4618      	mov	r0, r3
 80160b0:	370c      	adds	r7, #12
 80160b2:	46bd      	mov	sp, r7
 80160b4:	bc80      	pop	{r7}
 80160b6:	4770      	bx	lr

080160b8 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80160b8:	b480      	push	{r7}
 80160ba:	b083      	sub	sp, #12
 80160bc:	af00      	add	r7, sp, #0
 80160be:	6078      	str	r0, [r7, #4]
 80160c0:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d002      	beq.n	80160ce <LinkedListAdd+0x16>
 80160c8:	683b      	ldr	r3, [r7, #0]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d101      	bne.n	80160d2 <LinkedListAdd+0x1a>
    {
        return false;
 80160ce:	2300      	movs	r3, #0
 80160d0:	e015      	b.n	80160fe <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d102      	bne.n	80160e0 <LinkedListAdd+0x28>
    {
        list->First = element;
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	683a      	ldr	r2, [r7, #0]
 80160de:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	685b      	ldr	r3, [r3, #4]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d003      	beq.n	80160f0 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	685b      	ldr	r3, [r3, #4]
 80160ec:	683a      	ldr	r2, [r7, #0]
 80160ee:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80160f0:	683b      	ldr	r3, [r7, #0]
 80160f2:	2200      	movs	r2, #0
 80160f4:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	683a      	ldr	r2, [r7, #0]
 80160fa:	605a      	str	r2, [r3, #4]

    return true;
 80160fc:	2301      	movs	r3, #1
}
 80160fe:	4618      	mov	r0, r3
 8016100:	370c      	adds	r7, #12
 8016102:	46bd      	mov	sp, r7
 8016104:	bc80      	pop	{r7}
 8016106:	4770      	bx	lr

08016108 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8016108:	b480      	push	{r7}
 801610a:	b085      	sub	sp, #20
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
 8016110:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d002      	beq.n	801611e <LinkedListGetPrevious+0x16>
 8016118:	683b      	ldr	r3, [r7, #0]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d101      	bne.n	8016122 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 801611e:	2300      	movs	r3, #0
 8016120:	e016      	b.n	8016150 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8016128:	683a      	ldr	r2, [r7, #0]
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	429a      	cmp	r2, r3
 801612e:	d00c      	beq.n	801614a <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8016130:	e002      	b.n	8016138 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	2b00      	cmp	r3, #0
 801613c:	d007      	beq.n	801614e <LinkedListGetPrevious+0x46>
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	683a      	ldr	r2, [r7, #0]
 8016144:	429a      	cmp	r2, r3
 8016146:	d1f4      	bne.n	8016132 <LinkedListGetPrevious+0x2a>
 8016148:	e001      	b.n	801614e <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801614a:	2300      	movs	r3, #0
 801614c:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801614e:	68fb      	ldr	r3, [r7, #12]
}
 8016150:	4618      	mov	r0, r3
 8016152:	3714      	adds	r7, #20
 8016154:	46bd      	mov	sp, r7
 8016156:	bc80      	pop	{r7}
 8016158:	4770      	bx	lr

0801615a <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801615a:	b580      	push	{r7, lr}
 801615c:	b084      	sub	sp, #16
 801615e:	af00      	add	r7, sp, #0
 8016160:	6078      	str	r0, [r7, #4]
 8016162:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d002      	beq.n	8016170 <LinkedListRemove+0x16>
 801616a:	683b      	ldr	r3, [r7, #0]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d101      	bne.n	8016174 <LinkedListRemove+0x1a>
    {
        return false;
 8016170:	2300      	movs	r3, #0
 8016172:	e020      	b.n	80161b6 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8016174:	6839      	ldr	r1, [r7, #0]
 8016176:	6878      	ldr	r0, [r7, #4]
 8016178:	f7ff ffc6 	bl	8016108 <LinkedListGetPrevious>
 801617c:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	683a      	ldr	r2, [r7, #0]
 8016184:	429a      	cmp	r2, r3
 8016186:	d103      	bne.n	8016190 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8016188:	683b      	ldr	r3, [r7, #0]
 801618a:	681a      	ldr	r2, [r3, #0]
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	685b      	ldr	r3, [r3, #4]
 8016194:	683a      	ldr	r2, [r7, #0]
 8016196:	429a      	cmp	r2, r3
 8016198:	d102      	bne.n	80161a0 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	68fa      	ldr	r2, [r7, #12]
 801619e:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d003      	beq.n	80161ae <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80161a6:	683b      	ldr	r3, [r7, #0]
 80161a8:	681a      	ldr	r2, [r3, #0]
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80161ae:	683b      	ldr	r3, [r7, #0]
 80161b0:	2200      	movs	r2, #0
 80161b2:	601a      	str	r2, [r3, #0]

    return true;
 80161b4:	2301      	movs	r3, #1
}
 80161b6:	4618      	mov	r0, r3
 80161b8:	3710      	adds	r7, #16
 80161ba:	46bd      	mov	sp, r7
 80161bc:	bd80      	pop	{r7, pc}

080161be <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80161be:	b480      	push	{r7}
 80161c0:	b083      	sub	sp, #12
 80161c2:	af00      	add	r7, sp, #0
 80161c4:	4603      	mov	r3, r0
 80161c6:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80161c8:	79fb      	ldrb	r3, [r7, #7]
 80161ca:	2b05      	cmp	r3, #5
 80161cc:	d004      	beq.n	80161d8 <IsSticky+0x1a>
 80161ce:	2b05      	cmp	r3, #5
 80161d0:	db04      	blt.n	80161dc <IsSticky+0x1e>
 80161d2:	3b08      	subs	r3, #8
 80161d4:	2b02      	cmp	r3, #2
 80161d6:	d801      	bhi.n	80161dc <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 80161d8:	2301      	movs	r3, #1
 80161da:	e000      	b.n	80161de <IsSticky+0x20>
        default:
            return false;
 80161dc:	2300      	movs	r3, #0
    }
}
 80161de:	4618      	mov	r0, r3
 80161e0:	370c      	adds	r7, #12
 80161e2:	46bd      	mov	sp, r7
 80161e4:	bc80      	pop	{r7}
 80161e6:	4770      	bx	lr

080161e8 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80161e8:	b580      	push	{r7, lr}
 80161ea:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80161ec:	22fc      	movs	r2, #252	; 0xfc
 80161ee:	2100      	movs	r1, #0
 80161f0:	4804      	ldr	r0, [pc, #16]	; (8016204 <LoRaMacCommandsInit+0x1c>)
 80161f2:	f004 f99b 	bl	801a52c <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 80161f6:	4803      	ldr	r0, [pc, #12]	; (8016204 <LoRaMacCommandsInit+0x1c>)
 80161f8:	f7ff ff49 	bl	801608e <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 80161fc:	2300      	movs	r3, #0
}
 80161fe:	4618      	mov	r0, r3
 8016200:	bd80      	pop	{r7, pc}
 8016202:	bf00      	nop
 8016204:	20002190 	.word	0x20002190

08016208 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b086      	sub	sp, #24
 801620c:	af00      	add	r7, sp, #0
 801620e:	4603      	mov	r3, r0
 8016210:	60b9      	str	r1, [r7, #8]
 8016212:	607a      	str	r2, [r7, #4]
 8016214:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8016216:	68bb      	ldr	r3, [r7, #8]
 8016218:	2b00      	cmp	r3, #0
 801621a:	d101      	bne.n	8016220 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801621c:	2301      	movs	r3, #1
 801621e:	e033      	b.n	8016288 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8016220:	f7ff fefa 	bl	8016018 <MallocNewMacCommandSlot>
 8016224:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8016226:	697b      	ldr	r3, [r7, #20]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d101      	bne.n	8016230 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 801622c:	2302      	movs	r3, #2
 801622e:	e02b      	b.n	8016288 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8016230:	6979      	ldr	r1, [r7, #20]
 8016232:	4817      	ldr	r0, [pc, #92]	; (8016290 <LoRaMacCommandsAddCmd+0x88>)
 8016234:	f7ff ff40 	bl	80160b8 <LinkedListAdd>
 8016238:	4603      	mov	r3, r0
 801623a:	f083 0301 	eor.w	r3, r3, #1
 801623e:	b2db      	uxtb	r3, r3
 8016240:	2b00      	cmp	r3, #0
 8016242:	d001      	beq.n	8016248 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8016244:	2305      	movs	r3, #5
 8016246:	e01f      	b.n	8016288 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8016248:	697b      	ldr	r3, [r7, #20]
 801624a:	7bfa      	ldrb	r2, [r7, #15]
 801624c:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801624e:	697b      	ldr	r3, [r7, #20]
 8016250:	687a      	ldr	r2, [r7, #4]
 8016252:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8016254:	697b      	ldr	r3, [r7, #20]
 8016256:	3305      	adds	r3, #5
 8016258:	687a      	ldr	r2, [r7, #4]
 801625a:	b292      	uxth	r2, r2
 801625c:	68b9      	ldr	r1, [r7, #8]
 801625e:	4618      	mov	r0, r3
 8016260:	f004 f929 	bl	801a4b6 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8016264:	7bfb      	ldrb	r3, [r7, #15]
 8016266:	4618      	mov	r0, r3
 8016268:	f7ff ffa9 	bl	80161be <IsSticky>
 801626c:	4603      	mov	r3, r0
 801626e:	461a      	mov	r2, r3
 8016270:	697b      	ldr	r3, [r7, #20]
 8016272:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8016274:	4b06      	ldr	r3, [pc, #24]	; (8016290 <LoRaMacCommandsAddCmd+0x88>)
 8016276:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	4413      	add	r3, r2
 801627e:	3301      	adds	r3, #1
 8016280:	4a03      	ldr	r2, [pc, #12]	; (8016290 <LoRaMacCommandsAddCmd+0x88>)
 8016282:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8016286:	2300      	movs	r3, #0
}
 8016288:	4618      	mov	r0, r3
 801628a:	3718      	adds	r7, #24
 801628c:	46bd      	mov	sp, r7
 801628e:	bd80      	pop	{r7, pc}
 8016290:	20002190 	.word	0x20002190

08016294 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b082      	sub	sp, #8
 8016298:	af00      	add	r7, sp, #0
 801629a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d101      	bne.n	80162a6 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80162a2:	2301      	movs	r3, #1
 80162a4:	e021      	b.n	80162ea <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80162a6:	6879      	ldr	r1, [r7, #4]
 80162a8:	4812      	ldr	r0, [pc, #72]	; (80162f4 <LoRaMacCommandsRemoveCmd+0x60>)
 80162aa:	f7ff ff56 	bl	801615a <LinkedListRemove>
 80162ae:	4603      	mov	r3, r0
 80162b0:	f083 0301 	eor.w	r3, r3, #1
 80162b4:	b2db      	uxtb	r3, r3
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d001      	beq.n	80162be <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80162ba:	2303      	movs	r3, #3
 80162bc:	e015      	b.n	80162ea <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80162be:	4b0d      	ldr	r3, [pc, #52]	; (80162f4 <LoRaMacCommandsRemoveCmd+0x60>)
 80162c0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	689b      	ldr	r3, [r3, #8]
 80162c8:	1ad3      	subs	r3, r2, r3
 80162ca:	3b01      	subs	r3, #1
 80162cc:	4a09      	ldr	r2, [pc, #36]	; (80162f4 <LoRaMacCommandsRemoveCmd+0x60>)
 80162ce:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80162d2:	6878      	ldr	r0, [r7, #4]
 80162d4:	f7ff fec8 	bl	8016068 <FreeMacCommandSlot>
 80162d8:	4603      	mov	r3, r0
 80162da:	f083 0301 	eor.w	r3, r3, #1
 80162de:	b2db      	uxtb	r3, r3
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d001      	beq.n	80162e8 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 80162e4:	2305      	movs	r3, #5
 80162e6:	e000      	b.n	80162ea <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80162e8:	2300      	movs	r3, #0
}
 80162ea:	4618      	mov	r0, r3
 80162ec:	3708      	adds	r7, #8
 80162ee:	46bd      	mov	sp, r7
 80162f0:	bd80      	pop	{r7, pc}
 80162f2:	bf00      	nop
 80162f4:	20002190 	.word	0x20002190

080162f8 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b082      	sub	sp, #8
 80162fc:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80162fe:	4b0f      	ldr	r3, [pc, #60]	; (801633c <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8016304:	e012      	b.n	801632c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	7b1b      	ldrb	r3, [r3, #12]
 801630a:	f083 0301 	eor.w	r3, r3, #1
 801630e:	b2db      	uxtb	r3, r3
 8016310:	2b00      	cmp	r3, #0
 8016312:	d008      	beq.n	8016326 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801631a:	6878      	ldr	r0, [r7, #4]
 801631c:	f7ff ffba 	bl	8016294 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8016320:	683b      	ldr	r3, [r7, #0]
 8016322:	607b      	str	r3, [r7, #4]
 8016324:	e002      	b.n	801632c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d1e9      	bne.n	8016306 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8016332:	2300      	movs	r3, #0
}
 8016334:	4618      	mov	r0, r3
 8016336:	3708      	adds	r7, #8
 8016338:	46bd      	mov	sp, r7
 801633a:	bd80      	pop	{r7, pc}
 801633c:	20002190 	.word	0x20002190

08016340 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8016340:	b580      	push	{r7, lr}
 8016342:	b082      	sub	sp, #8
 8016344:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8016346:	4b0e      	ldr	r3, [pc, #56]	; (8016380 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801634c:	e00f      	b.n	801636e <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	791b      	ldrb	r3, [r3, #4]
 8016358:	4618      	mov	r0, r3
 801635a:	f7ff ff30 	bl	80161be <IsSticky>
 801635e:	4603      	mov	r3, r0
 8016360:	2b00      	cmp	r3, #0
 8016362:	d002      	beq.n	801636a <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8016364:	6878      	ldr	r0, [r7, #4]
 8016366:	f7ff ff95 	bl	8016294 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 801636a:	683b      	ldr	r3, [r7, #0]
 801636c:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d1ec      	bne.n	801634e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8016374:	2300      	movs	r3, #0
}
 8016376:	4618      	mov	r0, r3
 8016378:	3708      	adds	r7, #8
 801637a:	46bd      	mov	sp, r7
 801637c:	bd80      	pop	{r7, pc}
 801637e:	bf00      	nop
 8016380:	20002190 	.word	0x20002190

08016384 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8016384:	b480      	push	{r7}
 8016386:	b083      	sub	sp, #12
 8016388:	af00      	add	r7, sp, #0
 801638a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d101      	bne.n	8016396 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8016392:	2301      	movs	r3, #1
 8016394:	e005      	b.n	80163a2 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8016396:	4b05      	ldr	r3, [pc, #20]	; (80163ac <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8016398:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80163a0:	2300      	movs	r3, #0
}
 80163a2:	4618      	mov	r0, r3
 80163a4:	370c      	adds	r7, #12
 80163a6:	46bd      	mov	sp, r7
 80163a8:	bc80      	pop	{r7}
 80163aa:	4770      	bx	lr
 80163ac:	20002190 	.word	0x20002190

080163b0 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b088      	sub	sp, #32
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	60f8      	str	r0, [r7, #12]
 80163b8:	60b9      	str	r1, [r7, #8]
 80163ba:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80163bc:	4b25      	ldr	r3, [pc, #148]	; (8016454 <LoRaMacCommandsSerializeCmds+0xa4>)
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80163c2:	2300      	movs	r3, #0
 80163c4:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d002      	beq.n	80163d2 <LoRaMacCommandsSerializeCmds+0x22>
 80163cc:	68bb      	ldr	r3, [r7, #8]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d126      	bne.n	8016420 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80163d2:	2301      	movs	r3, #1
 80163d4:	e039      	b.n	801644a <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80163d6:	7efb      	ldrb	r3, [r7, #27]
 80163d8:	68fa      	ldr	r2, [r7, #12]
 80163da:	1ad2      	subs	r2, r2, r3
 80163dc:	69fb      	ldr	r3, [r7, #28]
 80163de:	689b      	ldr	r3, [r3, #8]
 80163e0:	3301      	adds	r3, #1
 80163e2:	429a      	cmp	r2, r3
 80163e4:	d320      	bcc.n	8016428 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80163e6:	7efb      	ldrb	r3, [r7, #27]
 80163e8:	1c5a      	adds	r2, r3, #1
 80163ea:	76fa      	strb	r2, [r7, #27]
 80163ec:	461a      	mov	r2, r3
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	4413      	add	r3, r2
 80163f2:	69fa      	ldr	r2, [r7, #28]
 80163f4:	7912      	ldrb	r2, [r2, #4]
 80163f6:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80163f8:	7efb      	ldrb	r3, [r7, #27]
 80163fa:	687a      	ldr	r2, [r7, #4]
 80163fc:	18d0      	adds	r0, r2, r3
 80163fe:	69fb      	ldr	r3, [r7, #28]
 8016400:	1d59      	adds	r1, r3, #5
 8016402:	69fb      	ldr	r3, [r7, #28]
 8016404:	689b      	ldr	r3, [r3, #8]
 8016406:	b29b      	uxth	r3, r3
 8016408:	461a      	mov	r2, r3
 801640a:	f004 f854 	bl	801a4b6 <memcpy1>
            itr += curElement->PayloadSize;
 801640e:	69fb      	ldr	r3, [r7, #28]
 8016410:	689b      	ldr	r3, [r3, #8]
 8016412:	b2da      	uxtb	r2, r3
 8016414:	7efb      	ldrb	r3, [r7, #27]
 8016416:	4413      	add	r3, r2
 8016418:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 801641a:	69fb      	ldr	r3, [r7, #28]
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8016420:	69fb      	ldr	r3, [r7, #28]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d1d7      	bne.n	80163d6 <LoRaMacCommandsSerializeCmds+0x26>
 8016426:	e009      	b.n	801643c <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8016428:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 801642a:	e007      	b.n	801643c <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 801642c:	69fb      	ldr	r3, [r7, #28]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8016432:	69f8      	ldr	r0, [r7, #28]
 8016434:	f7ff ff2e 	bl	8016294 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8016438:	697b      	ldr	r3, [r7, #20]
 801643a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801643c:	69fb      	ldr	r3, [r7, #28]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d1f4      	bne.n	801642c <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8016442:	68b8      	ldr	r0, [r7, #8]
 8016444:	f7ff ff9e 	bl	8016384 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8016448:	2300      	movs	r3, #0
}
 801644a:	4618      	mov	r0, r3
 801644c:	3720      	adds	r7, #32
 801644e:	46bd      	mov	sp, r7
 8016450:	bd80      	pop	{r7, pc}
 8016452:	bf00      	nop
 8016454:	20002190 	.word	0x20002190

08016458 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8016458:	b480      	push	{r7}
 801645a:	b085      	sub	sp, #20
 801645c:	af00      	add	r7, sp, #0
 801645e:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d101      	bne.n	801646a <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8016466:	2301      	movs	r3, #1
 8016468:	e016      	b.n	8016498 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 801646a:	4b0e      	ldr	r3, [pc, #56]	; (80164a4 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	2200      	movs	r2, #0
 8016474:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8016476:	e00b      	b.n	8016490 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	7b1b      	ldrb	r3, [r3, #12]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d004      	beq.n	801648a <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	2201      	movs	r2, #1
 8016484:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8016486:	2300      	movs	r3, #0
 8016488:	e006      	b.n	8016498 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d1f0      	bne.n	8016478 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8016496:	2300      	movs	r3, #0
}
 8016498:	4618      	mov	r0, r3
 801649a:	3714      	adds	r7, #20
 801649c:	46bd      	mov	sp, r7
 801649e:	bc80      	pop	{r7}
 80164a0:	4770      	bx	lr
 80164a2:	bf00      	nop
 80164a4:	20002190 	.word	0x20002190

080164a8 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80164a8:	b480      	push	{r7}
 80164aa:	b085      	sub	sp, #20
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	4603      	mov	r3, r0
 80164b0:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 80164b2:	2300      	movs	r3, #0
 80164b4:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 80164b6:	79fb      	ldrb	r3, [r7, #7]
 80164b8:	3b02      	subs	r3, #2
 80164ba:	2b11      	cmp	r3, #17
 80164bc:	d850      	bhi.n	8016560 <LoRaMacCommandsGetCmdSize+0xb8>
 80164be:	a201      	add	r2, pc, #4	; (adr r2, 80164c4 <LoRaMacCommandsGetCmdSize+0x1c>)
 80164c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164c4:	0801650d 	.word	0x0801650d
 80164c8:	08016513 	.word	0x08016513
 80164cc:	08016519 	.word	0x08016519
 80164d0:	0801651f 	.word	0x0801651f
 80164d4:	08016525 	.word	0x08016525
 80164d8:	0801652b 	.word	0x0801652b
 80164dc:	08016531 	.word	0x08016531
 80164e0:	08016537 	.word	0x08016537
 80164e4:	0801653d 	.word	0x0801653d
 80164e8:	08016561 	.word	0x08016561
 80164ec:	08016561 	.word	0x08016561
 80164f0:	08016543 	.word	0x08016543
 80164f4:	08016561 	.word	0x08016561
 80164f8:	08016561 	.word	0x08016561
 80164fc:	08016549 	.word	0x08016549
 8016500:	0801654f 	.word	0x0801654f
 8016504:	08016555 	.word	0x08016555
 8016508:	0801655b 	.word	0x0801655b
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 801650c:	2303      	movs	r3, #3
 801650e:	73fb      	strb	r3, [r7, #15]
            break;
 8016510:	e027      	b.n	8016562 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8016512:	2305      	movs	r3, #5
 8016514:	73fb      	strb	r3, [r7, #15]
            break;
 8016516:	e024      	b.n	8016562 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8016518:	2302      	movs	r3, #2
 801651a:	73fb      	strb	r3, [r7, #15]
            break;
 801651c:	e021      	b.n	8016562 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801651e:	2305      	movs	r3, #5
 8016520:	73fb      	strb	r3, [r7, #15]
            break;
 8016522:	e01e      	b.n	8016562 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8016524:	2301      	movs	r3, #1
 8016526:	73fb      	strb	r3, [r7, #15]
            break;
 8016528:	e01b      	b.n	8016562 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 801652a:	2306      	movs	r3, #6
 801652c:	73fb      	strb	r3, [r7, #15]
            break;
 801652e:	e018      	b.n	8016562 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8016530:	2302      	movs	r3, #2
 8016532:	73fb      	strb	r3, [r7, #15]
            break;
 8016534:	e015      	b.n	8016562 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8016536:	2302      	movs	r3, #2
 8016538:	73fb      	strb	r3, [r7, #15]
            break;
 801653a:	e012      	b.n	8016562 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 801653c:	2305      	movs	r3, #5
 801653e:	73fb      	strb	r3, [r7, #15]
            break;
 8016540:	e00f      	b.n	8016562 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8016542:	2306      	movs	r3, #6
 8016544:	73fb      	strb	r3, [r7, #15]
            break;
 8016546:	e00c      	b.n	8016562 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8016548:	2301      	movs	r3, #1
 801654a:	73fb      	strb	r3, [r7, #15]
            break;
 801654c:	e009      	b.n	8016562 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801654e:	2305      	movs	r3, #5
 8016550:	73fb      	strb	r3, [r7, #15]
            break;
 8016552:	e006      	b.n	8016562 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8016554:	2304      	movs	r3, #4
 8016556:	73fb      	strb	r3, [r7, #15]
            break;
 8016558:	e003      	b.n	8016562 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 801655a:	2304      	movs	r3, #4
 801655c:	73fb      	strb	r3, [r7, #15]
            break;
 801655e:	e000      	b.n	8016562 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8016560:	bf00      	nop
        }
    }
    return cidSize;
 8016562:	7bfb      	ldrb	r3, [r7, #15]
}
 8016564:	4618      	mov	r0, r3
 8016566:	3714      	adds	r7, #20
 8016568:	46bd      	mov	sp, r7
 801656a:	bc80      	pop	{r7}
 801656c:	4770      	bx	lr
 801656e:	bf00      	nop

08016570 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8016570:	b480      	push	{r7}
 8016572:	b083      	sub	sp, #12
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	4a07      	ldr	r2, [pc, #28]	; (8016598 <IncreaseBufferPointer+0x28>)
 801657c:	4293      	cmp	r3, r2
 801657e:	d102      	bne.n	8016586 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8016580:	4b06      	ldr	r3, [pc, #24]	; (801659c <IncreaseBufferPointer+0x2c>)
 8016582:	607b      	str	r3, [r7, #4]
 8016584:	e002      	b.n	801658c <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	3304      	adds	r3, #4
 801658a:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 801658c:	687b      	ldr	r3, [r7, #4]
}
 801658e:	4618      	mov	r0, r3
 8016590:	370c      	adds	r7, #12
 8016592:	46bd      	mov	sp, r7
 8016594:	bc80      	pop	{r7}
 8016596:	4770      	bx	lr
 8016598:	200022a8 	.word	0x200022a8
 801659c:	20002298 	.word	0x20002298

080165a0 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 80165a0:	b480      	push	{r7}
 80165a2:	b083      	sub	sp, #12
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	4603      	mov	r3, r0
 80165a8:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 80165aa:	79fb      	ldrb	r3, [r7, #7]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d101      	bne.n	80165b4 <IsListEmpty+0x14>
    {
        return true;
 80165b0:	2301      	movs	r3, #1
 80165b2:	e000      	b.n	80165b6 <IsListEmpty+0x16>
    }
    return false;
 80165b4:	2300      	movs	r3, #0
}
 80165b6:	4618      	mov	r0, r3
 80165b8:	370c      	adds	r7, #12
 80165ba:	46bd      	mov	sp, r7
 80165bc:	bc80      	pop	{r7}
 80165be:	4770      	bx	lr

080165c0 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 80165c0:	b480      	push	{r7}
 80165c2:	b083      	sub	sp, #12
 80165c4:	af00      	add	r7, sp, #0
 80165c6:	4603      	mov	r3, r0
 80165c8:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80165ca:	79fb      	ldrb	r3, [r7, #7]
 80165cc:	2b04      	cmp	r3, #4
 80165ce:	d901      	bls.n	80165d4 <IsListFull+0x14>
    {
        return true;
 80165d0:	2301      	movs	r3, #1
 80165d2:	e000      	b.n	80165d6 <IsListFull+0x16>
    }
    return false;
 80165d4:	2300      	movs	r3, #0
}
 80165d6:	4618      	mov	r0, r3
 80165d8:	370c      	adds	r7, #12
 80165da:	46bd      	mov	sp, r7
 80165dc:	bc80      	pop	{r7}
 80165de:	4770      	bx	lr

080165e0 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80165e0:	b580      	push	{r7, lr}
 80165e2:	b086      	sub	sp, #24
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	4603      	mov	r3, r0
 80165e8:	60b9      	str	r1, [r7, #8]
 80165ea:	607a      	str	r2, [r7, #4]
 80165ec:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 80165ee:	68bb      	ldr	r3, [r7, #8]
 80165f0:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80165f2:	4b13      	ldr	r3, [pc, #76]	; (8016640 <GetElement+0x60>)
 80165f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80165f8:	4618      	mov	r0, r3
 80165fa:	f7ff ffd1 	bl	80165a0 <IsListEmpty>
 80165fe:	4603      	mov	r3, r0
 8016600:	2b00      	cmp	r3, #0
 8016602:	d001      	beq.n	8016608 <GetElement+0x28>
    {
        return NULL;
 8016604:	2300      	movs	r3, #0
 8016606:	e017      	b.n	8016638 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8016608:	2300      	movs	r3, #0
 801660a:	74fb      	strb	r3, [r7, #19]
 801660c:	e00d      	b.n	801662a <GetElement+0x4a>
    {
        if( element->Request == request )
 801660e:	697b      	ldr	r3, [r7, #20]
 8016610:	781b      	ldrb	r3, [r3, #0]
 8016612:	7bfa      	ldrb	r2, [r7, #15]
 8016614:	429a      	cmp	r2, r3
 8016616:	d101      	bne.n	801661c <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8016618:	697b      	ldr	r3, [r7, #20]
 801661a:	e00d      	b.n	8016638 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 801661c:	6978      	ldr	r0, [r7, #20]
 801661e:	f7ff ffa7 	bl	8016570 <IncreaseBufferPointer>
 8016622:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8016624:	7cfb      	ldrb	r3, [r7, #19]
 8016626:	3301      	adds	r3, #1
 8016628:	74fb      	strb	r3, [r7, #19]
 801662a:	4b05      	ldr	r3, [pc, #20]	; (8016640 <GetElement+0x60>)
 801662c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016630:	7cfa      	ldrb	r2, [r7, #19]
 8016632:	429a      	cmp	r2, r3
 8016634:	d3eb      	bcc.n	801660e <GetElement+0x2e>
    }

    return NULL;
 8016636:	2300      	movs	r3, #0
}
 8016638:	4618      	mov	r0, r3
 801663a:	3718      	adds	r7, #24
 801663c:	46bd      	mov	sp, r7
 801663e:	bd80      	pop	{r7, pc}
 8016640:	2000228c 	.word	0x2000228c

08016644 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b082      	sub	sp, #8
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 801664c:	4a0c      	ldr	r2, [pc, #48]	; (8016680 <LoRaMacConfirmQueueInit+0x3c>)
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8016652:	4b0b      	ldr	r3, [pc, #44]	; (8016680 <LoRaMacConfirmQueueInit+0x3c>)
 8016654:	2200      	movs	r2, #0
 8016656:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801665a:	4b09      	ldr	r3, [pc, #36]	; (8016680 <LoRaMacConfirmQueueInit+0x3c>)
 801665c:	4a09      	ldr	r2, [pc, #36]	; (8016684 <LoRaMacConfirmQueueInit+0x40>)
 801665e:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8016660:	4b07      	ldr	r3, [pc, #28]	; (8016680 <LoRaMacConfirmQueueInit+0x3c>)
 8016662:	4a08      	ldr	r2, [pc, #32]	; (8016684 <LoRaMacConfirmQueueInit+0x40>)
 8016664:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8016666:	2214      	movs	r2, #20
 8016668:	21ff      	movs	r1, #255	; 0xff
 801666a:	4806      	ldr	r0, [pc, #24]	; (8016684 <LoRaMacConfirmQueueInit+0x40>)
 801666c:	f003 ff5e 	bl	801a52c <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8016670:	4b03      	ldr	r3, [pc, #12]	; (8016680 <LoRaMacConfirmQueueInit+0x3c>)
 8016672:	2201      	movs	r2, #1
 8016674:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8016678:	bf00      	nop
 801667a:	3708      	adds	r7, #8
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}
 8016680:	2000228c 	.word	0x2000228c
 8016684:	20002298 	.word	0x20002298

08016688 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b082      	sub	sp, #8
 801668c:	af00      	add	r7, sp, #0
 801668e:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8016690:	4b19      	ldr	r3, [pc, #100]	; (80166f8 <LoRaMacConfirmQueueAdd+0x70>)
 8016692:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016696:	4618      	mov	r0, r3
 8016698:	f7ff ff92 	bl	80165c0 <IsListFull>
 801669c:	4603      	mov	r3, r0
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d001      	beq.n	80166a6 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80166a2:	2300      	movs	r3, #0
 80166a4:	e023      	b.n	80166ee <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80166a6:	4b14      	ldr	r3, [pc, #80]	; (80166f8 <LoRaMacConfirmQueueAdd+0x70>)
 80166a8:	689b      	ldr	r3, [r3, #8]
 80166aa:	687a      	ldr	r2, [r7, #4]
 80166ac:	7812      	ldrb	r2, [r2, #0]
 80166ae:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80166b0:	4b11      	ldr	r3, [pc, #68]	; (80166f8 <LoRaMacConfirmQueueAdd+0x70>)
 80166b2:	689b      	ldr	r3, [r3, #8]
 80166b4:	687a      	ldr	r2, [r7, #4]
 80166b6:	7852      	ldrb	r2, [r2, #1]
 80166b8:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80166ba:	4b0f      	ldr	r3, [pc, #60]	; (80166f8 <LoRaMacConfirmQueueAdd+0x70>)
 80166bc:	689b      	ldr	r3, [r3, #8]
 80166be:	687a      	ldr	r2, [r7, #4]
 80166c0:	78d2      	ldrb	r2, [r2, #3]
 80166c2:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 80166c4:	4b0c      	ldr	r3, [pc, #48]	; (80166f8 <LoRaMacConfirmQueueAdd+0x70>)
 80166c6:	689b      	ldr	r3, [r3, #8]
 80166c8:	2200      	movs	r2, #0
 80166ca:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80166cc:	4b0a      	ldr	r3, [pc, #40]	; (80166f8 <LoRaMacConfirmQueueAdd+0x70>)
 80166ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80166d2:	3301      	adds	r3, #1
 80166d4:	b2da      	uxtb	r2, r3
 80166d6:	4b08      	ldr	r3, [pc, #32]	; (80166f8 <LoRaMacConfirmQueueAdd+0x70>)
 80166d8:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80166dc:	4b06      	ldr	r3, [pc, #24]	; (80166f8 <LoRaMacConfirmQueueAdd+0x70>)
 80166de:	689b      	ldr	r3, [r3, #8]
 80166e0:	4618      	mov	r0, r3
 80166e2:	f7ff ff45 	bl	8016570 <IncreaseBufferPointer>
 80166e6:	4603      	mov	r3, r0
 80166e8:	4a03      	ldr	r2, [pc, #12]	; (80166f8 <LoRaMacConfirmQueueAdd+0x70>)
 80166ea:	6093      	str	r3, [r2, #8]

    return true;
 80166ec:	2301      	movs	r3, #1
}
 80166ee:	4618      	mov	r0, r3
 80166f0:	3708      	adds	r7, #8
 80166f2:	46bd      	mov	sp, r7
 80166f4:	bd80      	pop	{r7, pc}
 80166f6:	bf00      	nop
 80166f8:	2000228c 	.word	0x2000228c

080166fc <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8016700:	4b0e      	ldr	r3, [pc, #56]	; (801673c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016702:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016706:	4618      	mov	r0, r3
 8016708:	f7ff ff4a 	bl	80165a0 <IsListEmpty>
 801670c:	4603      	mov	r3, r0
 801670e:	2b00      	cmp	r3, #0
 8016710:	d001      	beq.n	8016716 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8016712:	2300      	movs	r3, #0
 8016714:	e010      	b.n	8016738 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8016716:	4b09      	ldr	r3, [pc, #36]	; (801673c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016718:	f893 3020 	ldrb.w	r3, [r3, #32]
 801671c:	3b01      	subs	r3, #1
 801671e:	b2da      	uxtb	r2, r3
 8016720:	4b06      	ldr	r3, [pc, #24]	; (801673c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016722:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8016726:	4b05      	ldr	r3, [pc, #20]	; (801673c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016728:	685b      	ldr	r3, [r3, #4]
 801672a:	4618      	mov	r0, r3
 801672c:	f7ff ff20 	bl	8016570 <IncreaseBufferPointer>
 8016730:	4603      	mov	r3, r0
 8016732:	4a02      	ldr	r2, [pc, #8]	; (801673c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016734:	6053      	str	r3, [r2, #4]

    return true;
 8016736:	2301      	movs	r3, #1
}
 8016738:	4618      	mov	r0, r3
 801673a:	bd80      	pop	{r7, pc}
 801673c:	2000228c 	.word	0x2000228c

08016740 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b084      	sub	sp, #16
 8016744:	af00      	add	r7, sp, #0
 8016746:	4603      	mov	r3, r0
 8016748:	460a      	mov	r2, r1
 801674a:	71fb      	strb	r3, [r7, #7]
 801674c:	4613      	mov	r3, r2
 801674e:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8016750:	2300      	movs	r3, #0
 8016752:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8016754:	4b10      	ldr	r3, [pc, #64]	; (8016798 <LoRaMacConfirmQueueSetStatus+0x58>)
 8016756:	f893 3020 	ldrb.w	r3, [r3, #32]
 801675a:	4618      	mov	r0, r3
 801675c:	f7ff ff20 	bl	80165a0 <IsListEmpty>
 8016760:	4603      	mov	r3, r0
 8016762:	f083 0301 	eor.w	r3, r3, #1
 8016766:	b2db      	uxtb	r3, r3
 8016768:	2b00      	cmp	r3, #0
 801676a:	d011      	beq.n	8016790 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801676c:	4b0a      	ldr	r3, [pc, #40]	; (8016798 <LoRaMacConfirmQueueSetStatus+0x58>)
 801676e:	6859      	ldr	r1, [r3, #4]
 8016770:	4b09      	ldr	r3, [pc, #36]	; (8016798 <LoRaMacConfirmQueueSetStatus+0x58>)
 8016772:	689a      	ldr	r2, [r3, #8]
 8016774:	79bb      	ldrb	r3, [r7, #6]
 8016776:	4618      	mov	r0, r3
 8016778:	f7ff ff32 	bl	80165e0 <GetElement>
 801677c:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	2b00      	cmp	r3, #0
 8016782:	d005      	beq.n	8016790 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	79fa      	ldrb	r2, [r7, #7]
 8016788:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	2201      	movs	r2, #1
 801678e:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8016790:	bf00      	nop
 8016792:	3710      	adds	r7, #16
 8016794:	46bd      	mov	sp, r7
 8016796:	bd80      	pop	{r7, pc}
 8016798:	2000228c 	.word	0x2000228c

0801679c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 801679c:	b580      	push	{r7, lr}
 801679e:	b084      	sub	sp, #16
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	4603      	mov	r3, r0
 80167a4:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80167a6:	2300      	movs	r3, #0
 80167a8:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80167aa:	4b10      	ldr	r3, [pc, #64]	; (80167ec <LoRaMacConfirmQueueGetStatus+0x50>)
 80167ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80167b0:	4618      	mov	r0, r3
 80167b2:	f7ff fef5 	bl	80165a0 <IsListEmpty>
 80167b6:	4603      	mov	r3, r0
 80167b8:	f083 0301 	eor.w	r3, r3, #1
 80167bc:	b2db      	uxtb	r3, r3
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d00e      	beq.n	80167e0 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80167c2:	4b0a      	ldr	r3, [pc, #40]	; (80167ec <LoRaMacConfirmQueueGetStatus+0x50>)
 80167c4:	6859      	ldr	r1, [r3, #4]
 80167c6:	4b09      	ldr	r3, [pc, #36]	; (80167ec <LoRaMacConfirmQueueGetStatus+0x50>)
 80167c8:	689a      	ldr	r2, [r3, #8]
 80167ca:	79fb      	ldrb	r3, [r7, #7]
 80167cc:	4618      	mov	r0, r3
 80167ce:	f7ff ff07 	bl	80165e0 <GetElement>
 80167d2:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d002      	beq.n	80167e0 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	785b      	ldrb	r3, [r3, #1]
 80167de:	e000      	b.n	80167e2 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80167e0:	2301      	movs	r3, #1
}
 80167e2:	4618      	mov	r0, r3
 80167e4:	3710      	adds	r7, #16
 80167e6:	46bd      	mov	sp, r7
 80167e8:	bd80      	pop	{r7, pc}
 80167ea:	bf00      	nop
 80167ec:	2000228c 	.word	0x2000228c

080167f0 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80167f0:	b580      	push	{r7, lr}
 80167f2:	b084      	sub	sp, #16
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	4603      	mov	r3, r0
 80167f8:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80167fa:	4b16      	ldr	r3, [pc, #88]	; (8016854 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80167fc:	685b      	ldr	r3, [r3, #4]
 80167fe:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8016800:	4a14      	ldr	r2, [pc, #80]	; (8016854 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016802:	79fb      	ldrb	r3, [r7, #7]
 8016804:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8016808:	4b12      	ldr	r3, [pc, #72]	; (8016854 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801680a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801680e:	4618      	mov	r0, r3
 8016810:	f7ff fec6 	bl	80165a0 <IsListEmpty>
 8016814:	4603      	mov	r3, r0
 8016816:	f083 0301 	eor.w	r3, r3, #1
 801681a:	b2db      	uxtb	r3, r3
 801681c:	2b00      	cmp	r3, #0
 801681e:	d015      	beq.n	801684c <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	79fa      	ldrb	r2, [r7, #7]
 8016824:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	78db      	ldrb	r3, [r3, #3]
 801682a:	f083 0301 	eor.w	r3, r3, #1
 801682e:	b2db      	uxtb	r3, r3
 8016830:	2b00      	cmp	r3, #0
 8016832:	d002      	beq.n	801683a <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	2201      	movs	r2, #1
 8016838:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801683a:	68f8      	ldr	r0, [r7, #12]
 801683c:	f7ff fe98 	bl	8016570 <IncreaseBufferPointer>
 8016840:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8016842:	4b04      	ldr	r3, [pc, #16]	; (8016854 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016844:	689b      	ldr	r3, [r3, #8]
 8016846:	68fa      	ldr	r2, [r7, #12]
 8016848:	429a      	cmp	r2, r3
 801684a:	d1e9      	bne.n	8016820 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 801684c:	bf00      	nop
 801684e:	3710      	adds	r7, #16
 8016850:	46bd      	mov	sp, r7
 8016852:	bd80      	pop	{r7, pc}
 8016854:	2000228c 	.word	0x2000228c

08016858 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8016858:	b580      	push	{r7, lr}
 801685a:	b082      	sub	sp, #8
 801685c:	af00      	add	r7, sp, #0
 801685e:	4603      	mov	r3, r0
 8016860:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8016862:	4b09      	ldr	r3, [pc, #36]	; (8016888 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8016864:	6859      	ldr	r1, [r3, #4]
 8016866:	4b08      	ldr	r3, [pc, #32]	; (8016888 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8016868:	689a      	ldr	r2, [r3, #8]
 801686a:	79fb      	ldrb	r3, [r7, #7]
 801686c:	4618      	mov	r0, r3
 801686e:	f7ff feb7 	bl	80165e0 <GetElement>
 8016872:	4603      	mov	r3, r0
 8016874:	2b00      	cmp	r3, #0
 8016876:	d001      	beq.n	801687c <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8016878:	2301      	movs	r3, #1
 801687a:	e000      	b.n	801687e <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 801687c:	2300      	movs	r3, #0
}
 801687e:	4618      	mov	r0, r3
 8016880:	3708      	adds	r7, #8
 8016882:	46bd      	mov	sp, r7
 8016884:	bd80      	pop	{r7, pc}
 8016886:	bf00      	nop
 8016888:	2000228c 	.word	0x2000228c

0801688c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 801688c:	b580      	push	{r7, lr}
 801688e:	b084      	sub	sp, #16
 8016890:	af00      	add	r7, sp, #0
 8016892:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8016894:	4b22      	ldr	r3, [pc, #136]	; (8016920 <LoRaMacConfirmQueueHandleCb+0x94>)
 8016896:	f893 3020 	ldrb.w	r3, [r3, #32]
 801689a:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 801689c:	2300      	movs	r3, #0
 801689e:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 80168a0:	2300      	movs	r3, #0
 80168a2:	73fb      	strb	r3, [r7, #15]
 80168a4:	e032      	b.n	801690c <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80168a6:	4b1e      	ldr	r3, [pc, #120]	; (8016920 <LoRaMacConfirmQueueHandleCb+0x94>)
 80168a8:	685b      	ldr	r3, [r3, #4]
 80168aa:	781a      	ldrb	r2, [r3, #0]
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80168b0:	4b1b      	ldr	r3, [pc, #108]	; (8016920 <LoRaMacConfirmQueueHandleCb+0x94>)
 80168b2:	685b      	ldr	r3, [r3, #4]
 80168b4:	785a      	ldrb	r2, [r3, #1]
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80168ba:	4b19      	ldr	r3, [pc, #100]	; (8016920 <LoRaMacConfirmQueueHandleCb+0x94>)
 80168bc:	685b      	ldr	r3, [r3, #4]
 80168be:	789b      	ldrb	r3, [r3, #2]
 80168c0:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80168c2:	7b7b      	ldrb	r3, [r7, #13]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d005      	beq.n	80168d4 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80168c8:	4b15      	ldr	r3, [pc, #84]	; (8016920 <LoRaMacConfirmQueueHandleCb+0x94>)
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	689b      	ldr	r3, [r3, #8]
 80168ce:	6878      	ldr	r0, [r7, #4]
 80168d0:	4798      	blx	r3
 80168d2:	e00b      	b.n	80168ec <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80168d4:	4b12      	ldr	r3, [pc, #72]	; (8016920 <LoRaMacConfirmQueueHandleCb+0x94>)
 80168d6:	685b      	ldr	r3, [r3, #4]
 80168d8:	781b      	ldrb	r3, [r3, #0]
 80168da:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80168dc:	4b10      	ldr	r3, [pc, #64]	; (8016920 <LoRaMacConfirmQueueHandleCb+0x94>)
 80168de:	685b      	ldr	r3, [r3, #4]
 80168e0:	785b      	ldrb	r3, [r3, #1]
 80168e2:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80168e4:	4b0e      	ldr	r3, [pc, #56]	; (8016920 <LoRaMacConfirmQueueHandleCb+0x94>)
 80168e6:	685b      	ldr	r3, [r3, #4]
 80168e8:	78db      	ldrb	r3, [r3, #3]
 80168ea:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 80168ec:	f7ff ff06 	bl	80166fc <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 80168f0:	7b7b      	ldrb	r3, [r7, #13]
 80168f2:	f083 0301 	eor.w	r3, r3, #1
 80168f6:	b2db      	uxtb	r3, r3
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d004      	beq.n	8016906 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80168fc:	f107 0308 	add.w	r3, r7, #8
 8016900:	4618      	mov	r0, r3
 8016902:	f7ff fec1 	bl	8016688 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8016906:	7bfb      	ldrb	r3, [r7, #15]
 8016908:	3301      	adds	r3, #1
 801690a:	73fb      	strb	r3, [r7, #15]
 801690c:	7bfa      	ldrb	r2, [r7, #15]
 801690e:	7bbb      	ldrb	r3, [r7, #14]
 8016910:	429a      	cmp	r2, r3
 8016912:	d3c8      	bcc.n	80168a6 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8016914:	bf00      	nop
 8016916:	bf00      	nop
 8016918:	3710      	adds	r7, #16
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}
 801691e:	bf00      	nop
 8016920:	2000228c 	.word	0x2000228c

08016924 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8016924:	b480      	push	{r7}
 8016926:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8016928:	4b03      	ldr	r3, [pc, #12]	; (8016938 <LoRaMacConfirmQueueGetCnt+0x14>)
 801692a:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 801692e:	4618      	mov	r0, r3
 8016930:	46bd      	mov	sp, r7
 8016932:	bc80      	pop	{r7}
 8016934:	4770      	bx	lr
 8016936:	bf00      	nop
 8016938:	2000228c 	.word	0x2000228c

0801693c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 801693c:	b580      	push	{r7, lr}
 801693e:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8016940:	4b06      	ldr	r3, [pc, #24]	; (801695c <LoRaMacConfirmQueueIsFull+0x20>)
 8016942:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016946:	4618      	mov	r0, r3
 8016948:	f7ff fe3a 	bl	80165c0 <IsListFull>
 801694c:	4603      	mov	r3, r0
 801694e:	2b00      	cmp	r3, #0
 8016950:	d001      	beq.n	8016956 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8016952:	2301      	movs	r3, #1
 8016954:	e000      	b.n	8016958 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8016956:	2300      	movs	r3, #0
    }
}
 8016958:	4618      	mov	r0, r3
 801695a:	bd80      	pop	{r7, pc}
 801695c:	2000228c 	.word	0x2000228c

08016960 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8016960:	b580      	push	{r7, lr}
 8016962:	b08e      	sub	sp, #56	; 0x38
 8016964:	af00      	add	r7, sp, #0
 8016966:	60f8      	str	r0, [r7, #12]
 8016968:	607b      	str	r3, [r7, #4]
 801696a:	460b      	mov	r3, r1
 801696c:	817b      	strh	r3, [r7, #10]
 801696e:	4613      	mov	r3, r2
 8016970:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	2b00      	cmp	r3, #0
 8016976:	d101      	bne.n	801697c <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016978:	230a      	movs	r3, #10
 801697a:	e086      	b.n	8016a8a <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 801697c:	2300      	movs	r3, #0
 801697e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8016982:	2301      	movs	r3, #1
 8016984:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8016986:	2300      	movs	r3, #0
 8016988:	623b      	str	r3, [r7, #32]
 801698a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801698e:	2200      	movs	r2, #0
 8016990:	601a      	str	r2, [r3, #0]
 8016992:	605a      	str	r2, [r3, #4]
 8016994:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8016996:	2300      	movs	r3, #0
 8016998:	613b      	str	r3, [r7, #16]
 801699a:	f107 0314 	add.w	r3, r7, #20
 801699e:	2200      	movs	r2, #0
 80169a0:	601a      	str	r2, [r3, #0]
 80169a2:	605a      	str	r2, [r3, #4]
 80169a4:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 80169a6:	2301      	movs	r3, #1
 80169a8:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80169aa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80169ae:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	b2db      	uxtb	r3, r3
 80169b4:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	0a1b      	lsrs	r3, r3, #8
 80169ba:	b2db      	uxtb	r3, r3
 80169bc:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	0c1b      	lsrs	r3, r3, #16
 80169c2:	b2db      	uxtb	r3, r3
 80169c4:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	0e1b      	lsrs	r3, r3, #24
 80169ca:	b2db      	uxtb	r3, r3
 80169cc:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80169ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80169d0:	b2db      	uxtb	r3, r3
 80169d2:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80169d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80169d6:	0a1b      	lsrs	r3, r3, #8
 80169d8:	b2db      	uxtb	r3, r3
 80169da:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80169dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80169de:	0c1b      	lsrs	r3, r3, #16
 80169e0:	b2db      	uxtb	r3, r3
 80169e2:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80169e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80169e6:	0e1b      	lsrs	r3, r3, #24
 80169e8:	b2db      	uxtb	r3, r3
 80169ea:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 80169ec:	e048      	b.n	8016a80 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 80169ee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80169f0:	b2db      	uxtb	r3, r3
 80169f2:	77fb      	strb	r3, [r7, #31]
        ctr++;
 80169f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80169f6:	3301      	adds	r3, #1
 80169f8:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80169fa:	f107 0320 	add.w	r3, r7, #32
 80169fe:	7a7a      	ldrb	r2, [r7, #9]
 8016a00:	f107 0010 	add.w	r0, r7, #16
 8016a04:	2110      	movs	r1, #16
 8016a06:	f7f7 f96c 	bl	800dce2 <SecureElementAesEncrypt>
 8016a0a:	4603      	mov	r3, r0
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d001      	beq.n	8016a14 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016a10:	230f      	movs	r3, #15
 8016a12:	e03a      	b.n	8016a8a <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8016a14:	2300      	movs	r3, #0
 8016a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016a1a:	e01e      	b.n	8016a5a <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8016a1c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8016a20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016a24:	4413      	add	r3, r2
 8016a26:	461a      	mov	r2, r3
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	4413      	add	r3, r2
 8016a2c:	7819      	ldrb	r1, [r3, #0]
 8016a2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016a32:	3338      	adds	r3, #56	; 0x38
 8016a34:	443b      	add	r3, r7
 8016a36:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8016a3a:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8016a3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016a42:	4403      	add	r3, r0
 8016a44:	4618      	mov	r0, r3
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	4403      	add	r3, r0
 8016a4a:	404a      	eors	r2, r1
 8016a4c:	b2d2      	uxtb	r2, r2
 8016a4e:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8016a50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016a54:	3301      	adds	r3, #1
 8016a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016a5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016a5e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8016a62:	2a10      	cmp	r2, #16
 8016a64:	bfa8      	it	ge
 8016a66:	2210      	movge	r2, #16
 8016a68:	b212      	sxth	r2, r2
 8016a6a:	4293      	cmp	r3, r2
 8016a6c:	dbd6      	blt.n	8016a1c <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8016a6e:	897b      	ldrh	r3, [r7, #10]
 8016a70:	3b10      	subs	r3, #16
 8016a72:	b29b      	uxth	r3, r3
 8016a74:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8016a76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016a7a:	3310      	adds	r3, #16
 8016a7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8016a80:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	dcb2      	bgt.n	80169ee <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016a88:	2300      	movs	r3, #0
}
 8016a8a:	4618      	mov	r0, r3
 8016a8c:	3738      	adds	r7, #56	; 0x38
 8016a8e:	46bd      	mov	sp, r7
 8016a90:	bd80      	pop	{r7, pc}

08016a92 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8016a92:	b490      	push	{r4, r7}
 8016a94:	b082      	sub	sp, #8
 8016a96:	af00      	add	r7, sp, #0
 8016a98:	4604      	mov	r4, r0
 8016a9a:	4608      	mov	r0, r1
 8016a9c:	4611      	mov	r1, r2
 8016a9e:	461a      	mov	r2, r3
 8016aa0:	4623      	mov	r3, r4
 8016aa2:	80fb      	strh	r3, [r7, #6]
 8016aa4:	4603      	mov	r3, r0
 8016aa6:	717b      	strb	r3, [r7, #5]
 8016aa8:	460b      	mov	r3, r1
 8016aaa:	713b      	strb	r3, [r7, #4]
 8016aac:	4613      	mov	r3, r2
 8016aae:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8016ab0:	69bb      	ldr	r3, [r7, #24]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d101      	bne.n	8016aba <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016ab6:	230a      	movs	r3, #10
 8016ab8:	e04e      	b.n	8016b58 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8016aba:	69bb      	ldr	r3, [r7, #24]
 8016abc:	2249      	movs	r2, #73	; 0x49
 8016abe:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8016ac0:	69bb      	ldr	r3, [r7, #24]
 8016ac2:	3301      	adds	r3, #1
 8016ac4:	2200      	movs	r2, #0
 8016ac6:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8016ac8:	69bb      	ldr	r3, [r7, #24]
 8016aca:	3302      	adds	r3, #2
 8016acc:	2200      	movs	r2, #0
 8016ace:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8016ad0:	69bb      	ldr	r3, [r7, #24]
 8016ad2:	3303      	adds	r3, #3
 8016ad4:	2200      	movs	r2, #0
 8016ad6:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8016ad8:	69bb      	ldr	r3, [r7, #24]
 8016ada:	3304      	adds	r3, #4
 8016adc:	2200      	movs	r2, #0
 8016ade:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8016ae0:	69bb      	ldr	r3, [r7, #24]
 8016ae2:	3305      	adds	r3, #5
 8016ae4:	78fa      	ldrb	r2, [r7, #3]
 8016ae6:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8016ae8:	69bb      	ldr	r3, [r7, #24]
 8016aea:	3306      	adds	r3, #6
 8016aec:	693a      	ldr	r2, [r7, #16]
 8016aee:	b2d2      	uxtb	r2, r2
 8016af0:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8016af2:	693b      	ldr	r3, [r7, #16]
 8016af4:	0a1a      	lsrs	r2, r3, #8
 8016af6:	69bb      	ldr	r3, [r7, #24]
 8016af8:	3307      	adds	r3, #7
 8016afa:	b2d2      	uxtb	r2, r2
 8016afc:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8016afe:	693b      	ldr	r3, [r7, #16]
 8016b00:	0c1a      	lsrs	r2, r3, #16
 8016b02:	69bb      	ldr	r3, [r7, #24]
 8016b04:	3308      	adds	r3, #8
 8016b06:	b2d2      	uxtb	r2, r2
 8016b08:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8016b0a:	693b      	ldr	r3, [r7, #16]
 8016b0c:	0e1a      	lsrs	r2, r3, #24
 8016b0e:	69bb      	ldr	r3, [r7, #24]
 8016b10:	3309      	adds	r3, #9
 8016b12:	b2d2      	uxtb	r2, r2
 8016b14:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8016b16:	69bb      	ldr	r3, [r7, #24]
 8016b18:	330a      	adds	r3, #10
 8016b1a:	697a      	ldr	r2, [r7, #20]
 8016b1c:	b2d2      	uxtb	r2, r2
 8016b1e:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8016b20:	697b      	ldr	r3, [r7, #20]
 8016b22:	0a1a      	lsrs	r2, r3, #8
 8016b24:	69bb      	ldr	r3, [r7, #24]
 8016b26:	330b      	adds	r3, #11
 8016b28:	b2d2      	uxtb	r2, r2
 8016b2a:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8016b2c:	697b      	ldr	r3, [r7, #20]
 8016b2e:	0c1a      	lsrs	r2, r3, #16
 8016b30:	69bb      	ldr	r3, [r7, #24]
 8016b32:	330c      	adds	r3, #12
 8016b34:	b2d2      	uxtb	r2, r2
 8016b36:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8016b38:	697b      	ldr	r3, [r7, #20]
 8016b3a:	0e1a      	lsrs	r2, r3, #24
 8016b3c:	69bb      	ldr	r3, [r7, #24]
 8016b3e:	330d      	adds	r3, #13
 8016b40:	b2d2      	uxtb	r2, r2
 8016b42:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8016b44:	69bb      	ldr	r3, [r7, #24]
 8016b46:	330e      	adds	r3, #14
 8016b48:	2200      	movs	r2, #0
 8016b4a:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8016b4c:	69bb      	ldr	r3, [r7, #24]
 8016b4e:	330f      	adds	r3, #15
 8016b50:	88fa      	ldrh	r2, [r7, #6]
 8016b52:	b2d2      	uxtb	r2, r2
 8016b54:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016b56:	2300      	movs	r3, #0
}
 8016b58:	4618      	mov	r0, r3
 8016b5a:	3708      	adds	r7, #8
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	bc90      	pop	{r4, r7}
 8016b60:	4770      	bx	lr

08016b62 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8016b62:	b590      	push	{r4, r7, lr}
 8016b64:	b08b      	sub	sp, #44	; 0x2c
 8016b66:	af04      	add	r7, sp, #16
 8016b68:	6078      	str	r0, [r7, #4]
 8016b6a:	4608      	mov	r0, r1
 8016b6c:	4611      	mov	r1, r2
 8016b6e:	461a      	mov	r2, r3
 8016b70:	4603      	mov	r3, r0
 8016b72:	807b      	strh	r3, [r7, #2]
 8016b74:	460b      	mov	r3, r1
 8016b76:	707b      	strb	r3, [r7, #1]
 8016b78:	4613      	mov	r3, r2
 8016b7a:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d002      	beq.n	8016b88 <ComputeCmacB0+0x26>
 8016b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d101      	bne.n	8016b8c <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016b88:	230a      	movs	r3, #10
 8016b8a:	e024      	b.n	8016bd6 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8016b8c:	887b      	ldrh	r3, [r7, #2]
 8016b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016b92:	d901      	bls.n	8016b98 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8016b94:	230e      	movs	r3, #14
 8016b96:	e01e      	b.n	8016bd6 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8016b98:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8016b9c:	783a      	ldrb	r2, [r7, #0]
 8016b9e:	7879      	ldrb	r1, [r7, #1]
 8016ba0:	8878      	ldrh	r0, [r7, #2]
 8016ba2:	f107 0308 	add.w	r3, r7, #8
 8016ba6:	9302      	str	r3, [sp, #8]
 8016ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016baa:	9301      	str	r3, [sp, #4]
 8016bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bae:	9300      	str	r3, [sp, #0]
 8016bb0:	4623      	mov	r3, r4
 8016bb2:	f7ff ff6e 	bl	8016a92 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8016bb6:	7879      	ldrb	r1, [r7, #1]
 8016bb8:	887a      	ldrh	r2, [r7, #2]
 8016bba:	f107 0008 	add.w	r0, r7, #8
 8016bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bc0:	9300      	str	r3, [sp, #0]
 8016bc2:	460b      	mov	r3, r1
 8016bc4:	6879      	ldr	r1, [r7, #4]
 8016bc6:	f7f7 f83f 	bl	800dc48 <SecureElementComputeAesCmac>
 8016bca:	4603      	mov	r3, r0
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d001      	beq.n	8016bd4 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016bd0:	230f      	movs	r3, #15
 8016bd2:	e000      	b.n	8016bd6 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016bd4:	2300      	movs	r3, #0
}
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	371c      	adds	r7, #28
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	bd90      	pop	{r4, r7, pc}

08016bde <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8016bde:	b590      	push	{r4, r7, lr}
 8016be0:	b0cd      	sub	sp, #308	; 0x134
 8016be2:	af04      	add	r7, sp, #16
 8016be4:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8016be8:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8016bec:	6020      	str	r0, [r4, #0]
 8016bee:	460c      	mov	r4, r1
 8016bf0:	4610      	mov	r0, r2
 8016bf2:	4619      	mov	r1, r3
 8016bf4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016bf8:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016bfc:	4622      	mov	r2, r4
 8016bfe:	801a      	strh	r2, [r3, #0]
 8016c00:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016c04:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016c08:	4602      	mov	r2, r0
 8016c0a:	701a      	strb	r2, [r3, #0]
 8016c0c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016c10:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016c14:	460a      	mov	r2, r1
 8016c16:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8016c18:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016c1c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d101      	bne.n	8016c2a <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016c26:	230a      	movs	r3, #10
 8016c28:	e063      	b.n	8016cf2 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8016c2a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016c2e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016c32:	881b      	ldrh	r3, [r3, #0]
 8016c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016c38:	d901      	bls.n	8016c3e <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8016c3a:	230e      	movs	r3, #14
 8016c3c:	e059      	b.n	8016cf2 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8016c3e:	f107 030c 	add.w	r3, r7, #12
 8016c42:	f44f 7288 	mov.w	r2, #272	; 0x110
 8016c46:	2100      	movs	r1, #0
 8016c48:	4618      	mov	r0, r3
 8016c4a:	f003 fc6f 	bl	801a52c <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8016c4e:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8016c52:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016c56:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016c5a:	781a      	ldrb	r2, [r3, #0]
 8016c5c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016c60:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016c64:	7819      	ldrb	r1, [r3, #0]
 8016c66:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016c6a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016c6e:	8818      	ldrh	r0, [r3, #0]
 8016c70:	f107 030c 	add.w	r3, r7, #12
 8016c74:	9302      	str	r3, [sp, #8]
 8016c76:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016c7a:	9301      	str	r3, [sp, #4]
 8016c7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016c80:	9300      	str	r3, [sp, #0]
 8016c82:	4623      	mov	r3, r4
 8016c84:	f7ff ff05 	bl	8016a92 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8016c88:	f107 030c 	add.w	r3, r7, #12
 8016c8c:	3310      	adds	r3, #16
 8016c8e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8016c92:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8016c96:	8812      	ldrh	r2, [r2, #0]
 8016c98:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8016c9c:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8016ca0:	6809      	ldr	r1, [r1, #0]
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	f003 fc07 	bl	801a4b6 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8016ca8:	2306      	movs	r3, #6
 8016caa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8016cae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016cb2:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016cb6:	881b      	ldrh	r3, [r3, #0]
 8016cb8:	3310      	adds	r3, #16
 8016cba:	b299      	uxth	r1, r3
 8016cbc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016cc0:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016cc4:	781b      	ldrb	r3, [r3, #0]
 8016cc6:	f107 000c 	add.w	r0, r7, #12
 8016cca:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8016cce:	f7f6 ffd9 	bl	800dc84 <SecureElementVerifyAesCmac>
 8016cd2:	4603      	mov	r3, r0
 8016cd4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8016cd8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d101      	bne.n	8016ce4 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8016ce0:	2300      	movs	r3, #0
 8016ce2:	e006      	b.n	8016cf2 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8016ce4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016ce8:	2b01      	cmp	r3, #1
 8016cea:	d101      	bne.n	8016cf0 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8016cec:	2301      	movs	r3, #1
 8016cee:	e000      	b.n	8016cf2 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016cf0:	230f      	movs	r3, #15
}
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	bd90      	pop	{r4, r7, pc}

08016cfc <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8016cfc:	b480      	push	{r7}
 8016cfe:	b085      	sub	sp, #20
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	4603      	mov	r3, r0
 8016d04:	6039      	str	r1, [r7, #0]
 8016d06:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016d08:	2300      	movs	r3, #0
 8016d0a:	73fb      	strb	r3, [r7, #15]
 8016d0c:	e011      	b.n	8016d32 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8016d0e:	7bfb      	ldrb	r3, [r7, #15]
 8016d10:	4a0c      	ldr	r2, [pc, #48]	; (8016d44 <GetKeyAddrItem+0x48>)
 8016d12:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016d16:	79fa      	ldrb	r2, [r7, #7]
 8016d18:	429a      	cmp	r2, r3
 8016d1a:	d107      	bne.n	8016d2c <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8016d1c:	7bfb      	ldrb	r3, [r7, #15]
 8016d1e:	009b      	lsls	r3, r3, #2
 8016d20:	4a08      	ldr	r2, [pc, #32]	; (8016d44 <GetKeyAddrItem+0x48>)
 8016d22:	441a      	add	r2, r3
 8016d24:	683b      	ldr	r3, [r7, #0]
 8016d26:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8016d28:	2300      	movs	r3, #0
 8016d2a:	e006      	b.n	8016d3a <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016d2c:	7bfb      	ldrb	r3, [r7, #15]
 8016d2e:	3301      	adds	r3, #1
 8016d30:	73fb      	strb	r3, [r7, #15]
 8016d32:	7bfb      	ldrb	r3, [r7, #15]
 8016d34:	2b01      	cmp	r3, #1
 8016d36:	d9ea      	bls.n	8016d0e <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8016d38:	230c      	movs	r3, #12
}
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	3714      	adds	r7, #20
 8016d3e:	46bd      	mov	sp, r7
 8016d40:	bc80      	pop	{r7}
 8016d42:	4770      	bx	lr
 8016d44:	2000011c 	.word	0x2000011c

08016d48 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8016d48:	b580      	push	{r7, lr}
 8016d4a:	b088      	sub	sp, #32
 8016d4c:	af00      	add	r7, sp, #0
 8016d4e:	60b9      	str	r1, [r7, #8]
 8016d50:	607a      	str	r2, [r7, #4]
 8016d52:	461a      	mov	r2, r3
 8016d54:	4603      	mov	r3, r0
 8016d56:	73fb      	strb	r3, [r7, #15]
 8016d58:	4613      	mov	r3, r2
 8016d5a:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	613b      	str	r3, [r7, #16]
 8016d60:	f107 0314 	add.w	r3, r7, #20
 8016d64:	2200      	movs	r2, #0
 8016d66:	601a      	str	r2, [r3, #0]
 8016d68:	605a      	str	r2, [r3, #4]
 8016d6a:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8016d6c:	7bfb      	ldrb	r3, [r7, #15]
 8016d6e:	2b02      	cmp	r3, #2
 8016d70:	d002      	beq.n	8016d78 <DeriveSessionKey10x+0x30>
 8016d72:	2b03      	cmp	r3, #3
 8016d74:	d003      	beq.n	8016d7e <DeriveSessionKey10x+0x36>
 8016d76:	e005      	b.n	8016d84 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8016d78:	2301      	movs	r3, #1
 8016d7a:	743b      	strb	r3, [r7, #16]
            break;
 8016d7c:	e004      	b.n	8016d88 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8016d7e:	2302      	movs	r3, #2
 8016d80:	743b      	strb	r3, [r7, #16]
            break;
 8016d82:	e001      	b.n	8016d88 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016d84:	230b      	movs	r3, #11
 8016d86:	e02a      	b.n	8016dde <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8016d88:	68bb      	ldr	r3, [r7, #8]
 8016d8a:	b2db      	uxtb	r3, r3
 8016d8c:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8016d8e:	68bb      	ldr	r3, [r7, #8]
 8016d90:	0a1b      	lsrs	r3, r3, #8
 8016d92:	b2db      	uxtb	r3, r3
 8016d94:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8016d96:	68bb      	ldr	r3, [r7, #8]
 8016d98:	0c1b      	lsrs	r3, r3, #16
 8016d9a:	b2db      	uxtb	r3, r3
 8016d9c:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	b2db      	uxtb	r3, r3
 8016da2:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	0a1b      	lsrs	r3, r3, #8
 8016da8:	b2db      	uxtb	r3, r3
 8016daa:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	0c1b      	lsrs	r3, r3, #16
 8016db0:	b2db      	uxtb	r3, r3
 8016db2:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8016db4:	89bb      	ldrh	r3, [r7, #12]
 8016db6:	b2db      	uxtb	r3, r3
 8016db8:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8016dba:	89bb      	ldrh	r3, [r7, #12]
 8016dbc:	0a1b      	lsrs	r3, r3, #8
 8016dbe:	b29b      	uxth	r3, r3
 8016dc0:	b2db      	uxtb	r3, r3
 8016dc2:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8016dc4:	7bfa      	ldrb	r2, [r7, #15]
 8016dc6:	f107 0310 	add.w	r3, r7, #16
 8016dca:	2101      	movs	r1, #1
 8016dcc:	4618      	mov	r0, r3
 8016dce:	f7f6 ffef 	bl	800ddb0 <SecureElementDeriveAndStoreKey>
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d001      	beq.n	8016ddc <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016dd8:	230f      	movs	r3, #15
 8016dda:	e000      	b.n	8016dde <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016ddc:	2300      	movs	r3, #0
}
 8016dde:	4618      	mov	r0, r3
 8016de0:	3720      	adds	r7, #32
 8016de2:	46bd      	mov	sp, r7
 8016de4:	bd80      	pop	{r7, pc}
	...

08016de8 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8016de8:	b480      	push	{r7}
 8016dea:	b083      	sub	sp, #12
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	4603      	mov	r3, r0
 8016df0:	6039      	str	r1, [r7, #0]
 8016df2:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8016df4:	683b      	ldr	r3, [r7, #0]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d101      	bne.n	8016dfe <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016dfa:	230a      	movs	r3, #10
 8016dfc:	e03b      	b.n	8016e76 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8016dfe:	79fb      	ldrb	r3, [r7, #7]
 8016e00:	3b01      	subs	r3, #1
 8016e02:	2b03      	cmp	r3, #3
 8016e04:	d834      	bhi.n	8016e70 <GetLastFcntDown+0x88>
 8016e06:	a201      	add	r2, pc, #4	; (adr r2, 8016e0c <GetLastFcntDown+0x24>)
 8016e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e0c:	08016e1d 	.word	0x08016e1d
 8016e10:	08016e35 	.word	0x08016e35
 8016e14:	08016e4d 	.word	0x08016e4d
 8016e18:	08016e65 	.word	0x08016e65
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8016e1c:	4b18      	ldr	r3, [pc, #96]	; (8016e80 <GetLastFcntDown+0x98>)
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	691a      	ldr	r2, [r3, #16]
 8016e22:	683b      	ldr	r3, [r7, #0]
 8016e24:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8016e26:	4b16      	ldr	r3, [pc, #88]	; (8016e80 <GetLastFcntDown+0x98>)
 8016e28:	681a      	ldr	r2, [r3, #0]
 8016e2a:	4b15      	ldr	r3, [pc, #84]	; (8016e80 <GetLastFcntDown+0x98>)
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	6912      	ldr	r2, [r2, #16]
 8016e30:	621a      	str	r2, [r3, #32]
            break;
 8016e32:	e01f      	b.n	8016e74 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8016e34:	4b12      	ldr	r3, [pc, #72]	; (8016e80 <GetLastFcntDown+0x98>)
 8016e36:	681b      	ldr	r3, [r3, #0]
 8016e38:	695a      	ldr	r2, [r3, #20]
 8016e3a:	683b      	ldr	r3, [r7, #0]
 8016e3c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8016e3e:	4b10      	ldr	r3, [pc, #64]	; (8016e80 <GetLastFcntDown+0x98>)
 8016e40:	681a      	ldr	r2, [r3, #0]
 8016e42:	4b0f      	ldr	r3, [pc, #60]	; (8016e80 <GetLastFcntDown+0x98>)
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	6952      	ldr	r2, [r2, #20]
 8016e48:	621a      	str	r2, [r3, #32]
            break;
 8016e4a:	e013      	b.n	8016e74 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8016e4c:	4b0c      	ldr	r3, [pc, #48]	; (8016e80 <GetLastFcntDown+0x98>)
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	699a      	ldr	r2, [r3, #24]
 8016e52:	683b      	ldr	r3, [r7, #0]
 8016e54:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8016e56:	4b0a      	ldr	r3, [pc, #40]	; (8016e80 <GetLastFcntDown+0x98>)
 8016e58:	681a      	ldr	r2, [r3, #0]
 8016e5a:	4b09      	ldr	r3, [pc, #36]	; (8016e80 <GetLastFcntDown+0x98>)
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	6992      	ldr	r2, [r2, #24]
 8016e60:	621a      	str	r2, [r3, #32]
            break;
 8016e62:	e007      	b.n	8016e74 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8016e64:	4b06      	ldr	r3, [pc, #24]	; (8016e80 <GetLastFcntDown+0x98>)
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	69da      	ldr	r2, [r3, #28]
 8016e6a:	683b      	ldr	r3, [r7, #0]
 8016e6c:	601a      	str	r2, [r3, #0]
            break;
 8016e6e:	e001      	b.n	8016e74 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8016e70:	2305      	movs	r3, #5
 8016e72:	e000      	b.n	8016e76 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016e74:	2300      	movs	r3, #0
}
 8016e76:	4618      	mov	r0, r3
 8016e78:	370c      	adds	r7, #12
 8016e7a:	46bd      	mov	sp, r7
 8016e7c:	bc80      	pop	{r7}
 8016e7e:	4770      	bx	lr
 8016e80:	200022b0 	.word	0x200022b0

08016e84 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8016e84:	b580      	push	{r7, lr}
 8016e86:	b084      	sub	sp, #16
 8016e88:	af00      	add	r7, sp, #0
 8016e8a:	4603      	mov	r3, r0
 8016e8c:	6039      	str	r1, [r7, #0]
 8016e8e:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8016e90:	2300      	movs	r3, #0
 8016e92:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8016e94:	f107 020c 	add.w	r2, r7, #12
 8016e98:	79fb      	ldrb	r3, [r7, #7]
 8016e9a:	4611      	mov	r1, r2
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	f7ff ffa3 	bl	8016de8 <GetLastFcntDown>
 8016ea2:	4603      	mov	r3, r0
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d001      	beq.n	8016eac <CheckFCntDown+0x28>
    {
        return false;
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	e00a      	b.n	8016ec2 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	683a      	ldr	r2, [r7, #0]
 8016eb0:	429a      	cmp	r2, r3
 8016eb2:	d803      	bhi.n	8016ebc <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8016eb4:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8016eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016eba:	d101      	bne.n	8016ec0 <CheckFCntDown+0x3c>
    {
        return true;
 8016ebc:	2301      	movs	r3, #1
 8016ebe:	e000      	b.n	8016ec2 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8016ec0:	2300      	movs	r3, #0
    }
}
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	3710      	adds	r7, #16
 8016ec6:	46bd      	mov	sp, r7
 8016ec8:	bd80      	pop	{r7, pc}
	...

08016ecc <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8016ecc:	b480      	push	{r7}
 8016ece:	b083      	sub	sp, #12
 8016ed0:	af00      	add	r7, sp, #0
 8016ed2:	4603      	mov	r3, r0
 8016ed4:	6039      	str	r1, [r7, #0]
 8016ed6:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8016ed8:	79fb      	ldrb	r3, [r7, #7]
 8016eda:	3b01      	subs	r3, #1
 8016edc:	2b03      	cmp	r3, #3
 8016ede:	d81f      	bhi.n	8016f20 <UpdateFCntDown+0x54>
 8016ee0:	a201      	add	r2, pc, #4	; (adr r2, 8016ee8 <UpdateFCntDown+0x1c>)
 8016ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ee6:	bf00      	nop
 8016ee8:	08016ef9 	.word	0x08016ef9
 8016eec:	08016f03 	.word	0x08016f03
 8016ef0:	08016f0d 	.word	0x08016f0d
 8016ef4:	08016f17 	.word	0x08016f17
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8016ef8:	4b0c      	ldr	r3, [pc, #48]	; (8016f2c <UpdateFCntDown+0x60>)
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	683a      	ldr	r2, [r7, #0]
 8016efe:	611a      	str	r2, [r3, #16]
            break;
 8016f00:	e00f      	b.n	8016f22 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8016f02:	4b0a      	ldr	r3, [pc, #40]	; (8016f2c <UpdateFCntDown+0x60>)
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	683a      	ldr	r2, [r7, #0]
 8016f08:	615a      	str	r2, [r3, #20]
            break;
 8016f0a:	e00a      	b.n	8016f22 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8016f0c:	4b07      	ldr	r3, [pc, #28]	; (8016f2c <UpdateFCntDown+0x60>)
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	683a      	ldr	r2, [r7, #0]
 8016f12:	619a      	str	r2, [r3, #24]
            break;
 8016f14:	e005      	b.n	8016f22 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8016f16:	4b05      	ldr	r3, [pc, #20]	; (8016f2c <UpdateFCntDown+0x60>)
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	683a      	ldr	r2, [r7, #0]
 8016f1c:	61da      	str	r2, [r3, #28]
            break;
 8016f1e:	e000      	b.n	8016f22 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8016f20:	bf00      	nop
    }
}
 8016f22:	bf00      	nop
 8016f24:	370c      	adds	r7, #12
 8016f26:	46bd      	mov	sp, r7
 8016f28:	bc80      	pop	{r7}
 8016f2a:	4770      	bx	lr
 8016f2c:	200022b0 	.word	0x200022b0

08016f30 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8016f30:	b480      	push	{r7}
 8016f32:	b083      	sub	sp, #12
 8016f34:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8016f36:	4b18      	ldr	r3, [pc, #96]	; (8016f98 <ResetFCnts+0x68>)
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	2200      	movs	r2, #0
 8016f3c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8016f3e:	4b16      	ldr	r3, [pc, #88]	; (8016f98 <ResetFCnts+0x68>)
 8016f40:	681b      	ldr	r3, [r3, #0]
 8016f42:	f04f 32ff 	mov.w	r2, #4294967295
 8016f46:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8016f48:	4b13      	ldr	r3, [pc, #76]	; (8016f98 <ResetFCnts+0x68>)
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8016f50:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8016f52:	4b11      	ldr	r3, [pc, #68]	; (8016f98 <ResetFCnts+0x68>)
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	f04f 32ff 	mov.w	r2, #4294967295
 8016f5a:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8016f5c:	4b0e      	ldr	r3, [pc, #56]	; (8016f98 <ResetFCnts+0x68>)
 8016f5e:	681a      	ldr	r2, [r3, #0]
 8016f60:	4b0d      	ldr	r3, [pc, #52]	; (8016f98 <ResetFCnts+0x68>)
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	6992      	ldr	r2, [r2, #24]
 8016f66:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016f68:	2300      	movs	r3, #0
 8016f6a:	607b      	str	r3, [r7, #4]
 8016f6c:	e00b      	b.n	8016f86 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8016f6e:	4b0a      	ldr	r3, [pc, #40]	; (8016f98 <ResetFCnts+0x68>)
 8016f70:	681a      	ldr	r2, [r3, #0]
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	3306      	adds	r3, #6
 8016f76:	009b      	lsls	r3, r3, #2
 8016f78:	4413      	add	r3, r2
 8016f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8016f7e:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	3301      	adds	r3, #1
 8016f84:	607b      	str	r3, [r7, #4]
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	ddf0      	ble.n	8016f6e <ResetFCnts+0x3e>
    }
}
 8016f8c:	bf00      	nop
 8016f8e:	bf00      	nop
 8016f90:	370c      	adds	r7, #12
 8016f92:	46bd      	mov	sp, r7
 8016f94:	bc80      	pop	{r7}
 8016f96:	4770      	bx	lr
 8016f98:	200022b0 	.word	0x200022b0

08016f9c <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8016f9c:	b580      	push	{r7, lr}
 8016f9e:	b082      	sub	sp, #8
 8016fa0:	af00      	add	r7, sp, #0
 8016fa2:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d101      	bne.n	8016fae <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8016faa:	2309      	movs	r3, #9
 8016fac:	e01c      	b.n	8016fe8 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8016fae:	4a10      	ldr	r2, [pc, #64]	; (8016ff0 <LoRaMacCryptoInit+0x54>)
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8016fb4:	4b0e      	ldr	r3, [pc, #56]	; (8016ff0 <LoRaMacCryptoInit+0x54>)
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	2228      	movs	r2, #40	; 0x28
 8016fba:	2100      	movs	r1, #0
 8016fbc:	4618      	mov	r0, r3
 8016fbe:	f003 fab5 	bl	801a52c <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8016fc2:	4b0b      	ldr	r3, [pc, #44]	; (8016ff0 <LoRaMacCryptoInit+0x54>)
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	2201      	movs	r2, #1
 8016fc8:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8016fca:	4b09      	ldr	r3, [pc, #36]	; (8016ff0 <LoRaMacCryptoInit+0x54>)
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	2201      	movs	r2, #1
 8016fd0:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8016fd2:	4b07      	ldr	r3, [pc, #28]	; (8016ff0 <LoRaMacCryptoInit+0x54>)
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	2201      	movs	r2, #1
 8016fd8:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8016fda:	4b05      	ldr	r3, [pc, #20]	; (8016ff0 <LoRaMacCryptoInit+0x54>)
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	2200      	movs	r2, #0
 8016fe0:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8016fe2:	f7ff ffa5 	bl	8016f30 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8016fe6:	2300      	movs	r3, #0
}
 8016fe8:	4618      	mov	r0, r3
 8016fea:	3708      	adds	r7, #8
 8016fec:	46bd      	mov	sp, r7
 8016fee:	bd80      	pop	{r7, pc}
 8016ff0:	200022b0 	.word	0x200022b0

08016ff4 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8016ff4:	b480      	push	{r7}
 8016ff6:	b083      	sub	sp, #12
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8016ffc:	4b04      	ldr	r3, [pc, #16]	; (8017010 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	687a      	ldr	r2, [r7, #4]
 8017002:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8017004:	2300      	movs	r3, #0
}
 8017006:	4618      	mov	r0, r3
 8017008:	370c      	adds	r7, #12
 801700a:	46bd      	mov	sp, r7
 801700c:	bc80      	pop	{r7}
 801700e:	4770      	bx	lr
 8017010:	200022b0 	.word	0x200022b0

08017014 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8017014:	b480      	push	{r7}
 8017016:	b083      	sub	sp, #12
 8017018:	af00      	add	r7, sp, #0
 801701a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	2b00      	cmp	r3, #0
 8017020:	d101      	bne.n	8017026 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017022:	230a      	movs	r3, #10
 8017024:	e006      	b.n	8017034 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8017026:	4b06      	ldr	r3, [pc, #24]	; (8017040 <LoRaMacCryptoGetFCntUp+0x2c>)
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	68db      	ldr	r3, [r3, #12]
 801702c:	1c5a      	adds	r2, r3, #1
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8017032:	2300      	movs	r3, #0
}
 8017034:	4618      	mov	r0, r3
 8017036:	370c      	adds	r7, #12
 8017038:	46bd      	mov	sp, r7
 801703a:	bc80      	pop	{r7}
 801703c:	4770      	bx	lr
 801703e:	bf00      	nop
 8017040:	200022b0 	.word	0x200022b0

08017044 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8017044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017048:	b08a      	sub	sp, #40	; 0x28
 801704a:	af00      	add	r7, sp, #0
 801704c:	613a      	str	r2, [r7, #16]
 801704e:	60fb      	str	r3, [r7, #12]
 8017050:	4603      	mov	r3, r0
 8017052:	75fb      	strb	r3, [r7, #23]
 8017054:	460b      	mov	r3, r1
 8017056:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8017058:	2300      	movs	r3, #0
 801705a:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 801705c:	2300      	movs	r3, #0
 801705e:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8017060:	2313      	movs	r3, #19
 8017062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	2b00      	cmp	r3, #0
 801706a:	d101      	bne.n	8017070 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801706c:	230a      	movs	r3, #10
 801706e:	e057      	b.n	8017120 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8017070:	f107 021c 	add.w	r2, r7, #28
 8017074:	7dfb      	ldrb	r3, [r7, #23]
 8017076:	4611      	mov	r1, r2
 8017078:	4618      	mov	r0, r3
 801707a:	f7ff feb5 	bl	8016de8 <GetLastFcntDown>
 801707e:	4603      	mov	r3, r0
 8017080:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8017084:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017088:	2b00      	cmp	r3, #0
 801708a:	d002      	beq.n	8017092 <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 801708c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017090:	e046      	b.n	8017120 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8017092:	69fb      	ldr	r3, [r7, #28]
 8017094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017098:	d103      	bne.n	80170a2 <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	693a      	ldr	r2, [r7, #16]
 801709e:	601a      	str	r2, [r3, #0]
 80170a0:	e01e      	b.n	80170e0 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80170a2:	69fb      	ldr	r3, [r7, #28]
 80170a4:	b29b      	uxth	r3, r3
 80170a6:	693a      	ldr	r2, [r7, #16]
 80170a8:	1ad3      	subs	r3, r2, r3
 80170aa:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 80170ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	dd05      	ble.n	80170be <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80170b2:	69fa      	ldr	r2, [r7, #28]
 80170b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170b6:	441a      	add	r2, r3
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	601a      	str	r2, [r3, #0]
 80170bc:	e010      	b.n	80170e0 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 80170be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d104      	bne.n	80170ce <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80170c4:	69fa      	ldr	r2, [r7, #28]
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80170ca:	2307      	movs	r3, #7
 80170cc:	e028      	b.n	8017120 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80170ce:	69fb      	ldr	r3, [r7, #28]
 80170d0:	0c1b      	lsrs	r3, r3, #16
 80170d2:	041b      	lsls	r3, r3, #16
 80170d4:	693a      	ldr	r2, [r7, #16]
 80170d6:	4413      	add	r3, r2
 80170d8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80170e0:	4b12      	ldr	r3, [pc, #72]	; (801712c <LoRaMacCryptoGetFCntDown+0xe8>)
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	789b      	ldrb	r3, [r3, #2]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d119      	bne.n	801711e <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	2200      	movs	r2, #0
 80170f0:	603b      	str	r3, [r7, #0]
 80170f2:	607a      	str	r2, [r7, #4]
 80170f4:	69fb      	ldr	r3, [r7, #28]
 80170f6:	2200      	movs	r2, #0
 80170f8:	469a      	mov	sl, r3
 80170fa:	4693      	mov	fp, r2
 80170fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017100:	4611      	mov	r1, r2
 8017102:	ebb1 040a 	subs.w	r4, r1, sl
 8017106:	eb63 050b 	sbc.w	r5, r3, fp
 801710a:	8abb      	ldrh	r3, [r7, #20]
 801710c:	2200      	movs	r2, #0
 801710e:	4698      	mov	r8, r3
 8017110:	4691      	mov	r9, r2
 8017112:	4544      	cmp	r4, r8
 8017114:	eb75 0309 	sbcs.w	r3, r5, r9
 8017118:	db01      	blt.n	801711e <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 801711a:	2308      	movs	r3, #8
 801711c:	e000      	b.n	8017120 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801711e:	2300      	movs	r3, #0
}
 8017120:	4618      	mov	r0, r3
 8017122:	3728      	adds	r7, #40	; 0x28
 8017124:	46bd      	mov	sp, r7
 8017126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801712a:	bf00      	nop
 801712c:	200022b0 	.word	0x200022b0

08017130 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8017130:	b480      	push	{r7}
 8017132:	b085      	sub	sp, #20
 8017134:	af00      	add	r7, sp, #0
 8017136:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d101      	bne.n	8017142 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801713e:	230a      	movs	r3, #10
 8017140:	e017      	b.n	8017172 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8017142:	2300      	movs	r3, #0
 8017144:	60fb      	str	r3, [r7, #12]
 8017146:	e010      	b.n	801716a <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8017148:	4b0c      	ldr	r3, [pc, #48]	; (801717c <LoRaMacCryptoSetMulticastReference+0x4c>)
 801714a:	6819      	ldr	r1, [r3, #0]
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	222c      	movs	r2, #44	; 0x2c
 8017150:	fb02 f303 	mul.w	r3, r2, r3
 8017154:	687a      	ldr	r2, [r7, #4]
 8017156:	4413      	add	r3, r2
 8017158:	68fa      	ldr	r2, [r7, #12]
 801715a:	3206      	adds	r2, #6
 801715c:	0092      	lsls	r2, r2, #2
 801715e:	440a      	add	r2, r1
 8017160:	3204      	adds	r2, #4
 8017162:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	3301      	adds	r3, #1
 8017168:	60fb      	str	r3, [r7, #12]
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	2b00      	cmp	r3, #0
 801716e:	ddeb      	ble.n	8017148 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8017170:	2300      	movs	r3, #0
}
 8017172:	4618      	mov	r0, r3
 8017174:	3714      	adds	r7, #20
 8017176:	46bd      	mov	sp, r7
 8017178:	bc80      	pop	{r7}
 801717a:	4770      	bx	lr
 801717c:	200022b0 	.word	0x200022b0

08017180 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8017180:	b580      	push	{r7, lr}
 8017182:	b082      	sub	sp, #8
 8017184:	af00      	add	r7, sp, #0
 8017186:	4603      	mov	r3, r0
 8017188:	6039      	str	r1, [r7, #0]
 801718a:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 801718c:	79fb      	ldrb	r3, [r7, #7]
 801718e:	6839      	ldr	r1, [r7, #0]
 8017190:	4618      	mov	r0, r3
 8017192:	f7f6 fcfb 	bl	800db8c <SecureElementSetKey>
 8017196:	4603      	mov	r3, r0
 8017198:	2b00      	cmp	r3, #0
 801719a:	d001      	beq.n	80171a0 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801719c:	230f      	movs	r3, #15
 801719e:	e018      	b.n	80171d2 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 80171a0:	79fb      	ldrb	r3, [r7, #7]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d114      	bne.n	80171d0 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 80171a6:	4b0d      	ldr	r3, [pc, #52]	; (80171dc <LoRaMacCryptoSetKey+0x5c>)
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	789b      	ldrb	r3, [r3, #2]
 80171ac:	79fa      	ldrb	r2, [r7, #7]
 80171ae:	4611      	mov	r1, r2
 80171b0:	4618      	mov	r0, r3
 80171b2:	f000 fa3f 	bl	8017634 <LoRaMacCryptoDeriveMcRootKey>
 80171b6:	4603      	mov	r3, r0
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d001      	beq.n	80171c0 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80171bc:	230f      	movs	r3, #15
 80171be:	e008      	b.n	80171d2 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80171c0:	2004      	movs	r0, #4
 80171c2:	f000 fa62 	bl	801768a <LoRaMacCryptoDeriveMcKEKey>
 80171c6:	4603      	mov	r3, r0
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d001      	beq.n	80171d0 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80171cc:	230f      	movs	r3, #15
 80171ce:	e000      	b.n	80171d2 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80171d0:	2300      	movs	r3, #0
}
 80171d2:	4618      	mov	r0, r3
 80171d4:	3708      	adds	r7, #8
 80171d6:	46bd      	mov	sp, r7
 80171d8:	bd80      	pop	{r7, pc}
 80171da:	bf00      	nop
 80171dc:	200022b0 	.word	0x200022b0

080171e0 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80171e0:	b580      	push	{r7, lr}
 80171e2:	b086      	sub	sp, #24
 80171e4:	af02      	add	r7, sp, #8
 80171e6:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d101      	bne.n	80171f2 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80171ee:	230a      	movs	r3, #10
 80171f0:	e033      	b.n	801725a <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80171f2:	2301      	movs	r3, #1
 80171f4:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 80171f6:	2300      	movs	r3, #0
 80171f8:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 80171fa:	f107 0308 	add.w	r3, r7, #8
 80171fe:	4618      	mov	r0, r3
 8017200:	f7f6 fe94 	bl	800df2c <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8017204:	68ba      	ldr	r2, [r7, #8]
 8017206:	4b17      	ldr	r3, [pc, #92]	; (8017264 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8017208:	681b      	ldr	r3, [r3, #0]
 801720a:	b292      	uxth	r2, r2
 801720c:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801720e:	4b15      	ldr	r3, [pc, #84]	; (8017264 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	889a      	ldrh	r2, [r3, #4]
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8017218:	6878      	ldr	r0, [r7, #4]
 801721a:	f000 fc18 	bl	8017a4e <LoRaMacSerializerJoinRequest>
 801721e:	4603      	mov	r3, r0
 8017220:	2b00      	cmp	r3, #0
 8017222:	d001      	beq.n	8017228 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8017224:	2311      	movs	r3, #17
 8017226:	e018      	b.n	801725a <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	6819      	ldr	r1, [r3, #0]
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	3318      	adds	r3, #24
 8017230:	7bfa      	ldrb	r2, [r7, #15]
 8017232:	9300      	str	r3, [sp, #0]
 8017234:	4613      	mov	r3, r2
 8017236:	2213      	movs	r2, #19
 8017238:	2000      	movs	r0, #0
 801723a:	f7f6 fd05 	bl	800dc48 <SecureElementComputeAesCmac>
 801723e:	4603      	mov	r3, r0
 8017240:	2b00      	cmp	r3, #0
 8017242:	d001      	beq.n	8017248 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017244:	230f      	movs	r3, #15
 8017246:	e008      	b.n	801725a <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8017248:	6878      	ldr	r0, [r7, #4]
 801724a:	f000 fc00 	bl	8017a4e <LoRaMacSerializerJoinRequest>
 801724e:	4603      	mov	r3, r0
 8017250:	2b00      	cmp	r3, #0
 8017252:	d001      	beq.n	8017258 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8017254:	2311      	movs	r3, #17
 8017256:	e000      	b.n	801725a <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8017258:	2300      	movs	r3, #0
}
 801725a:	4618      	mov	r0, r3
 801725c:	3710      	adds	r7, #16
 801725e:	46bd      	mov	sp, r7
 8017260:	bd80      	pop	{r7, pc}
 8017262:	bf00      	nop
 8017264:	200022b0 	.word	0x200022b0

08017268 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8017268:	b590      	push	{r4, r7, lr}
 801726a:	b097      	sub	sp, #92	; 0x5c
 801726c:	af04      	add	r7, sp, #16
 801726e:	4603      	mov	r3, r0
 8017270:	60b9      	str	r1, [r7, #8]
 8017272:	607a      	str	r2, [r7, #4]
 8017274:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	2b00      	cmp	r3, #0
 801727a:	d002      	beq.n	8017282 <LoRaMacCryptoHandleJoinAccept+0x1a>
 801727c:	68bb      	ldr	r3, [r7, #8]
 801727e:	2b00      	cmp	r3, #0
 8017280:	d101      	bne.n	8017286 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017282:	230a      	movs	r3, #10
 8017284:	e0bd      	b.n	8017402 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8017286:	2313      	movs	r3, #19
 8017288:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 801728c:	2300      	movs	r3, #0
 801728e:	61bb      	str	r3, [r7, #24]
 8017290:	f107 031c 	add.w	r3, r7, #28
 8017294:	221d      	movs	r2, #29
 8017296:	2100      	movs	r1, #0
 8017298:	4618      	mov	r0, r3
 801729a:	f007 fefd 	bl	801f098 <memset>
    uint8_t versionMinor         = 0;
 801729e:	2300      	movs	r3, #0
 80172a0:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80172a2:	4b5a      	ldr	r3, [pc, #360]	; (801740c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80172a4:	681b      	ldr	r3, [r3, #0]
 80172a6:	889b      	ldrh	r3, [r3, #4]
 80172a8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	681c      	ldr	r4, [r3, #0]
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	791b      	ldrb	r3, [r3, #4]
 80172b4:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80172b8:	7bf8      	ldrb	r0, [r7, #15]
 80172ba:	f107 0217 	add.w	r2, r7, #23
 80172be:	9202      	str	r2, [sp, #8]
 80172c0:	f107 0218 	add.w	r2, r7, #24
 80172c4:	9201      	str	r2, [sp, #4]
 80172c6:	9300      	str	r3, [sp, #0]
 80172c8:	4623      	mov	r3, r4
 80172ca:	460a      	mov	r2, r1
 80172cc:	68b9      	ldr	r1, [r7, #8]
 80172ce:	f7f6 fdaf 	bl	800de30 <SecureElementProcessJoinAccept>
 80172d2:	4603      	mov	r3, r0
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d001      	beq.n	80172dc <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80172d8:	230f      	movs	r3, #15
 80172da:	e092      	b.n	8017402 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	6818      	ldr	r0, [r3, #0]
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	791b      	ldrb	r3, [r3, #4]
 80172e4:	b29a      	uxth	r2, r3
 80172e6:	f107 0318 	add.w	r3, r7, #24
 80172ea:	4619      	mov	r1, r3
 80172ec:	f003 f8e3 	bl	801a4b6 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80172f0:	6878      	ldr	r0, [r7, #4]
 80172f2:	f000 f9ed 	bl	80176d0 <LoRaMacParserJoinAccept>
 80172f6:	4603      	mov	r3, r0
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d001      	beq.n	8017300 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80172fc:	2310      	movs	r3, #16
 80172fe:	e080      	b.n	8017402 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	799b      	ldrb	r3, [r3, #6]
 8017304:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	79db      	ldrb	r3, [r3, #7]
 801730a:	021b      	lsls	r3, r3, #8
 801730c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801730e:	4313      	orrs	r3, r2
 8017310:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	7a1b      	ldrb	r3, [r3, #8]
 8017316:	041b      	lsls	r3, r3, #16
 8017318:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801731a:	4313      	orrs	r3, r2
 801731c:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 801731e:	4b3b      	ldr	r3, [pc, #236]	; (801740c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	689b      	ldr	r3, [r3, #8]
 8017324:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017326:	429a      	cmp	r2, r3
 8017328:	d010      	beq.n	801734c <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 801732a:	4b38      	ldr	r3, [pc, #224]	; (801740c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017330:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8017332:	7dfb      	ldrb	r3, [r7, #23]
 8017334:	2100      	movs	r1, #0
 8017336:	4618      	mov	r0, r3
 8017338:	f000 f97c 	bl	8017634 <LoRaMacCryptoDeriveMcRootKey>
 801733c:	4603      	mov	r3, r0
 801733e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017342:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017346:	2b00      	cmp	r3, #0
 8017348:	d005      	beq.n	8017356 <LoRaMacCryptoHandleJoinAccept+0xee>
 801734a:	e001      	b.n	8017350 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 801734c:	2303      	movs	r3, #3
 801734e:	e058      	b.n	8017402 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8017350:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017354:	e055      	b.n	8017402 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8017356:	2004      	movs	r0, #4
 8017358:	f000 f997 	bl	801768a <LoRaMacCryptoDeriveMcKEKey>
 801735c:	4603      	mov	r3, r0
 801735e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017362:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017366:	2b00      	cmp	r3, #0
 8017368:	d002      	beq.n	8017370 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 801736a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801736e:	e048      	b.n	8017402 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	7a5b      	ldrb	r3, [r3, #9]
 8017374:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	7a9b      	ldrb	r3, [r3, #10]
 801737a:	021b      	lsls	r3, r3, #8
 801737c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801737e:	4313      	orrs	r3, r2
 8017380:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	7adb      	ldrb	r3, [r3, #11]
 8017386:	041b      	lsls	r3, r3, #16
 8017388:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801738a:	4313      	orrs	r3, r2
 801738c:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 801738e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017392:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017394:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017396:	2003      	movs	r0, #3
 8017398:	f7ff fcd6 	bl	8016d48 <DeriveSessionKey10x>
 801739c:	4603      	mov	r3, r0
 801739e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80173a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d002      	beq.n	80173b0 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 80173aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80173ae:	e028      	b.n	8017402 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80173b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80173b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80173b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80173b8:	2002      	movs	r0, #2
 80173ba:	f7ff fcc5 	bl	8016d48 <DeriveSessionKey10x>
 80173be:	4603      	mov	r3, r0
 80173c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80173c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d002      	beq.n	80173d2 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 80173cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80173d0:	e017      	b.n	8017402 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80173d2:	4b0e      	ldr	r3, [pc, #56]	; (801740c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	7dfa      	ldrb	r2, [r7, #23]
 80173d8:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 80173da:	4b0c      	ldr	r3, [pc, #48]	; (801740c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	2200      	movs	r2, #0
 80173e0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80173e2:	4b0a      	ldr	r3, [pc, #40]	; (801740c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80173e4:	681b      	ldr	r3, [r3, #0]
 80173e6:	f04f 32ff 	mov.w	r2, #4294967295
 80173ea:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80173ec:	4b07      	ldr	r3, [pc, #28]	; (801740c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	f04f 32ff 	mov.w	r2, #4294967295
 80173f4:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80173f6:	4b05      	ldr	r3, [pc, #20]	; (801740c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80173f8:	681b      	ldr	r3, [r3, #0]
 80173fa:	f04f 32ff 	mov.w	r2, #4294967295
 80173fe:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8017400:	2300      	movs	r3, #0
}
 8017402:	4618      	mov	r0, r3
 8017404:	374c      	adds	r7, #76	; 0x4c
 8017406:	46bd      	mov	sp, r7
 8017408:	bd90      	pop	{r4, r7, pc}
 801740a:	bf00      	nop
 801740c:	200022b0 	.word	0x200022b0

08017410 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8017410:	b590      	push	{r4, r7, lr}
 8017412:	b08b      	sub	sp, #44	; 0x2c
 8017414:	af04      	add	r7, sp, #16
 8017416:	60f8      	str	r0, [r7, #12]
 8017418:	607b      	str	r3, [r7, #4]
 801741a:	460b      	mov	r3, r1
 801741c:	72fb      	strb	r3, [r7, #11]
 801741e:	4613      	mov	r3, r2
 8017420:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8017422:	2313      	movs	r3, #19
 8017424:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8017426:	2303      	movs	r3, #3
 8017428:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	2b00      	cmp	r3, #0
 801742e:	d101      	bne.n	8017434 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017430:	230a      	movs	r3, #10
 8017432:	e05f      	b.n	80174f4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8017434:	4b31      	ldr	r3, [pc, #196]	; (80174fc <LoRaMacCryptoSecureMessage+0xec>)
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	68db      	ldr	r3, [r3, #12]
 801743a:	68fa      	ldr	r2, [r7, #12]
 801743c:	429a      	cmp	r2, r3
 801743e:	d201      	bcs.n	8017444 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8017440:	2306      	movs	r3, #6
 8017442:	e057      	b.n	80174f4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	f893 3020 	ldrb.w	r3, [r3, #32]
 801744a:	2b00      	cmp	r3, #0
 801744c:	d101      	bne.n	8017452 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801744e:	2302      	movs	r3, #2
 8017450:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8017452:	4b2a      	ldr	r3, [pc, #168]	; (80174fc <LoRaMacCryptoSecureMessage+0xec>)
 8017454:	681b      	ldr	r3, [r3, #0]
 8017456:	68db      	ldr	r3, [r3, #12]
 8017458:	68fa      	ldr	r2, [r7, #12]
 801745a:	429a      	cmp	r2, r3
 801745c:	d916      	bls.n	801748c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017468:	b219      	sxth	r1, r3
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	689c      	ldr	r4, [r3, #8]
 801746e:	7dfa      	ldrb	r2, [r7, #23]
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	9301      	str	r3, [sp, #4]
 8017474:	2300      	movs	r3, #0
 8017476:	9300      	str	r3, [sp, #0]
 8017478:	4623      	mov	r3, r4
 801747a:	f7ff fa71 	bl	8016960 <PayloadEncrypt>
 801747e:	4603      	mov	r3, r0
 8017480:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017482:	7dbb      	ldrb	r3, [r7, #22]
 8017484:	2b00      	cmp	r3, #0
 8017486:	d001      	beq.n	801748c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8017488:	7dbb      	ldrb	r3, [r7, #22]
 801748a:	e033      	b.n	80174f4 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801748c:	6878      	ldr	r0, [r7, #4]
 801748e:	f000 fb60 	bl	8017b52 <LoRaMacSerializerData>
 8017492:	4603      	mov	r3, r0
 8017494:	2b00      	cmp	r3, #0
 8017496:	d001      	beq.n	801749c <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8017498:	2311      	movs	r3, #17
 801749a:	e02b      	b.n	80174f4 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801749c:	2302      	movs	r3, #2
 801749e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	6818      	ldr	r0, [r3, #0]
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	791b      	ldrb	r3, [r3, #4]
 80174a8:	b29b      	uxth	r3, r3
 80174aa:	3b04      	subs	r3, #4
 80174ac:	b299      	uxth	r1, r3
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	689b      	ldr	r3, [r3, #8]
 80174b2:	687a      	ldr	r2, [r7, #4]
 80174b4:	322c      	adds	r2, #44	; 0x2c
 80174b6:	7dfc      	ldrb	r4, [r7, #23]
 80174b8:	9203      	str	r2, [sp, #12]
 80174ba:	68fa      	ldr	r2, [r7, #12]
 80174bc:	9202      	str	r2, [sp, #8]
 80174be:	9301      	str	r3, [sp, #4]
 80174c0:	2300      	movs	r3, #0
 80174c2:	9300      	str	r3, [sp, #0]
 80174c4:	2300      	movs	r3, #0
 80174c6:	4622      	mov	r2, r4
 80174c8:	f7ff fb4b 	bl	8016b62 <ComputeCmacB0>
 80174cc:	4603      	mov	r3, r0
 80174ce:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80174d0:	7dbb      	ldrb	r3, [r7, #22]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d001      	beq.n	80174da <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 80174d6:	7dbb      	ldrb	r3, [r7, #22]
 80174d8:	e00c      	b.n	80174f4 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80174da:	6878      	ldr	r0, [r7, #4]
 80174dc:	f000 fb39 	bl	8017b52 <LoRaMacSerializerData>
 80174e0:	4603      	mov	r3, r0
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d001      	beq.n	80174ea <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80174e6:	2311      	movs	r3, #17
 80174e8:	e004      	b.n	80174f4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80174ea:	4b04      	ldr	r3, [pc, #16]	; (80174fc <LoRaMacCryptoSecureMessage+0xec>)
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	68fa      	ldr	r2, [r7, #12]
 80174f0:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80174f2:	2300      	movs	r3, #0
}
 80174f4:	4618      	mov	r0, r3
 80174f6:	371c      	adds	r7, #28
 80174f8:	46bd      	mov	sp, r7
 80174fa:	bd90      	pop	{r4, r7, pc}
 80174fc:	200022b0 	.word	0x200022b0

08017500 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8017500:	b590      	push	{r4, r7, lr}
 8017502:	b08b      	sub	sp, #44	; 0x2c
 8017504:	af04      	add	r7, sp, #16
 8017506:	60b9      	str	r1, [r7, #8]
 8017508:	607b      	str	r3, [r7, #4]
 801750a:	4603      	mov	r3, r0
 801750c:	73fb      	strb	r3, [r7, #15]
 801750e:	4613      	mov	r3, r2
 8017510:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8017512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017514:	2b00      	cmp	r3, #0
 8017516:	d101      	bne.n	801751c <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017518:	230a      	movs	r3, #10
 801751a:	e084      	b.n	8017626 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 801751c:	7bbb      	ldrb	r3, [r7, #14]
 801751e:	6879      	ldr	r1, [r7, #4]
 8017520:	4618      	mov	r0, r3
 8017522:	f7ff fcaf 	bl	8016e84 <CheckFCntDown>
 8017526:	4603      	mov	r3, r0
 8017528:	f083 0301 	eor.w	r3, r3, #1
 801752c:	b2db      	uxtb	r3, r3
 801752e:	2b00      	cmp	r3, #0
 8017530:	d001      	beq.n	8017536 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8017532:	2306      	movs	r3, #6
 8017534:	e077      	b.n	8017626 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8017536:	2313      	movs	r3, #19
 8017538:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801753a:	2303      	movs	r3, #3
 801753c:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 801753e:	2302      	movs	r3, #2
 8017540:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8017542:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017544:	f000 f98f 	bl	8017866 <LoRaMacParserData>
 8017548:	4603      	mov	r3, r0
 801754a:	2b00      	cmp	r3, #0
 801754c:	d001      	beq.n	8017552 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801754e:	2310      	movs	r3, #16
 8017550:	e069      	b.n	8017626 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8017552:	f107 0210 	add.w	r2, r7, #16
 8017556:	7bfb      	ldrb	r3, [r7, #15]
 8017558:	4611      	mov	r1, r2
 801755a:	4618      	mov	r0, r3
 801755c:	f7ff fbce 	bl	8016cfc <GetKeyAddrItem>
 8017560:	4603      	mov	r3, r0
 8017562:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017564:	7d7b      	ldrb	r3, [r7, #21]
 8017566:	2b00      	cmp	r3, #0
 8017568:	d001      	beq.n	801756e <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801756a:	7d7b      	ldrb	r3, [r7, #21]
 801756c:	e05b      	b.n	8017626 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 801756e:	693b      	ldr	r3, [r7, #16]
 8017570:	785b      	ldrb	r3, [r3, #1]
 8017572:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8017574:	693b      	ldr	r3, [r7, #16]
 8017576:	789b      	ldrb	r3, [r3, #2]
 8017578:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801757c:	689b      	ldr	r3, [r3, #8]
 801757e:	68ba      	ldr	r2, [r7, #8]
 8017580:	429a      	cmp	r2, r3
 8017582:	d001      	beq.n	8017588 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8017584:	2302      	movs	r3, #2
 8017586:	e04e      	b.n	8017626 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8017588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801758a:	7b1b      	ldrb	r3, [r3, #12]
 801758c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8017590:	b2db      	uxtb	r3, r3
 8017592:	2b00      	cmp	r3, #0
 8017594:	bf14      	ite	ne
 8017596:	2301      	movne	r3, #1
 8017598:	2300      	moveq	r3, #0
 801759a:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801759c:	4b24      	ldr	r3, [pc, #144]	; (8017630 <LoRaMacCryptoUnsecureMessage+0x130>)
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	789b      	ldrb	r3, [r3, #2]
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d101      	bne.n	80175aa <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80175a6:	2300      	movs	r3, #0
 80175a8:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80175aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175ac:	6818      	ldr	r0, [r3, #0]
 80175ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175b0:	791b      	ldrb	r3, [r3, #4]
 80175b2:	b29b      	uxth	r3, r3
 80175b4:	3b04      	subs	r3, #4
 80175b6:	b299      	uxth	r1, r3
 80175b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175bc:	7dbc      	ldrb	r4, [r7, #22]
 80175be:	7d3a      	ldrb	r2, [r7, #20]
 80175c0:	9303      	str	r3, [sp, #12]
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	9302      	str	r3, [sp, #8]
 80175c6:	68bb      	ldr	r3, [r7, #8]
 80175c8:	9301      	str	r3, [sp, #4]
 80175ca:	2301      	movs	r3, #1
 80175cc:	9300      	str	r3, [sp, #0]
 80175ce:	4623      	mov	r3, r4
 80175d0:	f7ff fb05 	bl	8016bde <VerifyCmacB0>
 80175d4:	4603      	mov	r3, r0
 80175d6:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80175d8:	7d7b      	ldrb	r3, [r7, #21]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d001      	beq.n	80175e2 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 80175de:	7d7b      	ldrb	r3, [r7, #21]
 80175e0:	e021      	b.n	8017626 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80175e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d101      	bne.n	80175f0 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80175ec:	2302      	movs	r3, #2
 80175ee:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80175f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175f2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80175f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80175fa:	b219      	sxth	r1, r3
 80175fc:	7dfa      	ldrb	r2, [r7, #23]
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	9301      	str	r3, [sp, #4]
 8017602:	2301      	movs	r3, #1
 8017604:	9300      	str	r3, [sp, #0]
 8017606:	68bb      	ldr	r3, [r7, #8]
 8017608:	f7ff f9aa 	bl	8016960 <PayloadEncrypt>
 801760c:	4603      	mov	r3, r0
 801760e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017610:	7d7b      	ldrb	r3, [r7, #21]
 8017612:	2b00      	cmp	r3, #0
 8017614:	d001      	beq.n	801761a <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8017616:	7d7b      	ldrb	r3, [r7, #21]
 8017618:	e005      	b.n	8017626 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 801761a:	7bbb      	ldrb	r3, [r7, #14]
 801761c:	6879      	ldr	r1, [r7, #4]
 801761e:	4618      	mov	r0, r3
 8017620:	f7ff fc54 	bl	8016ecc <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8017624:	2300      	movs	r3, #0
}
 8017626:	4618      	mov	r0, r3
 8017628:	371c      	adds	r7, #28
 801762a:	46bd      	mov	sp, r7
 801762c:	bd90      	pop	{r4, r7, pc}
 801762e:	bf00      	nop
 8017630:	200022b0 	.word	0x200022b0

08017634 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8017634:	b580      	push	{r7, lr}
 8017636:	b086      	sub	sp, #24
 8017638:	af00      	add	r7, sp, #0
 801763a:	4603      	mov	r3, r0
 801763c:	460a      	mov	r2, r1
 801763e:	71fb      	strb	r3, [r7, #7]
 8017640:	4613      	mov	r3, r2
 8017642:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8017644:	79bb      	ldrb	r3, [r7, #6]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d001      	beq.n	801764e <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801764a:	230b      	movs	r3, #11
 801764c:	e019      	b.n	8017682 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 801764e:	2300      	movs	r3, #0
 8017650:	60bb      	str	r3, [r7, #8]
 8017652:	f107 030c 	add.w	r3, r7, #12
 8017656:	2200      	movs	r2, #0
 8017658:	601a      	str	r2, [r3, #0]
 801765a:	605a      	str	r2, [r3, #4]
 801765c:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 801765e:	79fb      	ldrb	r3, [r7, #7]
 8017660:	2b01      	cmp	r3, #1
 8017662:	d101      	bne.n	8017668 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8017664:	2320      	movs	r3, #32
 8017666:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8017668:	79b9      	ldrb	r1, [r7, #6]
 801766a:	f107 0308 	add.w	r3, r7, #8
 801766e:	2204      	movs	r2, #4
 8017670:	4618      	mov	r0, r3
 8017672:	f7f6 fb9d 	bl	800ddb0 <SecureElementDeriveAndStoreKey>
 8017676:	4603      	mov	r3, r0
 8017678:	2b00      	cmp	r3, #0
 801767a:	d001      	beq.n	8017680 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801767c:	230f      	movs	r3, #15
 801767e:	e000      	b.n	8017682 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8017680:	2300      	movs	r3, #0
}
 8017682:	4618      	mov	r0, r3
 8017684:	3718      	adds	r7, #24
 8017686:	46bd      	mov	sp, r7
 8017688:	bd80      	pop	{r7, pc}

0801768a <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 801768a:	b580      	push	{r7, lr}
 801768c:	b086      	sub	sp, #24
 801768e:	af00      	add	r7, sp, #0
 8017690:	4603      	mov	r3, r0
 8017692:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8017694:	79fb      	ldrb	r3, [r7, #7]
 8017696:	2b04      	cmp	r3, #4
 8017698:	d001      	beq.n	801769e <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801769a:	230b      	movs	r3, #11
 801769c:	e014      	b.n	80176c8 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 801769e:	2300      	movs	r3, #0
 80176a0:	60bb      	str	r3, [r7, #8]
 80176a2:	f107 030c 	add.w	r3, r7, #12
 80176a6:	2200      	movs	r2, #0
 80176a8:	601a      	str	r2, [r3, #0]
 80176aa:	605a      	str	r2, [r3, #4]
 80176ac:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 80176ae:	79f9      	ldrb	r1, [r7, #7]
 80176b0:	f107 0308 	add.w	r3, r7, #8
 80176b4:	227f      	movs	r2, #127	; 0x7f
 80176b6:	4618      	mov	r0, r3
 80176b8:	f7f6 fb7a 	bl	800ddb0 <SecureElementDeriveAndStoreKey>
 80176bc:	4603      	mov	r3, r0
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d001      	beq.n	80176c6 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80176c2:	230f      	movs	r3, #15
 80176c4:	e000      	b.n	80176c8 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80176c6:	2300      	movs	r3, #0
}
 80176c8:	4618      	mov	r0, r3
 80176ca:	3718      	adds	r7, #24
 80176cc:	46bd      	mov	sp, r7
 80176ce:	bd80      	pop	{r7, pc}

080176d0 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80176d0:	b580      	push	{r7, lr}
 80176d2:	b084      	sub	sp, #16
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d003      	beq.n	80176e6 <LoRaMacParserJoinAccept+0x16>
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d101      	bne.n	80176ea <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80176e6:	2302      	movs	r3, #2
 80176e8:	e0b9      	b.n	801785e <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80176ea:	2300      	movs	r3, #0
 80176ec:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	681a      	ldr	r2, [r3, #0]
 80176f2:	89fb      	ldrh	r3, [r7, #14]
 80176f4:	1c59      	adds	r1, r3, #1
 80176f6:	81f9      	strh	r1, [r7, #14]
 80176f8:	4413      	add	r3, r2
 80176fa:	781a      	ldrb	r2, [r3, #0]
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	1d98      	adds	r0, r3, #6
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	681a      	ldr	r2, [r3, #0]
 8017708:	89fb      	ldrh	r3, [r7, #14]
 801770a:	4413      	add	r3, r2
 801770c:	2203      	movs	r2, #3
 801770e:	4619      	mov	r1, r3
 8017710:	f002 fed1 	bl	801a4b6 <memcpy1>
    bufItr = bufItr + 3;
 8017714:	89fb      	ldrh	r3, [r7, #14]
 8017716:	3303      	adds	r3, #3
 8017718:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	f103 0009 	add.w	r0, r3, #9
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	681a      	ldr	r2, [r3, #0]
 8017724:	89fb      	ldrh	r3, [r7, #14]
 8017726:	4413      	add	r3, r2
 8017728:	2203      	movs	r2, #3
 801772a:	4619      	mov	r1, r3
 801772c:	f002 fec3 	bl	801a4b6 <memcpy1>
    bufItr = bufItr + 3;
 8017730:	89fb      	ldrh	r3, [r7, #14]
 8017732:	3303      	adds	r3, #3
 8017734:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	681a      	ldr	r2, [r3, #0]
 801773a:	89fb      	ldrh	r3, [r7, #14]
 801773c:	1c59      	adds	r1, r3, #1
 801773e:	81f9      	strh	r1, [r7, #14]
 8017740:	4413      	add	r3, r2
 8017742:	781b      	ldrb	r3, [r3, #0]
 8017744:	461a      	mov	r2, r3
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	681a      	ldr	r2, [r3, #0]
 801774e:	89fb      	ldrh	r3, [r7, #14]
 8017750:	1c59      	adds	r1, r3, #1
 8017752:	81f9      	strh	r1, [r7, #14]
 8017754:	4413      	add	r3, r2
 8017756:	781b      	ldrb	r3, [r3, #0]
 8017758:	021a      	lsls	r2, r3, #8
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	68db      	ldr	r3, [r3, #12]
 801775e:	431a      	orrs	r2, r3
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	681a      	ldr	r2, [r3, #0]
 8017768:	89fb      	ldrh	r3, [r7, #14]
 801776a:	1c59      	adds	r1, r3, #1
 801776c:	81f9      	strh	r1, [r7, #14]
 801776e:	4413      	add	r3, r2
 8017770:	781b      	ldrb	r3, [r3, #0]
 8017772:	041a      	lsls	r2, r3, #16
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	68db      	ldr	r3, [r3, #12]
 8017778:	431a      	orrs	r2, r3
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	681a      	ldr	r2, [r3, #0]
 8017782:	89fb      	ldrh	r3, [r7, #14]
 8017784:	1c59      	adds	r1, r3, #1
 8017786:	81f9      	strh	r1, [r7, #14]
 8017788:	4413      	add	r3, r2
 801778a:	781b      	ldrb	r3, [r3, #0]
 801778c:	061a      	lsls	r2, r3, #24
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	68db      	ldr	r3, [r3, #12]
 8017792:	431a      	orrs	r2, r3
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	681a      	ldr	r2, [r3, #0]
 801779c:	89fb      	ldrh	r3, [r7, #14]
 801779e:	1c59      	adds	r1, r3, #1
 80177a0:	81f9      	strh	r1, [r7, #14]
 80177a2:	4413      	add	r3, r2
 80177a4:	781a      	ldrb	r2, [r3, #0]
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	681a      	ldr	r2, [r3, #0]
 80177ae:	89fb      	ldrh	r3, [r7, #14]
 80177b0:	1c59      	adds	r1, r3, #1
 80177b2:	81f9      	strh	r1, [r7, #14]
 80177b4:	4413      	add	r3, r2
 80177b6:	781a      	ldrb	r2, [r3, #0]
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	791b      	ldrb	r3, [r3, #4]
 80177c0:	1f1a      	subs	r2, r3, #4
 80177c2:	89fb      	ldrh	r3, [r7, #14]
 80177c4:	1ad3      	subs	r3, r2, r3
 80177c6:	2b10      	cmp	r3, #16
 80177c8:	d10e      	bne.n	80177e8 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	f103 0012 	add.w	r0, r3, #18
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	681a      	ldr	r2, [r3, #0]
 80177d4:	89fb      	ldrh	r3, [r7, #14]
 80177d6:	4413      	add	r3, r2
 80177d8:	2210      	movs	r2, #16
 80177da:	4619      	mov	r1, r3
 80177dc:	f002 fe6b 	bl	801a4b6 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80177e0:	89fb      	ldrh	r3, [r7, #14]
 80177e2:	3310      	adds	r3, #16
 80177e4:	81fb      	strh	r3, [r7, #14]
 80177e6:	e008      	b.n	80177fa <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	791b      	ldrb	r3, [r3, #4]
 80177ec:	1f1a      	subs	r2, r3, #4
 80177ee:	89fb      	ldrh	r3, [r7, #14]
 80177f0:	1ad3      	subs	r3, r2, r3
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	dd01      	ble.n	80177fa <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80177f6:	2301      	movs	r3, #1
 80177f8:	e031      	b.n	801785e <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	681a      	ldr	r2, [r3, #0]
 80177fe:	89fb      	ldrh	r3, [r7, #14]
 8017800:	1c59      	adds	r1, r3, #1
 8017802:	81f9      	strh	r1, [r7, #14]
 8017804:	4413      	add	r3, r2
 8017806:	781b      	ldrb	r3, [r3, #0]
 8017808:	461a      	mov	r2, r3
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	681a      	ldr	r2, [r3, #0]
 8017812:	89fb      	ldrh	r3, [r7, #14]
 8017814:	1c59      	adds	r1, r3, #1
 8017816:	81f9      	strh	r1, [r7, #14]
 8017818:	4413      	add	r3, r2
 801781a:	781b      	ldrb	r3, [r3, #0]
 801781c:	021a      	lsls	r2, r3, #8
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017822:	431a      	orrs	r2, r3
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	681a      	ldr	r2, [r3, #0]
 801782c:	89fb      	ldrh	r3, [r7, #14]
 801782e:	1c59      	adds	r1, r3, #1
 8017830:	81f9      	strh	r1, [r7, #14]
 8017832:	4413      	add	r3, r2
 8017834:	781b      	ldrb	r3, [r3, #0]
 8017836:	041a      	lsls	r2, r3, #16
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801783c:	431a      	orrs	r2, r3
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	681a      	ldr	r2, [r3, #0]
 8017846:	89fb      	ldrh	r3, [r7, #14]
 8017848:	1c59      	adds	r1, r3, #1
 801784a:	81f9      	strh	r1, [r7, #14]
 801784c:	4413      	add	r3, r2
 801784e:	781b      	ldrb	r3, [r3, #0]
 8017850:	061a      	lsls	r2, r3, #24
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017856:	431a      	orrs	r2, r3
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 801785c:	2300      	movs	r3, #0
}
 801785e:	4618      	mov	r0, r3
 8017860:	3710      	adds	r7, #16
 8017862:	46bd      	mov	sp, r7
 8017864:	bd80      	pop	{r7, pc}

08017866 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8017866:	b580      	push	{r7, lr}
 8017868:	b084      	sub	sp, #16
 801786a:	af00      	add	r7, sp, #0
 801786c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	2b00      	cmp	r3, #0
 8017872:	d003      	beq.n	801787c <LoRaMacParserData+0x16>
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	2b00      	cmp	r3, #0
 801787a:	d101      	bne.n	8017880 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801787c:	2302      	movs	r3, #2
 801787e:	e0e2      	b.n	8017a46 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8017880:	2300      	movs	r3, #0
 8017882:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	681a      	ldr	r2, [r3, #0]
 8017888:	89fb      	ldrh	r3, [r7, #14]
 801788a:	1c59      	adds	r1, r3, #1
 801788c:	81f9      	strh	r1, [r7, #14]
 801788e:	4413      	add	r3, r2
 8017890:	781a      	ldrb	r2, [r3, #0]
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	681a      	ldr	r2, [r3, #0]
 801789a:	89fb      	ldrh	r3, [r7, #14]
 801789c:	1c59      	adds	r1, r3, #1
 801789e:	81f9      	strh	r1, [r7, #14]
 80178a0:	4413      	add	r3, r2
 80178a2:	781b      	ldrb	r3, [r3, #0]
 80178a4:	461a      	mov	r2, r3
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	681a      	ldr	r2, [r3, #0]
 80178ae:	89fb      	ldrh	r3, [r7, #14]
 80178b0:	1c59      	adds	r1, r3, #1
 80178b2:	81f9      	strh	r1, [r7, #14]
 80178b4:	4413      	add	r3, r2
 80178b6:	781b      	ldrb	r3, [r3, #0]
 80178b8:	021a      	lsls	r2, r3, #8
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	689b      	ldr	r3, [r3, #8]
 80178be:	431a      	orrs	r2, r3
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	681a      	ldr	r2, [r3, #0]
 80178c8:	89fb      	ldrh	r3, [r7, #14]
 80178ca:	1c59      	adds	r1, r3, #1
 80178cc:	81f9      	strh	r1, [r7, #14]
 80178ce:	4413      	add	r3, r2
 80178d0:	781b      	ldrb	r3, [r3, #0]
 80178d2:	041a      	lsls	r2, r3, #16
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	689b      	ldr	r3, [r3, #8]
 80178d8:	431a      	orrs	r2, r3
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	681a      	ldr	r2, [r3, #0]
 80178e2:	89fb      	ldrh	r3, [r7, #14]
 80178e4:	1c59      	adds	r1, r3, #1
 80178e6:	81f9      	strh	r1, [r7, #14]
 80178e8:	4413      	add	r3, r2
 80178ea:	781b      	ldrb	r3, [r3, #0]
 80178ec:	061a      	lsls	r2, r3, #24
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	689b      	ldr	r3, [r3, #8]
 80178f2:	431a      	orrs	r2, r3
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	681a      	ldr	r2, [r3, #0]
 80178fc:	89fb      	ldrh	r3, [r7, #14]
 80178fe:	1c59      	adds	r1, r3, #1
 8017900:	81f9      	strh	r1, [r7, #14]
 8017902:	4413      	add	r3, r2
 8017904:	781a      	ldrb	r2, [r3, #0]
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	681a      	ldr	r2, [r3, #0]
 801790e:	89fb      	ldrh	r3, [r7, #14]
 8017910:	1c59      	adds	r1, r3, #1
 8017912:	81f9      	strh	r1, [r7, #14]
 8017914:	4413      	add	r3, r2
 8017916:	781b      	ldrb	r3, [r3, #0]
 8017918:	b29a      	uxth	r2, r3
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	681a      	ldr	r2, [r3, #0]
 8017922:	89fb      	ldrh	r3, [r7, #14]
 8017924:	1c59      	adds	r1, r3, #1
 8017926:	81f9      	strh	r1, [r7, #14]
 8017928:	4413      	add	r3, r2
 801792a:	781b      	ldrb	r3, [r3, #0]
 801792c:	0219      	lsls	r1, r3, #8
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	89db      	ldrh	r3, [r3, #14]
 8017932:	b21a      	sxth	r2, r3
 8017934:	b20b      	sxth	r3, r1
 8017936:	4313      	orrs	r3, r2
 8017938:	b21b      	sxth	r3, r3
 801793a:	b29a      	uxth	r2, r3
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	f103 0010 	add.w	r0, r3, #16
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	681a      	ldr	r2, [r3, #0]
 801794a:	89fb      	ldrh	r3, [r7, #14]
 801794c:	18d1      	adds	r1, r2, r3
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	7b1b      	ldrb	r3, [r3, #12]
 8017952:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017956:	b2db      	uxtb	r3, r3
 8017958:	b29b      	uxth	r3, r3
 801795a:	461a      	mov	r2, r3
 801795c:	f002 fdab 	bl	801a4b6 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	7b1b      	ldrb	r3, [r3, #12]
 8017964:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017968:	b2db      	uxtb	r3, r3
 801796a:	b29a      	uxth	r2, r3
 801796c:	89fb      	ldrh	r3, [r7, #14]
 801796e:	4413      	add	r3, r2
 8017970:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	2200      	movs	r2, #0
 8017976:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	2200      	movs	r2, #0
 801797e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	791b      	ldrb	r3, [r3, #4]
 8017986:	461a      	mov	r2, r3
 8017988:	89fb      	ldrh	r3, [r7, #14]
 801798a:	1ad3      	subs	r3, r2, r3
 801798c:	2b04      	cmp	r3, #4
 801798e:	dd28      	ble.n	80179e2 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	681a      	ldr	r2, [r3, #0]
 8017994:	89fb      	ldrh	r3, [r7, #14]
 8017996:	1c59      	adds	r1, r3, #1
 8017998:	81f9      	strh	r1, [r7, #14]
 801799a:	4413      	add	r3, r2
 801799c:	781a      	ldrb	r2, [r3, #0]
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	791a      	ldrb	r2, [r3, #4]
 80179a8:	89fb      	ldrh	r3, [r7, #14]
 80179aa:	b2db      	uxtb	r3, r3
 80179ac:	1ad3      	subs	r3, r2, r3
 80179ae:	b2db      	uxtb	r3, r3
 80179b0:	3b04      	subs	r3, #4
 80179b2:	b2da      	uxtb	r2, r3
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	681a      	ldr	r2, [r3, #0]
 80179c2:	89fb      	ldrh	r3, [r7, #14]
 80179c4:	18d1      	adds	r1, r2, r3
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80179cc:	b29b      	uxth	r3, r3
 80179ce:	461a      	mov	r2, r3
 80179d0:	f002 fd71 	bl	801a4b6 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80179da:	b29a      	uxth	r2, r3
 80179dc:	89fb      	ldrh	r3, [r7, #14]
 80179de:	4413      	add	r3, r2
 80179e0:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	681a      	ldr	r2, [r3, #0]
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	791b      	ldrb	r3, [r3, #4]
 80179ea:	3b04      	subs	r3, #4
 80179ec:	4413      	add	r3, r2
 80179ee:	781b      	ldrb	r3, [r3, #0]
 80179f0:	461a      	mov	r2, r3
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	6819      	ldr	r1, [r3, #0]
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	791b      	ldrb	r3, [r3, #4]
 8017a02:	3b03      	subs	r3, #3
 8017a04:	440b      	add	r3, r1
 8017a06:	781b      	ldrb	r3, [r3, #0]
 8017a08:	021b      	lsls	r3, r3, #8
 8017a0a:	431a      	orrs	r2, r3
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	6819      	ldr	r1, [r3, #0]
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	791b      	ldrb	r3, [r3, #4]
 8017a1c:	3b02      	subs	r3, #2
 8017a1e:	440b      	add	r3, r1
 8017a20:	781b      	ldrb	r3, [r3, #0]
 8017a22:	041b      	lsls	r3, r3, #16
 8017a24:	431a      	orrs	r2, r3
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	6819      	ldr	r1, [r3, #0]
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	791b      	ldrb	r3, [r3, #4]
 8017a36:	3b01      	subs	r3, #1
 8017a38:	440b      	add	r3, r1
 8017a3a:	781b      	ldrb	r3, [r3, #0]
 8017a3c:	061b      	lsls	r3, r3, #24
 8017a3e:	431a      	orrs	r2, r3
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8017a44:	2300      	movs	r3, #0
}
 8017a46:	4618      	mov	r0, r3
 8017a48:	3710      	adds	r7, #16
 8017a4a:	46bd      	mov	sp, r7
 8017a4c:	bd80      	pop	{r7, pc}

08017a4e <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8017a4e:	b580      	push	{r7, lr}
 8017a50:	b084      	sub	sp, #16
 8017a52:	af00      	add	r7, sp, #0
 8017a54:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d003      	beq.n	8017a64 <LoRaMacSerializerJoinRequest+0x16>
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d101      	bne.n	8017a68 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8017a64:	2301      	movs	r3, #1
 8017a66:	e070      	b.n	8017b4a <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8017a68:	2300      	movs	r3, #0
 8017a6a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	791b      	ldrb	r3, [r3, #4]
 8017a70:	2b16      	cmp	r3, #22
 8017a72:	d801      	bhi.n	8017a78 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8017a74:	2302      	movs	r3, #2
 8017a76:	e068      	b.n	8017b4a <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	681a      	ldr	r2, [r3, #0]
 8017a7c:	89fb      	ldrh	r3, [r7, #14]
 8017a7e:	1c59      	adds	r1, r3, #1
 8017a80:	81f9      	strh	r1, [r7, #14]
 8017a82:	4413      	add	r3, r2
 8017a84:	687a      	ldr	r2, [r7, #4]
 8017a86:	7952      	ldrb	r2, [r2, #5]
 8017a88:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	681a      	ldr	r2, [r3, #0]
 8017a8e:	89fb      	ldrh	r3, [r7, #14]
 8017a90:	18d0      	adds	r0, r2, r3
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	3306      	adds	r3, #6
 8017a96:	2208      	movs	r2, #8
 8017a98:	4619      	mov	r1, r3
 8017a9a:	f002 fd27 	bl	801a4ec <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8017a9e:	89fb      	ldrh	r3, [r7, #14]
 8017aa0:	3308      	adds	r3, #8
 8017aa2:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	681a      	ldr	r2, [r3, #0]
 8017aa8:	89fb      	ldrh	r3, [r7, #14]
 8017aaa:	18d0      	adds	r0, r2, r3
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	330e      	adds	r3, #14
 8017ab0:	2208      	movs	r2, #8
 8017ab2:	4619      	mov	r1, r3
 8017ab4:	f002 fd1a 	bl	801a4ec <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8017ab8:	89fb      	ldrh	r3, [r7, #14]
 8017aba:	3308      	adds	r3, #8
 8017abc:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	8ad9      	ldrh	r1, [r3, #22]
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	681a      	ldr	r2, [r3, #0]
 8017ac6:	89fb      	ldrh	r3, [r7, #14]
 8017ac8:	1c58      	adds	r0, r3, #1
 8017aca:	81f8      	strh	r0, [r7, #14]
 8017acc:	4413      	add	r3, r2
 8017ace:	b2ca      	uxtb	r2, r1
 8017ad0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	8adb      	ldrh	r3, [r3, #22]
 8017ad6:	0a1b      	lsrs	r3, r3, #8
 8017ad8:	b299      	uxth	r1, r3
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	681a      	ldr	r2, [r3, #0]
 8017ade:	89fb      	ldrh	r3, [r7, #14]
 8017ae0:	1c58      	adds	r0, r3, #1
 8017ae2:	81f8      	strh	r0, [r7, #14]
 8017ae4:	4413      	add	r3, r2
 8017ae6:	b2ca      	uxtb	r2, r1
 8017ae8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	6999      	ldr	r1, [r3, #24]
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	681a      	ldr	r2, [r3, #0]
 8017af2:	89fb      	ldrh	r3, [r7, #14]
 8017af4:	1c58      	adds	r0, r3, #1
 8017af6:	81f8      	strh	r0, [r7, #14]
 8017af8:	4413      	add	r3, r2
 8017afa:	b2ca      	uxtb	r2, r1
 8017afc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	699b      	ldr	r3, [r3, #24]
 8017b02:	0a19      	lsrs	r1, r3, #8
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	681a      	ldr	r2, [r3, #0]
 8017b08:	89fb      	ldrh	r3, [r7, #14]
 8017b0a:	1c58      	adds	r0, r3, #1
 8017b0c:	81f8      	strh	r0, [r7, #14]
 8017b0e:	4413      	add	r3, r2
 8017b10:	b2ca      	uxtb	r2, r1
 8017b12:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	699b      	ldr	r3, [r3, #24]
 8017b18:	0c19      	lsrs	r1, r3, #16
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	681a      	ldr	r2, [r3, #0]
 8017b1e:	89fb      	ldrh	r3, [r7, #14]
 8017b20:	1c58      	adds	r0, r3, #1
 8017b22:	81f8      	strh	r0, [r7, #14]
 8017b24:	4413      	add	r3, r2
 8017b26:	b2ca      	uxtb	r2, r1
 8017b28:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	699b      	ldr	r3, [r3, #24]
 8017b2e:	0e19      	lsrs	r1, r3, #24
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	681a      	ldr	r2, [r3, #0]
 8017b34:	89fb      	ldrh	r3, [r7, #14]
 8017b36:	1c58      	adds	r0, r3, #1
 8017b38:	81f8      	strh	r0, [r7, #14]
 8017b3a:	4413      	add	r3, r2
 8017b3c:	b2ca      	uxtb	r2, r1
 8017b3e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8017b40:	89fb      	ldrh	r3, [r7, #14]
 8017b42:	b2da      	uxtb	r2, r3
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8017b48:	2300      	movs	r3, #0
}
 8017b4a:	4618      	mov	r0, r3
 8017b4c:	3710      	adds	r7, #16
 8017b4e:	46bd      	mov	sp, r7
 8017b50:	bd80      	pop	{r7, pc}

08017b52 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8017b52:	b580      	push	{r7, lr}
 8017b54:	b084      	sub	sp, #16
 8017b56:	af00      	add	r7, sp, #0
 8017b58:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d003      	beq.n	8017b68 <LoRaMacSerializerData+0x16>
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d101      	bne.n	8017b6c <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8017b68:	2301      	movs	r3, #1
 8017b6a:	e0e5      	b.n	8017d38 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8017b70:	2308      	movs	r3, #8
 8017b72:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	7b1b      	ldrb	r3, [r3, #12]
 8017b78:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017b7c:	b2db      	uxtb	r3, r3
 8017b7e:	b29a      	uxth	r2, r3
 8017b80:	89bb      	ldrh	r3, [r7, #12]
 8017b82:	4413      	add	r3, r2
 8017b84:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d002      	beq.n	8017b96 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8017b90:	89bb      	ldrh	r3, [r7, #12]
 8017b92:	3301      	adds	r3, #1
 8017b94:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017b9c:	b29a      	uxth	r2, r3
 8017b9e:	89bb      	ldrh	r3, [r7, #12]
 8017ba0:	4413      	add	r3, r2
 8017ba2:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8017ba4:	89bb      	ldrh	r3, [r7, #12]
 8017ba6:	3304      	adds	r3, #4
 8017ba8:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	791b      	ldrb	r3, [r3, #4]
 8017bae:	b29b      	uxth	r3, r3
 8017bb0:	89ba      	ldrh	r2, [r7, #12]
 8017bb2:	429a      	cmp	r2, r3
 8017bb4:	d901      	bls.n	8017bba <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8017bb6:	2302      	movs	r3, #2
 8017bb8:	e0be      	b.n	8017d38 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	681a      	ldr	r2, [r3, #0]
 8017bbe:	89fb      	ldrh	r3, [r7, #14]
 8017bc0:	1c59      	adds	r1, r3, #1
 8017bc2:	81f9      	strh	r1, [r7, #14]
 8017bc4:	4413      	add	r3, r2
 8017bc6:	687a      	ldr	r2, [r7, #4]
 8017bc8:	7952      	ldrb	r2, [r2, #5]
 8017bca:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	6899      	ldr	r1, [r3, #8]
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	681a      	ldr	r2, [r3, #0]
 8017bd4:	89fb      	ldrh	r3, [r7, #14]
 8017bd6:	1c58      	adds	r0, r3, #1
 8017bd8:	81f8      	strh	r0, [r7, #14]
 8017bda:	4413      	add	r3, r2
 8017bdc:	b2ca      	uxtb	r2, r1
 8017bde:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	689b      	ldr	r3, [r3, #8]
 8017be4:	0a19      	lsrs	r1, r3, #8
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	681a      	ldr	r2, [r3, #0]
 8017bea:	89fb      	ldrh	r3, [r7, #14]
 8017bec:	1c58      	adds	r0, r3, #1
 8017bee:	81f8      	strh	r0, [r7, #14]
 8017bf0:	4413      	add	r3, r2
 8017bf2:	b2ca      	uxtb	r2, r1
 8017bf4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	689b      	ldr	r3, [r3, #8]
 8017bfa:	0c19      	lsrs	r1, r3, #16
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	681a      	ldr	r2, [r3, #0]
 8017c00:	89fb      	ldrh	r3, [r7, #14]
 8017c02:	1c58      	adds	r0, r3, #1
 8017c04:	81f8      	strh	r0, [r7, #14]
 8017c06:	4413      	add	r3, r2
 8017c08:	b2ca      	uxtb	r2, r1
 8017c0a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	689b      	ldr	r3, [r3, #8]
 8017c10:	0e19      	lsrs	r1, r3, #24
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	681a      	ldr	r2, [r3, #0]
 8017c16:	89fb      	ldrh	r3, [r7, #14]
 8017c18:	1c58      	adds	r0, r3, #1
 8017c1a:	81f8      	strh	r0, [r7, #14]
 8017c1c:	4413      	add	r3, r2
 8017c1e:	b2ca      	uxtb	r2, r1
 8017c20:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	681a      	ldr	r2, [r3, #0]
 8017c26:	89fb      	ldrh	r3, [r7, #14]
 8017c28:	1c59      	adds	r1, r3, #1
 8017c2a:	81f9      	strh	r1, [r7, #14]
 8017c2c:	4413      	add	r3, r2
 8017c2e:	687a      	ldr	r2, [r7, #4]
 8017c30:	7b12      	ldrb	r2, [r2, #12]
 8017c32:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	89d9      	ldrh	r1, [r3, #14]
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	681a      	ldr	r2, [r3, #0]
 8017c3c:	89fb      	ldrh	r3, [r7, #14]
 8017c3e:	1c58      	adds	r0, r3, #1
 8017c40:	81f8      	strh	r0, [r7, #14]
 8017c42:	4413      	add	r3, r2
 8017c44:	b2ca      	uxtb	r2, r1
 8017c46:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	89db      	ldrh	r3, [r3, #14]
 8017c4c:	0a1b      	lsrs	r3, r3, #8
 8017c4e:	b299      	uxth	r1, r3
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	681a      	ldr	r2, [r3, #0]
 8017c54:	89fb      	ldrh	r3, [r7, #14]
 8017c56:	1c58      	adds	r0, r3, #1
 8017c58:	81f8      	strh	r0, [r7, #14]
 8017c5a:	4413      	add	r3, r2
 8017c5c:	b2ca      	uxtb	r2, r1
 8017c5e:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	681a      	ldr	r2, [r3, #0]
 8017c64:	89fb      	ldrh	r3, [r7, #14]
 8017c66:	18d0      	adds	r0, r2, r3
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	f103 0110 	add.w	r1, r3, #16
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	7b1b      	ldrb	r3, [r3, #12]
 8017c72:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017c76:	b2db      	uxtb	r3, r3
 8017c78:	b29b      	uxth	r3, r3
 8017c7a:	461a      	mov	r2, r3
 8017c7c:	f002 fc1b 	bl	801a4b6 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	7b1b      	ldrb	r3, [r3, #12]
 8017c84:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017c88:	b2db      	uxtb	r3, r3
 8017c8a:	b29a      	uxth	r2, r3
 8017c8c:	89fb      	ldrh	r3, [r7, #14]
 8017c8e:	4413      	add	r3, r2
 8017c90:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d009      	beq.n	8017cb0 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	681a      	ldr	r2, [r3, #0]
 8017ca0:	89fb      	ldrh	r3, [r7, #14]
 8017ca2:	1c59      	adds	r1, r3, #1
 8017ca4:	81f9      	strh	r1, [r7, #14]
 8017ca6:	4413      	add	r3, r2
 8017ca8:	687a      	ldr	r2, [r7, #4]
 8017caa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8017cae:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	681a      	ldr	r2, [r3, #0]
 8017cb4:	89fb      	ldrh	r3, [r7, #14]
 8017cb6:	18d0      	adds	r0, r2, r3
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017cc2:	b29b      	uxth	r3, r3
 8017cc4:	461a      	mov	r2, r3
 8017cc6:	f002 fbf6 	bl	801a4b6 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017cd0:	b29a      	uxth	r2, r3
 8017cd2:	89fb      	ldrh	r3, [r7, #14]
 8017cd4:	4413      	add	r3, r2
 8017cd6:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	681a      	ldr	r2, [r3, #0]
 8017ce0:	89fb      	ldrh	r3, [r7, #14]
 8017ce2:	1c58      	adds	r0, r3, #1
 8017ce4:	81f8      	strh	r0, [r7, #14]
 8017ce6:	4413      	add	r3, r2
 8017ce8:	b2ca      	uxtb	r2, r1
 8017cea:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017cf0:	0a19      	lsrs	r1, r3, #8
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	681a      	ldr	r2, [r3, #0]
 8017cf6:	89fb      	ldrh	r3, [r7, #14]
 8017cf8:	1c58      	adds	r0, r3, #1
 8017cfa:	81f8      	strh	r0, [r7, #14]
 8017cfc:	4413      	add	r3, r2
 8017cfe:	b2ca      	uxtb	r2, r1
 8017d00:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d06:	0c19      	lsrs	r1, r3, #16
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	681a      	ldr	r2, [r3, #0]
 8017d0c:	89fb      	ldrh	r3, [r7, #14]
 8017d0e:	1c58      	adds	r0, r3, #1
 8017d10:	81f8      	strh	r0, [r7, #14]
 8017d12:	4413      	add	r3, r2
 8017d14:	b2ca      	uxtb	r2, r1
 8017d16:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d1c:	0e19      	lsrs	r1, r3, #24
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	681a      	ldr	r2, [r3, #0]
 8017d22:	89fb      	ldrh	r3, [r7, #14]
 8017d24:	1c58      	adds	r0, r3, #1
 8017d26:	81f8      	strh	r0, [r7, #14]
 8017d28:	4413      	add	r3, r2
 8017d2a:	b2ca      	uxtb	r2, r1
 8017d2c:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8017d2e:	89fb      	ldrh	r3, [r7, #14]
 8017d30:	b2da      	uxtb	r2, r3
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8017d36:	2300      	movs	r3, #0
}
 8017d38:	4618      	mov	r0, r3
 8017d3a:	3710      	adds	r7, #16
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	bd80      	pop	{r7, pc}

08017d40 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8017d40:	b480      	push	{r7}
 8017d42:	b083      	sub	sp, #12
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	4603      	mov	r3, r0
 8017d48:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017d4a:	79fb      	ldrb	r3, [r7, #7]
 8017d4c:	2b05      	cmp	r3, #5
 8017d4e:	d101      	bne.n	8017d54 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8017d50:	2301      	movs	r3, #1
 8017d52:	e000      	b.n	8017d56 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8017d54:	2300      	movs	r3, #0
        }
    }
}
 8017d56:	4618      	mov	r0, r3
 8017d58:	370c      	adds	r7, #12
 8017d5a:	46bd      	mov	sp, r7
 8017d5c:	bc80      	pop	{r7}
 8017d5e:	4770      	bx	lr

08017d60 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8017d60:	b580      	push	{r7, lr}
 8017d62:	b084      	sub	sp, #16
 8017d64:	af00      	add	r7, sp, #0
 8017d66:	4603      	mov	r3, r0
 8017d68:	6039      	str	r1, [r7, #0]
 8017d6a:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8017d6c:	2300      	movs	r3, #0
 8017d6e:	60bb      	str	r3, [r7, #8]
    switch( region )
 8017d70:	79fb      	ldrb	r3, [r7, #7]
 8017d72:	2b05      	cmp	r3, #5
 8017d74:	d105      	bne.n	8017d82 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8017d76:	6838      	ldr	r0, [r7, #0]
 8017d78:	f001 fa08 	bl	801918c <RegionEU868GetPhyParam>
 8017d7c:	4603      	mov	r3, r0
 8017d7e:	60fb      	str	r3, [r7, #12]
 8017d80:	e001      	b.n	8017d86 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8017d82:	68bb      	ldr	r3, [r7, #8]
 8017d84:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	4618      	mov	r0, r3
 8017d8a:	3710      	adds	r7, #16
 8017d8c:	46bd      	mov	sp, r7
 8017d8e:	bd80      	pop	{r7, pc}

08017d90 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b082      	sub	sp, #8
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	4603      	mov	r3, r0
 8017d98:	6039      	str	r1, [r7, #0]
 8017d9a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017d9c:	79fb      	ldrb	r3, [r7, #7]
 8017d9e:	2b05      	cmp	r3, #5
 8017da0:	d103      	bne.n	8017daa <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8017da2:	6838      	ldr	r0, [r7, #0]
 8017da4:	f001 fb3e 	bl	8019424 <RegionEU868SetBandTxDone>
 8017da8:	e000      	b.n	8017dac <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8017daa:	bf00      	nop
        }
    }
}
 8017dac:	3708      	adds	r7, #8
 8017dae:	46bd      	mov	sp, r7
 8017db0:	bd80      	pop	{r7, pc}

08017db2 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8017db2:	b580      	push	{r7, lr}
 8017db4:	b082      	sub	sp, #8
 8017db6:	af00      	add	r7, sp, #0
 8017db8:	4603      	mov	r3, r0
 8017dba:	6039      	str	r1, [r7, #0]
 8017dbc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017dbe:	79fb      	ldrb	r3, [r7, #7]
 8017dc0:	2b05      	cmp	r3, #5
 8017dc2:	d103      	bne.n	8017dcc <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8017dc4:	6838      	ldr	r0, [r7, #0]
 8017dc6:	f001 fb59 	bl	801947c <RegionEU868InitDefaults>
 8017dca:	e000      	b.n	8017dce <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8017dcc:	bf00      	nop
        }
    }
}
 8017dce:	bf00      	nop
 8017dd0:	3708      	adds	r7, #8
 8017dd2:	46bd      	mov	sp, r7
 8017dd4:	bd80      	pop	{r7, pc}

08017dd6 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017dd6:	b580      	push	{r7, lr}
 8017dd8:	b082      	sub	sp, #8
 8017dda:	af00      	add	r7, sp, #0
 8017ddc:	4603      	mov	r3, r0
 8017dde:	6039      	str	r1, [r7, #0]
 8017de0:	71fb      	strb	r3, [r7, #7]
 8017de2:	4613      	mov	r3, r2
 8017de4:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8017de6:	79fb      	ldrb	r3, [r7, #7]
 8017de8:	2b05      	cmp	r3, #5
 8017dea:	d106      	bne.n	8017dfa <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8017dec:	79bb      	ldrb	r3, [r7, #6]
 8017dee:	4619      	mov	r1, r3
 8017df0:	6838      	ldr	r0, [r7, #0]
 8017df2:	f001 fbe1 	bl	80195b8 <RegionEU868Verify>
 8017df6:	4603      	mov	r3, r0
 8017df8:	e000      	b.n	8017dfc <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8017dfa:	2300      	movs	r3, #0
        }
    }
}
 8017dfc:	4618      	mov	r0, r3
 8017dfe:	3708      	adds	r7, #8
 8017e00:	46bd      	mov	sp, r7
 8017e02:	bd80      	pop	{r7, pc}

08017e04 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8017e04:	b580      	push	{r7, lr}
 8017e06:	b082      	sub	sp, #8
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	6039      	str	r1, [r7, #0]
 8017e0e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017e10:	79fb      	ldrb	r3, [r7, #7]
 8017e12:	2b05      	cmp	r3, #5
 8017e14:	d103      	bne.n	8017e1e <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8017e16:	6838      	ldr	r0, [r7, #0]
 8017e18:	f001 fc4a 	bl	80196b0 <RegionEU868ApplyCFList>
 8017e1c:	e000      	b.n	8017e20 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8017e1e:	bf00      	nop
        }
    }
}
 8017e20:	bf00      	nop
 8017e22:	3708      	adds	r7, #8
 8017e24:	46bd      	mov	sp, r7
 8017e26:	bd80      	pop	{r7, pc}

08017e28 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8017e28:	b580      	push	{r7, lr}
 8017e2a:	b082      	sub	sp, #8
 8017e2c:	af00      	add	r7, sp, #0
 8017e2e:	4603      	mov	r3, r0
 8017e30:	6039      	str	r1, [r7, #0]
 8017e32:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017e34:	79fb      	ldrb	r3, [r7, #7]
 8017e36:	2b05      	cmp	r3, #5
 8017e38:	d104      	bne.n	8017e44 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8017e3a:	6838      	ldr	r0, [r7, #0]
 8017e3c:	f001 fcac 	bl	8019798 <RegionEU868ChanMaskSet>
 8017e40:	4603      	mov	r3, r0
 8017e42:	e000      	b.n	8017e46 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8017e44:	2300      	movs	r3, #0
        }
    }
}
 8017e46:	4618      	mov	r0, r3
 8017e48:	3708      	adds	r7, #8
 8017e4a:	46bd      	mov	sp, r7
 8017e4c:	bd80      	pop	{r7, pc}

08017e4e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8017e4e:	b580      	push	{r7, lr}
 8017e50:	b082      	sub	sp, #8
 8017e52:	af00      	add	r7, sp, #0
 8017e54:	603b      	str	r3, [r7, #0]
 8017e56:	4603      	mov	r3, r0
 8017e58:	71fb      	strb	r3, [r7, #7]
 8017e5a:	460b      	mov	r3, r1
 8017e5c:	71bb      	strb	r3, [r7, #6]
 8017e5e:	4613      	mov	r3, r2
 8017e60:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017e62:	79fb      	ldrb	r3, [r7, #7]
 8017e64:	2b05      	cmp	r3, #5
 8017e66:	d107      	bne.n	8017e78 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8017e68:	7979      	ldrb	r1, [r7, #5]
 8017e6a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8017e6e:	693b      	ldr	r3, [r7, #16]
 8017e70:	683a      	ldr	r2, [r7, #0]
 8017e72:	f001 fcbb 	bl	80197ec <RegionEU868ComputeRxWindowParameters>
 8017e76:	e000      	b.n	8017e7a <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8017e78:	bf00      	nop
        }
    }
}
 8017e7a:	bf00      	nop
 8017e7c:	3708      	adds	r7, #8
 8017e7e:	46bd      	mov	sp, r7
 8017e80:	bd80      	pop	{r7, pc}

08017e82 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017e82:	b580      	push	{r7, lr}
 8017e84:	b084      	sub	sp, #16
 8017e86:	af00      	add	r7, sp, #0
 8017e88:	4603      	mov	r3, r0
 8017e8a:	60b9      	str	r1, [r7, #8]
 8017e8c:	607a      	str	r2, [r7, #4]
 8017e8e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017e90:	7bfb      	ldrb	r3, [r7, #15]
 8017e92:	2b05      	cmp	r3, #5
 8017e94:	d105      	bne.n	8017ea2 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8017e96:	6879      	ldr	r1, [r7, #4]
 8017e98:	68b8      	ldr	r0, [r7, #8]
 8017e9a:	f001 fd01 	bl	80198a0 <RegionEU868RxConfig>
 8017e9e:	4603      	mov	r3, r0
 8017ea0:	e000      	b.n	8017ea4 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8017ea2:	2300      	movs	r3, #0
        }
    }
}
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	3710      	adds	r7, #16
 8017ea8:	46bd      	mov	sp, r7
 8017eaa:	bd80      	pop	{r7, pc}

08017eac <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017eac:	b580      	push	{r7, lr}
 8017eae:	b084      	sub	sp, #16
 8017eb0:	af00      	add	r7, sp, #0
 8017eb2:	60b9      	str	r1, [r7, #8]
 8017eb4:	607a      	str	r2, [r7, #4]
 8017eb6:	603b      	str	r3, [r7, #0]
 8017eb8:	4603      	mov	r3, r0
 8017eba:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017ebc:	7bfb      	ldrb	r3, [r7, #15]
 8017ebe:	2b05      	cmp	r3, #5
 8017ec0:	d106      	bne.n	8017ed0 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8017ec2:	683a      	ldr	r2, [r7, #0]
 8017ec4:	6879      	ldr	r1, [r7, #4]
 8017ec6:	68b8      	ldr	r0, [r7, #8]
 8017ec8:	f001 fdba 	bl	8019a40 <RegionEU868TxConfig>
 8017ecc:	4603      	mov	r3, r0
 8017ece:	e000      	b.n	8017ed2 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8017ed0:	2300      	movs	r3, #0
        }
    }
}
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	3710      	adds	r7, #16
 8017ed6:	46bd      	mov	sp, r7
 8017ed8:	bd80      	pop	{r7, pc}

08017eda <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017eda:	b580      	push	{r7, lr}
 8017edc:	b086      	sub	sp, #24
 8017ede:	af02      	add	r7, sp, #8
 8017ee0:	60b9      	str	r1, [r7, #8]
 8017ee2:	607a      	str	r2, [r7, #4]
 8017ee4:	603b      	str	r3, [r7, #0]
 8017ee6:	4603      	mov	r3, r0
 8017ee8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017eea:	7bfb      	ldrb	r3, [r7, #15]
 8017eec:	2b05      	cmp	r3, #5
 8017eee:	d109      	bne.n	8017f04 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8017ef0:	69fb      	ldr	r3, [r7, #28]
 8017ef2:	9300      	str	r3, [sp, #0]
 8017ef4:	69bb      	ldr	r3, [r7, #24]
 8017ef6:	683a      	ldr	r2, [r7, #0]
 8017ef8:	6879      	ldr	r1, [r7, #4]
 8017efa:	68b8      	ldr	r0, [r7, #8]
 8017efc:	f001 fe70 	bl	8019be0 <RegionEU868LinkAdrReq>
 8017f00:	4603      	mov	r3, r0
 8017f02:	e000      	b.n	8017f06 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8017f04:	2300      	movs	r3, #0
        }
    }
}
 8017f06:	4618      	mov	r0, r3
 8017f08:	3710      	adds	r7, #16
 8017f0a:	46bd      	mov	sp, r7
 8017f0c:	bd80      	pop	{r7, pc}

08017f0e <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017f0e:	b580      	push	{r7, lr}
 8017f10:	b082      	sub	sp, #8
 8017f12:	af00      	add	r7, sp, #0
 8017f14:	4603      	mov	r3, r0
 8017f16:	6039      	str	r1, [r7, #0]
 8017f18:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017f1a:	79fb      	ldrb	r3, [r7, #7]
 8017f1c:	2b05      	cmp	r3, #5
 8017f1e:	d104      	bne.n	8017f2a <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8017f20:	6838      	ldr	r0, [r7, #0]
 8017f22:	f001 ff7f 	bl	8019e24 <RegionEU868RxParamSetupReq>
 8017f26:	4603      	mov	r3, r0
 8017f28:	e000      	b.n	8017f2c <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017f2a:	2300      	movs	r3, #0
        }
    }
}
 8017f2c:	4618      	mov	r0, r3
 8017f2e:	3708      	adds	r7, #8
 8017f30:	46bd      	mov	sp, r7
 8017f32:	bd80      	pop	{r7, pc}

08017f34 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8017f34:	b580      	push	{r7, lr}
 8017f36:	b082      	sub	sp, #8
 8017f38:	af00      	add	r7, sp, #0
 8017f3a:	4603      	mov	r3, r0
 8017f3c:	6039      	str	r1, [r7, #0]
 8017f3e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017f40:	79fb      	ldrb	r3, [r7, #7]
 8017f42:	2b05      	cmp	r3, #5
 8017f44:	d104      	bne.n	8017f50 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8017f46:	6838      	ldr	r0, [r7, #0]
 8017f48:	f001 ffaa 	bl	8019ea0 <RegionEU868NewChannelReq>
 8017f4c:	4603      	mov	r3, r0
 8017f4e:	e000      	b.n	8017f52 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017f50:	2300      	movs	r3, #0
        }
    }
}
 8017f52:	4618      	mov	r0, r3
 8017f54:	3708      	adds	r7, #8
 8017f56:	46bd      	mov	sp, r7
 8017f58:	bd80      	pop	{r7, pc}

08017f5a <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8017f5a:	b580      	push	{r7, lr}
 8017f5c:	b082      	sub	sp, #8
 8017f5e:	af00      	add	r7, sp, #0
 8017f60:	4603      	mov	r3, r0
 8017f62:	6039      	str	r1, [r7, #0]
 8017f64:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017f66:	79fb      	ldrb	r3, [r7, #7]
 8017f68:	2b05      	cmp	r3, #5
 8017f6a:	d104      	bne.n	8017f76 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8017f6c:	6838      	ldr	r0, [r7, #0]
 8017f6e:	f001 fff5 	bl	8019f5c <RegionEU868TxParamSetupReq>
 8017f72:	4603      	mov	r3, r0
 8017f74:	e000      	b.n	8017f78 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017f76:	2300      	movs	r3, #0
        }
    }
}
 8017f78:	4618      	mov	r0, r3
 8017f7a:	3708      	adds	r7, #8
 8017f7c:	46bd      	mov	sp, r7
 8017f7e:	bd80      	pop	{r7, pc}

08017f80 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8017f80:	b580      	push	{r7, lr}
 8017f82:	b082      	sub	sp, #8
 8017f84:	af00      	add	r7, sp, #0
 8017f86:	4603      	mov	r3, r0
 8017f88:	6039      	str	r1, [r7, #0]
 8017f8a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017f8c:	79fb      	ldrb	r3, [r7, #7]
 8017f8e:	2b05      	cmp	r3, #5
 8017f90:	d104      	bne.n	8017f9c <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8017f92:	6838      	ldr	r0, [r7, #0]
 8017f94:	f001 ffee 	bl	8019f74 <RegionEU868DlChannelReq>
 8017f98:	4603      	mov	r3, r0
 8017f9a:	e000      	b.n	8017f9e <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017f9c:	2300      	movs	r3, #0
        }
    }
}
 8017f9e:	4618      	mov	r0, r3
 8017fa0:	3708      	adds	r7, #8
 8017fa2:	46bd      	mov	sp, r7
 8017fa4:	bd80      	pop	{r7, pc}

08017fa6 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8017fa6:	b580      	push	{r7, lr}
 8017fa8:	b082      	sub	sp, #8
 8017faa:	af00      	add	r7, sp, #0
 8017fac:	4603      	mov	r3, r0
 8017fae:	71fb      	strb	r3, [r7, #7]
 8017fb0:	460b      	mov	r3, r1
 8017fb2:	71bb      	strb	r3, [r7, #6]
 8017fb4:	4613      	mov	r3, r2
 8017fb6:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017fb8:	79fb      	ldrb	r3, [r7, #7]
 8017fba:	2b05      	cmp	r3, #5
 8017fbc:	d108      	bne.n	8017fd0 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8017fbe:	797a      	ldrb	r2, [r7, #5]
 8017fc0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017fc4:	4611      	mov	r1, r2
 8017fc6:	4618      	mov	r0, r3
 8017fc8:	f002 f818 	bl	8019ffc <RegionEU868AlternateDr>
 8017fcc:	4603      	mov	r3, r0
 8017fce:	e000      	b.n	8017fd2 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8017fd0:	2300      	movs	r3, #0
        }
    }
}
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	3708      	adds	r7, #8
 8017fd6:	46bd      	mov	sp, r7
 8017fd8:	bd80      	pop	{r7, pc}

08017fda <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017fda:	b580      	push	{r7, lr}
 8017fdc:	b084      	sub	sp, #16
 8017fde:	af00      	add	r7, sp, #0
 8017fe0:	60b9      	str	r1, [r7, #8]
 8017fe2:	607a      	str	r2, [r7, #4]
 8017fe4:	603b      	str	r3, [r7, #0]
 8017fe6:	4603      	mov	r3, r0
 8017fe8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017fea:	7bfb      	ldrb	r3, [r7, #15]
 8017fec:	2b05      	cmp	r3, #5
 8017fee:	d107      	bne.n	8018000 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8017ff0:	69bb      	ldr	r3, [r7, #24]
 8017ff2:	683a      	ldr	r2, [r7, #0]
 8017ff4:	6879      	ldr	r1, [r7, #4]
 8017ff6:	68b8      	ldr	r0, [r7, #8]
 8017ff8:	f002 f810 	bl	801a01c <RegionEU868NextChannel>
 8017ffc:	4603      	mov	r3, r0
 8017ffe:	e000      	b.n	8018002 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8018000:	2309      	movs	r3, #9
        }
    }
}
 8018002:	4618      	mov	r0, r3
 8018004:	3710      	adds	r7, #16
 8018006:	46bd      	mov	sp, r7
 8018008:	bd80      	pop	{r7, pc}

0801800a <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 801800a:	b580      	push	{r7, lr}
 801800c:	b082      	sub	sp, #8
 801800e:	af00      	add	r7, sp, #0
 8018010:	4603      	mov	r3, r0
 8018012:	6039      	str	r1, [r7, #0]
 8018014:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8018016:	79fb      	ldrb	r3, [r7, #7]
 8018018:	2b05      	cmp	r3, #5
 801801a:	d103      	bne.n	8018024 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 801801c:	6838      	ldr	r0, [r7, #0]
 801801e:	f002 f977 	bl	801a310 <RegionEU868SetContinuousWave>
 8018022:	e000      	b.n	8018026 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8018024:	bf00      	nop
        }
    }
}
 8018026:	bf00      	nop
 8018028:	3708      	adds	r7, #8
 801802a:	46bd      	mov	sp, r7
 801802c:	bd80      	pop	{r7, pc}

0801802e <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801802e:	b590      	push	{r4, r7, lr}
 8018030:	b083      	sub	sp, #12
 8018032:	af00      	add	r7, sp, #0
 8018034:	4604      	mov	r4, r0
 8018036:	4608      	mov	r0, r1
 8018038:	4611      	mov	r1, r2
 801803a:	461a      	mov	r2, r3
 801803c:	4623      	mov	r3, r4
 801803e:	71fb      	strb	r3, [r7, #7]
 8018040:	4603      	mov	r3, r0
 8018042:	71bb      	strb	r3, [r7, #6]
 8018044:	460b      	mov	r3, r1
 8018046:	717b      	strb	r3, [r7, #5]
 8018048:	4613      	mov	r3, r2
 801804a:	713b      	strb	r3, [r7, #4]
    switch( region )
 801804c:	79fb      	ldrb	r3, [r7, #7]
 801804e:	2b05      	cmp	r3, #5
 8018050:	d109      	bne.n	8018066 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8018052:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8018056:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801805a:	79bb      	ldrb	r3, [r7, #6]
 801805c:	4618      	mov	r0, r3
 801805e:	f002 f9a5 	bl	801a3ac <RegionEU868ApplyDrOffset>
 8018062:	4603      	mov	r3, r0
 8018064:	e000      	b.n	8018068 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8018066:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8018068:	4618      	mov	r0, r3
 801806a:	370c      	adds	r7, #12
 801806c:	46bd      	mov	sp, r7
 801806e:	bd90      	pop	{r4, r7, pc}

08018070 <RegionRxBeaconSetup>:

void RegionRxBeaconSetup( LoRaMacRegion_t region, RxBeaconSetup_t* rxBeaconSetup, uint8_t* outDr )
{
 8018070:	b580      	push	{r7, lr}
 8018072:	b084      	sub	sp, #16
 8018074:	af00      	add	r7, sp, #0
 8018076:	4603      	mov	r3, r0
 8018078:	60b9      	str	r1, [r7, #8]
 801807a:	607a      	str	r2, [r7, #4]
 801807c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801807e:	7bfb      	ldrb	r3, [r7, #15]
 8018080:	2b05      	cmp	r3, #5
 8018082:	d104      	bne.n	801808e <RegionRxBeaconSetup+0x1e>
        AS923_RX_BEACON_SETUP( );
        AU915_RX_BEACON_SETUP( );
        CN470_RX_BEACON_SETUP( );
        CN779_RX_BEACON_SETUP( );
        EU433_RX_BEACON_SETUP( );
        EU868_RX_BEACON_SETUP( );
 8018084:	6879      	ldr	r1, [r7, #4]
 8018086:	68b8      	ldr	r0, [r7, #8]
 8018088:	f002 f9aa 	bl	801a3e0 <RegionEU868RxBeaconSetup>
 801808c:	e000      	b.n	8018090 <RegionRxBeaconSetup+0x20>
        IN865_RX_BEACON_SETUP( );
        US915_RX_BEACON_SETUP( );
        RU864_RX_BEACON_SETUP( );
        default:
        {
            break;
 801808e:	bf00      	nop
        }
    }
}
 8018090:	bf00      	nop
 8018092:	3710      	adds	r7, #16
 8018094:	46bd      	mov	sp, r7
 8018096:	bd80      	pop	{r7, pc}

08018098 <RegionGetVersion>:

Version_t RegionGetVersion( void )
{
 8018098:	b480      	push	{r7}
 801809a:	b083      	sub	sp, #12
 801809c:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801809e:	4b04      	ldr	r3, [pc, #16]	; (80180b0 <RegionGetVersion+0x18>)
 80180a0:	607b      	str	r3, [r7, #4]

    return version;
 80180a2:	687b      	ldr	r3, [r7, #4]
}
 80180a4:	4618      	mov	r0, r3
 80180a6:	370c      	adds	r7, #12
 80180a8:	46bd      	mov	sp, r7
 80180aa:	bc80      	pop	{r7}
 80180ac:	4770      	bx	lr
 80180ae:	bf00      	nop
 80180b0:	01010003 	.word	0x01010003

080180b4 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80180b4:	b480      	push	{r7}
 80180b6:	b087      	sub	sp, #28
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	60f8      	str	r0, [r7, #12]
 80180bc:	4608      	mov	r0, r1
 80180be:	4639      	mov	r1, r7
 80180c0:	e881 000c 	stmia.w	r1, {r2, r3}
 80180c4:	4603      	mov	r3, r0
 80180c6:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80180c8:	68fb      	ldr	r3, [r7, #12]
 80180ca:	881b      	ldrh	r3, [r3, #0]
 80180cc:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 80180ce:	7afb      	ldrb	r3, [r7, #11]
 80180d0:	f083 0301 	eor.w	r3, r3, #1
 80180d4:	b2db      	uxtb	r3, r3
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d01b      	beq.n	8018112 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 80180da:	f242 7310 	movw	r3, #10000	; 0x2710
 80180de:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80180e0:	683b      	ldr	r3, [r7, #0]
 80180e2:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80180e6:	d202      	bcs.n	80180ee <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80180e8:	2364      	movs	r3, #100	; 0x64
 80180ea:	82bb      	strh	r3, [r7, #20]
 80180ec:	e00b      	b.n	8018106 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80180ee:	683b      	ldr	r3, [r7, #0]
 80180f0:	f649 22af 	movw	r2, #39599	; 0x9aaf
 80180f4:	4293      	cmp	r3, r2
 80180f6:	d803      	bhi.n	8018100 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80180f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80180fc:	82bb      	strh	r3, [r7, #20]
 80180fe:	e002      	b.n	8018106 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8018100:	f242 7310 	movw	r3, #10000	; 0x2710
 8018104:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8018106:	8aba      	ldrh	r2, [r7, #20]
 8018108:	8afb      	ldrh	r3, [r7, #22]
 801810a:	4293      	cmp	r3, r2
 801810c:	bf38      	it	cc
 801810e:	4613      	movcc	r3, r2
 8018110:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8018112:	8afb      	ldrh	r3, [r7, #22]
 8018114:	2b00      	cmp	r3, #0
 8018116:	d101      	bne.n	801811c <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8018118:	2301      	movs	r3, #1
 801811a:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 801811c:	8afb      	ldrh	r3, [r7, #22]
}
 801811e:	4618      	mov	r0, r3
 8018120:	371c      	adds	r7, #28
 8018122:	46bd      	mov	sp, r7
 8018124:	bc80      	pop	{r7}
 8018126:	4770      	bx	lr

08018128 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8018128:	b580      	push	{r7, lr}
 801812a:	b08e      	sub	sp, #56	; 0x38
 801812c:	af02      	add	r7, sp, #8
 801812e:	60f8      	str	r0, [r7, #12]
 8018130:	4608      	mov	r0, r1
 8018132:	4639      	mov	r1, r7
 8018134:	e881 000c 	stmia.w	r1, {r2, r3}
 8018138:	4603      	mov	r3, r0
 801813a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801813c:	68fb      	ldr	r3, [r7, #12]
 801813e:	881b      	ldrh	r3, [r3, #0]
 8018140:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8018142:	4b4b      	ldr	r3, [pc, #300]	; (8018270 <SetMaxTimeCredits+0x148>)
 8018144:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8018146:	463b      	mov	r3, r7
 8018148:	e893 0003 	ldmia.w	r3, {r0, r1}
 801814c:	f005 fdea 	bl	801dd24 <SysTimeToMs>
 8018150:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8018152:	f107 0314 	add.w	r3, r7, #20
 8018156:	2200      	movs	r2, #0
 8018158:	601a      	str	r2, [r3, #0]
 801815a:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801815c:	7af9      	ldrb	r1, [r7, #11]
 801815e:	463b      	mov	r3, r7
 8018160:	cb0c      	ldmia	r3, {r2, r3}
 8018162:	68f8      	ldr	r0, [r7, #12]
 8018164:	f7ff ffa6 	bl	80180b4 <GetDutyCycle>
 8018168:	4603      	mov	r3, r0
 801816a:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 801816c:	7afb      	ldrb	r3, [r7, #11]
 801816e:	f083 0301 	eor.w	r3, r3, #1
 8018172:	b2db      	uxtb	r3, r3
 8018174:	2b00      	cmp	r3, #0
 8018176:	d062      	beq.n	801823e <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8018178:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801817a:	2b64      	cmp	r3, #100	; 0x64
 801817c:	d105      	bne.n	801818a <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801817e:	4b3c      	ldr	r3, [pc, #240]	; (8018270 <SetMaxTimeCredits+0x148>)
 8018180:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8018182:	68fb      	ldr	r3, [r7, #12]
 8018184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018186:	609a      	str	r2, [r3, #8]
 8018188:	e00b      	b.n	80181a2 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801818a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801818c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018190:	d105      	bne.n	801819e <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8018192:	4b38      	ldr	r3, [pc, #224]	; (8018274 <SetMaxTimeCredits+0x14c>)
 8018194:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8018196:	68fb      	ldr	r3, [r7, #12]
 8018198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801819a:	609a      	str	r2, [r3, #8]
 801819c:	e001      	b.n	80181a2 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801819e:	4b36      	ldr	r3, [pc, #216]	; (8018278 <SetMaxTimeCredits+0x150>)
 80181a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80181a2:	68fb      	ldr	r3, [r7, #12]
 80181a4:	689a      	ldr	r2, [r3, #8]
 80181a6:	f107 031c 	add.w	r3, r7, #28
 80181aa:	4611      	mov	r1, r2
 80181ac:	4618      	mov	r0, r3
 80181ae:	f005 fde1 	bl	801dd74 <SysTimeFromMs>
 80181b2:	f107 0014 	add.w	r0, r7, #20
 80181b6:	6a3b      	ldr	r3, [r7, #32]
 80181b8:	9300      	str	r3, [sp, #0]
 80181ba:	69fb      	ldr	r3, [r7, #28]
 80181bc:	463a      	mov	r2, r7
 80181be:	ca06      	ldmia	r2, {r1, r2}
 80181c0:	f005 fcf1 	bl	801dba6 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80181c4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80181c8:	f083 0301 	eor.w	r3, r3, #1
 80181cc:	b2db      	uxtb	r3, r3
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d006      	beq.n	80181e0 <SetMaxTimeCredits+0xb8>
 80181d2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80181d6:	f083 0301 	eor.w	r3, r3, #1
 80181da:	b2db      	uxtb	r3, r3
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d108      	bne.n	80181f2 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 80181e0:	68fb      	ldr	r3, [r7, #12]
 80181e2:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80181e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80181e6:	429a      	cmp	r2, r3
 80181e8:	d103      	bne.n	80181f2 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 80181ea:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 80181ec:	4a23      	ldr	r2, [pc, #140]	; (801827c <SetMaxTimeCredits+0x154>)
 80181ee:	4293      	cmp	r3, r2
 80181f0:	d92f      	bls.n	8018252 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 80181f2:	68fb      	ldr	r3, [r7, #12]
 80181f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80181f6:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80181f8:	683b      	ldr	r3, [r7, #0]
 80181fa:	4a21      	ldr	r2, [pc, #132]	; (8018280 <SetMaxTimeCredits+0x158>)
 80181fc:	4293      	cmp	r3, r2
 80181fe:	d928      	bls.n	8018252 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8018200:	683b      	ldr	r3, [r7, #0]
 8018202:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8018206:	3b30      	subs	r3, #48	; 0x30
 8018208:	4a1e      	ldr	r2, [pc, #120]	; (8018284 <SetMaxTimeCredits+0x15c>)
 801820a:	fba2 2303 	umull	r2, r3, r2, r3
 801820e:	0c1b      	lsrs	r3, r3, #16
 8018210:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8018212:	697b      	ldr	r3, [r7, #20]
 8018214:	4a1c      	ldr	r2, [pc, #112]	; (8018288 <SetMaxTimeCredits+0x160>)
 8018216:	fb02 f303 	mul.w	r3, r2, r3
 801821a:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801821c:	697b      	ldr	r3, [r7, #20]
 801821e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8018222:	3330      	adds	r3, #48	; 0x30
 8018224:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8018226:	2300      	movs	r3, #0
 8018228:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801822a:	f107 0314 	add.w	r3, r7, #20
 801822e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018232:	f005 fd77 	bl	801dd24 <SysTimeToMs>
 8018236:	4602      	mov	r2, r0
 8018238:	68fb      	ldr	r3, [r7, #12]
 801823a:	609a      	str	r2, [r3, #8]
 801823c:	e009      	b.n	8018252 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 801823e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8018242:	f083 0301 	eor.w	r3, r3, #1
 8018246:	b2db      	uxtb	r3, r3
 8018248:	2b00      	cmp	r3, #0
 801824a:	d002      	beq.n	8018252 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 801824c:	68fb      	ldr	r3, [r7, #12]
 801824e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018250:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8018252:	68fb      	ldr	r3, [r7, #12]
 8018254:	685b      	ldr	r3, [r3, #4]
 8018256:	2b00      	cmp	r3, #0
 8018258:	d102      	bne.n	8018260 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801825e:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8018260:	68fb      	ldr	r3, [r7, #12]
 8018262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018264:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8018266:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8018268:	4618      	mov	r0, r3
 801826a:	3730      	adds	r7, #48	; 0x30
 801826c:	46bd      	mov	sp, r7
 801826e:	bd80      	pop	{r7, pc}
 8018270:	001b7740 	.word	0x001b7740
 8018274:	0112a880 	.word	0x0112a880
 8018278:	02932e00 	.word	0x02932e00
 801827c:	0001517f 	.word	0x0001517f
 8018280:	0001ec2f 	.word	0x0001ec2f
 8018284:	c22e4507 	.word	0xc22e4507
 8018288:	00015180 	.word	0x00015180

0801828c <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 801828c:	b580      	push	{r7, lr}
 801828e:	b086      	sub	sp, #24
 8018290:	af02      	add	r7, sp, #8
 8018292:	6078      	str	r0, [r7, #4]
 8018294:	4608      	mov	r0, r1
 8018296:	4611      	mov	r1, r2
 8018298:	461a      	mov	r2, r3
 801829a:	4603      	mov	r3, r0
 801829c:	70fb      	strb	r3, [r7, #3]
 801829e:	460b      	mov	r3, r1
 80182a0:	70bb      	strb	r3, [r7, #2]
 80182a2:	4613      	mov	r3, r2
 80182a4:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80182a6:	78f9      	ldrb	r1, [r7, #3]
 80182a8:	787b      	ldrb	r3, [r7, #1]
 80182aa:	9301      	str	r3, [sp, #4]
 80182ac:	78bb      	ldrb	r3, [r7, #2]
 80182ae:	9300      	str	r3, [sp, #0]
 80182b0:	f107 0318 	add.w	r3, r7, #24
 80182b4:	cb0c      	ldmia	r3, {r2, r3}
 80182b6:	6878      	ldr	r0, [r7, #4]
 80182b8:	f7ff ff36 	bl	8018128 <SetMaxTimeCredits>
 80182bc:	4603      	mov	r3, r0
 80182be:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 80182c0:	78fb      	ldrb	r3, [r7, #3]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d00a      	beq.n	80182dc <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	685b      	ldr	r3, [r3, #4]
 80182ca:	4618      	mov	r0, r3
 80182cc:	f006 fb6a 	bl	801e9a4 <UTIL_TIMER_GetElapsedTime>
 80182d0:	4602      	mov	r2, r0
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	68db      	ldr	r3, [r3, #12]
 80182d6:	441a      	add	r2, r3
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	68da      	ldr	r2, [r3, #12]
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	691b      	ldr	r3, [r3, #16]
 80182e4:	429a      	cmp	r2, r3
 80182e6:	d903      	bls.n	80182f0 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	691a      	ldr	r2, [r3, #16]
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	6a3a      	ldr	r2, [r7, #32]
 80182f4:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 80182f6:	89fb      	ldrh	r3, [r7, #14]
}
 80182f8:	4618      	mov	r0, r3
 80182fa:	3710      	adds	r7, #16
 80182fc:	46bd      	mov	sp, r7
 80182fe:	bd80      	pop	{r7, pc}

08018300 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8018300:	b480      	push	{r7}
 8018302:	b085      	sub	sp, #20
 8018304:	af00      	add	r7, sp, #0
 8018306:	4603      	mov	r3, r0
 8018308:	460a      	mov	r2, r1
 801830a:	80fb      	strh	r3, [r7, #6]
 801830c:	4613      	mov	r3, r2
 801830e:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8018310:	2300      	movs	r3, #0
 8018312:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8018314:	2300      	movs	r3, #0
 8018316:	73bb      	strb	r3, [r7, #14]
 8018318:	e011      	b.n	801833e <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801831a:	88fa      	ldrh	r2, [r7, #6]
 801831c:	7bbb      	ldrb	r3, [r7, #14]
 801831e:	2101      	movs	r1, #1
 8018320:	fa01 f303 	lsl.w	r3, r1, r3
 8018324:	401a      	ands	r2, r3
 8018326:	7bbb      	ldrb	r3, [r7, #14]
 8018328:	2101      	movs	r1, #1
 801832a:	fa01 f303 	lsl.w	r3, r1, r3
 801832e:	429a      	cmp	r2, r3
 8018330:	d102      	bne.n	8018338 <CountChannels+0x38>
        {
            nbActiveBits++;
 8018332:	7bfb      	ldrb	r3, [r7, #15]
 8018334:	3301      	adds	r3, #1
 8018336:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8018338:	7bbb      	ldrb	r3, [r7, #14]
 801833a:	3301      	adds	r3, #1
 801833c:	73bb      	strb	r3, [r7, #14]
 801833e:	7bba      	ldrb	r2, [r7, #14]
 8018340:	797b      	ldrb	r3, [r7, #5]
 8018342:	429a      	cmp	r2, r3
 8018344:	d3e9      	bcc.n	801831a <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8018346:	7bfb      	ldrb	r3, [r7, #15]
}
 8018348:	4618      	mov	r0, r3
 801834a:	3714      	adds	r7, #20
 801834c:	46bd      	mov	sp, r7
 801834e:	bc80      	pop	{r7}
 8018350:	4770      	bx	lr

08018352 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8018352:	b580      	push	{r7, lr}
 8018354:	b084      	sub	sp, #16
 8018356:	af00      	add	r7, sp, #0
 8018358:	6039      	str	r1, [r7, #0]
 801835a:	4611      	mov	r1, r2
 801835c:	461a      	mov	r2, r3
 801835e:	4603      	mov	r3, r0
 8018360:	71fb      	strb	r3, [r7, #7]
 8018362:	460b      	mov	r3, r1
 8018364:	71bb      	strb	r3, [r7, #6]
 8018366:	4613      	mov	r3, r2
 8018368:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801836a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 801836e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8018372:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018376:	4618      	mov	r0, r3
 8018378:	f000 f85d 	bl	8018436 <RegionCommonValueInRange>
 801837c:	4603      	mov	r3, r0
 801837e:	2b00      	cmp	r3, #0
 8018380:	d101      	bne.n	8018386 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8018382:	2300      	movs	r3, #0
 8018384:	e053      	b.n	801842e <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8018386:	2300      	movs	r3, #0
 8018388:	73fb      	strb	r3, [r7, #15]
 801838a:	2300      	movs	r3, #0
 801838c:	73bb      	strb	r3, [r7, #14]
 801838e:	e049      	b.n	8018424 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8018390:	2300      	movs	r3, #0
 8018392:	737b      	strb	r3, [r7, #13]
 8018394:	e03d      	b.n	8018412 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8018396:	7bbb      	ldrb	r3, [r7, #14]
 8018398:	005b      	lsls	r3, r3, #1
 801839a:	683a      	ldr	r2, [r7, #0]
 801839c:	4413      	add	r3, r2
 801839e:	881b      	ldrh	r3, [r3, #0]
 80183a0:	461a      	mov	r2, r3
 80183a2:	7b7b      	ldrb	r3, [r7, #13]
 80183a4:	fa42 f303 	asr.w	r3, r2, r3
 80183a8:	f003 0301 	and.w	r3, r3, #1
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d02d      	beq.n	801840c <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80183b0:	7bfa      	ldrb	r2, [r7, #15]
 80183b2:	7b7b      	ldrb	r3, [r7, #13]
 80183b4:	4413      	add	r3, r2
 80183b6:	461a      	mov	r2, r3
 80183b8:	4613      	mov	r3, r2
 80183ba:	005b      	lsls	r3, r3, #1
 80183bc:	4413      	add	r3, r2
 80183be:	009b      	lsls	r3, r3, #2
 80183c0:	461a      	mov	r2, r3
 80183c2:	69fb      	ldr	r3, [r7, #28]
 80183c4:	4413      	add	r3, r2
 80183c6:	7a1b      	ldrb	r3, [r3, #8]
 80183c8:	f343 0303 	sbfx	r3, r3, #0, #4
 80183cc:	b25b      	sxtb	r3, r3
 80183ce:	f003 030f 	and.w	r3, r3, #15
 80183d2:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 80183d4:	7bfa      	ldrb	r2, [r7, #15]
 80183d6:	7b7b      	ldrb	r3, [r7, #13]
 80183d8:	4413      	add	r3, r2
 80183da:	461a      	mov	r2, r3
 80183dc:	4613      	mov	r3, r2
 80183de:	005b      	lsls	r3, r3, #1
 80183e0:	4413      	add	r3, r2
 80183e2:	009b      	lsls	r3, r3, #2
 80183e4:	461a      	mov	r2, r3
 80183e6:	69fb      	ldr	r3, [r7, #28]
 80183e8:	4413      	add	r3, r2
 80183ea:	7a1b      	ldrb	r3, [r3, #8]
 80183ec:	f343 1303 	sbfx	r3, r3, #4, #4
 80183f0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80183f2:	f003 030f 	and.w	r3, r3, #15
 80183f6:	b25a      	sxtb	r2, r3
 80183f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80183fc:	4618      	mov	r0, r3
 80183fe:	f000 f81a 	bl	8018436 <RegionCommonValueInRange>
 8018402:	4603      	mov	r3, r0
 8018404:	2b01      	cmp	r3, #1
 8018406:	d101      	bne.n	801840c <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8018408:	2301      	movs	r3, #1
 801840a:	e010      	b.n	801842e <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 801840c:	7b7b      	ldrb	r3, [r7, #13]
 801840e:	3301      	adds	r3, #1
 8018410:	737b      	strb	r3, [r7, #13]
 8018412:	7b7b      	ldrb	r3, [r7, #13]
 8018414:	2b0f      	cmp	r3, #15
 8018416:	d9be      	bls.n	8018396 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8018418:	7bfb      	ldrb	r3, [r7, #15]
 801841a:	3310      	adds	r3, #16
 801841c:	73fb      	strb	r3, [r7, #15]
 801841e:	7bbb      	ldrb	r3, [r7, #14]
 8018420:	3301      	adds	r3, #1
 8018422:	73bb      	strb	r3, [r7, #14]
 8018424:	7bfa      	ldrb	r2, [r7, #15]
 8018426:	79fb      	ldrb	r3, [r7, #7]
 8018428:	429a      	cmp	r2, r3
 801842a:	d3b1      	bcc.n	8018390 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 801842c:	2300      	movs	r3, #0
}
 801842e:	4618      	mov	r0, r3
 8018430:	3710      	adds	r7, #16
 8018432:	46bd      	mov	sp, r7
 8018434:	bd80      	pop	{r7, pc}

08018436 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8018436:	b480      	push	{r7}
 8018438:	b083      	sub	sp, #12
 801843a:	af00      	add	r7, sp, #0
 801843c:	4603      	mov	r3, r0
 801843e:	71fb      	strb	r3, [r7, #7]
 8018440:	460b      	mov	r3, r1
 8018442:	71bb      	strb	r3, [r7, #6]
 8018444:	4613      	mov	r3, r2
 8018446:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8018448:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801844c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018450:	429a      	cmp	r2, r3
 8018452:	db07      	blt.n	8018464 <RegionCommonValueInRange+0x2e>
 8018454:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8018458:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801845c:	429a      	cmp	r2, r3
 801845e:	dc01      	bgt.n	8018464 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8018460:	2301      	movs	r3, #1
 8018462:	e000      	b.n	8018466 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8018464:	2300      	movs	r3, #0
}
 8018466:	4618      	mov	r0, r3
 8018468:	370c      	adds	r7, #12
 801846a:	46bd      	mov	sp, r7
 801846c:	bc80      	pop	{r7}
 801846e:	4770      	bx	lr

08018470 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8018470:	b480      	push	{r7}
 8018472:	b085      	sub	sp, #20
 8018474:	af00      	add	r7, sp, #0
 8018476:	6078      	str	r0, [r7, #4]
 8018478:	460b      	mov	r3, r1
 801847a:	70fb      	strb	r3, [r7, #3]
 801847c:	4613      	mov	r3, r2
 801847e:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8018480:	78fb      	ldrb	r3, [r7, #3]
 8018482:	091b      	lsrs	r3, r3, #4
 8018484:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8018486:	78bb      	ldrb	r3, [r7, #2]
 8018488:	091b      	lsrs	r3, r3, #4
 801848a:	b2db      	uxtb	r3, r3
 801848c:	7bfa      	ldrb	r2, [r7, #15]
 801848e:	429a      	cmp	r2, r3
 8018490:	d803      	bhi.n	801849a <RegionCommonChanDisable+0x2a>
 8018492:	78fa      	ldrb	r2, [r7, #3]
 8018494:	78bb      	ldrb	r3, [r7, #2]
 8018496:	429a      	cmp	r2, r3
 8018498:	d301      	bcc.n	801849e <RegionCommonChanDisable+0x2e>
    {
        return false;
 801849a:	2300      	movs	r3, #0
 801849c:	e017      	b.n	80184ce <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801849e:	7bfb      	ldrb	r3, [r7, #15]
 80184a0:	005b      	lsls	r3, r3, #1
 80184a2:	687a      	ldr	r2, [r7, #4]
 80184a4:	4413      	add	r3, r2
 80184a6:	881b      	ldrh	r3, [r3, #0]
 80184a8:	b21a      	sxth	r2, r3
 80184aa:	78fb      	ldrb	r3, [r7, #3]
 80184ac:	f003 030f 	and.w	r3, r3, #15
 80184b0:	2101      	movs	r1, #1
 80184b2:	fa01 f303 	lsl.w	r3, r1, r3
 80184b6:	b21b      	sxth	r3, r3
 80184b8:	43db      	mvns	r3, r3
 80184ba:	b21b      	sxth	r3, r3
 80184bc:	4013      	ands	r3, r2
 80184be:	b219      	sxth	r1, r3
 80184c0:	7bfb      	ldrb	r3, [r7, #15]
 80184c2:	005b      	lsls	r3, r3, #1
 80184c4:	687a      	ldr	r2, [r7, #4]
 80184c6:	4413      	add	r3, r2
 80184c8:	b28a      	uxth	r2, r1
 80184ca:	801a      	strh	r2, [r3, #0]

    return true;
 80184cc:	2301      	movs	r3, #1
}
 80184ce:	4618      	mov	r0, r3
 80184d0:	3714      	adds	r7, #20
 80184d2:	46bd      	mov	sp, r7
 80184d4:	bc80      	pop	{r7}
 80184d6:	4770      	bx	lr

080184d8 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80184d8:	b580      	push	{r7, lr}
 80184da:	b084      	sub	sp, #16
 80184dc:	af00      	add	r7, sp, #0
 80184de:	6078      	str	r0, [r7, #4]
 80184e0:	460b      	mov	r3, r1
 80184e2:	70fb      	strb	r3, [r7, #3]
 80184e4:	4613      	mov	r3, r2
 80184e6:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 80184e8:	2300      	movs	r3, #0
 80184ea:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d101      	bne.n	80184f6 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 80184f2:	2300      	movs	r3, #0
 80184f4:	e018      	b.n	8018528 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80184f6:	78fb      	ldrb	r3, [r7, #3]
 80184f8:	73bb      	strb	r3, [r7, #14]
 80184fa:	e010      	b.n	801851e <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80184fc:	7bbb      	ldrb	r3, [r7, #14]
 80184fe:	005b      	lsls	r3, r3, #1
 8018500:	687a      	ldr	r2, [r7, #4]
 8018502:	4413      	add	r3, r2
 8018504:	881b      	ldrh	r3, [r3, #0]
 8018506:	2110      	movs	r1, #16
 8018508:	4618      	mov	r0, r3
 801850a:	f7ff fef9 	bl	8018300 <CountChannels>
 801850e:	4603      	mov	r3, r0
 8018510:	461a      	mov	r2, r3
 8018512:	7bfb      	ldrb	r3, [r7, #15]
 8018514:	4413      	add	r3, r2
 8018516:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8018518:	7bbb      	ldrb	r3, [r7, #14]
 801851a:	3301      	adds	r3, #1
 801851c:	73bb      	strb	r3, [r7, #14]
 801851e:	7bba      	ldrb	r2, [r7, #14]
 8018520:	78bb      	ldrb	r3, [r7, #2]
 8018522:	429a      	cmp	r2, r3
 8018524:	d3ea      	bcc.n	80184fc <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8018526:	7bfb      	ldrb	r3, [r7, #15]
}
 8018528:	4618      	mov	r0, r3
 801852a:	3710      	adds	r7, #16
 801852c:	46bd      	mov	sp, r7
 801852e:	bd80      	pop	{r7, pc}

08018530 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8018530:	b480      	push	{r7}
 8018532:	b087      	sub	sp, #28
 8018534:	af00      	add	r7, sp, #0
 8018536:	60f8      	str	r0, [r7, #12]
 8018538:	60b9      	str	r1, [r7, #8]
 801853a:	4613      	mov	r3, r2
 801853c:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801853e:	68fb      	ldr	r3, [r7, #12]
 8018540:	2b00      	cmp	r3, #0
 8018542:	d016      	beq.n	8018572 <RegionCommonChanMaskCopy+0x42>
 8018544:	68bb      	ldr	r3, [r7, #8]
 8018546:	2b00      	cmp	r3, #0
 8018548:	d013      	beq.n	8018572 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 801854a:	2300      	movs	r3, #0
 801854c:	75fb      	strb	r3, [r7, #23]
 801854e:	e00c      	b.n	801856a <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8018550:	7dfb      	ldrb	r3, [r7, #23]
 8018552:	005b      	lsls	r3, r3, #1
 8018554:	68ba      	ldr	r2, [r7, #8]
 8018556:	441a      	add	r2, r3
 8018558:	7dfb      	ldrb	r3, [r7, #23]
 801855a:	005b      	lsls	r3, r3, #1
 801855c:	68f9      	ldr	r1, [r7, #12]
 801855e:	440b      	add	r3, r1
 8018560:	8812      	ldrh	r2, [r2, #0]
 8018562:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8018564:	7dfb      	ldrb	r3, [r7, #23]
 8018566:	3301      	adds	r3, #1
 8018568:	75fb      	strb	r3, [r7, #23]
 801856a:	7dfa      	ldrb	r2, [r7, #23]
 801856c:	79fb      	ldrb	r3, [r7, #7]
 801856e:	429a      	cmp	r2, r3
 8018570:	d3ee      	bcc.n	8018550 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8018572:	bf00      	nop
 8018574:	371c      	adds	r7, #28
 8018576:	46bd      	mov	sp, r7
 8018578:	bc80      	pop	{r7}
 801857a:	4770      	bx	lr

0801857c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801857c:	b082      	sub	sp, #8
 801857e:	b580      	push	{r7, lr}
 8018580:	b086      	sub	sp, #24
 8018582:	af00      	add	r7, sp, #0
 8018584:	60f8      	str	r0, [r7, #12]
 8018586:	60b9      	str	r1, [r7, #8]
 8018588:	627b      	str	r3, [r7, #36]	; 0x24
 801858a:	4613      	mov	r3, r2
 801858c:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801858e:	79f9      	ldrb	r1, [r7, #7]
 8018590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018594:	cb0c      	ldmia	r3, {r2, r3}
 8018596:	68f8      	ldr	r0, [r7, #12]
 8018598:	f7ff fd8c 	bl	80180b4 <GetDutyCycle>
 801859c:	4603      	mov	r3, r0
 801859e:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	68da      	ldr	r2, [r3, #12]
 80185a4:	8afb      	ldrh	r3, [r7, #22]
 80185a6:	68b9      	ldr	r1, [r7, #8]
 80185a8:	fb01 f303 	mul.w	r3, r1, r3
 80185ac:	429a      	cmp	r2, r3
 80185ae:	d909      	bls.n	80185c4 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80185b0:	68fb      	ldr	r3, [r7, #12]
 80185b2:	68da      	ldr	r2, [r3, #12]
 80185b4:	8afb      	ldrh	r3, [r7, #22]
 80185b6:	68b9      	ldr	r1, [r7, #8]
 80185b8:	fb01 f303 	mul.w	r3, r1, r3
 80185bc:	1ad2      	subs	r2, r2, r3
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 80185c2:	e002      	b.n	80185ca <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	2200      	movs	r2, #0
 80185c8:	60da      	str	r2, [r3, #12]
}
 80185ca:	bf00      	nop
 80185cc:	3718      	adds	r7, #24
 80185ce:	46bd      	mov	sp, r7
 80185d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80185d4:	b002      	add	sp, #8
 80185d6:	4770      	bx	lr

080185d8 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 80185d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185da:	b08f      	sub	sp, #60	; 0x3c
 80185dc:	af04      	add	r7, sp, #16
 80185de:	6039      	str	r1, [r7, #0]
 80185e0:	4611      	mov	r1, r2
 80185e2:	461a      	mov	r2, r3
 80185e4:	4603      	mov	r3, r0
 80185e6:	71fb      	strb	r3, [r7, #7]
 80185e8:	460b      	mov	r3, r1
 80185ea:	71bb      	strb	r3, [r7, #6]
 80185ec:	4613      	mov	r3, r2
 80185ee:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 80185f0:	f04f 33ff 	mov.w	r3, #4294967295
 80185f4:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 80185f6:	f006 f9c3 	bl	801e980 <UTIL_TIMER_GetCurrentTime>
 80185fa:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 80185fc:	2300      	movs	r3, #0
 80185fe:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8018600:	2301      	movs	r3, #1
 8018602:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8018604:	2300      	movs	r3, #0
 8018606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 801860a:	2300      	movs	r3, #0
 801860c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8018610:	e0ba      	b.n	8018788 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8018612:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018616:	4613      	mov	r3, r2
 8018618:	005b      	lsls	r3, r3, #1
 801861a:	4413      	add	r3, r2
 801861c:	00db      	lsls	r3, r3, #3
 801861e:	461a      	mov	r2, r3
 8018620:	683b      	ldr	r3, [r7, #0]
 8018622:	189c      	adds	r4, r3, r2
 8018624:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8018628:	797a      	ldrb	r2, [r7, #5]
 801862a:	79fd      	ldrb	r5, [r7, #7]
 801862c:	69fb      	ldr	r3, [r7, #28]
 801862e:	9302      	str	r3, [sp, #8]
 8018630:	46ec      	mov	ip, sp
 8018632:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018636:	e893 0003 	ldmia.w	r3, {r0, r1}
 801863a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801863e:	4633      	mov	r3, r6
 8018640:	4629      	mov	r1, r5
 8018642:	4620      	mov	r0, r4
 8018644:	f7ff fe22 	bl	801828c <UpdateTimeCredits>
 8018648:	4603      	mov	r3, r0
 801864a:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 801864c:	8afa      	ldrh	r2, [r7, #22]
 801864e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018650:	fb02 f303 	mul.w	r3, r2, r3
 8018654:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8018656:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801865a:	4613      	mov	r3, r2
 801865c:	005b      	lsls	r3, r3, #1
 801865e:	4413      	add	r3, r2
 8018660:	00db      	lsls	r3, r3, #3
 8018662:	461a      	mov	r2, r3
 8018664:	683b      	ldr	r3, [r7, #0]
 8018666:	4413      	add	r3, r2
 8018668:	68db      	ldr	r3, [r3, #12]
 801866a:	69ba      	ldr	r2, [r7, #24]
 801866c:	429a      	cmp	r2, r3
 801866e:	d308      	bcc.n	8018682 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8018670:	797b      	ldrb	r3, [r7, #5]
 8018672:	f083 0301 	eor.w	r3, r3, #1
 8018676:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8018678:	2b00      	cmp	r3, #0
 801867a:	d013      	beq.n	80186a4 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801867c:	79fb      	ldrb	r3, [r7, #7]
 801867e:	2b00      	cmp	r3, #0
 8018680:	d010      	beq.n	80186a4 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8018682:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018686:	4613      	mov	r3, r2
 8018688:	005b      	lsls	r3, r3, #1
 801868a:	4413      	add	r3, r2
 801868c:	00db      	lsls	r3, r3, #3
 801868e:	461a      	mov	r2, r3
 8018690:	683b      	ldr	r3, [r7, #0]
 8018692:	4413      	add	r3, r2
 8018694:	2201      	movs	r2, #1
 8018696:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8018698:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801869c:	3301      	adds	r3, #1
 801869e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80186a2:	e06c      	b.n	801877e <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80186a4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80186a8:	4613      	mov	r3, r2
 80186aa:	005b      	lsls	r3, r3, #1
 80186ac:	4413      	add	r3, r2
 80186ae:	00db      	lsls	r3, r3, #3
 80186b0:	461a      	mov	r2, r3
 80186b2:	683b      	ldr	r3, [r7, #0]
 80186b4:	4413      	add	r3, r2
 80186b6:	2200      	movs	r2, #0
 80186b8:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 80186ba:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80186be:	4613      	mov	r3, r2
 80186c0:	005b      	lsls	r3, r3, #1
 80186c2:	4413      	add	r3, r2
 80186c4:	00db      	lsls	r3, r3, #3
 80186c6:	461a      	mov	r2, r3
 80186c8:	683b      	ldr	r3, [r7, #0]
 80186ca:	4413      	add	r3, r2
 80186cc:	691b      	ldr	r3, [r3, #16]
 80186ce:	69ba      	ldr	r2, [r7, #24]
 80186d0:	429a      	cmp	r2, r3
 80186d2:	d215      	bcs.n	8018700 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 80186d4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80186d8:	4613      	mov	r3, r2
 80186da:	005b      	lsls	r3, r3, #1
 80186dc:	4413      	add	r3, r2
 80186de:	00db      	lsls	r3, r3, #3
 80186e0:	461a      	mov	r2, r3
 80186e2:	683b      	ldr	r3, [r7, #0]
 80186e4:	4413      	add	r3, r2
 80186e6:	68db      	ldr	r3, [r3, #12]
 80186e8:	69ba      	ldr	r2, [r7, #24]
 80186ea:	1ad3      	subs	r3, r2, r3
 80186ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80186ee:	4293      	cmp	r3, r2
 80186f0:	bf28      	it	cs
 80186f2:	4613      	movcs	r3, r2
 80186f4:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 80186f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80186fa:	3301      	adds	r3, #1
 80186fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8018700:	79fb      	ldrb	r3, [r7, #7]
 8018702:	f083 0301 	eor.w	r3, r3, #1
 8018706:	b2db      	uxtb	r3, r3
 8018708:	2b00      	cmp	r3, #0
 801870a:	d038      	beq.n	801877e <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 801870c:	2300      	movs	r3, #0
 801870e:	60fb      	str	r3, [r7, #12]
 8018710:	2300      	movs	r3, #0
 8018712:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8018714:	8afb      	ldrh	r3, [r7, #22]
 8018716:	2b64      	cmp	r3, #100	; 0x64
 8018718:	d103      	bne.n	8018722 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 801871a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801871e:	60fb      	str	r3, [r7, #12]
 8018720:	e009      	b.n	8018736 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8018722:	8afb      	ldrh	r3, [r7, #22]
 8018724:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018728:	d103      	bne.n	8018732 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 801872a:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 801872e:	60fb      	str	r3, [r7, #12]
 8018730:	e001      	b.n	8018736 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8018732:	4b1e      	ldr	r3, [pc, #120]	; (80187ac <RegionCommonUpdateBandTimeOff+0x1d4>)
 8018734:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8018736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018738:	4a1c      	ldr	r2, [pc, #112]	; (80187ac <RegionCommonUpdateBandTimeOff+0x1d4>)
 801873a:	4293      	cmp	r3, r2
 801873c:	d90e      	bls.n	801875c <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801873e:	68fa      	ldr	r2, [r7, #12]
 8018740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018742:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8018746:	3b30      	subs	r3, #48	; 0x30
 8018748:	4919      	ldr	r1, [pc, #100]	; (80187b0 <RegionCommonUpdateBandTimeOff+0x1d8>)
 801874a:	fba1 1303 	umull	r1, r3, r1, r3
 801874e:	0c1b      	lsrs	r3, r3, #16
 8018750:	3301      	adds	r3, #1
 8018752:	4918      	ldr	r1, [pc, #96]	; (80187b4 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8018754:	fb01 f303 	mul.w	r3, r1, r3
 8018758:	4413      	add	r3, r2
 801875a:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 801875c:	f107 000c 	add.w	r0, r7, #12
 8018760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018762:	9300      	str	r3, [sp, #0]
 8018764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018766:	f107 020c 	add.w	r2, r7, #12
 801876a:	ca06      	ldmia	r2, {r1, r2}
 801876c:	f005 fa1b 	bl	801dba6 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8018770:	f107 030c 	add.w	r3, r7, #12
 8018774:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018778:	f005 fad4 	bl	801dd24 <SysTimeToMs>
 801877c:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801877e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018782:	3301      	adds	r3, #1
 8018784:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8018788:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801878c:	79bb      	ldrb	r3, [r7, #6]
 801878e:	429a      	cmp	r2, r3
 8018790:	f4ff af3f 	bcc.w	8018612 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8018794:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018798:	2b00      	cmp	r3, #0
 801879a:	d102      	bne.n	80187a2 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 801879c:	f04f 33ff 	mov.w	r3, #4294967295
 80187a0:	e000      	b.n	80187a4 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80187a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80187a4:	4618      	mov	r0, r3
 80187a6:	372c      	adds	r7, #44	; 0x2c
 80187a8:	46bd      	mov	sp, r7
 80187aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187ac:	0001ec30 	.word	0x0001ec30
 80187b0:	c22e4507 	.word	0xc22e4507
 80187b4:	00015180 	.word	0x00015180

080187b8 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80187b8:	b480      	push	{r7}
 80187ba:	b085      	sub	sp, #20
 80187bc:	af00      	add	r7, sp, #0
 80187be:	6078      	str	r0, [r7, #4]
 80187c0:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80187c2:	2300      	movs	r3, #0
 80187c4:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	781b      	ldrb	r3, [r3, #0]
 80187ca:	2b03      	cmp	r3, #3
 80187cc:	d13f      	bne.n	801884e <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	3301      	adds	r3, #1
 80187d2:	781b      	ldrb	r3, [r3, #0]
 80187d4:	b25a      	sxtb	r2, r3
 80187d6:	683b      	ldr	r3, [r7, #0]
 80187d8:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80187da:	683b      	ldr	r3, [r7, #0]
 80187dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80187e0:	f003 030f 	and.w	r3, r3, #15
 80187e4:	b25a      	sxtb	r2, r3
 80187e6:	683b      	ldr	r3, [r7, #0]
 80187e8:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80187ea:	683b      	ldr	r3, [r7, #0]
 80187ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80187f0:	b2db      	uxtb	r3, r3
 80187f2:	091b      	lsrs	r3, r3, #4
 80187f4:	b2db      	uxtb	r3, r3
 80187f6:	b25a      	sxtb	r2, r3
 80187f8:	683b      	ldr	r3, [r7, #0]
 80187fa:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	3302      	adds	r3, #2
 8018800:	781b      	ldrb	r3, [r3, #0]
 8018802:	b29a      	uxth	r2, r3
 8018804:	683b      	ldr	r3, [r7, #0]
 8018806:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8018808:	683b      	ldr	r3, [r7, #0]
 801880a:	889b      	ldrh	r3, [r3, #4]
 801880c:	b21a      	sxth	r2, r3
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	3303      	adds	r3, #3
 8018812:	781b      	ldrb	r3, [r3, #0]
 8018814:	021b      	lsls	r3, r3, #8
 8018816:	b21b      	sxth	r3, r3
 8018818:	4313      	orrs	r3, r2
 801881a:	b21b      	sxth	r3, r3
 801881c:	b29a      	uxth	r2, r3
 801881e:	683b      	ldr	r3, [r7, #0]
 8018820:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	791a      	ldrb	r2, [r3, #4]
 8018826:	683b      	ldr	r3, [r7, #0]
 8018828:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801882a:	683b      	ldr	r3, [r7, #0]
 801882c:	781b      	ldrb	r3, [r3, #0]
 801882e:	091b      	lsrs	r3, r3, #4
 8018830:	b2db      	uxtb	r3, r3
 8018832:	f003 0307 	and.w	r3, r3, #7
 8018836:	b2da      	uxtb	r2, r3
 8018838:	683b      	ldr	r3, [r7, #0]
 801883a:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 801883c:	683b      	ldr	r3, [r7, #0]
 801883e:	781b      	ldrb	r3, [r3, #0]
 8018840:	f003 030f 	and.w	r3, r3, #15
 8018844:	b2da      	uxtb	r2, r3
 8018846:	683b      	ldr	r3, [r7, #0]
 8018848:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801884a:	2305      	movs	r3, #5
 801884c:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 801884e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018850:	4618      	mov	r0, r3
 8018852:	3714      	adds	r7, #20
 8018854:	46bd      	mov	sp, r7
 8018856:	bc80      	pop	{r7}
 8018858:	4770      	bx	lr

0801885a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801885a:	b5b0      	push	{r4, r5, r7, lr}
 801885c:	b088      	sub	sp, #32
 801885e:	af02      	add	r7, sp, #8
 8018860:	60f8      	str	r0, [r7, #12]
 8018862:	60b9      	str	r1, [r7, #8]
 8018864:	607a      	str	r2, [r7, #4]
 8018866:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8018868:	68fb      	ldr	r3, [r7, #12]
 801886a:	791b      	ldrb	r3, [r3, #4]
 801886c:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801886e:	68fb      	ldr	r3, [r7, #12]
 8018870:	799b      	ldrb	r3, [r3, #6]
 8018872:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8018874:	68fb      	ldr	r3, [r7, #12]
 8018876:	79db      	ldrb	r3, [r3, #7]
 8018878:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 801887a:	68fb      	ldr	r3, [r7, #12]
 801887c:	7a1b      	ldrb	r3, [r3, #8]
 801887e:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8018880:	68fb      	ldr	r3, [r7, #12]
 8018882:	795b      	ldrb	r3, [r3, #5]
 8018884:	f083 0301 	eor.w	r3, r3, #1
 8018888:	b2db      	uxtb	r3, r3
 801888a:	2b00      	cmp	r3, #0
 801888c:	d008      	beq.n	80188a0 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801888e:	68fb      	ldr	r3, [r7, #12]
 8018890:	7adb      	ldrb	r3, [r3, #11]
 8018892:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8018894:	68fb      	ldr	r3, [r7, #12]
 8018896:	7a5b      	ldrb	r3, [r3, #9]
 8018898:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 801889a:	68fb      	ldr	r3, [r7, #12]
 801889c:	7a9b      	ldrb	r3, [r3, #10]
 801889e:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80188a0:	7dfb      	ldrb	r3, [r7, #23]
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d04a      	beq.n	801893c <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 80188a6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80188aa:	2b0f      	cmp	r3, #15
 80188ac:	d103      	bne.n	80188b6 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 80188ae:	68fb      	ldr	r3, [r7, #12]
 80188b0:	7a5b      	ldrb	r3, [r3, #9]
 80188b2:	75bb      	strb	r3, [r7, #22]
 80188b4:	e01d      	b.n	80188f2 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80188b6:	68fb      	ldr	r3, [r7, #12]
 80188b8:	7b18      	ldrb	r0, [r3, #12]
 80188ba:	68fb      	ldr	r3, [r7, #12]
 80188bc:	6919      	ldr	r1, [r3, #16]
 80188be:	68fb      	ldr	r3, [r7, #12]
 80188c0:	f993 5014 	ldrsb.w	r5, [r3, #20]
 80188c4:	68fb      	ldr	r3, [r7, #12]
 80188c6:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80188ca:	68fa      	ldr	r2, [r7, #12]
 80188cc:	6992      	ldr	r2, [r2, #24]
 80188ce:	f997 4016 	ldrsb.w	r4, [r7, #22]
 80188d2:	9201      	str	r2, [sp, #4]
 80188d4:	9300      	str	r3, [sp, #0]
 80188d6:	462b      	mov	r3, r5
 80188d8:	4622      	mov	r2, r4
 80188da:	f7ff fd3a 	bl	8018352 <RegionCommonChanVerifyDr>
 80188de:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80188e0:	f083 0301 	eor.w	r3, r3, #1
 80188e4:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d003      	beq.n	80188f2 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 80188ea:	7dfb      	ldrb	r3, [r7, #23]
 80188ec:	f023 0302 	bic.w	r3, r3, #2
 80188f0:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 80188f2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80188f6:	2b0f      	cmp	r3, #15
 80188f8:	d103      	bne.n	8018902 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 80188fa:	68fb      	ldr	r3, [r7, #12]
 80188fc:	7a9b      	ldrb	r3, [r3, #10]
 80188fe:	757b      	strb	r3, [r7, #21]
 8018900:	e01c      	b.n	801893c <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8018902:	68fb      	ldr	r3, [r7, #12]
 8018904:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8018908:	68fb      	ldr	r3, [r7, #12]
 801890a:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801890e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8018912:	4618      	mov	r0, r3
 8018914:	f7ff fd8f 	bl	8018436 <RegionCommonValueInRange>
 8018918:	4603      	mov	r3, r0
 801891a:	2b00      	cmp	r3, #0
 801891c:	d10e      	bne.n	801893c <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801891e:	68fb      	ldr	r3, [r7, #12]
 8018920:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8018924:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8018928:	429a      	cmp	r2, r3
 801892a:	da03      	bge.n	8018934 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	7f5b      	ldrb	r3, [r3, #29]
 8018930:	757b      	strb	r3, [r7, #21]
 8018932:	e003      	b.n	801893c <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8018934:	7dfb      	ldrb	r3, [r7, #23]
 8018936:	f023 0304 	bic.w	r3, r3, #4
 801893a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801893c:	7dfb      	ldrb	r3, [r7, #23]
 801893e:	2b07      	cmp	r3, #7
 8018940:	d105      	bne.n	801894e <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8018942:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8018946:	2b00      	cmp	r3, #0
 8018948:	d101      	bne.n	801894e <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 801894a:	2301      	movs	r3, #1
 801894c:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801894e:	68bb      	ldr	r3, [r7, #8]
 8018950:	7dba      	ldrb	r2, [r7, #22]
 8018952:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	7d7a      	ldrb	r2, [r7, #21]
 8018958:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801895a:	7d3a      	ldrb	r2, [r7, #20]
 801895c:	683b      	ldr	r3, [r7, #0]
 801895e:	701a      	strb	r2, [r3, #0]

    return status;
 8018960:	7dfb      	ldrb	r3, [r7, #23]
}
 8018962:	4618      	mov	r0, r3
 8018964:	3718      	adds	r7, #24
 8018966:	46bd      	mov	sp, r7
 8018968:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801896c <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 801896c:	b480      	push	{r7}
 801896e:	b083      	sub	sp, #12
 8018970:	af00      	add	r7, sp, #0
 8018972:	4603      	mov	r3, r0
 8018974:	6039      	str	r1, [r7, #0]
 8018976:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8018978:	79fb      	ldrb	r3, [r7, #7]
 801897a:	4a06      	ldr	r2, [pc, #24]	; (8018994 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 801897c:	fa02 f303 	lsl.w	r3, r2, r3
 8018980:	461a      	mov	r2, r3
 8018982:	683b      	ldr	r3, [r7, #0]
 8018984:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018988:	4618      	mov	r0, r3
 801898a:	370c      	adds	r7, #12
 801898c:	46bd      	mov	sp, r7
 801898e:	bc80      	pop	{r7}
 8018990:	4770      	bx	lr
 8018992:	bf00      	nop
 8018994:	000f4240 	.word	0x000f4240

08018998 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8018998:	b480      	push	{r7}
 801899a:	b083      	sub	sp, #12
 801899c:	af00      	add	r7, sp, #0
 801899e:	4603      	mov	r3, r0
 80189a0:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80189a2:	79fb      	ldrb	r3, [r7, #7]
 80189a4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80189a8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80189ac:	4618      	mov	r0, r3
 80189ae:	370c      	adds	r7, #12
 80189b0:	46bd      	mov	sp, r7
 80189b2:	bc80      	pop	{r7}
 80189b4:	4770      	bx	lr
	...

080189b8 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80189b8:	b480      	push	{r7}
 80189ba:	b085      	sub	sp, #20
 80189bc:	af00      	add	r7, sp, #0
 80189be:	60f8      	str	r0, [r7, #12]
 80189c0:	607a      	str	r2, [r7, #4]
 80189c2:	603b      	str	r3, [r7, #0]
 80189c4:	460b      	mov	r3, r1
 80189c6:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80189c8:	7afa      	ldrb	r2, [r7, #11]
 80189ca:	7afb      	ldrb	r3, [r7, #11]
 80189cc:	3b04      	subs	r3, #4
 80189ce:	4619      	mov	r1, r3
 80189d0:	68fb      	ldr	r3, [r7, #12]
 80189d2:	fb03 f101 	mul.w	r1, r3, r1
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80189dc:	fb00 f303 	mul.w	r3, r0, r3
 80189e0:	440b      	add	r3, r1
 80189e2:	005b      	lsls	r3, r3, #1
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d013      	beq.n	8018a10 <RegionCommonComputeRxWindowParameters+0x58>
 80189e8:	7afb      	ldrb	r3, [r7, #11]
 80189ea:	3b04      	subs	r3, #4
 80189ec:	4619      	mov	r1, r3
 80189ee:	68fb      	ldr	r3, [r7, #12]
 80189f0:	fb03 f101 	mul.w	r1, r3, r1
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80189fa:	fb00 f303 	mul.w	r3, r0, r3
 80189fe:	440b      	add	r3, r1
 8018a00:	0059      	lsls	r1, r3, #1
 8018a02:	68fb      	ldr	r3, [r7, #12]
 8018a04:	440b      	add	r3, r1
 8018a06:	1e59      	subs	r1, r3, #1
 8018a08:	68fb      	ldr	r3, [r7, #12]
 8018a0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8018a0e:	e00f      	b.n	8018a30 <RegionCommonComputeRxWindowParameters+0x78>
 8018a10:	7afb      	ldrb	r3, [r7, #11]
 8018a12:	3b04      	subs	r3, #4
 8018a14:	4619      	mov	r1, r3
 8018a16:	68fb      	ldr	r3, [r7, #12]
 8018a18:	fb03 f101 	mul.w	r1, r3, r1
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018a22:	fb00 f303 	mul.w	r3, r0, r3
 8018a26:	440b      	add	r3, r1
 8018a28:	0059      	lsls	r1, r3, #1
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8018a30:	429a      	cmp	r2, r3
 8018a32:	bf38      	it	cc
 8018a34:	461a      	movcc	r2, r3
 8018a36:	69bb      	ldr	r3, [r7, #24]
 8018a38:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8018a3a:	68fb      	ldr	r3, [r7, #12]
 8018a3c:	009b      	lsls	r3, r3, #2
 8018a3e:	4619      	mov	r1, r3
 8018a40:	69bb      	ldr	r3, [r7, #24]
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	68fa      	ldr	r2, [r7, #12]
 8018a46:	fb02 f303 	mul.w	r3, r2, r3
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d007      	beq.n	8018a5e <RegionCommonComputeRxWindowParameters+0xa6>
 8018a4e:	69bb      	ldr	r3, [r7, #24]
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	68fa      	ldr	r2, [r7, #12]
 8018a54:	fb02 f303 	mul.w	r3, r2, r3
 8018a58:	3301      	adds	r3, #1
 8018a5a:	085b      	lsrs	r3, r3, #1
 8018a5c:	e005      	b.n	8018a6a <RegionCommonComputeRxWindowParameters+0xb2>
 8018a5e:	69bb      	ldr	r3, [r7, #24]
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	68fa      	ldr	r2, [r7, #12]
 8018a64:	fb02 f303 	mul.w	r3, r2, r3
 8018a68:	085b      	lsrs	r3, r3, #1
 8018a6a:	1acb      	subs	r3, r1, r3
 8018a6c:	683a      	ldr	r2, [r7, #0]
 8018a6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018a72:	fb01 f202 	mul.w	r2, r1, r2
 8018a76:	1a9b      	subs	r3, r3, r2
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	dd27      	ble.n	8018acc <RegionCommonComputeRxWindowParameters+0x114>
 8018a7c:	68fb      	ldr	r3, [r7, #12]
 8018a7e:	009b      	lsls	r3, r3, #2
 8018a80:	4619      	mov	r1, r3
 8018a82:	69bb      	ldr	r3, [r7, #24]
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	68fa      	ldr	r2, [r7, #12]
 8018a88:	fb02 f303 	mul.w	r3, r2, r3
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d007      	beq.n	8018aa0 <RegionCommonComputeRxWindowParameters+0xe8>
 8018a90:	69bb      	ldr	r3, [r7, #24]
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	68fa      	ldr	r2, [r7, #12]
 8018a96:	fb02 f303 	mul.w	r3, r2, r3
 8018a9a:	3301      	adds	r3, #1
 8018a9c:	085b      	lsrs	r3, r3, #1
 8018a9e:	e005      	b.n	8018aac <RegionCommonComputeRxWindowParameters+0xf4>
 8018aa0:	69bb      	ldr	r3, [r7, #24]
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	68fa      	ldr	r2, [r7, #12]
 8018aa6:	fb02 f303 	mul.w	r3, r2, r3
 8018aaa:	085b      	lsrs	r3, r3, #1
 8018aac:	1acb      	subs	r3, r1, r3
 8018aae:	683a      	ldr	r2, [r7, #0]
 8018ab0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018ab4:	fb01 f202 	mul.w	r2, r1, r2
 8018ab8:	1a9b      	subs	r3, r3, r2
 8018aba:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8018abe:	4a19      	ldr	r2, [pc, #100]	; (8018b24 <RegionCommonComputeRxWindowParameters+0x16c>)
 8018ac0:	fb82 1203 	smull	r1, r2, r2, r3
 8018ac4:	1192      	asrs	r2, r2, #6
 8018ac6:	17db      	asrs	r3, r3, #31
 8018ac8:	1ad3      	subs	r3, r2, r3
 8018aca:	e024      	b.n	8018b16 <RegionCommonComputeRxWindowParameters+0x15e>
 8018acc:	68fb      	ldr	r3, [r7, #12]
 8018ace:	009b      	lsls	r3, r3, #2
 8018ad0:	4619      	mov	r1, r3
 8018ad2:	69bb      	ldr	r3, [r7, #24]
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	68fa      	ldr	r2, [r7, #12]
 8018ad8:	fb02 f303 	mul.w	r3, r2, r3
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d007      	beq.n	8018af0 <RegionCommonComputeRxWindowParameters+0x138>
 8018ae0:	69bb      	ldr	r3, [r7, #24]
 8018ae2:	681b      	ldr	r3, [r3, #0]
 8018ae4:	68fa      	ldr	r2, [r7, #12]
 8018ae6:	fb02 f303 	mul.w	r3, r2, r3
 8018aea:	3301      	adds	r3, #1
 8018aec:	085b      	lsrs	r3, r3, #1
 8018aee:	e005      	b.n	8018afc <RegionCommonComputeRxWindowParameters+0x144>
 8018af0:	69bb      	ldr	r3, [r7, #24]
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	68fa      	ldr	r2, [r7, #12]
 8018af6:	fb02 f303 	mul.w	r3, r2, r3
 8018afa:	085b      	lsrs	r3, r3, #1
 8018afc:	1acb      	subs	r3, r1, r3
 8018afe:	683a      	ldr	r2, [r7, #0]
 8018b00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018b04:	fb01 f202 	mul.w	r2, r1, r2
 8018b08:	1a9b      	subs	r3, r3, r2
 8018b0a:	4a06      	ldr	r2, [pc, #24]	; (8018b24 <RegionCommonComputeRxWindowParameters+0x16c>)
 8018b0c:	fb82 1203 	smull	r1, r2, r2, r3
 8018b10:	1192      	asrs	r2, r2, #6
 8018b12:	17db      	asrs	r3, r3, #31
 8018b14:	1ad3      	subs	r3, r2, r3
 8018b16:	69fa      	ldr	r2, [r7, #28]
 8018b18:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8018b1a:	bf00      	nop
 8018b1c:	3714      	adds	r7, #20
 8018b1e:	46bd      	mov	sp, r7
 8018b20:	bc80      	pop	{r7}
 8018b22:	4770      	bx	lr
 8018b24:	10624dd3 	.word	0x10624dd3

08018b28 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8018b28:	b580      	push	{r7, lr}
 8018b2a:	b086      	sub	sp, #24
 8018b2c:	af00      	add	r7, sp, #0
 8018b2e:	4603      	mov	r3, r0
 8018b30:	60b9      	str	r1, [r7, #8]
 8018b32:	607a      	str	r2, [r7, #4]
 8018b34:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8018b36:	2300      	movs	r3, #0
 8018b38:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8018b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018b3e:	005b      	lsls	r3, r3, #1
 8018b40:	4618      	mov	r0, r3
 8018b42:	f7e8 f8a5 	bl	8000c90 <__aeabi_ui2f>
 8018b46:	4603      	mov	r3, r0
 8018b48:	4619      	mov	r1, r3
 8018b4a:	68b8      	ldr	r0, [r7, #8]
 8018b4c:	f7e7 ffee 	bl	8000b2c <__aeabi_fsub>
 8018b50:	4603      	mov	r3, r0
 8018b52:	6879      	ldr	r1, [r7, #4]
 8018b54:	4618      	mov	r0, r3
 8018b56:	f7e7 ffe9 	bl	8000b2c <__aeabi_fsub>
 8018b5a:	4603      	mov	r3, r0
 8018b5c:	4618      	mov	r0, r3
 8018b5e:	f7e7 fc77 	bl	8000450 <__aeabi_f2d>
 8018b62:	4602      	mov	r2, r0
 8018b64:	460b      	mov	r3, r1
 8018b66:	4610      	mov	r0, r2
 8018b68:	4619      	mov	r1, r3
 8018b6a:	f006 fb05 	bl	801f178 <floor>
 8018b6e:	4602      	mov	r2, r0
 8018b70:	460b      	mov	r3, r1
 8018b72:	4610      	mov	r0, r2
 8018b74:	4619      	mov	r1, r3
 8018b76:	f7e7 ff5d 	bl	8000a34 <__aeabi_d2iz>
 8018b7a:	4603      	mov	r3, r0
 8018b7c:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8018b7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018b82:	4618      	mov	r0, r3
 8018b84:	3718      	adds	r7, #24
 8018b86:	46bd      	mov	sp, r7
 8018b88:	bd80      	pop	{r7, pc}
	...

08018b8c <RegionCommonRxBeaconSetup>:

void RegionCommonRxBeaconSetup( RegionCommonRxBeaconSetupParams_t* rxBeaconSetupParams )
{
 8018b8c:	b5b0      	push	{r4, r5, r7, lr}
 8018b8e:	b08e      	sub	sp, #56	; 0x38
 8018b90:	af0a      	add	r7, sp, #40	; 0x28
 8018b92:	6078      	str	r0, [r7, #4]
    bool rxContinuous = true;
 8018b94:	2301      	movs	r3, #1
 8018b96:	73fb      	strb	r3, [r7, #15]
    uint8_t datarate;

    // Set the radio into sleep mode
    Radio.Sleep( );
 8018b98:	4b29      	ldr	r3, [pc, #164]	; (8018c40 <RegionCommonRxBeaconSetup+0xb4>)
 8018b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b9c:	4798      	blx	r3

    // Setup frequency and payload length
    Radio.SetChannel( rxBeaconSetupParams->Frequency );
 8018b9e:	4b28      	ldr	r3, [pc, #160]	; (8018c40 <RegionCommonRxBeaconSetup+0xb4>)
 8018ba0:	68db      	ldr	r3, [r3, #12]
 8018ba2:	687a      	ldr	r2, [r7, #4]
 8018ba4:	6852      	ldr	r2, [r2, #4]
 8018ba6:	4610      	mov	r0, r2
 8018ba8:	4798      	blx	r3
    Radio.SetMaxPayloadLength( MODEM_LORA, rxBeaconSetupParams->BeaconSize );
 8018baa:	4b25      	ldr	r3, [pc, #148]	; (8018c40 <RegionCommonRxBeaconSetup+0xb4>)
 8018bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018bae:	687a      	ldr	r2, [r7, #4]
 8018bb0:	7a12      	ldrb	r2, [r2, #8]
 8018bb2:	4611      	mov	r1, r2
 8018bb4:	2001      	movs	r0, #1
 8018bb6:	4798      	blx	r3

    // Check the RX continuous mode
    if( rxBeaconSetupParams->RxTime != 0 )
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	68db      	ldr	r3, [r3, #12]
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d001      	beq.n	8018bc4 <RegionCommonRxBeaconSetup+0x38>
    {
        rxContinuous = false;
 8018bc0:	2300      	movs	r3, #0
 8018bc2:	73fb      	strb	r3, [r7, #15]
    }

    // Get region specific datarate
    datarate = rxBeaconSetupParams->Datarates[rxBeaconSetupParams->BeaconDatarate];
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	687a      	ldr	r2, [r7, #4]
 8018bca:	7a52      	ldrb	r2, [r2, #9]
 8018bcc:	4413      	add	r3, r2
 8018bce:	781b      	ldrb	r3, [r3, #0]
 8018bd0:	73bb      	strb	r3, [r7, #14]

    // Setup radio
    Radio.SetRxConfig( MODEM_LORA, rxBeaconSetupParams->BeaconChannelBW, datarate,
 8018bd2:	4b1b      	ldr	r3, [pc, #108]	; (8018c40 <RegionCommonRxBeaconSetup+0xb4>)
 8018bd4:	699c      	ldr	r4, [r3, #24]
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	7a9b      	ldrb	r3, [r3, #10]
 8018bda:	461d      	mov	r5, r3
 8018bdc:	7bb8      	ldrb	r0, [r7, #14]
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	8a1b      	ldrh	r3, [r3, #16]
 8018be2:	687a      	ldr	r2, [r7, #4]
 8018be4:	7a12      	ldrb	r2, [r2, #8]
 8018be6:	7bf9      	ldrb	r1, [r7, #15]
 8018be8:	9109      	str	r1, [sp, #36]	; 0x24
 8018bea:	2100      	movs	r1, #0
 8018bec:	9108      	str	r1, [sp, #32]
 8018bee:	2100      	movs	r1, #0
 8018bf0:	9107      	str	r1, [sp, #28]
 8018bf2:	2100      	movs	r1, #0
 8018bf4:	9106      	str	r1, [sp, #24]
 8018bf6:	2100      	movs	r1, #0
 8018bf8:	9105      	str	r1, [sp, #20]
 8018bfa:	9204      	str	r2, [sp, #16]
 8018bfc:	2201      	movs	r2, #1
 8018bfe:	9203      	str	r2, [sp, #12]
 8018c00:	9302      	str	r3, [sp, #8]
 8018c02:	230a      	movs	r3, #10
 8018c04:	9301      	str	r3, [sp, #4]
 8018c06:	2300      	movs	r3, #0
 8018c08:	9300      	str	r3, [sp, #0]
 8018c0a:	2301      	movs	r3, #1
 8018c0c:	4602      	mov	r2, r0
 8018c0e:	4629      	mov	r1, r5
 8018c10:	2001      	movs	r0, #1
 8018c12:	47a0      	blx	r4
                       1, 0, 10, rxBeaconSetupParams->SymbolTimeout, true, rxBeaconSetupParams->BeaconSize, false, 0, 0, false, rxContinuous );

    Radio.Rx( rxBeaconSetupParams->RxTime );
 8018c14:	4b0a      	ldr	r3, [pc, #40]	; (8018c40 <RegionCommonRxBeaconSetup+0xb4>)
 8018c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018c18:	687a      	ldr	r2, [r7, #4]
 8018c1a:	68d2      	ldr	r2, [r2, #12]
 8018c1c:	4610      	mov	r0, r2
 8018c1e:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Beacon parameters */
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	685b      	ldr	r3, [r3, #4]
 8018c24:	687a      	ldr	r2, [r7, #4]
 8018c26:	7a52      	ldrb	r2, [r2, #9]
 8018c28:	9201      	str	r2, [sp, #4]
 8018c2a:	9300      	str	r3, [sp, #0]
 8018c2c:	4b05      	ldr	r3, [pc, #20]	; (8018c44 <RegionCommonRxBeaconSetup+0xb8>)
 8018c2e:	2201      	movs	r2, #1
 8018c30:	2100      	movs	r1, #0
 8018c32:	2002      	movs	r0, #2
 8018c34:	f005 ff94 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
    /* ST_WORKAROUND_END */
}
 8018c38:	bf00      	nop
 8018c3a:	3710      	adds	r7, #16
 8018c3c:	46bd      	mov	sp, r7
 8018c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8018c40:	0801fbe4 	.word	0x0801fbe4
 8018c44:	0801f5e8 	.word	0x0801f5e8

08018c48 <RegionCommonCountNbOfEnabledChannels>:

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8018c48:	b590      	push	{r4, r7, lr}
 8018c4a:	b087      	sub	sp, #28
 8018c4c:	af00      	add	r7, sp, #0
 8018c4e:	60f8      	str	r0, [r7, #12]
 8018c50:	60b9      	str	r1, [r7, #8]
 8018c52:	607a      	str	r2, [r7, #4]
 8018c54:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8018c56:	2300      	movs	r3, #0
 8018c58:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8018c5a:	2300      	movs	r3, #0
 8018c5c:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8018c5e:	2300      	movs	r3, #0
 8018c60:	757b      	strb	r3, [r7, #21]
 8018c62:	2300      	movs	r3, #0
 8018c64:	753b      	strb	r3, [r7, #20]
 8018c66:	e09c      	b.n	8018da2 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8018c68:	2300      	movs	r3, #0
 8018c6a:	74fb      	strb	r3, [r7, #19]
 8018c6c:	e08f      	b.n	8018d8e <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8018c6e:	68fb      	ldr	r3, [r7, #12]
 8018c70:	685a      	ldr	r2, [r3, #4]
 8018c72:	7d3b      	ldrb	r3, [r7, #20]
 8018c74:	005b      	lsls	r3, r3, #1
 8018c76:	4413      	add	r3, r2
 8018c78:	881b      	ldrh	r3, [r3, #0]
 8018c7a:	461a      	mov	r2, r3
 8018c7c:	7cfb      	ldrb	r3, [r7, #19]
 8018c7e:	fa42 f303 	asr.w	r3, r2, r3
 8018c82:	f003 0301 	and.w	r3, r3, #1
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d07e      	beq.n	8018d88 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8018c8a:	68fb      	ldr	r3, [r7, #12]
 8018c8c:	689a      	ldr	r2, [r3, #8]
 8018c8e:	7d79      	ldrb	r1, [r7, #21]
 8018c90:	7cfb      	ldrb	r3, [r7, #19]
 8018c92:	440b      	add	r3, r1
 8018c94:	4619      	mov	r1, r3
 8018c96:	460b      	mov	r3, r1
 8018c98:	005b      	lsls	r3, r3, #1
 8018c9a:	440b      	add	r3, r1
 8018c9c:	009b      	lsls	r3, r3, #2
 8018c9e:	4413      	add	r3, r2
 8018ca0:	681b      	ldr	r3, [r3, #0]
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d06b      	beq.n	8018d7e <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018ca6:	68fb      	ldr	r3, [r7, #12]
 8018ca8:	781b      	ldrb	r3, [r3, #0]
 8018caa:	f083 0301 	eor.w	r3, r3, #1
 8018cae:	b2db      	uxtb	r3, r3
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d011      	beq.n	8018cd8 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8018cb4:	68fb      	ldr	r3, [r7, #12]
 8018cb6:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d00d      	beq.n	8018cd8 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8018cbc:	68fb      	ldr	r3, [r7, #12]
 8018cbe:	695a      	ldr	r2, [r3, #20]
 8018cc0:	7d3b      	ldrb	r3, [r7, #20]
 8018cc2:	005b      	lsls	r3, r3, #1
 8018cc4:	4413      	add	r3, r2
 8018cc6:	881b      	ldrh	r3, [r3, #0]
 8018cc8:	461a      	mov	r2, r3
 8018cca:	7cfb      	ldrb	r3, [r7, #19]
 8018ccc:	fa42 f303 	asr.w	r3, r2, r3
 8018cd0:	f003 0301 	and.w	r3, r3, #1
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d054      	beq.n	8018d82 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018cd8:	68fb      	ldr	r3, [r7, #12]
 8018cda:	785b      	ldrb	r3, [r3, #1]
 8018cdc:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8018cde:	68fb      	ldr	r3, [r7, #12]
 8018ce0:	689a      	ldr	r2, [r3, #8]
 8018ce2:	7d79      	ldrb	r1, [r7, #21]
 8018ce4:	7cfb      	ldrb	r3, [r7, #19]
 8018ce6:	440b      	add	r3, r1
 8018ce8:	4619      	mov	r1, r3
 8018cea:	460b      	mov	r3, r1
 8018cec:	005b      	lsls	r3, r3, #1
 8018cee:	440b      	add	r3, r1
 8018cf0:	009b      	lsls	r3, r3, #2
 8018cf2:	4413      	add	r3, r2
 8018cf4:	7a1b      	ldrb	r3, [r3, #8]
 8018cf6:	f343 0303 	sbfx	r3, r3, #0, #4
 8018cfa:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018cfc:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8018cfe:	68fb      	ldr	r3, [r7, #12]
 8018d00:	689a      	ldr	r2, [r3, #8]
 8018d02:	7d79      	ldrb	r1, [r7, #21]
 8018d04:	7cfb      	ldrb	r3, [r7, #19]
 8018d06:	440b      	add	r3, r1
 8018d08:	4619      	mov	r1, r3
 8018d0a:	460b      	mov	r3, r1
 8018d0c:	005b      	lsls	r3, r3, #1
 8018d0e:	440b      	add	r3, r1
 8018d10:	009b      	lsls	r3, r3, #2
 8018d12:	4413      	add	r3, r2
 8018d14:	7a1b      	ldrb	r3, [r3, #8]
 8018d16:	f343 1303 	sbfx	r3, r3, #4, #4
 8018d1a:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018d1c:	461a      	mov	r2, r3
 8018d1e:	4621      	mov	r1, r4
 8018d20:	f7ff fb89 	bl	8018436 <RegionCommonValueInRange>
 8018d24:	4603      	mov	r3, r0
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d02d      	beq.n	8018d86 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8018d2a:	68fb      	ldr	r3, [r7, #12]
 8018d2c:	68da      	ldr	r2, [r3, #12]
 8018d2e:	68fb      	ldr	r3, [r7, #12]
 8018d30:	6899      	ldr	r1, [r3, #8]
 8018d32:	7d78      	ldrb	r0, [r7, #21]
 8018d34:	7cfb      	ldrb	r3, [r7, #19]
 8018d36:	4403      	add	r3, r0
 8018d38:	4618      	mov	r0, r3
 8018d3a:	4603      	mov	r3, r0
 8018d3c:	005b      	lsls	r3, r3, #1
 8018d3e:	4403      	add	r3, r0
 8018d40:	009b      	lsls	r3, r3, #2
 8018d42:	440b      	add	r3, r1
 8018d44:	7a5b      	ldrb	r3, [r3, #9]
 8018d46:	4619      	mov	r1, r3
 8018d48:	460b      	mov	r3, r1
 8018d4a:	005b      	lsls	r3, r3, #1
 8018d4c:	440b      	add	r3, r1
 8018d4e:	00db      	lsls	r3, r3, #3
 8018d50:	4413      	add	r3, r2
 8018d52:	7d1b      	ldrb	r3, [r3, #20]
 8018d54:	f083 0301 	eor.w	r3, r3, #1
 8018d58:	b2db      	uxtb	r3, r3
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d003      	beq.n	8018d66 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8018d5e:	7dbb      	ldrb	r3, [r7, #22]
 8018d60:	3301      	adds	r3, #1
 8018d62:	75bb      	strb	r3, [r7, #22]
                    continue;
 8018d64:	e010      	b.n	8018d88 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8018d66:	7dfb      	ldrb	r3, [r7, #23]
 8018d68:	1c5a      	adds	r2, r3, #1
 8018d6a:	75fa      	strb	r2, [r7, #23]
 8018d6c:	461a      	mov	r2, r3
 8018d6e:	68bb      	ldr	r3, [r7, #8]
 8018d70:	4413      	add	r3, r2
 8018d72:	7d79      	ldrb	r1, [r7, #21]
 8018d74:	7cfa      	ldrb	r2, [r7, #19]
 8018d76:	440a      	add	r2, r1
 8018d78:	b2d2      	uxtb	r2, r2
 8018d7a:	701a      	strb	r2, [r3, #0]
 8018d7c:	e004      	b.n	8018d88 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018d7e:	bf00      	nop
 8018d80:	e002      	b.n	8018d88 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8018d82:	bf00      	nop
 8018d84:	e000      	b.n	8018d88 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018d86:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8018d88:	7cfb      	ldrb	r3, [r7, #19]
 8018d8a:	3301      	adds	r3, #1
 8018d8c:	74fb      	strb	r3, [r7, #19]
 8018d8e:	7cfb      	ldrb	r3, [r7, #19]
 8018d90:	2b0f      	cmp	r3, #15
 8018d92:	f67f af6c 	bls.w	8018c6e <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8018d96:	7d7b      	ldrb	r3, [r7, #21]
 8018d98:	3310      	adds	r3, #16
 8018d9a:	757b      	strb	r3, [r7, #21]
 8018d9c:	7d3b      	ldrb	r3, [r7, #20]
 8018d9e:	3301      	adds	r3, #1
 8018da0:	753b      	strb	r3, [r7, #20]
 8018da2:	7d7b      	ldrb	r3, [r7, #21]
 8018da4:	b29a      	uxth	r2, r3
 8018da6:	68fb      	ldr	r3, [r7, #12]
 8018da8:	8a1b      	ldrh	r3, [r3, #16]
 8018daa:	429a      	cmp	r2, r3
 8018dac:	f4ff af5c 	bcc.w	8018c68 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	7dfa      	ldrb	r2, [r7, #23]
 8018db4:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8018db6:	683b      	ldr	r3, [r7, #0]
 8018db8:	7dba      	ldrb	r2, [r7, #22]
 8018dba:	701a      	strb	r2, [r3, #0]
}
 8018dbc:	bf00      	nop
 8018dbe:	371c      	adds	r7, #28
 8018dc0:	46bd      	mov	sp, r7
 8018dc2:	bd90      	pop	{r4, r7, pc}

08018dc4 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8018dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018dc6:	b08b      	sub	sp, #44	; 0x2c
 8018dc8:	af04      	add	r7, sp, #16
 8018dca:	60f8      	str	r0, [r7, #12]
 8018dcc:	60b9      	str	r1, [r7, #8]
 8018dce:	607a      	str	r2, [r7, #4]
 8018dd0:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8018dd2:	68fb      	ldr	r3, [r7, #12]
 8018dd4:	685b      	ldr	r3, [r3, #4]
 8018dd6:	4618      	mov	r0, r3
 8018dd8:	f005 fde4 	bl	801e9a4 <UTIL_TIMER_GetElapsedTime>
 8018ddc:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8018dde:	68fb      	ldr	r3, [r7, #12]
 8018de0:	681a      	ldr	r2, [r3, #0]
 8018de2:	697b      	ldr	r3, [r7, #20]
 8018de4:	1ad2      	subs	r2, r2, r3
 8018de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018de8:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8018dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dec:	2201      	movs	r2, #1
 8018dee:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8018df0:	683b      	ldr	r3, [r7, #0]
 8018df2:	2200      	movs	r2, #0
 8018df4:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018df6:	68fb      	ldr	r3, [r7, #12]
 8018df8:	685b      	ldr	r3, [r3, #4]
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d004      	beq.n	8018e08 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8018dfe:	68fb      	ldr	r3, [r7, #12]
 8018e00:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018e02:	697a      	ldr	r2, [r7, #20]
 8018e04:	429a      	cmp	r2, r3
 8018e06:	d32b      	bcc.n	8018e60 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8018e08:	68bb      	ldr	r3, [r7, #8]
 8018e0a:	2200      	movs	r2, #0
 8018e0c:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	69db      	ldr	r3, [r3, #28]
 8018e12:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8018e18:	68dd      	ldr	r5, [r3, #12]
 8018e1a:	68fb      	ldr	r3, [r7, #12]
 8018e1c:	7a5e      	ldrb	r6, [r3, #9]
 8018e1e:	68fb      	ldr	r3, [r7, #12]
 8018e20:	f893 c008 	ldrb.w	ip, [r3, #8]
 8018e24:	68fb      	ldr	r3, [r7, #12]
 8018e26:	7d1b      	ldrb	r3, [r3, #20]
 8018e28:	68fa      	ldr	r2, [r7, #12]
 8018e2a:	6992      	ldr	r2, [r2, #24]
 8018e2c:	9203      	str	r2, [sp, #12]
 8018e2e:	68fa      	ldr	r2, [r7, #12]
 8018e30:	f10d 0e04 	add.w	lr, sp, #4
 8018e34:	320c      	adds	r2, #12
 8018e36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018e3a:	e88e 0003 	stmia.w	lr, {r0, r1}
 8018e3e:	9300      	str	r3, [sp, #0]
 8018e40:	4663      	mov	r3, ip
 8018e42:	4632      	mov	r2, r6
 8018e44:	4629      	mov	r1, r5
 8018e46:	4620      	mov	r0, r4
 8018e48:	f7ff fbc6 	bl	80185d8 <RegionCommonUpdateBandTimeOff>
 8018e4c:	4602      	mov	r2, r0
 8018e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e50:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	69d8      	ldr	r0, [r3, #28]
 8018e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e58:	683a      	ldr	r2, [r7, #0]
 8018e5a:	6879      	ldr	r1, [r7, #4]
 8018e5c:	f7ff fef4 	bl	8018c48 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8018e60:	683b      	ldr	r3, [r7, #0]
 8018e62:	781b      	ldrb	r3, [r3, #0]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d004      	beq.n	8018e72 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8018e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e6a:	2200      	movs	r2, #0
 8018e6c:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8018e6e:	2300      	movs	r3, #0
 8018e70:	e006      	b.n	8018e80 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8018e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e74:	781b      	ldrb	r3, [r3, #0]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d001      	beq.n	8018e7e <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8018e7a:	230b      	movs	r3, #11
 8018e7c:	e000      	b.n	8018e80 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018e7e:	230c      	movs	r3, #12
    }
}
 8018e80:	4618      	mov	r0, r3
 8018e82:	371c      	adds	r7, #28
 8018e84:	46bd      	mov	sp, r7
 8018e86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018e88 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8018e88:	b5b0      	push	{r4, r5, r7, lr}
 8018e8a:	b086      	sub	sp, #24
 8018e8c:	af02      	add	r7, sp, #8
 8018e8e:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	781b      	ldrb	r3, [r3, #0]
 8018e94:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	f993 2000 	ldrsb.w	r2, [r3]
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018ea2:	429a      	cmp	r2, r3
 8018ea4:	d103      	bne.n	8018eae <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018eac:	e026      	b.n	8018efc <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8018eae:	7bfb      	ldrb	r3, [r7, #15]
 8018eb0:	3b01      	subs	r3, #1
 8018eb2:	b2db      	uxtb	r3, r3
 8018eb4:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8018ebc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018ec0:	429a      	cmp	r2, r3
 8018ec2:	d019      	beq.n	8018ef8 <RegionCommonGetNextLowerTxDr+0x70>
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	78d8      	ldrb	r0, [r3, #3]
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	6859      	ldr	r1, [r3, #4]
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018ed8:	687a      	ldr	r2, [r7, #4]
 8018eda:	6892      	ldr	r2, [r2, #8]
 8018edc:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8018ee0:	9201      	str	r2, [sp, #4]
 8018ee2:	9300      	str	r3, [sp, #0]
 8018ee4:	462b      	mov	r3, r5
 8018ee6:	4622      	mov	r2, r4
 8018ee8:	f7ff fa33 	bl	8018352 <RegionCommonChanVerifyDr>
 8018eec:	4603      	mov	r3, r0
 8018eee:	f083 0301 	eor.w	r3, r3, #1
 8018ef2:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d1da      	bne.n	8018eae <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8018ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8018efc:	4618      	mov	r0, r3
 8018efe:	3710      	adds	r7, #16
 8018f00:	46bd      	mov	sp, r7
 8018f02:	bdb0      	pop	{r4, r5, r7, pc}

08018f04 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8018f04:	b480      	push	{r7}
 8018f06:	b083      	sub	sp, #12
 8018f08:	af00      	add	r7, sp, #0
 8018f0a:	4603      	mov	r3, r0
 8018f0c:	460a      	mov	r2, r1
 8018f0e:	71fb      	strb	r3, [r7, #7]
 8018f10:	4613      	mov	r3, r2
 8018f12:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8018f14:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018f1c:	4293      	cmp	r3, r2
 8018f1e:	bfb8      	it	lt
 8018f20:	4613      	movlt	r3, r2
 8018f22:	b25b      	sxtb	r3, r3
}
 8018f24:	4618      	mov	r0, r3
 8018f26:	370c      	adds	r7, #12
 8018f28:	46bd      	mov	sp, r7
 8018f2a:	bc80      	pop	{r7}
 8018f2c:	4770      	bx	lr
	...

08018f30 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8018f30:	b480      	push	{r7}
 8018f32:	b083      	sub	sp, #12
 8018f34:	af00      	add	r7, sp, #0
 8018f36:	6078      	str	r0, [r7, #4]
 8018f38:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	009b      	lsls	r3, r3, #2
 8018f3e:	683a      	ldr	r2, [r7, #0]
 8018f40:	4413      	add	r3, r2
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	4a07      	ldr	r2, [pc, #28]	; (8018f64 <RegionCommonGetBandwidth+0x34>)
 8018f46:	4293      	cmp	r3, r2
 8018f48:	d004      	beq.n	8018f54 <RegionCommonGetBandwidth+0x24>
 8018f4a:	4a07      	ldr	r2, [pc, #28]	; (8018f68 <RegionCommonGetBandwidth+0x38>)
 8018f4c:	4293      	cmp	r3, r2
 8018f4e:	d003      	beq.n	8018f58 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8018f50:	2300      	movs	r3, #0
 8018f52:	e002      	b.n	8018f5a <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8018f54:	2301      	movs	r3, #1
 8018f56:	e000      	b.n	8018f5a <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8018f58:	2302      	movs	r3, #2
    }
}
 8018f5a:	4618      	mov	r0, r3
 8018f5c:	370c      	adds	r7, #12
 8018f5e:	46bd      	mov	sp, r7
 8018f60:	bc80      	pop	{r7}
 8018f62:	4770      	bx	lr
 8018f64:	0003d090 	.word	0x0003d090
 8018f68:	0007a120 	.word	0x0007a120

08018f6c <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8018f6c:	b580      	push	{r7, lr}
 8018f6e:	b086      	sub	sp, #24
 8018f70:	af04      	add	r7, sp, #16
 8018f72:	4603      	mov	r3, r0
 8018f74:	6039      	str	r1, [r7, #0]
 8018f76:	71fb      	strb	r3, [r7, #7]
 8018f78:	4613      	mov	r3, r2
 8018f7a:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8018f7c:	79fb      	ldrb	r3, [r7, #7]
 8018f7e:	2b05      	cmp	r3, #5
 8018f80:	d810      	bhi.n	8018fa4 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8018f82:	79fb      	ldrb	r3, [r7, #7]
 8018f84:	4a0f      	ldr	r2, [pc, #60]	; (8018fc4 <RegionCommonRxConfigPrint+0x58>)
 8018f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018f8a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018f8e:	9202      	str	r2, [sp, #8]
 8018f90:	683a      	ldr	r2, [r7, #0]
 8018f92:	9201      	str	r2, [sp, #4]
 8018f94:	9300      	str	r3, [sp, #0]
 8018f96:	4b0c      	ldr	r3, [pc, #48]	; (8018fc8 <RegionCommonRxConfigPrint+0x5c>)
 8018f98:	2201      	movs	r2, #1
 8018f9a:	2100      	movs	r1, #0
 8018f9c:	2002      	movs	r0, #2
 8018f9e:	f005 fddf 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8018fa2:	e00a      	b.n	8018fba <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018fa4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018fa8:	9301      	str	r3, [sp, #4]
 8018faa:	683b      	ldr	r3, [r7, #0]
 8018fac:	9300      	str	r3, [sp, #0]
 8018fae:	4b07      	ldr	r3, [pc, #28]	; (8018fcc <RegionCommonRxConfigPrint+0x60>)
 8018fb0:	2201      	movs	r2, #1
 8018fb2:	2100      	movs	r1, #0
 8018fb4:	2002      	movs	r0, #2
 8018fb6:	f005 fdd3 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
}
 8018fba:	bf00      	nop
 8018fbc:	3708      	adds	r7, #8
 8018fbe:	46bd      	mov	sp, r7
 8018fc0:	bd80      	pop	{r7, pc}
 8018fc2:	bf00      	nop
 8018fc4:	20000124 	.word	0x20000124
 8018fc8:	0801f608 	.word	0x0801f608
 8018fcc:	0801f628 	.word	0x0801f628

08018fd0 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8018fd0:	b580      	push	{r7, lr}
 8018fd2:	b084      	sub	sp, #16
 8018fd4:	af02      	add	r7, sp, #8
 8018fd6:	6078      	str	r0, [r7, #4]
 8018fd8:	460b      	mov	r3, r1
 8018fda:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018fdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018fe0:	9301      	str	r3, [sp, #4]
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	9300      	str	r3, [sp, #0]
 8018fe6:	4b05      	ldr	r3, [pc, #20]	; (8018ffc <RegionCommonTxConfigPrint+0x2c>)
 8018fe8:	2201      	movs	r2, #1
 8018fea:	2100      	movs	r1, #0
 8018fec:	2002      	movs	r0, #2
 8018fee:	f005 fdb7 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
}
 8018ff2:	bf00      	nop
 8018ff4:	3708      	adds	r7, #8
 8018ff6:	46bd      	mov	sp, r7
 8018ff8:	bd80      	pop	{r7, pc}
 8018ffa:	bf00      	nop
 8018ffc:	0801f644 	.word	0x0801f644

08019000 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8019000:	b580      	push	{r7, lr}
 8019002:	b082      	sub	sp, #8
 8019004:	af00      	add	r7, sp, #0
 8019006:	6078      	str	r0, [r7, #4]
 8019008:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801900a:	4b2d      	ldr	r3, [pc, #180]	; (80190c0 <VerifyRfFreq+0xc0>)
 801900c:	6a1b      	ldr	r3, [r3, #32]
 801900e:	6878      	ldr	r0, [r7, #4]
 8019010:	4798      	blx	r3
 8019012:	4603      	mov	r3, r0
 8019014:	f083 0301 	eor.w	r3, r3, #1
 8019018:	b2db      	uxtb	r3, r3
 801901a:	2b00      	cmp	r3, #0
 801901c:	d001      	beq.n	8019022 <VerifyRfFreq+0x22>
    {
        return false;
 801901e:	2300      	movs	r3, #0
 8019020:	e04a      	b.n	80190b8 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	4a27      	ldr	r2, [pc, #156]	; (80190c4 <VerifyRfFreq+0xc4>)
 8019026:	4293      	cmp	r3, r2
 8019028:	d307      	bcc.n	801903a <VerifyRfFreq+0x3a>
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	4a26      	ldr	r2, [pc, #152]	; (80190c8 <VerifyRfFreq+0xc8>)
 801902e:	4293      	cmp	r3, r2
 8019030:	d803      	bhi.n	801903a <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8019032:	683b      	ldr	r3, [r7, #0]
 8019034:	2202      	movs	r2, #2
 8019036:	701a      	strb	r2, [r3, #0]
 8019038:	e03d      	b.n	80190b6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	4a22      	ldr	r2, [pc, #136]	; (80190c8 <VerifyRfFreq+0xc8>)
 801903e:	4293      	cmp	r3, r2
 8019040:	d907      	bls.n	8019052 <VerifyRfFreq+0x52>
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	4a21      	ldr	r2, [pc, #132]	; (80190cc <VerifyRfFreq+0xcc>)
 8019046:	4293      	cmp	r3, r2
 8019048:	d803      	bhi.n	8019052 <VerifyRfFreq+0x52>
    {
        *band = 0;
 801904a:	683b      	ldr	r3, [r7, #0]
 801904c:	2200      	movs	r2, #0
 801904e:	701a      	strb	r2, [r3, #0]
 8019050:	e031      	b.n	80190b6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	4a1d      	ldr	r2, [pc, #116]	; (80190cc <VerifyRfFreq+0xcc>)
 8019056:	4293      	cmp	r3, r2
 8019058:	d907      	bls.n	801906a <VerifyRfFreq+0x6a>
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	4a1c      	ldr	r2, [pc, #112]	; (80190d0 <VerifyRfFreq+0xd0>)
 801905e:	4293      	cmp	r3, r2
 8019060:	d803      	bhi.n	801906a <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8019062:	683b      	ldr	r3, [r7, #0]
 8019064:	2201      	movs	r2, #1
 8019066:	701a      	strb	r2, [r3, #0]
 8019068:	e025      	b.n	80190b6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	4a19      	ldr	r2, [pc, #100]	; (80190d4 <VerifyRfFreq+0xd4>)
 801906e:	4293      	cmp	r3, r2
 8019070:	d907      	bls.n	8019082 <VerifyRfFreq+0x82>
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	4a18      	ldr	r2, [pc, #96]	; (80190d8 <VerifyRfFreq+0xd8>)
 8019076:	4293      	cmp	r3, r2
 8019078:	d803      	bhi.n	8019082 <VerifyRfFreq+0x82>
    {
        *band = 5;
 801907a:	683b      	ldr	r3, [r7, #0]
 801907c:	2205      	movs	r2, #5
 801907e:	701a      	strb	r2, [r3, #0]
 8019080:	e019      	b.n	80190b6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	4a15      	ldr	r2, [pc, #84]	; (80190dc <VerifyRfFreq+0xdc>)
 8019086:	4293      	cmp	r3, r2
 8019088:	d907      	bls.n	801909a <VerifyRfFreq+0x9a>
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	4a14      	ldr	r2, [pc, #80]	; (80190e0 <VerifyRfFreq+0xe0>)
 801908e:	4293      	cmp	r3, r2
 8019090:	d803      	bhi.n	801909a <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8019092:	683b      	ldr	r3, [r7, #0]
 8019094:	2203      	movs	r2, #3
 8019096:	701a      	strb	r2, [r3, #0]
 8019098:	e00d      	b.n	80190b6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	4a11      	ldr	r2, [pc, #68]	; (80190e4 <VerifyRfFreq+0xe4>)
 801909e:	4293      	cmp	r3, r2
 80190a0:	d307      	bcc.n	80190b2 <VerifyRfFreq+0xb2>
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	4a10      	ldr	r2, [pc, #64]	; (80190e8 <VerifyRfFreq+0xe8>)
 80190a6:	4293      	cmp	r3, r2
 80190a8:	d803      	bhi.n	80190b2 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 80190aa:	683b      	ldr	r3, [r7, #0]
 80190ac:	2204      	movs	r2, #4
 80190ae:	701a      	strb	r2, [r3, #0]
 80190b0:	e001      	b.n	80190b6 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 80190b2:	2300      	movs	r3, #0
 80190b4:	e000      	b.n	80190b8 <VerifyRfFreq+0xb8>
    }
    return true;
 80190b6:	2301      	movs	r3, #1
}
 80190b8:	4618      	mov	r0, r3
 80190ba:	3708      	adds	r7, #8
 80190bc:	46bd      	mov	sp, r7
 80190be:	bd80      	pop	{r7, pc}
 80190c0:	0801fbe4 	.word	0x0801fbe4
 80190c4:	337055c0 	.word	0x337055c0
 80190c8:	338eda3f 	.word	0x338eda3f
 80190cc:	33bca100 	.word	0x33bca100
 80190d0:	33c5c8c0 	.word	0x33c5c8c0
 80190d4:	33c74f5f 	.word	0x33c74f5f
 80190d8:	33cef080 	.word	0x33cef080
 80190dc:	33d1fdbf 	.word	0x33d1fdbf
 80190e0:	33d5ce50 	.word	0x33d5ce50
 80190e4:	33d691a0 	.word	0x33d691a0
 80190e8:	33db2580 	.word	0x33db2580

080190ec <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80190ec:	b590      	push	{r4, r7, lr}
 80190ee:	b08b      	sub	sp, #44	; 0x2c
 80190f0:	af04      	add	r7, sp, #16
 80190f2:	4603      	mov	r3, r0
 80190f4:	460a      	mov	r2, r1
 80190f6:	71fb      	strb	r3, [r7, #7]
 80190f8:	4613      	mov	r3, r2
 80190fa:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 80190fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019100:	4a1f      	ldr	r2, [pc, #124]	; (8019180 <GetTimeOnAir+0x94>)
 8019102:	5cd3      	ldrb	r3, [r2, r3]
 8019104:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8019106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801910a:	491e      	ldr	r1, [pc, #120]	; (8019184 <GetTimeOnAir+0x98>)
 801910c:	4618      	mov	r0, r3
 801910e:	f7ff ff0f 	bl	8018f30 <RegionCommonGetBandwidth>
 8019112:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8019114:	2300      	movs	r3, #0
 8019116:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8019118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801911c:	2b07      	cmp	r3, #7
 801911e:	d118      	bne.n	8019152 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8019120:	4b19      	ldr	r3, [pc, #100]	; (8019188 <GetTimeOnAir+0x9c>)
 8019122:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8019124:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019128:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801912c:	fb02 f303 	mul.w	r3, r2, r3
 8019130:	4619      	mov	r1, r3
 8019132:	88bb      	ldrh	r3, [r7, #4]
 8019134:	b2db      	uxtb	r3, r3
 8019136:	2201      	movs	r2, #1
 8019138:	9203      	str	r2, [sp, #12]
 801913a:	9302      	str	r3, [sp, #8]
 801913c:	2300      	movs	r3, #0
 801913e:	9301      	str	r3, [sp, #4]
 8019140:	2305      	movs	r3, #5
 8019142:	9300      	str	r3, [sp, #0]
 8019144:	2300      	movs	r3, #0
 8019146:	460a      	mov	r2, r1
 8019148:	68f9      	ldr	r1, [r7, #12]
 801914a:	2000      	movs	r0, #0
 801914c:	47a0      	blx	r4
 801914e:	6178      	str	r0, [r7, #20]
 8019150:	e011      	b.n	8019176 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8019152:	4b0d      	ldr	r3, [pc, #52]	; (8019188 <GetTimeOnAir+0x9c>)
 8019154:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8019156:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801915a:	88bb      	ldrh	r3, [r7, #4]
 801915c:	b2db      	uxtb	r3, r3
 801915e:	2101      	movs	r1, #1
 8019160:	9103      	str	r1, [sp, #12]
 8019162:	9302      	str	r3, [sp, #8]
 8019164:	2300      	movs	r3, #0
 8019166:	9301      	str	r3, [sp, #4]
 8019168:	2308      	movs	r3, #8
 801916a:	9300      	str	r3, [sp, #0]
 801916c:	2301      	movs	r3, #1
 801916e:	68f9      	ldr	r1, [r7, #12]
 8019170:	2001      	movs	r0, #1
 8019172:	47a0      	blx	r4
 8019174:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8019176:	697b      	ldr	r3, [r7, #20]
}
 8019178:	4618      	mov	r0, r3
 801917a:	371c      	adds	r7, #28
 801917c:	46bd      	mov	sp, r7
 801917e:	bd90      	pop	{r4, r7, pc}
 8019180:	0801fbac 	.word	0x0801fbac
 8019184:	0801fbb4 	.word	0x0801fbb4
 8019188:	0801fbe4 	.word	0x0801fbe4

0801918c <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 801918c:	b580      	push	{r7, lr}
 801918e:	b088      	sub	sp, #32
 8019190:	af00      	add	r7, sp, #0
 8019192:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8019194:	2300      	movs	r3, #0
 8019196:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	781b      	ldrb	r3, [r3, #0]
 801919c:	3b01      	subs	r3, #1
 801919e:	2b38      	cmp	r3, #56	; 0x38
 80191a0:	f200 8128 	bhi.w	80193f4 <RegionEU868GetPhyParam+0x268>
 80191a4:	a201      	add	r2, pc, #4	; (adr r2, 80191ac <RegionEU868GetPhyParam+0x20>)
 80191a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80191aa:	bf00      	nop
 80191ac:	08019291 	.word	0x08019291
 80191b0:	08019297 	.word	0x08019297
 80191b4:	080193f5 	.word	0x080193f5
 80191b8:	080193f5 	.word	0x080193f5
 80191bc:	080193f5 	.word	0x080193f5
 80191c0:	0801929d 	.word	0x0801929d
 80191c4:	080193f5 	.word	0x080193f5
 80191c8:	080192d7 	.word	0x080192d7
 80191cc:	080193f5 	.word	0x080193f5
 80191d0:	080192dd 	.word	0x080192dd
 80191d4:	080192e3 	.word	0x080192e3
 80191d8:	080192e9 	.word	0x080192e9
 80191dc:	080192ef 	.word	0x080192ef
 80191e0:	080192ff 	.word	0x080192ff
 80191e4:	0801930f 	.word	0x0801930f
 80191e8:	08019315 	.word	0x08019315
 80191ec:	0801931d 	.word	0x0801931d
 80191f0:	08019325 	.word	0x08019325
 80191f4:	0801932d 	.word	0x0801932d
 80191f8:	08019335 	.word	0x08019335
 80191fc:	0801933d 	.word	0x0801933d
 8019200:	08019345 	.word	0x08019345
 8019204:	08019359 	.word	0x08019359
 8019208:	0801935f 	.word	0x0801935f
 801920c:	08019365 	.word	0x08019365
 8019210:	0801936b 	.word	0x0801936b
 8019214:	08019377 	.word	0x08019377
 8019218:	08019383 	.word	0x08019383
 801921c:	08019389 	.word	0x08019389
 8019220:	08019391 	.word	0x08019391
 8019224:	08019397 	.word	0x08019397
 8019228:	0801939d 	.word	0x0801939d
 801922c:	080193a5 	.word	0x080193a5
 8019230:	080192a3 	.word	0x080192a3
 8019234:	080193f5 	.word	0x080193f5
 8019238:	080193f5 	.word	0x080193f5
 801923c:	080193f5 	.word	0x080193f5
 8019240:	080193f5 	.word	0x080193f5
 8019244:	080193f5 	.word	0x080193f5
 8019248:	080193f5 	.word	0x080193f5
 801924c:	080193f5 	.word	0x080193f5
 8019250:	080193f5 	.word	0x080193f5
 8019254:	080193f5 	.word	0x080193f5
 8019258:	080193f5 	.word	0x080193f5
 801925c:	080193f5 	.word	0x080193f5
 8019260:	080193f5 	.word	0x080193f5
 8019264:	080193f5 	.word	0x080193f5
 8019268:	080193ab 	.word	0x080193ab
 801926c:	080193b1 	.word	0x080193b1
 8019270:	080193bf 	.word	0x080193bf
 8019274:	080193f5 	.word	0x080193f5
 8019278:	080193f5 	.word	0x080193f5
 801927c:	080193c5 	.word	0x080193c5
 8019280:	080193cb 	.word	0x080193cb
 8019284:	080193f5 	.word	0x080193f5
 8019288:	080193d1 	.word	0x080193d1
 801928c:	080193e1 	.word	0x080193e1
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8019290:	2300      	movs	r3, #0
 8019292:	61bb      	str	r3, [r7, #24]
            break;
 8019294:	e0af      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8019296:	2300      	movs	r3, #0
 8019298:	61bb      	str	r3, [r7, #24]
            break;
 801929a:	e0ac      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 801929c:	2300      	movs	r3, #0
 801929e:	61bb      	str	r3, [r7, #24]
            break;
 80192a0:	e0a9      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80192a8:	733b      	strb	r3, [r7, #12]
 80192aa:	2307      	movs	r3, #7
 80192ac:	737b      	strb	r3, [r7, #13]
 80192ae:	2300      	movs	r3, #0
 80192b0:	73bb      	strb	r3, [r7, #14]
 80192b2:	2310      	movs	r3, #16
 80192b4:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80192b6:	4b53      	ldr	r3, [pc, #332]	; (8019404 <RegionEU868GetPhyParam+0x278>)
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80192be:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80192c0:	4b50      	ldr	r3, [pc, #320]	; (8019404 <RegionEU868GetPhyParam+0x278>)
 80192c2:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80192c4:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80192c6:	f107 030c 	add.w	r3, r7, #12
 80192ca:	4618      	mov	r0, r3
 80192cc:	f7ff fddc 	bl	8018e88 <RegionCommonGetNextLowerTxDr>
 80192d0:	4603      	mov	r3, r0
 80192d2:	61bb      	str	r3, [r7, #24]
            break;
 80192d4:	e08f      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 80192d6:	2300      	movs	r3, #0
 80192d8:	61bb      	str	r3, [r7, #24]
            break;
 80192da:	e08c      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 80192dc:	2300      	movs	r3, #0
 80192de:	61bb      	str	r3, [r7, #24]
            break;
 80192e0:	e089      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80192e2:	2340      	movs	r3, #64	; 0x40
 80192e4:	61bb      	str	r3, [r7, #24]
            break;
 80192e6:	e086      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80192e8:	2320      	movs	r3, #32
 80192ea:	61bb      	str	r3, [r7, #24]
            break;
 80192ec:	e083      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80192f4:	461a      	mov	r2, r3
 80192f6:	4b44      	ldr	r3, [pc, #272]	; (8019408 <RegionEU868GetPhyParam+0x27c>)
 80192f8:	5c9b      	ldrb	r3, [r3, r2]
 80192fa:	61bb      	str	r3, [r7, #24]
            break;
 80192fc:	e07b      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019304:	461a      	mov	r2, r3
 8019306:	4b41      	ldr	r3, [pc, #260]	; (801940c <RegionEU868GetPhyParam+0x280>)
 8019308:	5c9b      	ldrb	r3, [r3, r2]
 801930a:	61bb      	str	r3, [r7, #24]
            break;
 801930c:	e073      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 801930e:	2301      	movs	r3, #1
 8019310:	61bb      	str	r3, [r7, #24]
            break;
 8019312:	e070      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8019314:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8019318:	61bb      	str	r3, [r7, #24]
            break;
 801931a:	e06c      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801931c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019320:	61bb      	str	r3, [r7, #24]
            break;
 8019322:	e068      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8019324:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8019328:	61bb      	str	r3, [r7, #24]
            break;
 801932a:	e064      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801932c:	f241 3388 	movw	r3, #5000	; 0x1388
 8019330:	61bb      	str	r3, [r7, #24]
            break;
 8019332:	e060      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8019334:	f241 7370 	movw	r3, #6000	; 0x1770
 8019338:	61bb      	str	r3, [r7, #24]
            break;
 801933a:	e05c      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801933c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8019340:	61bb      	str	r3, [r7, #24]
            break;
 8019342:	e058      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8019344:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8019348:	4831      	ldr	r0, [pc, #196]	; (8019410 <RegionEU868GetPhyParam+0x284>)
 801934a:	f001 f89d 	bl	801a488 <randr>
 801934e:	4603      	mov	r3, r0
 8019350:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8019354:	61bb      	str	r3, [r7, #24]
            break;
 8019356:	e04e      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8019358:	2300      	movs	r3, #0
 801935a:	61bb      	str	r3, [r7, #24]
            break;
 801935c:	e04b      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801935e:	4b2d      	ldr	r3, [pc, #180]	; (8019414 <RegionEU868GetPhyParam+0x288>)
 8019360:	61bb      	str	r3, [r7, #24]
            break;
 8019362:	e048      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8019364:	2300      	movs	r3, #0
 8019366:	61bb      	str	r3, [r7, #24]
            break;
 8019368:	e045      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801936a:	4b26      	ldr	r3, [pc, #152]	; (8019404 <RegionEU868GetPhyParam+0x278>)
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019372:	61bb      	str	r3, [r7, #24]
            break;
 8019374:	e03f      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8019376:	4b23      	ldr	r3, [pc, #140]	; (8019404 <RegionEU868GetPhyParam+0x278>)
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 801937e:	61bb      	str	r3, [r7, #24]
            break;
 8019380:	e039      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8019382:	2310      	movs	r3, #16
 8019384:	61bb      	str	r3, [r7, #24]
            break;
 8019386:	e036      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8019388:	4b1e      	ldr	r3, [pc, #120]	; (8019404 <RegionEU868GetPhyParam+0x278>)
 801938a:	681b      	ldr	r3, [r3, #0]
 801938c:	61bb      	str	r3, [r7, #24]
            break;
 801938e:	e032      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8019390:	2300      	movs	r3, #0
 8019392:	61bb      	str	r3, [r7, #24]
            break;
 8019394:	e02f      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8019396:	2300      	movs	r3, #0
 8019398:	61bb      	str	r3, [r7, #24]
            break;
 801939a:	e02c      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 801939c:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80193a0:	61bb      	str	r3, [r7, #24]
            break;
 80193a2:	e028      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80193a4:	4b1c      	ldr	r3, [pc, #112]	; (8019418 <RegionEU868GetPhyParam+0x28c>)
 80193a6:	61bb      	str	r3, [r7, #24]
            break;
 80193a8:	e025      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80193aa:	4b1a      	ldr	r3, [pc, #104]	; (8019414 <RegionEU868GetPhyParam+0x288>)
 80193ac:	61bb      	str	r3, [r7, #24]
            break;
 80193ae:	e022      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80193b0:	2311      	movs	r3, #17
 80193b2:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80193b4:	2302      	movs	r3, #2
 80193b6:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80193b8:	2300      	movs	r3, #0
 80193ba:	76bb      	strb	r3, [r7, #26]
            break;
 80193bc:	e01b      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80193be:	2303      	movs	r3, #3
 80193c0:	61bb      	str	r3, [r7, #24]
            break;
 80193c2:	e018      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80193c4:	4b13      	ldr	r3, [pc, #76]	; (8019414 <RegionEU868GetPhyParam+0x288>)
 80193c6:	61bb      	str	r3, [r7, #24]
            break;
 80193c8:	e015      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80193ca:	2303      	movs	r3, #3
 80193cc:	61bb      	str	r3, [r7, #24]
            break;
 80193ce:	e012      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80193d6:	461a      	mov	r2, r3
 80193d8:	4b10      	ldr	r3, [pc, #64]	; (801941c <RegionEU868GetPhyParam+0x290>)
 80193da:	5c9b      	ldrb	r3, [r3, r2]
 80193dc:	61bb      	str	r3, [r7, #24]
            break;
 80193de:	e00a      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80193e6:	490e      	ldr	r1, [pc, #56]	; (8019420 <RegionEU868GetPhyParam+0x294>)
 80193e8:	4618      	mov	r0, r3
 80193ea:	f7ff fda1 	bl	8018f30 <RegionCommonGetBandwidth>
 80193ee:	4603      	mov	r3, r0
 80193f0:	61bb      	str	r3, [r7, #24]
            break;
 80193f2:	e000      	b.n	80193f6 <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 80193f4:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 80193f6:	69bb      	ldr	r3, [r7, #24]
 80193f8:	61fb      	str	r3, [r7, #28]
 80193fa:	69fb      	ldr	r3, [r7, #28]
}
 80193fc:	4618      	mov	r0, r3
 80193fe:	3720      	adds	r7, #32
 8019400:	46bd      	mov	sp, r7
 8019402:	bd80      	pop	{r7, pc}
 8019404:	200022b8 	.word	0x200022b8
 8019408:	0801fbd4 	.word	0x0801fbd4
 801940c:	0801fbdc 	.word	0x0801fbdc
 8019410:	fffffc18 	.word	0xfffffc18
 8019414:	33d3e608 	.word	0x33d3e608
 8019418:	4009999a 	.word	0x4009999a
 801941c:	0801fbac 	.word	0x0801fbac
 8019420:	0801fbb4 	.word	0x0801fbb4

08019424 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8019424:	b590      	push	{r4, r7, lr}
 8019426:	b085      	sub	sp, #20
 8019428:	af02      	add	r7, sp, #8
 801942a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801942c:	4b11      	ldr	r3, [pc, #68]	; (8019474 <RegionEU868SetBandTxDone+0x50>)
 801942e:	681a      	ldr	r2, [r3, #0]
 8019430:	4b11      	ldr	r3, [pc, #68]	; (8019478 <RegionEU868SetBandTxDone+0x54>)
 8019432:	6819      	ldr	r1, [r3, #0]
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	781b      	ldrb	r3, [r3, #0]
 8019438:	4618      	mov	r0, r3
 801943a:	4603      	mov	r3, r0
 801943c:	005b      	lsls	r3, r3, #1
 801943e:	4403      	add	r3, r0
 8019440:	009b      	lsls	r3, r3, #2
 8019442:	440b      	add	r3, r1
 8019444:	3309      	adds	r3, #9
 8019446:	781b      	ldrb	r3, [r3, #0]
 8019448:	4619      	mov	r1, r3
 801944a:	460b      	mov	r3, r1
 801944c:	005b      	lsls	r3, r3, #1
 801944e:	440b      	add	r3, r1
 8019450:	00db      	lsls	r3, r3, #3
 8019452:	18d0      	adds	r0, r2, r3
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	6899      	ldr	r1, [r3, #8]
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	785c      	ldrb	r4, [r3, #1]
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	691a      	ldr	r2, [r3, #16]
 8019460:	9200      	str	r2, [sp, #0]
 8019462:	68db      	ldr	r3, [r3, #12]
 8019464:	4622      	mov	r2, r4
 8019466:	f7ff f889 	bl	801857c <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 801946a:	bf00      	nop
 801946c:	370c      	adds	r7, #12
 801946e:	46bd      	mov	sp, r7
 8019470:	bd90      	pop	{r4, r7, pc}
 8019472:	bf00      	nop
 8019474:	200022b4 	.word	0x200022b4
 8019478:	200022b8 	.word	0x200022b8

0801947c <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 801947c:	b580      	push	{r7, lr}
 801947e:	b0b0      	sub	sp, #192	; 0xc0
 8019480:	af00      	add	r7, sp, #0
 8019482:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8019484:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019488:	2290      	movs	r2, #144	; 0x90
 801948a:	2100      	movs	r1, #0
 801948c:	4618      	mov	r0, r3
 801948e:	f005 fe03 	bl	801f098 <memset>
 8019492:	2364      	movs	r3, #100	; 0x64
 8019494:	863b      	strh	r3, [r7, #48]	; 0x30
 8019496:	2364      	movs	r3, #100	; 0x64
 8019498:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801949c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80194a0:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 80194a4:	230a      	movs	r3, #10
 80194a6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80194aa:	2364      	movs	r3, #100	; 0x64
 80194ac:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80194b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80194b4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	7a1b      	ldrb	r3, [r3, #8]
 80194bc:	2b02      	cmp	r3, #2
 80194be:	d05e      	beq.n	801957e <RegionEU868InitDefaults+0x102>
 80194c0:	2b02      	cmp	r3, #2
 80194c2:	dc6b      	bgt.n	801959c <RegionEU868InitDefaults+0x120>
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d002      	beq.n	80194ce <RegionEU868InitDefaults+0x52>
 80194c8:	2b01      	cmp	r3, #1
 80194ca:	d03f      	beq.n	801954c <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80194cc:	e066      	b.n	801959c <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	681b      	ldr	r3, [r3, #0]
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d063      	beq.n	801959e <RegionEU868InitDefaults+0x122>
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	685b      	ldr	r3, [r3, #4]
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d05f      	beq.n	801959e <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	4a30      	ldr	r2, [pc, #192]	; (80195a4 <RegionEU868InitDefaults+0x128>)
 80194e4:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	685b      	ldr	r3, [r3, #4]
 80194ea:	4a2f      	ldr	r2, [pc, #188]	; (80195a8 <RegionEU868InitDefaults+0x12c>)
 80194ec:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80194ee:	4b2d      	ldr	r3, [pc, #180]	; (80195a4 <RegionEU868InitDefaults+0x128>)
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	4618      	mov	r0, r3
 80194f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80194f8:	2290      	movs	r2, #144	; 0x90
 80194fa:	4619      	mov	r1, r3
 80194fc:	f000 ffdb 	bl	801a4b6 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8019500:	4b29      	ldr	r3, [pc, #164]	; (80195a8 <RegionEU868InitDefaults+0x12c>)
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	4a29      	ldr	r2, [pc, #164]	; (80195ac <RegionEU868InitDefaults+0x130>)
 8019506:	ca07      	ldmia	r2, {r0, r1, r2}
 8019508:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 801950c:	4b26      	ldr	r3, [pc, #152]	; (80195a8 <RegionEU868InitDefaults+0x12c>)
 801950e:	681b      	ldr	r3, [r3, #0]
 8019510:	4a27      	ldr	r2, [pc, #156]	; (80195b0 <RegionEU868InitDefaults+0x134>)
 8019512:	330c      	adds	r3, #12
 8019514:	ca07      	ldmia	r2, {r0, r1, r2}
 8019516:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 801951a:	4b23      	ldr	r3, [pc, #140]	; (80195a8 <RegionEU868InitDefaults+0x12c>)
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	4a25      	ldr	r2, [pc, #148]	; (80195b4 <RegionEU868InitDefaults+0x138>)
 8019520:	3318      	adds	r3, #24
 8019522:	ca07      	ldmia	r2, {r0, r1, r2}
 8019524:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8019528:	4b1f      	ldr	r3, [pc, #124]	; (80195a8 <RegionEU868InitDefaults+0x12c>)
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	2207      	movs	r2, #7
 801952e:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8019532:	4b1d      	ldr	r3, [pc, #116]	; (80195a8 <RegionEU868InitDefaults+0x12c>)
 8019534:	681b      	ldr	r3, [r3, #0]
 8019536:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 801953a:	4b1b      	ldr	r3, [pc, #108]	; (80195a8 <RegionEU868InitDefaults+0x12c>)
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8019542:	2201      	movs	r2, #1
 8019544:	4619      	mov	r1, r3
 8019546:	f7fe fff3 	bl	8018530 <RegionCommonChanMaskCopy>
 801954a:	e028      	b.n	801959e <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 801954c:	4b16      	ldr	r3, [pc, #88]	; (80195a8 <RegionEU868InitDefaults+0x12c>)
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	2200      	movs	r2, #0
 8019552:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8019554:	4b14      	ldr	r3, [pc, #80]	; (80195a8 <RegionEU868InitDefaults+0x12c>)
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	2200      	movs	r2, #0
 801955a:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 801955c:	4b12      	ldr	r3, [pc, #72]	; (80195a8 <RegionEU868InitDefaults+0x12c>)
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	2200      	movs	r2, #0
 8019562:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8019564:	4b10      	ldr	r3, [pc, #64]	; (80195a8 <RegionEU868InitDefaults+0x12c>)
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 801956c:	4b0e      	ldr	r3, [pc, #56]	; (80195a8 <RegionEU868InitDefaults+0x12c>)
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8019574:	2201      	movs	r2, #1
 8019576:	4619      	mov	r1, r3
 8019578:	f7fe ffda 	bl	8018530 <RegionCommonChanMaskCopy>
            break;
 801957c:	e00f      	b.n	801959e <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801957e:	4b0a      	ldr	r3, [pc, #40]	; (80195a8 <RegionEU868InitDefaults+0x12c>)
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 8019586:	4b08      	ldr	r3, [pc, #32]	; (80195a8 <RegionEU868InitDefaults+0x12c>)
 8019588:	681b      	ldr	r3, [r3, #0]
 801958a:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 801958e:	4b06      	ldr	r3, [pc, #24]	; (80195a8 <RegionEU868InitDefaults+0x12c>)
 8019590:	681b      	ldr	r3, [r3, #0]
 8019592:	430a      	orrs	r2, r1
 8019594:	b292      	uxth	r2, r2
 8019596:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 801959a:	e000      	b.n	801959e <RegionEU868InitDefaults+0x122>
            break;
 801959c:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801959e:	37c0      	adds	r7, #192	; 0xc0
 80195a0:	46bd      	mov	sp, r7
 80195a2:	bd80      	pop	{r7, pc}
 80195a4:	200022b4 	.word	0x200022b4
 80195a8:	200022b8 	.word	0x200022b8
 80195ac:	0801f660 	.word	0x0801f660
 80195b0:	0801f66c 	.word	0x0801f66c
 80195b4:	0801f678 	.word	0x0801f678

080195b8 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80195b8:	b580      	push	{r7, lr}
 80195ba:	b084      	sub	sp, #16
 80195bc:	af00      	add	r7, sp, #0
 80195be:	6078      	str	r0, [r7, #4]
 80195c0:	460b      	mov	r3, r1
 80195c2:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 80195c4:	78fb      	ldrb	r3, [r7, #3]
 80195c6:	2b0f      	cmp	r3, #15
 80195c8:	d86c      	bhi.n	80196a4 <RegionEU868Verify+0xec>
 80195ca:	a201      	add	r2, pc, #4	; (adr r2, 80195d0 <RegionEU868Verify+0x18>)
 80195cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80195d0:	08019611 	.word	0x08019611
 80195d4:	080196a5 	.word	0x080196a5
 80195d8:	080196a5 	.word	0x080196a5
 80195dc:	080196a5 	.word	0x080196a5
 80195e0:	080196a5 	.word	0x080196a5
 80195e4:	08019629 	.word	0x08019629
 80195e8:	08019647 	.word	0x08019647
 80195ec:	08019665 	.word	0x08019665
 80195f0:	080196a5 	.word	0x080196a5
 80195f4:	08019683 	.word	0x08019683
 80195f8:	08019683 	.word	0x08019683
 80195fc:	080196a5 	.word	0x080196a5
 8019600:	080196a5 	.word	0x080196a5
 8019604:	080196a5 	.word	0x080196a5
 8019608:	080196a5 	.word	0x080196a5
 801960c:	080196a1 	.word	0x080196a1
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8019610:	2300      	movs	r3, #0
 8019612:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	681b      	ldr	r3, [r3, #0]
 8019618:	f107 020f 	add.w	r2, r7, #15
 801961c:	4611      	mov	r1, r2
 801961e:	4618      	mov	r0, r3
 8019620:	f7ff fcee 	bl	8019000 <VerifyRfFreq>
 8019624:	4603      	mov	r3, r0
 8019626:	e03e      	b.n	80196a6 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	f993 3000 	ldrsb.w	r3, [r3]
 801962e:	2207      	movs	r2, #7
 8019630:	2100      	movs	r1, #0
 8019632:	4618      	mov	r0, r3
 8019634:	f7fe feff 	bl	8018436 <RegionCommonValueInRange>
 8019638:	4603      	mov	r3, r0
 801963a:	2b00      	cmp	r3, #0
 801963c:	bf14      	ite	ne
 801963e:	2301      	movne	r3, #1
 8019640:	2300      	moveq	r3, #0
 8019642:	b2db      	uxtb	r3, r3
 8019644:	e02f      	b.n	80196a6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	f993 3000 	ldrsb.w	r3, [r3]
 801964c:	2205      	movs	r2, #5
 801964e:	2100      	movs	r1, #0
 8019650:	4618      	mov	r0, r3
 8019652:	f7fe fef0 	bl	8018436 <RegionCommonValueInRange>
 8019656:	4603      	mov	r3, r0
 8019658:	2b00      	cmp	r3, #0
 801965a:	bf14      	ite	ne
 801965c:	2301      	movne	r3, #1
 801965e:	2300      	moveq	r3, #0
 8019660:	b2db      	uxtb	r3, r3
 8019662:	e020      	b.n	80196a6 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	f993 3000 	ldrsb.w	r3, [r3]
 801966a:	2207      	movs	r2, #7
 801966c:	2100      	movs	r1, #0
 801966e:	4618      	mov	r0, r3
 8019670:	f7fe fee1 	bl	8018436 <RegionCommonValueInRange>
 8019674:	4603      	mov	r3, r0
 8019676:	2b00      	cmp	r3, #0
 8019678:	bf14      	ite	ne
 801967a:	2301      	movne	r3, #1
 801967c:	2300      	moveq	r3, #0
 801967e:	b2db      	uxtb	r3, r3
 8019680:	e011      	b.n	80196a6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	f993 3000 	ldrsb.w	r3, [r3]
 8019688:	2207      	movs	r2, #7
 801968a:	2100      	movs	r1, #0
 801968c:	4618      	mov	r0, r3
 801968e:	f7fe fed2 	bl	8018436 <RegionCommonValueInRange>
 8019692:	4603      	mov	r3, r0
 8019694:	2b00      	cmp	r3, #0
 8019696:	bf14      	ite	ne
 8019698:	2301      	movne	r3, #1
 801969a:	2300      	moveq	r3, #0
 801969c:	b2db      	uxtb	r3, r3
 801969e:	e002      	b.n	80196a6 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 80196a0:	2301      	movs	r3, #1
 80196a2:	e000      	b.n	80196a6 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 80196a4:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 80196a6:	4618      	mov	r0, r3
 80196a8:	3710      	adds	r7, #16
 80196aa:	46bd      	mov	sp, r7
 80196ac:	bd80      	pop	{r7, pc}
 80196ae:	bf00      	nop

080196b0 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80196b0:	b580      	push	{r7, lr}
 80196b2:	b08a      	sub	sp, #40	; 0x28
 80196b4:	af00      	add	r7, sp, #0
 80196b6:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80196b8:	2350      	movs	r3, #80	; 0x50
 80196ba:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	791b      	ldrb	r3, [r3, #4]
 80196c2:	2b10      	cmp	r3, #16
 80196c4:	d162      	bne.n	801978c <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	330f      	adds	r3, #15
 80196cc:	781b      	ldrb	r3, [r3, #0]
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d15e      	bne.n	8019790 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80196d2:	2300      	movs	r3, #0
 80196d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80196d8:	2303      	movs	r3, #3
 80196da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80196de:	e050      	b.n	8019782 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 80196e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80196e4:	2b07      	cmp	r3, #7
 80196e6:	d824      	bhi.n	8019732 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	681a      	ldr	r2, [r3, #0]
 80196ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80196f0:	4413      	add	r3, r2
 80196f2:	781b      	ldrb	r3, [r3, #0]
 80196f4:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80196f6:	69ba      	ldr	r2, [r7, #24]
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	6819      	ldr	r1, [r3, #0]
 80196fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019700:	3301      	adds	r3, #1
 8019702:	440b      	add	r3, r1
 8019704:	781b      	ldrb	r3, [r3, #0]
 8019706:	021b      	lsls	r3, r3, #8
 8019708:	4313      	orrs	r3, r2
 801970a:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801970c:	69ba      	ldr	r2, [r7, #24]
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	6819      	ldr	r1, [r3, #0]
 8019712:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019716:	3302      	adds	r3, #2
 8019718:	440b      	add	r3, r1
 801971a:	781b      	ldrb	r3, [r3, #0]
 801971c:	041b      	lsls	r3, r3, #16
 801971e:	4313      	orrs	r3, r2
 8019720:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8019722:	69bb      	ldr	r3, [r7, #24]
 8019724:	2264      	movs	r2, #100	; 0x64
 8019726:	fb02 f303 	mul.w	r3, r2, r3
 801972a:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 801972c:	2300      	movs	r3, #0
 801972e:	61fb      	str	r3, [r7, #28]
 8019730:	e006      	b.n	8019740 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8019732:	2300      	movs	r3, #0
 8019734:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8019736:	2300      	movs	r3, #0
 8019738:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 801973c:	2300      	movs	r3, #0
 801973e:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8019740:	69bb      	ldr	r3, [r7, #24]
 8019742:	2b00      	cmp	r3, #0
 8019744:	d00b      	beq.n	801975e <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8019746:	f107 0318 	add.w	r3, r7, #24
 801974a:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 801974c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019750:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8019752:	f107 0310 	add.w	r3, r7, #16
 8019756:	4618      	mov	r0, r3
 8019758:	f000 fd0e 	bl	801a178 <RegionEU868ChannelAdd>
 801975c:	e007      	b.n	801976e <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801975e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019762:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8019764:	f107 030c 	add.w	r3, r7, #12
 8019768:	4618      	mov	r0, r3
 801976a:	f000 fda7 	bl	801a2bc <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801976e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019772:	3303      	adds	r3, #3
 8019774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019778:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801977c:	3301      	adds	r3, #1
 801977e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019782:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019786:	2b0f      	cmp	r3, #15
 8019788:	d9aa      	bls.n	80196e0 <RegionEU868ApplyCFList+0x30>
 801978a:	e002      	b.n	8019792 <RegionEU868ApplyCFList+0xe2>
        return;
 801978c:	bf00      	nop
 801978e:	e000      	b.n	8019792 <RegionEU868ApplyCFList+0xe2>
        return;
 8019790:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8019792:	3728      	adds	r7, #40	; 0x28
 8019794:	46bd      	mov	sp, r7
 8019796:	bd80      	pop	{r7, pc}

08019798 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8019798:	b580      	push	{r7, lr}
 801979a:	b082      	sub	sp, #8
 801979c:	af00      	add	r7, sp, #0
 801979e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	791b      	ldrb	r3, [r3, #4]
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	d002      	beq.n	80197ae <RegionEU868ChanMaskSet+0x16>
 80197a8:	2b01      	cmp	r3, #1
 80197aa:	d00b      	beq.n	80197c4 <RegionEU868ChanMaskSet+0x2c>
 80197ac:	e015      	b.n	80197da <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80197ae:	4b0e      	ldr	r3, [pc, #56]	; (80197e8 <RegionEU868ChanMaskSet+0x50>)
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	2201      	movs	r2, #1
 80197bc:	4619      	mov	r1, r3
 80197be:	f7fe feb7 	bl	8018530 <RegionCommonChanMaskCopy>
            break;
 80197c2:	e00c      	b.n	80197de <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80197c4:	4b08      	ldr	r3, [pc, #32]	; (80197e8 <RegionEU868ChanMaskSet+0x50>)
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	2201      	movs	r2, #1
 80197d2:	4619      	mov	r1, r3
 80197d4:	f7fe feac 	bl	8018530 <RegionCommonChanMaskCopy>
            break;
 80197d8:	e001      	b.n	80197de <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 80197da:	2300      	movs	r3, #0
 80197dc:	e000      	b.n	80197e0 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 80197de:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80197e0:	4618      	mov	r0, r3
 80197e2:	3708      	adds	r7, #8
 80197e4:	46bd      	mov	sp, r7
 80197e6:	bd80      	pop	{r7, pc}
 80197e8:	200022b8 	.word	0x200022b8

080197ec <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80197ec:	b580      	push	{r7, lr}
 80197ee:	b088      	sub	sp, #32
 80197f0:	af02      	add	r7, sp, #8
 80197f2:	60ba      	str	r2, [r7, #8]
 80197f4:	607b      	str	r3, [r7, #4]
 80197f6:	4603      	mov	r3, r0
 80197f8:	73fb      	strb	r3, [r7, #15]
 80197fa:	460b      	mov	r3, r1
 80197fc:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 80197fe:	2300      	movs	r3, #0
 8019800:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8019802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019806:	2b07      	cmp	r3, #7
 8019808:	bfa8      	it	ge
 801980a:	2307      	movge	r3, #7
 801980c:	b25a      	sxtb	r2, r3
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019818:	491e      	ldr	r1, [pc, #120]	; (8019894 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801981a:	4618      	mov	r0, r3
 801981c:	f7ff fb88 	bl	8018f30 <RegionCommonGetBandwidth>
 8019820:	4603      	mov	r3, r0
 8019822:	b2da      	uxtb	r2, r3
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801982e:	2b07      	cmp	r3, #7
 8019830:	d10a      	bne.n	8019848 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019838:	461a      	mov	r2, r3
 801983a:	4b17      	ldr	r3, [pc, #92]	; (8019898 <RegionEU868ComputeRxWindowParameters+0xac>)
 801983c:	5c9b      	ldrb	r3, [r3, r2]
 801983e:	4618      	mov	r0, r3
 8019840:	f7ff f8aa 	bl	8018998 <RegionCommonComputeSymbolTimeFsk>
 8019844:	6178      	str	r0, [r7, #20]
 8019846:	e011      	b.n	801986c <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801984e:	461a      	mov	r2, r3
 8019850:	4b11      	ldr	r3, [pc, #68]	; (8019898 <RegionEU868ComputeRxWindowParameters+0xac>)
 8019852:	5c9a      	ldrb	r2, [r3, r2]
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801985a:	4619      	mov	r1, r3
 801985c:	4b0d      	ldr	r3, [pc, #52]	; (8019894 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801985e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019862:	4619      	mov	r1, r3
 8019864:	4610      	mov	r0, r2
 8019866:	f7ff f881 	bl	801896c <RegionCommonComputeSymbolTimeLoRa>
 801986a:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801986c:	4b0b      	ldr	r3, [pc, #44]	; (801989c <RegionEU868ComputeRxWindowParameters+0xb0>)
 801986e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019870:	4798      	blx	r3
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	3308      	adds	r3, #8
 8019876:	687a      	ldr	r2, [r7, #4]
 8019878:	320c      	adds	r2, #12
 801987a:	7bb9      	ldrb	r1, [r7, #14]
 801987c:	9201      	str	r2, [sp, #4]
 801987e:	9300      	str	r3, [sp, #0]
 8019880:	4603      	mov	r3, r0
 8019882:	68ba      	ldr	r2, [r7, #8]
 8019884:	6978      	ldr	r0, [r7, #20]
 8019886:	f7ff f897 	bl	80189b8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 801988a:	bf00      	nop
 801988c:	3718      	adds	r7, #24
 801988e:	46bd      	mov	sp, r7
 8019890:	bd80      	pop	{r7, pc}
 8019892:	bf00      	nop
 8019894:	0801fbb4 	.word	0x0801fbb4
 8019898:	0801fbac 	.word	0x0801fbac
 801989c:	0801fbe4 	.word	0x0801fbe4

080198a0 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80198a0:	b5b0      	push	{r4, r5, r7, lr}
 80198a2:	b090      	sub	sp, #64	; 0x40
 80198a4:	af0a      	add	r7, sp, #40	; 0x28
 80198a6:	6078      	str	r0, [r7, #4]
 80198a8:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	785b      	ldrb	r3, [r3, #1]
 80198ae:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80198b0:	2300      	movs	r3, #0
 80198b2:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 80198b4:	2300      	movs	r3, #0
 80198b6:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	685b      	ldr	r3, [r3, #4]
 80198bc:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80198be:	4b5a      	ldr	r3, [pc, #360]	; (8019a28 <RegionEU868RxConfig+0x188>)
 80198c0:	685b      	ldr	r3, [r3, #4]
 80198c2:	4798      	blx	r3
 80198c4:	4603      	mov	r3, r0
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d001      	beq.n	80198ce <RegionEU868RxConfig+0x2e>
    {
        return false;
 80198ca:	2300      	movs	r3, #0
 80198cc:	e0a8      	b.n	8019a20 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	7cdb      	ldrb	r3, [r3, #19]
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	d126      	bne.n	8019924 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80198d6:	4b55      	ldr	r3, [pc, #340]	; (8019a2c <RegionEU868RxConfig+0x18c>)
 80198d8:	681a      	ldr	r2, [r3, #0]
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	781b      	ldrb	r3, [r3, #0]
 80198de:	4619      	mov	r1, r3
 80198e0:	460b      	mov	r3, r1
 80198e2:	005b      	lsls	r3, r3, #1
 80198e4:	440b      	add	r3, r1
 80198e6:	009b      	lsls	r3, r3, #2
 80198e8:	4413      	add	r3, r2
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80198ee:	4b4f      	ldr	r3, [pc, #316]	; (8019a2c <RegionEU868RxConfig+0x18c>)
 80198f0:	681a      	ldr	r2, [r3, #0]
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	781b      	ldrb	r3, [r3, #0]
 80198f6:	4619      	mov	r1, r3
 80198f8:	460b      	mov	r3, r1
 80198fa:	005b      	lsls	r3, r3, #1
 80198fc:	440b      	add	r3, r1
 80198fe:	009b      	lsls	r3, r3, #2
 8019900:	4413      	add	r3, r2
 8019902:	3304      	adds	r3, #4
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	2b00      	cmp	r3, #0
 8019908:	d00c      	beq.n	8019924 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801990a:	4b48      	ldr	r3, [pc, #288]	; (8019a2c <RegionEU868RxConfig+0x18c>)
 801990c:	681a      	ldr	r2, [r3, #0]
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	781b      	ldrb	r3, [r3, #0]
 8019912:	4619      	mov	r1, r3
 8019914:	460b      	mov	r3, r1
 8019916:	005b      	lsls	r3, r3, #1
 8019918:	440b      	add	r3, r1
 801991a:	009b      	lsls	r3, r3, #2
 801991c:	4413      	add	r3, r2
 801991e:	3304      	adds	r3, #4
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8019924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019928:	4a41      	ldr	r2, [pc, #260]	; (8019a30 <RegionEU868RxConfig+0x190>)
 801992a:	5cd3      	ldrb	r3, [r2, r3]
 801992c:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801992e:	4b3e      	ldr	r3, [pc, #248]	; (8019a28 <RegionEU868RxConfig+0x188>)
 8019930:	68db      	ldr	r3, [r3, #12]
 8019932:	6938      	ldr	r0, [r7, #16]
 8019934:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8019936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801993a:	2b07      	cmp	r3, #7
 801993c:	d128      	bne.n	8019990 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801993e:	2300      	movs	r3, #0
 8019940:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8019942:	4b39      	ldr	r3, [pc, #228]	; (8019a28 <RegionEU868RxConfig+0x188>)
 8019944:	699c      	ldr	r4, [r3, #24]
 8019946:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801994a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801994e:	fb02 f303 	mul.w	r3, r2, r3
 8019952:	4619      	mov	r1, r3
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	689b      	ldr	r3, [r3, #8]
 8019958:	b29b      	uxth	r3, r3
 801995a:	687a      	ldr	r2, [r7, #4]
 801995c:	7c92      	ldrb	r2, [r2, #18]
 801995e:	7df8      	ldrb	r0, [r7, #23]
 8019960:	9209      	str	r2, [sp, #36]	; 0x24
 8019962:	2200      	movs	r2, #0
 8019964:	9208      	str	r2, [sp, #32]
 8019966:	2200      	movs	r2, #0
 8019968:	9207      	str	r2, [sp, #28]
 801996a:	2200      	movs	r2, #0
 801996c:	9206      	str	r2, [sp, #24]
 801996e:	2201      	movs	r2, #1
 8019970:	9205      	str	r2, [sp, #20]
 8019972:	2200      	movs	r2, #0
 8019974:	9204      	str	r2, [sp, #16]
 8019976:	2200      	movs	r2, #0
 8019978:	9203      	str	r2, [sp, #12]
 801997a:	9302      	str	r3, [sp, #8]
 801997c:	2305      	movs	r3, #5
 801997e:	9301      	str	r3, [sp, #4]
 8019980:	4b2c      	ldr	r3, [pc, #176]	; (8019a34 <RegionEU868RxConfig+0x194>)
 8019982:	9300      	str	r3, [sp, #0]
 8019984:	2300      	movs	r3, #0
 8019986:	460a      	mov	r2, r1
 8019988:	f24c 3150 	movw	r1, #50000	; 0xc350
 801998c:	47a0      	blx	r4
 801998e:	e024      	b.n	80199da <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8019990:	2301      	movs	r3, #1
 8019992:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8019994:	4b24      	ldr	r3, [pc, #144]	; (8019a28 <RegionEU868RxConfig+0x188>)
 8019996:	699c      	ldr	r4, [r3, #24]
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	789b      	ldrb	r3, [r3, #2]
 801999c:	461d      	mov	r5, r3
 801999e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	689b      	ldr	r3, [r3, #8]
 80199a6:	b29b      	uxth	r3, r3
 80199a8:	687a      	ldr	r2, [r7, #4]
 80199aa:	7c92      	ldrb	r2, [r2, #18]
 80199ac:	7df8      	ldrb	r0, [r7, #23]
 80199ae:	9209      	str	r2, [sp, #36]	; 0x24
 80199b0:	2201      	movs	r2, #1
 80199b2:	9208      	str	r2, [sp, #32]
 80199b4:	2200      	movs	r2, #0
 80199b6:	9207      	str	r2, [sp, #28]
 80199b8:	2200      	movs	r2, #0
 80199ba:	9206      	str	r2, [sp, #24]
 80199bc:	2200      	movs	r2, #0
 80199be:	9205      	str	r2, [sp, #20]
 80199c0:	2200      	movs	r2, #0
 80199c2:	9204      	str	r2, [sp, #16]
 80199c4:	2200      	movs	r2, #0
 80199c6:	9203      	str	r2, [sp, #12]
 80199c8:	9302      	str	r3, [sp, #8]
 80199ca:	2308      	movs	r3, #8
 80199cc:	9301      	str	r3, [sp, #4]
 80199ce:	2300      	movs	r3, #0
 80199d0:	9300      	str	r3, [sp, #0]
 80199d2:	2301      	movs	r3, #1
 80199d4:	460a      	mov	r2, r1
 80199d6:	4629      	mov	r1, r5
 80199d8:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	7c5b      	ldrb	r3, [r3, #17]
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d005      	beq.n	80199ee <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80199e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80199e6:	4a14      	ldr	r2, [pc, #80]	; (8019a38 <RegionEU868RxConfig+0x198>)
 80199e8:	5cd3      	ldrb	r3, [r2, r3]
 80199ea:	75bb      	strb	r3, [r7, #22]
 80199ec:	e004      	b.n	80199f8 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80199ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80199f2:	4a12      	ldr	r2, [pc, #72]	; (8019a3c <RegionEU868RxConfig+0x19c>)
 80199f4:	5cd3      	ldrb	r3, [r2, r3]
 80199f6:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80199f8:	4b0b      	ldr	r3, [pc, #44]	; (8019a28 <RegionEU868RxConfig+0x188>)
 80199fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80199fc:	7dba      	ldrb	r2, [r7, #22]
 80199fe:	320d      	adds	r2, #13
 8019a00:	b2d1      	uxtb	r1, r2
 8019a02:	7dfa      	ldrb	r2, [r7, #23]
 8019a04:	4610      	mov	r0, r2
 8019a06:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	7cdb      	ldrb	r3, [r3, #19]
 8019a0c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8019a10:	6939      	ldr	r1, [r7, #16]
 8019a12:	4618      	mov	r0, r3
 8019a14:	f7ff faaa 	bl	8018f6c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8019a18:	683b      	ldr	r3, [r7, #0]
 8019a1a:	7bfa      	ldrb	r2, [r7, #15]
 8019a1c:	701a      	strb	r2, [r3, #0]
    return true;
 8019a1e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8019a20:	4618      	mov	r0, r3
 8019a22:	3718      	adds	r7, #24
 8019a24:	46bd      	mov	sp, r7
 8019a26:	bdb0      	pop	{r4, r5, r7, pc}
 8019a28:	0801fbe4 	.word	0x0801fbe4
 8019a2c:	200022b8 	.word	0x200022b8
 8019a30:	0801fbac 	.word	0x0801fbac
 8019a34:	00014585 	.word	0x00014585
 8019a38:	0801fbdc 	.word	0x0801fbdc
 8019a3c:	0801fbd4 	.word	0x0801fbd4

08019a40 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8019a40:	b590      	push	{r4, r7, lr}
 8019a42:	b093      	sub	sp, #76	; 0x4c
 8019a44:	af0a      	add	r7, sp, #40	; 0x28
 8019a46:	60f8      	str	r0, [r7, #12]
 8019a48:	60b9      	str	r1, [r7, #8]
 8019a4a:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8019a4c:	68fb      	ldr	r3, [r7, #12]
 8019a4e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019a52:	461a      	mov	r2, r3
 8019a54:	4b5d      	ldr	r3, [pc, #372]	; (8019bcc <RegionEU868TxConfig+0x18c>)
 8019a56:	5c9b      	ldrb	r3, [r3, r2]
 8019a58:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8019a5a:	68fb      	ldr	r3, [r7, #12]
 8019a5c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8019a60:	4b5b      	ldr	r3, [pc, #364]	; (8019bd0 <RegionEU868TxConfig+0x190>)
 8019a62:	681a      	ldr	r2, [r3, #0]
 8019a64:	4b5b      	ldr	r3, [pc, #364]	; (8019bd4 <RegionEU868TxConfig+0x194>)
 8019a66:	6819      	ldr	r1, [r3, #0]
 8019a68:	68fb      	ldr	r3, [r7, #12]
 8019a6a:	781b      	ldrb	r3, [r3, #0]
 8019a6c:	461c      	mov	r4, r3
 8019a6e:	4623      	mov	r3, r4
 8019a70:	005b      	lsls	r3, r3, #1
 8019a72:	4423      	add	r3, r4
 8019a74:	009b      	lsls	r3, r3, #2
 8019a76:	440b      	add	r3, r1
 8019a78:	3309      	adds	r3, #9
 8019a7a:	781b      	ldrb	r3, [r3, #0]
 8019a7c:	4619      	mov	r1, r3
 8019a7e:	460b      	mov	r3, r1
 8019a80:	005b      	lsls	r3, r3, #1
 8019a82:	440b      	add	r3, r1
 8019a84:	00db      	lsls	r3, r3, #3
 8019a86:	4413      	add	r3, r2
 8019a88:	3302      	adds	r3, #2
 8019a8a:	f993 3000 	ldrsb.w	r3, [r3]
 8019a8e:	4619      	mov	r1, r3
 8019a90:	f7ff fa38 	bl	8018f04 <RegionCommonLimitTxPower>
 8019a94:	4603      	mov	r3, r0
 8019a96:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8019a98:	68fb      	ldr	r3, [r7, #12]
 8019a9a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019a9e:	494e      	ldr	r1, [pc, #312]	; (8019bd8 <RegionEU868TxConfig+0x198>)
 8019aa0:	4618      	mov	r0, r3
 8019aa2:	f7ff fa45 	bl	8018f30 <RegionCommonGetBandwidth>
 8019aa6:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8019aa8:	2300      	movs	r3, #0
 8019aaa:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8019aac:	68fb      	ldr	r3, [r7, #12]
 8019aae:	6859      	ldr	r1, [r3, #4]
 8019ab0:	68fb      	ldr	r3, [r7, #12]
 8019ab2:	689a      	ldr	r2, [r3, #8]
 8019ab4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8019ab8:	4618      	mov	r0, r3
 8019aba:	f7ff f835 	bl	8018b28 <RegionCommonComputeTxPower>
 8019abe:	4603      	mov	r3, r0
 8019ac0:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8019ac2:	4b46      	ldr	r3, [pc, #280]	; (8019bdc <RegionEU868TxConfig+0x19c>)
 8019ac4:	68da      	ldr	r2, [r3, #12]
 8019ac6:	4b43      	ldr	r3, [pc, #268]	; (8019bd4 <RegionEU868TxConfig+0x194>)
 8019ac8:	6819      	ldr	r1, [r3, #0]
 8019aca:	68fb      	ldr	r3, [r7, #12]
 8019acc:	781b      	ldrb	r3, [r3, #0]
 8019ace:	4618      	mov	r0, r3
 8019ad0:	4603      	mov	r3, r0
 8019ad2:	005b      	lsls	r3, r3, #1
 8019ad4:	4403      	add	r3, r0
 8019ad6:	009b      	lsls	r3, r3, #2
 8019ad8:	440b      	add	r3, r1
 8019ada:	681b      	ldr	r3, [r3, #0]
 8019adc:	4618      	mov	r0, r3
 8019ade:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8019ae0:	68fb      	ldr	r3, [r7, #12]
 8019ae2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019ae6:	2b07      	cmp	r3, #7
 8019ae8:	d124      	bne.n	8019b34 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8019aea:	2300      	movs	r3, #0
 8019aec:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8019aee:	4b3b      	ldr	r3, [pc, #236]	; (8019bdc <RegionEU868TxConfig+0x19c>)
 8019af0:	69dc      	ldr	r4, [r3, #28]
 8019af2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8019af6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019afa:	fb02 f303 	mul.w	r3, r2, r3
 8019afe:	461a      	mov	r2, r3
 8019b00:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8019b04:	7ff8      	ldrb	r0, [r7, #31]
 8019b06:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8019b0a:	9308      	str	r3, [sp, #32]
 8019b0c:	2300      	movs	r3, #0
 8019b0e:	9307      	str	r3, [sp, #28]
 8019b10:	2300      	movs	r3, #0
 8019b12:	9306      	str	r3, [sp, #24]
 8019b14:	2300      	movs	r3, #0
 8019b16:	9305      	str	r3, [sp, #20]
 8019b18:	2301      	movs	r3, #1
 8019b1a:	9304      	str	r3, [sp, #16]
 8019b1c:	2300      	movs	r3, #0
 8019b1e:	9303      	str	r3, [sp, #12]
 8019b20:	2305      	movs	r3, #5
 8019b22:	9302      	str	r3, [sp, #8]
 8019b24:	2300      	movs	r3, #0
 8019b26:	9301      	str	r3, [sp, #4]
 8019b28:	9200      	str	r2, [sp, #0]
 8019b2a:	69bb      	ldr	r3, [r7, #24]
 8019b2c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8019b30:	47a0      	blx	r4
 8019b32:	e01d      	b.n	8019b70 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8019b34:	2301      	movs	r3, #1
 8019b36:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8019b38:	4b28      	ldr	r3, [pc, #160]	; (8019bdc <RegionEU868TxConfig+0x19c>)
 8019b3a:	69dc      	ldr	r4, [r3, #28]
 8019b3c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8019b40:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8019b44:	7ff8      	ldrb	r0, [r7, #31]
 8019b46:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8019b4a:	9208      	str	r2, [sp, #32]
 8019b4c:	2200      	movs	r2, #0
 8019b4e:	9207      	str	r2, [sp, #28]
 8019b50:	2200      	movs	r2, #0
 8019b52:	9206      	str	r2, [sp, #24]
 8019b54:	2200      	movs	r2, #0
 8019b56:	9205      	str	r2, [sp, #20]
 8019b58:	2201      	movs	r2, #1
 8019b5a:	9204      	str	r2, [sp, #16]
 8019b5c:	2200      	movs	r2, #0
 8019b5e:	9203      	str	r2, [sp, #12]
 8019b60:	2208      	movs	r2, #8
 8019b62:	9202      	str	r2, [sp, #8]
 8019b64:	2201      	movs	r2, #1
 8019b66:	9201      	str	r2, [sp, #4]
 8019b68:	9300      	str	r3, [sp, #0]
 8019b6a:	69bb      	ldr	r3, [r7, #24]
 8019b6c:	2200      	movs	r2, #0
 8019b6e:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8019b70:	4b18      	ldr	r3, [pc, #96]	; (8019bd4 <RegionEU868TxConfig+0x194>)
 8019b72:	681a      	ldr	r2, [r3, #0]
 8019b74:	68fb      	ldr	r3, [r7, #12]
 8019b76:	781b      	ldrb	r3, [r3, #0]
 8019b78:	4619      	mov	r1, r3
 8019b7a:	460b      	mov	r3, r1
 8019b7c:	005b      	lsls	r3, r3, #1
 8019b7e:	440b      	add	r3, r1
 8019b80:	009b      	lsls	r3, r3, #2
 8019b82:	4413      	add	r3, r2
 8019b84:	681a      	ldr	r2, [r3, #0]
 8019b86:	68fb      	ldr	r3, [r7, #12]
 8019b88:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019b8c:	4619      	mov	r1, r3
 8019b8e:	4610      	mov	r0, r2
 8019b90:	f7ff fa1e 	bl	8018fd0 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8019b94:	68fb      	ldr	r3, [r7, #12]
 8019b96:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8019b9a:	68fb      	ldr	r3, [r7, #12]
 8019b9c:	899b      	ldrh	r3, [r3, #12]
 8019b9e:	4619      	mov	r1, r3
 8019ba0:	4610      	mov	r0, r2
 8019ba2:	f7ff faa3 	bl	80190ec <GetTimeOnAir>
 8019ba6:	4602      	mov	r2, r0
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8019bac:	4b0b      	ldr	r3, [pc, #44]	; (8019bdc <RegionEU868TxConfig+0x19c>)
 8019bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019bb0:	68fa      	ldr	r2, [r7, #12]
 8019bb2:	8992      	ldrh	r2, [r2, #12]
 8019bb4:	b2d1      	uxtb	r1, r2
 8019bb6:	7ffa      	ldrb	r2, [r7, #31]
 8019bb8:	4610      	mov	r0, r2
 8019bba:	4798      	blx	r3

    *txPower = txPowerLimited;
 8019bbc:	68bb      	ldr	r3, [r7, #8]
 8019bbe:	7f7a      	ldrb	r2, [r7, #29]
 8019bc0:	701a      	strb	r2, [r3, #0]
    return true;
 8019bc2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8019bc4:	4618      	mov	r0, r3
 8019bc6:	3724      	adds	r7, #36	; 0x24
 8019bc8:	46bd      	mov	sp, r7
 8019bca:	bd90      	pop	{r4, r7, pc}
 8019bcc:	0801fbac 	.word	0x0801fbac
 8019bd0:	200022b4 	.word	0x200022b4
 8019bd4:	200022b8 	.word	0x200022b8
 8019bd8:	0801fbb4 	.word	0x0801fbb4
 8019bdc:	0801fbe4 	.word	0x0801fbe4

08019be0 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8019be0:	b590      	push	{r4, r7, lr}
 8019be2:	b093      	sub	sp, #76	; 0x4c
 8019be4:	af00      	add	r7, sp, #0
 8019be6:	60f8      	str	r0, [r7, #12]
 8019be8:	60b9      	str	r1, [r7, #8]
 8019bea:	607a      	str	r2, [r7, #4]
 8019bec:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8019bee:	2307      	movs	r3, #7
 8019bf0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8019bf4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019bf8:	2200      	movs	r2, #0
 8019bfa:	601a      	str	r2, [r3, #0]
 8019bfc:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8019bfe:	2300      	movs	r3, #0
 8019c00:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8019c04:	2300      	movs	r3, #0
 8019c06:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8019c0a:	2300      	movs	r3, #0
 8019c0c:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019c0e:	e085      	b.n	8019d1c <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	685a      	ldr	r2, [r3, #4]
 8019c14:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8019c18:	4413      	add	r3, r2
 8019c1a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8019c1e:	4611      	mov	r1, r2
 8019c20:	4618      	mov	r0, r3
 8019c22:	f7fe fdc9 	bl	80187b8 <RegionCommonParseLinkAdrReq>
 8019c26:	4603      	mov	r3, r0
 8019c28:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8019c2c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d07b      	beq.n	8019d2c <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8019c34:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019c38:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019c3c:	4413      	add	r3, r2
 8019c3e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8019c42:	2307      	movs	r3, #7
 8019c44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8019c48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019c4c:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8019c4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d109      	bne.n	8019c6a <RegionEU868LinkAdrReq+0x8a>
 8019c56:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d106      	bne.n	8019c6a <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8019c5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019c60:	f023 0301 	bic.w	r3, r3, #1
 8019c64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019c68:	e058      	b.n	8019d1c <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019c6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	d003      	beq.n	8019c7a <RegionEU868LinkAdrReq+0x9a>
 8019c72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019c76:	2b05      	cmp	r3, #5
 8019c78:	d903      	bls.n	8019c82 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8019c7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019c7e:	2b06      	cmp	r3, #6
 8019c80:	d906      	bls.n	8019c90 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8019c82:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019c86:	f023 0301 	bic.w	r3, r3, #1
 8019c8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019c8e:	e045      	b.n	8019d1c <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8019c90:	2300      	movs	r3, #0
 8019c92:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8019c96:	e03d      	b.n	8019d14 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8019c98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019c9c:	2b06      	cmp	r3, #6
 8019c9e:	d118      	bne.n	8019cd2 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8019ca0:	4b5f      	ldr	r3, [pc, #380]	; (8019e20 <RegionEU868LinkAdrReq+0x240>)
 8019ca2:	6819      	ldr	r1, [r3, #0]
 8019ca4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8019ca8:	4613      	mov	r3, r2
 8019caa:	005b      	lsls	r3, r3, #1
 8019cac:	4413      	add	r3, r2
 8019cae:	009b      	lsls	r3, r3, #2
 8019cb0:	440b      	add	r3, r1
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d028      	beq.n	8019d0a <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8019cb8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019cbc:	2201      	movs	r2, #1
 8019cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8019cc2:	b21a      	sxth	r2, r3
 8019cc4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019cc6:	b21b      	sxth	r3, r3
 8019cc8:	4313      	orrs	r3, r2
 8019cca:	b21b      	sxth	r3, r3
 8019ccc:	b29b      	uxth	r3, r3
 8019cce:	877b      	strh	r3, [r7, #58]	; 0x3a
 8019cd0:	e01b      	b.n	8019d0a <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8019cd2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019cd4:	461a      	mov	r2, r3
 8019cd6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019cda:	fa42 f303 	asr.w	r3, r2, r3
 8019cde:	f003 0301 	and.w	r3, r3, #1
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d011      	beq.n	8019d0a <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8019ce6:	4b4e      	ldr	r3, [pc, #312]	; (8019e20 <RegionEU868LinkAdrReq+0x240>)
 8019ce8:	6819      	ldr	r1, [r3, #0]
 8019cea:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8019cee:	4613      	mov	r3, r2
 8019cf0:	005b      	lsls	r3, r3, #1
 8019cf2:	4413      	add	r3, r2
 8019cf4:	009b      	lsls	r3, r3, #2
 8019cf6:	440b      	add	r3, r1
 8019cf8:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d105      	bne.n	8019d0a <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8019cfe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019d02:	f023 0301 	bic.w	r3, r3, #1
 8019d06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8019d0a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019d0e:	3301      	adds	r3, #1
 8019d10:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8019d14:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019d18:	2b0f      	cmp	r3, #15
 8019d1a:	d9bd      	bls.n	8019c98 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019d1c:	68fb      	ldr	r3, [r7, #12]
 8019d1e:	7a1b      	ldrb	r3, [r3, #8]
 8019d20:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019d24:	429a      	cmp	r2, r3
 8019d26:	f4ff af73 	bcc.w	8019c10 <RegionEU868LinkAdrReq+0x30>
 8019d2a:	e000      	b.n	8019d2e <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8019d2c:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8019d2e:	2302      	movs	r3, #2
 8019d30:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	7a5b      	ldrb	r3, [r3, #9]
 8019d38:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8019d3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019d40:	4618      	mov	r0, r3
 8019d42:	f7ff fa23 	bl	801918c <RegionEU868GetPhyParam>
 8019d46:	4603      	mov	r3, r0
 8019d48:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8019d4a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019d4e:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8019d50:	68fb      	ldr	r3, [r7, #12]
 8019d52:	7a9b      	ldrb	r3, [r3, #10]
 8019d54:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8019d56:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8019d5a:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8019d5c:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8019d60:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8019d62:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019d66:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8019d68:	68fb      	ldr	r3, [r7, #12]
 8019d6a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8019d6e:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8019d70:	68fb      	ldr	r3, [r7, #12]
 8019d72:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8019d76:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8019d78:	68fb      	ldr	r3, [r7, #12]
 8019d7a:	7b5b      	ldrb	r3, [r3, #13]
 8019d7c:	b25b      	sxtb	r3, r3
 8019d7e:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8019d80:	2310      	movs	r3, #16
 8019d82:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8019d84:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8019d88:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8019d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d8c:	b25b      	sxtb	r3, r3
 8019d8e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8019d92:	2307      	movs	r3, #7
 8019d94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8019d98:	4b21      	ldr	r3, [pc, #132]	; (8019e20 <RegionEU868LinkAdrReq+0x240>)
 8019d9a:	681b      	ldr	r3, [r3, #0]
 8019d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8019d9e:	2307      	movs	r3, #7
 8019da0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8019da4:	2300      	movs	r3, #0
 8019da6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8019daa:	68fb      	ldr	r3, [r7, #12]
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8019db0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8019db4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019db8:	1c9a      	adds	r2, r3, #2
 8019dba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019dbe:	1c59      	adds	r1, r3, #1
 8019dc0:	f107 0010 	add.w	r0, r7, #16
 8019dc4:	4623      	mov	r3, r4
 8019dc6:	f7fe fd48 	bl	801885a <RegionCommonLinkAdrReqVerifyParams>
 8019dca:	4603      	mov	r3, r0
 8019dcc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8019dd0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019dd4:	2b07      	cmp	r3, #7
 8019dd6:	d10d      	bne.n	8019df4 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8019dd8:	4b11      	ldr	r3, [pc, #68]	; (8019e20 <RegionEU868LinkAdrReq+0x240>)
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019de0:	220c      	movs	r2, #12
 8019de2:	2100      	movs	r1, #0
 8019de4:	4618      	mov	r0, r3
 8019de6:	f000 fba1 	bl	801a52c <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8019dea:	4b0d      	ldr	r3, [pc, #52]	; (8019e20 <RegionEU868LinkAdrReq+0x240>)
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019df0:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8019df4:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8019df8:	68bb      	ldr	r3, [r7, #8]
 8019dfa:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8019dfc:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8019e04:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8019e08:	683b      	ldr	r3, [r7, #0]
 8019e0a:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8019e0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019e0e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019e12:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8019e14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8019e18:	4618      	mov	r0, r3
 8019e1a:	374c      	adds	r7, #76	; 0x4c
 8019e1c:	46bd      	mov	sp, r7
 8019e1e:	bd90      	pop	{r4, r7, pc}
 8019e20:	200022b8 	.word	0x200022b8

08019e24 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8019e24:	b580      	push	{r7, lr}
 8019e26:	b084      	sub	sp, #16
 8019e28:	af00      	add	r7, sp, #0
 8019e2a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8019e2c:	2307      	movs	r3, #7
 8019e2e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019e30:	2300      	movs	r3, #0
 8019e32:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	685b      	ldr	r3, [r3, #4]
 8019e38:	f107 020e 	add.w	r2, r7, #14
 8019e3c:	4611      	mov	r1, r2
 8019e3e:	4618      	mov	r0, r3
 8019e40:	f7ff f8de 	bl	8019000 <VerifyRfFreq>
 8019e44:	4603      	mov	r3, r0
 8019e46:	f083 0301 	eor.w	r3, r3, #1
 8019e4a:	b2db      	uxtb	r3, r3
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d003      	beq.n	8019e58 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8019e50:	7bfb      	ldrb	r3, [r7, #15]
 8019e52:	f023 0301 	bic.w	r3, r3, #1
 8019e56:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	f993 3000 	ldrsb.w	r3, [r3]
 8019e5e:	2207      	movs	r2, #7
 8019e60:	2100      	movs	r1, #0
 8019e62:	4618      	mov	r0, r3
 8019e64:	f7fe fae7 	bl	8018436 <RegionCommonValueInRange>
 8019e68:	4603      	mov	r3, r0
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d103      	bne.n	8019e76 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8019e6e:	7bfb      	ldrb	r3, [r7, #15]
 8019e70:	f023 0302 	bic.w	r3, r3, #2
 8019e74:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019e7c:	2205      	movs	r2, #5
 8019e7e:	2100      	movs	r1, #0
 8019e80:	4618      	mov	r0, r3
 8019e82:	f7fe fad8 	bl	8018436 <RegionCommonValueInRange>
 8019e86:	4603      	mov	r3, r0
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d103      	bne.n	8019e94 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8019e8c:	7bfb      	ldrb	r3, [r7, #15]
 8019e8e:	f023 0304 	bic.w	r3, r3, #4
 8019e92:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8019e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8019e96:	4618      	mov	r0, r3
 8019e98:	3710      	adds	r7, #16
 8019e9a:	46bd      	mov	sp, r7
 8019e9c:	bd80      	pop	{r7, pc}
	...

08019ea0 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8019ea0:	b580      	push	{r7, lr}
 8019ea2:	b086      	sub	sp, #24
 8019ea4:	af00      	add	r7, sp, #0
 8019ea6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019ea8:	2303      	movs	r3, #3
 8019eaa:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	681b      	ldr	r3, [r3, #0]
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d114      	bne.n	8019ee0 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019ebc:	b2db      	uxtb	r3, r3
 8019ebe:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8019ec0:	f107 0308 	add.w	r3, r7, #8
 8019ec4:	4618      	mov	r0, r3
 8019ec6:	f000 f9f9 	bl	801a2bc <RegionEU868ChannelsRemove>
 8019eca:	4603      	mov	r3, r0
 8019ecc:	f083 0301 	eor.w	r3, r3, #1
 8019ed0:	b2db      	uxtb	r3, r3
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	d03b      	beq.n	8019f4e <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8019ed6:	7dfb      	ldrb	r3, [r7, #23]
 8019ed8:	f023 0303 	bic.w	r3, r3, #3
 8019edc:	75fb      	strb	r3, [r7, #23]
 8019ede:	e036      	b.n	8019f4e <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	681b      	ldr	r3, [r3, #0]
 8019ee4:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019eec:	b2db      	uxtb	r3, r3
 8019eee:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8019ef0:	f107 030c 	add.w	r3, r7, #12
 8019ef4:	4618      	mov	r0, r3
 8019ef6:	f000 f93f 	bl	801a178 <RegionEU868ChannelAdd>
 8019efa:	4603      	mov	r3, r0
 8019efc:	2b06      	cmp	r3, #6
 8019efe:	d820      	bhi.n	8019f42 <RegionEU868NewChannelReq+0xa2>
 8019f00:	a201      	add	r2, pc, #4	; (adr r2, 8019f08 <RegionEU868NewChannelReq+0x68>)
 8019f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019f06:	bf00      	nop
 8019f08:	08019f4d 	.word	0x08019f4d
 8019f0c:	08019f43 	.word	0x08019f43
 8019f10:	08019f43 	.word	0x08019f43
 8019f14:	08019f43 	.word	0x08019f43
 8019f18:	08019f25 	.word	0x08019f25
 8019f1c:	08019f2f 	.word	0x08019f2f
 8019f20:	08019f39 	.word	0x08019f39
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8019f24:	7dfb      	ldrb	r3, [r7, #23]
 8019f26:	f023 0301 	bic.w	r3, r3, #1
 8019f2a:	75fb      	strb	r3, [r7, #23]
                break;
 8019f2c:	e00f      	b.n	8019f4e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8019f2e:	7dfb      	ldrb	r3, [r7, #23]
 8019f30:	f023 0302 	bic.w	r3, r3, #2
 8019f34:	75fb      	strb	r3, [r7, #23]
                break;
 8019f36:	e00a      	b.n	8019f4e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8019f38:	7dfb      	ldrb	r3, [r7, #23]
 8019f3a:	f023 0303 	bic.w	r3, r3, #3
 8019f3e:	75fb      	strb	r3, [r7, #23]
                break;
 8019f40:	e005      	b.n	8019f4e <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8019f42:	7dfb      	ldrb	r3, [r7, #23]
 8019f44:	f023 0303 	bic.w	r3, r3, #3
 8019f48:	75fb      	strb	r3, [r7, #23]
                break;
 8019f4a:	e000      	b.n	8019f4e <RegionEU868NewChannelReq+0xae>
                break;
 8019f4c:	bf00      	nop
            }
        }
    }

    return status;
 8019f4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019f52:	4618      	mov	r0, r3
 8019f54:	3718      	adds	r7, #24
 8019f56:	46bd      	mov	sp, r7
 8019f58:	bd80      	pop	{r7, pc}
 8019f5a:	bf00      	nop

08019f5c <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8019f5c:	b480      	push	{r7}
 8019f5e:	b083      	sub	sp, #12
 8019f60:	af00      	add	r7, sp, #0
 8019f62:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8019f64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019f68:	4618      	mov	r0, r3
 8019f6a:	370c      	adds	r7, #12
 8019f6c:	46bd      	mov	sp, r7
 8019f6e:	bc80      	pop	{r7}
 8019f70:	4770      	bx	lr
	...

08019f74 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8019f74:	b580      	push	{r7, lr}
 8019f76:	b084      	sub	sp, #16
 8019f78:	af00      	add	r7, sp, #0
 8019f7a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019f7c:	2303      	movs	r3, #3
 8019f7e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019f80:	2300      	movs	r3, #0
 8019f82:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	685b      	ldr	r3, [r3, #4]
 8019f88:	f107 020e 	add.w	r2, r7, #14
 8019f8c:	4611      	mov	r1, r2
 8019f8e:	4618      	mov	r0, r3
 8019f90:	f7ff f836 	bl	8019000 <VerifyRfFreq>
 8019f94:	4603      	mov	r3, r0
 8019f96:	f083 0301 	eor.w	r3, r3, #1
 8019f9a:	b2db      	uxtb	r3, r3
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d003      	beq.n	8019fa8 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8019fa0:	7bfb      	ldrb	r3, [r7, #15]
 8019fa2:	f023 0301 	bic.w	r3, r3, #1
 8019fa6:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8019fa8:	4b13      	ldr	r3, [pc, #76]	; (8019ff8 <RegionEU868DlChannelReq+0x84>)
 8019faa:	681a      	ldr	r2, [r3, #0]
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	781b      	ldrb	r3, [r3, #0]
 8019fb0:	4619      	mov	r1, r3
 8019fb2:	460b      	mov	r3, r1
 8019fb4:	005b      	lsls	r3, r3, #1
 8019fb6:	440b      	add	r3, r1
 8019fb8:	009b      	lsls	r3, r3, #2
 8019fba:	4413      	add	r3, r2
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d103      	bne.n	8019fca <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8019fc2:	7bfb      	ldrb	r3, [r7, #15]
 8019fc4:	f023 0302 	bic.w	r3, r3, #2
 8019fc8:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8019fca:	7bfb      	ldrb	r3, [r7, #15]
 8019fcc:	2b03      	cmp	r3, #3
 8019fce:	d10d      	bne.n	8019fec <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8019fd0:	4b09      	ldr	r3, [pc, #36]	; (8019ff8 <RegionEU868DlChannelReq+0x84>)
 8019fd2:	6819      	ldr	r1, [r3, #0]
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	781b      	ldrb	r3, [r3, #0]
 8019fd8:	4618      	mov	r0, r3
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	685a      	ldr	r2, [r3, #4]
 8019fde:	4603      	mov	r3, r0
 8019fe0:	005b      	lsls	r3, r3, #1
 8019fe2:	4403      	add	r3, r0
 8019fe4:	009b      	lsls	r3, r3, #2
 8019fe6:	440b      	add	r3, r1
 8019fe8:	3304      	adds	r3, #4
 8019fea:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8019fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019ff0:	4618      	mov	r0, r3
 8019ff2:	3710      	adds	r7, #16
 8019ff4:	46bd      	mov	sp, r7
 8019ff6:	bd80      	pop	{r7, pc}
 8019ff8:	200022b8 	.word	0x200022b8

08019ffc <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8019ffc:	b480      	push	{r7}
 8019ffe:	b083      	sub	sp, #12
 801a000:	af00      	add	r7, sp, #0
 801a002:	4603      	mov	r3, r0
 801a004:	460a      	mov	r2, r1
 801a006:	71fb      	strb	r3, [r7, #7]
 801a008:	4613      	mov	r3, r2
 801a00a:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 801a00c:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 801a010:	4618      	mov	r0, r3
 801a012:	370c      	adds	r7, #12
 801a014:	46bd      	mov	sp, r7
 801a016:	bc80      	pop	{r7}
 801a018:	4770      	bx	lr
	...

0801a01c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801a01c:	b580      	push	{r7, lr}
 801a01e:	b09a      	sub	sp, #104	; 0x68
 801a020:	af02      	add	r7, sp, #8
 801a022:	60f8      	str	r0, [r7, #12]
 801a024:	60b9      	str	r1, [r7, #8]
 801a026:	607a      	str	r2, [r7, #4]
 801a028:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 801a02a:	2300      	movs	r3, #0
 801a02c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 801a030:	2300      	movs	r3, #0
 801a032:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801a036:	2300      	movs	r3, #0
 801a038:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a03a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a03e:	2200      	movs	r2, #0
 801a040:	601a      	str	r2, [r3, #0]
 801a042:	605a      	str	r2, [r3, #4]
 801a044:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801a046:	230c      	movs	r3, #12
 801a048:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 801a04c:	2307      	movs	r3, #7
 801a04e:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801a050:	4b47      	ldr	r3, [pc, #284]	; (801a170 <RegionEU868NextChannel+0x154>)
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801a058:	2201      	movs	r2, #1
 801a05a:	2100      	movs	r1, #0
 801a05c:	4618      	mov	r0, r3
 801a05e:	f7fe fa3b 	bl	80184d8 <RegionCommonCountChannels>
 801a062:	4603      	mov	r3, r0
 801a064:	2b00      	cmp	r3, #0
 801a066:	d10a      	bne.n	801a07e <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801a068:	4b41      	ldr	r3, [pc, #260]	; (801a170 <RegionEU868NextChannel+0x154>)
 801a06a:	681b      	ldr	r3, [r3, #0]
 801a06c:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 801a070:	4b3f      	ldr	r3, [pc, #252]	; (801a170 <RegionEU868NextChannel+0x154>)
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	f042 0207 	orr.w	r2, r2, #7
 801a078:	b292      	uxth	r2, r2
 801a07a:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801a07e:	68fb      	ldr	r3, [r7, #12]
 801a080:	7a5b      	ldrb	r3, [r3, #9]
 801a082:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801a084:	68fb      	ldr	r3, [r7, #12]
 801a086:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801a08a:	b2db      	uxtb	r3, r3
 801a08c:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801a08e:	4b38      	ldr	r3, [pc, #224]	; (801a170 <RegionEU868NextChannel+0x154>)
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801a096:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801a098:	4b35      	ldr	r3, [pc, #212]	; (801a170 <RegionEU868NextChannel+0x154>)
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 801a09e:	4b35      	ldr	r3, [pc, #212]	; (801a174 <RegionEU868NextChannel+0x158>)
 801a0a0:	681b      	ldr	r3, [r3, #0]
 801a0a2:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 801a0a4:	2310      	movs	r3, #16
 801a0a6:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 801a0a8:	f107 0312 	add.w	r3, r7, #18
 801a0ac:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801a0ae:	68fb      	ldr	r3, [r7, #12]
 801a0b0:	681b      	ldr	r3, [r3, #0]
 801a0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801a0b4:	68fb      	ldr	r3, [r7, #12]
 801a0b6:	685b      	ldr	r3, [r3, #4]
 801a0b8:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801a0ba:	68fb      	ldr	r3, [r7, #12]
 801a0bc:	7a9b      	ldrb	r3, [r3, #10]
 801a0be:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801a0c2:	2306      	movs	r3, #6
 801a0c4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801a0c8:	68fa      	ldr	r2, [r7, #12]
 801a0ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a0ce:	320c      	adds	r2, #12
 801a0d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a0d4:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801a0d8:	68fb      	ldr	r3, [r7, #12]
 801a0da:	7d1b      	ldrb	r3, [r3, #20]
 801a0dc:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801a0e0:	68fb      	ldr	r3, [r7, #12]
 801a0e2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801a0e6:	68fb      	ldr	r3, [r7, #12]
 801a0e8:	8adb      	ldrh	r3, [r3, #22]
 801a0ea:	4619      	mov	r1, r3
 801a0ec:	4610      	mov	r0, r2
 801a0ee:	f7fe fffd 	bl	80190ec <GetTimeOnAir>
 801a0f2:	4603      	mov	r3, r0
 801a0f4:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801a0f6:	f107 0314 	add.w	r3, r7, #20
 801a0fa:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801a0fc:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 801a100:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801a104:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	9301      	str	r3, [sp, #4]
 801a10c:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 801a110:	9300      	str	r3, [sp, #0]
 801a112:	460b      	mov	r3, r1
 801a114:	6839      	ldr	r1, [r7, #0]
 801a116:	f7fe fe55 	bl	8018dc4 <RegionCommonIdentifyChannels>
 801a11a:	4603      	mov	r3, r0
 801a11c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801a120:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801a124:	2b00      	cmp	r3, #0
 801a126:	d10e      	bne.n	801a146 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801a128:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 801a12c:	3b01      	subs	r3, #1
 801a12e:	4619      	mov	r1, r3
 801a130:	2000      	movs	r0, #0
 801a132:	f000 f9a9 	bl	801a488 <randr>
 801a136:	4603      	mov	r3, r0
 801a138:	3360      	adds	r3, #96	; 0x60
 801a13a:	443b      	add	r3, r7
 801a13c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 801a140:	68bb      	ldr	r3, [r7, #8]
 801a142:	701a      	strb	r2, [r3, #0]
 801a144:	e00e      	b.n	801a164 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801a146:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801a14a:	2b0c      	cmp	r3, #12
 801a14c:	d10a      	bne.n	801a164 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801a14e:	4b08      	ldr	r3, [pc, #32]	; (801a170 <RegionEU868NextChannel+0x154>)
 801a150:	681b      	ldr	r3, [r3, #0]
 801a152:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 801a156:	4b06      	ldr	r3, [pc, #24]	; (801a170 <RegionEU868NextChannel+0x154>)
 801a158:	681b      	ldr	r3, [r3, #0]
 801a15a:	f042 0207 	orr.w	r2, r2, #7
 801a15e:	b292      	uxth	r2, r2
 801a160:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 801a164:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801a168:	4618      	mov	r0, r3
 801a16a:	3760      	adds	r7, #96	; 0x60
 801a16c:	46bd      	mov	sp, r7
 801a16e:	bd80      	pop	{r7, pc}
 801a170:	200022b8 	.word	0x200022b8
 801a174:	200022b4 	.word	0x200022b4

0801a178 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 801a178:	b580      	push	{r7, lr}
 801a17a:	b084      	sub	sp, #16
 801a17c:	af00      	add	r7, sp, #0
 801a17e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801a180:	2300      	movs	r3, #0
 801a182:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 801a184:	2300      	movs	r3, #0
 801a186:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 801a188:	2300      	movs	r3, #0
 801a18a:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	791b      	ldrb	r3, [r3, #4]
 801a190:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801a192:	7b7b      	ldrb	r3, [r7, #13]
 801a194:	2b02      	cmp	r3, #2
 801a196:	d801      	bhi.n	801a19c <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801a198:	2306      	movs	r3, #6
 801a19a:	e089      	b.n	801a2b0 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 801a19c:	7b7b      	ldrb	r3, [r7, #13]
 801a19e:	2b0f      	cmp	r3, #15
 801a1a0:	d901      	bls.n	801a1a6 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801a1a2:	2303      	movs	r3, #3
 801a1a4:	e084      	b.n	801a2b0 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	7a1b      	ldrb	r3, [r3, #8]
 801a1ac:	f343 0303 	sbfx	r3, r3, #0, #4
 801a1b0:	b25b      	sxtb	r3, r3
 801a1b2:	2207      	movs	r2, #7
 801a1b4:	2100      	movs	r1, #0
 801a1b6:	4618      	mov	r0, r3
 801a1b8:	f7fe f93d 	bl	8018436 <RegionCommonValueInRange>
 801a1bc:	4603      	mov	r3, r0
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d101      	bne.n	801a1c6 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801a1c2:	2301      	movs	r3, #1
 801a1c4:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	7a1b      	ldrb	r3, [r3, #8]
 801a1cc:	f343 1303 	sbfx	r3, r3, #4, #4
 801a1d0:	b25b      	sxtb	r3, r3
 801a1d2:	2207      	movs	r2, #7
 801a1d4:	2100      	movs	r1, #0
 801a1d6:	4618      	mov	r0, r3
 801a1d8:	f7fe f92d 	bl	8018436 <RegionCommonValueInRange>
 801a1dc:	4603      	mov	r3, r0
 801a1de:	2b00      	cmp	r3, #0
 801a1e0:	d101      	bne.n	801a1e6 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801a1e2:	2301      	movs	r3, #1
 801a1e4:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	7a1b      	ldrb	r3, [r3, #8]
 801a1ec:	f343 0303 	sbfx	r3, r3, #0, #4
 801a1f0:	b25a      	sxtb	r2, r3
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	7a1b      	ldrb	r3, [r3, #8]
 801a1f8:	f343 1303 	sbfx	r3, r3, #4, #4
 801a1fc:	b25b      	sxtb	r3, r3
 801a1fe:	429a      	cmp	r2, r3
 801a200:	dd01      	ble.n	801a206 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801a202:	2301      	movs	r3, #1
 801a204:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801a206:	7bbb      	ldrb	r3, [r7, #14]
 801a208:	f083 0301 	eor.w	r3, r3, #1
 801a20c:	b2db      	uxtb	r3, r3
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d010      	beq.n	801a234 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	681b      	ldr	r3, [r3, #0]
 801a218:	f107 020c 	add.w	r2, r7, #12
 801a21c:	4611      	mov	r1, r2
 801a21e:	4618      	mov	r0, r3
 801a220:	f7fe feee 	bl	8019000 <VerifyRfFreq>
 801a224:	4603      	mov	r3, r0
 801a226:	f083 0301 	eor.w	r3, r3, #1
 801a22a:	b2db      	uxtb	r3, r3
 801a22c:	2b00      	cmp	r3, #0
 801a22e:	d001      	beq.n	801a234 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 801a230:	2301      	movs	r3, #1
 801a232:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801a234:	7bfb      	ldrb	r3, [r7, #15]
 801a236:	2b00      	cmp	r3, #0
 801a238:	d004      	beq.n	801a244 <RegionEU868ChannelAdd+0xcc>
 801a23a:	7bbb      	ldrb	r3, [r7, #14]
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d001      	beq.n	801a244 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801a240:	2306      	movs	r3, #6
 801a242:	e035      	b.n	801a2b0 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 801a244:	7bfb      	ldrb	r3, [r7, #15]
 801a246:	2b00      	cmp	r3, #0
 801a248:	d001      	beq.n	801a24e <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801a24a:	2305      	movs	r3, #5
 801a24c:	e030      	b.n	801a2b0 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 801a24e:	7bbb      	ldrb	r3, [r7, #14]
 801a250:	2b00      	cmp	r3, #0
 801a252:	d001      	beq.n	801a258 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801a254:	2304      	movs	r3, #4
 801a256:	e02b      	b.n	801a2b0 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 801a258:	4b17      	ldr	r3, [pc, #92]	; (801a2b8 <RegionEU868ChannelAdd+0x140>)
 801a25a:	6819      	ldr	r1, [r3, #0]
 801a25c:	7b7a      	ldrb	r2, [r7, #13]
 801a25e:	4613      	mov	r3, r2
 801a260:	005b      	lsls	r3, r3, #1
 801a262:	4413      	add	r3, r2
 801a264:	009b      	lsls	r3, r3, #2
 801a266:	18c8      	adds	r0, r1, r3
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	220c      	movs	r2, #12
 801a26e:	4619      	mov	r1, r3
 801a270:	f000 f921 	bl	801a4b6 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 801a274:	4b10      	ldr	r3, [pc, #64]	; (801a2b8 <RegionEU868ChannelAdd+0x140>)
 801a276:	6819      	ldr	r1, [r3, #0]
 801a278:	7b7a      	ldrb	r2, [r7, #13]
 801a27a:	7b38      	ldrb	r0, [r7, #12]
 801a27c:	4613      	mov	r3, r2
 801a27e:	005b      	lsls	r3, r3, #1
 801a280:	4413      	add	r3, r2
 801a282:	009b      	lsls	r3, r3, #2
 801a284:	440b      	add	r3, r1
 801a286:	3309      	adds	r3, #9
 801a288:	4602      	mov	r2, r0
 801a28a:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 801a28c:	4b0a      	ldr	r3, [pc, #40]	; (801a2b8 <RegionEU868ChannelAdd+0x140>)
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 801a294:	b21a      	sxth	r2, r3
 801a296:	7b7b      	ldrb	r3, [r7, #13]
 801a298:	2101      	movs	r1, #1
 801a29a:	fa01 f303 	lsl.w	r3, r1, r3
 801a29e:	b21b      	sxth	r3, r3
 801a2a0:	4313      	orrs	r3, r2
 801a2a2:	b21a      	sxth	r2, r3
 801a2a4:	4b04      	ldr	r3, [pc, #16]	; (801a2b8 <RegionEU868ChannelAdd+0x140>)
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	b292      	uxth	r2, r2
 801a2aa:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 801a2ae:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801a2b0:	4618      	mov	r0, r3
 801a2b2:	3710      	adds	r7, #16
 801a2b4:	46bd      	mov	sp, r7
 801a2b6:	bd80      	pop	{r7, pc}
 801a2b8:	200022b8 	.word	0x200022b8

0801a2bc <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 801a2bc:	b580      	push	{r7, lr}
 801a2be:	b086      	sub	sp, #24
 801a2c0:	af00      	add	r7, sp, #0
 801a2c2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	781b      	ldrb	r3, [r3, #0]
 801a2c8:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801a2ca:	7dfb      	ldrb	r3, [r7, #23]
 801a2cc:	2b02      	cmp	r3, #2
 801a2ce:	d801      	bhi.n	801a2d4 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 801a2d0:	2300      	movs	r3, #0
 801a2d2:	e016      	b.n	801a302 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801a2d4:	4b0d      	ldr	r3, [pc, #52]	; (801a30c <RegionEU868ChannelsRemove+0x50>)
 801a2d6:	6819      	ldr	r1, [r3, #0]
 801a2d8:	7dfa      	ldrb	r2, [r7, #23]
 801a2da:	4613      	mov	r3, r2
 801a2dc:	005b      	lsls	r3, r3, #1
 801a2de:	4413      	add	r3, r2
 801a2e0:	009b      	lsls	r3, r3, #2
 801a2e2:	440b      	add	r3, r1
 801a2e4:	461a      	mov	r2, r3
 801a2e6:	2300      	movs	r3, #0
 801a2e8:	6013      	str	r3, [r2, #0]
 801a2ea:	6053      	str	r3, [r2, #4]
 801a2ec:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801a2ee:	4b07      	ldr	r3, [pc, #28]	; (801a30c <RegionEU868ChannelsRemove+0x50>)
 801a2f0:	681b      	ldr	r3, [r3, #0]
 801a2f2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801a2f6:	7df9      	ldrb	r1, [r7, #23]
 801a2f8:	2210      	movs	r2, #16
 801a2fa:	4618      	mov	r0, r3
 801a2fc:	f7fe f8b8 	bl	8018470 <RegionCommonChanDisable>
 801a300:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 801a302:	4618      	mov	r0, r3
 801a304:	3718      	adds	r7, #24
 801a306:	46bd      	mov	sp, r7
 801a308:	bd80      	pop	{r7, pc}
 801a30a:	bf00      	nop
 801a30c:	200022b8 	.word	0x200022b8

0801a310 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801a310:	b590      	push	{r4, r7, lr}
 801a312:	b085      	sub	sp, #20
 801a314:	af00      	add	r7, sp, #0
 801a316:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801a31e:	4b20      	ldr	r3, [pc, #128]	; (801a3a0 <RegionEU868SetContinuousWave+0x90>)
 801a320:	681a      	ldr	r2, [r3, #0]
 801a322:	4b20      	ldr	r3, [pc, #128]	; (801a3a4 <RegionEU868SetContinuousWave+0x94>)
 801a324:	6819      	ldr	r1, [r3, #0]
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	781b      	ldrb	r3, [r3, #0]
 801a32a:	461c      	mov	r4, r3
 801a32c:	4623      	mov	r3, r4
 801a32e:	005b      	lsls	r3, r3, #1
 801a330:	4423      	add	r3, r4
 801a332:	009b      	lsls	r3, r3, #2
 801a334:	440b      	add	r3, r1
 801a336:	3309      	adds	r3, #9
 801a338:	781b      	ldrb	r3, [r3, #0]
 801a33a:	4619      	mov	r1, r3
 801a33c:	460b      	mov	r3, r1
 801a33e:	005b      	lsls	r3, r3, #1
 801a340:	440b      	add	r3, r1
 801a342:	00db      	lsls	r3, r3, #3
 801a344:	4413      	add	r3, r2
 801a346:	3302      	adds	r3, #2
 801a348:	f993 3000 	ldrsb.w	r3, [r3]
 801a34c:	4619      	mov	r1, r3
 801a34e:	f7fe fdd9 	bl	8018f04 <RegionCommonLimitTxPower>
 801a352:	4603      	mov	r3, r0
 801a354:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801a356:	2300      	movs	r3, #0
 801a358:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801a35a:	4b12      	ldr	r3, [pc, #72]	; (801a3a4 <RegionEU868SetContinuousWave+0x94>)
 801a35c:	681a      	ldr	r2, [r3, #0]
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	781b      	ldrb	r3, [r3, #0]
 801a362:	4619      	mov	r1, r3
 801a364:	460b      	mov	r3, r1
 801a366:	005b      	lsls	r3, r3, #1
 801a368:	440b      	add	r3, r1
 801a36a:	009b      	lsls	r3, r3, #2
 801a36c:	4413      	add	r3, r2
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	6859      	ldr	r1, [r3, #4]
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	689a      	ldr	r2, [r3, #8]
 801a37a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a37e:	4618      	mov	r0, r3
 801a380:	f7fe fbd2 	bl	8018b28 <RegionCommonComputeTxPower>
 801a384:	4603      	mov	r3, r0
 801a386:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801a388:	4b07      	ldr	r3, [pc, #28]	; (801a3a8 <RegionEU868SetContinuousWave+0x98>)
 801a38a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a38c:	687a      	ldr	r2, [r7, #4]
 801a38e:	8992      	ldrh	r2, [r2, #12]
 801a390:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801a394:	68b8      	ldr	r0, [r7, #8]
 801a396:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 801a398:	bf00      	nop
 801a39a:	3714      	adds	r7, #20
 801a39c:	46bd      	mov	sp, r7
 801a39e:	bd90      	pop	{r4, r7, pc}
 801a3a0:	200022b4 	.word	0x200022b4
 801a3a4:	200022b8 	.word	0x200022b8
 801a3a8:	0801fbe4 	.word	0x0801fbe4

0801a3ac <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801a3ac:	b480      	push	{r7}
 801a3ae:	b085      	sub	sp, #20
 801a3b0:	af00      	add	r7, sp, #0
 801a3b2:	4603      	mov	r3, r0
 801a3b4:	71fb      	strb	r3, [r7, #7]
 801a3b6:	460b      	mov	r3, r1
 801a3b8:	71bb      	strb	r3, [r7, #6]
 801a3ba:	4613      	mov	r3, r2
 801a3bc:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801a3be:	79ba      	ldrb	r2, [r7, #6]
 801a3c0:	797b      	ldrb	r3, [r7, #5]
 801a3c2:	1ad3      	subs	r3, r2, r3
 801a3c4:	b2db      	uxtb	r3, r3
 801a3c6:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801a3c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	da01      	bge.n	801a3d4 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 801a3d0:	2300      	movs	r3, #0
 801a3d2:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801a3d4:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 801a3d6:	4618      	mov	r0, r3
 801a3d8:	3714      	adds	r7, #20
 801a3da:	46bd      	mov	sp, r7
 801a3dc:	bc80      	pop	{r7}
 801a3de:	4770      	bx	lr

0801a3e0 <RegionEU868RxBeaconSetup>:

void RegionEU868RxBeaconSetup( RxBeaconSetup_t* rxBeaconSetup, uint8_t* outDr )
{
 801a3e0:	b580      	push	{r7, lr}
 801a3e2:	b088      	sub	sp, #32
 801a3e4:	af00      	add	r7, sp, #0
 801a3e6:	6078      	str	r0, [r7, #4]
 801a3e8:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RegionCommonRxBeaconSetupParams_t regionCommonRxBeaconSetup;

    regionCommonRxBeaconSetup.Datarates = DataratesEU868;
 801a3ea:	4b0e      	ldr	r3, [pc, #56]	; (801a424 <RegionEU868RxBeaconSetup+0x44>)
 801a3ec:	60fb      	str	r3, [r7, #12]
    regionCommonRxBeaconSetup.Frequency = rxBeaconSetup->Frequency;
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	689b      	ldr	r3, [r3, #8]
 801a3f2:	613b      	str	r3, [r7, #16]
    regionCommonRxBeaconSetup.BeaconSize = EU868_BEACON_SIZE;
 801a3f4:	2311      	movs	r3, #17
 801a3f6:	753b      	strb	r3, [r7, #20]
    regionCommonRxBeaconSetup.BeaconDatarate = EU868_BEACON_CHANNEL_DR;
 801a3f8:	2303      	movs	r3, #3
 801a3fa:	757b      	strb	r3, [r7, #21]
    regionCommonRxBeaconSetup.BeaconChannelBW = EU868_BEACON_CHANNEL_BW;
 801a3fc:	2300      	movs	r3, #0
 801a3fe:	75bb      	strb	r3, [r7, #22]
    regionCommonRxBeaconSetup.RxTime = rxBeaconSetup->RxTime;
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	685b      	ldr	r3, [r3, #4]
 801a404:	61bb      	str	r3, [r7, #24]
    regionCommonRxBeaconSetup.SymbolTimeout = rxBeaconSetup->SymbolTimeout;
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	881b      	ldrh	r3, [r3, #0]
 801a40a:	83bb      	strh	r3, [r7, #28]

    RegionCommonRxBeaconSetup( &regionCommonRxBeaconSetup );
 801a40c:	f107 030c 	add.w	r3, r7, #12
 801a410:	4618      	mov	r0, r3
 801a412:	f7fe fbbb 	bl	8018b8c <RegionCommonRxBeaconSetup>

    // Store downlink datarate
    *outDr = EU868_BEACON_CHANNEL_DR;
 801a416:	683b      	ldr	r3, [r7, #0]
 801a418:	2203      	movs	r2, #3
 801a41a:	701a      	strb	r2, [r3, #0]
#endif /* REGION_EU868 */
}
 801a41c:	bf00      	nop
 801a41e:	3720      	adds	r7, #32
 801a420:	46bd      	mov	sp, r7
 801a422:	bd80      	pop	{r7, pc}
 801a424:	0801fbac 	.word	0x0801fbac

0801a428 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 801a428:	b480      	push	{r7}
 801a42a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801a42c:	4b0d      	ldr	r3, [pc, #52]	; (801a464 <rand1+0x3c>)
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	4a0d      	ldr	r2, [pc, #52]	; (801a468 <rand1+0x40>)
 801a432:	fb02 f303 	mul.w	r3, r2, r3
 801a436:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a43a:	3339      	adds	r3, #57	; 0x39
 801a43c:	4a09      	ldr	r2, [pc, #36]	; (801a464 <rand1+0x3c>)
 801a43e:	6013      	str	r3, [r2, #0]
 801a440:	4b08      	ldr	r3, [pc, #32]	; (801a464 <rand1+0x3c>)
 801a442:	681a      	ldr	r2, [r3, #0]
 801a444:	2303      	movs	r3, #3
 801a446:	fba3 1302 	umull	r1, r3, r3, r2
 801a44a:	1ad1      	subs	r1, r2, r3
 801a44c:	0849      	lsrs	r1, r1, #1
 801a44e:	440b      	add	r3, r1
 801a450:	0f99      	lsrs	r1, r3, #30
 801a452:	460b      	mov	r3, r1
 801a454:	07db      	lsls	r3, r3, #31
 801a456:	1a5b      	subs	r3, r3, r1
 801a458:	1ad1      	subs	r1, r2, r3
 801a45a:	460b      	mov	r3, r1
}
 801a45c:	4618      	mov	r0, r3
 801a45e:	46bd      	mov	sp, r7
 801a460:	bc80      	pop	{r7}
 801a462:	4770      	bx	lr
 801a464:	2000013c 	.word	0x2000013c
 801a468:	41c64e6d 	.word	0x41c64e6d

0801a46c <srand1>:

void srand1( uint32_t seed )
{
 801a46c:	b480      	push	{r7}
 801a46e:	b083      	sub	sp, #12
 801a470:	af00      	add	r7, sp, #0
 801a472:	6078      	str	r0, [r7, #4]
    next = seed;
 801a474:	4a03      	ldr	r2, [pc, #12]	; (801a484 <srand1+0x18>)
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	6013      	str	r3, [r2, #0]
}
 801a47a:	bf00      	nop
 801a47c:	370c      	adds	r7, #12
 801a47e:	46bd      	mov	sp, r7
 801a480:	bc80      	pop	{r7}
 801a482:	4770      	bx	lr
 801a484:	2000013c 	.word	0x2000013c

0801a488 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801a488:	b580      	push	{r7, lr}
 801a48a:	b082      	sub	sp, #8
 801a48c:	af00      	add	r7, sp, #0
 801a48e:	6078      	str	r0, [r7, #4]
 801a490:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801a492:	f7ff ffc9 	bl	801a428 <rand1>
 801a496:	4602      	mov	r2, r0
 801a498:	6839      	ldr	r1, [r7, #0]
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	1acb      	subs	r3, r1, r3
 801a49e:	3301      	adds	r3, #1
 801a4a0:	fb92 f1f3 	sdiv	r1, r2, r3
 801a4a4:	fb01 f303 	mul.w	r3, r1, r3
 801a4a8:	1ad2      	subs	r2, r2, r3
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	4413      	add	r3, r2
}
 801a4ae:	4618      	mov	r0, r3
 801a4b0:	3708      	adds	r7, #8
 801a4b2:	46bd      	mov	sp, r7
 801a4b4:	bd80      	pop	{r7, pc}

0801a4b6 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801a4b6:	b480      	push	{r7}
 801a4b8:	b085      	sub	sp, #20
 801a4ba:	af00      	add	r7, sp, #0
 801a4bc:	60f8      	str	r0, [r7, #12]
 801a4be:	60b9      	str	r1, [r7, #8]
 801a4c0:	4613      	mov	r3, r2
 801a4c2:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801a4c4:	e007      	b.n	801a4d6 <memcpy1+0x20>
    {
        *dst++ = *src++;
 801a4c6:	68ba      	ldr	r2, [r7, #8]
 801a4c8:	1c53      	adds	r3, r2, #1
 801a4ca:	60bb      	str	r3, [r7, #8]
 801a4cc:	68fb      	ldr	r3, [r7, #12]
 801a4ce:	1c59      	adds	r1, r3, #1
 801a4d0:	60f9      	str	r1, [r7, #12]
 801a4d2:	7812      	ldrb	r2, [r2, #0]
 801a4d4:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801a4d6:	88fb      	ldrh	r3, [r7, #6]
 801a4d8:	1e5a      	subs	r2, r3, #1
 801a4da:	80fa      	strh	r2, [r7, #6]
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	d1f2      	bne.n	801a4c6 <memcpy1+0x10>
    }
}
 801a4e0:	bf00      	nop
 801a4e2:	bf00      	nop
 801a4e4:	3714      	adds	r7, #20
 801a4e6:	46bd      	mov	sp, r7
 801a4e8:	bc80      	pop	{r7}
 801a4ea:	4770      	bx	lr

0801a4ec <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801a4ec:	b480      	push	{r7}
 801a4ee:	b085      	sub	sp, #20
 801a4f0:	af00      	add	r7, sp, #0
 801a4f2:	60f8      	str	r0, [r7, #12]
 801a4f4:	60b9      	str	r1, [r7, #8]
 801a4f6:	4613      	mov	r3, r2
 801a4f8:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801a4fa:	88fb      	ldrh	r3, [r7, #6]
 801a4fc:	3b01      	subs	r3, #1
 801a4fe:	68fa      	ldr	r2, [r7, #12]
 801a500:	4413      	add	r3, r2
 801a502:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801a504:	e007      	b.n	801a516 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801a506:	68ba      	ldr	r2, [r7, #8]
 801a508:	1c53      	adds	r3, r2, #1
 801a50a:	60bb      	str	r3, [r7, #8]
 801a50c:	68fb      	ldr	r3, [r7, #12]
 801a50e:	1e59      	subs	r1, r3, #1
 801a510:	60f9      	str	r1, [r7, #12]
 801a512:	7812      	ldrb	r2, [r2, #0]
 801a514:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801a516:	88fb      	ldrh	r3, [r7, #6]
 801a518:	1e5a      	subs	r2, r3, #1
 801a51a:	80fa      	strh	r2, [r7, #6]
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	d1f2      	bne.n	801a506 <memcpyr+0x1a>
    }
}
 801a520:	bf00      	nop
 801a522:	bf00      	nop
 801a524:	3714      	adds	r7, #20
 801a526:	46bd      	mov	sp, r7
 801a528:	bc80      	pop	{r7}
 801a52a:	4770      	bx	lr

0801a52c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801a52c:	b480      	push	{r7}
 801a52e:	b083      	sub	sp, #12
 801a530:	af00      	add	r7, sp, #0
 801a532:	6078      	str	r0, [r7, #4]
 801a534:	460b      	mov	r3, r1
 801a536:	70fb      	strb	r3, [r7, #3]
 801a538:	4613      	mov	r3, r2
 801a53a:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801a53c:	e004      	b.n	801a548 <memset1+0x1c>
    {
        *dst++ = value;
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	1c5a      	adds	r2, r3, #1
 801a542:	607a      	str	r2, [r7, #4]
 801a544:	78fa      	ldrb	r2, [r7, #3]
 801a546:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801a548:	883b      	ldrh	r3, [r7, #0]
 801a54a:	1e5a      	subs	r2, r3, #1
 801a54c:	803a      	strh	r2, [r7, #0]
 801a54e:	2b00      	cmp	r3, #0
 801a550:	d1f5      	bne.n	801a53e <memset1+0x12>
    }
}
 801a552:	bf00      	nop
 801a554:	bf00      	nop
 801a556:	370c      	adds	r7, #12
 801a558:	46bd      	mov	sp, r7
 801a55a:	bc80      	pop	{r7}
 801a55c:	4770      	bx	lr
	...

0801a560 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801a560:	b480      	push	{r7}
 801a562:	b085      	sub	sp, #20
 801a564:	af00      	add	r7, sp, #0
 801a566:	6078      	str	r0, [r7, #4]
 801a568:	460b      	mov	r3, r1
 801a56a:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801a56c:	f04f 33ff 	mov.w	r3, #4294967295
 801a570:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	2b00      	cmp	r3, #0
 801a576:	d101      	bne.n	801a57c <Crc32+0x1c>
    {
        return 0;
 801a578:	2300      	movs	r3, #0
 801a57a:	e026      	b.n	801a5ca <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 801a57c:	2300      	movs	r3, #0
 801a57e:	817b      	strh	r3, [r7, #10]
 801a580:	e01d      	b.n	801a5be <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801a582:	897b      	ldrh	r3, [r7, #10]
 801a584:	687a      	ldr	r2, [r7, #4]
 801a586:	4413      	add	r3, r2
 801a588:	781b      	ldrb	r3, [r3, #0]
 801a58a:	461a      	mov	r2, r3
 801a58c:	68fb      	ldr	r3, [r7, #12]
 801a58e:	4053      	eors	r3, r2
 801a590:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801a592:	2300      	movs	r3, #0
 801a594:	813b      	strh	r3, [r7, #8]
 801a596:	e00c      	b.n	801a5b2 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801a598:	68fb      	ldr	r3, [r7, #12]
 801a59a:	085a      	lsrs	r2, r3, #1
 801a59c:	68fb      	ldr	r3, [r7, #12]
 801a59e:	f003 0301 	and.w	r3, r3, #1
 801a5a2:	425b      	negs	r3, r3
 801a5a4:	490b      	ldr	r1, [pc, #44]	; (801a5d4 <Crc32+0x74>)
 801a5a6:	400b      	ands	r3, r1
 801a5a8:	4053      	eors	r3, r2
 801a5aa:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801a5ac:	893b      	ldrh	r3, [r7, #8]
 801a5ae:	3301      	adds	r3, #1
 801a5b0:	813b      	strh	r3, [r7, #8]
 801a5b2:	893b      	ldrh	r3, [r7, #8]
 801a5b4:	2b07      	cmp	r3, #7
 801a5b6:	d9ef      	bls.n	801a598 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 801a5b8:	897b      	ldrh	r3, [r7, #10]
 801a5ba:	3301      	adds	r3, #1
 801a5bc:	817b      	strh	r3, [r7, #10]
 801a5be:	897a      	ldrh	r2, [r7, #10]
 801a5c0:	887b      	ldrh	r3, [r7, #2]
 801a5c2:	429a      	cmp	r2, r3
 801a5c4:	d3dd      	bcc.n	801a582 <Crc32+0x22>
        }
    }

    return ~crc;
 801a5c6:	68fb      	ldr	r3, [r7, #12]
 801a5c8:	43db      	mvns	r3, r3
}
 801a5ca:	4618      	mov	r0, r3
 801a5cc:	3714      	adds	r7, #20
 801a5ce:	46bd      	mov	sp, r7
 801a5d0:	bc80      	pop	{r7}
 801a5d2:	4770      	bx	lr
 801a5d4:	edb88320 	.word	0xedb88320

0801a5d8 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801a5d8:	b580      	push	{r7, lr}
 801a5da:	b084      	sub	sp, #16
 801a5dc:	af02      	add	r7, sp, #8
 801a5de:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 801a5e0:	4a24      	ldr	r2, [pc, #144]	; (801a674 <RadioInit+0x9c>)
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801a5e6:	4b24      	ldr	r3, [pc, #144]	; (801a678 <RadioInit+0xa0>)
 801a5e8:	2200      	movs	r2, #0
 801a5ea:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801a5ec:	4b22      	ldr	r3, [pc, #136]	; (801a678 <RadioInit+0xa0>)
 801a5ee:	2200      	movs	r2, #0
 801a5f0:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801a5f2:	4b21      	ldr	r3, [pc, #132]	; (801a678 <RadioInit+0xa0>)
 801a5f4:	2200      	movs	r2, #0
 801a5f6:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801a5f8:	4b1f      	ldr	r3, [pc, #124]	; (801a678 <RadioInit+0xa0>)
 801a5fa:	2200      	movs	r2, #0
 801a5fc:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 801a5fe:	481f      	ldr	r0, [pc, #124]	; (801a67c <RadioInit+0xa4>)
 801a600:	f001 ff88 	bl	801c514 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801a604:	4b1c      	ldr	r3, [pc, #112]	; (801a678 <RadioInit+0xa0>)
 801a606:	2200      	movs	r2, #0
 801a608:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801a60a:	4b1b      	ldr	r3, [pc, #108]	; (801a678 <RadioInit+0xa0>)
 801a60c:	2200      	movs	r2, #0
 801a60e:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 801a610:	f002 fa16 	bl	801ca40 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801a614:	2100      	movs	r1, #0
 801a616:	2000      	movs	r0, #0
 801a618:	f002 fdde 	bl	801d1d8 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801a61c:	2204      	movs	r2, #4
 801a61e:	2100      	movs	r1, #0
 801a620:	2001      	movs	r0, #1
 801a622:	f002 fb9b 	bl	801cd5c <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801a626:	2300      	movs	r3, #0
 801a628:	2200      	movs	r2, #0
 801a62a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a62e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801a632:	f002 facb 	bl	801cbcc <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 801a636:	f000 fe83 	bl	801b340 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801a63a:	2300      	movs	r3, #0
 801a63c:	9300      	str	r3, [sp, #0]
 801a63e:	4b10      	ldr	r3, [pc, #64]	; (801a680 <RadioInit+0xa8>)
 801a640:	2200      	movs	r2, #0
 801a642:	f04f 31ff 	mov.w	r1, #4294967295
 801a646:	480f      	ldr	r0, [pc, #60]	; (801a684 <RadioInit+0xac>)
 801a648:	f003 ffdc 	bl	801e604 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801a64c:	2300      	movs	r3, #0
 801a64e:	9300      	str	r3, [sp, #0]
 801a650:	4b0d      	ldr	r3, [pc, #52]	; (801a688 <RadioInit+0xb0>)
 801a652:	2200      	movs	r2, #0
 801a654:	f04f 31ff 	mov.w	r1, #4294967295
 801a658:	480c      	ldr	r0, [pc, #48]	; (801a68c <RadioInit+0xb4>)
 801a65a:	f003 ffd3 	bl	801e604 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801a65e:	4809      	ldr	r0, [pc, #36]	; (801a684 <RadioInit+0xac>)
 801a660:	f004 f874 	bl	801e74c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801a664:	4809      	ldr	r0, [pc, #36]	; (801a68c <RadioInit+0xb4>)
 801a666:	f004 f871 	bl	801e74c <UTIL_TIMER_Stop>
}
 801a66a:	bf00      	nop
 801a66c:	3708      	adds	r7, #8
 801a66e:	46bd      	mov	sp, r7
 801a670:	bd80      	pop	{r7, pc}
 801a672:	bf00      	nop
 801a674:	200023bc 	.word	0x200023bc
 801a678:	200023c0 	.word	0x200023c0
 801a67c:	0801b72d 	.word	0x0801b72d
 801a680:	0801b6b5 	.word	0x0801b6b5
 801a684:	2000241c 	.word	0x2000241c
 801a688:	0801b6c9 	.word	0x0801b6c9
 801a68c:	20002434 	.word	0x20002434

0801a690 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 801a690:	b580      	push	{r7, lr}
 801a692:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801a694:	f001 ff80 	bl	801c598 <SUBGRF_GetOperatingMode>
 801a698:	4603      	mov	r3, r0
 801a69a:	2b07      	cmp	r3, #7
 801a69c:	d00a      	beq.n	801a6b4 <RadioGetStatus+0x24>
 801a69e:	2b07      	cmp	r3, #7
 801a6a0:	dc0a      	bgt.n	801a6b8 <RadioGetStatus+0x28>
 801a6a2:	2b04      	cmp	r3, #4
 801a6a4:	d002      	beq.n	801a6ac <RadioGetStatus+0x1c>
 801a6a6:	2b05      	cmp	r3, #5
 801a6a8:	d002      	beq.n	801a6b0 <RadioGetStatus+0x20>
 801a6aa:	e005      	b.n	801a6b8 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801a6ac:	2302      	movs	r3, #2
 801a6ae:	e004      	b.n	801a6ba <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801a6b0:	2301      	movs	r3, #1
 801a6b2:	e002      	b.n	801a6ba <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801a6b4:	2303      	movs	r3, #3
 801a6b6:	e000      	b.n	801a6ba <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801a6b8:	2300      	movs	r3, #0
    }
}
 801a6ba:	4618      	mov	r0, r3
 801a6bc:	bd80      	pop	{r7, pc}
	...

0801a6c0 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801a6c0:	b580      	push	{r7, lr}
 801a6c2:	b082      	sub	sp, #8
 801a6c4:	af00      	add	r7, sp, #0
 801a6c6:	4603      	mov	r3, r0
 801a6c8:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801a6ca:	4a2a      	ldr	r2, [pc, #168]	; (801a774 <RadioSetModem+0xb4>)
 801a6cc:	79fb      	ldrb	r3, [r7, #7]
 801a6ce:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 801a6d0:	79fb      	ldrb	r3, [r7, #7]
 801a6d2:	4618      	mov	r0, r3
 801a6d4:	f003 f943 	bl	801d95e <RFW_SetRadioModem>
    switch( modem )
 801a6d8:	79fb      	ldrb	r3, [r7, #7]
 801a6da:	2b05      	cmp	r3, #5
 801a6dc:	d80e      	bhi.n	801a6fc <RadioSetModem+0x3c>
 801a6de:	a201      	add	r2, pc, #4	; (adr r2, 801a6e4 <RadioSetModem+0x24>)
 801a6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a6e4:	0801a70b 	.word	0x0801a70b
 801a6e8:	0801a719 	.word	0x0801a719
 801a6ec:	0801a6fd 	.word	0x0801a6fd
 801a6f0:	0801a73f 	.word	0x0801a73f
 801a6f4:	0801a74d 	.word	0x0801a74d
 801a6f8:	0801a75b 	.word	0x0801a75b
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801a6fc:	2003      	movs	r0, #3
 801a6fe:	f002 fb07 	bl	801cd10 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a702:	4b1c      	ldr	r3, [pc, #112]	; (801a774 <RadioSetModem+0xb4>)
 801a704:	2200      	movs	r2, #0
 801a706:	735a      	strb	r2, [r3, #13]
        break;
 801a708:	e02f      	b.n	801a76a <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801a70a:	2000      	movs	r0, #0
 801a70c:	f002 fb00 	bl	801cd10 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a710:	4b18      	ldr	r3, [pc, #96]	; (801a774 <RadioSetModem+0xb4>)
 801a712:	2200      	movs	r2, #0
 801a714:	735a      	strb	r2, [r3, #13]
        break;
 801a716:	e028      	b.n	801a76a <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801a718:	2001      	movs	r0, #1
 801a71a:	f002 faf9 	bl	801cd10 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801a71e:	4b15      	ldr	r3, [pc, #84]	; (801a774 <RadioSetModem+0xb4>)
 801a720:	7b5a      	ldrb	r2, [r3, #13]
 801a722:	4b14      	ldr	r3, [pc, #80]	; (801a774 <RadioSetModem+0xb4>)
 801a724:	7b1b      	ldrb	r3, [r3, #12]
 801a726:	429a      	cmp	r2, r3
 801a728:	d01e      	beq.n	801a768 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801a72a:	4b12      	ldr	r3, [pc, #72]	; (801a774 <RadioSetModem+0xb4>)
 801a72c:	7b1a      	ldrb	r2, [r3, #12]
 801a72e:	4b11      	ldr	r3, [pc, #68]	; (801a774 <RadioSetModem+0xb4>)
 801a730:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801a732:	4b10      	ldr	r3, [pc, #64]	; (801a774 <RadioSetModem+0xb4>)
 801a734:	7b5b      	ldrb	r3, [r3, #13]
 801a736:	4618      	mov	r0, r3
 801a738:	f000 ff86 	bl	801b648 <RadioSetPublicNetwork>
        }
        break;
 801a73c:	e014      	b.n	801a768 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801a73e:	2002      	movs	r0, #2
 801a740:	f002 fae6 	bl	801cd10 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a744:	4b0b      	ldr	r3, [pc, #44]	; (801a774 <RadioSetModem+0xb4>)
 801a746:	2200      	movs	r2, #0
 801a748:	735a      	strb	r2, [r3, #13]
        break;
 801a74a:	e00e      	b.n	801a76a <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801a74c:	2002      	movs	r0, #2
 801a74e:	f002 fadf 	bl	801cd10 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a752:	4b08      	ldr	r3, [pc, #32]	; (801a774 <RadioSetModem+0xb4>)
 801a754:	2200      	movs	r2, #0
 801a756:	735a      	strb	r2, [r3, #13]
        break;
 801a758:	e007      	b.n	801a76a <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801a75a:	2000      	movs	r0, #0
 801a75c:	f002 fad8 	bl	801cd10 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a760:	4b04      	ldr	r3, [pc, #16]	; (801a774 <RadioSetModem+0xb4>)
 801a762:	2200      	movs	r2, #0
 801a764:	735a      	strb	r2, [r3, #13]
        break;
 801a766:	e000      	b.n	801a76a <RadioSetModem+0xaa>
        break;
 801a768:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801a76a:	bf00      	nop
 801a76c:	3708      	adds	r7, #8
 801a76e:	46bd      	mov	sp, r7
 801a770:	bd80      	pop	{r7, pc}
 801a772:	bf00      	nop
 801a774:	200023c0 	.word	0x200023c0

0801a778 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801a778:	b580      	push	{r7, lr}
 801a77a:	b082      	sub	sp, #8
 801a77c:	af00      	add	r7, sp, #0
 801a77e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801a780:	6878      	ldr	r0, [r7, #4]
 801a782:	f002 fa7f 	bl	801cc84 <SUBGRF_SetRfFrequency>
}
 801a786:	bf00      	nop
 801a788:	3708      	adds	r7, #8
 801a78a:	46bd      	mov	sp, r7
 801a78c:	bd80      	pop	{r7, pc}

0801a78e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801a78e:	b580      	push	{r7, lr}
 801a790:	b090      	sub	sp, #64	; 0x40
 801a792:	af0a      	add	r7, sp, #40	; 0x28
 801a794:	60f8      	str	r0, [r7, #12]
 801a796:	60b9      	str	r1, [r7, #8]
 801a798:	603b      	str	r3, [r7, #0]
 801a79a:	4613      	mov	r3, r2
 801a79c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801a79e:	2301      	movs	r3, #1
 801a7a0:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801a7a2:	2300      	movs	r3, #0
 801a7a4:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801a7a6:	2300      	movs	r3, #0
 801a7a8:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 801a7aa:	f000 fddc 	bl	801b366 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801a7ae:	2000      	movs	r0, #0
 801a7b0:	f7ff ff86 	bl	801a6c0 <RadioSetModem>

    RadioSetChannel( freq );
 801a7b4:	68f8      	ldr	r0, [r7, #12]
 801a7b6:	f7ff ffdf 	bl	801a778 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801a7ba:	2301      	movs	r3, #1
 801a7bc:	9309      	str	r3, [sp, #36]	; 0x24
 801a7be:	2300      	movs	r3, #0
 801a7c0:	9308      	str	r3, [sp, #32]
 801a7c2:	2300      	movs	r3, #0
 801a7c4:	9307      	str	r3, [sp, #28]
 801a7c6:	2300      	movs	r3, #0
 801a7c8:	9306      	str	r3, [sp, #24]
 801a7ca:	2300      	movs	r3, #0
 801a7cc:	9305      	str	r3, [sp, #20]
 801a7ce:	2300      	movs	r3, #0
 801a7d0:	9304      	str	r3, [sp, #16]
 801a7d2:	2300      	movs	r3, #0
 801a7d4:	9303      	str	r3, [sp, #12]
 801a7d6:	2300      	movs	r3, #0
 801a7d8:	9302      	str	r3, [sp, #8]
 801a7da:	2303      	movs	r3, #3
 801a7dc:	9301      	str	r3, [sp, #4]
 801a7de:	68bb      	ldr	r3, [r7, #8]
 801a7e0:	9300      	str	r3, [sp, #0]
 801a7e2:	2300      	movs	r3, #0
 801a7e4:	f44f 7216 	mov.w	r2, #600	; 0x258
 801a7e8:	68b9      	ldr	r1, [r7, #8]
 801a7ea:	2000      	movs	r0, #0
 801a7ec:	f000 f83c 	bl	801a868 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801a7f0:	2000      	movs	r0, #0
 801a7f2:	f000 fdbf 	bl	801b374 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801a7f6:	f000 ff55 	bl	801b6a4 <RadioGetWakeupTime>
 801a7fa:	4603      	mov	r3, r0
 801a7fc:	4618      	mov	r0, r3
 801a7fe:	f7e8 f895 	bl	800292c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801a802:	f004 f8bd 	bl	801e980 <UTIL_TIMER_GetCurrentTime>
 801a806:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801a808:	e00d      	b.n	801a826 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801a80a:	2000      	movs	r0, #0
 801a80c:	f000 fe9a 	bl	801b544 <RadioRssi>
 801a810:	4603      	mov	r3, r0
 801a812:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801a814:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801a818:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a81c:	429a      	cmp	r2, r3
 801a81e:	dd02      	ble.n	801a826 <RadioIsChannelFree+0x98>
        {
            status = false;
 801a820:	2300      	movs	r3, #0
 801a822:	75fb      	strb	r3, [r7, #23]
            break;
 801a824:	e006      	b.n	801a834 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801a826:	6938      	ldr	r0, [r7, #16]
 801a828:	f004 f8bc 	bl	801e9a4 <UTIL_TIMER_GetElapsedTime>
 801a82c:	4602      	mov	r2, r0
 801a82e:	683b      	ldr	r3, [r7, #0]
 801a830:	4293      	cmp	r3, r2
 801a832:	d8ea      	bhi.n	801a80a <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 801a834:	f000 fd97 	bl	801b366 <RadioStandby>

    return status;
 801a838:	7dfb      	ldrb	r3, [r7, #23]
}
 801a83a:	4618      	mov	r0, r3
 801a83c:	3718      	adds	r7, #24
 801a83e:	46bd      	mov	sp, r7
 801a840:	bd80      	pop	{r7, pc}

0801a842 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801a842:	b580      	push	{r7, lr}
 801a844:	b082      	sub	sp, #8
 801a846:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801a848:	2300      	movs	r3, #0
 801a84a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801a84c:	2300      	movs	r3, #0
 801a84e:	2200      	movs	r2, #0
 801a850:	2100      	movs	r1, #0
 801a852:	2000      	movs	r0, #0
 801a854:	f002 f9ba 	bl	801cbcc <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801a858:	f001 ff6f 	bl	801c73a <SUBGRF_GetRandom>
 801a85c:	6078      	str	r0, [r7, #4]

    return rnd;
 801a85e:	687b      	ldr	r3, [r7, #4]
}
 801a860:	4618      	mov	r0, r3
 801a862:	3708      	adds	r7, #8
 801a864:	46bd      	mov	sp, r7
 801a866:	bd80      	pop	{r7, pc}

0801a868 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801a868:	b580      	push	{r7, lr}
 801a86a:	b08a      	sub	sp, #40	; 0x28
 801a86c:	af00      	add	r7, sp, #0
 801a86e:	60b9      	str	r1, [r7, #8]
 801a870:	607a      	str	r2, [r7, #4]
 801a872:	461a      	mov	r2, r3
 801a874:	4603      	mov	r3, r0
 801a876:	73fb      	strb	r3, [r7, #15]
 801a878:	4613      	mov	r3, r2
 801a87a:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801a87c:	4ab9      	ldr	r2, [pc, #740]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801a87e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a882:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801a884:	f003 f829 	bl	801d8da <RFW_DeInit>
    if( rxContinuous == true )
 801a888:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	d001      	beq.n	801a894 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801a890:	2300      	movs	r3, #0
 801a892:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801a894:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801a898:	2b00      	cmp	r3, #0
 801a89a:	d004      	beq.n	801a8a6 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801a89c:	4ab2      	ldr	r2, [pc, #712]	; (801ab68 <RadioSetRxConfig+0x300>)
 801a89e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801a8a2:	7013      	strb	r3, [r2, #0]
 801a8a4:	e002      	b.n	801a8ac <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801a8a6:	4bb0      	ldr	r3, [pc, #704]	; (801ab68 <RadioSetRxConfig+0x300>)
 801a8a8:	22ff      	movs	r2, #255	; 0xff
 801a8aa:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801a8ac:	7bfb      	ldrb	r3, [r7, #15]
 801a8ae:	2b05      	cmp	r3, #5
 801a8b0:	d009      	beq.n	801a8c6 <RadioSetRxConfig+0x5e>
 801a8b2:	2b05      	cmp	r3, #5
 801a8b4:	f300 81ca 	bgt.w	801ac4c <RadioSetRxConfig+0x3e4>
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	f000 80bf 	beq.w	801aa3c <RadioSetRxConfig+0x1d4>
 801a8be:	2b01      	cmp	r3, #1
 801a8c0:	f000 8124 	beq.w	801ab0c <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801a8c4:	e1c2      	b.n	801ac4c <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801a8c6:	2001      	movs	r0, #1
 801a8c8:	f002 f87c 	bl	801c9c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a8cc:	4ba5      	ldr	r3, [pc, #660]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801a8ce:	2200      	movs	r2, #0
 801a8d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a8d4:	4aa3      	ldr	r2, [pc, #652]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801a8da:	4ba2      	ldr	r3, [pc, #648]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801a8dc:	2209      	movs	r2, #9
 801a8de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801a8e2:	4ba0      	ldr	r3, [pc, #640]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801a8e4:	f44f 7248 	mov.w	r2, #800	; 0x320
 801a8e8:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a8ea:	68b8      	ldr	r0, [r7, #8]
 801a8ec:	f002 ff28 	bl	801d740 <SUBGRF_GetFskBandwidthRegValue>
 801a8f0:	4603      	mov	r3, r0
 801a8f2:	461a      	mov	r2, r3
 801a8f4:	4b9b      	ldr	r3, [pc, #620]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801a8f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a8fa:	4b9a      	ldr	r3, [pc, #616]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801a8fc:	2200      	movs	r2, #0
 801a8fe:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a900:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a902:	00db      	lsls	r3, r3, #3
 801a904:	b29a      	uxth	r2, r3
 801a906:	4b97      	ldr	r3, [pc, #604]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801a908:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801a90a:	4b96      	ldr	r3, [pc, #600]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801a90c:	2200      	movs	r2, #0
 801a90e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801a910:	4b94      	ldr	r3, [pc, #592]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801a912:	2210      	movs	r2, #16
 801a914:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a916:	4b93      	ldr	r3, [pc, #588]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801a918:	2200      	movs	r2, #0
 801a91a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801a91c:	4b91      	ldr	r3, [pc, #580]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801a91e:	2200      	movs	r2, #0
 801a920:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801a922:	4b91      	ldr	r3, [pc, #580]	; (801ab68 <RadioSetRxConfig+0x300>)
 801a924:	781a      	ldrb	r2, [r3, #0]
 801a926:	4b8f      	ldr	r3, [pc, #572]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801a928:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a92a:	4b8e      	ldr	r3, [pc, #568]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801a92c:	2201      	movs	r2, #1
 801a92e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801a930:	4b8c      	ldr	r3, [pc, #560]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801a932:	2200      	movs	r2, #0
 801a934:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801a936:	2005      	movs	r0, #5
 801a938:	f7ff fec2 	bl	801a6c0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a93c:	488b      	ldr	r0, [pc, #556]	; (801ab6c <RadioSetRxConfig+0x304>)
 801a93e:	f002 fadb 	bl	801cef8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a942:	488b      	ldr	r0, [pc, #556]	; (801ab70 <RadioSetRxConfig+0x308>)
 801a944:	f002 fbaa 	bl	801d09c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a948:	4a8a      	ldr	r2, [pc, #552]	; (801ab74 <RadioSetRxConfig+0x30c>)
 801a94a:	f107 031c 	add.w	r3, r7, #28
 801a94e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a952:	e883 0003 	stmia.w	r3, {r0, r1}
 801a956:	f107 031c 	add.w	r3, r7, #28
 801a95a:	4618      	mov	r0, r3
 801a95c:	f001 fe6b 	bl	801c636 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a960:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a964:	f001 feb6 	bl	801c6d4 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801a968:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801a96c:	f000 fe09 	bl	801b582 <RadioRead>
 801a970:	4603      	mov	r3, r0
 801a972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801a976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a97a:	f023 0310 	bic.w	r3, r3, #16
 801a97e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801a982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a986:	4619      	mov	r1, r3
 801a988:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801a98c:	f000 fde7 	bl	801b55e <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 801a990:	2104      	movs	r1, #4
 801a992:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801a996:	f000 fde2 	bl	801b55e <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801a99a:	f640 009b 	movw	r0, #2203	; 0x89b
 801a99e:	f000 fdf0 	bl	801b582 <RadioRead>
 801a9a2:	4603      	mov	r3, r0
 801a9a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801a9a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a9ac:	f023 031c 	bic.w	r3, r3, #28
 801a9b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801a9b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a9b8:	f043 0308 	orr.w	r3, r3, #8
 801a9bc:	b2db      	uxtb	r3, r3
 801a9be:	4619      	mov	r1, r3
 801a9c0:	f640 009b 	movw	r0, #2203	; 0x89b
 801a9c4:	f000 fdcb 	bl	801b55e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801a9c8:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801a9cc:	f000 fdd9 	bl	801b582 <RadioRead>
 801a9d0:	4603      	mov	r3, r0
 801a9d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801a9d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a9da:	f023 0318 	bic.w	r3, r3, #24
 801a9de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801a9e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a9e6:	f043 0318 	orr.w	r3, r3, #24
 801a9ea:	b2db      	uxtb	r3, r3
 801a9ec:	4619      	mov	r1, r3
 801a9ee:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801a9f2:	f000 fdb4 	bl	801b55e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801a9f6:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801a9fa:	f000 fdc2 	bl	801b582 <RadioRead>
 801a9fe:	4603      	mov	r3, r0
 801aa00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801aa04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aa08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801aa0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801aa10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aa14:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801aa18:	b2db      	uxtb	r3, r3
 801aa1a:	4619      	mov	r1, r3
 801aa1c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801aa20:	f000 fd9d 	bl	801b55e <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801aa24:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801aa26:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801aa2a:	fb02 f303 	mul.w	r3, r2, r3
 801aa2e:	461a      	mov	r2, r3
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	fbb2 f3f3 	udiv	r3, r2, r3
 801aa36:	4a4b      	ldr	r2, [pc, #300]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801aa38:	6093      	str	r3, [r2, #8]
            break;
 801aa3a:	e108      	b.n	801ac4e <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801aa3c:	2000      	movs	r0, #0
 801aa3e:	f001 ffc1 	bl	801c9c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801aa42:	4b48      	ldr	r3, [pc, #288]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801aa44:	2200      	movs	r2, #0
 801aa46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801aa4a:	4a46      	ldr	r2, [pc, #280]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801aa50:	4b44      	ldr	r3, [pc, #272]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801aa52:	220b      	movs	r2, #11
 801aa54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801aa58:	68b8      	ldr	r0, [r7, #8]
 801aa5a:	f002 fe71 	bl	801d740 <SUBGRF_GetFskBandwidthRegValue>
 801aa5e:	4603      	mov	r3, r0
 801aa60:	461a      	mov	r2, r3
 801aa62:	4b40      	ldr	r3, [pc, #256]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801aa64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801aa68:	4b3e      	ldr	r3, [pc, #248]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801aa6a:	2200      	movs	r2, #0
 801aa6c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801aa6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801aa70:	00db      	lsls	r3, r3, #3
 801aa72:	b29a      	uxth	r2, r3
 801aa74:	4b3b      	ldr	r3, [pc, #236]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801aa76:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801aa78:	4b3a      	ldr	r3, [pc, #232]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801aa7a:	2204      	movs	r2, #4
 801aa7c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801aa7e:	4b39      	ldr	r3, [pc, #228]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801aa80:	2218      	movs	r2, #24
 801aa82:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801aa84:	4b37      	ldr	r3, [pc, #220]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801aa86:	2200      	movs	r2, #0
 801aa88:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801aa8a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801aa8e:	f083 0301 	eor.w	r3, r3, #1
 801aa92:	b2db      	uxtb	r3, r3
 801aa94:	461a      	mov	r2, r3
 801aa96:	4b33      	ldr	r3, [pc, #204]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801aa98:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801aa9a:	4b33      	ldr	r3, [pc, #204]	; (801ab68 <RadioSetRxConfig+0x300>)
 801aa9c:	781a      	ldrb	r2, [r3, #0]
 801aa9e:	4b31      	ldr	r3, [pc, #196]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801aaa0:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801aaa2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	d003      	beq.n	801aab2 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801aaaa:	4b2e      	ldr	r3, [pc, #184]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801aaac:	22f2      	movs	r2, #242	; 0xf2
 801aaae:	75da      	strb	r2, [r3, #23]
 801aab0:	e002      	b.n	801aab8 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801aab2:	4b2c      	ldr	r3, [pc, #176]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801aab4:	2201      	movs	r2, #1
 801aab6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801aab8:	4b2a      	ldr	r3, [pc, #168]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801aaba:	2201      	movs	r2, #1
 801aabc:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801aabe:	f000 fc52 	bl	801b366 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801aac2:	2000      	movs	r0, #0
 801aac4:	f7ff fdfc 	bl	801a6c0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801aac8:	4828      	ldr	r0, [pc, #160]	; (801ab6c <RadioSetRxConfig+0x304>)
 801aaca:	f002 fa15 	bl	801cef8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801aace:	4828      	ldr	r0, [pc, #160]	; (801ab70 <RadioSetRxConfig+0x308>)
 801aad0:	f002 fae4 	bl	801d09c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801aad4:	4a28      	ldr	r2, [pc, #160]	; (801ab78 <RadioSetRxConfig+0x310>)
 801aad6:	f107 0314 	add.w	r3, r7, #20
 801aada:	e892 0003 	ldmia.w	r2, {r0, r1}
 801aade:	e883 0003 	stmia.w	r3, {r0, r1}
 801aae2:	f107 0314 	add.w	r3, r7, #20
 801aae6:	4618      	mov	r0, r3
 801aae8:	f001 fda5 	bl	801c636 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801aaec:	f240 10ff 	movw	r0, #511	; 0x1ff
 801aaf0:	f001 fdf0 	bl	801c6d4 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801aaf4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801aaf6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801aafa:	fb02 f303 	mul.w	r3, r2, r3
 801aafe:	461a      	mov	r2, r3
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	fbb2 f3f3 	udiv	r3, r2, r3
 801ab06:	4a17      	ldr	r2, [pc, #92]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801ab08:	6093      	str	r3, [r2, #8]
            break;
 801ab0a:	e0a0      	b.n	801ac4e <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801ab0c:	2000      	movs	r0, #0
 801ab0e:	f001 ff59 	bl	801c9c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801ab12:	4b14      	ldr	r3, [pc, #80]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801ab14:	2201      	movs	r2, #1
 801ab16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	b2da      	uxtb	r2, r3
 801ab1e:	4b11      	ldr	r3, [pc, #68]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801ab20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801ab24:	4a15      	ldr	r2, [pc, #84]	; (801ab7c <RadioSetRxConfig+0x314>)
 801ab26:	68bb      	ldr	r3, [r7, #8]
 801ab28:	4413      	add	r3, r2
 801ab2a:	781a      	ldrb	r2, [r3, #0]
 801ab2c:	4b0d      	ldr	r3, [pc, #52]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801ab2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801ab32:	4a0c      	ldr	r2, [pc, #48]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801ab34:	7bbb      	ldrb	r3, [r7, #14]
 801ab36:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801ab3a:	68bb      	ldr	r3, [r7, #8]
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d105      	bne.n	801ab4c <RadioSetRxConfig+0x2e4>
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	2b0b      	cmp	r3, #11
 801ab44:	d008      	beq.n	801ab58 <RadioSetRxConfig+0x2f0>
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	2b0c      	cmp	r3, #12
 801ab4a:	d005      	beq.n	801ab58 <RadioSetRxConfig+0x2f0>
 801ab4c:	68bb      	ldr	r3, [r7, #8]
 801ab4e:	2b01      	cmp	r3, #1
 801ab50:	d116      	bne.n	801ab80 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	2b0c      	cmp	r3, #12
 801ab56:	d113      	bne.n	801ab80 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801ab58:	4b02      	ldr	r3, [pc, #8]	; (801ab64 <RadioSetRxConfig+0x2fc>)
 801ab5a:	2201      	movs	r2, #1
 801ab5c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801ab60:	e012      	b.n	801ab88 <RadioSetRxConfig+0x320>
 801ab62:	bf00      	nop
 801ab64:	200023c0 	.word	0x200023c0
 801ab68:	20000140 	.word	0x20000140
 801ab6c:	200023f8 	.word	0x200023f8
 801ab70:	200023ce 	.word	0x200023ce
 801ab74:	0801f684 	.word	0x0801f684
 801ab78:	0801f68c 	.word	0x0801f68c
 801ab7c:	0801fc68 	.word	0x0801fc68
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801ab80:	4b35      	ldr	r3, [pc, #212]	; (801ac58 <RadioSetRxConfig+0x3f0>)
 801ab82:	2200      	movs	r2, #0
 801ab84:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801ab88:	4b33      	ldr	r3, [pc, #204]	; (801ac58 <RadioSetRxConfig+0x3f0>)
 801ab8a:	2201      	movs	r2, #1
 801ab8c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801ab8e:	4b32      	ldr	r3, [pc, #200]	; (801ac58 <RadioSetRxConfig+0x3f0>)
 801ab90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801ab94:	2b05      	cmp	r3, #5
 801ab96:	d004      	beq.n	801aba2 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801ab98:	4b2f      	ldr	r3, [pc, #188]	; (801ac58 <RadioSetRxConfig+0x3f0>)
 801ab9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801ab9e:	2b06      	cmp	r3, #6
 801aba0:	d10a      	bne.n	801abb8 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801aba2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801aba4:	2b0b      	cmp	r3, #11
 801aba6:	d803      	bhi.n	801abb0 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801aba8:	4b2b      	ldr	r3, [pc, #172]	; (801ac58 <RadioSetRxConfig+0x3f0>)
 801abaa:	220c      	movs	r2, #12
 801abac:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801abae:	e006      	b.n	801abbe <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801abb0:	4a29      	ldr	r2, [pc, #164]	; (801ac58 <RadioSetRxConfig+0x3f0>)
 801abb2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801abb4:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801abb6:	e002      	b.n	801abbe <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801abb8:	4a27      	ldr	r2, [pc, #156]	; (801ac58 <RadioSetRxConfig+0x3f0>)
 801abba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801abbc:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801abbe:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801abc2:	4b25      	ldr	r3, [pc, #148]	; (801ac58 <RadioSetRxConfig+0x3f0>)
 801abc4:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801abc6:	4b25      	ldr	r3, [pc, #148]	; (801ac5c <RadioSetRxConfig+0x3f4>)
 801abc8:	781a      	ldrb	r2, [r3, #0]
 801abca:	4b23      	ldr	r3, [pc, #140]	; (801ac58 <RadioSetRxConfig+0x3f0>)
 801abcc:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801abce:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801abd2:	4b21      	ldr	r3, [pc, #132]	; (801ac58 <RadioSetRxConfig+0x3f0>)
 801abd4:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801abd8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801abdc:	4b1e      	ldr	r3, [pc, #120]	; (801ac58 <RadioSetRxConfig+0x3f0>)
 801abde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801abe2:	f000 fbc0 	bl	801b366 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801abe6:	2001      	movs	r0, #1
 801abe8:	f7ff fd6a 	bl	801a6c0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801abec:	481c      	ldr	r0, [pc, #112]	; (801ac60 <RadioSetRxConfig+0x3f8>)
 801abee:	f002 f983 	bl	801cef8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801abf2:	481c      	ldr	r0, [pc, #112]	; (801ac64 <RadioSetRxConfig+0x3fc>)
 801abf4:	f002 fa52 	bl	801d09c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801abf8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801abfa:	b2db      	uxtb	r3, r3
 801abfc:	4618      	mov	r0, r3
 801abfe:	f001 fef0 	bl	801c9e2 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801ac02:	4b15      	ldr	r3, [pc, #84]	; (801ac58 <RadioSetRxConfig+0x3f0>)
 801ac04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801ac08:	2b01      	cmp	r3, #1
 801ac0a:	d10d      	bne.n	801ac28 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801ac0c:	f240 7036 	movw	r0, #1846	; 0x736
 801ac10:	f002 fba0 	bl	801d354 <SUBGRF_ReadRegister>
 801ac14:	4603      	mov	r3, r0
 801ac16:	f023 0304 	bic.w	r3, r3, #4
 801ac1a:	b2db      	uxtb	r3, r3
 801ac1c:	4619      	mov	r1, r3
 801ac1e:	f240 7036 	movw	r0, #1846	; 0x736
 801ac22:	f002 fb83 	bl	801d32c <SUBGRF_WriteRegister>
 801ac26:	e00c      	b.n	801ac42 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801ac28:	f240 7036 	movw	r0, #1846	; 0x736
 801ac2c:	f002 fb92 	bl	801d354 <SUBGRF_ReadRegister>
 801ac30:	4603      	mov	r3, r0
 801ac32:	f043 0304 	orr.w	r3, r3, #4
 801ac36:	b2db      	uxtb	r3, r3
 801ac38:	4619      	mov	r1, r3
 801ac3a:	f240 7036 	movw	r0, #1846	; 0x736
 801ac3e:	f002 fb75 	bl	801d32c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801ac42:	4b05      	ldr	r3, [pc, #20]	; (801ac58 <RadioSetRxConfig+0x3f0>)
 801ac44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ac48:	609a      	str	r2, [r3, #8]
            break;
 801ac4a:	e000      	b.n	801ac4e <RadioSetRxConfig+0x3e6>
            break;
 801ac4c:	bf00      	nop
    }
}
 801ac4e:	bf00      	nop
 801ac50:	3728      	adds	r7, #40	; 0x28
 801ac52:	46bd      	mov	sp, r7
 801ac54:	bd80      	pop	{r7, pc}
 801ac56:	bf00      	nop
 801ac58:	200023c0 	.word	0x200023c0
 801ac5c:	20000140 	.word	0x20000140
 801ac60:	200023f8 	.word	0x200023f8
 801ac64:	200023ce 	.word	0x200023ce

0801ac68 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801ac68:	b580      	push	{r7, lr}
 801ac6a:	b086      	sub	sp, #24
 801ac6c:	af00      	add	r7, sp, #0
 801ac6e:	60ba      	str	r2, [r7, #8]
 801ac70:	607b      	str	r3, [r7, #4]
 801ac72:	4603      	mov	r3, r0
 801ac74:	73fb      	strb	r3, [r7, #15]
 801ac76:	460b      	mov	r3, r1
 801ac78:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801ac7a:	f002 fe2e 	bl	801d8da <RFW_DeInit>
    switch( modem )
 801ac7e:	7bfb      	ldrb	r3, [r7, #15]
 801ac80:	2b04      	cmp	r3, #4
 801ac82:	f000 80c7 	beq.w	801ae14 <RadioSetTxConfig+0x1ac>
 801ac86:	2b04      	cmp	r3, #4
 801ac88:	f300 80d6 	bgt.w	801ae38 <RadioSetTxConfig+0x1d0>
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	d002      	beq.n	801ac96 <RadioSetTxConfig+0x2e>
 801ac90:	2b01      	cmp	r3, #1
 801ac92:	d059      	beq.n	801ad48 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801ac94:	e0d0      	b.n	801ae38 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801ac96:	4b74      	ldr	r3, [pc, #464]	; (801ae68 <RadioSetTxConfig+0x200>)
 801ac98:	2200      	movs	r2, #0
 801ac9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801ac9e:	4a72      	ldr	r2, [pc, #456]	; (801ae68 <RadioSetTxConfig+0x200>)
 801aca0:	6a3b      	ldr	r3, [r7, #32]
 801aca2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801aca4:	4b70      	ldr	r3, [pc, #448]	; (801ae68 <RadioSetTxConfig+0x200>)
 801aca6:	220b      	movs	r2, #11
 801aca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801acac:	6878      	ldr	r0, [r7, #4]
 801acae:	f002 fd47 	bl	801d740 <SUBGRF_GetFskBandwidthRegValue>
 801acb2:	4603      	mov	r3, r0
 801acb4:	461a      	mov	r2, r3
 801acb6:	4b6c      	ldr	r3, [pc, #432]	; (801ae68 <RadioSetTxConfig+0x200>)
 801acb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801acbc:	4a6a      	ldr	r2, [pc, #424]	; (801ae68 <RadioSetTxConfig+0x200>)
 801acbe:	68bb      	ldr	r3, [r7, #8]
 801acc0:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801acc2:	4b69      	ldr	r3, [pc, #420]	; (801ae68 <RadioSetTxConfig+0x200>)
 801acc4:	2200      	movs	r2, #0
 801acc6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801acc8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801acca:	00db      	lsls	r3, r3, #3
 801accc:	b29a      	uxth	r2, r3
 801acce:	4b66      	ldr	r3, [pc, #408]	; (801ae68 <RadioSetTxConfig+0x200>)
 801acd0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801acd2:	4b65      	ldr	r3, [pc, #404]	; (801ae68 <RadioSetTxConfig+0x200>)
 801acd4:	2204      	movs	r2, #4
 801acd6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801acd8:	4b63      	ldr	r3, [pc, #396]	; (801ae68 <RadioSetTxConfig+0x200>)
 801acda:	2218      	movs	r2, #24
 801acdc:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801acde:	4b62      	ldr	r3, [pc, #392]	; (801ae68 <RadioSetTxConfig+0x200>)
 801ace0:	2200      	movs	r2, #0
 801ace2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801ace4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801ace8:	f083 0301 	eor.w	r3, r3, #1
 801acec:	b2db      	uxtb	r3, r3
 801acee:	461a      	mov	r2, r3
 801acf0:	4b5d      	ldr	r3, [pc, #372]	; (801ae68 <RadioSetTxConfig+0x200>)
 801acf2:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801acf4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	d003      	beq.n	801ad04 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801acfc:	4b5a      	ldr	r3, [pc, #360]	; (801ae68 <RadioSetTxConfig+0x200>)
 801acfe:	22f2      	movs	r2, #242	; 0xf2
 801ad00:	75da      	strb	r2, [r3, #23]
 801ad02:	e002      	b.n	801ad0a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801ad04:	4b58      	ldr	r3, [pc, #352]	; (801ae68 <RadioSetTxConfig+0x200>)
 801ad06:	2201      	movs	r2, #1
 801ad08:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801ad0a:	4b57      	ldr	r3, [pc, #348]	; (801ae68 <RadioSetTxConfig+0x200>)
 801ad0c:	2201      	movs	r2, #1
 801ad0e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801ad10:	f000 fb29 	bl	801b366 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801ad14:	2000      	movs	r0, #0
 801ad16:	f7ff fcd3 	bl	801a6c0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ad1a:	4854      	ldr	r0, [pc, #336]	; (801ae6c <RadioSetTxConfig+0x204>)
 801ad1c:	f002 f8ec 	bl	801cef8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ad20:	4853      	ldr	r0, [pc, #332]	; (801ae70 <RadioSetTxConfig+0x208>)
 801ad22:	f002 f9bb 	bl	801d09c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801ad26:	4a53      	ldr	r2, [pc, #332]	; (801ae74 <RadioSetTxConfig+0x20c>)
 801ad28:	f107 0310 	add.w	r3, r7, #16
 801ad2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ad30:	e883 0003 	stmia.w	r3, {r0, r1}
 801ad34:	f107 0310 	add.w	r3, r7, #16
 801ad38:	4618      	mov	r0, r3
 801ad3a:	f001 fc7c 	bl	801c636 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801ad3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 801ad42:	f001 fcc7 	bl	801c6d4 <SUBGRF_SetWhiteningSeed>
            break;
 801ad46:	e078      	b.n	801ae3a <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801ad48:	4b47      	ldr	r3, [pc, #284]	; (801ae68 <RadioSetTxConfig+0x200>)
 801ad4a:	2201      	movs	r2, #1
 801ad4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801ad50:	6a3b      	ldr	r3, [r7, #32]
 801ad52:	b2da      	uxtb	r2, r3
 801ad54:	4b44      	ldr	r3, [pc, #272]	; (801ae68 <RadioSetTxConfig+0x200>)
 801ad56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801ad5a:	4a47      	ldr	r2, [pc, #284]	; (801ae78 <RadioSetTxConfig+0x210>)
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	4413      	add	r3, r2
 801ad60:	781a      	ldrb	r2, [r3, #0]
 801ad62:	4b41      	ldr	r3, [pc, #260]	; (801ae68 <RadioSetTxConfig+0x200>)
 801ad64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801ad68:	4a3f      	ldr	r2, [pc, #252]	; (801ae68 <RadioSetTxConfig+0x200>)
 801ad6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ad6e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d105      	bne.n	801ad84 <RadioSetTxConfig+0x11c>
 801ad78:	6a3b      	ldr	r3, [r7, #32]
 801ad7a:	2b0b      	cmp	r3, #11
 801ad7c:	d008      	beq.n	801ad90 <RadioSetTxConfig+0x128>
 801ad7e:	6a3b      	ldr	r3, [r7, #32]
 801ad80:	2b0c      	cmp	r3, #12
 801ad82:	d005      	beq.n	801ad90 <RadioSetTxConfig+0x128>
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	2b01      	cmp	r3, #1
 801ad88:	d107      	bne.n	801ad9a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801ad8a:	6a3b      	ldr	r3, [r7, #32]
 801ad8c:	2b0c      	cmp	r3, #12
 801ad8e:	d104      	bne.n	801ad9a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801ad90:	4b35      	ldr	r3, [pc, #212]	; (801ae68 <RadioSetTxConfig+0x200>)
 801ad92:	2201      	movs	r2, #1
 801ad94:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801ad98:	e003      	b.n	801ada2 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801ad9a:	4b33      	ldr	r3, [pc, #204]	; (801ae68 <RadioSetTxConfig+0x200>)
 801ad9c:	2200      	movs	r2, #0
 801ad9e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801ada2:	4b31      	ldr	r3, [pc, #196]	; (801ae68 <RadioSetTxConfig+0x200>)
 801ada4:	2201      	movs	r2, #1
 801ada6:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801ada8:	4b2f      	ldr	r3, [pc, #188]	; (801ae68 <RadioSetTxConfig+0x200>)
 801adaa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801adae:	2b05      	cmp	r3, #5
 801adb0:	d004      	beq.n	801adbc <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801adb2:	4b2d      	ldr	r3, [pc, #180]	; (801ae68 <RadioSetTxConfig+0x200>)
 801adb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801adb8:	2b06      	cmp	r3, #6
 801adba:	d10a      	bne.n	801add2 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801adbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801adbe:	2b0b      	cmp	r3, #11
 801adc0:	d803      	bhi.n	801adca <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801adc2:	4b29      	ldr	r3, [pc, #164]	; (801ae68 <RadioSetTxConfig+0x200>)
 801adc4:	220c      	movs	r2, #12
 801adc6:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801adc8:	e006      	b.n	801add8 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801adca:	4a27      	ldr	r2, [pc, #156]	; (801ae68 <RadioSetTxConfig+0x200>)
 801adcc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801adce:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801add0:	e002      	b.n	801add8 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801add2:	4a25      	ldr	r2, [pc, #148]	; (801ae68 <RadioSetTxConfig+0x200>)
 801add4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801add6:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801add8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801addc:	4b22      	ldr	r3, [pc, #136]	; (801ae68 <RadioSetTxConfig+0x200>)
 801adde:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801ade0:	4b26      	ldr	r3, [pc, #152]	; (801ae7c <RadioSetTxConfig+0x214>)
 801ade2:	781a      	ldrb	r2, [r3, #0]
 801ade4:	4b20      	ldr	r3, [pc, #128]	; (801ae68 <RadioSetTxConfig+0x200>)
 801ade6:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801ade8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801adec:	4b1e      	ldr	r3, [pc, #120]	; (801ae68 <RadioSetTxConfig+0x200>)
 801adee:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801adf2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801adf6:	4b1c      	ldr	r3, [pc, #112]	; (801ae68 <RadioSetTxConfig+0x200>)
 801adf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801adfc:	f000 fab3 	bl	801b366 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801ae00:	2001      	movs	r0, #1
 801ae02:	f7ff fc5d 	bl	801a6c0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ae06:	4819      	ldr	r0, [pc, #100]	; (801ae6c <RadioSetTxConfig+0x204>)
 801ae08:	f002 f876 	bl	801cef8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ae0c:	4818      	ldr	r0, [pc, #96]	; (801ae70 <RadioSetTxConfig+0x208>)
 801ae0e:	f002 f945 	bl	801d09c <SUBGRF_SetPacketParams>
            break;
 801ae12:	e012      	b.n	801ae3a <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801ae14:	2004      	movs	r0, #4
 801ae16:	f7ff fc53 	bl	801a6c0 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801ae1a:	4b13      	ldr	r3, [pc, #76]	; (801ae68 <RadioSetTxConfig+0x200>)
 801ae1c:	2202      	movs	r2, #2
 801ae1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801ae22:	4a11      	ldr	r2, [pc, #68]	; (801ae68 <RadioSetTxConfig+0x200>)
 801ae24:	6a3b      	ldr	r3, [r7, #32]
 801ae26:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801ae28:	4b0f      	ldr	r3, [pc, #60]	; (801ae68 <RadioSetTxConfig+0x200>)
 801ae2a:	2216      	movs	r2, #22
 801ae2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ae30:	480e      	ldr	r0, [pc, #56]	; (801ae6c <RadioSetTxConfig+0x204>)
 801ae32:	f002 f861 	bl	801cef8 <SUBGRF_SetModulationParams>
            break;
 801ae36:	e000      	b.n	801ae3a <RadioSetTxConfig+0x1d2>
            break;
 801ae38:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801ae3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ae3e:	4618      	mov	r0, r3
 801ae40:	f002 fb90 	bl	801d564 <SUBGRF_SetRfTxPower>
 801ae44:	4603      	mov	r3, r0
 801ae46:	461a      	mov	r2, r3
 801ae48:	4b07      	ldr	r3, [pc, #28]	; (801ae68 <RadioSetTxConfig+0x200>)
 801ae4a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 801ae4e:	4b06      	ldr	r3, [pc, #24]	; (801ae68 <RadioSetTxConfig+0x200>)
 801ae50:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ae54:	4618      	mov	r0, r3
 801ae56:	f002 fd54 	bl	801d902 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801ae5a:	4a03      	ldr	r2, [pc, #12]	; (801ae68 <RadioSetTxConfig+0x200>)
 801ae5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ae5e:	6053      	str	r3, [r2, #4]
}
 801ae60:	bf00      	nop
 801ae62:	3718      	adds	r7, #24
 801ae64:	46bd      	mov	sp, r7
 801ae66:	bd80      	pop	{r7, pc}
 801ae68:	200023c0 	.word	0x200023c0
 801ae6c:	200023f8 	.word	0x200023f8
 801ae70:	200023ce 	.word	0x200023ce
 801ae74:	0801f68c 	.word	0x0801f68c
 801ae78:	0801fc68 	.word	0x0801fc68
 801ae7c:	20000140 	.word	0x20000140

0801ae80 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801ae80:	b480      	push	{r7}
 801ae82:	b083      	sub	sp, #12
 801ae84:	af00      	add	r7, sp, #0
 801ae86:	6078      	str	r0, [r7, #4]
    return true;
 801ae88:	2301      	movs	r3, #1
}
 801ae8a:	4618      	mov	r0, r3
 801ae8c:	370c      	adds	r7, #12
 801ae8e:	46bd      	mov	sp, r7
 801ae90:	bc80      	pop	{r7}
 801ae92:	4770      	bx	lr

0801ae94 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801ae94:	b480      	push	{r7}
 801ae96:	b085      	sub	sp, #20
 801ae98:	af00      	add	r7, sp, #0
 801ae9a:	4603      	mov	r3, r0
 801ae9c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801ae9e:	2300      	movs	r3, #0
 801aea0:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801aea2:	79fb      	ldrb	r3, [r7, #7]
 801aea4:	2b0a      	cmp	r3, #10
 801aea6:	d83e      	bhi.n	801af26 <RadioGetLoRaBandwidthInHz+0x92>
 801aea8:	a201      	add	r2, pc, #4	; (adr r2, 801aeb0 <RadioGetLoRaBandwidthInHz+0x1c>)
 801aeaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aeae:	bf00      	nop
 801aeb0:	0801aedd 	.word	0x0801aedd
 801aeb4:	0801aeed 	.word	0x0801aeed
 801aeb8:	0801aefd 	.word	0x0801aefd
 801aebc:	0801af0d 	.word	0x0801af0d
 801aec0:	0801af15 	.word	0x0801af15
 801aec4:	0801af1b 	.word	0x0801af1b
 801aec8:	0801af21 	.word	0x0801af21
 801aecc:	0801af27 	.word	0x0801af27
 801aed0:	0801aee5 	.word	0x0801aee5
 801aed4:	0801aef5 	.word	0x0801aef5
 801aed8:	0801af05 	.word	0x0801af05
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801aedc:	f641 6384 	movw	r3, #7812	; 0x1e84
 801aee0:	60fb      	str	r3, [r7, #12]
        break;
 801aee2:	e020      	b.n	801af26 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801aee4:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801aee8:	60fb      	str	r3, [r7, #12]
        break;
 801aeea:	e01c      	b.n	801af26 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801aeec:	f643 5309 	movw	r3, #15625	; 0x3d09
 801aef0:	60fb      	str	r3, [r7, #12]
        break;
 801aef2:	e018      	b.n	801af26 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801aef4:	f245 1361 	movw	r3, #20833	; 0x5161
 801aef8:	60fb      	str	r3, [r7, #12]
        break;
 801aefa:	e014      	b.n	801af26 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801aefc:	f647 2312 	movw	r3, #31250	; 0x7a12
 801af00:	60fb      	str	r3, [r7, #12]
        break;
 801af02:	e010      	b.n	801af26 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801af04:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801af08:	60fb      	str	r3, [r7, #12]
        break;
 801af0a:	e00c      	b.n	801af26 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801af0c:	f24f 4324 	movw	r3, #62500	; 0xf424
 801af10:	60fb      	str	r3, [r7, #12]
        break;
 801af12:	e008      	b.n	801af26 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801af14:	4b07      	ldr	r3, [pc, #28]	; (801af34 <RadioGetLoRaBandwidthInHz+0xa0>)
 801af16:	60fb      	str	r3, [r7, #12]
        break;
 801af18:	e005      	b.n	801af26 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801af1a:	4b07      	ldr	r3, [pc, #28]	; (801af38 <RadioGetLoRaBandwidthInHz+0xa4>)
 801af1c:	60fb      	str	r3, [r7, #12]
        break;
 801af1e:	e002      	b.n	801af26 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801af20:	4b06      	ldr	r3, [pc, #24]	; (801af3c <RadioGetLoRaBandwidthInHz+0xa8>)
 801af22:	60fb      	str	r3, [r7, #12]
        break;
 801af24:	bf00      	nop
    }

    return bandwidthInHz;
 801af26:	68fb      	ldr	r3, [r7, #12]
}
 801af28:	4618      	mov	r0, r3
 801af2a:	3714      	adds	r7, #20
 801af2c:	46bd      	mov	sp, r7
 801af2e:	bc80      	pop	{r7}
 801af30:	4770      	bx	lr
 801af32:	bf00      	nop
 801af34:	0001e848 	.word	0x0001e848
 801af38:	0003d090 	.word	0x0003d090
 801af3c:	0007a120 	.word	0x0007a120

0801af40 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801af40:	b480      	push	{r7}
 801af42:	b083      	sub	sp, #12
 801af44:	af00      	add	r7, sp, #0
 801af46:	6078      	str	r0, [r7, #4]
 801af48:	4608      	mov	r0, r1
 801af4a:	4611      	mov	r1, r2
 801af4c:	461a      	mov	r2, r3
 801af4e:	4603      	mov	r3, r0
 801af50:	70fb      	strb	r3, [r7, #3]
 801af52:	460b      	mov	r3, r1
 801af54:	803b      	strh	r3, [r7, #0]
 801af56:	4613      	mov	r3, r2
 801af58:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 801af5a:	883b      	ldrh	r3, [r7, #0]
 801af5c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801af5e:	78ba      	ldrb	r2, [r7, #2]
 801af60:	f082 0201 	eor.w	r2, r2, #1
 801af64:	b2d2      	uxtb	r2, r2
 801af66:	2a00      	cmp	r2, #0
 801af68:	d001      	beq.n	801af6e <RadioGetGfskTimeOnAirNumerator+0x2e>
 801af6a:	2208      	movs	r2, #8
 801af6c:	e000      	b.n	801af70 <RadioGetGfskTimeOnAirNumerator+0x30>
 801af6e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801af70:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801af72:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801af76:	7c3b      	ldrb	r3, [r7, #16]
 801af78:	7d39      	ldrb	r1, [r7, #20]
 801af7a:	2900      	cmp	r1, #0
 801af7c:	d001      	beq.n	801af82 <RadioGetGfskTimeOnAirNumerator+0x42>
 801af7e:	2102      	movs	r1, #2
 801af80:	e000      	b.n	801af84 <RadioGetGfskTimeOnAirNumerator+0x44>
 801af82:	2100      	movs	r1, #0
 801af84:	440b      	add	r3, r1
 801af86:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801af88:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 801af8a:	4618      	mov	r0, r3
 801af8c:	370c      	adds	r7, #12
 801af8e:	46bd      	mov	sp, r7
 801af90:	bc80      	pop	{r7}
 801af92:	4770      	bx	lr

0801af94 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801af94:	b480      	push	{r7}
 801af96:	b08b      	sub	sp, #44	; 0x2c
 801af98:	af00      	add	r7, sp, #0
 801af9a:	60f8      	str	r0, [r7, #12]
 801af9c:	60b9      	str	r1, [r7, #8]
 801af9e:	4611      	mov	r1, r2
 801afa0:	461a      	mov	r2, r3
 801afa2:	460b      	mov	r3, r1
 801afa4:	71fb      	strb	r3, [r7, #7]
 801afa6:	4613      	mov	r3, r2
 801afa8:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801afaa:	79fb      	ldrb	r3, [r7, #7]
 801afac:	3304      	adds	r3, #4
 801afae:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801afb0:	2300      	movs	r3, #0
 801afb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801afb6:	68bb      	ldr	r3, [r7, #8]
 801afb8:	2b05      	cmp	r3, #5
 801afba:	d002      	beq.n	801afc2 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801afbc:	68bb      	ldr	r3, [r7, #8]
 801afbe:	2b06      	cmp	r3, #6
 801afc0:	d104      	bne.n	801afcc <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801afc2:	88bb      	ldrh	r3, [r7, #4]
 801afc4:	2b0b      	cmp	r3, #11
 801afc6:	d801      	bhi.n	801afcc <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801afc8:	230c      	movs	r3, #12
 801afca:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801afcc:	68fb      	ldr	r3, [r7, #12]
 801afce:	2b00      	cmp	r3, #0
 801afd0:	d105      	bne.n	801afde <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801afd2:	68bb      	ldr	r3, [r7, #8]
 801afd4:	2b0b      	cmp	r3, #11
 801afd6:	d008      	beq.n	801afea <RadioGetLoRaTimeOnAirNumerator+0x56>
 801afd8:	68bb      	ldr	r3, [r7, #8]
 801afda:	2b0c      	cmp	r3, #12
 801afdc:	d005      	beq.n	801afea <RadioGetLoRaTimeOnAirNumerator+0x56>
 801afde:	68fb      	ldr	r3, [r7, #12]
 801afe0:	2b01      	cmp	r3, #1
 801afe2:	d105      	bne.n	801aff0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801afe4:	68bb      	ldr	r3, [r7, #8]
 801afe6:	2b0c      	cmp	r3, #12
 801afe8:	d102      	bne.n	801aff0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801afea:	2301      	movs	r3, #1
 801afec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801aff0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801aff4:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801aff6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801affa:	2a00      	cmp	r2, #0
 801affc:	d001      	beq.n	801b002 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801affe:	2210      	movs	r2, #16
 801b000:	e000      	b.n	801b004 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801b002:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801b004:	4413      	add	r3, r2
 801b006:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801b008:	68bb      	ldr	r3, [r7, #8]
 801b00a:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801b00c:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801b00e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801b012:	2a00      	cmp	r2, #0
 801b014:	d001      	beq.n	801b01a <RadioGetLoRaTimeOnAirNumerator+0x86>
 801b016:	2200      	movs	r2, #0
 801b018:	e000      	b.n	801b01c <RadioGetLoRaTimeOnAirNumerator+0x88>
 801b01a:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801b01c:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801b01e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801b020:	68bb      	ldr	r3, [r7, #8]
 801b022:	2b06      	cmp	r3, #6
 801b024:	d803      	bhi.n	801b02e <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801b026:	68bb      	ldr	r3, [r7, #8]
 801b028:	009b      	lsls	r3, r3, #2
 801b02a:	623b      	str	r3, [r7, #32]
 801b02c:	e00e      	b.n	801b04c <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801b02e:	69fb      	ldr	r3, [r7, #28]
 801b030:	3308      	adds	r3, #8
 801b032:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801b034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d004      	beq.n	801b046 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801b03c:	68bb      	ldr	r3, [r7, #8]
 801b03e:	3b02      	subs	r3, #2
 801b040:	009b      	lsls	r3, r3, #2
 801b042:	623b      	str	r3, [r7, #32]
 801b044:	e002      	b.n	801b04c <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801b046:	68bb      	ldr	r3, [r7, #8]
 801b048:	009b      	lsls	r3, r3, #2
 801b04a:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801b04c:	69fb      	ldr	r3, [r7, #28]
 801b04e:	2b00      	cmp	r3, #0
 801b050:	da01      	bge.n	801b056 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801b052:	2300      	movs	r3, #0
 801b054:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801b056:	69fa      	ldr	r2, [r7, #28]
 801b058:	6a3b      	ldr	r3, [r7, #32]
 801b05a:	4413      	add	r3, r2
 801b05c:	1e5a      	subs	r2, r3, #1
 801b05e:	6a3b      	ldr	r3, [r7, #32]
 801b060:	fb92 f3f3 	sdiv	r3, r2, r3
 801b064:	697a      	ldr	r2, [r7, #20]
 801b066:	fb03 f202 	mul.w	r2, r3, r2
 801b06a:	88bb      	ldrh	r3, [r7, #4]
 801b06c:	4413      	add	r3, r2
    int32_t intermediate =
 801b06e:	330c      	adds	r3, #12
 801b070:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801b072:	68bb      	ldr	r3, [r7, #8]
 801b074:	2b06      	cmp	r3, #6
 801b076:	d802      	bhi.n	801b07e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801b078:	69bb      	ldr	r3, [r7, #24]
 801b07a:	3302      	adds	r3, #2
 801b07c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801b07e:	69bb      	ldr	r3, [r7, #24]
 801b080:	009b      	lsls	r3, r3, #2
 801b082:	1c5a      	adds	r2, r3, #1
 801b084:	68bb      	ldr	r3, [r7, #8]
 801b086:	3b02      	subs	r3, #2
 801b088:	fa02 f303 	lsl.w	r3, r2, r3
}
 801b08c:	4618      	mov	r0, r3
 801b08e:	372c      	adds	r7, #44	; 0x2c
 801b090:	46bd      	mov	sp, r7
 801b092:	bc80      	pop	{r7}
 801b094:	4770      	bx	lr
	...

0801b098 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801b098:	b580      	push	{r7, lr}
 801b09a:	b08a      	sub	sp, #40	; 0x28
 801b09c:	af04      	add	r7, sp, #16
 801b09e:	60b9      	str	r1, [r7, #8]
 801b0a0:	607a      	str	r2, [r7, #4]
 801b0a2:	461a      	mov	r2, r3
 801b0a4:	4603      	mov	r3, r0
 801b0a6:	73fb      	strb	r3, [r7, #15]
 801b0a8:	4613      	mov	r3, r2
 801b0aa:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801b0ac:	2300      	movs	r3, #0
 801b0ae:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801b0b0:	2301      	movs	r3, #1
 801b0b2:	613b      	str	r3, [r7, #16]

    switch( modem )
 801b0b4:	7bfb      	ldrb	r3, [r7, #15]
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d002      	beq.n	801b0c0 <RadioTimeOnAir+0x28>
 801b0ba:	2b01      	cmp	r3, #1
 801b0bc:	d017      	beq.n	801b0ee <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801b0be:	e035      	b.n	801b12c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801b0c0:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801b0c4:	8c3a      	ldrh	r2, [r7, #32]
 801b0c6:	7bb9      	ldrb	r1, [r7, #14]
 801b0c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801b0cc:	9301      	str	r3, [sp, #4]
 801b0ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b0d2:	9300      	str	r3, [sp, #0]
 801b0d4:	4603      	mov	r3, r0
 801b0d6:	6878      	ldr	r0, [r7, #4]
 801b0d8:	f7ff ff32 	bl	801af40 <RadioGetGfskTimeOnAirNumerator>
 801b0dc:	4603      	mov	r3, r0
 801b0de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b0e2:	fb02 f303 	mul.w	r3, r2, r3
 801b0e6:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	613b      	str	r3, [r7, #16]
        break;
 801b0ec:	e01e      	b.n	801b12c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801b0ee:	8c39      	ldrh	r1, [r7, #32]
 801b0f0:	7bba      	ldrb	r2, [r7, #14]
 801b0f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801b0f6:	9302      	str	r3, [sp, #8]
 801b0f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b0fc:	9301      	str	r3, [sp, #4]
 801b0fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b102:	9300      	str	r3, [sp, #0]
 801b104:	460b      	mov	r3, r1
 801b106:	6879      	ldr	r1, [r7, #4]
 801b108:	68b8      	ldr	r0, [r7, #8]
 801b10a:	f7ff ff43 	bl	801af94 <RadioGetLoRaTimeOnAirNumerator>
 801b10e:	4603      	mov	r3, r0
 801b110:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b114:	fb02 f303 	mul.w	r3, r2, r3
 801b118:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801b11a:	4a0a      	ldr	r2, [pc, #40]	; (801b144 <RadioTimeOnAir+0xac>)
 801b11c:	68bb      	ldr	r3, [r7, #8]
 801b11e:	4413      	add	r3, r2
 801b120:	781b      	ldrb	r3, [r3, #0]
 801b122:	4618      	mov	r0, r3
 801b124:	f7ff feb6 	bl	801ae94 <RadioGetLoRaBandwidthInHz>
 801b128:	6138      	str	r0, [r7, #16]
        break;
 801b12a:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 801b12c:	697a      	ldr	r2, [r7, #20]
 801b12e:	693b      	ldr	r3, [r7, #16]
 801b130:	4413      	add	r3, r2
 801b132:	1e5a      	subs	r2, r3, #1
 801b134:	693b      	ldr	r3, [r7, #16]
 801b136:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801b13a:	4618      	mov	r0, r3
 801b13c:	3718      	adds	r7, #24
 801b13e:	46bd      	mov	sp, r7
 801b140:	bd80      	pop	{r7, pc}
 801b142:	bf00      	nop
 801b144:	0801fc68 	.word	0x0801fc68

0801b148 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 801b148:	b580      	push	{r7, lr}
 801b14a:	b084      	sub	sp, #16
 801b14c:	af00      	add	r7, sp, #0
 801b14e:	6078      	str	r0, [r7, #4]
 801b150:	460b      	mov	r3, r1
 801b152:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801b154:	2300      	movs	r3, #0
 801b156:	2200      	movs	r2, #0
 801b158:	f240 2101 	movw	r1, #513	; 0x201
 801b15c:	f240 2001 	movw	r0, #513	; 0x201
 801b160:	f001 fd34 	bl	801cbcc <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801b164:	4b71      	ldr	r3, [pc, #452]	; (801b32c <RadioSend+0x1e4>)
 801b166:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b16a:	2101      	movs	r1, #1
 801b16c:	4618      	mov	r0, r3
 801b16e:	f002 f9d1 	bl	801d514 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801b172:	4b6e      	ldr	r3, [pc, #440]	; (801b32c <RadioSend+0x1e4>)
 801b174:	781b      	ldrb	r3, [r3, #0]
 801b176:	2b01      	cmp	r3, #1
 801b178:	d112      	bne.n	801b1a0 <RadioSend+0x58>
 801b17a:	4b6c      	ldr	r3, [pc, #432]	; (801b32c <RadioSend+0x1e4>)
 801b17c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801b180:	2b06      	cmp	r3, #6
 801b182:	d10d      	bne.n	801b1a0 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801b184:	f640 0089 	movw	r0, #2185	; 0x889
 801b188:	f002 f8e4 	bl	801d354 <SUBGRF_ReadRegister>
 801b18c:	4603      	mov	r3, r0
 801b18e:	f023 0304 	bic.w	r3, r3, #4
 801b192:	b2db      	uxtb	r3, r3
 801b194:	4619      	mov	r1, r3
 801b196:	f640 0089 	movw	r0, #2185	; 0x889
 801b19a:	f002 f8c7 	bl	801d32c <SUBGRF_WriteRegister>
 801b19e:	e00c      	b.n	801b1ba <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801b1a0:	f640 0089 	movw	r0, #2185	; 0x889
 801b1a4:	f002 f8d6 	bl	801d354 <SUBGRF_ReadRegister>
 801b1a8:	4603      	mov	r3, r0
 801b1aa:	f043 0304 	orr.w	r3, r3, #4
 801b1ae:	b2db      	uxtb	r3, r3
 801b1b0:	4619      	mov	r1, r3
 801b1b2:	f640 0089 	movw	r0, #2185	; 0x889
 801b1b6:	f002 f8b9 	bl	801d32c <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 801b1ba:	4b5c      	ldr	r3, [pc, #368]	; (801b32c <RadioSend+0x1e4>)
 801b1bc:	781b      	ldrb	r3, [r3, #0]
 801b1be:	2b04      	cmp	r3, #4
 801b1c0:	f200 80a7 	bhi.w	801b312 <RadioSend+0x1ca>
 801b1c4:	a201      	add	r2, pc, #4	; (adr r2, 801b1cc <RadioSend+0x84>)
 801b1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b1ca:	bf00      	nop
 801b1cc:	0801b1fb 	.word	0x0801b1fb
 801b1d0:	0801b1e1 	.word	0x0801b1e1
 801b1d4:	0801b1fb 	.word	0x0801b1fb
 801b1d8:	0801b25b 	.word	0x0801b25b
 801b1dc:	0801b27b 	.word	0x0801b27b
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801b1e0:	4a52      	ldr	r2, [pc, #328]	; (801b32c <RadioSend+0x1e4>)
 801b1e2:	78fb      	ldrb	r3, [r7, #3]
 801b1e4:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b1e6:	4852      	ldr	r0, [pc, #328]	; (801b330 <RadioSend+0x1e8>)
 801b1e8:	f001 ff58 	bl	801d09c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801b1ec:	78fb      	ldrb	r3, [r7, #3]
 801b1ee:	2200      	movs	r2, #0
 801b1f0:	4619      	mov	r1, r3
 801b1f2:	6878      	ldr	r0, [r7, #4]
 801b1f4:	f001 fa0c 	bl	801c610 <SUBGRF_SendPayload>
            break;
 801b1f8:	e08c      	b.n	801b314 <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801b1fa:	f002 fb74 	bl	801d8e6 <RFW_Is_Init>
 801b1fe:	4603      	mov	r3, r0
 801b200:	2b01      	cmp	r3, #1
 801b202:	d11d      	bne.n	801b240 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801b204:	f107 020d 	add.w	r2, r7, #13
 801b208:	78fb      	ldrb	r3, [r7, #3]
 801b20a:	4619      	mov	r1, r3
 801b20c:	6878      	ldr	r0, [r7, #4]
 801b20e:	f002 fb82 	bl	801d916 <RFW_TransmitInit>
 801b212:	4603      	mov	r3, r0
 801b214:	2b00      	cmp	r3, #0
 801b216:	d10c      	bne.n	801b232 <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801b218:	7b7a      	ldrb	r2, [r7, #13]
 801b21a:	4b44      	ldr	r3, [pc, #272]	; (801b32c <RadioSend+0x1e4>)
 801b21c:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b21e:	4844      	ldr	r0, [pc, #272]	; (801b330 <RadioSend+0x1e8>)
 801b220:	f001 ff3c 	bl	801d09c <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 801b224:	7b7b      	ldrb	r3, [r7, #13]
 801b226:	2200      	movs	r2, #0
 801b228:	4619      	mov	r1, r3
 801b22a:	6878      	ldr	r0, [r7, #4]
 801b22c:	f001 f9f0 	bl	801c610 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801b230:	e070      	b.n	801b314 <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 801b232:	4b40      	ldr	r3, [pc, #256]	; (801b334 <RadioSend+0x1ec>)
 801b234:	2201      	movs	r2, #1
 801b236:	2100      	movs	r1, #0
 801b238:	2002      	movs	r0, #2
 801b23a:	f003 fc91 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
 801b23e:	e072      	b.n	801b326 <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801b240:	4a3a      	ldr	r2, [pc, #232]	; (801b32c <RadioSend+0x1e4>)
 801b242:	78fb      	ldrb	r3, [r7, #3]
 801b244:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b246:	483a      	ldr	r0, [pc, #232]	; (801b330 <RadioSend+0x1e8>)
 801b248:	f001 ff28 	bl	801d09c <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 801b24c:	78fb      	ldrb	r3, [r7, #3]
 801b24e:	2200      	movs	r2, #0
 801b250:	4619      	mov	r1, r3
 801b252:	6878      	ldr	r0, [r7, #4]
 801b254:	f001 f9dc 	bl	801c610 <SUBGRF_SendPayload>
            break;
 801b258:	e05c      	b.n	801b314 <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801b25a:	4b34      	ldr	r3, [pc, #208]	; (801b32c <RadioSend+0x1e4>)
 801b25c:	2202      	movs	r2, #2
 801b25e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801b260:	4a32      	ldr	r2, [pc, #200]	; (801b32c <RadioSend+0x1e4>)
 801b262:	78fb      	ldrb	r3, [r7, #3]
 801b264:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b266:	4832      	ldr	r0, [pc, #200]	; (801b330 <RadioSend+0x1e8>)
 801b268:	f001 ff18 	bl	801d09c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801b26c:	78fb      	ldrb	r3, [r7, #3]
 801b26e:	2200      	movs	r2, #0
 801b270:	4619      	mov	r1, r3
 801b272:	6878      	ldr	r0, [r7, #4]
 801b274:	f001 f9cc 	bl	801c610 <SUBGRF_SendPayload>
            break;
 801b278:	e04c      	b.n	801b314 <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801b27a:	78fb      	ldrb	r3, [r7, #3]
 801b27c:	461a      	mov	r2, r3
 801b27e:	6879      	ldr	r1, [r7, #4]
 801b280:	482d      	ldr	r0, [pc, #180]	; (801b338 <RadioSend+0x1f0>)
 801b282:	f000 fcbc 	bl	801bbfe <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801b286:	4b29      	ldr	r3, [pc, #164]	; (801b32c <RadioSend+0x1e4>)
 801b288:	2202      	movs	r2, #2
 801b28a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801b28c:	78fb      	ldrb	r3, [r7, #3]
 801b28e:	3301      	adds	r3, #1
 801b290:	b2da      	uxtb	r2, r3
 801b292:	4b26      	ldr	r3, [pc, #152]	; (801b32c <RadioSend+0x1e4>)
 801b294:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b296:	4826      	ldr	r0, [pc, #152]	; (801b330 <RadioSend+0x1e8>)
 801b298:	f001 ff00 	bl	801d09c <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801b29c:	2100      	movs	r1, #0
 801b29e:	20f1      	movs	r0, #241	; 0xf1
 801b2a0:	f000 f95d 	bl	801b55e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801b2a4:	2100      	movs	r1, #0
 801b2a6:	20f0      	movs	r0, #240	; 0xf0
 801b2a8:	f000 f959 	bl	801b55e <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801b2ac:	4b1f      	ldr	r3, [pc, #124]	; (801b32c <RadioSend+0x1e4>)
 801b2ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b2b0:	2b64      	cmp	r3, #100	; 0x64
 801b2b2:	d108      	bne.n	801b2c6 <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801b2b4:	2170      	movs	r1, #112	; 0x70
 801b2b6:	20f3      	movs	r0, #243	; 0xf3
 801b2b8:	f000 f951 	bl	801b55e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801b2bc:	211d      	movs	r1, #29
 801b2be:	20f2      	movs	r0, #242	; 0xf2
 801b2c0:	f000 f94d 	bl	801b55e <RadioWrite>
 801b2c4:	e007      	b.n	801b2d6 <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801b2c6:	21e1      	movs	r1, #225	; 0xe1
 801b2c8:	20f3      	movs	r0, #243	; 0xf3
 801b2ca:	f000 f948 	bl	801b55e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801b2ce:	2104      	movs	r1, #4
 801b2d0:	20f2      	movs	r0, #242	; 0xf2
 801b2d2:	f000 f944 	bl	801b55e <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801b2d6:	78fb      	ldrb	r3, [r7, #3]
 801b2d8:	b29b      	uxth	r3, r3
 801b2da:	00db      	lsls	r3, r3, #3
 801b2dc:	b29b      	uxth	r3, r3
 801b2de:	3302      	adds	r3, #2
 801b2e0:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801b2e2:	89fb      	ldrh	r3, [r7, #14]
 801b2e4:	0a1b      	lsrs	r3, r3, #8
 801b2e6:	b29b      	uxth	r3, r3
 801b2e8:	b2db      	uxtb	r3, r3
 801b2ea:	4619      	mov	r1, r3
 801b2ec:	20f4      	movs	r0, #244	; 0xf4
 801b2ee:	f000 f936 	bl	801b55e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801b2f2:	89fb      	ldrh	r3, [r7, #14]
 801b2f4:	b2db      	uxtb	r3, r3
 801b2f6:	4619      	mov	r1, r3
 801b2f8:	20f5      	movs	r0, #245	; 0xf5
 801b2fa:	f000 f930 	bl	801b55e <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 801b2fe:	78fb      	ldrb	r3, [r7, #3]
 801b300:	3301      	adds	r3, #1
 801b302:	b2db      	uxtb	r3, r3
 801b304:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801b308:	4619      	mov	r1, r3
 801b30a:	480b      	ldr	r0, [pc, #44]	; (801b338 <RadioSend+0x1f0>)
 801b30c:	f001 f980 	bl	801c610 <SUBGRF_SendPayload>
            break;
 801b310:	e000      	b.n	801b314 <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801b312:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801b314:	4b05      	ldr	r3, [pc, #20]	; (801b32c <RadioSend+0x1e4>)
 801b316:	685b      	ldr	r3, [r3, #4]
 801b318:	4619      	mov	r1, r3
 801b31a:	4808      	ldr	r0, [pc, #32]	; (801b33c <RadioSend+0x1f4>)
 801b31c:	f003 fa86 	bl	801e82c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801b320:	4806      	ldr	r0, [pc, #24]	; (801b33c <RadioSend+0x1f4>)
 801b322:	f003 f9a5 	bl	801e670 <UTIL_TIMER_Start>
}
 801b326:	3710      	adds	r7, #16
 801b328:	46bd      	mov	sp, r7
 801b32a:	bd80      	pop	{r7, pc}
 801b32c:	200023c0 	.word	0x200023c0
 801b330:	200023ce 	.word	0x200023ce
 801b334:	0801f694 	.word	0x0801f694
 801b338:	200022bc 	.word	0x200022bc
 801b33c:	2000241c 	.word	0x2000241c

0801b340 <RadioSleep>:

static void RadioSleep( void )
{
 801b340:	b580      	push	{r7, lr}
 801b342:	b082      	sub	sp, #8
 801b344:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801b346:	2300      	movs	r3, #0
 801b348:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801b34a:	793b      	ldrb	r3, [r7, #4]
 801b34c:	f043 0304 	orr.w	r3, r3, #4
 801b350:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801b352:	7938      	ldrb	r0, [r7, #4]
 801b354:	f001 fa38 	bl	801c7c8 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801b358:	2002      	movs	r0, #2
 801b35a:	f7e7 fae7 	bl	800292c <HAL_Delay>
}
 801b35e:	bf00      	nop
 801b360:	3708      	adds	r7, #8
 801b362:	46bd      	mov	sp, r7
 801b364:	bd80      	pop	{r7, pc}

0801b366 <RadioStandby>:

static void RadioStandby( void )
{
 801b366:	b580      	push	{r7, lr}
 801b368:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801b36a:	2000      	movs	r0, #0
 801b36c:	f001 fa5e 	bl	801c82c <SUBGRF_SetStandby>
}
 801b370:	bf00      	nop
 801b372:	bd80      	pop	{r7, pc}

0801b374 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801b374:	b580      	push	{r7, lr}
 801b376:	b082      	sub	sp, #8
 801b378:	af00      	add	r7, sp, #0
 801b37a:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 801b37c:	f002 fab3 	bl	801d8e6 <RFW_Is_Init>
 801b380:	4603      	mov	r3, r0
 801b382:	2b01      	cmp	r3, #1
 801b384:	d102      	bne.n	801b38c <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801b386:	f002 fad6 	bl	801d936 <RFW_ReceiveInit>
 801b38a:	e007      	b.n	801b39c <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801b38c:	2300      	movs	r3, #0
 801b38e:	2200      	movs	r2, #0
 801b390:	f240 2162 	movw	r1, #610	; 0x262
 801b394:	f240 2062 	movw	r0, #610	; 0x262
 801b398:	f001 fc18 	bl	801cbcc <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	2b00      	cmp	r3, #0
 801b3a0:	d006      	beq.n	801b3b0 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801b3a2:	6879      	ldr	r1, [r7, #4]
 801b3a4:	4811      	ldr	r0, [pc, #68]	; (801b3ec <RadioRx+0x78>)
 801b3a6:	f003 fa41 	bl	801e82c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801b3aa:	4810      	ldr	r0, [pc, #64]	; (801b3ec <RadioRx+0x78>)
 801b3ac:	f003 f960 	bl	801e670 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801b3b0:	4b0f      	ldr	r3, [pc, #60]	; (801b3f0 <RadioRx+0x7c>)
 801b3b2:	2200      	movs	r2, #0
 801b3b4:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801b3b6:	4b0e      	ldr	r3, [pc, #56]	; (801b3f0 <RadioRx+0x7c>)
 801b3b8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b3bc:	2100      	movs	r1, #0
 801b3be:	4618      	mov	r0, r3
 801b3c0:	f002 f8a8 	bl	801d514 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801b3c4:	4b0a      	ldr	r3, [pc, #40]	; (801b3f0 <RadioRx+0x7c>)
 801b3c6:	785b      	ldrb	r3, [r3, #1]
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d004      	beq.n	801b3d6 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801b3cc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801b3d0:	f001 fa68 	bl	801c8a4 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801b3d4:	e005      	b.n	801b3e2 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801b3d6:	4b06      	ldr	r3, [pc, #24]	; (801b3f0 <RadioRx+0x7c>)
 801b3d8:	689b      	ldr	r3, [r3, #8]
 801b3da:	019b      	lsls	r3, r3, #6
 801b3dc:	4618      	mov	r0, r3
 801b3de:	f001 fa61 	bl	801c8a4 <SUBGRF_SetRx>
}
 801b3e2:	bf00      	nop
 801b3e4:	3708      	adds	r7, #8
 801b3e6:	46bd      	mov	sp, r7
 801b3e8:	bd80      	pop	{r7, pc}
 801b3ea:	bf00      	nop
 801b3ec:	20002434 	.word	0x20002434
 801b3f0:	200023c0 	.word	0x200023c0

0801b3f4 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801b3f4:	b580      	push	{r7, lr}
 801b3f6:	b082      	sub	sp, #8
 801b3f8:	af00      	add	r7, sp, #0
 801b3fa:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 801b3fc:	f002 fa73 	bl	801d8e6 <RFW_Is_Init>
 801b400:	4603      	mov	r3, r0
 801b402:	2b01      	cmp	r3, #1
 801b404:	d102      	bne.n	801b40c <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801b406:	f002 fa96 	bl	801d936 <RFW_ReceiveInit>
 801b40a:	e007      	b.n	801b41c <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801b40c:	2300      	movs	r3, #0
 801b40e:	2200      	movs	r2, #0
 801b410:	f240 2162 	movw	r1, #610	; 0x262
 801b414:	f240 2062 	movw	r0, #610	; 0x262
 801b418:	f001 fbd8 	bl	801cbcc <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d006      	beq.n	801b430 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801b422:	6879      	ldr	r1, [r7, #4]
 801b424:	4811      	ldr	r0, [pc, #68]	; (801b46c <RadioRxBoosted+0x78>)
 801b426:	f003 fa01 	bl	801e82c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801b42a:	4810      	ldr	r0, [pc, #64]	; (801b46c <RadioRxBoosted+0x78>)
 801b42c:	f003 f920 	bl	801e670 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801b430:	4b0f      	ldr	r3, [pc, #60]	; (801b470 <RadioRxBoosted+0x7c>)
 801b432:	2200      	movs	r2, #0
 801b434:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801b436:	4b0e      	ldr	r3, [pc, #56]	; (801b470 <RadioRxBoosted+0x7c>)
 801b438:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b43c:	2100      	movs	r1, #0
 801b43e:	4618      	mov	r0, r3
 801b440:	f002 f868 	bl	801d514 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801b444:	4b0a      	ldr	r3, [pc, #40]	; (801b470 <RadioRxBoosted+0x7c>)
 801b446:	785b      	ldrb	r3, [r3, #1]
 801b448:	2b00      	cmp	r3, #0
 801b44a:	d004      	beq.n	801b456 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801b44c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801b450:	f001 fa48 	bl	801c8e4 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801b454:	e005      	b.n	801b462 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801b456:	4b06      	ldr	r3, [pc, #24]	; (801b470 <RadioRxBoosted+0x7c>)
 801b458:	689b      	ldr	r3, [r3, #8]
 801b45a:	019b      	lsls	r3, r3, #6
 801b45c:	4618      	mov	r0, r3
 801b45e:	f001 fa41 	bl	801c8e4 <SUBGRF_SetRxBoosted>
}
 801b462:	bf00      	nop
 801b464:	3708      	adds	r7, #8
 801b466:	46bd      	mov	sp, r7
 801b468:	bd80      	pop	{r7, pc}
 801b46a:	bf00      	nop
 801b46c:	20002434 	.word	0x20002434
 801b470:	200023c0 	.word	0x200023c0

0801b474 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801b474:	b580      	push	{r7, lr}
 801b476:	b082      	sub	sp, #8
 801b478:	af00      	add	r7, sp, #0
 801b47a:	6078      	str	r0, [r7, #4]
 801b47c:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	005a      	lsls	r2, r3, #1
 801b482:	683b      	ldr	r3, [r7, #0]
 801b484:	4413      	add	r3, r2
 801b486:	4a0c      	ldr	r2, [pc, #48]	; (801b4b8 <RadioSetRxDutyCycle+0x44>)
 801b488:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801b48a:	2300      	movs	r3, #0
 801b48c:	2200      	movs	r2, #0
 801b48e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b492:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b496:	f001 fb99 	bl	801cbcc <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801b49a:	4b07      	ldr	r3, [pc, #28]	; (801b4b8 <RadioSetRxDutyCycle+0x44>)
 801b49c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b4a0:	2100      	movs	r1, #0
 801b4a2:	4618      	mov	r0, r3
 801b4a4:	f002 f836 	bl	801d514 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801b4a8:	6839      	ldr	r1, [r7, #0]
 801b4aa:	6878      	ldr	r0, [r7, #4]
 801b4ac:	f001 fa3e 	bl	801c92c <SUBGRF_SetRxDutyCycle>
}
 801b4b0:	bf00      	nop
 801b4b2:	3708      	adds	r7, #8
 801b4b4:	46bd      	mov	sp, r7
 801b4b6:	bd80      	pop	{r7, pc}
 801b4b8:	200023c0 	.word	0x200023c0

0801b4bc <RadioStartCad>:

static void RadioStartCad( void )
{
 801b4bc:	b580      	push	{r7, lr}
 801b4be:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801b4c0:	4b09      	ldr	r3, [pc, #36]	; (801b4e8 <RadioStartCad+0x2c>)
 801b4c2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b4c6:	2100      	movs	r1, #0
 801b4c8:	4618      	mov	r0, r3
 801b4ca:	f002 f823 	bl	801d514 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801b4ce:	2300      	movs	r3, #0
 801b4d0:	2200      	movs	r2, #0
 801b4d2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801b4d6:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801b4da:	f001 fb77 	bl	801cbcc <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801b4de:	f001 fa51 	bl	801c984 <SUBGRF_SetCad>
}
 801b4e2:	bf00      	nop
 801b4e4:	bd80      	pop	{r7, pc}
 801b4e6:	bf00      	nop
 801b4e8:	200023c0 	.word	0x200023c0

0801b4ec <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801b4ec:	b580      	push	{r7, lr}
 801b4ee:	b084      	sub	sp, #16
 801b4f0:	af00      	add	r7, sp, #0
 801b4f2:	6078      	str	r0, [r7, #4]
 801b4f4:	460b      	mov	r3, r1
 801b4f6:	70fb      	strb	r3, [r7, #3]
 801b4f8:	4613      	mov	r3, r2
 801b4fa:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801b4fc:	883b      	ldrh	r3, [r7, #0]
 801b4fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b502:	fb02 f303 	mul.w	r3, r2, r3
 801b506:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801b508:	6878      	ldr	r0, [r7, #4]
 801b50a:	f001 fbbb 	bl	801cc84 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801b50e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801b512:	4618      	mov	r0, r3
 801b514:	f002 f826 	bl	801d564 <SUBGRF_SetRfTxPower>
 801b518:	4603      	mov	r3, r0
 801b51a:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801b51c:	7afb      	ldrb	r3, [r7, #11]
 801b51e:	2101      	movs	r1, #1
 801b520:	4618      	mov	r0, r3
 801b522:	f001 fff7 	bl	801d514 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801b526:	f001 fa3b 	bl	801c9a0 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801b52a:	68f9      	ldr	r1, [r7, #12]
 801b52c:	4804      	ldr	r0, [pc, #16]	; (801b540 <RadioSetTxContinuousWave+0x54>)
 801b52e:	f003 f97d 	bl	801e82c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801b532:	4803      	ldr	r0, [pc, #12]	; (801b540 <RadioSetTxContinuousWave+0x54>)
 801b534:	f003 f89c 	bl	801e670 <UTIL_TIMER_Start>
}
 801b538:	bf00      	nop
 801b53a:	3710      	adds	r7, #16
 801b53c:	46bd      	mov	sp, r7
 801b53e:	bd80      	pop	{r7, pc}
 801b540:	2000241c 	.word	0x2000241c

0801b544 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801b544:	b580      	push	{r7, lr}
 801b546:	b082      	sub	sp, #8
 801b548:	af00      	add	r7, sp, #0
 801b54a:	4603      	mov	r3, r0
 801b54c:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801b54e:	f001 fe5a 	bl	801d206 <SUBGRF_GetRssiInst>
 801b552:	4603      	mov	r3, r0
 801b554:	b21b      	sxth	r3, r3
}
 801b556:	4618      	mov	r0, r3
 801b558:	3708      	adds	r7, #8
 801b55a:	46bd      	mov	sp, r7
 801b55c:	bd80      	pop	{r7, pc}

0801b55e <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801b55e:	b580      	push	{r7, lr}
 801b560:	b082      	sub	sp, #8
 801b562:	af00      	add	r7, sp, #0
 801b564:	4603      	mov	r3, r0
 801b566:	460a      	mov	r2, r1
 801b568:	80fb      	strh	r3, [r7, #6]
 801b56a:	4613      	mov	r3, r2
 801b56c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801b56e:	797a      	ldrb	r2, [r7, #5]
 801b570:	88fb      	ldrh	r3, [r7, #6]
 801b572:	4611      	mov	r1, r2
 801b574:	4618      	mov	r0, r3
 801b576:	f001 fed9 	bl	801d32c <SUBGRF_WriteRegister>
}
 801b57a:	bf00      	nop
 801b57c:	3708      	adds	r7, #8
 801b57e:	46bd      	mov	sp, r7
 801b580:	bd80      	pop	{r7, pc}

0801b582 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801b582:	b580      	push	{r7, lr}
 801b584:	b082      	sub	sp, #8
 801b586:	af00      	add	r7, sp, #0
 801b588:	4603      	mov	r3, r0
 801b58a:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801b58c:	88fb      	ldrh	r3, [r7, #6]
 801b58e:	4618      	mov	r0, r3
 801b590:	f001 fee0 	bl	801d354 <SUBGRF_ReadRegister>
 801b594:	4603      	mov	r3, r0
}
 801b596:	4618      	mov	r0, r3
 801b598:	3708      	adds	r7, #8
 801b59a:	46bd      	mov	sp, r7
 801b59c:	bd80      	pop	{r7, pc}

0801b59e <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801b59e:	b580      	push	{r7, lr}
 801b5a0:	b082      	sub	sp, #8
 801b5a2:	af00      	add	r7, sp, #0
 801b5a4:	4603      	mov	r3, r0
 801b5a6:	6039      	str	r1, [r7, #0]
 801b5a8:	80fb      	strh	r3, [r7, #6]
 801b5aa:	4613      	mov	r3, r2
 801b5ac:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801b5ae:	797b      	ldrb	r3, [r7, #5]
 801b5b0:	b29a      	uxth	r2, r3
 801b5b2:	88fb      	ldrh	r3, [r7, #6]
 801b5b4:	6839      	ldr	r1, [r7, #0]
 801b5b6:	4618      	mov	r0, r3
 801b5b8:	f001 fee0 	bl	801d37c <SUBGRF_WriteRegisters>
}
 801b5bc:	bf00      	nop
 801b5be:	3708      	adds	r7, #8
 801b5c0:	46bd      	mov	sp, r7
 801b5c2:	bd80      	pop	{r7, pc}

0801b5c4 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801b5c4:	b580      	push	{r7, lr}
 801b5c6:	b082      	sub	sp, #8
 801b5c8:	af00      	add	r7, sp, #0
 801b5ca:	4603      	mov	r3, r0
 801b5cc:	6039      	str	r1, [r7, #0]
 801b5ce:	80fb      	strh	r3, [r7, #6]
 801b5d0:	4613      	mov	r3, r2
 801b5d2:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801b5d4:	797b      	ldrb	r3, [r7, #5]
 801b5d6:	b29a      	uxth	r2, r3
 801b5d8:	88fb      	ldrh	r3, [r7, #6]
 801b5da:	6839      	ldr	r1, [r7, #0]
 801b5dc:	4618      	mov	r0, r3
 801b5de:	f001 feef 	bl	801d3c0 <SUBGRF_ReadRegisters>
}
 801b5e2:	bf00      	nop
 801b5e4:	3708      	adds	r7, #8
 801b5e6:	46bd      	mov	sp, r7
 801b5e8:	bd80      	pop	{r7, pc}
	...

0801b5ec <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801b5ec:	b580      	push	{r7, lr}
 801b5ee:	b082      	sub	sp, #8
 801b5f0:	af00      	add	r7, sp, #0
 801b5f2:	4603      	mov	r3, r0
 801b5f4:	460a      	mov	r2, r1
 801b5f6:	71fb      	strb	r3, [r7, #7]
 801b5f8:	4613      	mov	r3, r2
 801b5fa:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801b5fc:	79fb      	ldrb	r3, [r7, #7]
 801b5fe:	2b01      	cmp	r3, #1
 801b600:	d10a      	bne.n	801b618 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801b602:	4a0e      	ldr	r2, [pc, #56]	; (801b63c <RadioSetMaxPayloadLength+0x50>)
 801b604:	79bb      	ldrb	r3, [r7, #6]
 801b606:	7013      	strb	r3, [r2, #0]
 801b608:	4b0c      	ldr	r3, [pc, #48]	; (801b63c <RadioSetMaxPayloadLength+0x50>)
 801b60a:	781a      	ldrb	r2, [r3, #0]
 801b60c:	4b0c      	ldr	r3, [pc, #48]	; (801b640 <RadioSetMaxPayloadLength+0x54>)
 801b60e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b610:	480c      	ldr	r0, [pc, #48]	; (801b644 <RadioSetMaxPayloadLength+0x58>)
 801b612:	f001 fd43 	bl	801d09c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801b616:	e00d      	b.n	801b634 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801b618:	4b09      	ldr	r3, [pc, #36]	; (801b640 <RadioSetMaxPayloadLength+0x54>)
 801b61a:	7d5b      	ldrb	r3, [r3, #21]
 801b61c:	2b01      	cmp	r3, #1
 801b61e:	d109      	bne.n	801b634 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801b620:	4a06      	ldr	r2, [pc, #24]	; (801b63c <RadioSetMaxPayloadLength+0x50>)
 801b622:	79bb      	ldrb	r3, [r7, #6]
 801b624:	7013      	strb	r3, [r2, #0]
 801b626:	4b05      	ldr	r3, [pc, #20]	; (801b63c <RadioSetMaxPayloadLength+0x50>)
 801b628:	781a      	ldrb	r2, [r3, #0]
 801b62a:	4b05      	ldr	r3, [pc, #20]	; (801b640 <RadioSetMaxPayloadLength+0x54>)
 801b62c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b62e:	4805      	ldr	r0, [pc, #20]	; (801b644 <RadioSetMaxPayloadLength+0x58>)
 801b630:	f001 fd34 	bl	801d09c <SUBGRF_SetPacketParams>
}
 801b634:	bf00      	nop
 801b636:	3708      	adds	r7, #8
 801b638:	46bd      	mov	sp, r7
 801b63a:	bd80      	pop	{r7, pc}
 801b63c:	20000140 	.word	0x20000140
 801b640:	200023c0 	.word	0x200023c0
 801b644:	200023ce 	.word	0x200023ce

0801b648 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801b648:	b580      	push	{r7, lr}
 801b64a:	b082      	sub	sp, #8
 801b64c:	af00      	add	r7, sp, #0
 801b64e:	4603      	mov	r3, r0
 801b650:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801b652:	4a13      	ldr	r2, [pc, #76]	; (801b6a0 <RadioSetPublicNetwork+0x58>)
 801b654:	79fb      	ldrb	r3, [r7, #7]
 801b656:	7313      	strb	r3, [r2, #12]
 801b658:	4b11      	ldr	r3, [pc, #68]	; (801b6a0 <RadioSetPublicNetwork+0x58>)
 801b65a:	7b1a      	ldrb	r2, [r3, #12]
 801b65c:	4b10      	ldr	r3, [pc, #64]	; (801b6a0 <RadioSetPublicNetwork+0x58>)
 801b65e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801b660:	2001      	movs	r0, #1
 801b662:	f7ff f82d 	bl	801a6c0 <RadioSetModem>
    if( enable == true )
 801b666:	79fb      	ldrb	r3, [r7, #7]
 801b668:	2b00      	cmp	r3, #0
 801b66a:	d00a      	beq.n	801b682 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801b66c:	2134      	movs	r1, #52	; 0x34
 801b66e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801b672:	f001 fe5b 	bl	801d32c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801b676:	2144      	movs	r1, #68	; 0x44
 801b678:	f240 7041 	movw	r0, #1857	; 0x741
 801b67c:	f001 fe56 	bl	801d32c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801b680:	e009      	b.n	801b696 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801b682:	2114      	movs	r1, #20
 801b684:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801b688:	f001 fe50 	bl	801d32c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801b68c:	2124      	movs	r1, #36	; 0x24
 801b68e:	f240 7041 	movw	r0, #1857	; 0x741
 801b692:	f001 fe4b 	bl	801d32c <SUBGRF_WriteRegister>
}
 801b696:	bf00      	nop
 801b698:	3708      	adds	r7, #8
 801b69a:	46bd      	mov	sp, r7
 801b69c:	bd80      	pop	{r7, pc}
 801b69e:	bf00      	nop
 801b6a0:	200023c0 	.word	0x200023c0

0801b6a4 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801b6a4:	b580      	push	{r7, lr}
 801b6a6:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801b6a8:	f001 ff90 	bl	801d5cc <SUBGRF_GetRadioWakeUpTime>
 801b6ac:	4603      	mov	r3, r0
 801b6ae:	3303      	adds	r3, #3
}
 801b6b0:	4618      	mov	r0, r3
 801b6b2:	bd80      	pop	{r7, pc}

0801b6b4 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801b6b4:	b580      	push	{r7, lr}
 801b6b6:	b082      	sub	sp, #8
 801b6b8:	af00      	add	r7, sp, #0
 801b6ba:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801b6bc:	f000 f80e 	bl	801b6dc <RadioOnTxTimeoutProcess>
}
 801b6c0:	bf00      	nop
 801b6c2:	3708      	adds	r7, #8
 801b6c4:	46bd      	mov	sp, r7
 801b6c6:	bd80      	pop	{r7, pc}

0801b6c8 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801b6c8:	b580      	push	{r7, lr}
 801b6ca:	b082      	sub	sp, #8
 801b6cc:	af00      	add	r7, sp, #0
 801b6ce:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801b6d0:	f000 f818 	bl	801b704 <RadioOnRxTimeoutProcess>
}
 801b6d4:	bf00      	nop
 801b6d6:	3708      	adds	r7, #8
 801b6d8:	46bd      	mov	sp, r7
 801b6da:	bd80      	pop	{r7, pc}

0801b6dc <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801b6dc:	b580      	push	{r7, lr}
 801b6de:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b6e0:	4b07      	ldr	r3, [pc, #28]	; (801b700 <RadioOnTxTimeoutProcess+0x24>)
 801b6e2:	681b      	ldr	r3, [r3, #0]
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	d008      	beq.n	801b6fa <RadioOnTxTimeoutProcess+0x1e>
 801b6e8:	4b05      	ldr	r3, [pc, #20]	; (801b700 <RadioOnTxTimeoutProcess+0x24>)
 801b6ea:	681b      	ldr	r3, [r3, #0]
 801b6ec:	685b      	ldr	r3, [r3, #4]
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	d003      	beq.n	801b6fa <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801b6f2:	4b03      	ldr	r3, [pc, #12]	; (801b700 <RadioOnTxTimeoutProcess+0x24>)
 801b6f4:	681b      	ldr	r3, [r3, #0]
 801b6f6:	685b      	ldr	r3, [r3, #4]
 801b6f8:	4798      	blx	r3
    }
}
 801b6fa:	bf00      	nop
 801b6fc:	bd80      	pop	{r7, pc}
 801b6fe:	bf00      	nop
 801b700:	200023bc 	.word	0x200023bc

0801b704 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801b704:	b580      	push	{r7, lr}
 801b706:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b708:	4b07      	ldr	r3, [pc, #28]	; (801b728 <RadioOnRxTimeoutProcess+0x24>)
 801b70a:	681b      	ldr	r3, [r3, #0]
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	d008      	beq.n	801b722 <RadioOnRxTimeoutProcess+0x1e>
 801b710:	4b05      	ldr	r3, [pc, #20]	; (801b728 <RadioOnRxTimeoutProcess+0x24>)
 801b712:	681b      	ldr	r3, [r3, #0]
 801b714:	68db      	ldr	r3, [r3, #12]
 801b716:	2b00      	cmp	r3, #0
 801b718:	d003      	beq.n	801b722 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801b71a:	4b03      	ldr	r3, [pc, #12]	; (801b728 <RadioOnRxTimeoutProcess+0x24>)
 801b71c:	681b      	ldr	r3, [r3, #0]
 801b71e:	68db      	ldr	r3, [r3, #12]
 801b720:	4798      	blx	r3
    }
}
 801b722:	bf00      	nop
 801b724:	bd80      	pop	{r7, pc}
 801b726:	bf00      	nop
 801b728:	200023bc 	.word	0x200023bc

0801b72c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801b72c:	b580      	push	{r7, lr}
 801b72e:	b082      	sub	sp, #8
 801b730:	af00      	add	r7, sp, #0
 801b732:	4603      	mov	r3, r0
 801b734:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801b736:	4a05      	ldr	r2, [pc, #20]	; (801b74c <RadioOnDioIrq+0x20>)
 801b738:	88fb      	ldrh	r3, [r7, #6]
 801b73a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801b73e:	f000 f807 	bl	801b750 <RadioIrqProcess>
}
 801b742:	bf00      	nop
 801b744:	3708      	adds	r7, #8
 801b746:	46bd      	mov	sp, r7
 801b748:	bd80      	pop	{r7, pc}
 801b74a:	bf00      	nop
 801b74c:	200023c0 	.word	0x200023c0

0801b750 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801b750:	b590      	push	{r4, r7, lr}
 801b752:	b083      	sub	sp, #12
 801b754:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801b756:	2300      	movs	r3, #0
 801b758:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801b75a:	2300      	movs	r3, #0
 801b75c:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801b75e:	4ba8      	ldr	r3, [pc, #672]	; (801ba00 <RadioIrqProcess+0x2b0>)
 801b760:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801b764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b768:	f000 810c 	beq.w	801b984 <RadioIrqProcess+0x234>
 801b76c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b770:	f300 81e8 	bgt.w	801bb44 <RadioIrqProcess+0x3f4>
 801b774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b778:	f000 80f0 	beq.w	801b95c <RadioIrqProcess+0x20c>
 801b77c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b780:	f300 81e0 	bgt.w	801bb44 <RadioIrqProcess+0x3f4>
 801b784:	2b80      	cmp	r3, #128	; 0x80
 801b786:	f000 80d5 	beq.w	801b934 <RadioIrqProcess+0x1e4>
 801b78a:	2b80      	cmp	r3, #128	; 0x80
 801b78c:	f300 81da 	bgt.w	801bb44 <RadioIrqProcess+0x3f4>
 801b790:	2b20      	cmp	r3, #32
 801b792:	dc49      	bgt.n	801b828 <RadioIrqProcess+0xd8>
 801b794:	2b00      	cmp	r3, #0
 801b796:	f340 81d5 	ble.w	801bb44 <RadioIrqProcess+0x3f4>
 801b79a:	3b01      	subs	r3, #1
 801b79c:	2b1f      	cmp	r3, #31
 801b79e:	f200 81d1 	bhi.w	801bb44 <RadioIrqProcess+0x3f4>
 801b7a2:	a201      	add	r2, pc, #4	; (adr r2, 801b7a8 <RadioIrqProcess+0x58>)
 801b7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b7a8:	0801b831 	.word	0x0801b831
 801b7ac:	0801b86b 	.word	0x0801b86b
 801b7b0:	0801bb45 	.word	0x0801bb45
 801b7b4:	0801ba21 	.word	0x0801ba21
 801b7b8:	0801bb45 	.word	0x0801bb45
 801b7bc:	0801bb45 	.word	0x0801bb45
 801b7c0:	0801bb45 	.word	0x0801bb45
 801b7c4:	0801ba9d 	.word	0x0801ba9d
 801b7c8:	0801bb45 	.word	0x0801bb45
 801b7cc:	0801bb45 	.word	0x0801bb45
 801b7d0:	0801bb45 	.word	0x0801bb45
 801b7d4:	0801bb45 	.word	0x0801bb45
 801b7d8:	0801bb45 	.word	0x0801bb45
 801b7dc:	0801bb45 	.word	0x0801bb45
 801b7e0:	0801bb45 	.word	0x0801bb45
 801b7e4:	0801bab9 	.word	0x0801bab9
 801b7e8:	0801bb45 	.word	0x0801bb45
 801b7ec:	0801bb45 	.word	0x0801bb45
 801b7f0:	0801bb45 	.word	0x0801bb45
 801b7f4:	0801bb45 	.word	0x0801bb45
 801b7f8:	0801bb45 	.word	0x0801bb45
 801b7fc:	0801bb45 	.word	0x0801bb45
 801b800:	0801bb45 	.word	0x0801bb45
 801b804:	0801bb45 	.word	0x0801bb45
 801b808:	0801bb45 	.word	0x0801bb45
 801b80c:	0801bb45 	.word	0x0801bb45
 801b810:	0801bb45 	.word	0x0801bb45
 801b814:	0801bb45 	.word	0x0801bb45
 801b818:	0801bb45 	.word	0x0801bb45
 801b81c:	0801bb45 	.word	0x0801bb45
 801b820:	0801bb45 	.word	0x0801bb45
 801b824:	0801bac7 	.word	0x0801bac7
 801b828:	2b40      	cmp	r3, #64	; 0x40
 801b82a:	f000 816d 	beq.w	801bb08 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 801b82e:	e189      	b.n	801bb44 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801b830:	4874      	ldr	r0, [pc, #464]	; (801ba04 <RadioIrqProcess+0x2b4>)
 801b832:	f002 ff8b 	bl	801e74c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801b836:	2000      	movs	r0, #0
 801b838:	f000 fff8 	bl	801c82c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801b83c:	f002 f85a 	bl	801d8f4 <RFW_Is_LongPacketModeEnabled>
 801b840:	4603      	mov	r3, r0
 801b842:	2b01      	cmp	r3, #1
 801b844:	d101      	bne.n	801b84a <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801b846:	f002 f87e 	bl	801d946 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801b84a:	4b6f      	ldr	r3, [pc, #444]	; (801ba08 <RadioIrqProcess+0x2b8>)
 801b84c:	681b      	ldr	r3, [r3, #0]
 801b84e:	2b00      	cmp	r3, #0
 801b850:	f000 817a 	beq.w	801bb48 <RadioIrqProcess+0x3f8>
 801b854:	4b6c      	ldr	r3, [pc, #432]	; (801ba08 <RadioIrqProcess+0x2b8>)
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	681b      	ldr	r3, [r3, #0]
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	f000 8174 	beq.w	801bb48 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801b860:	4b69      	ldr	r3, [pc, #420]	; (801ba08 <RadioIrqProcess+0x2b8>)
 801b862:	681b      	ldr	r3, [r3, #0]
 801b864:	681b      	ldr	r3, [r3, #0]
 801b866:	4798      	blx	r3
        break;
 801b868:	e16e      	b.n	801bb48 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801b86a:	4868      	ldr	r0, [pc, #416]	; (801ba0c <RadioIrqProcess+0x2bc>)
 801b86c:	f002 ff6e 	bl	801e74c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801b870:	4b63      	ldr	r3, [pc, #396]	; (801ba00 <RadioIrqProcess+0x2b0>)
 801b872:	785b      	ldrb	r3, [r3, #1]
 801b874:	f083 0301 	eor.w	r3, r3, #1
 801b878:	b2db      	uxtb	r3, r3
 801b87a:	2b00      	cmp	r3, #0
 801b87c:	d014      	beq.n	801b8a8 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801b87e:	2000      	movs	r0, #0
 801b880:	f000 ffd4 	bl	801c82c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801b884:	2100      	movs	r1, #0
 801b886:	f640 1002 	movw	r0, #2306	; 0x902
 801b88a:	f001 fd4f 	bl	801d32c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801b88e:	f640 1044 	movw	r0, #2372	; 0x944
 801b892:	f001 fd5f 	bl	801d354 <SUBGRF_ReadRegister>
 801b896:	4603      	mov	r3, r0
 801b898:	f043 0302 	orr.w	r3, r3, #2
 801b89c:	b2db      	uxtb	r3, r3
 801b89e:	4619      	mov	r1, r3
 801b8a0:	f640 1044 	movw	r0, #2372	; 0x944
 801b8a4:	f001 fd42 	bl	801d32c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801b8a8:	1dfb      	adds	r3, r7, #7
 801b8aa:	22ff      	movs	r2, #255	; 0xff
 801b8ac:	4619      	mov	r1, r3
 801b8ae:	4858      	ldr	r0, [pc, #352]	; (801ba10 <RadioIrqProcess+0x2c0>)
 801b8b0:	f000 fe8c 	bl	801c5cc <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801b8b4:	4857      	ldr	r0, [pc, #348]	; (801ba14 <RadioIrqProcess+0x2c4>)
 801b8b6:	f001 fce7 	bl	801d288 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b8ba:	4b53      	ldr	r3, [pc, #332]	; (801ba08 <RadioIrqProcess+0x2b8>)
 801b8bc:	681b      	ldr	r3, [r3, #0]
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	d036      	beq.n	801b930 <RadioIrqProcess+0x1e0>
 801b8c2:	4b51      	ldr	r3, [pc, #324]	; (801ba08 <RadioIrqProcess+0x2b8>)
 801b8c4:	681b      	ldr	r3, [r3, #0]
 801b8c6:	689b      	ldr	r3, [r3, #8]
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	d031      	beq.n	801b930 <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 801b8cc:	4b4c      	ldr	r3, [pc, #304]	; (801ba00 <RadioIrqProcess+0x2b0>)
 801b8ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b8d2:	2b01      	cmp	r3, #1
 801b8d4:	d10e      	bne.n	801b8f4 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 801b8d6:	4b4c      	ldr	r3, [pc, #304]	; (801ba08 <RadioIrqProcess+0x2b8>)
 801b8d8:	681b      	ldr	r3, [r3, #0]
 801b8da:	689c      	ldr	r4, [r3, #8]
 801b8dc:	79fb      	ldrb	r3, [r7, #7]
 801b8de:	b299      	uxth	r1, r3
 801b8e0:	4b47      	ldr	r3, [pc, #284]	; (801ba00 <RadioIrqProcess+0x2b0>)
 801b8e2:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801b8e6:	b21a      	sxth	r2, r3
 801b8e8:	4b45      	ldr	r3, [pc, #276]	; (801ba00 <RadioIrqProcess+0x2b0>)
 801b8ea:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801b8ee:	4848      	ldr	r0, [pc, #288]	; (801ba10 <RadioIrqProcess+0x2c0>)
 801b8f0:	47a0      	blx	r4
                break;
 801b8f2:	e01e      	b.n	801b932 <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801b8f4:	4b42      	ldr	r3, [pc, #264]	; (801ba00 <RadioIrqProcess+0x2b0>)
 801b8f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b8f8:	463a      	mov	r2, r7
 801b8fa:	4611      	mov	r1, r2
 801b8fc:	4618      	mov	r0, r3
 801b8fe:	f001 ff47 	bl	801d790 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 801b902:	4b41      	ldr	r3, [pc, #260]	; (801ba08 <RadioIrqProcess+0x2b8>)
 801b904:	681b      	ldr	r3, [r3, #0]
 801b906:	689c      	ldr	r4, [r3, #8]
 801b908:	79fb      	ldrb	r3, [r7, #7]
 801b90a:	b299      	uxth	r1, r3
 801b90c:	4b3c      	ldr	r3, [pc, #240]	; (801ba00 <RadioIrqProcess+0x2b0>)
 801b90e:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801b912:	b218      	sxth	r0, r3
 801b914:	683b      	ldr	r3, [r7, #0]
 801b916:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801b91a:	4a3f      	ldr	r2, [pc, #252]	; (801ba18 <RadioIrqProcess+0x2c8>)
 801b91c:	fb82 c203 	smull	ip, r2, r2, r3
 801b920:	1192      	asrs	r2, r2, #6
 801b922:	17db      	asrs	r3, r3, #31
 801b924:	1ad3      	subs	r3, r2, r3
 801b926:	b25b      	sxtb	r3, r3
 801b928:	4602      	mov	r2, r0
 801b92a:	4839      	ldr	r0, [pc, #228]	; (801ba10 <RadioIrqProcess+0x2c0>)
 801b92c:	47a0      	blx	r4
                break;
 801b92e:	e000      	b.n	801b932 <RadioIrqProcess+0x1e2>
        }
 801b930:	bf00      	nop
        break;
 801b932:	e118      	b.n	801bb66 <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 801b934:	2000      	movs	r0, #0
 801b936:	f000 ff79 	bl	801c82c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b93a:	4b33      	ldr	r3, [pc, #204]	; (801ba08 <RadioIrqProcess+0x2b8>)
 801b93c:	681b      	ldr	r3, [r3, #0]
 801b93e:	2b00      	cmp	r3, #0
 801b940:	f000 8104 	beq.w	801bb4c <RadioIrqProcess+0x3fc>
 801b944:	4b30      	ldr	r3, [pc, #192]	; (801ba08 <RadioIrqProcess+0x2b8>)
 801b946:	681b      	ldr	r3, [r3, #0]
 801b948:	699b      	ldr	r3, [r3, #24]
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	f000 80fe 	beq.w	801bb4c <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 801b950:	4b2d      	ldr	r3, [pc, #180]	; (801ba08 <RadioIrqProcess+0x2b8>)
 801b952:	681b      	ldr	r3, [r3, #0]
 801b954:	699b      	ldr	r3, [r3, #24]
 801b956:	2000      	movs	r0, #0
 801b958:	4798      	blx	r3
        break;
 801b95a:	e0f7      	b.n	801bb4c <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801b95c:	2000      	movs	r0, #0
 801b95e:	f000 ff65 	bl	801c82c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b962:	4b29      	ldr	r3, [pc, #164]	; (801ba08 <RadioIrqProcess+0x2b8>)
 801b964:	681b      	ldr	r3, [r3, #0]
 801b966:	2b00      	cmp	r3, #0
 801b968:	f000 80f2 	beq.w	801bb50 <RadioIrqProcess+0x400>
 801b96c:	4b26      	ldr	r3, [pc, #152]	; (801ba08 <RadioIrqProcess+0x2b8>)
 801b96e:	681b      	ldr	r3, [r3, #0]
 801b970:	699b      	ldr	r3, [r3, #24]
 801b972:	2b00      	cmp	r3, #0
 801b974:	f000 80ec 	beq.w	801bb50 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 801b978:	4b23      	ldr	r3, [pc, #140]	; (801ba08 <RadioIrqProcess+0x2b8>)
 801b97a:	681b      	ldr	r3, [r3, #0]
 801b97c:	699b      	ldr	r3, [r3, #24]
 801b97e:	2001      	movs	r0, #1
 801b980:	4798      	blx	r3
        break;
 801b982:	e0e5      	b.n	801bb50 <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801b984:	4b25      	ldr	r3, [pc, #148]	; (801ba1c <RadioIrqProcess+0x2cc>)
 801b986:	2201      	movs	r2, #1
 801b988:	2100      	movs	r1, #0
 801b98a:	2002      	movs	r0, #2
 801b98c:	f003 f8e8 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801b990:	f000 fe02 	bl	801c598 <SUBGRF_GetOperatingMode>
 801b994:	4603      	mov	r3, r0
 801b996:	2b04      	cmp	r3, #4
 801b998:	d115      	bne.n	801b9c6 <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 801b99a:	481a      	ldr	r0, [pc, #104]	; (801ba04 <RadioIrqProcess+0x2b4>)
 801b99c:	f002 fed6 	bl	801e74c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801b9a0:	2000      	movs	r0, #0
 801b9a2:	f000 ff43 	bl	801c82c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b9a6:	4b18      	ldr	r3, [pc, #96]	; (801ba08 <RadioIrqProcess+0x2b8>)
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	f000 80d2 	beq.w	801bb54 <RadioIrqProcess+0x404>
 801b9b0:	4b15      	ldr	r3, [pc, #84]	; (801ba08 <RadioIrqProcess+0x2b8>)
 801b9b2:	681b      	ldr	r3, [r3, #0]
 801b9b4:	685b      	ldr	r3, [r3, #4]
 801b9b6:	2b00      	cmp	r3, #0
 801b9b8:	f000 80cc 	beq.w	801bb54 <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 801b9bc:	4b12      	ldr	r3, [pc, #72]	; (801ba08 <RadioIrqProcess+0x2b8>)
 801b9be:	681b      	ldr	r3, [r3, #0]
 801b9c0:	685b      	ldr	r3, [r3, #4]
 801b9c2:	4798      	blx	r3
        break;
 801b9c4:	e0c6      	b.n	801bb54 <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801b9c6:	f000 fde7 	bl	801c598 <SUBGRF_GetOperatingMode>
 801b9ca:	4603      	mov	r3, r0
 801b9cc:	2b05      	cmp	r3, #5
 801b9ce:	f040 80c1 	bne.w	801bb54 <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 801b9d2:	480e      	ldr	r0, [pc, #56]	; (801ba0c <RadioIrqProcess+0x2bc>)
 801b9d4:	f002 feba 	bl	801e74c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801b9d8:	2000      	movs	r0, #0
 801b9da:	f000 ff27 	bl	801c82c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b9de:	4b0a      	ldr	r3, [pc, #40]	; (801ba08 <RadioIrqProcess+0x2b8>)
 801b9e0:	681b      	ldr	r3, [r3, #0]
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	f000 80b6 	beq.w	801bb54 <RadioIrqProcess+0x404>
 801b9e8:	4b07      	ldr	r3, [pc, #28]	; (801ba08 <RadioIrqProcess+0x2b8>)
 801b9ea:	681b      	ldr	r3, [r3, #0]
 801b9ec:	68db      	ldr	r3, [r3, #12]
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	f000 80b0 	beq.w	801bb54 <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 801b9f4:	4b04      	ldr	r3, [pc, #16]	; (801ba08 <RadioIrqProcess+0x2b8>)
 801b9f6:	681b      	ldr	r3, [r3, #0]
 801b9f8:	68db      	ldr	r3, [r3, #12]
 801b9fa:	4798      	blx	r3
        break;
 801b9fc:	e0aa      	b.n	801bb54 <RadioIrqProcess+0x404>
 801b9fe:	bf00      	nop
 801ba00:	200023c0 	.word	0x200023c0
 801ba04:	2000241c 	.word	0x2000241c
 801ba08:	200023bc 	.word	0x200023bc
 801ba0c:	20002434 	.word	0x20002434
 801ba10:	200022bc 	.word	0x200022bc
 801ba14:	200023e4 	.word	0x200023e4
 801ba18:	10624dd3 	.word	0x10624dd3
 801ba1c:	0801f6ac 	.word	0x0801f6ac
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801ba20:	4b53      	ldr	r3, [pc, #332]	; (801bb70 <RadioIrqProcess+0x420>)
 801ba22:	2201      	movs	r2, #1
 801ba24:	2100      	movs	r1, #0
 801ba26:	2002      	movs	r0, #2
 801ba28:	f003 f89a 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801ba2c:	4b51      	ldr	r3, [pc, #324]	; (801bb74 <RadioIrqProcess+0x424>)
 801ba2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ba30:	2b00      	cmp	r3, #0
 801ba32:	f000 8091 	beq.w	801bb58 <RadioIrqProcess+0x408>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 801ba36:	4a50      	ldr	r2, [pc, #320]	; (801bb78 <RadioIrqProcess+0x428>)
 801ba38:	4b4e      	ldr	r3, [pc, #312]	; (801bb74 <RadioIrqProcess+0x424>)
 801ba3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ba3c:	0c1b      	lsrs	r3, r3, #16
 801ba3e:	b2db      	uxtb	r3, r3
 801ba40:	4619      	mov	r1, r3
 801ba42:	f640 1003 	movw	r0, #2307	; 0x903
 801ba46:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 801ba48:	4a4b      	ldr	r2, [pc, #300]	; (801bb78 <RadioIrqProcess+0x428>)
 801ba4a:	4b4a      	ldr	r3, [pc, #296]	; (801bb74 <RadioIrqProcess+0x424>)
 801ba4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ba4e:	0a1b      	lsrs	r3, r3, #8
 801ba50:	b2db      	uxtb	r3, r3
 801ba52:	4619      	mov	r1, r3
 801ba54:	f640 1004 	movw	r0, #2308	; 0x904
 801ba58:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 801ba5a:	4a47      	ldr	r2, [pc, #284]	; (801bb78 <RadioIrqProcess+0x428>)
 801ba5c:	4b45      	ldr	r3, [pc, #276]	; (801bb74 <RadioIrqProcess+0x424>)
 801ba5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ba60:	b2db      	uxtb	r3, r3
 801ba62:	4619      	mov	r1, r3
 801ba64:	f640 1005 	movw	r0, #2309	; 0x905
 801ba68:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 801ba6a:	4c43      	ldr	r4, [pc, #268]	; (801bb78 <RadioIrqProcess+0x428>)
 801ba6c:	4b43      	ldr	r3, [pc, #268]	; (801bb7c <RadioIrqProcess+0x42c>)
 801ba6e:	f640 1002 	movw	r0, #2306	; 0x902
 801ba72:	4798      	blx	r3
 801ba74:	4603      	mov	r3, r0
 801ba76:	f043 0301 	orr.w	r3, r3, #1
 801ba7a:	b2db      	uxtb	r3, r3
 801ba7c:	4619      	mov	r1, r3
 801ba7e:	f640 1002 	movw	r0, #2306	; 0x902
 801ba82:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 801ba84:	4b3b      	ldr	r3, [pc, #236]	; (801bb74 <RadioIrqProcess+0x424>)
 801ba86:	2200      	movs	r2, #0
 801ba88:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801ba8a:	2300      	movs	r3, #0
 801ba8c:	2200      	movs	r2, #0
 801ba8e:	f240 2162 	movw	r1, #610	; 0x262
 801ba92:	f240 2062 	movw	r0, #610	; 0x262
 801ba96:	f001 f899 	bl	801cbcc <SUBGRF_SetDioIrqParams>
        break;
 801ba9a:	e05d      	b.n	801bb58 <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801ba9c:	4b38      	ldr	r3, [pc, #224]	; (801bb80 <RadioIrqProcess+0x430>)
 801ba9e:	2201      	movs	r2, #1
 801baa0:	2100      	movs	r1, #0
 801baa2:	2002      	movs	r0, #2
 801baa4:	f003 f85c 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801baa8:	f001 ff1d 	bl	801d8e6 <RFW_Is_Init>
 801baac:	4603      	mov	r3, r0
 801baae:	2b01      	cmp	r3, #1
 801bab0:	d154      	bne.n	801bb5c <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 801bab2:	f001 ff4e 	bl	801d952 <RFW_ReceivePayload>
        break;
 801bab6:	e051      	b.n	801bb5c <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801bab8:	4b32      	ldr	r3, [pc, #200]	; (801bb84 <RadioIrqProcess+0x434>)
 801baba:	2201      	movs	r2, #1
 801babc:	2100      	movs	r1, #0
 801babe:	2002      	movs	r0, #2
 801bac0:	f003 f84e 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801bac4:	e04f      	b.n	801bb66 <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 801bac6:	4830      	ldr	r0, [pc, #192]	; (801bb88 <RadioIrqProcess+0x438>)
 801bac8:	f002 fe40 	bl	801e74c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801bacc:	4b29      	ldr	r3, [pc, #164]	; (801bb74 <RadioIrqProcess+0x424>)
 801bace:	785b      	ldrb	r3, [r3, #1]
 801bad0:	f083 0301 	eor.w	r3, r3, #1
 801bad4:	b2db      	uxtb	r3, r3
 801bad6:	2b00      	cmp	r3, #0
 801bad8:	d002      	beq.n	801bae0 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801bada:	2000      	movs	r0, #0
 801badc:	f000 fea6 	bl	801c82c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801bae0:	4b2a      	ldr	r3, [pc, #168]	; (801bb8c <RadioIrqProcess+0x43c>)
 801bae2:	681b      	ldr	r3, [r3, #0]
 801bae4:	2b00      	cmp	r3, #0
 801bae6:	d03b      	beq.n	801bb60 <RadioIrqProcess+0x410>
 801bae8:	4b28      	ldr	r3, [pc, #160]	; (801bb8c <RadioIrqProcess+0x43c>)
 801baea:	681b      	ldr	r3, [r3, #0]
 801baec:	68db      	ldr	r3, [r3, #12]
 801baee:	2b00      	cmp	r3, #0
 801baf0:	d036      	beq.n	801bb60 <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 801baf2:	4b26      	ldr	r3, [pc, #152]	; (801bb8c <RadioIrqProcess+0x43c>)
 801baf4:	681b      	ldr	r3, [r3, #0]
 801baf6:	68db      	ldr	r3, [r3, #12]
 801baf8:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801bafa:	4b25      	ldr	r3, [pc, #148]	; (801bb90 <RadioIrqProcess+0x440>)
 801bafc:	2201      	movs	r2, #1
 801bafe:	2100      	movs	r1, #0
 801bb00:	2002      	movs	r0, #2
 801bb02:	f003 f82d 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801bb06:	e02b      	b.n	801bb60 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801bb08:	4b22      	ldr	r3, [pc, #136]	; (801bb94 <RadioIrqProcess+0x444>)
 801bb0a:	2201      	movs	r2, #1
 801bb0c:	2100      	movs	r1, #0
 801bb0e:	2002      	movs	r0, #2
 801bb10:	f003 f826 	bl	801eb60 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801bb14:	4b17      	ldr	r3, [pc, #92]	; (801bb74 <RadioIrqProcess+0x424>)
 801bb16:	785b      	ldrb	r3, [r3, #1]
 801bb18:	f083 0301 	eor.w	r3, r3, #1
 801bb1c:	b2db      	uxtb	r3, r3
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	d002      	beq.n	801bb28 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801bb22:	2000      	movs	r0, #0
 801bb24:	f000 fe82 	bl	801c82c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801bb28:	4b18      	ldr	r3, [pc, #96]	; (801bb8c <RadioIrqProcess+0x43c>)
 801bb2a:	681b      	ldr	r3, [r3, #0]
 801bb2c:	2b00      	cmp	r3, #0
 801bb2e:	d019      	beq.n	801bb64 <RadioIrqProcess+0x414>
 801bb30:	4b16      	ldr	r3, [pc, #88]	; (801bb8c <RadioIrqProcess+0x43c>)
 801bb32:	681b      	ldr	r3, [r3, #0]
 801bb34:	691b      	ldr	r3, [r3, #16]
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	d014      	beq.n	801bb64 <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 801bb3a:	4b14      	ldr	r3, [pc, #80]	; (801bb8c <RadioIrqProcess+0x43c>)
 801bb3c:	681b      	ldr	r3, [r3, #0]
 801bb3e:	691b      	ldr	r3, [r3, #16]
 801bb40:	4798      	blx	r3
        break;
 801bb42:	e00f      	b.n	801bb64 <RadioIrqProcess+0x414>
        break;
 801bb44:	bf00      	nop
 801bb46:	e00e      	b.n	801bb66 <RadioIrqProcess+0x416>
        break;
 801bb48:	bf00      	nop
 801bb4a:	e00c      	b.n	801bb66 <RadioIrqProcess+0x416>
        break;
 801bb4c:	bf00      	nop
 801bb4e:	e00a      	b.n	801bb66 <RadioIrqProcess+0x416>
        break;
 801bb50:	bf00      	nop
 801bb52:	e008      	b.n	801bb66 <RadioIrqProcess+0x416>
        break;
 801bb54:	bf00      	nop
 801bb56:	e006      	b.n	801bb66 <RadioIrqProcess+0x416>
        break;
 801bb58:	bf00      	nop
 801bb5a:	e004      	b.n	801bb66 <RadioIrqProcess+0x416>
        break;
 801bb5c:	bf00      	nop
 801bb5e:	e002      	b.n	801bb66 <RadioIrqProcess+0x416>
        break;
 801bb60:	bf00      	nop
 801bb62:	e000      	b.n	801bb66 <RadioIrqProcess+0x416>
        break;
 801bb64:	bf00      	nop
    }
}
 801bb66:	bf00      	nop
 801bb68:	370c      	adds	r7, #12
 801bb6a:	46bd      	mov	sp, r7
 801bb6c:	bd90      	pop	{r4, r7, pc}
 801bb6e:	bf00      	nop
 801bb70:	0801f6c0 	.word	0x0801f6c0
 801bb74:	200023c0 	.word	0x200023c0
 801bb78:	0801b55f 	.word	0x0801b55f
 801bb7c:	0801b583 	.word	0x0801b583
 801bb80:	0801f6cc 	.word	0x0801f6cc
 801bb84:	0801f6d8 	.word	0x0801f6d8
 801bb88:	20002434 	.word	0x20002434
 801bb8c:	200023bc 	.word	0x200023bc
 801bb90:	0801f6e4 	.word	0x0801f6e4
 801bb94:	0801f6f0 	.word	0x0801f6f0

0801bb98 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801bb98:	b580      	push	{r7, lr}
 801bb9a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801bb9c:	4b09      	ldr	r3, [pc, #36]	; (801bbc4 <RadioTxPrbs+0x2c>)
 801bb9e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801bba2:	2101      	movs	r1, #1
 801bba4:	4618      	mov	r0, r3
 801bba6:	f001 fcb5 	bl	801d514 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801bbaa:	4b07      	ldr	r3, [pc, #28]	; (801bbc8 <RadioTxPrbs+0x30>)
 801bbac:	212d      	movs	r1, #45	; 0x2d
 801bbae:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801bbb2:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801bbb4:	f000 fefd 	bl	801c9b2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801bbb8:	4804      	ldr	r0, [pc, #16]	; (801bbcc <RadioTxPrbs+0x34>)
 801bbba:	f000 fe53 	bl	801c864 <SUBGRF_SetTx>
}
 801bbbe:	bf00      	nop
 801bbc0:	bd80      	pop	{r7, pc}
 801bbc2:	bf00      	nop
 801bbc4:	200023c0 	.word	0x200023c0
 801bbc8:	0801b55f 	.word	0x0801b55f
 801bbcc:	000fffff 	.word	0x000fffff

0801bbd0 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801bbd0:	b580      	push	{r7, lr}
 801bbd2:	b084      	sub	sp, #16
 801bbd4:	af00      	add	r7, sp, #0
 801bbd6:	4603      	mov	r3, r0
 801bbd8:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801bbda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bbde:	4618      	mov	r0, r3
 801bbe0:	f001 fcc0 	bl	801d564 <SUBGRF_SetRfTxPower>
 801bbe4:	4603      	mov	r3, r0
 801bbe6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801bbe8:	7bfb      	ldrb	r3, [r7, #15]
 801bbea:	2101      	movs	r1, #1
 801bbec:	4618      	mov	r0, r3
 801bbee:	f001 fc91 	bl	801d514 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801bbf2:	f000 fed5 	bl	801c9a0 <SUBGRF_SetTxContinuousWave>
}
 801bbf6:	bf00      	nop
 801bbf8:	3710      	adds	r7, #16
 801bbfa:	46bd      	mov	sp, r7
 801bbfc:	bd80      	pop	{r7, pc}

0801bbfe <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801bbfe:	b480      	push	{r7}
 801bc00:	b089      	sub	sp, #36	; 0x24
 801bc02:	af00      	add	r7, sp, #0
 801bc04:	60f8      	str	r0, [r7, #12]
 801bc06:	60b9      	str	r1, [r7, #8]
 801bc08:	4613      	mov	r3, r2
 801bc0a:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801bc0c:	2300      	movs	r3, #0
 801bc0e:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801bc10:	2300      	movs	r3, #0
 801bc12:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801bc14:	2300      	movs	r3, #0
 801bc16:	61bb      	str	r3, [r7, #24]
 801bc18:	e011      	b.n	801bc3e <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801bc1a:	69bb      	ldr	r3, [r7, #24]
 801bc1c:	68ba      	ldr	r2, [r7, #8]
 801bc1e:	4413      	add	r3, r2
 801bc20:	781a      	ldrb	r2, [r3, #0]
 801bc22:	69bb      	ldr	r3, [r7, #24]
 801bc24:	68b9      	ldr	r1, [r7, #8]
 801bc26:	440b      	add	r3, r1
 801bc28:	43d2      	mvns	r2, r2
 801bc2a:	b2d2      	uxtb	r2, r2
 801bc2c:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801bc2e:	69bb      	ldr	r3, [r7, #24]
 801bc30:	68fa      	ldr	r2, [r7, #12]
 801bc32:	4413      	add	r3, r2
 801bc34:	2200      	movs	r2, #0
 801bc36:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801bc38:	69bb      	ldr	r3, [r7, #24]
 801bc3a:	3301      	adds	r3, #1
 801bc3c:	61bb      	str	r3, [r7, #24]
 801bc3e:	79fb      	ldrb	r3, [r7, #7]
 801bc40:	69ba      	ldr	r2, [r7, #24]
 801bc42:	429a      	cmp	r2, r3
 801bc44:	dbe9      	blt.n	801bc1a <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801bc46:	2300      	movs	r3, #0
 801bc48:	61bb      	str	r3, [r7, #24]
 801bc4a:	e049      	b.n	801bce0 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801bc4c:	69bb      	ldr	r3, [r7, #24]
 801bc4e:	425a      	negs	r2, r3
 801bc50:	f003 0307 	and.w	r3, r3, #7
 801bc54:	f002 0207 	and.w	r2, r2, #7
 801bc58:	bf58      	it	pl
 801bc5a:	4253      	negpl	r3, r2
 801bc5c:	b2db      	uxtb	r3, r3
 801bc5e:	f1c3 0307 	rsb	r3, r3, #7
 801bc62:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801bc64:	69bb      	ldr	r3, [r7, #24]
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	da00      	bge.n	801bc6c <payload_integration+0x6e>
 801bc6a:	3307      	adds	r3, #7
 801bc6c:	10db      	asrs	r3, r3, #3
 801bc6e:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801bc70:	69bb      	ldr	r3, [r7, #24]
 801bc72:	3301      	adds	r3, #1
 801bc74:	425a      	negs	r2, r3
 801bc76:	f003 0307 	and.w	r3, r3, #7
 801bc7a:	f002 0207 	and.w	r2, r2, #7
 801bc7e:	bf58      	it	pl
 801bc80:	4253      	negpl	r3, r2
 801bc82:	b2db      	uxtb	r3, r3
 801bc84:	f1c3 0307 	rsb	r3, r3, #7
 801bc88:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801bc8a:	69bb      	ldr	r3, [r7, #24]
 801bc8c:	3301      	adds	r3, #1
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	da00      	bge.n	801bc94 <payload_integration+0x96>
 801bc92:	3307      	adds	r3, #7
 801bc94:	10db      	asrs	r3, r3, #3
 801bc96:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801bc98:	7dbb      	ldrb	r3, [r7, #22]
 801bc9a:	68ba      	ldr	r2, [r7, #8]
 801bc9c:	4413      	add	r3, r2
 801bc9e:	781b      	ldrb	r3, [r3, #0]
 801bca0:	461a      	mov	r2, r3
 801bca2:	7dfb      	ldrb	r3, [r7, #23]
 801bca4:	fa42 f303 	asr.w	r3, r2, r3
 801bca8:	b2db      	uxtb	r3, r3
 801bcaa:	f003 0301 	and.w	r3, r3, #1
 801bcae:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801bcb0:	7ffa      	ldrb	r2, [r7, #31]
 801bcb2:	7cfb      	ldrb	r3, [r7, #19]
 801bcb4:	4053      	eors	r3, r2
 801bcb6:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801bcb8:	7d3b      	ldrb	r3, [r7, #20]
 801bcba:	68fa      	ldr	r2, [r7, #12]
 801bcbc:	4413      	add	r3, r2
 801bcbe:	781b      	ldrb	r3, [r3, #0]
 801bcc0:	b25a      	sxtb	r2, r3
 801bcc2:	7ff9      	ldrb	r1, [r7, #31]
 801bcc4:	7d7b      	ldrb	r3, [r7, #21]
 801bcc6:	fa01 f303 	lsl.w	r3, r1, r3
 801bcca:	b25b      	sxtb	r3, r3
 801bccc:	4313      	orrs	r3, r2
 801bcce:	b259      	sxtb	r1, r3
 801bcd0:	7d3b      	ldrb	r3, [r7, #20]
 801bcd2:	68fa      	ldr	r2, [r7, #12]
 801bcd4:	4413      	add	r3, r2
 801bcd6:	b2ca      	uxtb	r2, r1
 801bcd8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801bcda:	69bb      	ldr	r3, [r7, #24]
 801bcdc:	3301      	adds	r3, #1
 801bcde:	61bb      	str	r3, [r7, #24]
 801bce0:	79fb      	ldrb	r3, [r7, #7]
 801bce2:	00db      	lsls	r3, r3, #3
 801bce4:	69ba      	ldr	r2, [r7, #24]
 801bce6:	429a      	cmp	r2, r3
 801bce8:	dbb0      	blt.n	801bc4c <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801bcea:	7ffb      	ldrb	r3, [r7, #31]
 801bcec:	01db      	lsls	r3, r3, #7
 801bcee:	b25a      	sxtb	r2, r3
 801bcf0:	7ffb      	ldrb	r3, [r7, #31]
 801bcf2:	019b      	lsls	r3, r3, #6
 801bcf4:	b25b      	sxtb	r3, r3
 801bcf6:	4313      	orrs	r3, r2
 801bcf8:	b25b      	sxtb	r3, r3
 801bcfa:	7ffa      	ldrb	r2, [r7, #31]
 801bcfc:	2a00      	cmp	r2, #0
 801bcfe:	d101      	bne.n	801bd04 <payload_integration+0x106>
 801bd00:	2220      	movs	r2, #32
 801bd02:	e000      	b.n	801bd06 <payload_integration+0x108>
 801bd04:	2200      	movs	r2, #0
 801bd06:	4313      	orrs	r3, r2
 801bd08:	b259      	sxtb	r1, r3
 801bd0a:	79fb      	ldrb	r3, [r7, #7]
 801bd0c:	68fa      	ldr	r2, [r7, #12]
 801bd0e:	4413      	add	r3, r2
 801bd10:	b2ca      	uxtb	r2, r1
 801bd12:	701a      	strb	r2, [r3, #0]
}
 801bd14:	bf00      	nop
 801bd16:	3724      	adds	r7, #36	; 0x24
 801bd18:	46bd      	mov	sp, r7
 801bd1a:	bc80      	pop	{r7}
 801bd1c:	4770      	bx	lr
	...

0801bd20 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 801bd20:	b580      	push	{r7, lr}
 801bd22:	b08c      	sub	sp, #48	; 0x30
 801bd24:	af00      	add	r7, sp, #0
 801bd26:	60b9      	str	r1, [r7, #8]
 801bd28:	607a      	str	r2, [r7, #4]
 801bd2a:	603b      	str	r3, [r7, #0]
 801bd2c:	4603      	mov	r3, r0
 801bd2e:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801bd30:	2300      	movs	r3, #0
 801bd32:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801bd34:	2300      	movs	r3, #0
 801bd36:	623b      	str	r3, [r7, #32]
 801bd38:	2300      	movs	r3, #0
 801bd3a:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801bd3c:	f001 fdcd 	bl	801d8da <RFW_DeInit>

    if( rxContinuous != 0 )
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d001      	beq.n	801bd4a <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801bd46:	2300      	movs	r3, #0
 801bd48:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	2b00      	cmp	r3, #0
 801bd4e:	bf14      	ite	ne
 801bd50:	2301      	movne	r3, #1
 801bd52:	2300      	moveq	r3, #0
 801bd54:	b2da      	uxtb	r2, r3
 801bd56:	4ba3      	ldr	r3, [pc, #652]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801bd58:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801bd5a:	7bfb      	ldrb	r3, [r7, #15]
 801bd5c:	2b00      	cmp	r3, #0
 801bd5e:	d003      	beq.n	801bd68 <RadioSetRxGenericConfig+0x48>
 801bd60:	2b01      	cmp	r3, #1
 801bd62:	f000 80dc 	beq.w	801bf1e <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801bd66:	e194      	b.n	801c092 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801bd68:	68bb      	ldr	r3, [r7, #8]
 801bd6a:	689b      	ldr	r3, [r3, #8]
 801bd6c:	2b00      	cmp	r3, #0
 801bd6e:	d003      	beq.n	801bd78 <RadioSetRxGenericConfig+0x58>
 801bd70:	68bb      	ldr	r3, [r7, #8]
 801bd72:	68db      	ldr	r3, [r3, #12]
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	d102      	bne.n	801bd7e <RadioSetRxGenericConfig+0x5e>
            return -1;
 801bd78:	f04f 33ff 	mov.w	r3, #4294967295
 801bd7c:	e18a      	b.n	801c094 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801bd7e:	68bb      	ldr	r3, [r7, #8]
 801bd80:	7f9b      	ldrb	r3, [r3, #30]
 801bd82:	2b08      	cmp	r3, #8
 801bd84:	d902      	bls.n	801bd8c <RadioSetRxGenericConfig+0x6c>
            return -1;
 801bd86:	f04f 33ff 	mov.w	r3, #4294967295
 801bd8a:	e183      	b.n	801c094 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801bd8c:	68bb      	ldr	r3, [r7, #8]
 801bd8e:	6919      	ldr	r1, [r3, #16]
 801bd90:	68bb      	ldr	r3, [r7, #8]
 801bd92:	7f9b      	ldrb	r3, [r3, #30]
 801bd94:	b29a      	uxth	r2, r3
 801bd96:	f107 0320 	add.w	r3, r7, #32
 801bd9a:	4618      	mov	r0, r3
 801bd9c:	f001 fe90 	bl	801dac0 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801bda0:	68bb      	ldr	r3, [r7, #8]
 801bda2:	681b      	ldr	r3, [r3, #0]
 801bda4:	2b00      	cmp	r3, #0
 801bda6:	bf14      	ite	ne
 801bda8:	2301      	movne	r3, #1
 801bdaa:	2300      	moveq	r3, #0
 801bdac:	b2db      	uxtb	r3, r3
 801bdae:	4618      	mov	r0, r3
 801bdb0:	f000 fe08 	bl	801c9c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bdb4:	4b8b      	ldr	r3, [pc, #556]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801bdb6:	2200      	movs	r2, #0
 801bdb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801bdbc:	68bb      	ldr	r3, [r7, #8]
 801bdbe:	689b      	ldr	r3, [r3, #8]
 801bdc0:	4a88      	ldr	r2, [pc, #544]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801bdc2:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 801bdc4:	68bb      	ldr	r3, [r7, #8]
 801bdc6:	f893 2020 	ldrb.w	r2, [r3, #32]
 801bdca:	4b86      	ldr	r3, [pc, #536]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801bdcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801bdd0:	68bb      	ldr	r3, [r7, #8]
 801bdd2:	685b      	ldr	r3, [r3, #4]
 801bdd4:	4618      	mov	r0, r3
 801bdd6:	f001 fcb3 	bl	801d740 <SUBGRF_GetFskBandwidthRegValue>
 801bdda:	4603      	mov	r3, r0
 801bddc:	461a      	mov	r2, r3
 801bdde:	4b81      	ldr	r3, [pc, #516]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801bde0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bde4:	4b7f      	ldr	r3, [pc, #508]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801bde6:	2200      	movs	r2, #0
 801bde8:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801bdea:	68bb      	ldr	r3, [r7, #8]
 801bdec:	68db      	ldr	r3, [r3, #12]
 801bdee:	b29b      	uxth	r3, r3
 801bdf0:	00db      	lsls	r3, r3, #3
 801bdf2:	b29a      	uxth	r2, r3
 801bdf4:	4b7b      	ldr	r3, [pc, #492]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801bdf6:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801bdf8:	68bb      	ldr	r3, [r7, #8]
 801bdfa:	7fda      	ldrb	r2, [r3, #31]
 801bdfc:	4b79      	ldr	r3, [pc, #484]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801bdfe:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801be00:	68bb      	ldr	r3, [r7, #8]
 801be02:	7f9b      	ldrb	r3, [r3, #30]
 801be04:	00db      	lsls	r3, r3, #3
 801be06:	b2da      	uxtb	r2, r3
 801be08:	4b76      	ldr	r3, [pc, #472]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801be0a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801be0c:	68bb      	ldr	r3, [r7, #8]
 801be0e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801be12:	4b74      	ldr	r3, [pc, #464]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801be14:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801be16:	68bb      	ldr	r3, [r7, #8]
 801be18:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801be1c:	2b00      	cmp	r3, #0
 801be1e:	d105      	bne.n	801be2c <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801be20:	68bb      	ldr	r3, [r7, #8]
 801be22:	695b      	ldr	r3, [r3, #20]
 801be24:	b2da      	uxtb	r2, r3
 801be26:	4b6f      	ldr	r3, [pc, #444]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801be28:	759a      	strb	r2, [r3, #22]
 801be2a:	e00b      	b.n	801be44 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801be2c:	68bb      	ldr	r3, [r7, #8]
 801be2e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801be32:	2b02      	cmp	r3, #2
 801be34:	d103      	bne.n	801be3e <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801be36:	4b6b      	ldr	r3, [pc, #428]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801be38:	22ff      	movs	r2, #255	; 0xff
 801be3a:	759a      	strb	r2, [r3, #22]
 801be3c:	e002      	b.n	801be44 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801be3e:	4b69      	ldr	r3, [pc, #420]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801be40:	22ff      	movs	r2, #255	; 0xff
 801be42:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801be44:	68bb      	ldr	r3, [r7, #8]
 801be46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801be4a:	2b02      	cmp	r3, #2
 801be4c:	d004      	beq.n	801be58 <RadioSetRxGenericConfig+0x138>
 801be4e:	68bb      	ldr	r3, [r7, #8]
 801be50:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801be54:	2b02      	cmp	r3, #2
 801be56:	d12d      	bne.n	801beb4 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801be58:	68bb      	ldr	r3, [r7, #8]
 801be5a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801be5e:	2bf1      	cmp	r3, #241	; 0xf1
 801be60:	d00c      	beq.n	801be7c <RadioSetRxGenericConfig+0x15c>
 801be62:	68bb      	ldr	r3, [r7, #8]
 801be64:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801be68:	2bf2      	cmp	r3, #242	; 0xf2
 801be6a:	d007      	beq.n	801be7c <RadioSetRxGenericConfig+0x15c>
 801be6c:	68bb      	ldr	r3, [r7, #8]
 801be6e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801be72:	2b01      	cmp	r3, #1
 801be74:	d002      	beq.n	801be7c <RadioSetRxGenericConfig+0x15c>
            return -1;
 801be76:	f04f 33ff 	mov.w	r3, #4294967295
 801be7a:	e10b      	b.n	801c094 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 801be7c:	2300      	movs	r3, #0
 801be7e:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 801be80:	68bb      	ldr	r3, [r7, #8]
 801be82:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801be84:	4b58      	ldr	r3, [pc, #352]	; (801bfe8 <RadioSetRxGenericConfig+0x2c8>)
 801be86:	6819      	ldr	r1, [r3, #0]
 801be88:	f107 0314 	add.w	r3, r7, #20
 801be8c:	4a57      	ldr	r2, [pc, #348]	; (801bfec <RadioSetRxGenericConfig+0x2cc>)
 801be8e:	4618      	mov	r0, r3
 801be90:	f001 fd16 	bl	801d8c0 <RFW_Init>
 801be94:	4603      	mov	r3, r0
 801be96:	2b00      	cmp	r3, #0
 801be98:	d002      	beq.n	801bea0 <RadioSetRxGenericConfig+0x180>
            return -1;
 801be9a:	f04f 33ff 	mov.w	r3, #4294967295
 801be9e:	e0f9      	b.n	801c094 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801bea0:	4b50      	ldr	r3, [pc, #320]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801bea2:	2200      	movs	r2, #0
 801bea4:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801bea6:	4b4f      	ldr	r3, [pc, #316]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801bea8:	2201      	movs	r2, #1
 801beaa:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801beac:	4b4d      	ldr	r3, [pc, #308]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801beae:	2200      	movs	r2, #0
 801beb0:	755a      	strb	r2, [r3, #21]
        {
 801beb2:	e00e      	b.n	801bed2 <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801beb4:	68bb      	ldr	r3, [r7, #8]
 801beb6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801beba:	4b4a      	ldr	r3, [pc, #296]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801bebc:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801bebe:	68bb      	ldr	r3, [r7, #8]
 801bec0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801bec4:	4b47      	ldr	r3, [pc, #284]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801bec6:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801bec8:	68bb      	ldr	r3, [r7, #8]
 801beca:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801bece:	4b45      	ldr	r3, [pc, #276]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801bed0:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801bed2:	f7ff fa48 	bl	801b366 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801bed6:	2000      	movs	r0, #0
 801bed8:	f7fe fbf2 	bl	801a6c0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bedc:	4844      	ldr	r0, [pc, #272]	; (801bff0 <RadioSetRxGenericConfig+0x2d0>)
 801bede:	f001 f80b 	bl	801cef8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bee2:	4844      	ldr	r0, [pc, #272]	; (801bff4 <RadioSetRxGenericConfig+0x2d4>)
 801bee4:	f001 f8da 	bl	801d09c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801bee8:	f107 0320 	add.w	r3, r7, #32
 801beec:	4618      	mov	r0, r3
 801beee:	f000 fba2 	bl	801c636 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801bef2:	68bb      	ldr	r3, [r7, #8]
 801bef4:	8b9b      	ldrh	r3, [r3, #28]
 801bef6:	4618      	mov	r0, r3
 801bef8:	f000 fbec 	bl	801c6d4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801befc:	68bb      	ldr	r3, [r7, #8]
 801befe:	8b1b      	ldrh	r3, [r3, #24]
 801bf00:	4618      	mov	r0, r3
 801bf02:	f000 fbc7 	bl	801c694 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801bf06:	683b      	ldr	r3, [r7, #0]
 801bf08:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801bf0c:	fb03 f202 	mul.w	r2, r3, r2
 801bf10:	68bb      	ldr	r3, [r7, #8]
 801bf12:	689b      	ldr	r3, [r3, #8]
 801bf14:	fbb2 f3f3 	udiv	r3, r2, r3
 801bf18:	4a32      	ldr	r2, [pc, #200]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801bf1a:	6093      	str	r3, [r2, #8]
        break;
 801bf1c:	e0b9      	b.n	801c092 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801bf1e:	68bb      	ldr	r3, [r7, #8]
 801bf20:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	d102      	bne.n	801bf2c <RadioSetRxGenericConfig+0x20c>
            return -1;
 801bf26:	f04f 33ff 	mov.w	r3, #4294967295
 801bf2a:	e0b3      	b.n	801c094 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801bf2c:	68bb      	ldr	r3, [r7, #8]
 801bf2e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801bf32:	2b01      	cmp	r3, #1
 801bf34:	d104      	bne.n	801bf40 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801bf36:	68bb      	ldr	r3, [r7, #8]
 801bf38:	695b      	ldr	r3, [r3, #20]
 801bf3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801bf3e:	e002      	b.n	801bf46 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801bf40:	23ff      	movs	r3, #255	; 0xff
 801bf42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801bf46:	68bb      	ldr	r3, [r7, #8]
 801bf48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bf4a:	2b00      	cmp	r3, #0
 801bf4c:	bf14      	ite	ne
 801bf4e:	2301      	movne	r3, #1
 801bf50:	2300      	moveq	r3, #0
 801bf52:	b2db      	uxtb	r3, r3
 801bf54:	4618      	mov	r0, r3
 801bf56:	f000 fd35 	bl	801c9c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801bf5a:	683b      	ldr	r3, [r7, #0]
 801bf5c:	b2db      	uxtb	r3, r3
 801bf5e:	4618      	mov	r0, r3
 801bf60:	f000 fd3f 	bl	801c9e2 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801bf64:	4b1f      	ldr	r3, [pc, #124]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801bf66:	2201      	movs	r2, #1
 801bf68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801bf6c:	68bb      	ldr	r3, [r7, #8]
 801bf6e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801bf72:	4b1c      	ldr	r3, [pc, #112]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801bf74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801bf78:	68bb      	ldr	r3, [r7, #8]
 801bf7a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801bf7e:	4b19      	ldr	r3, [pc, #100]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801bf80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801bf84:	68bb      	ldr	r3, [r7, #8]
 801bf86:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801bf8a:	4b16      	ldr	r3, [pc, #88]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801bf8c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801bf90:	68bb      	ldr	r3, [r7, #8]
 801bf92:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801bf96:	2b02      	cmp	r3, #2
 801bf98:	d010      	beq.n	801bfbc <RadioSetRxGenericConfig+0x29c>
 801bf9a:	2b02      	cmp	r3, #2
 801bf9c:	dc2c      	bgt.n	801bff8 <RadioSetRxGenericConfig+0x2d8>
 801bf9e:	2b00      	cmp	r3, #0
 801bfa0:	d002      	beq.n	801bfa8 <RadioSetRxGenericConfig+0x288>
 801bfa2:	2b01      	cmp	r3, #1
 801bfa4:	d005      	beq.n	801bfb2 <RadioSetRxGenericConfig+0x292>
            break;
 801bfa6:	e027      	b.n	801bff8 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801bfa8:	4b0e      	ldr	r3, [pc, #56]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801bfaa:	2200      	movs	r2, #0
 801bfac:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bfb0:	e023      	b.n	801bffa <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801bfb2:	4b0c      	ldr	r3, [pc, #48]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801bfb4:	2201      	movs	r2, #1
 801bfb6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bfba:	e01e      	b.n	801bffa <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801bfbc:	68bb      	ldr	r3, [r7, #8]
 801bfbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801bfc2:	2b0b      	cmp	r3, #11
 801bfc4:	d004      	beq.n	801bfd0 <RadioSetRxGenericConfig+0x2b0>
 801bfc6:	68bb      	ldr	r3, [r7, #8]
 801bfc8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801bfcc:	2b0c      	cmp	r3, #12
 801bfce:	d104      	bne.n	801bfda <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801bfd0:	4b04      	ldr	r3, [pc, #16]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801bfd2:	2201      	movs	r2, #1
 801bfd4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bfd8:	e00f      	b.n	801bffa <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801bfda:	4b02      	ldr	r3, [pc, #8]	; (801bfe4 <RadioSetRxGenericConfig+0x2c4>)
 801bfdc:	2200      	movs	r2, #0
 801bfde:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bfe2:	e00a      	b.n	801bffa <RadioSetRxGenericConfig+0x2da>
 801bfe4:	200023c0 	.word	0x200023c0
 801bfe8:	200023bc 	.word	0x200023bc
 801bfec:	20002434 	.word	0x20002434
 801bff0:	200023f8 	.word	0x200023f8
 801bff4:	200023ce 	.word	0x200023ce
            break;
 801bff8:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801bffa:	4b28      	ldr	r3, [pc, #160]	; (801c09c <RadioSetRxGenericConfig+0x37c>)
 801bffc:	2201      	movs	r2, #1
 801bffe:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801c000:	68bb      	ldr	r3, [r7, #8]
 801c002:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801c004:	4b25      	ldr	r3, [pc, #148]	; (801c09c <RadioSetRxGenericConfig+0x37c>)
 801c006:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801c008:	68bb      	ldr	r3, [r7, #8]
 801c00a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801c00e:	4b23      	ldr	r3, [pc, #140]	; (801c09c <RadioSetRxGenericConfig+0x37c>)
 801c010:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801c012:	4a22      	ldr	r2, [pc, #136]	; (801c09c <RadioSetRxGenericConfig+0x37c>)
 801c014:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c018:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801c01a:	68bb      	ldr	r3, [r7, #8]
 801c01c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801c020:	4b1e      	ldr	r3, [pc, #120]	; (801c09c <RadioSetRxGenericConfig+0x37c>)
 801c022:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801c026:	68bb      	ldr	r3, [r7, #8]
 801c028:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801c02c:	4b1b      	ldr	r3, [pc, #108]	; (801c09c <RadioSetRxGenericConfig+0x37c>)
 801c02e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801c032:	f7ff f998 	bl	801b366 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801c036:	2001      	movs	r0, #1
 801c038:	f7fe fb42 	bl	801a6c0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c03c:	4818      	ldr	r0, [pc, #96]	; (801c0a0 <RadioSetRxGenericConfig+0x380>)
 801c03e:	f000 ff5b 	bl	801cef8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c042:	4818      	ldr	r0, [pc, #96]	; (801c0a4 <RadioSetRxGenericConfig+0x384>)
 801c044:	f001 f82a 	bl	801d09c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801c048:	4b14      	ldr	r3, [pc, #80]	; (801c09c <RadioSetRxGenericConfig+0x37c>)
 801c04a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801c04e:	2b01      	cmp	r3, #1
 801c050:	d10d      	bne.n	801c06e <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801c052:	f240 7036 	movw	r0, #1846	; 0x736
 801c056:	f001 f97d 	bl	801d354 <SUBGRF_ReadRegister>
 801c05a:	4603      	mov	r3, r0
 801c05c:	f023 0304 	bic.w	r3, r3, #4
 801c060:	b2db      	uxtb	r3, r3
 801c062:	4619      	mov	r1, r3
 801c064:	f240 7036 	movw	r0, #1846	; 0x736
 801c068:	f001 f960 	bl	801d32c <SUBGRF_WriteRegister>
 801c06c:	e00c      	b.n	801c088 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801c06e:	f240 7036 	movw	r0, #1846	; 0x736
 801c072:	f001 f96f 	bl	801d354 <SUBGRF_ReadRegister>
 801c076:	4603      	mov	r3, r0
 801c078:	f043 0304 	orr.w	r3, r3, #4
 801c07c:	b2db      	uxtb	r3, r3
 801c07e:	4619      	mov	r1, r3
 801c080:	f240 7036 	movw	r0, #1846	; 0x736
 801c084:	f001 f952 	bl	801d32c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801c088:	4b04      	ldr	r3, [pc, #16]	; (801c09c <RadioSetRxGenericConfig+0x37c>)
 801c08a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c08e:	609a      	str	r2, [r3, #8]
        break;
 801c090:	bf00      	nop
    }
    return status;
 801c092:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801c094:	4618      	mov	r0, r3
 801c096:	3730      	adds	r7, #48	; 0x30
 801c098:	46bd      	mov	sp, r7
 801c09a:	bd80      	pop	{r7, pc}
 801c09c:	200023c0 	.word	0x200023c0
 801c0a0:	200023f8 	.word	0x200023f8
 801c0a4:	200023ce 	.word	0x200023ce

0801c0a8 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 801c0a8:	b580      	push	{r7, lr}
 801c0aa:	b08e      	sub	sp, #56	; 0x38
 801c0ac:	af00      	add	r7, sp, #0
 801c0ae:	60b9      	str	r1, [r7, #8]
 801c0b0:	607b      	str	r3, [r7, #4]
 801c0b2:	4603      	mov	r3, r0
 801c0b4:	73fb      	strb	r3, [r7, #15]
 801c0b6:	4613      	mov	r3, r2
 801c0b8:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801c0ba:	2300      	movs	r3, #0
 801c0bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c0be:	2300      	movs	r3, #0
 801c0c0:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801c0c2:	f001 fc0a 	bl	801d8da <RFW_DeInit>
    switch( modem )
 801c0c6:	7bfb      	ldrb	r3, [r7, #15]
 801c0c8:	2b03      	cmp	r3, #3
 801c0ca:	f200 8204 	bhi.w	801c4d6 <RadioSetTxGenericConfig+0x42e>
 801c0ce:	a201      	add	r2, pc, #4	; (adr r2, 801c0d4 <RadioSetTxGenericConfig+0x2c>)
 801c0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c0d4:	0801c259 	.word	0x0801c259
 801c0d8:	0801c3a1 	.word	0x0801c3a1
 801c0dc:	0801c499 	.word	0x0801c499
 801c0e0:	0801c0e5 	.word	0x0801c0e5
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801c0e4:	68bb      	ldr	r3, [r7, #8]
 801c0e6:	7c9b      	ldrb	r3, [r3, #18]
 801c0e8:	2b08      	cmp	r3, #8
 801c0ea:	d902      	bls.n	801c0f2 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801c0ec:	f04f 33ff 	mov.w	r3, #4294967295
 801c0f0:	e206      	b.n	801c500 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 801c0f2:	68bb      	ldr	r3, [r7, #8]
 801c0f4:	6899      	ldr	r1, [r3, #8]
 801c0f6:	68bb      	ldr	r3, [r7, #8]
 801c0f8:	7c9b      	ldrb	r3, [r3, #18]
 801c0fa:	b29a      	uxth	r2, r3
 801c0fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c100:	4618      	mov	r0, r3
 801c102:	f001 fcdd 	bl	801dac0 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801c106:	68bb      	ldr	r3, [r7, #8]
 801c108:	681b      	ldr	r3, [r3, #0]
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	d102      	bne.n	801c114 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801c10e:	f04f 33ff 	mov.w	r3, #4294967295
 801c112:	e1f5      	b.n	801c500 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 801c114:	68bb      	ldr	r3, [r7, #8]
 801c116:	681b      	ldr	r3, [r3, #0]
 801c118:	f242 7210 	movw	r2, #10000	; 0x2710
 801c11c:	4293      	cmp	r3, r2
 801c11e:	d813      	bhi.n	801c148 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 801c120:	2302      	movs	r3, #2
 801c122:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801c126:	4b99      	ldr	r3, [pc, #612]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c128:	2203      	movs	r2, #3
 801c12a:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801c12c:	4b97      	ldr	r3, [pc, #604]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c12e:	2203      	movs	r2, #3
 801c130:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801c134:	68bb      	ldr	r3, [r7, #8]
 801c136:	681b      	ldr	r3, [r3, #0]
 801c138:	4a94      	ldr	r2, [pc, #592]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c13a:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801c13c:	68bb      	ldr	r3, [r7, #8]
 801c13e:	7cda      	ldrb	r2, [r3, #19]
 801c140:	4b92      	ldr	r3, [pc, #584]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801c146:	e017      	b.n	801c178 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 801c148:	2300      	movs	r3, #0
 801c14a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801c14e:	4b8f      	ldr	r3, [pc, #572]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c150:	2200      	movs	r2, #0
 801c152:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801c154:	4b8d      	ldr	r3, [pc, #564]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c156:	2200      	movs	r2, #0
 801c158:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801c15c:	68bb      	ldr	r3, [r7, #8]
 801c15e:	681b      	ldr	r3, [r3, #0]
 801c160:	4a8a      	ldr	r2, [pc, #552]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c162:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801c164:	68bb      	ldr	r3, [r7, #8]
 801c166:	7cda      	ldrb	r2, [r3, #19]
 801c168:	4b88      	ldr	r3, [pc, #544]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c16a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 801c16e:	68bb      	ldr	r3, [r7, #8]
 801c170:	681b      	ldr	r3, [r3, #0]
 801c172:	089b      	lsrs	r3, r3, #2
 801c174:	4a85      	ldr	r2, [pc, #532]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c176:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801c178:	68bb      	ldr	r3, [r7, #8]
 801c17a:	685b      	ldr	r3, [r3, #4]
 801c17c:	b29b      	uxth	r3, r3
 801c17e:	00db      	lsls	r3, r3, #3
 801c180:	b29a      	uxth	r2, r3
 801c182:	4b82      	ldr	r3, [pc, #520]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c184:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801c186:	4b81      	ldr	r3, [pc, #516]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c188:	2204      	movs	r2, #4
 801c18a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801c18c:	68bb      	ldr	r3, [r7, #8]
 801c18e:	7c9b      	ldrb	r3, [r3, #18]
 801c190:	00db      	lsls	r3, r3, #3
 801c192:	b2da      	uxtb	r2, r3
 801c194:	4b7d      	ldr	r3, [pc, #500]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c196:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801c198:	4b7c      	ldr	r3, [pc, #496]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c19a:	2200      	movs	r2, #0
 801c19c:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801c19e:	68bb      	ldr	r3, [r7, #8]
 801c1a0:	7d9b      	ldrb	r3, [r3, #22]
 801c1a2:	2b02      	cmp	r3, #2
 801c1a4:	d003      	beq.n	801c1ae <RadioSetTxGenericConfig+0x106>
 801c1a6:	68bb      	ldr	r3, [r7, #8]
 801c1a8:	7d1b      	ldrb	r3, [r3, #20]
 801c1aa:	2b02      	cmp	r3, #2
 801c1ac:	d12b      	bne.n	801c206 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801c1ae:	68bb      	ldr	r3, [r7, #8]
 801c1b0:	7d5b      	ldrb	r3, [r3, #21]
 801c1b2:	2bf1      	cmp	r3, #241	; 0xf1
 801c1b4:	d00a      	beq.n	801c1cc <RadioSetTxGenericConfig+0x124>
 801c1b6:	68bb      	ldr	r3, [r7, #8]
 801c1b8:	7d5b      	ldrb	r3, [r3, #21]
 801c1ba:	2bf2      	cmp	r3, #242	; 0xf2
 801c1bc:	d006      	beq.n	801c1cc <RadioSetTxGenericConfig+0x124>
 801c1be:	68bb      	ldr	r3, [r7, #8]
 801c1c0:	7d5b      	ldrb	r3, [r3, #21]
 801c1c2:	2b01      	cmp	r3, #1
 801c1c4:	d002      	beq.n	801c1cc <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801c1c6:	f04f 33ff 	mov.w	r3, #4294967295
 801c1ca:	e199      	b.n	801c500 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 801c1cc:	68bb      	ldr	r3, [r7, #8]
 801c1ce:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801c1d0:	2301      	movs	r3, #1
 801c1d2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801c1d6:	4b6e      	ldr	r3, [pc, #440]	; (801c390 <RadioSetTxGenericConfig+0x2e8>)
 801c1d8:	6819      	ldr	r1, [r3, #0]
 801c1da:	f107 0320 	add.w	r3, r7, #32
 801c1de:	4a6d      	ldr	r2, [pc, #436]	; (801c394 <RadioSetTxGenericConfig+0x2ec>)
 801c1e0:	4618      	mov	r0, r3
 801c1e2:	f001 fb6d 	bl	801d8c0 <RFW_Init>
 801c1e6:	4603      	mov	r3, r0
 801c1e8:	2b00      	cmp	r3, #0
 801c1ea:	d002      	beq.n	801c1f2 <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 801c1ec:	f04f 33ff 	mov.w	r3, #4294967295
 801c1f0:	e186      	b.n	801c500 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801c1f2:	4b66      	ldr	r3, [pc, #408]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c1f4:	2200      	movs	r2, #0
 801c1f6:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801c1f8:	4b64      	ldr	r3, [pc, #400]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c1fa:	2201      	movs	r2, #1
 801c1fc:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801c1fe:	4b63      	ldr	r3, [pc, #396]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c200:	2200      	movs	r2, #0
 801c202:	755a      	strb	r2, [r3, #21]
        {
 801c204:	e00b      	b.n	801c21e <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801c206:	68bb      	ldr	r3, [r7, #8]
 801c208:	7d5a      	ldrb	r2, [r3, #21]
 801c20a:	4b60      	ldr	r3, [pc, #384]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c20c:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801c20e:	68bb      	ldr	r3, [r7, #8]
 801c210:	7d9a      	ldrb	r2, [r3, #22]
 801c212:	4b5e      	ldr	r3, [pc, #376]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c214:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801c216:	68bb      	ldr	r3, [r7, #8]
 801c218:	7d1a      	ldrb	r2, [r3, #20]
 801c21a:	4b5c      	ldr	r3, [pc, #368]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c21c:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801c21e:	f7ff f8a2 	bl	801b366 <RadioStandby>
        RadioSetModem( radio_modem );
 801c222:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c226:	4618      	mov	r0, r3
 801c228:	f7fe fa4a 	bl	801a6c0 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c22c:	485a      	ldr	r0, [pc, #360]	; (801c398 <RadioSetTxGenericConfig+0x2f0>)
 801c22e:	f000 fe63 	bl	801cef8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c232:	485a      	ldr	r0, [pc, #360]	; (801c39c <RadioSetTxGenericConfig+0x2f4>)
 801c234:	f000 ff32 	bl	801d09c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801c238:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c23c:	4618      	mov	r0, r3
 801c23e:	f000 f9fa 	bl	801c636 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801c242:	68bb      	ldr	r3, [r7, #8]
 801c244:	8a1b      	ldrh	r3, [r3, #16]
 801c246:	4618      	mov	r0, r3
 801c248:	f000 fa44 	bl	801c6d4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 801c24c:	68bb      	ldr	r3, [r7, #8]
 801c24e:	899b      	ldrh	r3, [r3, #12]
 801c250:	4618      	mov	r0, r3
 801c252:	f000 fa1f 	bl	801c694 <SUBGRF_SetCrcPolynomial>
        break;
 801c256:	e13f      	b.n	801c4d8 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801c258:	68bb      	ldr	r3, [r7, #8]
 801c25a:	681b      	ldr	r3, [r3, #0]
 801c25c:	2b00      	cmp	r3, #0
 801c25e:	d102      	bne.n	801c266 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801c260:	f04f 33ff 	mov.w	r3, #4294967295
 801c264:	e14c      	b.n	801c500 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801c266:	68bb      	ldr	r3, [r7, #8]
 801c268:	7c9b      	ldrb	r3, [r3, #18]
 801c26a:	2b08      	cmp	r3, #8
 801c26c:	d902      	bls.n	801c274 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801c26e:	f04f 33ff 	mov.w	r3, #4294967295
 801c272:	e145      	b.n	801c500 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 801c274:	68bb      	ldr	r3, [r7, #8]
 801c276:	6899      	ldr	r1, [r3, #8]
 801c278:	68bb      	ldr	r3, [r7, #8]
 801c27a:	7c9b      	ldrb	r3, [r3, #18]
 801c27c:	b29a      	uxth	r2, r3
 801c27e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c282:	4618      	mov	r0, r3
 801c284:	f001 fc1c 	bl	801dac0 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801c288:	4b40      	ldr	r3, [pc, #256]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c28a:	2200      	movs	r2, #0
 801c28c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801c290:	68bb      	ldr	r3, [r7, #8]
 801c292:	681b      	ldr	r3, [r3, #0]
 801c294:	4a3d      	ldr	r2, [pc, #244]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c296:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801c298:	68bb      	ldr	r3, [r7, #8]
 801c29a:	7cda      	ldrb	r2, [r3, #19]
 801c29c:	4b3b      	ldr	r3, [pc, #236]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c29e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801c2a2:	68bb      	ldr	r3, [r7, #8]
 801c2a4:	699b      	ldr	r3, [r3, #24]
 801c2a6:	4a39      	ldr	r2, [pc, #228]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c2a8:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801c2aa:	4b38      	ldr	r3, [pc, #224]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c2ac:	2200      	movs	r2, #0
 801c2ae:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801c2b0:	68bb      	ldr	r3, [r7, #8]
 801c2b2:	685b      	ldr	r3, [r3, #4]
 801c2b4:	b29b      	uxth	r3, r3
 801c2b6:	00db      	lsls	r3, r3, #3
 801c2b8:	b29a      	uxth	r2, r3
 801c2ba:	4b34      	ldr	r3, [pc, #208]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c2bc:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801c2be:	4b33      	ldr	r3, [pc, #204]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c2c0:	2204      	movs	r2, #4
 801c2c2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801c2c4:	68bb      	ldr	r3, [r7, #8]
 801c2c6:	7c9b      	ldrb	r3, [r3, #18]
 801c2c8:	00db      	lsls	r3, r3, #3
 801c2ca:	b2da      	uxtb	r2, r3
 801c2cc:	4b2f      	ldr	r3, [pc, #188]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c2ce:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801c2d0:	4b2e      	ldr	r3, [pc, #184]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c2d2:	2200      	movs	r2, #0
 801c2d4:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801c2d6:	68bb      	ldr	r3, [r7, #8]
 801c2d8:	7d9b      	ldrb	r3, [r3, #22]
 801c2da:	2b02      	cmp	r3, #2
 801c2dc:	d003      	beq.n	801c2e6 <RadioSetTxGenericConfig+0x23e>
 801c2de:	68bb      	ldr	r3, [r7, #8]
 801c2e0:	7d1b      	ldrb	r3, [r3, #20]
 801c2e2:	2b02      	cmp	r3, #2
 801c2e4:	d12a      	bne.n	801c33c <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801c2e6:	68bb      	ldr	r3, [r7, #8]
 801c2e8:	7d5b      	ldrb	r3, [r3, #21]
 801c2ea:	2bf1      	cmp	r3, #241	; 0xf1
 801c2ec:	d00a      	beq.n	801c304 <RadioSetTxGenericConfig+0x25c>
 801c2ee:	68bb      	ldr	r3, [r7, #8]
 801c2f0:	7d5b      	ldrb	r3, [r3, #21]
 801c2f2:	2bf2      	cmp	r3, #242	; 0xf2
 801c2f4:	d006      	beq.n	801c304 <RadioSetTxGenericConfig+0x25c>
 801c2f6:	68bb      	ldr	r3, [r7, #8]
 801c2f8:	7d5b      	ldrb	r3, [r3, #21]
 801c2fa:	2b01      	cmp	r3, #1
 801c2fc:	d002      	beq.n	801c304 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801c2fe:	f04f 33ff 	mov.w	r3, #4294967295
 801c302:	e0fd      	b.n	801c500 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801c304:	2301      	movs	r3, #1
 801c306:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801c308:	68bb      	ldr	r3, [r7, #8]
 801c30a:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801c30c:	4b20      	ldr	r3, [pc, #128]	; (801c390 <RadioSetTxGenericConfig+0x2e8>)
 801c30e:	6819      	ldr	r1, [r3, #0]
 801c310:	f107 0314 	add.w	r3, r7, #20
 801c314:	4a1f      	ldr	r2, [pc, #124]	; (801c394 <RadioSetTxGenericConfig+0x2ec>)
 801c316:	4618      	mov	r0, r3
 801c318:	f001 fad2 	bl	801d8c0 <RFW_Init>
 801c31c:	4603      	mov	r3, r0
 801c31e:	2b00      	cmp	r3, #0
 801c320:	d002      	beq.n	801c328 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 801c322:	f04f 33ff 	mov.w	r3, #4294967295
 801c326:	e0eb      	b.n	801c500 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801c328:	4b18      	ldr	r3, [pc, #96]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c32a:	2200      	movs	r2, #0
 801c32c:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801c32e:	4b17      	ldr	r3, [pc, #92]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c330:	2201      	movs	r2, #1
 801c332:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801c334:	4b15      	ldr	r3, [pc, #84]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c336:	2200      	movs	r2, #0
 801c338:	755a      	strb	r2, [r3, #21]
        {
 801c33a:	e00b      	b.n	801c354 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801c33c:	68bb      	ldr	r3, [r7, #8]
 801c33e:	7d5a      	ldrb	r2, [r3, #21]
 801c340:	4b12      	ldr	r3, [pc, #72]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c342:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801c344:	68bb      	ldr	r3, [r7, #8]
 801c346:	7d9a      	ldrb	r2, [r3, #22]
 801c348:	4b10      	ldr	r3, [pc, #64]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c34a:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801c34c:	68bb      	ldr	r3, [r7, #8]
 801c34e:	7d1a      	ldrb	r2, [r3, #20]
 801c350:	4b0e      	ldr	r3, [pc, #56]	; (801c38c <RadioSetTxGenericConfig+0x2e4>)
 801c352:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801c354:	f7ff f807 	bl	801b366 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801c358:	2000      	movs	r0, #0
 801c35a:	f7fe f9b1 	bl	801a6c0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c35e:	480e      	ldr	r0, [pc, #56]	; (801c398 <RadioSetTxGenericConfig+0x2f0>)
 801c360:	f000 fdca 	bl	801cef8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c364:	480d      	ldr	r0, [pc, #52]	; (801c39c <RadioSetTxGenericConfig+0x2f4>)
 801c366:	f000 fe99 	bl	801d09c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801c36a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c36e:	4618      	mov	r0, r3
 801c370:	f000 f961 	bl	801c636 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801c374:	68bb      	ldr	r3, [r7, #8]
 801c376:	8a1b      	ldrh	r3, [r3, #16]
 801c378:	4618      	mov	r0, r3
 801c37a:	f000 f9ab 	bl	801c6d4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801c37e:	68bb      	ldr	r3, [r7, #8]
 801c380:	899b      	ldrh	r3, [r3, #12]
 801c382:	4618      	mov	r0, r3
 801c384:	f000 f986 	bl	801c694 <SUBGRF_SetCrcPolynomial>
        break;
 801c388:	e0a6      	b.n	801c4d8 <RadioSetTxGenericConfig+0x430>
 801c38a:	bf00      	nop
 801c38c:	200023c0 	.word	0x200023c0
 801c390:	200023bc 	.word	0x200023bc
 801c394:	2000241c 	.word	0x2000241c
 801c398:	200023f8 	.word	0x200023f8
 801c39c:	200023ce 	.word	0x200023ce
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801c3a0:	4b59      	ldr	r3, [pc, #356]	; (801c508 <RadioSetTxGenericConfig+0x460>)
 801c3a2:	2201      	movs	r2, #1
 801c3a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801c3a8:	68bb      	ldr	r3, [r7, #8]
 801c3aa:	781a      	ldrb	r2, [r3, #0]
 801c3ac:	4b56      	ldr	r3, [pc, #344]	; (801c508 <RadioSetTxGenericConfig+0x460>)
 801c3ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801c3b2:	68bb      	ldr	r3, [r7, #8]
 801c3b4:	785a      	ldrb	r2, [r3, #1]
 801c3b6:	4b54      	ldr	r3, [pc, #336]	; (801c508 <RadioSetTxGenericConfig+0x460>)
 801c3b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801c3bc:	68bb      	ldr	r3, [r7, #8]
 801c3be:	789a      	ldrb	r2, [r3, #2]
 801c3c0:	4b51      	ldr	r3, [pc, #324]	; (801c508 <RadioSetTxGenericConfig+0x460>)
 801c3c2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801c3c6:	68bb      	ldr	r3, [r7, #8]
 801c3c8:	78db      	ldrb	r3, [r3, #3]
 801c3ca:	2b02      	cmp	r3, #2
 801c3cc:	d010      	beq.n	801c3f0 <RadioSetTxGenericConfig+0x348>
 801c3ce:	2b02      	cmp	r3, #2
 801c3d0:	dc20      	bgt.n	801c414 <RadioSetTxGenericConfig+0x36c>
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	d002      	beq.n	801c3dc <RadioSetTxGenericConfig+0x334>
 801c3d6:	2b01      	cmp	r3, #1
 801c3d8:	d005      	beq.n	801c3e6 <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 801c3da:	e01b      	b.n	801c414 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801c3dc:	4b4a      	ldr	r3, [pc, #296]	; (801c508 <RadioSetTxGenericConfig+0x460>)
 801c3de:	2200      	movs	r2, #0
 801c3e0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801c3e4:	e017      	b.n	801c416 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801c3e6:	4b48      	ldr	r3, [pc, #288]	; (801c508 <RadioSetTxGenericConfig+0x460>)
 801c3e8:	2201      	movs	r2, #1
 801c3ea:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801c3ee:	e012      	b.n	801c416 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801c3f0:	68bb      	ldr	r3, [r7, #8]
 801c3f2:	781b      	ldrb	r3, [r3, #0]
 801c3f4:	2b0b      	cmp	r3, #11
 801c3f6:	d003      	beq.n	801c400 <RadioSetTxGenericConfig+0x358>
 801c3f8:	68bb      	ldr	r3, [r7, #8]
 801c3fa:	781b      	ldrb	r3, [r3, #0]
 801c3fc:	2b0c      	cmp	r3, #12
 801c3fe:	d104      	bne.n	801c40a <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801c400:	4b41      	ldr	r3, [pc, #260]	; (801c508 <RadioSetTxGenericConfig+0x460>)
 801c402:	2201      	movs	r2, #1
 801c404:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801c408:	e005      	b.n	801c416 <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801c40a:	4b3f      	ldr	r3, [pc, #252]	; (801c508 <RadioSetTxGenericConfig+0x460>)
 801c40c:	2200      	movs	r2, #0
 801c40e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801c412:	e000      	b.n	801c416 <RadioSetTxGenericConfig+0x36e>
            break;
 801c414:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801c416:	4b3c      	ldr	r3, [pc, #240]	; (801c508 <RadioSetTxGenericConfig+0x460>)
 801c418:	2201      	movs	r2, #1
 801c41a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801c41c:	68bb      	ldr	r3, [r7, #8]
 801c41e:	889a      	ldrh	r2, [r3, #4]
 801c420:	4b39      	ldr	r3, [pc, #228]	; (801c508 <RadioSetTxGenericConfig+0x460>)
 801c422:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801c424:	68bb      	ldr	r3, [r7, #8]
 801c426:	799a      	ldrb	r2, [r3, #6]
 801c428:	4b37      	ldr	r3, [pc, #220]	; (801c508 <RadioSetTxGenericConfig+0x460>)
 801c42a:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801c42c:	68bb      	ldr	r3, [r7, #8]
 801c42e:	79da      	ldrb	r2, [r3, #7]
 801c430:	4b35      	ldr	r3, [pc, #212]	; (801c508 <RadioSetTxGenericConfig+0x460>)
 801c432:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801c436:	68bb      	ldr	r3, [r7, #8]
 801c438:	7a1a      	ldrb	r2, [r3, #8]
 801c43a:	4b33      	ldr	r3, [pc, #204]	; (801c508 <RadioSetTxGenericConfig+0x460>)
 801c43c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801c440:	f7fe ff91 	bl	801b366 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801c444:	2001      	movs	r0, #1
 801c446:	f7fe f93b 	bl	801a6c0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c44a:	4830      	ldr	r0, [pc, #192]	; (801c50c <RadioSetTxGenericConfig+0x464>)
 801c44c:	f000 fd54 	bl	801cef8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c450:	482f      	ldr	r0, [pc, #188]	; (801c510 <RadioSetTxGenericConfig+0x468>)
 801c452:	f000 fe23 	bl	801d09c <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801c456:	4b2c      	ldr	r3, [pc, #176]	; (801c508 <RadioSetTxGenericConfig+0x460>)
 801c458:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c45c:	2b06      	cmp	r3, #6
 801c45e:	d10d      	bne.n	801c47c <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801c460:	f640 0089 	movw	r0, #2185	; 0x889
 801c464:	f000 ff76 	bl	801d354 <SUBGRF_ReadRegister>
 801c468:	4603      	mov	r3, r0
 801c46a:	f023 0304 	bic.w	r3, r3, #4
 801c46e:	b2db      	uxtb	r3, r3
 801c470:	4619      	mov	r1, r3
 801c472:	f640 0089 	movw	r0, #2185	; 0x889
 801c476:	f000 ff59 	bl	801d32c <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 801c47a:	e02d      	b.n	801c4d8 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801c47c:	f640 0089 	movw	r0, #2185	; 0x889
 801c480:	f000 ff68 	bl	801d354 <SUBGRF_ReadRegister>
 801c484:	4603      	mov	r3, r0
 801c486:	f043 0304 	orr.w	r3, r3, #4
 801c48a:	b2db      	uxtb	r3, r3
 801c48c:	4619      	mov	r1, r3
 801c48e:	f640 0089 	movw	r0, #2185	; 0x889
 801c492:	f000 ff4b 	bl	801d32c <SUBGRF_WriteRegister>
        break;
 801c496:	e01f      	b.n	801c4d8 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801c498:	68bb      	ldr	r3, [r7, #8]
 801c49a:	681b      	ldr	r3, [r3, #0]
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	d004      	beq.n	801c4aa <RadioSetTxGenericConfig+0x402>
 801c4a0:	68bb      	ldr	r3, [r7, #8]
 801c4a2:	681b      	ldr	r3, [r3, #0]
 801c4a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801c4a8:	d902      	bls.n	801c4b0 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801c4aa:	f04f 33ff 	mov.w	r3, #4294967295
 801c4ae:	e027      	b.n	801c500 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801c4b0:	2003      	movs	r0, #3
 801c4b2:	f7fe f905 	bl	801a6c0 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801c4b6:	4b14      	ldr	r3, [pc, #80]	; (801c508 <RadioSetTxGenericConfig+0x460>)
 801c4b8:	2202      	movs	r2, #2
 801c4ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801c4be:	68bb      	ldr	r3, [r7, #8]
 801c4c0:	681b      	ldr	r3, [r3, #0]
 801c4c2:	4a11      	ldr	r2, [pc, #68]	; (801c508 <RadioSetTxGenericConfig+0x460>)
 801c4c4:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801c4c6:	4b10      	ldr	r3, [pc, #64]	; (801c508 <RadioSetTxGenericConfig+0x460>)
 801c4c8:	2216      	movs	r2, #22
 801c4ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c4ce:	480f      	ldr	r0, [pc, #60]	; (801c50c <RadioSetTxGenericConfig+0x464>)
 801c4d0:	f000 fd12 	bl	801cef8 <SUBGRF_SetModulationParams>
        break;
 801c4d4:	e000      	b.n	801c4d8 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801c4d6:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801c4d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c4dc:	4618      	mov	r0, r3
 801c4de:	f001 f841 	bl	801d564 <SUBGRF_SetRfTxPower>
 801c4e2:	4603      	mov	r3, r0
 801c4e4:	461a      	mov	r2, r3
 801c4e6:	4b08      	ldr	r3, [pc, #32]	; (801c508 <RadioSetTxGenericConfig+0x460>)
 801c4e8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801c4ec:	4b06      	ldr	r3, [pc, #24]	; (801c508 <RadioSetTxGenericConfig+0x460>)
 801c4ee:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c4f2:	4618      	mov	r0, r3
 801c4f4:	f001 fa05 	bl	801d902 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801c4f8:	4a03      	ldr	r2, [pc, #12]	; (801c508 <RadioSetTxGenericConfig+0x460>)
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	6053      	str	r3, [r2, #4]
    return 0;
 801c4fe:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801c500:	4618      	mov	r0, r3
 801c502:	3738      	adds	r7, #56	; 0x38
 801c504:	46bd      	mov	sp, r7
 801c506:	bd80      	pop	{r7, pc}
 801c508:	200023c0 	.word	0x200023c0
 801c50c:	200023f8 	.word	0x200023f8
 801c510:	200023ce 	.word	0x200023ce

0801c514 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801c514:	b580      	push	{r7, lr}
 801c516:	b084      	sub	sp, #16
 801c518:	af00      	add	r7, sp, #0
 801c51a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	2b00      	cmp	r3, #0
 801c520:	d002      	beq.n	801c528 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801c522:	4a1a      	ldr	r2, [pc, #104]	; (801c58c <SUBGRF_Init+0x78>)
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801c528:	f7e6 f832 	bl	8002590 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801c52c:	2002      	movs	r0, #2
 801c52e:	f001 f8e5 	bl	801d6fc <Radio_SMPS_Set>

    ImageCalibrated = false;
 801c532:	4b17      	ldr	r3, [pc, #92]	; (801c590 <SUBGRF_Init+0x7c>)
 801c534:	2200      	movs	r2, #0
 801c536:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801c538:	2000      	movs	r0, #0
 801c53a:	f000 f977 	bl	801c82c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801c53e:	f7f0 f8d9 	bl	800c6f4 <RBI_IsTCXO>
 801c542:	4603      	mov	r3, r0
 801c544:	2b01      	cmp	r3, #1
 801c546:	d10e      	bne.n	801c566 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801c548:	2140      	movs	r1, #64	; 0x40
 801c54a:	2001      	movs	r0, #1
 801c54c:	f000 fb78 	bl	801cc40 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801c550:	2100      	movs	r1, #0
 801c552:	f640 1011 	movw	r0, #2321	; 0x911
 801c556:	f000 fee9 	bl	801d32c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801c55a:	237f      	movs	r3, #127	; 0x7f
 801c55c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801c55e:	7b38      	ldrb	r0, [r7, #12]
 801c560:	f000 fa85 	bl	801ca6e <SUBGRF_Calibrate>
 801c564:	e009      	b.n	801c57a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801c566:	2120      	movs	r1, #32
 801c568:	f640 1011 	movw	r0, #2321	; 0x911
 801c56c:	f000 fede 	bl	801d32c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801c570:	2120      	movs	r1, #32
 801c572:	f640 1012 	movw	r0, #2322	; 0x912
 801c576:	f000 fed9 	bl	801d32c <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801c57a:	f7f0 f89f 	bl	800c6bc <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801c57e:	4b05      	ldr	r3, [pc, #20]	; (801c594 <SUBGRF_Init+0x80>)
 801c580:	2201      	movs	r2, #1
 801c582:	701a      	strb	r2, [r3, #0]
}
 801c584:	bf00      	nop
 801c586:	3710      	adds	r7, #16
 801c588:	46bd      	mov	sp, r7
 801c58a:	bd80      	pop	{r7, pc}
 801c58c:	20002458 	.word	0x20002458
 801c590:	20002454 	.word	0x20002454
 801c594:	2000244c 	.word	0x2000244c

0801c598 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801c598:	b480      	push	{r7}
 801c59a:	af00      	add	r7, sp, #0
    return OperatingMode;
 801c59c:	4b02      	ldr	r3, [pc, #8]	; (801c5a8 <SUBGRF_GetOperatingMode+0x10>)
 801c59e:	781b      	ldrb	r3, [r3, #0]
}
 801c5a0:	4618      	mov	r0, r3
 801c5a2:	46bd      	mov	sp, r7
 801c5a4:	bc80      	pop	{r7}
 801c5a6:	4770      	bx	lr
 801c5a8:	2000244c 	.word	0x2000244c

0801c5ac <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801c5ac:	b580      	push	{r7, lr}
 801c5ae:	b082      	sub	sp, #8
 801c5b0:	af00      	add	r7, sp, #0
 801c5b2:	6078      	str	r0, [r7, #4]
 801c5b4:	460b      	mov	r3, r1
 801c5b6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801c5b8:	78fb      	ldrb	r3, [r7, #3]
 801c5ba:	461a      	mov	r2, r3
 801c5bc:	6879      	ldr	r1, [r7, #4]
 801c5be:	2000      	movs	r0, #0
 801c5c0:	f000 ff20 	bl	801d404 <SUBGRF_WriteBuffer>
}
 801c5c4:	bf00      	nop
 801c5c6:	3708      	adds	r7, #8
 801c5c8:	46bd      	mov	sp, r7
 801c5ca:	bd80      	pop	{r7, pc}

0801c5cc <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801c5cc:	b580      	push	{r7, lr}
 801c5ce:	b086      	sub	sp, #24
 801c5d0:	af00      	add	r7, sp, #0
 801c5d2:	60f8      	str	r0, [r7, #12]
 801c5d4:	60b9      	str	r1, [r7, #8]
 801c5d6:	4613      	mov	r3, r2
 801c5d8:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801c5da:	2300      	movs	r3, #0
 801c5dc:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801c5de:	f107 0317 	add.w	r3, r7, #23
 801c5e2:	4619      	mov	r1, r3
 801c5e4:	68b8      	ldr	r0, [r7, #8]
 801c5e6:	f000 fe23 	bl	801d230 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801c5ea:	68bb      	ldr	r3, [r7, #8]
 801c5ec:	781b      	ldrb	r3, [r3, #0]
 801c5ee:	79fa      	ldrb	r2, [r7, #7]
 801c5f0:	429a      	cmp	r2, r3
 801c5f2:	d201      	bcs.n	801c5f8 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801c5f4:	2301      	movs	r3, #1
 801c5f6:	e007      	b.n	801c608 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801c5f8:	7df8      	ldrb	r0, [r7, #23]
 801c5fa:	68bb      	ldr	r3, [r7, #8]
 801c5fc:	781b      	ldrb	r3, [r3, #0]
 801c5fe:	461a      	mov	r2, r3
 801c600:	68f9      	ldr	r1, [r7, #12]
 801c602:	f000 ff21 	bl	801d448 <SUBGRF_ReadBuffer>

    return 0;
 801c606:	2300      	movs	r3, #0
}
 801c608:	4618      	mov	r0, r3
 801c60a:	3718      	adds	r7, #24
 801c60c:	46bd      	mov	sp, r7
 801c60e:	bd80      	pop	{r7, pc}

0801c610 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801c610:	b580      	push	{r7, lr}
 801c612:	b084      	sub	sp, #16
 801c614:	af00      	add	r7, sp, #0
 801c616:	60f8      	str	r0, [r7, #12]
 801c618:	460b      	mov	r3, r1
 801c61a:	607a      	str	r2, [r7, #4]
 801c61c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801c61e:	7afb      	ldrb	r3, [r7, #11]
 801c620:	4619      	mov	r1, r3
 801c622:	68f8      	ldr	r0, [r7, #12]
 801c624:	f7ff ffc2 	bl	801c5ac <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801c628:	6878      	ldr	r0, [r7, #4]
 801c62a:	f000 f91b 	bl	801c864 <SUBGRF_SetTx>
}
 801c62e:	bf00      	nop
 801c630:	3710      	adds	r7, #16
 801c632:	46bd      	mov	sp, r7
 801c634:	bd80      	pop	{r7, pc}

0801c636 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801c636:	b580      	push	{r7, lr}
 801c638:	b082      	sub	sp, #8
 801c63a:	af00      	add	r7, sp, #0
 801c63c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801c63e:	2208      	movs	r2, #8
 801c640:	6879      	ldr	r1, [r7, #4]
 801c642:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801c646:	f000 fe99 	bl	801d37c <SUBGRF_WriteRegisters>
    return 0;
 801c64a:	2300      	movs	r3, #0
}
 801c64c:	4618      	mov	r0, r3
 801c64e:	3708      	adds	r7, #8
 801c650:	46bd      	mov	sp, r7
 801c652:	bd80      	pop	{r7, pc}

0801c654 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801c654:	b580      	push	{r7, lr}
 801c656:	b084      	sub	sp, #16
 801c658:	af00      	add	r7, sp, #0
 801c65a:	4603      	mov	r3, r0
 801c65c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801c65e:	88fb      	ldrh	r3, [r7, #6]
 801c660:	0a1b      	lsrs	r3, r3, #8
 801c662:	b29b      	uxth	r3, r3
 801c664:	b2db      	uxtb	r3, r3
 801c666:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801c668:	88fb      	ldrh	r3, [r7, #6]
 801c66a:	b2db      	uxtb	r3, r3
 801c66c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801c66e:	f000 fb6b 	bl	801cd48 <SUBGRF_GetPacketType>
 801c672:	4603      	mov	r3, r0
 801c674:	2b00      	cmp	r3, #0
 801c676:	d108      	bne.n	801c68a <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801c678:	f107 030c 	add.w	r3, r7, #12
 801c67c:	2202      	movs	r2, #2
 801c67e:	4619      	mov	r1, r3
 801c680:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801c684:	f000 fe7a 	bl	801d37c <SUBGRF_WriteRegisters>
            break;
 801c688:	e000      	b.n	801c68c <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801c68a:	bf00      	nop
    }
}
 801c68c:	bf00      	nop
 801c68e:	3710      	adds	r7, #16
 801c690:	46bd      	mov	sp, r7
 801c692:	bd80      	pop	{r7, pc}

0801c694 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801c694:	b580      	push	{r7, lr}
 801c696:	b084      	sub	sp, #16
 801c698:	af00      	add	r7, sp, #0
 801c69a:	4603      	mov	r3, r0
 801c69c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801c69e:	88fb      	ldrh	r3, [r7, #6]
 801c6a0:	0a1b      	lsrs	r3, r3, #8
 801c6a2:	b29b      	uxth	r3, r3
 801c6a4:	b2db      	uxtb	r3, r3
 801c6a6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801c6a8:	88fb      	ldrh	r3, [r7, #6]
 801c6aa:	b2db      	uxtb	r3, r3
 801c6ac:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801c6ae:	f000 fb4b 	bl	801cd48 <SUBGRF_GetPacketType>
 801c6b2:	4603      	mov	r3, r0
 801c6b4:	2b00      	cmp	r3, #0
 801c6b6:	d108      	bne.n	801c6ca <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801c6b8:	f107 030c 	add.w	r3, r7, #12
 801c6bc:	2202      	movs	r2, #2
 801c6be:	4619      	mov	r1, r3
 801c6c0:	f240 60be 	movw	r0, #1726	; 0x6be
 801c6c4:	f000 fe5a 	bl	801d37c <SUBGRF_WriteRegisters>
            break;
 801c6c8:	e000      	b.n	801c6cc <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801c6ca:	bf00      	nop
    }
}
 801c6cc:	bf00      	nop
 801c6ce:	3710      	adds	r7, #16
 801c6d0:	46bd      	mov	sp, r7
 801c6d2:	bd80      	pop	{r7, pc}

0801c6d4 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801c6d4:	b580      	push	{r7, lr}
 801c6d6:	b084      	sub	sp, #16
 801c6d8:	af00      	add	r7, sp, #0
 801c6da:	4603      	mov	r3, r0
 801c6dc:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801c6de:	2300      	movs	r3, #0
 801c6e0:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801c6e2:	f000 fb31 	bl	801cd48 <SUBGRF_GetPacketType>
 801c6e6:	4603      	mov	r3, r0
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	d121      	bne.n	801c730 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801c6ec:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801c6f0:	f000 fe30 	bl	801d354 <SUBGRF_ReadRegister>
 801c6f4:	4603      	mov	r3, r0
 801c6f6:	f023 0301 	bic.w	r3, r3, #1
 801c6fa:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801c6fc:	88fb      	ldrh	r3, [r7, #6]
 801c6fe:	0a1b      	lsrs	r3, r3, #8
 801c700:	b29b      	uxth	r3, r3
 801c702:	b25b      	sxtb	r3, r3
 801c704:	f003 0301 	and.w	r3, r3, #1
 801c708:	b25a      	sxtb	r2, r3
 801c70a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c70e:	4313      	orrs	r3, r2
 801c710:	b25b      	sxtb	r3, r3
 801c712:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801c714:	7bfb      	ldrb	r3, [r7, #15]
 801c716:	4619      	mov	r1, r3
 801c718:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801c71c:	f000 fe06 	bl	801d32c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801c720:	88fb      	ldrh	r3, [r7, #6]
 801c722:	b2db      	uxtb	r3, r3
 801c724:	4619      	mov	r1, r3
 801c726:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801c72a:	f000 fdff 	bl	801d32c <SUBGRF_WriteRegister>
            break;
 801c72e:	e000      	b.n	801c732 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801c730:	bf00      	nop
    }
}
 801c732:	bf00      	nop
 801c734:	3710      	adds	r7, #16
 801c736:	46bd      	mov	sp, r7
 801c738:	bd80      	pop	{r7, pc}

0801c73a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801c73a:	b580      	push	{r7, lr}
 801c73c:	b082      	sub	sp, #8
 801c73e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801c740:	2300      	movs	r3, #0
 801c742:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801c744:	2300      	movs	r3, #0
 801c746:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801c748:	2300      	movs	r3, #0
 801c74a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801c74c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c750:	f000 fe00 	bl	801d354 <SUBGRF_ReadRegister>
 801c754:	4603      	mov	r3, r0
 801c756:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801c758:	79fb      	ldrb	r3, [r7, #7]
 801c75a:	f023 0301 	bic.w	r3, r3, #1
 801c75e:	b2db      	uxtb	r3, r3
 801c760:	4619      	mov	r1, r3
 801c762:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c766:	f000 fde1 	bl	801d32c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801c76a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c76e:	f000 fdf1 	bl	801d354 <SUBGRF_ReadRegister>
 801c772:	4603      	mov	r3, r0
 801c774:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801c776:	79bb      	ldrb	r3, [r7, #6]
 801c778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c77c:	b2db      	uxtb	r3, r3
 801c77e:	4619      	mov	r1, r3
 801c780:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c784:	f000 fdd2 	bl	801d32c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801c788:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c78c:	f000 f88a 	bl	801c8a4 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801c790:	463b      	mov	r3, r7
 801c792:	2204      	movs	r2, #4
 801c794:	4619      	mov	r1, r3
 801c796:	f640 0019 	movw	r0, #2073	; 0x819
 801c79a:	f000 fe11 	bl	801d3c0 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801c79e:	2000      	movs	r0, #0
 801c7a0:	f000 f844 	bl	801c82c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801c7a4:	79fb      	ldrb	r3, [r7, #7]
 801c7a6:	4619      	mov	r1, r3
 801c7a8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c7ac:	f000 fdbe 	bl	801d32c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801c7b0:	79bb      	ldrb	r3, [r7, #6]
 801c7b2:	4619      	mov	r1, r3
 801c7b4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c7b8:	f000 fdb8 	bl	801d32c <SUBGRF_WriteRegister>

    return number;
 801c7bc:	683b      	ldr	r3, [r7, #0]
}
 801c7be:	4618      	mov	r0, r3
 801c7c0:	3708      	adds	r7, #8
 801c7c2:	46bd      	mov	sp, r7
 801c7c4:	bd80      	pop	{r7, pc}
	...

0801c7c8 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801c7c8:	b580      	push	{r7, lr}
 801c7ca:	b084      	sub	sp, #16
 801c7cc:	af00      	add	r7, sp, #0
 801c7ce:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801c7d0:	2000      	movs	r0, #0
 801c7d2:	f7ef ff7a 	bl	800c6ca <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801c7d6:	2002      	movs	r0, #2
 801c7d8:	f000 ff90 	bl	801d6fc <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c7dc:	793b      	ldrb	r3, [r7, #4]
 801c7de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c7e2:	b2db      	uxtb	r3, r3
 801c7e4:	009b      	lsls	r3, r3, #2
 801c7e6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801c7e8:	793b      	ldrb	r3, [r7, #4]
 801c7ea:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801c7ee:	b2db      	uxtb	r3, r3
 801c7f0:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c7f2:	b25b      	sxtb	r3, r3
 801c7f4:	4313      	orrs	r3, r2
 801c7f6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801c7f8:	793b      	ldrb	r3, [r7, #4]
 801c7fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c7fe:	b2db      	uxtb	r3, r3
 801c800:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801c802:	4313      	orrs	r3, r2
 801c804:	b25b      	sxtb	r3, r3
 801c806:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c808:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801c80a:	f107 030f 	add.w	r3, r7, #15
 801c80e:	2201      	movs	r2, #1
 801c810:	4619      	mov	r1, r3
 801c812:	2084      	movs	r0, #132	; 0x84
 801c814:	f000 fe3a 	bl	801d48c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801c818:	4b03      	ldr	r3, [pc, #12]	; (801c828 <SUBGRF_SetSleep+0x60>)
 801c81a:	2200      	movs	r2, #0
 801c81c:	701a      	strb	r2, [r3, #0]
}
 801c81e:	bf00      	nop
 801c820:	3710      	adds	r7, #16
 801c822:	46bd      	mov	sp, r7
 801c824:	bd80      	pop	{r7, pc}
 801c826:	bf00      	nop
 801c828:	2000244c 	.word	0x2000244c

0801c82c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801c82c:	b580      	push	{r7, lr}
 801c82e:	b082      	sub	sp, #8
 801c830:	af00      	add	r7, sp, #0
 801c832:	4603      	mov	r3, r0
 801c834:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801c836:	1dfb      	adds	r3, r7, #7
 801c838:	2201      	movs	r2, #1
 801c83a:	4619      	mov	r1, r3
 801c83c:	2080      	movs	r0, #128	; 0x80
 801c83e:	f000 fe25 	bl	801d48c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801c842:	79fb      	ldrb	r3, [r7, #7]
 801c844:	2b00      	cmp	r3, #0
 801c846:	d103      	bne.n	801c850 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801c848:	4b05      	ldr	r3, [pc, #20]	; (801c860 <SUBGRF_SetStandby+0x34>)
 801c84a:	2201      	movs	r2, #1
 801c84c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801c84e:	e002      	b.n	801c856 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801c850:	4b03      	ldr	r3, [pc, #12]	; (801c860 <SUBGRF_SetStandby+0x34>)
 801c852:	2202      	movs	r2, #2
 801c854:	701a      	strb	r2, [r3, #0]
}
 801c856:	bf00      	nop
 801c858:	3708      	adds	r7, #8
 801c85a:	46bd      	mov	sp, r7
 801c85c:	bd80      	pop	{r7, pc}
 801c85e:	bf00      	nop
 801c860:	2000244c 	.word	0x2000244c

0801c864 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801c864:	b580      	push	{r7, lr}
 801c866:	b084      	sub	sp, #16
 801c868:	af00      	add	r7, sp, #0
 801c86a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801c86c:	4b0c      	ldr	r3, [pc, #48]	; (801c8a0 <SUBGRF_SetTx+0x3c>)
 801c86e:	2204      	movs	r2, #4
 801c870:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c872:	687b      	ldr	r3, [r7, #4]
 801c874:	0c1b      	lsrs	r3, r3, #16
 801c876:	b2db      	uxtb	r3, r3
 801c878:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c87a:	687b      	ldr	r3, [r7, #4]
 801c87c:	0a1b      	lsrs	r3, r3, #8
 801c87e:	b2db      	uxtb	r3, r3
 801c880:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c882:	687b      	ldr	r3, [r7, #4]
 801c884:	b2db      	uxtb	r3, r3
 801c886:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801c888:	f107 030c 	add.w	r3, r7, #12
 801c88c:	2203      	movs	r2, #3
 801c88e:	4619      	mov	r1, r3
 801c890:	2083      	movs	r0, #131	; 0x83
 801c892:	f000 fdfb 	bl	801d48c <SUBGRF_WriteCommand>
}
 801c896:	bf00      	nop
 801c898:	3710      	adds	r7, #16
 801c89a:	46bd      	mov	sp, r7
 801c89c:	bd80      	pop	{r7, pc}
 801c89e:	bf00      	nop
 801c8a0:	2000244c 	.word	0x2000244c

0801c8a4 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801c8a4:	b580      	push	{r7, lr}
 801c8a6:	b084      	sub	sp, #16
 801c8a8:	af00      	add	r7, sp, #0
 801c8aa:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801c8ac:	4b0c      	ldr	r3, [pc, #48]	; (801c8e0 <SUBGRF_SetRx+0x3c>)
 801c8ae:	2205      	movs	r2, #5
 801c8b0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c8b2:	687b      	ldr	r3, [r7, #4]
 801c8b4:	0c1b      	lsrs	r3, r3, #16
 801c8b6:	b2db      	uxtb	r3, r3
 801c8b8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c8ba:	687b      	ldr	r3, [r7, #4]
 801c8bc:	0a1b      	lsrs	r3, r3, #8
 801c8be:	b2db      	uxtb	r3, r3
 801c8c0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c8c2:	687b      	ldr	r3, [r7, #4]
 801c8c4:	b2db      	uxtb	r3, r3
 801c8c6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801c8c8:	f107 030c 	add.w	r3, r7, #12
 801c8cc:	2203      	movs	r2, #3
 801c8ce:	4619      	mov	r1, r3
 801c8d0:	2082      	movs	r0, #130	; 0x82
 801c8d2:	f000 fddb 	bl	801d48c <SUBGRF_WriteCommand>
}
 801c8d6:	bf00      	nop
 801c8d8:	3710      	adds	r7, #16
 801c8da:	46bd      	mov	sp, r7
 801c8dc:	bd80      	pop	{r7, pc}
 801c8de:	bf00      	nop
 801c8e0:	2000244c 	.word	0x2000244c

0801c8e4 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801c8e4:	b580      	push	{r7, lr}
 801c8e6:	b084      	sub	sp, #16
 801c8e8:	af00      	add	r7, sp, #0
 801c8ea:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801c8ec:	4b0e      	ldr	r3, [pc, #56]	; (801c928 <SUBGRF_SetRxBoosted+0x44>)
 801c8ee:	2205      	movs	r2, #5
 801c8f0:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801c8f2:	2197      	movs	r1, #151	; 0x97
 801c8f4:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801c8f8:	f000 fd18 	bl	801d32c <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c8fc:	687b      	ldr	r3, [r7, #4]
 801c8fe:	0c1b      	lsrs	r3, r3, #16
 801c900:	b2db      	uxtb	r3, r3
 801c902:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c904:	687b      	ldr	r3, [r7, #4]
 801c906:	0a1b      	lsrs	r3, r3, #8
 801c908:	b2db      	uxtb	r3, r3
 801c90a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c90c:	687b      	ldr	r3, [r7, #4]
 801c90e:	b2db      	uxtb	r3, r3
 801c910:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801c912:	f107 030c 	add.w	r3, r7, #12
 801c916:	2203      	movs	r2, #3
 801c918:	4619      	mov	r1, r3
 801c91a:	2082      	movs	r0, #130	; 0x82
 801c91c:	f000 fdb6 	bl	801d48c <SUBGRF_WriteCommand>
}
 801c920:	bf00      	nop
 801c922:	3710      	adds	r7, #16
 801c924:	46bd      	mov	sp, r7
 801c926:	bd80      	pop	{r7, pc}
 801c928:	2000244c 	.word	0x2000244c

0801c92c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801c92c:	b580      	push	{r7, lr}
 801c92e:	b084      	sub	sp, #16
 801c930:	af00      	add	r7, sp, #0
 801c932:	6078      	str	r0, [r7, #4]
 801c934:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801c936:	687b      	ldr	r3, [r7, #4]
 801c938:	0c1b      	lsrs	r3, r3, #16
 801c93a:	b2db      	uxtb	r3, r3
 801c93c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801c93e:	687b      	ldr	r3, [r7, #4]
 801c940:	0a1b      	lsrs	r3, r3, #8
 801c942:	b2db      	uxtb	r3, r3
 801c944:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801c946:	687b      	ldr	r3, [r7, #4]
 801c948:	b2db      	uxtb	r3, r3
 801c94a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801c94c:	683b      	ldr	r3, [r7, #0]
 801c94e:	0c1b      	lsrs	r3, r3, #16
 801c950:	b2db      	uxtb	r3, r3
 801c952:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801c954:	683b      	ldr	r3, [r7, #0]
 801c956:	0a1b      	lsrs	r3, r3, #8
 801c958:	b2db      	uxtb	r3, r3
 801c95a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801c95c:	683b      	ldr	r3, [r7, #0]
 801c95e:	b2db      	uxtb	r3, r3
 801c960:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801c962:	f107 0308 	add.w	r3, r7, #8
 801c966:	2206      	movs	r2, #6
 801c968:	4619      	mov	r1, r3
 801c96a:	2094      	movs	r0, #148	; 0x94
 801c96c:	f000 fd8e 	bl	801d48c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801c970:	4b03      	ldr	r3, [pc, #12]	; (801c980 <SUBGRF_SetRxDutyCycle+0x54>)
 801c972:	2206      	movs	r2, #6
 801c974:	701a      	strb	r2, [r3, #0]
}
 801c976:	bf00      	nop
 801c978:	3710      	adds	r7, #16
 801c97a:	46bd      	mov	sp, r7
 801c97c:	bd80      	pop	{r7, pc}
 801c97e:	bf00      	nop
 801c980:	2000244c 	.word	0x2000244c

0801c984 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801c984:	b580      	push	{r7, lr}
 801c986:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801c988:	2200      	movs	r2, #0
 801c98a:	2100      	movs	r1, #0
 801c98c:	20c5      	movs	r0, #197	; 0xc5
 801c98e:	f000 fd7d 	bl	801d48c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801c992:	4b02      	ldr	r3, [pc, #8]	; (801c99c <SUBGRF_SetCad+0x18>)
 801c994:	2207      	movs	r2, #7
 801c996:	701a      	strb	r2, [r3, #0]
}
 801c998:	bf00      	nop
 801c99a:	bd80      	pop	{r7, pc}
 801c99c:	2000244c 	.word	0x2000244c

0801c9a0 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801c9a0:	b580      	push	{r7, lr}
 801c9a2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801c9a4:	2200      	movs	r2, #0
 801c9a6:	2100      	movs	r1, #0
 801c9a8:	20d1      	movs	r0, #209	; 0xd1
 801c9aa:	f000 fd6f 	bl	801d48c <SUBGRF_WriteCommand>
}
 801c9ae:	bf00      	nop
 801c9b0:	bd80      	pop	{r7, pc}

0801c9b2 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801c9b2:	b580      	push	{r7, lr}
 801c9b4:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801c9b6:	2200      	movs	r2, #0
 801c9b8:	2100      	movs	r1, #0
 801c9ba:	20d2      	movs	r0, #210	; 0xd2
 801c9bc:	f000 fd66 	bl	801d48c <SUBGRF_WriteCommand>
}
 801c9c0:	bf00      	nop
 801c9c2:	bd80      	pop	{r7, pc}

0801c9c4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801c9c4:	b580      	push	{r7, lr}
 801c9c6:	b082      	sub	sp, #8
 801c9c8:	af00      	add	r7, sp, #0
 801c9ca:	4603      	mov	r3, r0
 801c9cc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801c9ce:	1dfb      	adds	r3, r7, #7
 801c9d0:	2201      	movs	r2, #1
 801c9d2:	4619      	mov	r1, r3
 801c9d4:	209f      	movs	r0, #159	; 0x9f
 801c9d6:	f000 fd59 	bl	801d48c <SUBGRF_WriteCommand>
}
 801c9da:	bf00      	nop
 801c9dc:	3708      	adds	r7, #8
 801c9de:	46bd      	mov	sp, r7
 801c9e0:	bd80      	pop	{r7, pc}

0801c9e2 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801c9e2:	b580      	push	{r7, lr}
 801c9e4:	b084      	sub	sp, #16
 801c9e6:	af00      	add	r7, sp, #0
 801c9e8:	4603      	mov	r3, r0
 801c9ea:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801c9ec:	1dfb      	adds	r3, r7, #7
 801c9ee:	2201      	movs	r2, #1
 801c9f0:	4619      	mov	r1, r3
 801c9f2:	20a0      	movs	r0, #160	; 0xa0
 801c9f4:	f000 fd4a 	bl	801d48c <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801c9f8:	79fb      	ldrb	r3, [r7, #7]
 801c9fa:	2b3f      	cmp	r3, #63	; 0x3f
 801c9fc:	d91c      	bls.n	801ca38 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801c9fe:	79fb      	ldrb	r3, [r7, #7]
 801ca00:	085b      	lsrs	r3, r3, #1
 801ca02:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801ca04:	2300      	movs	r3, #0
 801ca06:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801ca08:	2300      	movs	r3, #0
 801ca0a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801ca0c:	e005      	b.n	801ca1a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801ca0e:	7bfb      	ldrb	r3, [r7, #15]
 801ca10:	089b      	lsrs	r3, r3, #2
 801ca12:	73fb      	strb	r3, [r7, #15]
            exp++;
 801ca14:	7bbb      	ldrb	r3, [r7, #14]
 801ca16:	3301      	adds	r3, #1
 801ca18:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801ca1a:	7bfb      	ldrb	r3, [r7, #15]
 801ca1c:	2b1f      	cmp	r3, #31
 801ca1e:	d8f6      	bhi.n	801ca0e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801ca20:	7bfb      	ldrb	r3, [r7, #15]
 801ca22:	00db      	lsls	r3, r3, #3
 801ca24:	b2da      	uxtb	r2, r3
 801ca26:	7bbb      	ldrb	r3, [r7, #14]
 801ca28:	4413      	add	r3, r2
 801ca2a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801ca2c:	7b7b      	ldrb	r3, [r7, #13]
 801ca2e:	4619      	mov	r1, r3
 801ca30:	f240 7006 	movw	r0, #1798	; 0x706
 801ca34:	f000 fc7a 	bl	801d32c <SUBGRF_WriteRegister>
    }
}
 801ca38:	bf00      	nop
 801ca3a:	3710      	adds	r7, #16
 801ca3c:	46bd      	mov	sp, r7
 801ca3e:	bd80      	pop	{r7, pc}

0801ca40 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801ca40:	b580      	push	{r7, lr}
 801ca42:	b082      	sub	sp, #8
 801ca44:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801ca46:	f7ef fe5c 	bl	800c702 <RBI_IsDCDC>
 801ca4a:	4603      	mov	r3, r0
 801ca4c:	2b01      	cmp	r3, #1
 801ca4e:	d102      	bne.n	801ca56 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801ca50:	2301      	movs	r3, #1
 801ca52:	71fb      	strb	r3, [r7, #7]
 801ca54:	e001      	b.n	801ca5a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801ca56:	2300      	movs	r3, #0
 801ca58:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801ca5a:	1dfb      	adds	r3, r7, #7
 801ca5c:	2201      	movs	r2, #1
 801ca5e:	4619      	mov	r1, r3
 801ca60:	2096      	movs	r0, #150	; 0x96
 801ca62:	f000 fd13 	bl	801d48c <SUBGRF_WriteCommand>
}
 801ca66:	bf00      	nop
 801ca68:	3708      	adds	r7, #8
 801ca6a:	46bd      	mov	sp, r7
 801ca6c:	bd80      	pop	{r7, pc}

0801ca6e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801ca6e:	b580      	push	{r7, lr}
 801ca70:	b084      	sub	sp, #16
 801ca72:	af00      	add	r7, sp, #0
 801ca74:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801ca76:	793b      	ldrb	r3, [r7, #4]
 801ca78:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801ca7c:	b2db      	uxtb	r3, r3
 801ca7e:	019b      	lsls	r3, r3, #6
 801ca80:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801ca82:	793b      	ldrb	r3, [r7, #4]
 801ca84:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801ca88:	b2db      	uxtb	r3, r3
 801ca8a:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801ca8c:	b25b      	sxtb	r3, r3
 801ca8e:	4313      	orrs	r3, r2
 801ca90:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801ca92:	793b      	ldrb	r3, [r7, #4]
 801ca94:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801ca98:	b2db      	uxtb	r3, r3
 801ca9a:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801ca9c:	b25b      	sxtb	r3, r3
 801ca9e:	4313      	orrs	r3, r2
 801caa0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801caa2:	793b      	ldrb	r3, [r7, #4]
 801caa4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801caa8:	b2db      	uxtb	r3, r3
 801caaa:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801caac:	b25b      	sxtb	r3, r3
 801caae:	4313      	orrs	r3, r2
 801cab0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801cab2:	793b      	ldrb	r3, [r7, #4]
 801cab4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801cab8:	b2db      	uxtb	r3, r3
 801caba:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801cabc:	b25b      	sxtb	r3, r3
 801cabe:	4313      	orrs	r3, r2
 801cac0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801cac2:	793b      	ldrb	r3, [r7, #4]
 801cac4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801cac8:	b2db      	uxtb	r3, r3
 801caca:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801cacc:	b25b      	sxtb	r3, r3
 801cace:	4313      	orrs	r3, r2
 801cad0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801cad2:	793b      	ldrb	r3, [r7, #4]
 801cad4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801cad8:	b2db      	uxtb	r3, r3
 801cada:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801cadc:	4313      	orrs	r3, r2
 801cade:	b25b      	sxtb	r3, r3
 801cae0:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801cae2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801cae4:	f107 030f 	add.w	r3, r7, #15
 801cae8:	2201      	movs	r2, #1
 801caea:	4619      	mov	r1, r3
 801caec:	2089      	movs	r0, #137	; 0x89
 801caee:	f000 fccd 	bl	801d48c <SUBGRF_WriteCommand>
}
 801caf2:	bf00      	nop
 801caf4:	3710      	adds	r7, #16
 801caf6:	46bd      	mov	sp, r7
 801caf8:	bd80      	pop	{r7, pc}
	...

0801cafc <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801cafc:	b580      	push	{r7, lr}
 801cafe:	b084      	sub	sp, #16
 801cb00:	af00      	add	r7, sp, #0
 801cb02:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	4a1b      	ldr	r2, [pc, #108]	; (801cb74 <SUBGRF_CalibrateImage+0x78>)
 801cb08:	4293      	cmp	r3, r2
 801cb0a:	d904      	bls.n	801cb16 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801cb0c:	23e1      	movs	r3, #225	; 0xe1
 801cb0e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801cb10:	23e9      	movs	r3, #233	; 0xe9
 801cb12:	737b      	strb	r3, [r7, #13]
 801cb14:	e022      	b.n	801cb5c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	4a17      	ldr	r2, [pc, #92]	; (801cb78 <SUBGRF_CalibrateImage+0x7c>)
 801cb1a:	4293      	cmp	r3, r2
 801cb1c:	d904      	bls.n	801cb28 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801cb1e:	23d7      	movs	r3, #215	; 0xd7
 801cb20:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801cb22:	23db      	movs	r3, #219	; 0xdb
 801cb24:	737b      	strb	r3, [r7, #13]
 801cb26:	e019      	b.n	801cb5c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801cb28:	687b      	ldr	r3, [r7, #4]
 801cb2a:	4a14      	ldr	r2, [pc, #80]	; (801cb7c <SUBGRF_CalibrateImage+0x80>)
 801cb2c:	4293      	cmp	r3, r2
 801cb2e:	d904      	bls.n	801cb3a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801cb30:	23c1      	movs	r3, #193	; 0xc1
 801cb32:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801cb34:	23c5      	movs	r3, #197	; 0xc5
 801cb36:	737b      	strb	r3, [r7, #13]
 801cb38:	e010      	b.n	801cb5c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801cb3a:	687b      	ldr	r3, [r7, #4]
 801cb3c:	4a10      	ldr	r2, [pc, #64]	; (801cb80 <SUBGRF_CalibrateImage+0x84>)
 801cb3e:	4293      	cmp	r3, r2
 801cb40:	d904      	bls.n	801cb4c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801cb42:	2375      	movs	r3, #117	; 0x75
 801cb44:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801cb46:	2381      	movs	r3, #129	; 0x81
 801cb48:	737b      	strb	r3, [r7, #13]
 801cb4a:	e007      	b.n	801cb5c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	4a0d      	ldr	r2, [pc, #52]	; (801cb84 <SUBGRF_CalibrateImage+0x88>)
 801cb50:	4293      	cmp	r3, r2
 801cb52:	d903      	bls.n	801cb5c <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801cb54:	236b      	movs	r3, #107	; 0x6b
 801cb56:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801cb58:	236f      	movs	r3, #111	; 0x6f
 801cb5a:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801cb5c:	f107 030c 	add.w	r3, r7, #12
 801cb60:	2202      	movs	r2, #2
 801cb62:	4619      	mov	r1, r3
 801cb64:	2098      	movs	r0, #152	; 0x98
 801cb66:	f000 fc91 	bl	801d48c <SUBGRF_WriteCommand>
}
 801cb6a:	bf00      	nop
 801cb6c:	3710      	adds	r7, #16
 801cb6e:	46bd      	mov	sp, r7
 801cb70:	bd80      	pop	{r7, pc}
 801cb72:	bf00      	nop
 801cb74:	35a4e900 	.word	0x35a4e900
 801cb78:	32a9f880 	.word	0x32a9f880
 801cb7c:	2de54480 	.word	0x2de54480
 801cb80:	1b6b0b00 	.word	0x1b6b0b00
 801cb84:	1954fc40 	.word	0x1954fc40

0801cb88 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801cb88:	b590      	push	{r4, r7, lr}
 801cb8a:	b085      	sub	sp, #20
 801cb8c:	af00      	add	r7, sp, #0
 801cb8e:	4604      	mov	r4, r0
 801cb90:	4608      	mov	r0, r1
 801cb92:	4611      	mov	r1, r2
 801cb94:	461a      	mov	r2, r3
 801cb96:	4623      	mov	r3, r4
 801cb98:	71fb      	strb	r3, [r7, #7]
 801cb9a:	4603      	mov	r3, r0
 801cb9c:	71bb      	strb	r3, [r7, #6]
 801cb9e:	460b      	mov	r3, r1
 801cba0:	717b      	strb	r3, [r7, #5]
 801cba2:	4613      	mov	r3, r2
 801cba4:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801cba6:	79fb      	ldrb	r3, [r7, #7]
 801cba8:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801cbaa:	79bb      	ldrb	r3, [r7, #6]
 801cbac:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801cbae:	797b      	ldrb	r3, [r7, #5]
 801cbb0:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801cbb2:	793b      	ldrb	r3, [r7, #4]
 801cbb4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801cbb6:	f107 030c 	add.w	r3, r7, #12
 801cbba:	2204      	movs	r2, #4
 801cbbc:	4619      	mov	r1, r3
 801cbbe:	2095      	movs	r0, #149	; 0x95
 801cbc0:	f000 fc64 	bl	801d48c <SUBGRF_WriteCommand>
}
 801cbc4:	bf00      	nop
 801cbc6:	3714      	adds	r7, #20
 801cbc8:	46bd      	mov	sp, r7
 801cbca:	bd90      	pop	{r4, r7, pc}

0801cbcc <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801cbcc:	b590      	push	{r4, r7, lr}
 801cbce:	b085      	sub	sp, #20
 801cbd0:	af00      	add	r7, sp, #0
 801cbd2:	4604      	mov	r4, r0
 801cbd4:	4608      	mov	r0, r1
 801cbd6:	4611      	mov	r1, r2
 801cbd8:	461a      	mov	r2, r3
 801cbda:	4623      	mov	r3, r4
 801cbdc:	80fb      	strh	r3, [r7, #6]
 801cbde:	4603      	mov	r3, r0
 801cbe0:	80bb      	strh	r3, [r7, #4]
 801cbe2:	460b      	mov	r3, r1
 801cbe4:	807b      	strh	r3, [r7, #2]
 801cbe6:	4613      	mov	r3, r2
 801cbe8:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801cbea:	88fb      	ldrh	r3, [r7, #6]
 801cbec:	0a1b      	lsrs	r3, r3, #8
 801cbee:	b29b      	uxth	r3, r3
 801cbf0:	b2db      	uxtb	r3, r3
 801cbf2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801cbf4:	88fb      	ldrh	r3, [r7, #6]
 801cbf6:	b2db      	uxtb	r3, r3
 801cbf8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801cbfa:	88bb      	ldrh	r3, [r7, #4]
 801cbfc:	0a1b      	lsrs	r3, r3, #8
 801cbfe:	b29b      	uxth	r3, r3
 801cc00:	b2db      	uxtb	r3, r3
 801cc02:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801cc04:	88bb      	ldrh	r3, [r7, #4]
 801cc06:	b2db      	uxtb	r3, r3
 801cc08:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801cc0a:	887b      	ldrh	r3, [r7, #2]
 801cc0c:	0a1b      	lsrs	r3, r3, #8
 801cc0e:	b29b      	uxth	r3, r3
 801cc10:	b2db      	uxtb	r3, r3
 801cc12:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801cc14:	887b      	ldrh	r3, [r7, #2]
 801cc16:	b2db      	uxtb	r3, r3
 801cc18:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801cc1a:	883b      	ldrh	r3, [r7, #0]
 801cc1c:	0a1b      	lsrs	r3, r3, #8
 801cc1e:	b29b      	uxth	r3, r3
 801cc20:	b2db      	uxtb	r3, r3
 801cc22:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801cc24:	883b      	ldrh	r3, [r7, #0]
 801cc26:	b2db      	uxtb	r3, r3
 801cc28:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801cc2a:	f107 0308 	add.w	r3, r7, #8
 801cc2e:	2208      	movs	r2, #8
 801cc30:	4619      	mov	r1, r3
 801cc32:	2008      	movs	r0, #8
 801cc34:	f000 fc2a 	bl	801d48c <SUBGRF_WriteCommand>
}
 801cc38:	bf00      	nop
 801cc3a:	3714      	adds	r7, #20
 801cc3c:	46bd      	mov	sp, r7
 801cc3e:	bd90      	pop	{r4, r7, pc}

0801cc40 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801cc40:	b580      	push	{r7, lr}
 801cc42:	b084      	sub	sp, #16
 801cc44:	af00      	add	r7, sp, #0
 801cc46:	4603      	mov	r3, r0
 801cc48:	6039      	str	r1, [r7, #0]
 801cc4a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801cc4c:	79fb      	ldrb	r3, [r7, #7]
 801cc4e:	f003 0307 	and.w	r3, r3, #7
 801cc52:	b2db      	uxtb	r3, r3
 801cc54:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801cc56:	683b      	ldr	r3, [r7, #0]
 801cc58:	0c1b      	lsrs	r3, r3, #16
 801cc5a:	b2db      	uxtb	r3, r3
 801cc5c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801cc5e:	683b      	ldr	r3, [r7, #0]
 801cc60:	0a1b      	lsrs	r3, r3, #8
 801cc62:	b2db      	uxtb	r3, r3
 801cc64:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801cc66:	683b      	ldr	r3, [r7, #0]
 801cc68:	b2db      	uxtb	r3, r3
 801cc6a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801cc6c:	f107 030c 	add.w	r3, r7, #12
 801cc70:	2204      	movs	r2, #4
 801cc72:	4619      	mov	r1, r3
 801cc74:	2097      	movs	r0, #151	; 0x97
 801cc76:	f000 fc09 	bl	801d48c <SUBGRF_WriteCommand>
}
 801cc7a:	bf00      	nop
 801cc7c:	3710      	adds	r7, #16
 801cc7e:	46bd      	mov	sp, r7
 801cc80:	bd80      	pop	{r7, pc}
	...

0801cc84 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801cc84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801cc88:	b084      	sub	sp, #16
 801cc8a:	af00      	add	r7, sp, #0
 801cc8c:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801cc8e:	2300      	movs	r3, #0
 801cc90:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801cc92:	4b1d      	ldr	r3, [pc, #116]	; (801cd08 <SUBGRF_SetRfFrequency+0x84>)
 801cc94:	781b      	ldrb	r3, [r3, #0]
 801cc96:	f083 0301 	eor.w	r3, r3, #1
 801cc9a:	b2db      	uxtb	r3, r3
 801cc9c:	2b00      	cmp	r3, #0
 801cc9e:	d005      	beq.n	801ccac <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801cca0:	6878      	ldr	r0, [r7, #4]
 801cca2:	f7ff ff2b 	bl	801cafc <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801cca6:	4b18      	ldr	r3, [pc, #96]	; (801cd08 <SUBGRF_SetRfFrequency+0x84>)
 801cca8:	2201      	movs	r2, #1
 801ccaa:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	2200      	movs	r2, #0
 801ccb0:	461c      	mov	r4, r3
 801ccb2:	4615      	mov	r5, r2
 801ccb4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801ccb8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801ccbc:	4a13      	ldr	r2, [pc, #76]	; (801cd0c <SUBGRF_SetRfFrequency+0x88>)
 801ccbe:	f04f 0300 	mov.w	r3, #0
 801ccc2:	4640      	mov	r0, r8
 801ccc4:	4649      	mov	r1, r9
 801ccc6:	f7e4 fa47 	bl	8001158 <__aeabi_uldivmod>
 801ccca:	4602      	mov	r2, r0
 801cccc:	460b      	mov	r3, r1
 801ccce:	4613      	mov	r3, r2
 801ccd0:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801ccd2:	68fb      	ldr	r3, [r7, #12]
 801ccd4:	0e1b      	lsrs	r3, r3, #24
 801ccd6:	b2db      	uxtb	r3, r3
 801ccd8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801ccda:	68fb      	ldr	r3, [r7, #12]
 801ccdc:	0c1b      	lsrs	r3, r3, #16
 801ccde:	b2db      	uxtb	r3, r3
 801cce0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801cce2:	68fb      	ldr	r3, [r7, #12]
 801cce4:	0a1b      	lsrs	r3, r3, #8
 801cce6:	b2db      	uxtb	r3, r3
 801cce8:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801ccea:	68fb      	ldr	r3, [r7, #12]
 801ccec:	b2db      	uxtb	r3, r3
 801ccee:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801ccf0:	f107 0308 	add.w	r3, r7, #8
 801ccf4:	2204      	movs	r2, #4
 801ccf6:	4619      	mov	r1, r3
 801ccf8:	2086      	movs	r0, #134	; 0x86
 801ccfa:	f000 fbc7 	bl	801d48c <SUBGRF_WriteCommand>
}
 801ccfe:	bf00      	nop
 801cd00:	3710      	adds	r7, #16
 801cd02:	46bd      	mov	sp, r7
 801cd04:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801cd08:	20002454 	.word	0x20002454
 801cd0c:	01e84800 	.word	0x01e84800

0801cd10 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801cd10:	b580      	push	{r7, lr}
 801cd12:	b082      	sub	sp, #8
 801cd14:	af00      	add	r7, sp, #0
 801cd16:	4603      	mov	r3, r0
 801cd18:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801cd1a:	79fa      	ldrb	r2, [r7, #7]
 801cd1c:	4b09      	ldr	r3, [pc, #36]	; (801cd44 <SUBGRF_SetPacketType+0x34>)
 801cd1e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801cd20:	79fb      	ldrb	r3, [r7, #7]
 801cd22:	2b00      	cmp	r3, #0
 801cd24:	d104      	bne.n	801cd30 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801cd26:	2100      	movs	r1, #0
 801cd28:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801cd2c:	f000 fafe 	bl	801d32c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801cd30:	1dfb      	adds	r3, r7, #7
 801cd32:	2201      	movs	r2, #1
 801cd34:	4619      	mov	r1, r3
 801cd36:	208a      	movs	r0, #138	; 0x8a
 801cd38:	f000 fba8 	bl	801d48c <SUBGRF_WriteCommand>
}
 801cd3c:	bf00      	nop
 801cd3e:	3708      	adds	r7, #8
 801cd40:	46bd      	mov	sp, r7
 801cd42:	bd80      	pop	{r7, pc}
 801cd44:	2000244d 	.word	0x2000244d

0801cd48 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801cd48:	b480      	push	{r7}
 801cd4a:	af00      	add	r7, sp, #0
    return PacketType;
 801cd4c:	4b02      	ldr	r3, [pc, #8]	; (801cd58 <SUBGRF_GetPacketType+0x10>)
 801cd4e:	781b      	ldrb	r3, [r3, #0]
}
 801cd50:	4618      	mov	r0, r3
 801cd52:	46bd      	mov	sp, r7
 801cd54:	bc80      	pop	{r7}
 801cd56:	4770      	bx	lr
 801cd58:	2000244d 	.word	0x2000244d

0801cd5c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801cd5c:	b580      	push	{r7, lr}
 801cd5e:	b084      	sub	sp, #16
 801cd60:	af00      	add	r7, sp, #0
 801cd62:	4603      	mov	r3, r0
 801cd64:	71fb      	strb	r3, [r7, #7]
 801cd66:	460b      	mov	r3, r1
 801cd68:	71bb      	strb	r3, [r7, #6]
 801cd6a:	4613      	mov	r3, r2
 801cd6c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801cd6e:	79fb      	ldrb	r3, [r7, #7]
 801cd70:	2b01      	cmp	r3, #1
 801cd72:	d149      	bne.n	801ce08 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801cd74:	2000      	movs	r0, #0
 801cd76:	f7ef fccb 	bl	800c710 <RBI_GetRFOMaxPowerConfig>
 801cd7a:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801cd7c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801cd80:	68fa      	ldr	r2, [r7, #12]
 801cd82:	429a      	cmp	r2, r3
 801cd84:	da01      	bge.n	801cd8a <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801cd86:	68fb      	ldr	r3, [r7, #12]
 801cd88:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801cd8a:	68fb      	ldr	r3, [r7, #12]
 801cd8c:	2b0e      	cmp	r3, #14
 801cd8e:	d10e      	bne.n	801cdae <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801cd90:	2301      	movs	r3, #1
 801cd92:	2201      	movs	r2, #1
 801cd94:	2100      	movs	r1, #0
 801cd96:	2004      	movs	r0, #4
 801cd98:	f7ff fef6 	bl	801cb88 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801cd9c:	79ba      	ldrb	r2, [r7, #6]
 801cd9e:	68fb      	ldr	r3, [r7, #12]
 801cda0:	b2db      	uxtb	r3, r3
 801cda2:	1ad3      	subs	r3, r2, r3
 801cda4:	b2db      	uxtb	r3, r3
 801cda6:	330e      	adds	r3, #14
 801cda8:	b2db      	uxtb	r3, r3
 801cdaa:	71bb      	strb	r3, [r7, #6]
 801cdac:	e01f      	b.n	801cdee <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801cdae:	68fb      	ldr	r3, [r7, #12]
 801cdb0:	2b0a      	cmp	r3, #10
 801cdb2:	d10e      	bne.n	801cdd2 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801cdb4:	2301      	movs	r3, #1
 801cdb6:	2201      	movs	r2, #1
 801cdb8:	2100      	movs	r1, #0
 801cdba:	2001      	movs	r0, #1
 801cdbc:	f7ff fee4 	bl	801cb88 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801cdc0:	79ba      	ldrb	r2, [r7, #6]
 801cdc2:	68fb      	ldr	r3, [r7, #12]
 801cdc4:	b2db      	uxtb	r3, r3
 801cdc6:	1ad3      	subs	r3, r2, r3
 801cdc8:	b2db      	uxtb	r3, r3
 801cdca:	330d      	adds	r3, #13
 801cdcc:	b2db      	uxtb	r3, r3
 801cdce:	71bb      	strb	r3, [r7, #6]
 801cdd0:	e00d      	b.n	801cdee <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801cdd2:	2301      	movs	r3, #1
 801cdd4:	2201      	movs	r2, #1
 801cdd6:	2100      	movs	r1, #0
 801cdd8:	2006      	movs	r0, #6
 801cdda:	f7ff fed5 	bl	801cb88 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801cdde:	79ba      	ldrb	r2, [r7, #6]
 801cde0:	68fb      	ldr	r3, [r7, #12]
 801cde2:	b2db      	uxtb	r3, r3
 801cde4:	1ad3      	subs	r3, r2, r3
 801cde6:	b2db      	uxtb	r3, r3
 801cde8:	330e      	adds	r3, #14
 801cdea:	b2db      	uxtb	r3, r3
 801cdec:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801cdee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801cdf2:	f113 0f11 	cmn.w	r3, #17
 801cdf6:	da01      	bge.n	801cdfc <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801cdf8:	23ef      	movs	r3, #239	; 0xef
 801cdfa:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801cdfc:	2118      	movs	r1, #24
 801cdfe:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ce02:	f000 fa93 	bl	801d32c <SUBGRF_WriteRegister>
 801ce06:	e067      	b.n	801ced8 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801ce08:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801ce0c:	f000 faa2 	bl	801d354 <SUBGRF_ReadRegister>
 801ce10:	4603      	mov	r3, r0
 801ce12:	f043 031e 	orr.w	r3, r3, #30
 801ce16:	b2db      	uxtb	r3, r3
 801ce18:	4619      	mov	r1, r3
 801ce1a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801ce1e:	f000 fa85 	bl	801d32c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801ce22:	2001      	movs	r0, #1
 801ce24:	f7ef fc74 	bl	800c710 <RBI_GetRFOMaxPowerConfig>
 801ce28:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801ce2a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ce2e:	68fa      	ldr	r2, [r7, #12]
 801ce30:	429a      	cmp	r2, r3
 801ce32:	da01      	bge.n	801ce38 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801ce34:	68fb      	ldr	r3, [r7, #12]
 801ce36:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801ce38:	68fb      	ldr	r3, [r7, #12]
 801ce3a:	2b14      	cmp	r3, #20
 801ce3c:	d10e      	bne.n	801ce5c <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801ce3e:	2301      	movs	r3, #1
 801ce40:	2200      	movs	r2, #0
 801ce42:	2105      	movs	r1, #5
 801ce44:	2003      	movs	r0, #3
 801ce46:	f7ff fe9f 	bl	801cb88 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801ce4a:	79ba      	ldrb	r2, [r7, #6]
 801ce4c:	68fb      	ldr	r3, [r7, #12]
 801ce4e:	b2db      	uxtb	r3, r3
 801ce50:	1ad3      	subs	r3, r2, r3
 801ce52:	b2db      	uxtb	r3, r3
 801ce54:	3316      	adds	r3, #22
 801ce56:	b2db      	uxtb	r3, r3
 801ce58:	71bb      	strb	r3, [r7, #6]
 801ce5a:	e031      	b.n	801cec0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801ce5c:	68fb      	ldr	r3, [r7, #12]
 801ce5e:	2b11      	cmp	r3, #17
 801ce60:	d10e      	bne.n	801ce80 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801ce62:	2301      	movs	r3, #1
 801ce64:	2200      	movs	r2, #0
 801ce66:	2103      	movs	r1, #3
 801ce68:	2002      	movs	r0, #2
 801ce6a:	f7ff fe8d 	bl	801cb88 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801ce6e:	79ba      	ldrb	r2, [r7, #6]
 801ce70:	68fb      	ldr	r3, [r7, #12]
 801ce72:	b2db      	uxtb	r3, r3
 801ce74:	1ad3      	subs	r3, r2, r3
 801ce76:	b2db      	uxtb	r3, r3
 801ce78:	3316      	adds	r3, #22
 801ce7a:	b2db      	uxtb	r3, r3
 801ce7c:	71bb      	strb	r3, [r7, #6]
 801ce7e:	e01f      	b.n	801cec0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801ce80:	68fb      	ldr	r3, [r7, #12]
 801ce82:	2b0e      	cmp	r3, #14
 801ce84:	d10e      	bne.n	801cea4 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801ce86:	2301      	movs	r3, #1
 801ce88:	2200      	movs	r2, #0
 801ce8a:	2102      	movs	r1, #2
 801ce8c:	2002      	movs	r0, #2
 801ce8e:	f7ff fe7b 	bl	801cb88 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801ce92:	79ba      	ldrb	r2, [r7, #6]
 801ce94:	68fb      	ldr	r3, [r7, #12]
 801ce96:	b2db      	uxtb	r3, r3
 801ce98:	1ad3      	subs	r3, r2, r3
 801ce9a:	b2db      	uxtb	r3, r3
 801ce9c:	330e      	adds	r3, #14
 801ce9e:	b2db      	uxtb	r3, r3
 801cea0:	71bb      	strb	r3, [r7, #6]
 801cea2:	e00d      	b.n	801cec0 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801cea4:	2301      	movs	r3, #1
 801cea6:	2200      	movs	r2, #0
 801cea8:	2107      	movs	r1, #7
 801ceaa:	2004      	movs	r0, #4
 801ceac:	f7ff fe6c 	bl	801cb88 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801ceb0:	79ba      	ldrb	r2, [r7, #6]
 801ceb2:	68fb      	ldr	r3, [r7, #12]
 801ceb4:	b2db      	uxtb	r3, r3
 801ceb6:	1ad3      	subs	r3, r2, r3
 801ceb8:	b2db      	uxtb	r3, r3
 801ceba:	3316      	adds	r3, #22
 801cebc:	b2db      	uxtb	r3, r3
 801cebe:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801cec0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801cec4:	f113 0f09 	cmn.w	r3, #9
 801cec8:	da01      	bge.n	801cece <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801ceca:	23f7      	movs	r3, #247	; 0xf7
 801cecc:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801cece:	2138      	movs	r1, #56	; 0x38
 801ced0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ced4:	f000 fa2a 	bl	801d32c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801ced8:	79bb      	ldrb	r3, [r7, #6]
 801ceda:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801cedc:	797b      	ldrb	r3, [r7, #5]
 801cede:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801cee0:	f107 0308 	add.w	r3, r7, #8
 801cee4:	2202      	movs	r2, #2
 801cee6:	4619      	mov	r1, r3
 801cee8:	208e      	movs	r0, #142	; 0x8e
 801ceea:	f000 facf 	bl	801d48c <SUBGRF_WriteCommand>
}
 801ceee:	bf00      	nop
 801cef0:	3710      	adds	r7, #16
 801cef2:	46bd      	mov	sp, r7
 801cef4:	bd80      	pop	{r7, pc}
	...

0801cef8 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801cef8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801cefc:	b086      	sub	sp, #24
 801cefe:	af00      	add	r7, sp, #0
 801cf00:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801cf02:	2300      	movs	r3, #0
 801cf04:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801cf06:	4a61      	ldr	r2, [pc, #388]	; (801d08c <SUBGRF_SetModulationParams+0x194>)
 801cf08:	f107 0308 	add.w	r3, r7, #8
 801cf0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801cf10:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801cf14:	687b      	ldr	r3, [r7, #4]
 801cf16:	781a      	ldrb	r2, [r3, #0]
 801cf18:	4b5d      	ldr	r3, [pc, #372]	; (801d090 <SUBGRF_SetModulationParams+0x198>)
 801cf1a:	781b      	ldrb	r3, [r3, #0]
 801cf1c:	429a      	cmp	r2, r3
 801cf1e:	d004      	beq.n	801cf2a <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801cf20:	687b      	ldr	r3, [r7, #4]
 801cf22:	781b      	ldrb	r3, [r3, #0]
 801cf24:	4618      	mov	r0, r3
 801cf26:	f7ff fef3 	bl	801cd10 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	781b      	ldrb	r3, [r3, #0]
 801cf2e:	2b03      	cmp	r3, #3
 801cf30:	f200 80a5 	bhi.w	801d07e <SUBGRF_SetModulationParams+0x186>
 801cf34:	a201      	add	r2, pc, #4	; (adr r2, 801cf3c <SUBGRF_SetModulationParams+0x44>)
 801cf36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cf3a:	bf00      	nop
 801cf3c:	0801cf4d 	.word	0x0801cf4d
 801cf40:	0801d00d 	.word	0x0801d00d
 801cf44:	0801cfcf 	.word	0x0801cfcf
 801cf48:	0801d03b 	.word	0x0801d03b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801cf4c:	2308      	movs	r3, #8
 801cf4e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801cf50:	687b      	ldr	r3, [r7, #4]
 801cf52:	685b      	ldr	r3, [r3, #4]
 801cf54:	4a4f      	ldr	r2, [pc, #316]	; (801d094 <SUBGRF_SetModulationParams+0x19c>)
 801cf56:	fbb2 f3f3 	udiv	r3, r2, r3
 801cf5a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801cf5c:	697b      	ldr	r3, [r7, #20]
 801cf5e:	0c1b      	lsrs	r3, r3, #16
 801cf60:	b2db      	uxtb	r3, r3
 801cf62:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801cf64:	697b      	ldr	r3, [r7, #20]
 801cf66:	0a1b      	lsrs	r3, r3, #8
 801cf68:	b2db      	uxtb	r3, r3
 801cf6a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801cf6c:	697b      	ldr	r3, [r7, #20]
 801cf6e:	b2db      	uxtb	r3, r3
 801cf70:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	7b1b      	ldrb	r3, [r3, #12]
 801cf76:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801cf78:	687b      	ldr	r3, [r7, #4]
 801cf7a:	7b5b      	ldrb	r3, [r3, #13]
 801cf7c:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	689b      	ldr	r3, [r3, #8]
 801cf82:	2200      	movs	r2, #0
 801cf84:	461c      	mov	r4, r3
 801cf86:	4615      	mov	r5, r2
 801cf88:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801cf8c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801cf90:	4a41      	ldr	r2, [pc, #260]	; (801d098 <SUBGRF_SetModulationParams+0x1a0>)
 801cf92:	f04f 0300 	mov.w	r3, #0
 801cf96:	4640      	mov	r0, r8
 801cf98:	4649      	mov	r1, r9
 801cf9a:	f7e4 f8dd 	bl	8001158 <__aeabi_uldivmod>
 801cf9e:	4602      	mov	r2, r0
 801cfa0:	460b      	mov	r3, r1
 801cfa2:	4613      	mov	r3, r2
 801cfa4:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801cfa6:	697b      	ldr	r3, [r7, #20]
 801cfa8:	0c1b      	lsrs	r3, r3, #16
 801cfaa:	b2db      	uxtb	r3, r3
 801cfac:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801cfae:	697b      	ldr	r3, [r7, #20]
 801cfb0:	0a1b      	lsrs	r3, r3, #8
 801cfb2:	b2db      	uxtb	r3, r3
 801cfb4:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801cfb6:	697b      	ldr	r3, [r7, #20]
 801cfb8:	b2db      	uxtb	r3, r3
 801cfba:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801cfbc:	7cfb      	ldrb	r3, [r7, #19]
 801cfbe:	b29a      	uxth	r2, r3
 801cfc0:	f107 0308 	add.w	r3, r7, #8
 801cfc4:	4619      	mov	r1, r3
 801cfc6:	208b      	movs	r0, #139	; 0x8b
 801cfc8:	f000 fa60 	bl	801d48c <SUBGRF_WriteCommand>
        break;
 801cfcc:	e058      	b.n	801d080 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801cfce:	2304      	movs	r3, #4
 801cfd0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	691b      	ldr	r3, [r3, #16]
 801cfd6:	4a2f      	ldr	r2, [pc, #188]	; (801d094 <SUBGRF_SetModulationParams+0x19c>)
 801cfd8:	fbb2 f3f3 	udiv	r3, r2, r3
 801cfdc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801cfde:	697b      	ldr	r3, [r7, #20]
 801cfe0:	0c1b      	lsrs	r3, r3, #16
 801cfe2:	b2db      	uxtb	r3, r3
 801cfe4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801cfe6:	697b      	ldr	r3, [r7, #20]
 801cfe8:	0a1b      	lsrs	r3, r3, #8
 801cfea:	b2db      	uxtb	r3, r3
 801cfec:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801cfee:	697b      	ldr	r3, [r7, #20]
 801cff0:	b2db      	uxtb	r3, r3
 801cff2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801cff4:	687b      	ldr	r3, [r7, #4]
 801cff6:	7d1b      	ldrb	r3, [r3, #20]
 801cff8:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801cffa:	7cfb      	ldrb	r3, [r7, #19]
 801cffc:	b29a      	uxth	r2, r3
 801cffe:	f107 0308 	add.w	r3, r7, #8
 801d002:	4619      	mov	r1, r3
 801d004:	208b      	movs	r0, #139	; 0x8b
 801d006:	f000 fa41 	bl	801d48c <SUBGRF_WriteCommand>
        break;
 801d00a:	e039      	b.n	801d080 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801d00c:	2304      	movs	r3, #4
 801d00e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801d010:	687b      	ldr	r3, [r7, #4]
 801d012:	7e1b      	ldrb	r3, [r3, #24]
 801d014:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	7e5b      	ldrb	r3, [r3, #25]
 801d01a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	7e9b      	ldrb	r3, [r3, #26]
 801d020:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801d022:	687b      	ldr	r3, [r7, #4]
 801d024:	7edb      	ldrb	r3, [r3, #27]
 801d026:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801d028:	7cfb      	ldrb	r3, [r7, #19]
 801d02a:	b29a      	uxth	r2, r3
 801d02c:	f107 0308 	add.w	r3, r7, #8
 801d030:	4619      	mov	r1, r3
 801d032:	208b      	movs	r0, #139	; 0x8b
 801d034:	f000 fa2a 	bl	801d48c <SUBGRF_WriteCommand>

        break;
 801d038:	e022      	b.n	801d080 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801d03a:	2305      	movs	r3, #5
 801d03c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801d03e:	687b      	ldr	r3, [r7, #4]
 801d040:	685b      	ldr	r3, [r3, #4]
 801d042:	4a14      	ldr	r2, [pc, #80]	; (801d094 <SUBGRF_SetModulationParams+0x19c>)
 801d044:	fbb2 f3f3 	udiv	r3, r2, r3
 801d048:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801d04a:	697b      	ldr	r3, [r7, #20]
 801d04c:	0c1b      	lsrs	r3, r3, #16
 801d04e:	b2db      	uxtb	r3, r3
 801d050:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801d052:	697b      	ldr	r3, [r7, #20]
 801d054:	0a1b      	lsrs	r3, r3, #8
 801d056:	b2db      	uxtb	r3, r3
 801d058:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801d05a:	697b      	ldr	r3, [r7, #20]
 801d05c:	b2db      	uxtb	r3, r3
 801d05e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	7b1b      	ldrb	r3, [r3, #12]
 801d064:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801d066:	687b      	ldr	r3, [r7, #4]
 801d068:	7b5b      	ldrb	r3, [r3, #13]
 801d06a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801d06c:	7cfb      	ldrb	r3, [r7, #19]
 801d06e:	b29a      	uxth	r2, r3
 801d070:	f107 0308 	add.w	r3, r7, #8
 801d074:	4619      	mov	r1, r3
 801d076:	208b      	movs	r0, #139	; 0x8b
 801d078:	f000 fa08 	bl	801d48c <SUBGRF_WriteCommand>
        break;
 801d07c:	e000      	b.n	801d080 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801d07e:	bf00      	nop
    }
}
 801d080:	bf00      	nop
 801d082:	3718      	adds	r7, #24
 801d084:	46bd      	mov	sp, r7
 801d086:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801d08a:	bf00      	nop
 801d08c:	0801f700 	.word	0x0801f700
 801d090:	2000244d 	.word	0x2000244d
 801d094:	3d090000 	.word	0x3d090000
 801d098:	01e84800 	.word	0x01e84800

0801d09c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801d09c:	b580      	push	{r7, lr}
 801d09e:	b086      	sub	sp, #24
 801d0a0:	af00      	add	r7, sp, #0
 801d0a2:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801d0a4:	2300      	movs	r3, #0
 801d0a6:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801d0a8:	4a48      	ldr	r2, [pc, #288]	; (801d1cc <SUBGRF_SetPacketParams+0x130>)
 801d0aa:	f107 030c 	add.w	r3, r7, #12
 801d0ae:	ca07      	ldmia	r2, {r0, r1, r2}
 801d0b0:	c303      	stmia	r3!, {r0, r1}
 801d0b2:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801d0b4:	687b      	ldr	r3, [r7, #4]
 801d0b6:	781a      	ldrb	r2, [r3, #0]
 801d0b8:	4b45      	ldr	r3, [pc, #276]	; (801d1d0 <SUBGRF_SetPacketParams+0x134>)
 801d0ba:	781b      	ldrb	r3, [r3, #0]
 801d0bc:	429a      	cmp	r2, r3
 801d0be:	d004      	beq.n	801d0ca <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801d0c0:	687b      	ldr	r3, [r7, #4]
 801d0c2:	781b      	ldrb	r3, [r3, #0]
 801d0c4:	4618      	mov	r0, r3
 801d0c6:	f7ff fe23 	bl	801cd10 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801d0ca:	687b      	ldr	r3, [r7, #4]
 801d0cc:	781b      	ldrb	r3, [r3, #0]
 801d0ce:	2b03      	cmp	r3, #3
 801d0d0:	d878      	bhi.n	801d1c4 <SUBGRF_SetPacketParams+0x128>
 801d0d2:	a201      	add	r2, pc, #4	; (adr r2, 801d0d8 <SUBGRF_SetPacketParams+0x3c>)
 801d0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d0d8:	0801d0e9 	.word	0x0801d0e9
 801d0dc:	0801d179 	.word	0x0801d179
 801d0e0:	0801d16d 	.word	0x0801d16d
 801d0e4:	0801d0e9 	.word	0x0801d0e9
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801d0e8:	687b      	ldr	r3, [r7, #4]
 801d0ea:	7a5b      	ldrb	r3, [r3, #9]
 801d0ec:	2bf1      	cmp	r3, #241	; 0xf1
 801d0ee:	d10a      	bne.n	801d106 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801d0f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801d0f4:	f7ff faae 	bl	801c654 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801d0f8:	f248 0005 	movw	r0, #32773	; 0x8005
 801d0fc:	f7ff faca 	bl	801c694 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801d100:	2302      	movs	r3, #2
 801d102:	75bb      	strb	r3, [r7, #22]
 801d104:	e011      	b.n	801d12a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801d106:	687b      	ldr	r3, [r7, #4]
 801d108:	7a5b      	ldrb	r3, [r3, #9]
 801d10a:	2bf2      	cmp	r3, #242	; 0xf2
 801d10c:	d10a      	bne.n	801d124 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801d10e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801d112:	f7ff fa9f 	bl	801c654 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801d116:	f241 0021 	movw	r0, #4129	; 0x1021
 801d11a:	f7ff fabb 	bl	801c694 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801d11e:	2306      	movs	r3, #6
 801d120:	75bb      	strb	r3, [r7, #22]
 801d122:	e002      	b.n	801d12a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801d124:	687b      	ldr	r3, [r7, #4]
 801d126:	7a5b      	ldrb	r3, [r3, #9]
 801d128:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801d12a:	2309      	movs	r3, #9
 801d12c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801d12e:	687b      	ldr	r3, [r7, #4]
 801d130:	885b      	ldrh	r3, [r3, #2]
 801d132:	0a1b      	lsrs	r3, r3, #8
 801d134:	b29b      	uxth	r3, r3
 801d136:	b2db      	uxtb	r3, r3
 801d138:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801d13a:	687b      	ldr	r3, [r7, #4]
 801d13c:	885b      	ldrh	r3, [r3, #2]
 801d13e:	b2db      	uxtb	r3, r3
 801d140:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801d142:	687b      	ldr	r3, [r7, #4]
 801d144:	791b      	ldrb	r3, [r3, #4]
 801d146:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801d148:	687b      	ldr	r3, [r7, #4]
 801d14a:	795b      	ldrb	r3, [r3, #5]
 801d14c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801d14e:	687b      	ldr	r3, [r7, #4]
 801d150:	799b      	ldrb	r3, [r3, #6]
 801d152:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801d154:	687b      	ldr	r3, [r7, #4]
 801d156:	79db      	ldrb	r3, [r3, #7]
 801d158:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	7a1b      	ldrb	r3, [r3, #8]
 801d15e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801d160:	7dbb      	ldrb	r3, [r7, #22]
 801d162:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801d164:	687b      	ldr	r3, [r7, #4]
 801d166:	7a9b      	ldrb	r3, [r3, #10]
 801d168:	753b      	strb	r3, [r7, #20]
        break;
 801d16a:	e022      	b.n	801d1b2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801d16c:	2301      	movs	r3, #1
 801d16e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801d170:	687b      	ldr	r3, [r7, #4]
 801d172:	7b1b      	ldrb	r3, [r3, #12]
 801d174:	733b      	strb	r3, [r7, #12]
        break;
 801d176:	e01c      	b.n	801d1b2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801d178:	2306      	movs	r3, #6
 801d17a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	89db      	ldrh	r3, [r3, #14]
 801d180:	0a1b      	lsrs	r3, r3, #8
 801d182:	b29b      	uxth	r3, r3
 801d184:	b2db      	uxtb	r3, r3
 801d186:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801d188:	687b      	ldr	r3, [r7, #4]
 801d18a:	89db      	ldrh	r3, [r3, #14]
 801d18c:	b2db      	uxtb	r3, r3
 801d18e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801d190:	687b      	ldr	r3, [r7, #4]
 801d192:	7c1a      	ldrb	r2, [r3, #16]
 801d194:	4b0f      	ldr	r3, [pc, #60]	; (801d1d4 <SUBGRF_SetPacketParams+0x138>)
 801d196:	4611      	mov	r1, r2
 801d198:	7019      	strb	r1, [r3, #0]
 801d19a:	4613      	mov	r3, r2
 801d19c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	7c5b      	ldrb	r3, [r3, #17]
 801d1a2:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801d1a4:	687b      	ldr	r3, [r7, #4]
 801d1a6:	7c9b      	ldrb	r3, [r3, #18]
 801d1a8:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801d1aa:	687b      	ldr	r3, [r7, #4]
 801d1ac:	7cdb      	ldrb	r3, [r3, #19]
 801d1ae:	747b      	strb	r3, [r7, #17]
        break;
 801d1b0:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801d1b2:	7dfb      	ldrb	r3, [r7, #23]
 801d1b4:	b29a      	uxth	r2, r3
 801d1b6:	f107 030c 	add.w	r3, r7, #12
 801d1ba:	4619      	mov	r1, r3
 801d1bc:	208c      	movs	r0, #140	; 0x8c
 801d1be:	f000 f965 	bl	801d48c <SUBGRF_WriteCommand>
 801d1c2:	e000      	b.n	801d1c6 <SUBGRF_SetPacketParams+0x12a>
        return;
 801d1c4:	bf00      	nop
}
 801d1c6:	3718      	adds	r7, #24
 801d1c8:	46bd      	mov	sp, r7
 801d1ca:	bd80      	pop	{r7, pc}
 801d1cc:	0801f708 	.word	0x0801f708
 801d1d0:	2000244d 	.word	0x2000244d
 801d1d4:	2000244e 	.word	0x2000244e

0801d1d8 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801d1d8:	b580      	push	{r7, lr}
 801d1da:	b084      	sub	sp, #16
 801d1dc:	af00      	add	r7, sp, #0
 801d1de:	4603      	mov	r3, r0
 801d1e0:	460a      	mov	r2, r1
 801d1e2:	71fb      	strb	r3, [r7, #7]
 801d1e4:	4613      	mov	r3, r2
 801d1e6:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801d1e8:	79fb      	ldrb	r3, [r7, #7]
 801d1ea:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801d1ec:	79bb      	ldrb	r3, [r7, #6]
 801d1ee:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801d1f0:	f107 030c 	add.w	r3, r7, #12
 801d1f4:	2202      	movs	r2, #2
 801d1f6:	4619      	mov	r1, r3
 801d1f8:	208f      	movs	r0, #143	; 0x8f
 801d1fa:	f000 f947 	bl	801d48c <SUBGRF_WriteCommand>
}
 801d1fe:	bf00      	nop
 801d200:	3710      	adds	r7, #16
 801d202:	46bd      	mov	sp, r7
 801d204:	bd80      	pop	{r7, pc}

0801d206 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801d206:	b580      	push	{r7, lr}
 801d208:	b082      	sub	sp, #8
 801d20a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801d20c:	2300      	movs	r3, #0
 801d20e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801d210:	1d3b      	adds	r3, r7, #4
 801d212:	2201      	movs	r2, #1
 801d214:	4619      	mov	r1, r3
 801d216:	2015      	movs	r0, #21
 801d218:	f000 f95a 	bl	801d4d0 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801d21c:	793b      	ldrb	r3, [r7, #4]
 801d21e:	425b      	negs	r3, r3
 801d220:	105b      	asrs	r3, r3, #1
 801d222:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801d224:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801d228:	4618      	mov	r0, r3
 801d22a:	3708      	adds	r7, #8
 801d22c:	46bd      	mov	sp, r7
 801d22e:	bd80      	pop	{r7, pc}

0801d230 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801d230:	b580      	push	{r7, lr}
 801d232:	b084      	sub	sp, #16
 801d234:	af00      	add	r7, sp, #0
 801d236:	6078      	str	r0, [r7, #4]
 801d238:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801d23a:	f107 030c 	add.w	r3, r7, #12
 801d23e:	2202      	movs	r2, #2
 801d240:	4619      	mov	r1, r3
 801d242:	2013      	movs	r0, #19
 801d244:	f000 f944 	bl	801d4d0 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801d248:	f7ff fd7e 	bl	801cd48 <SUBGRF_GetPacketType>
 801d24c:	4603      	mov	r3, r0
 801d24e:	2b01      	cmp	r3, #1
 801d250:	d10d      	bne.n	801d26e <SUBGRF_GetRxBufferStatus+0x3e>
 801d252:	4b0c      	ldr	r3, [pc, #48]	; (801d284 <SUBGRF_GetRxBufferStatus+0x54>)
 801d254:	781b      	ldrb	r3, [r3, #0]
 801d256:	b2db      	uxtb	r3, r3
 801d258:	2b01      	cmp	r3, #1
 801d25a:	d108      	bne.n	801d26e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801d25c:	f240 7002 	movw	r0, #1794	; 0x702
 801d260:	f000 f878 	bl	801d354 <SUBGRF_ReadRegister>
 801d264:	4603      	mov	r3, r0
 801d266:	461a      	mov	r2, r3
 801d268:	687b      	ldr	r3, [r7, #4]
 801d26a:	701a      	strb	r2, [r3, #0]
 801d26c:	e002      	b.n	801d274 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801d26e:	7b3a      	ldrb	r2, [r7, #12]
 801d270:	687b      	ldr	r3, [r7, #4]
 801d272:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801d274:	7b7a      	ldrb	r2, [r7, #13]
 801d276:	683b      	ldr	r3, [r7, #0]
 801d278:	701a      	strb	r2, [r3, #0]
}
 801d27a:	bf00      	nop
 801d27c:	3710      	adds	r7, #16
 801d27e:	46bd      	mov	sp, r7
 801d280:	bd80      	pop	{r7, pc}
 801d282:	bf00      	nop
 801d284:	2000244e 	.word	0x2000244e

0801d288 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801d288:	b580      	push	{r7, lr}
 801d28a:	b084      	sub	sp, #16
 801d28c:	af00      	add	r7, sp, #0
 801d28e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801d290:	f107 030c 	add.w	r3, r7, #12
 801d294:	2203      	movs	r2, #3
 801d296:	4619      	mov	r1, r3
 801d298:	2014      	movs	r0, #20
 801d29a:	f000 f919 	bl	801d4d0 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801d29e:	f7ff fd53 	bl	801cd48 <SUBGRF_GetPacketType>
 801d2a2:	4603      	mov	r3, r0
 801d2a4:	461a      	mov	r2, r3
 801d2a6:	687b      	ldr	r3, [r7, #4]
 801d2a8:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801d2aa:	687b      	ldr	r3, [r7, #4]
 801d2ac:	781b      	ldrb	r3, [r3, #0]
 801d2ae:	2b00      	cmp	r3, #0
 801d2b0:	d002      	beq.n	801d2b8 <SUBGRF_GetPacketStatus+0x30>
 801d2b2:	2b01      	cmp	r3, #1
 801d2b4:	d013      	beq.n	801d2de <SUBGRF_GetPacketStatus+0x56>
 801d2b6:	e02a      	b.n	801d30e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801d2b8:	7b3a      	ldrb	r2, [r7, #12]
 801d2ba:	687b      	ldr	r3, [r7, #4]
 801d2bc:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801d2be:	7b7b      	ldrb	r3, [r7, #13]
 801d2c0:	425b      	negs	r3, r3
 801d2c2:	105b      	asrs	r3, r3, #1
 801d2c4:	b25a      	sxtb	r2, r3
 801d2c6:	687b      	ldr	r3, [r7, #4]
 801d2c8:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801d2ca:	7bbb      	ldrb	r3, [r7, #14]
 801d2cc:	425b      	negs	r3, r3
 801d2ce:	105b      	asrs	r3, r3, #1
 801d2d0:	b25a      	sxtb	r2, r3
 801d2d2:	687b      	ldr	r3, [r7, #4]
 801d2d4:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	2200      	movs	r2, #0
 801d2da:	609a      	str	r2, [r3, #8]
            break;
 801d2dc:	e020      	b.n	801d320 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801d2de:	7b3b      	ldrb	r3, [r7, #12]
 801d2e0:	425b      	negs	r3, r3
 801d2e2:	105b      	asrs	r3, r3, #1
 801d2e4:	b25a      	sxtb	r2, r3
 801d2e6:	687b      	ldr	r3, [r7, #4]
 801d2e8:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801d2ea:	7b7b      	ldrb	r3, [r7, #13]
 801d2ec:	b25b      	sxtb	r3, r3
 801d2ee:	3302      	adds	r3, #2
 801d2f0:	109b      	asrs	r3, r3, #2
 801d2f2:	b25a      	sxtb	r2, r3
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801d2f8:	7bbb      	ldrb	r3, [r7, #14]
 801d2fa:	425b      	negs	r3, r3
 801d2fc:	105b      	asrs	r3, r3, #1
 801d2fe:	b25a      	sxtb	r2, r3
 801d300:	687b      	ldr	r3, [r7, #4]
 801d302:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801d304:	4b08      	ldr	r3, [pc, #32]	; (801d328 <SUBGRF_GetPacketStatus+0xa0>)
 801d306:	681a      	ldr	r2, [r3, #0]
 801d308:	687b      	ldr	r3, [r7, #4]
 801d30a:	611a      	str	r2, [r3, #16]
            break;
 801d30c:	e008      	b.n	801d320 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801d30e:	2214      	movs	r2, #20
 801d310:	2100      	movs	r1, #0
 801d312:	6878      	ldr	r0, [r7, #4]
 801d314:	f000 fbf3 	bl	801dafe <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801d318:	687b      	ldr	r3, [r7, #4]
 801d31a:	220f      	movs	r2, #15
 801d31c:	701a      	strb	r2, [r3, #0]
            break;
 801d31e:	bf00      	nop
    }
}
 801d320:	bf00      	nop
 801d322:	3710      	adds	r7, #16
 801d324:	46bd      	mov	sp, r7
 801d326:	bd80      	pop	{r7, pc}
 801d328:	20002450 	.word	0x20002450

0801d32c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801d32c:	b580      	push	{r7, lr}
 801d32e:	b082      	sub	sp, #8
 801d330:	af00      	add	r7, sp, #0
 801d332:	4603      	mov	r3, r0
 801d334:	460a      	mov	r2, r1
 801d336:	80fb      	strh	r3, [r7, #6]
 801d338:	4613      	mov	r3, r2
 801d33a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801d33c:	1d7a      	adds	r2, r7, #5
 801d33e:	88f9      	ldrh	r1, [r7, #6]
 801d340:	2301      	movs	r3, #1
 801d342:	4803      	ldr	r0, [pc, #12]	; (801d350 <SUBGRF_WriteRegister+0x24>)
 801d344:	f7eb fc3c 	bl	8008bc0 <HAL_SUBGHZ_WriteRegisters>
}
 801d348:	bf00      	nop
 801d34a:	3708      	adds	r7, #8
 801d34c:	46bd      	mov	sp, r7
 801d34e:	bd80      	pop	{r7, pc}
 801d350:	20000708 	.word	0x20000708

0801d354 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801d354:	b580      	push	{r7, lr}
 801d356:	b084      	sub	sp, #16
 801d358:	af00      	add	r7, sp, #0
 801d35a:	4603      	mov	r3, r0
 801d35c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801d35e:	f107 020f 	add.w	r2, r7, #15
 801d362:	88f9      	ldrh	r1, [r7, #6]
 801d364:	2301      	movs	r3, #1
 801d366:	4804      	ldr	r0, [pc, #16]	; (801d378 <SUBGRF_ReadRegister+0x24>)
 801d368:	f7eb fc89 	bl	8008c7e <HAL_SUBGHZ_ReadRegisters>
    return data;
 801d36c:	7bfb      	ldrb	r3, [r7, #15]
}
 801d36e:	4618      	mov	r0, r3
 801d370:	3710      	adds	r7, #16
 801d372:	46bd      	mov	sp, r7
 801d374:	bd80      	pop	{r7, pc}
 801d376:	bf00      	nop
 801d378:	20000708 	.word	0x20000708

0801d37c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801d37c:	b580      	push	{r7, lr}
 801d37e:	b086      	sub	sp, #24
 801d380:	af00      	add	r7, sp, #0
 801d382:	4603      	mov	r3, r0
 801d384:	6039      	str	r1, [r7, #0]
 801d386:	80fb      	strh	r3, [r7, #6]
 801d388:	4613      	mov	r3, r2
 801d38a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d38c:	f3ef 8310 	mrs	r3, PRIMASK
 801d390:	60fb      	str	r3, [r7, #12]
  return(result);
 801d392:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d394:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d396:	b672      	cpsid	i
}
 801d398:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801d39a:	88bb      	ldrh	r3, [r7, #4]
 801d39c:	88f9      	ldrh	r1, [r7, #6]
 801d39e:	683a      	ldr	r2, [r7, #0]
 801d3a0:	4806      	ldr	r0, [pc, #24]	; (801d3bc <SUBGRF_WriteRegisters+0x40>)
 801d3a2:	f7eb fc0d 	bl	8008bc0 <HAL_SUBGHZ_WriteRegisters>
 801d3a6:	697b      	ldr	r3, [r7, #20]
 801d3a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d3aa:	693b      	ldr	r3, [r7, #16]
 801d3ac:	f383 8810 	msr	PRIMASK, r3
}
 801d3b0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d3b2:	bf00      	nop
 801d3b4:	3718      	adds	r7, #24
 801d3b6:	46bd      	mov	sp, r7
 801d3b8:	bd80      	pop	{r7, pc}
 801d3ba:	bf00      	nop
 801d3bc:	20000708 	.word	0x20000708

0801d3c0 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801d3c0:	b580      	push	{r7, lr}
 801d3c2:	b086      	sub	sp, #24
 801d3c4:	af00      	add	r7, sp, #0
 801d3c6:	4603      	mov	r3, r0
 801d3c8:	6039      	str	r1, [r7, #0]
 801d3ca:	80fb      	strh	r3, [r7, #6]
 801d3cc:	4613      	mov	r3, r2
 801d3ce:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d3d0:	f3ef 8310 	mrs	r3, PRIMASK
 801d3d4:	60fb      	str	r3, [r7, #12]
  return(result);
 801d3d6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d3d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d3da:	b672      	cpsid	i
}
 801d3dc:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801d3de:	88bb      	ldrh	r3, [r7, #4]
 801d3e0:	88f9      	ldrh	r1, [r7, #6]
 801d3e2:	683a      	ldr	r2, [r7, #0]
 801d3e4:	4806      	ldr	r0, [pc, #24]	; (801d400 <SUBGRF_ReadRegisters+0x40>)
 801d3e6:	f7eb fc4a 	bl	8008c7e <HAL_SUBGHZ_ReadRegisters>
 801d3ea:	697b      	ldr	r3, [r7, #20]
 801d3ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d3ee:	693b      	ldr	r3, [r7, #16]
 801d3f0:	f383 8810 	msr	PRIMASK, r3
}
 801d3f4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d3f6:	bf00      	nop
 801d3f8:	3718      	adds	r7, #24
 801d3fa:	46bd      	mov	sp, r7
 801d3fc:	bd80      	pop	{r7, pc}
 801d3fe:	bf00      	nop
 801d400:	20000708 	.word	0x20000708

0801d404 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801d404:	b580      	push	{r7, lr}
 801d406:	b086      	sub	sp, #24
 801d408:	af00      	add	r7, sp, #0
 801d40a:	4603      	mov	r3, r0
 801d40c:	6039      	str	r1, [r7, #0]
 801d40e:	71fb      	strb	r3, [r7, #7]
 801d410:	4613      	mov	r3, r2
 801d412:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d414:	f3ef 8310 	mrs	r3, PRIMASK
 801d418:	60fb      	str	r3, [r7, #12]
  return(result);
 801d41a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d41c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d41e:	b672      	cpsid	i
}
 801d420:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801d422:	79bb      	ldrb	r3, [r7, #6]
 801d424:	b29b      	uxth	r3, r3
 801d426:	79f9      	ldrb	r1, [r7, #7]
 801d428:	683a      	ldr	r2, [r7, #0]
 801d42a:	4806      	ldr	r0, [pc, #24]	; (801d444 <SUBGRF_WriteBuffer+0x40>)
 801d42c:	f7eb fd3b 	bl	8008ea6 <HAL_SUBGHZ_WriteBuffer>
 801d430:	697b      	ldr	r3, [r7, #20]
 801d432:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d434:	693b      	ldr	r3, [r7, #16]
 801d436:	f383 8810 	msr	PRIMASK, r3
}
 801d43a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d43c:	bf00      	nop
 801d43e:	3718      	adds	r7, #24
 801d440:	46bd      	mov	sp, r7
 801d442:	bd80      	pop	{r7, pc}
 801d444:	20000708 	.word	0x20000708

0801d448 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801d448:	b580      	push	{r7, lr}
 801d44a:	b086      	sub	sp, #24
 801d44c:	af00      	add	r7, sp, #0
 801d44e:	4603      	mov	r3, r0
 801d450:	6039      	str	r1, [r7, #0]
 801d452:	71fb      	strb	r3, [r7, #7]
 801d454:	4613      	mov	r3, r2
 801d456:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d458:	f3ef 8310 	mrs	r3, PRIMASK
 801d45c:	60fb      	str	r3, [r7, #12]
  return(result);
 801d45e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d460:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d462:	b672      	cpsid	i
}
 801d464:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801d466:	79bb      	ldrb	r3, [r7, #6]
 801d468:	b29b      	uxth	r3, r3
 801d46a:	79f9      	ldrb	r1, [r7, #7]
 801d46c:	683a      	ldr	r2, [r7, #0]
 801d46e:	4806      	ldr	r0, [pc, #24]	; (801d488 <SUBGRF_ReadBuffer+0x40>)
 801d470:	f7eb fd6c 	bl	8008f4c <HAL_SUBGHZ_ReadBuffer>
 801d474:	697b      	ldr	r3, [r7, #20]
 801d476:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d478:	693b      	ldr	r3, [r7, #16]
 801d47a:	f383 8810 	msr	PRIMASK, r3
}
 801d47e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d480:	bf00      	nop
 801d482:	3718      	adds	r7, #24
 801d484:	46bd      	mov	sp, r7
 801d486:	bd80      	pop	{r7, pc}
 801d488:	20000708 	.word	0x20000708

0801d48c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801d48c:	b580      	push	{r7, lr}
 801d48e:	b086      	sub	sp, #24
 801d490:	af00      	add	r7, sp, #0
 801d492:	4603      	mov	r3, r0
 801d494:	6039      	str	r1, [r7, #0]
 801d496:	71fb      	strb	r3, [r7, #7]
 801d498:	4613      	mov	r3, r2
 801d49a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d49c:	f3ef 8310 	mrs	r3, PRIMASK
 801d4a0:	60fb      	str	r3, [r7, #12]
  return(result);
 801d4a2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d4a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d4a6:	b672      	cpsid	i
}
 801d4a8:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801d4aa:	88bb      	ldrh	r3, [r7, #4]
 801d4ac:	79f9      	ldrb	r1, [r7, #7]
 801d4ae:	683a      	ldr	r2, [r7, #0]
 801d4b0:	4806      	ldr	r0, [pc, #24]	; (801d4cc <SUBGRF_WriteCommand+0x40>)
 801d4b2:	f7eb fc45 	bl	8008d40 <HAL_SUBGHZ_ExecSetCmd>
 801d4b6:	697b      	ldr	r3, [r7, #20]
 801d4b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d4ba:	693b      	ldr	r3, [r7, #16]
 801d4bc:	f383 8810 	msr	PRIMASK, r3
}
 801d4c0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d4c2:	bf00      	nop
 801d4c4:	3718      	adds	r7, #24
 801d4c6:	46bd      	mov	sp, r7
 801d4c8:	bd80      	pop	{r7, pc}
 801d4ca:	bf00      	nop
 801d4cc:	20000708 	.word	0x20000708

0801d4d0 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801d4d0:	b580      	push	{r7, lr}
 801d4d2:	b086      	sub	sp, #24
 801d4d4:	af00      	add	r7, sp, #0
 801d4d6:	4603      	mov	r3, r0
 801d4d8:	6039      	str	r1, [r7, #0]
 801d4da:	71fb      	strb	r3, [r7, #7]
 801d4dc:	4613      	mov	r3, r2
 801d4de:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d4e0:	f3ef 8310 	mrs	r3, PRIMASK
 801d4e4:	60fb      	str	r3, [r7, #12]
  return(result);
 801d4e6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d4e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d4ea:	b672      	cpsid	i
}
 801d4ec:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801d4ee:	88bb      	ldrh	r3, [r7, #4]
 801d4f0:	79f9      	ldrb	r1, [r7, #7]
 801d4f2:	683a      	ldr	r2, [r7, #0]
 801d4f4:	4806      	ldr	r0, [pc, #24]	; (801d510 <SUBGRF_ReadCommand+0x40>)
 801d4f6:	f7eb fc82 	bl	8008dfe <HAL_SUBGHZ_ExecGetCmd>
 801d4fa:	697b      	ldr	r3, [r7, #20]
 801d4fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d4fe:	693b      	ldr	r3, [r7, #16]
 801d500:	f383 8810 	msr	PRIMASK, r3
}
 801d504:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d506:	bf00      	nop
 801d508:	3718      	adds	r7, #24
 801d50a:	46bd      	mov	sp, r7
 801d50c:	bd80      	pop	{r7, pc}
 801d50e:	bf00      	nop
 801d510:	20000708 	.word	0x20000708

0801d514 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801d514:	b580      	push	{r7, lr}
 801d516:	b084      	sub	sp, #16
 801d518:	af00      	add	r7, sp, #0
 801d51a:	4603      	mov	r3, r0
 801d51c:	460a      	mov	r2, r1
 801d51e:	71fb      	strb	r3, [r7, #7]
 801d520:	4613      	mov	r3, r2
 801d522:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801d524:	2301      	movs	r3, #1
 801d526:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801d528:	79bb      	ldrb	r3, [r7, #6]
 801d52a:	2b01      	cmp	r3, #1
 801d52c:	d10d      	bne.n	801d54a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801d52e:	79fb      	ldrb	r3, [r7, #7]
 801d530:	2b01      	cmp	r3, #1
 801d532:	d104      	bne.n	801d53e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801d534:	2302      	movs	r3, #2
 801d536:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801d538:	2004      	movs	r0, #4
 801d53a:	f000 f8df 	bl	801d6fc <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801d53e:	79fb      	ldrb	r3, [r7, #7]
 801d540:	2b02      	cmp	r3, #2
 801d542:	d107      	bne.n	801d554 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801d544:	2303      	movs	r3, #3
 801d546:	73fb      	strb	r3, [r7, #15]
 801d548:	e004      	b.n	801d554 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801d54a:	79bb      	ldrb	r3, [r7, #6]
 801d54c:	2b00      	cmp	r3, #0
 801d54e:	d101      	bne.n	801d554 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801d550:	2301      	movs	r3, #1
 801d552:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801d554:	7bfb      	ldrb	r3, [r7, #15]
 801d556:	4618      	mov	r0, r3
 801d558:	f7ef f8b7 	bl	800c6ca <RBI_ConfigRFSwitch>
}
 801d55c:	bf00      	nop
 801d55e:	3710      	adds	r7, #16
 801d560:	46bd      	mov	sp, r7
 801d562:	bd80      	pop	{r7, pc}

0801d564 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801d564:	b580      	push	{r7, lr}
 801d566:	b084      	sub	sp, #16
 801d568:	af00      	add	r7, sp, #0
 801d56a:	4603      	mov	r3, r0
 801d56c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801d56e:	2301      	movs	r3, #1
 801d570:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801d572:	f7ef f8b8 	bl	800c6e6 <RBI_GetTxConfig>
 801d576:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801d578:	68bb      	ldr	r3, [r7, #8]
 801d57a:	2b02      	cmp	r3, #2
 801d57c:	d016      	beq.n	801d5ac <SUBGRF_SetRfTxPower+0x48>
 801d57e:	68bb      	ldr	r3, [r7, #8]
 801d580:	2b02      	cmp	r3, #2
 801d582:	dc16      	bgt.n	801d5b2 <SUBGRF_SetRfTxPower+0x4e>
 801d584:	68bb      	ldr	r3, [r7, #8]
 801d586:	2b00      	cmp	r3, #0
 801d588:	d003      	beq.n	801d592 <SUBGRF_SetRfTxPower+0x2e>
 801d58a:	68bb      	ldr	r3, [r7, #8]
 801d58c:	2b01      	cmp	r3, #1
 801d58e:	d00a      	beq.n	801d5a6 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801d590:	e00f      	b.n	801d5b2 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801d592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d596:	2b0f      	cmp	r3, #15
 801d598:	dd02      	ble.n	801d5a0 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801d59a:	2302      	movs	r3, #2
 801d59c:	73fb      	strb	r3, [r7, #15]
            break;
 801d59e:	e009      	b.n	801d5b4 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801d5a0:	2301      	movs	r3, #1
 801d5a2:	73fb      	strb	r3, [r7, #15]
            break;
 801d5a4:	e006      	b.n	801d5b4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801d5a6:	2301      	movs	r3, #1
 801d5a8:	73fb      	strb	r3, [r7, #15]
            break;
 801d5aa:	e003      	b.n	801d5b4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801d5ac:	2302      	movs	r3, #2
 801d5ae:	73fb      	strb	r3, [r7, #15]
            break;
 801d5b0:	e000      	b.n	801d5b4 <SUBGRF_SetRfTxPower+0x50>
            break;
 801d5b2:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801d5b4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801d5b8:	7bfb      	ldrb	r3, [r7, #15]
 801d5ba:	2202      	movs	r2, #2
 801d5bc:	4618      	mov	r0, r3
 801d5be:	f7ff fbcd 	bl	801cd5c <SUBGRF_SetTxParams>

    return paSelect;
 801d5c2:	7bfb      	ldrb	r3, [r7, #15]
}
 801d5c4:	4618      	mov	r0, r3
 801d5c6:	3710      	adds	r7, #16
 801d5c8:	46bd      	mov	sp, r7
 801d5ca:	bd80      	pop	{r7, pc}

0801d5cc <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801d5cc:	b480      	push	{r7}
 801d5ce:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801d5d0:	2301      	movs	r3, #1
}
 801d5d2:	4618      	mov	r0, r3
 801d5d4:	46bd      	mov	sp, r7
 801d5d6:	bc80      	pop	{r7}
 801d5d8:	4770      	bx	lr
	...

0801d5dc <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d5dc:	b580      	push	{r7, lr}
 801d5de:	b082      	sub	sp, #8
 801d5e0:	af00      	add	r7, sp, #0
 801d5e2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801d5e4:	4b03      	ldr	r3, [pc, #12]	; (801d5f4 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801d5e6:	681b      	ldr	r3, [r3, #0]
 801d5e8:	2001      	movs	r0, #1
 801d5ea:	4798      	blx	r3
}
 801d5ec:	bf00      	nop
 801d5ee:	3708      	adds	r7, #8
 801d5f0:	46bd      	mov	sp, r7
 801d5f2:	bd80      	pop	{r7, pc}
 801d5f4:	20002458 	.word	0x20002458

0801d5f8 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d5f8:	b580      	push	{r7, lr}
 801d5fa:	b082      	sub	sp, #8
 801d5fc:	af00      	add	r7, sp, #0
 801d5fe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801d600:	4b03      	ldr	r3, [pc, #12]	; (801d610 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801d602:	681b      	ldr	r3, [r3, #0]
 801d604:	2002      	movs	r0, #2
 801d606:	4798      	blx	r3
}
 801d608:	bf00      	nop
 801d60a:	3708      	adds	r7, #8
 801d60c:	46bd      	mov	sp, r7
 801d60e:	bd80      	pop	{r7, pc}
 801d610:	20002458 	.word	0x20002458

0801d614 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801d614:	b580      	push	{r7, lr}
 801d616:	b082      	sub	sp, #8
 801d618:	af00      	add	r7, sp, #0
 801d61a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801d61c:	4b03      	ldr	r3, [pc, #12]	; (801d62c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801d61e:	681b      	ldr	r3, [r3, #0]
 801d620:	2040      	movs	r0, #64	; 0x40
 801d622:	4798      	blx	r3
}
 801d624:	bf00      	nop
 801d626:	3708      	adds	r7, #8
 801d628:	46bd      	mov	sp, r7
 801d62a:	bd80      	pop	{r7, pc}
 801d62c:	20002458 	.word	0x20002458

0801d630 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801d630:	b580      	push	{r7, lr}
 801d632:	b082      	sub	sp, #8
 801d634:	af00      	add	r7, sp, #0
 801d636:	6078      	str	r0, [r7, #4]
 801d638:	460b      	mov	r3, r1
 801d63a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801d63c:	78fb      	ldrb	r3, [r7, #3]
 801d63e:	2b00      	cmp	r3, #0
 801d640:	d002      	beq.n	801d648 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801d642:	2b01      	cmp	r3, #1
 801d644:	d005      	beq.n	801d652 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801d646:	e00a      	b.n	801d65e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801d648:	4b07      	ldr	r3, [pc, #28]	; (801d668 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801d64a:	681b      	ldr	r3, [r3, #0]
 801d64c:	2080      	movs	r0, #128	; 0x80
 801d64e:	4798      	blx	r3
            break;
 801d650:	e005      	b.n	801d65e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801d652:	4b05      	ldr	r3, [pc, #20]	; (801d668 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801d654:	681b      	ldr	r3, [r3, #0]
 801d656:	f44f 7080 	mov.w	r0, #256	; 0x100
 801d65a:	4798      	blx	r3
            break;
 801d65c:	bf00      	nop
    }
}
 801d65e:	bf00      	nop
 801d660:	3708      	adds	r7, #8
 801d662:	46bd      	mov	sp, r7
 801d664:	bd80      	pop	{r7, pc}
 801d666:	bf00      	nop
 801d668:	20002458 	.word	0x20002458

0801d66c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d66c:	b580      	push	{r7, lr}
 801d66e:	b082      	sub	sp, #8
 801d670:	af00      	add	r7, sp, #0
 801d672:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801d674:	4b04      	ldr	r3, [pc, #16]	; (801d688 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801d676:	681b      	ldr	r3, [r3, #0]
 801d678:	f44f 7000 	mov.w	r0, #512	; 0x200
 801d67c:	4798      	blx	r3
}
 801d67e:	bf00      	nop
 801d680:	3708      	adds	r7, #8
 801d682:	46bd      	mov	sp, r7
 801d684:	bd80      	pop	{r7, pc}
 801d686:	bf00      	nop
 801d688:	20002458 	.word	0x20002458

0801d68c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d68c:	b580      	push	{r7, lr}
 801d68e:	b082      	sub	sp, #8
 801d690:	af00      	add	r7, sp, #0
 801d692:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801d694:	4b03      	ldr	r3, [pc, #12]	; (801d6a4 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801d696:	681b      	ldr	r3, [r3, #0]
 801d698:	2020      	movs	r0, #32
 801d69a:	4798      	blx	r3
}
 801d69c:	bf00      	nop
 801d69e:	3708      	adds	r7, #8
 801d6a0:	46bd      	mov	sp, r7
 801d6a2:	bd80      	pop	{r7, pc}
 801d6a4:	20002458 	.word	0x20002458

0801d6a8 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d6a8:	b580      	push	{r7, lr}
 801d6aa:	b082      	sub	sp, #8
 801d6ac:	af00      	add	r7, sp, #0
 801d6ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801d6b0:	4b03      	ldr	r3, [pc, #12]	; (801d6c0 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801d6b2:	681b      	ldr	r3, [r3, #0]
 801d6b4:	2004      	movs	r0, #4
 801d6b6:	4798      	blx	r3
}
 801d6b8:	bf00      	nop
 801d6ba:	3708      	adds	r7, #8
 801d6bc:	46bd      	mov	sp, r7
 801d6be:	bd80      	pop	{r7, pc}
 801d6c0:	20002458 	.word	0x20002458

0801d6c4 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d6c4:	b580      	push	{r7, lr}
 801d6c6:	b082      	sub	sp, #8
 801d6c8:	af00      	add	r7, sp, #0
 801d6ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801d6cc:	4b03      	ldr	r3, [pc, #12]	; (801d6dc <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801d6ce:	681b      	ldr	r3, [r3, #0]
 801d6d0:	2008      	movs	r0, #8
 801d6d2:	4798      	blx	r3
}
 801d6d4:	bf00      	nop
 801d6d6:	3708      	adds	r7, #8
 801d6d8:	46bd      	mov	sp, r7
 801d6da:	bd80      	pop	{r7, pc}
 801d6dc:	20002458 	.word	0x20002458

0801d6e0 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d6e0:	b580      	push	{r7, lr}
 801d6e2:	b082      	sub	sp, #8
 801d6e4:	af00      	add	r7, sp, #0
 801d6e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801d6e8:	4b03      	ldr	r3, [pc, #12]	; (801d6f8 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801d6ea:	681b      	ldr	r3, [r3, #0]
 801d6ec:	2010      	movs	r0, #16
 801d6ee:	4798      	blx	r3
}
 801d6f0:	bf00      	nop
 801d6f2:	3708      	adds	r7, #8
 801d6f4:	46bd      	mov	sp, r7
 801d6f6:	bd80      	pop	{r7, pc}
 801d6f8:	20002458 	.word	0x20002458

0801d6fc <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801d6fc:	b580      	push	{r7, lr}
 801d6fe:	b084      	sub	sp, #16
 801d700:	af00      	add	r7, sp, #0
 801d702:	4603      	mov	r3, r0
 801d704:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801d706:	f7ee fffc 	bl	800c702 <RBI_IsDCDC>
 801d70a:	4603      	mov	r3, r0
 801d70c:	2b01      	cmp	r3, #1
 801d70e:	d112      	bne.n	801d736 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801d710:	f640 1023 	movw	r0, #2339	; 0x923
 801d714:	f7ff fe1e 	bl	801d354 <SUBGRF_ReadRegister>
 801d718:	4603      	mov	r3, r0
 801d71a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801d71c:	7bfb      	ldrb	r3, [r7, #15]
 801d71e:	f023 0306 	bic.w	r3, r3, #6
 801d722:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801d724:	7bfa      	ldrb	r2, [r7, #15]
 801d726:	79fb      	ldrb	r3, [r7, #7]
 801d728:	4313      	orrs	r3, r2
 801d72a:	b2db      	uxtb	r3, r3
 801d72c:	4619      	mov	r1, r3
 801d72e:	f640 1023 	movw	r0, #2339	; 0x923
 801d732:	f7ff fdfb 	bl	801d32c <SUBGRF_WriteRegister>
  }
}
 801d736:	bf00      	nop
 801d738:	3710      	adds	r7, #16
 801d73a:	46bd      	mov	sp, r7
 801d73c:	bd80      	pop	{r7, pc}
	...

0801d740 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801d740:	b480      	push	{r7}
 801d742:	b085      	sub	sp, #20
 801d744:	af00      	add	r7, sp, #0
 801d746:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801d748:	687b      	ldr	r3, [r7, #4]
 801d74a:	2b00      	cmp	r3, #0
 801d74c:	d101      	bne.n	801d752 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801d74e:	231f      	movs	r3, #31
 801d750:	e016      	b.n	801d780 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801d752:	2300      	movs	r3, #0
 801d754:	73fb      	strb	r3, [r7, #15]
 801d756:	e00f      	b.n	801d778 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801d758:	7bfb      	ldrb	r3, [r7, #15]
 801d75a:	4a0c      	ldr	r2, [pc, #48]	; (801d78c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801d75c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801d760:	687a      	ldr	r2, [r7, #4]
 801d762:	429a      	cmp	r2, r3
 801d764:	d205      	bcs.n	801d772 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801d766:	7bfb      	ldrb	r3, [r7, #15]
 801d768:	4a08      	ldr	r2, [pc, #32]	; (801d78c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801d76a:	00db      	lsls	r3, r3, #3
 801d76c:	4413      	add	r3, r2
 801d76e:	791b      	ldrb	r3, [r3, #4]
 801d770:	e006      	b.n	801d780 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801d772:	7bfb      	ldrb	r3, [r7, #15]
 801d774:	3301      	adds	r3, #1
 801d776:	73fb      	strb	r3, [r7, #15]
 801d778:	7bfb      	ldrb	r3, [r7, #15]
 801d77a:	2b15      	cmp	r3, #21
 801d77c:	d9ec      	bls.n	801d758 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801d77e:	e7fe      	b.n	801d77e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801d780:	4618      	mov	r0, r3
 801d782:	3714      	adds	r7, #20
 801d784:	46bd      	mov	sp, r7
 801d786:	bc80      	pop	{r7}
 801d788:	4770      	bx	lr
 801d78a:	bf00      	nop
 801d78c:	0801fc6c 	.word	0x0801fc6c

0801d790 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801d790:	b580      	push	{r7, lr}
 801d792:	b08a      	sub	sp, #40	; 0x28
 801d794:	af00      	add	r7, sp, #0
 801d796:	6078      	str	r0, [r7, #4]
 801d798:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801d79a:	4b35      	ldr	r3, [pc, #212]	; (801d870 <SUBGRF_GetCFO+0xe0>)
 801d79c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801d79e:	f640 0007 	movw	r0, #2055	; 0x807
 801d7a2:	f7ff fdd7 	bl	801d354 <SUBGRF_ReadRegister>
 801d7a6:	4603      	mov	r3, r0
 801d7a8:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801d7aa:	7ffb      	ldrb	r3, [r7, #31]
 801d7ac:	08db      	lsrs	r3, r3, #3
 801d7ae:	b2db      	uxtb	r3, r3
 801d7b0:	f003 0303 	and.w	r3, r3, #3
 801d7b4:	3328      	adds	r3, #40	; 0x28
 801d7b6:	443b      	add	r3, r7
 801d7b8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801d7bc:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801d7be:	7ffb      	ldrb	r3, [r7, #31]
 801d7c0:	f003 0307 	and.w	r3, r3, #7
 801d7c4:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801d7c6:	7fba      	ldrb	r2, [r7, #30]
 801d7c8:	7f7b      	ldrb	r3, [r7, #29]
 801d7ca:	3b01      	subs	r3, #1
 801d7cc:	fa02 f303 	lsl.w	r3, r2, r3
 801d7d0:	461a      	mov	r2, r3
 801d7d2:	4b28      	ldr	r3, [pc, #160]	; (801d874 <SUBGRF_GetCFO+0xe4>)
 801d7d4:	fbb3 f3f2 	udiv	r3, r3, r2
 801d7d8:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801d7da:	69ba      	ldr	r2, [r7, #24]
 801d7dc:	687b      	ldr	r3, [r7, #4]
 801d7de:	fbb2 f3f3 	udiv	r3, r2, r3
 801d7e2:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801d7e4:	2301      	movs	r3, #1
 801d7e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801d7ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d7ee:	697a      	ldr	r2, [r7, #20]
 801d7f0:	fb02 f303 	mul.w	r3, r2, r3
 801d7f4:	2b07      	cmp	r3, #7
 801d7f6:	d802      	bhi.n	801d7fe <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801d7f8:	2302      	movs	r3, #2
 801d7fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801d7fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d802:	697a      	ldr	r2, [r7, #20]
 801d804:	fb02 f303 	mul.w	r3, r2, r3
 801d808:	2b03      	cmp	r3, #3
 801d80a:	d802      	bhi.n	801d812 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801d80c:	2304      	movs	r3, #4
 801d80e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801d812:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801d816:	69bb      	ldr	r3, [r7, #24]
 801d818:	fb02 f303 	mul.w	r3, r2, r3
 801d81c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801d81e:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801d822:	f7ff fd97 	bl	801d354 <SUBGRF_ReadRegister>
 801d826:	4603      	mov	r3, r0
 801d828:	021b      	lsls	r3, r3, #8
 801d82a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801d82e:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801d830:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801d834:	f7ff fd8e 	bl	801d354 <SUBGRF_ReadRegister>
 801d838:	4603      	mov	r3, r0
 801d83a:	461a      	mov	r2, r3
 801d83c:	6a3b      	ldr	r3, [r7, #32]
 801d83e:	4313      	orrs	r3, r2
 801d840:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801d842:	6a3b      	ldr	r3, [r7, #32]
 801d844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d848:	2b00      	cmp	r3, #0
 801d84a:	d005      	beq.n	801d858 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801d84c:	6a3b      	ldr	r3, [r7, #32]
 801d84e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801d852:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801d856:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801d858:	693b      	ldr	r3, [r7, #16]
 801d85a:	095b      	lsrs	r3, r3, #5
 801d85c:	6a3a      	ldr	r2, [r7, #32]
 801d85e:	fb02 f303 	mul.w	r3, r2, r3
 801d862:	11da      	asrs	r2, r3, #7
 801d864:	683b      	ldr	r3, [r7, #0]
 801d866:	601a      	str	r2, [r3, #0]
}
 801d868:	bf00      	nop
 801d86a:	3728      	adds	r7, #40	; 0x28
 801d86c:	46bd      	mov	sp, r7
 801d86e:	bd80      	pop	{r7, pc}
 801d870:	0c0a0804 	.word	0x0c0a0804
 801d874:	01e84800 	.word	0x01e84800

0801d878 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801d878:	b480      	push	{r7}
 801d87a:	b087      	sub	sp, #28
 801d87c:	af00      	add	r7, sp, #0
 801d87e:	4603      	mov	r3, r0
 801d880:	60b9      	str	r1, [r7, #8]
 801d882:	607a      	str	r2, [r7, #4]
 801d884:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801d886:	2300      	movs	r3, #0
 801d888:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801d88a:	f04f 33ff 	mov.w	r3, #4294967295
 801d88e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801d890:	697b      	ldr	r3, [r7, #20]
}
 801d892:	4618      	mov	r0, r3
 801d894:	371c      	adds	r7, #28
 801d896:	46bd      	mov	sp, r7
 801d898:	bc80      	pop	{r7}
 801d89a:	4770      	bx	lr

0801d89c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801d89c:	b480      	push	{r7}
 801d89e:	b087      	sub	sp, #28
 801d8a0:	af00      	add	r7, sp, #0
 801d8a2:	4603      	mov	r3, r0
 801d8a4:	60b9      	str	r1, [r7, #8]
 801d8a6:	607a      	str	r2, [r7, #4]
 801d8a8:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801d8aa:	2300      	movs	r3, #0
 801d8ac:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801d8ae:	f04f 33ff 	mov.w	r3, #4294967295
 801d8b2:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801d8b4:	697b      	ldr	r3, [r7, #20]
}
 801d8b6:	4618      	mov	r0, r3
 801d8b8:	371c      	adds	r7, #28
 801d8ba:	46bd      	mov	sp, r7
 801d8bc:	bc80      	pop	{r7}
 801d8be:	4770      	bx	lr

0801d8c0 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801d8c0:	b480      	push	{r7}
 801d8c2:	b085      	sub	sp, #20
 801d8c4:	af00      	add	r7, sp, #0
 801d8c6:	60f8      	str	r0, [r7, #12]
 801d8c8:	60b9      	str	r1, [r7, #8]
 801d8ca:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801d8cc:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801d8d0:	4618      	mov	r0, r3
 801d8d2:	3714      	adds	r7, #20
 801d8d4:	46bd      	mov	sp, r7
 801d8d6:	bc80      	pop	{r7}
 801d8d8:	4770      	bx	lr

0801d8da <RFW_DeInit>:

void RFW_DeInit( void)
{
 801d8da:	b480      	push	{r7}
 801d8dc:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801d8de:	bf00      	nop
 801d8e0:	46bd      	mov	sp, r7
 801d8e2:	bc80      	pop	{r7}
 801d8e4:	4770      	bx	lr

0801d8e6 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801d8e6:	b480      	push	{r7}
 801d8e8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801d8ea:	2300      	movs	r3, #0
#endif
}
 801d8ec:	4618      	mov	r0, r3
 801d8ee:	46bd      	mov	sp, r7
 801d8f0:	bc80      	pop	{r7}
 801d8f2:	4770      	bx	lr

0801d8f4 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801d8f4:	b480      	push	{r7}
 801d8f6:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801d8f8:	2300      	movs	r3, #0
#endif
}
 801d8fa:	4618      	mov	r0, r3
 801d8fc:	46bd      	mov	sp, r7
 801d8fe:	bc80      	pop	{r7}
 801d900:	4770      	bx	lr

0801d902 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801d902:	b480      	push	{r7}
 801d904:	b083      	sub	sp, #12
 801d906:	af00      	add	r7, sp, #0
 801d908:	4603      	mov	r3, r0
 801d90a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801d90c:	bf00      	nop
 801d90e:	370c      	adds	r7, #12
 801d910:	46bd      	mov	sp, r7
 801d912:	bc80      	pop	{r7}
 801d914:	4770      	bx	lr

0801d916 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801d916:	b480      	push	{r7}
 801d918:	b087      	sub	sp, #28
 801d91a:	af00      	add	r7, sp, #0
 801d91c:	60f8      	str	r0, [r7, #12]
 801d91e:	460b      	mov	r3, r1
 801d920:	607a      	str	r2, [r7, #4]
 801d922:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801d924:	f04f 33ff 	mov.w	r3, #4294967295
 801d928:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801d92a:	697b      	ldr	r3, [r7, #20]
}
 801d92c:	4618      	mov	r0, r3
 801d92e:	371c      	adds	r7, #28
 801d930:	46bd      	mov	sp, r7
 801d932:	bc80      	pop	{r7}
 801d934:	4770      	bx	lr

0801d936 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801d936:	b480      	push	{r7}
 801d938:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801d93a:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801d93e:	4618      	mov	r0, r3
 801d940:	46bd      	mov	sp, r7
 801d942:	bc80      	pop	{r7}
 801d944:	4770      	bx	lr

0801d946 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801d946:	b480      	push	{r7}
 801d948:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801d94a:	bf00      	nop
 801d94c:	46bd      	mov	sp, r7
 801d94e:	bc80      	pop	{r7}
 801d950:	4770      	bx	lr

0801d952 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801d952:	b480      	push	{r7}
 801d954:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801d956:	bf00      	nop
 801d958:	46bd      	mov	sp, r7
 801d95a:	bc80      	pop	{r7}
 801d95c:	4770      	bx	lr

0801d95e <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801d95e:	b480      	push	{r7}
 801d960:	b083      	sub	sp, #12
 801d962:	af00      	add	r7, sp, #0
 801d964:	4603      	mov	r3, r0
 801d966:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801d968:	bf00      	nop
 801d96a:	370c      	adds	r7, #12
 801d96c:	46bd      	mov	sp, r7
 801d96e:	bc80      	pop	{r7}
 801d970:	4770      	bx	lr
	...

0801d974 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801d974:	b480      	push	{r7}
 801d976:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801d978:	4b04      	ldr	r3, [pc, #16]	; (801d98c <UTIL_LPM_Init+0x18>)
 801d97a:	2200      	movs	r2, #0
 801d97c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801d97e:	4b04      	ldr	r3, [pc, #16]	; (801d990 <UTIL_LPM_Init+0x1c>)
 801d980:	2200      	movs	r2, #0
 801d982:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801d984:	bf00      	nop
 801d986:	46bd      	mov	sp, r7
 801d988:	bc80      	pop	{r7}
 801d98a:	4770      	bx	lr
 801d98c:	2000245c 	.word	0x2000245c
 801d990:	20002460 	.word	0x20002460

0801d994 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801d994:	b480      	push	{r7}
 801d996:	b087      	sub	sp, #28
 801d998:	af00      	add	r7, sp, #0
 801d99a:	6078      	str	r0, [r7, #4]
 801d99c:	460b      	mov	r3, r1
 801d99e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d9a0:	f3ef 8310 	mrs	r3, PRIMASK
 801d9a4:	613b      	str	r3, [r7, #16]
  return(result);
 801d9a6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801d9a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d9aa:	b672      	cpsid	i
}
 801d9ac:	bf00      	nop
  
  switch( state )
 801d9ae:	78fb      	ldrb	r3, [r7, #3]
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	d008      	beq.n	801d9c6 <UTIL_LPM_SetStopMode+0x32>
 801d9b4:	2b01      	cmp	r3, #1
 801d9b6:	d10e      	bne.n	801d9d6 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801d9b8:	4b0d      	ldr	r3, [pc, #52]	; (801d9f0 <UTIL_LPM_SetStopMode+0x5c>)
 801d9ba:	681a      	ldr	r2, [r3, #0]
 801d9bc:	687b      	ldr	r3, [r7, #4]
 801d9be:	4313      	orrs	r3, r2
 801d9c0:	4a0b      	ldr	r2, [pc, #44]	; (801d9f0 <UTIL_LPM_SetStopMode+0x5c>)
 801d9c2:	6013      	str	r3, [r2, #0]
      break;
 801d9c4:	e008      	b.n	801d9d8 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	43da      	mvns	r2, r3
 801d9ca:	4b09      	ldr	r3, [pc, #36]	; (801d9f0 <UTIL_LPM_SetStopMode+0x5c>)
 801d9cc:	681b      	ldr	r3, [r3, #0]
 801d9ce:	4013      	ands	r3, r2
 801d9d0:	4a07      	ldr	r2, [pc, #28]	; (801d9f0 <UTIL_LPM_SetStopMode+0x5c>)
 801d9d2:	6013      	str	r3, [r2, #0]
      break;
 801d9d4:	e000      	b.n	801d9d8 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801d9d6:	bf00      	nop
 801d9d8:	697b      	ldr	r3, [r7, #20]
 801d9da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d9dc:	68fb      	ldr	r3, [r7, #12]
 801d9de:	f383 8810 	msr	PRIMASK, r3
}
 801d9e2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801d9e4:	bf00      	nop
 801d9e6:	371c      	adds	r7, #28
 801d9e8:	46bd      	mov	sp, r7
 801d9ea:	bc80      	pop	{r7}
 801d9ec:	4770      	bx	lr
 801d9ee:	bf00      	nop
 801d9f0:	2000245c 	.word	0x2000245c

0801d9f4 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801d9f4:	b480      	push	{r7}
 801d9f6:	b087      	sub	sp, #28
 801d9f8:	af00      	add	r7, sp, #0
 801d9fa:	6078      	str	r0, [r7, #4]
 801d9fc:	460b      	mov	r3, r1
 801d9fe:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da00:	f3ef 8310 	mrs	r3, PRIMASK
 801da04:	613b      	str	r3, [r7, #16]
  return(result);
 801da06:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801da08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801da0a:	b672      	cpsid	i
}
 801da0c:	bf00      	nop
  
  switch(state)
 801da0e:	78fb      	ldrb	r3, [r7, #3]
 801da10:	2b00      	cmp	r3, #0
 801da12:	d008      	beq.n	801da26 <UTIL_LPM_SetOffMode+0x32>
 801da14:	2b01      	cmp	r3, #1
 801da16:	d10e      	bne.n	801da36 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801da18:	4b0d      	ldr	r3, [pc, #52]	; (801da50 <UTIL_LPM_SetOffMode+0x5c>)
 801da1a:	681a      	ldr	r2, [r3, #0]
 801da1c:	687b      	ldr	r3, [r7, #4]
 801da1e:	4313      	orrs	r3, r2
 801da20:	4a0b      	ldr	r2, [pc, #44]	; (801da50 <UTIL_LPM_SetOffMode+0x5c>)
 801da22:	6013      	str	r3, [r2, #0]
      break;
 801da24:	e008      	b.n	801da38 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801da26:	687b      	ldr	r3, [r7, #4]
 801da28:	43da      	mvns	r2, r3
 801da2a:	4b09      	ldr	r3, [pc, #36]	; (801da50 <UTIL_LPM_SetOffMode+0x5c>)
 801da2c:	681b      	ldr	r3, [r3, #0]
 801da2e:	4013      	ands	r3, r2
 801da30:	4a07      	ldr	r2, [pc, #28]	; (801da50 <UTIL_LPM_SetOffMode+0x5c>)
 801da32:	6013      	str	r3, [r2, #0]
      break;
 801da34:	e000      	b.n	801da38 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801da36:	bf00      	nop
 801da38:	697b      	ldr	r3, [r7, #20]
 801da3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da3c:	68fb      	ldr	r3, [r7, #12]
 801da3e:	f383 8810 	msr	PRIMASK, r3
}
 801da42:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801da44:	bf00      	nop
 801da46:	371c      	adds	r7, #28
 801da48:	46bd      	mov	sp, r7
 801da4a:	bc80      	pop	{r7}
 801da4c:	4770      	bx	lr
 801da4e:	bf00      	nop
 801da50:	20002460 	.word	0x20002460

0801da54 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801da54:	b580      	push	{r7, lr}
 801da56:	b084      	sub	sp, #16
 801da58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da5a:	f3ef 8310 	mrs	r3, PRIMASK
 801da5e:	60bb      	str	r3, [r7, #8]
  return(result);
 801da60:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801da62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801da64:	b672      	cpsid	i
}
 801da66:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801da68:	4b12      	ldr	r3, [pc, #72]	; (801dab4 <UTIL_LPM_EnterLowPower+0x60>)
 801da6a:	681b      	ldr	r3, [r3, #0]
 801da6c:	2b00      	cmp	r3, #0
 801da6e:	d006      	beq.n	801da7e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801da70:	4b11      	ldr	r3, [pc, #68]	; (801dab8 <UTIL_LPM_EnterLowPower+0x64>)
 801da72:	681b      	ldr	r3, [r3, #0]
 801da74:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801da76:	4b10      	ldr	r3, [pc, #64]	; (801dab8 <UTIL_LPM_EnterLowPower+0x64>)
 801da78:	685b      	ldr	r3, [r3, #4]
 801da7a:	4798      	blx	r3
 801da7c:	e010      	b.n	801daa0 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801da7e:	4b0f      	ldr	r3, [pc, #60]	; (801dabc <UTIL_LPM_EnterLowPower+0x68>)
 801da80:	681b      	ldr	r3, [r3, #0]
 801da82:	2b00      	cmp	r3, #0
 801da84:	d006      	beq.n	801da94 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801da86:	4b0c      	ldr	r3, [pc, #48]	; (801dab8 <UTIL_LPM_EnterLowPower+0x64>)
 801da88:	689b      	ldr	r3, [r3, #8]
 801da8a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801da8c:	4b0a      	ldr	r3, [pc, #40]	; (801dab8 <UTIL_LPM_EnterLowPower+0x64>)
 801da8e:	68db      	ldr	r3, [r3, #12]
 801da90:	4798      	blx	r3
 801da92:	e005      	b.n	801daa0 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801da94:	4b08      	ldr	r3, [pc, #32]	; (801dab8 <UTIL_LPM_EnterLowPower+0x64>)
 801da96:	691b      	ldr	r3, [r3, #16]
 801da98:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801da9a:	4b07      	ldr	r3, [pc, #28]	; (801dab8 <UTIL_LPM_EnterLowPower+0x64>)
 801da9c:	695b      	ldr	r3, [r3, #20]
 801da9e:	4798      	blx	r3
 801daa0:	68fb      	ldr	r3, [r7, #12]
 801daa2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801daa4:	687b      	ldr	r3, [r7, #4]
 801daa6:	f383 8810 	msr	PRIMASK, r3
}
 801daaa:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801daac:	bf00      	nop
 801daae:	3710      	adds	r7, #16
 801dab0:	46bd      	mov	sp, r7
 801dab2:	bd80      	pop	{r7, pc}
 801dab4:	2000245c 	.word	0x2000245c
 801dab8:	0801f76c 	.word	0x0801f76c
 801dabc:	20002460 	.word	0x20002460

0801dac0 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801dac0:	b480      	push	{r7}
 801dac2:	b087      	sub	sp, #28
 801dac4:	af00      	add	r7, sp, #0
 801dac6:	60f8      	str	r0, [r7, #12]
 801dac8:	60b9      	str	r1, [r7, #8]
 801daca:	4613      	mov	r3, r2
 801dacc:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801dace:	68fb      	ldr	r3, [r7, #12]
 801dad0:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801dad2:	68bb      	ldr	r3, [r7, #8]
 801dad4:	613b      	str	r3, [r7, #16]

  while( size-- )
 801dad6:	e007      	b.n	801dae8 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801dad8:	693a      	ldr	r2, [r7, #16]
 801dada:	1c53      	adds	r3, r2, #1
 801dadc:	613b      	str	r3, [r7, #16]
 801dade:	697b      	ldr	r3, [r7, #20]
 801dae0:	1c59      	adds	r1, r3, #1
 801dae2:	6179      	str	r1, [r7, #20]
 801dae4:	7812      	ldrb	r2, [r2, #0]
 801dae6:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801dae8:	88fb      	ldrh	r3, [r7, #6]
 801daea:	1e5a      	subs	r2, r3, #1
 801daec:	80fa      	strh	r2, [r7, #6]
 801daee:	2b00      	cmp	r3, #0
 801daf0:	d1f2      	bne.n	801dad8 <UTIL_MEM_cpy_8+0x18>
    }
}
 801daf2:	bf00      	nop
 801daf4:	bf00      	nop
 801daf6:	371c      	adds	r7, #28
 801daf8:	46bd      	mov	sp, r7
 801dafa:	bc80      	pop	{r7}
 801dafc:	4770      	bx	lr

0801dafe <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801dafe:	b480      	push	{r7}
 801db00:	b085      	sub	sp, #20
 801db02:	af00      	add	r7, sp, #0
 801db04:	6078      	str	r0, [r7, #4]
 801db06:	460b      	mov	r3, r1
 801db08:	70fb      	strb	r3, [r7, #3]
 801db0a:	4613      	mov	r3, r2
 801db0c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801db0e:	687b      	ldr	r3, [r7, #4]
 801db10:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801db12:	e004      	b.n	801db1e <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801db14:	68fb      	ldr	r3, [r7, #12]
 801db16:	1c5a      	adds	r2, r3, #1
 801db18:	60fa      	str	r2, [r7, #12]
 801db1a:	78fa      	ldrb	r2, [r7, #3]
 801db1c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801db1e:	883b      	ldrh	r3, [r7, #0]
 801db20:	1e5a      	subs	r2, r3, #1
 801db22:	803a      	strh	r2, [r7, #0]
 801db24:	2b00      	cmp	r3, #0
 801db26:	d1f5      	bne.n	801db14 <UTIL_MEM_set_8+0x16>
  }
}
 801db28:	bf00      	nop
 801db2a:	bf00      	nop
 801db2c:	3714      	adds	r7, #20
 801db2e:	46bd      	mov	sp, r7
 801db30:	bc80      	pop	{r7}
 801db32:	4770      	bx	lr

0801db34 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801db34:	b082      	sub	sp, #8
 801db36:	b480      	push	{r7}
 801db38:	b087      	sub	sp, #28
 801db3a:	af00      	add	r7, sp, #0
 801db3c:	60f8      	str	r0, [r7, #12]
 801db3e:	1d38      	adds	r0, r7, #4
 801db40:	e880 0006 	stmia.w	r0, {r1, r2}
 801db44:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801db46:	2300      	movs	r3, #0
 801db48:	613b      	str	r3, [r7, #16]
 801db4a:	2300      	movs	r3, #0
 801db4c:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801db4e:	687a      	ldr	r2, [r7, #4]
 801db50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db52:	4413      	add	r3, r2
 801db54:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801db56:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801db5a:	b29a      	uxth	r2, r3
 801db5c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801db60:	b29b      	uxth	r3, r3
 801db62:	4413      	add	r3, r2
 801db64:	b29b      	uxth	r3, r3
 801db66:	b21b      	sxth	r3, r3
 801db68:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801db6a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801db6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801db72:	db0a      	blt.n	801db8a <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801db74:	693b      	ldr	r3, [r7, #16]
 801db76:	3301      	adds	r3, #1
 801db78:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801db7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801db7e:	b29b      	uxth	r3, r3
 801db80:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801db84:	b29b      	uxth	r3, r3
 801db86:	b21b      	sxth	r3, r3
 801db88:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801db8a:	68fb      	ldr	r3, [r7, #12]
 801db8c:	461a      	mov	r2, r3
 801db8e:	f107 0310 	add.w	r3, r7, #16
 801db92:	e893 0003 	ldmia.w	r3, {r0, r1}
 801db96:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801db9a:	68f8      	ldr	r0, [r7, #12]
 801db9c:	371c      	adds	r7, #28
 801db9e:	46bd      	mov	sp, r7
 801dba0:	bc80      	pop	{r7}
 801dba2:	b002      	add	sp, #8
 801dba4:	4770      	bx	lr

0801dba6 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801dba6:	b082      	sub	sp, #8
 801dba8:	b480      	push	{r7}
 801dbaa:	b087      	sub	sp, #28
 801dbac:	af00      	add	r7, sp, #0
 801dbae:	60f8      	str	r0, [r7, #12]
 801dbb0:	1d38      	adds	r0, r7, #4
 801dbb2:	e880 0006 	stmia.w	r0, {r1, r2}
 801dbb6:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801dbb8:	2300      	movs	r3, #0
 801dbba:	613b      	str	r3, [r7, #16]
 801dbbc:	2300      	movs	r3, #0
 801dbbe:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801dbc0:	687a      	ldr	r2, [r7, #4]
 801dbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbc4:	1ad3      	subs	r3, r2, r3
 801dbc6:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801dbc8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801dbcc:	b29a      	uxth	r2, r3
 801dbce:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801dbd2:	b29b      	uxth	r3, r3
 801dbd4:	1ad3      	subs	r3, r2, r3
 801dbd6:	b29b      	uxth	r3, r3
 801dbd8:	b21b      	sxth	r3, r3
 801dbda:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801dbdc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801dbe0:	2b00      	cmp	r3, #0
 801dbe2:	da0a      	bge.n	801dbfa <SysTimeSub+0x54>
  {
    c.Seconds--;
 801dbe4:	693b      	ldr	r3, [r7, #16]
 801dbe6:	3b01      	subs	r3, #1
 801dbe8:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801dbea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801dbee:	b29b      	uxth	r3, r3
 801dbf0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801dbf4:	b29b      	uxth	r3, r3
 801dbf6:	b21b      	sxth	r3, r3
 801dbf8:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801dbfa:	68fb      	ldr	r3, [r7, #12]
 801dbfc:	461a      	mov	r2, r3
 801dbfe:	f107 0310 	add.w	r3, r7, #16
 801dc02:	e893 0003 	ldmia.w	r3, {r0, r1}
 801dc06:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801dc0a:	68f8      	ldr	r0, [r7, #12]
 801dc0c:	371c      	adds	r7, #28
 801dc0e:	46bd      	mov	sp, r7
 801dc10:	bc80      	pop	{r7}
 801dc12:	b002      	add	sp, #8
 801dc14:	4770      	bx	lr
	...

0801dc18 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801dc18:	b580      	push	{r7, lr}
 801dc1a:	b088      	sub	sp, #32
 801dc1c:	af02      	add	r7, sp, #8
 801dc1e:	463b      	mov	r3, r7
 801dc20:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801dc24:	2300      	movs	r3, #0
 801dc26:	60bb      	str	r3, [r7, #8]
 801dc28:	2300      	movs	r3, #0
 801dc2a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801dc2c:	4b10      	ldr	r3, [pc, #64]	; (801dc70 <SysTimeSet+0x58>)
 801dc2e:	691b      	ldr	r3, [r3, #16]
 801dc30:	f107 0208 	add.w	r2, r7, #8
 801dc34:	3204      	adds	r2, #4
 801dc36:	4610      	mov	r0, r2
 801dc38:	4798      	blx	r3
 801dc3a:	4603      	mov	r3, r0
 801dc3c:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801dc3e:	f107 0010 	add.w	r0, r7, #16
 801dc42:	68fb      	ldr	r3, [r7, #12]
 801dc44:	9300      	str	r3, [sp, #0]
 801dc46:	68bb      	ldr	r3, [r7, #8]
 801dc48:	463a      	mov	r2, r7
 801dc4a:	ca06      	ldmia	r2, {r1, r2}
 801dc4c:	f7ff ffab 	bl	801dba6 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801dc50:	4b07      	ldr	r3, [pc, #28]	; (801dc70 <SysTimeSet+0x58>)
 801dc52:	681b      	ldr	r3, [r3, #0]
 801dc54:	693a      	ldr	r2, [r7, #16]
 801dc56:	4610      	mov	r0, r2
 801dc58:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801dc5a:	4b05      	ldr	r3, [pc, #20]	; (801dc70 <SysTimeSet+0x58>)
 801dc5c:	689b      	ldr	r3, [r3, #8]
 801dc5e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801dc62:	4610      	mov	r0, r2
 801dc64:	4798      	blx	r3
}
 801dc66:	bf00      	nop
 801dc68:	3718      	adds	r7, #24
 801dc6a:	46bd      	mov	sp, r7
 801dc6c:	bd80      	pop	{r7, pc}
 801dc6e:	bf00      	nop
 801dc70:	0801f850 	.word	0x0801f850

0801dc74 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801dc74:	b580      	push	{r7, lr}
 801dc76:	b08a      	sub	sp, #40	; 0x28
 801dc78:	af02      	add	r7, sp, #8
 801dc7a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801dc7c:	2300      	movs	r3, #0
 801dc7e:	61bb      	str	r3, [r7, #24]
 801dc80:	2300      	movs	r3, #0
 801dc82:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801dc84:	2300      	movs	r3, #0
 801dc86:	613b      	str	r3, [r7, #16]
 801dc88:	2300      	movs	r3, #0
 801dc8a:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801dc8c:	4b14      	ldr	r3, [pc, #80]	; (801dce0 <SysTimeGet+0x6c>)
 801dc8e:	691b      	ldr	r3, [r3, #16]
 801dc90:	f107 0218 	add.w	r2, r7, #24
 801dc94:	3204      	adds	r2, #4
 801dc96:	4610      	mov	r0, r2
 801dc98:	4798      	blx	r3
 801dc9a:	4603      	mov	r3, r0
 801dc9c:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801dc9e:	4b10      	ldr	r3, [pc, #64]	; (801dce0 <SysTimeGet+0x6c>)
 801dca0:	68db      	ldr	r3, [r3, #12]
 801dca2:	4798      	blx	r3
 801dca4:	4603      	mov	r3, r0
 801dca6:	b21b      	sxth	r3, r3
 801dca8:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801dcaa:	4b0d      	ldr	r3, [pc, #52]	; (801dce0 <SysTimeGet+0x6c>)
 801dcac:	685b      	ldr	r3, [r3, #4]
 801dcae:	4798      	blx	r3
 801dcb0:	4603      	mov	r3, r0
 801dcb2:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801dcb4:	f107 0010 	add.w	r0, r7, #16
 801dcb8:	69fb      	ldr	r3, [r7, #28]
 801dcba:	9300      	str	r3, [sp, #0]
 801dcbc:	69bb      	ldr	r3, [r7, #24]
 801dcbe:	f107 0208 	add.w	r2, r7, #8
 801dcc2:	ca06      	ldmia	r2, {r1, r2}
 801dcc4:	f7ff ff36 	bl	801db34 <SysTimeAdd>

  return sysTime;
 801dcc8:	687b      	ldr	r3, [r7, #4]
 801dcca:	461a      	mov	r2, r3
 801dccc:	f107 0310 	add.w	r3, r7, #16
 801dcd0:	e893 0003 	ldmia.w	r3, {r0, r1}
 801dcd4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801dcd8:	6878      	ldr	r0, [r7, #4]
 801dcda:	3720      	adds	r7, #32
 801dcdc:	46bd      	mov	sp, r7
 801dcde:	bd80      	pop	{r7, pc}
 801dce0:	0801f850 	.word	0x0801f850

0801dce4 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801dce4:	b580      	push	{r7, lr}
 801dce6:	b084      	sub	sp, #16
 801dce8:	af00      	add	r7, sp, #0
 801dcea:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801dcec:	2300      	movs	r3, #0
 801dcee:	60bb      	str	r3, [r7, #8]
 801dcf0:	2300      	movs	r3, #0
 801dcf2:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801dcf4:	4b0a      	ldr	r3, [pc, #40]	; (801dd20 <SysTimeGetMcuTime+0x3c>)
 801dcf6:	691b      	ldr	r3, [r3, #16]
 801dcf8:	f107 0208 	add.w	r2, r7, #8
 801dcfc:	3204      	adds	r2, #4
 801dcfe:	4610      	mov	r0, r2
 801dd00:	4798      	blx	r3
 801dd02:	4603      	mov	r3, r0
 801dd04:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801dd06:	687b      	ldr	r3, [r7, #4]
 801dd08:	461a      	mov	r2, r3
 801dd0a:	f107 0308 	add.w	r3, r7, #8
 801dd0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801dd12:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801dd16:	6878      	ldr	r0, [r7, #4]
 801dd18:	3710      	adds	r7, #16
 801dd1a:	46bd      	mov	sp, r7
 801dd1c:	bd80      	pop	{r7, pc}
 801dd1e:	bf00      	nop
 801dd20:	0801f850 	.word	0x0801f850

0801dd24 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801dd24:	b580      	push	{r7, lr}
 801dd26:	b088      	sub	sp, #32
 801dd28:	af02      	add	r7, sp, #8
 801dd2a:	463b      	mov	r3, r7
 801dd2c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801dd30:	4b0f      	ldr	r3, [pc, #60]	; (801dd70 <SysTimeToMs+0x4c>)
 801dd32:	68db      	ldr	r3, [r3, #12]
 801dd34:	4798      	blx	r3
 801dd36:	4603      	mov	r3, r0
 801dd38:	b21b      	sxth	r3, r3
 801dd3a:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801dd3c:	4b0c      	ldr	r3, [pc, #48]	; (801dd70 <SysTimeToMs+0x4c>)
 801dd3e:	685b      	ldr	r3, [r3, #4]
 801dd40:	4798      	blx	r3
 801dd42:	4603      	mov	r3, r0
 801dd44:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801dd46:	f107 0008 	add.w	r0, r7, #8
 801dd4a:	697b      	ldr	r3, [r7, #20]
 801dd4c:	9300      	str	r3, [sp, #0]
 801dd4e:	693b      	ldr	r3, [r7, #16]
 801dd50:	463a      	mov	r2, r7
 801dd52:	ca06      	ldmia	r2, {r1, r2}
 801dd54:	f7ff ff27 	bl	801dba6 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801dd58:	68bb      	ldr	r3, [r7, #8]
 801dd5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801dd5e:	fb02 f303 	mul.w	r3, r2, r3
 801dd62:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801dd66:	4413      	add	r3, r2
}
 801dd68:	4618      	mov	r0, r3
 801dd6a:	3718      	adds	r7, #24
 801dd6c:	46bd      	mov	sp, r7
 801dd6e:	bd80      	pop	{r7, pc}
 801dd70:	0801f850 	.word	0x0801f850

0801dd74 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801dd74:	b580      	push	{r7, lr}
 801dd76:	b08a      	sub	sp, #40	; 0x28
 801dd78:	af02      	add	r7, sp, #8
 801dd7a:	6078      	str	r0, [r7, #4]
 801dd7c:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801dd7e:	683b      	ldr	r3, [r7, #0]
 801dd80:	4a19      	ldr	r2, [pc, #100]	; (801dde8 <SysTimeFromMs+0x74>)
 801dd82:	fba2 2303 	umull	r2, r3, r2, r3
 801dd86:	099b      	lsrs	r3, r3, #6
 801dd88:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801dd8a:	69fb      	ldr	r3, [r7, #28]
 801dd8c:	617b      	str	r3, [r7, #20]
 801dd8e:	683b      	ldr	r3, [r7, #0]
 801dd90:	b29a      	uxth	r2, r3
 801dd92:	69fb      	ldr	r3, [r7, #28]
 801dd94:	b29b      	uxth	r3, r3
 801dd96:	4619      	mov	r1, r3
 801dd98:	0149      	lsls	r1, r1, #5
 801dd9a:	1ac9      	subs	r1, r1, r3
 801dd9c:	0089      	lsls	r1, r1, #2
 801dd9e:	440b      	add	r3, r1
 801dda0:	00db      	lsls	r3, r3, #3
 801dda2:	b29b      	uxth	r3, r3
 801dda4:	1ad3      	subs	r3, r2, r3
 801dda6:	b29b      	uxth	r3, r3
 801dda8:	b21b      	sxth	r3, r3
 801ddaa:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801ddac:	f107 030c 	add.w	r3, r7, #12
 801ddb0:	2200      	movs	r2, #0
 801ddb2:	601a      	str	r2, [r3, #0]
 801ddb4:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801ddb6:	4b0d      	ldr	r3, [pc, #52]	; (801ddec <SysTimeFromMs+0x78>)
 801ddb8:	68db      	ldr	r3, [r3, #12]
 801ddba:	4798      	blx	r3
 801ddbc:	4603      	mov	r3, r0
 801ddbe:	b21b      	sxth	r3, r3
 801ddc0:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801ddc2:	4b0a      	ldr	r3, [pc, #40]	; (801ddec <SysTimeFromMs+0x78>)
 801ddc4:	685b      	ldr	r3, [r3, #4]
 801ddc6:	4798      	blx	r3
 801ddc8:	4603      	mov	r3, r0
 801ddca:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801ddcc:	6878      	ldr	r0, [r7, #4]
 801ddce:	693b      	ldr	r3, [r7, #16]
 801ddd0:	9300      	str	r3, [sp, #0]
 801ddd2:	68fb      	ldr	r3, [r7, #12]
 801ddd4:	f107 0214 	add.w	r2, r7, #20
 801ddd8:	ca06      	ldmia	r2, {r1, r2}
 801ddda:	f7ff feab 	bl	801db34 <SysTimeAdd>
}
 801ddde:	6878      	ldr	r0, [r7, #4]
 801dde0:	3720      	adds	r7, #32
 801dde2:	46bd      	mov	sp, r7
 801dde4:	bd80      	pop	{r7, pc}
 801dde6:	bf00      	nop
 801dde8:	10624dd3 	.word	0x10624dd3
 801ddec:	0801f850 	.word	0x0801f850

0801ddf0 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801ddf0:	b480      	push	{r7}
 801ddf2:	b085      	sub	sp, #20
 801ddf4:	af00      	add	r7, sp, #0
 801ddf6:	6078      	str	r0, [r7, #4]
  int i = 0;
 801ddf8:	2300      	movs	r3, #0
 801ddfa:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801ddfc:	e00e      	b.n	801de1c <ee_skip_atoi+0x2c>
 801ddfe:	68fa      	ldr	r2, [r7, #12]
 801de00:	4613      	mov	r3, r2
 801de02:	009b      	lsls	r3, r3, #2
 801de04:	4413      	add	r3, r2
 801de06:	005b      	lsls	r3, r3, #1
 801de08:	4618      	mov	r0, r3
 801de0a:	687b      	ldr	r3, [r7, #4]
 801de0c:	681b      	ldr	r3, [r3, #0]
 801de0e:	1c59      	adds	r1, r3, #1
 801de10:	687a      	ldr	r2, [r7, #4]
 801de12:	6011      	str	r1, [r2, #0]
 801de14:	781b      	ldrb	r3, [r3, #0]
 801de16:	4403      	add	r3, r0
 801de18:	3b30      	subs	r3, #48	; 0x30
 801de1a:	60fb      	str	r3, [r7, #12]
 801de1c:	687b      	ldr	r3, [r7, #4]
 801de1e:	681b      	ldr	r3, [r3, #0]
 801de20:	781b      	ldrb	r3, [r3, #0]
 801de22:	2b2f      	cmp	r3, #47	; 0x2f
 801de24:	d904      	bls.n	801de30 <ee_skip_atoi+0x40>
 801de26:	687b      	ldr	r3, [r7, #4]
 801de28:	681b      	ldr	r3, [r3, #0]
 801de2a:	781b      	ldrb	r3, [r3, #0]
 801de2c:	2b39      	cmp	r3, #57	; 0x39
 801de2e:	d9e6      	bls.n	801ddfe <ee_skip_atoi+0xe>
  return i;
 801de30:	68fb      	ldr	r3, [r7, #12]
}
 801de32:	4618      	mov	r0, r3
 801de34:	3714      	adds	r7, #20
 801de36:	46bd      	mov	sp, r7
 801de38:	bc80      	pop	{r7}
 801de3a:	4770      	bx	lr

0801de3c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801de3c:	b480      	push	{r7}
 801de3e:	b099      	sub	sp, #100	; 0x64
 801de40:	af00      	add	r7, sp, #0
 801de42:	60f8      	str	r0, [r7, #12]
 801de44:	60b9      	str	r1, [r7, #8]
 801de46:	607a      	str	r2, [r7, #4]
 801de48:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801de4a:	4b71      	ldr	r3, [pc, #452]	; (801e010 <ee_number+0x1d4>)
 801de4c:	681b      	ldr	r3, [r3, #0]
 801de4e:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801de50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801de52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801de56:	2b00      	cmp	r3, #0
 801de58:	d002      	beq.n	801de60 <ee_number+0x24>
 801de5a:	4b6e      	ldr	r3, [pc, #440]	; (801e014 <ee_number+0x1d8>)
 801de5c:	681b      	ldr	r3, [r3, #0]
 801de5e:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801de60:	683b      	ldr	r3, [r7, #0]
 801de62:	2b01      	cmp	r3, #1
 801de64:	dd02      	ble.n	801de6c <ee_number+0x30>
 801de66:	683b      	ldr	r3, [r7, #0]
 801de68:	2b24      	cmp	r3, #36	; 0x24
 801de6a:	dd01      	ble.n	801de70 <ee_number+0x34>
 801de6c:	2300      	movs	r3, #0
 801de6e:	e0ca      	b.n	801e006 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801de70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801de72:	f003 0301 	and.w	r3, r3, #1
 801de76:	2b00      	cmp	r3, #0
 801de78:	d001      	beq.n	801de7e <ee_number+0x42>
 801de7a:	2330      	movs	r3, #48	; 0x30
 801de7c:	e000      	b.n	801de80 <ee_number+0x44>
 801de7e:	2320      	movs	r3, #32
 801de80:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801de84:	2300      	movs	r3, #0
 801de86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801de8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801de8c:	f003 0302 	and.w	r3, r3, #2
 801de90:	2b00      	cmp	r3, #0
 801de92:	d00b      	beq.n	801deac <ee_number+0x70>
  {
    if (num < 0)
 801de94:	687b      	ldr	r3, [r7, #4]
 801de96:	2b00      	cmp	r3, #0
 801de98:	da08      	bge.n	801deac <ee_number+0x70>
    {
      sign = '-';
 801de9a:	232d      	movs	r3, #45	; 0x2d
 801de9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801dea0:	687b      	ldr	r3, [r7, #4]
 801dea2:	425b      	negs	r3, r3
 801dea4:	607b      	str	r3, [r7, #4]
      size--;
 801dea6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801dea8:	3b01      	subs	r3, #1
 801deaa:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801deac:	2300      	movs	r3, #0
 801deae:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	2b00      	cmp	r3, #0
 801deb4:	d11e      	bne.n	801def4 <ee_number+0xb8>
    tmp[i++] = '0';
 801deb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801deb8:	1c5a      	adds	r2, r3, #1
 801deba:	657a      	str	r2, [r7, #84]	; 0x54
 801debc:	3360      	adds	r3, #96	; 0x60
 801debe:	443b      	add	r3, r7
 801dec0:	2230      	movs	r2, #48	; 0x30
 801dec2:	f803 2c50 	strb.w	r2, [r3, #-80]
 801dec6:	e018      	b.n	801defa <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	683a      	ldr	r2, [r7, #0]
 801decc:	fbb3 f1f2 	udiv	r1, r3, r2
 801ded0:	fb01 f202 	mul.w	r2, r1, r2
 801ded4:	1a9b      	subs	r3, r3, r2
 801ded6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ded8:	441a      	add	r2, r3
 801deda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dedc:	1c59      	adds	r1, r3, #1
 801dede:	6579      	str	r1, [r7, #84]	; 0x54
 801dee0:	7812      	ldrb	r2, [r2, #0]
 801dee2:	3360      	adds	r3, #96	; 0x60
 801dee4:	443b      	add	r3, r7
 801dee6:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801deea:	687a      	ldr	r2, [r7, #4]
 801deec:	683b      	ldr	r3, [r7, #0]
 801deee:	fbb2 f3f3 	udiv	r3, r2, r3
 801def2:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801def4:	687b      	ldr	r3, [r7, #4]
 801def6:	2b00      	cmp	r3, #0
 801def8:	d1e6      	bne.n	801dec8 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801defa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801defc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801defe:	429a      	cmp	r2, r3
 801df00:	dd01      	ble.n	801df06 <ee_number+0xca>
 801df02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801df04:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801df06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801df08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801df0a:	1ad3      	subs	r3, r2, r3
 801df0c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801df0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801df10:	f003 0301 	and.w	r3, r3, #1
 801df14:	2b00      	cmp	r3, #0
 801df16:	d112      	bne.n	801df3e <ee_number+0x102>
 801df18:	e00c      	b.n	801df34 <ee_number+0xf8>
 801df1a:	68fb      	ldr	r3, [r7, #12]
 801df1c:	1c5a      	adds	r2, r3, #1
 801df1e:	60fa      	str	r2, [r7, #12]
 801df20:	2220      	movs	r2, #32
 801df22:	701a      	strb	r2, [r3, #0]
 801df24:	68bb      	ldr	r3, [r7, #8]
 801df26:	3b01      	subs	r3, #1
 801df28:	60bb      	str	r3, [r7, #8]
 801df2a:	68bb      	ldr	r3, [r7, #8]
 801df2c:	2b00      	cmp	r3, #0
 801df2e:	d101      	bne.n	801df34 <ee_number+0xf8>
 801df30:	68fb      	ldr	r3, [r7, #12]
 801df32:	e068      	b.n	801e006 <ee_number+0x1ca>
 801df34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801df36:	1e5a      	subs	r2, r3, #1
 801df38:	66ba      	str	r2, [r7, #104]	; 0x68
 801df3a:	2b00      	cmp	r3, #0
 801df3c:	dced      	bgt.n	801df1a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801df3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801df42:	2b00      	cmp	r3, #0
 801df44:	d01b      	beq.n	801df7e <ee_number+0x142>
 801df46:	68fb      	ldr	r3, [r7, #12]
 801df48:	1c5a      	adds	r2, r3, #1
 801df4a:	60fa      	str	r2, [r7, #12]
 801df4c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801df50:	701a      	strb	r2, [r3, #0]
 801df52:	68bb      	ldr	r3, [r7, #8]
 801df54:	3b01      	subs	r3, #1
 801df56:	60bb      	str	r3, [r7, #8]
 801df58:	68bb      	ldr	r3, [r7, #8]
 801df5a:	2b00      	cmp	r3, #0
 801df5c:	d10f      	bne.n	801df7e <ee_number+0x142>
 801df5e:	68fb      	ldr	r3, [r7, #12]
 801df60:	e051      	b.n	801e006 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801df62:	68fb      	ldr	r3, [r7, #12]
 801df64:	1c5a      	adds	r2, r3, #1
 801df66:	60fa      	str	r2, [r7, #12]
 801df68:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801df6c:	701a      	strb	r2, [r3, #0]
 801df6e:	68bb      	ldr	r3, [r7, #8]
 801df70:	3b01      	subs	r3, #1
 801df72:	60bb      	str	r3, [r7, #8]
 801df74:	68bb      	ldr	r3, [r7, #8]
 801df76:	2b00      	cmp	r3, #0
 801df78:	d101      	bne.n	801df7e <ee_number+0x142>
 801df7a:	68fb      	ldr	r3, [r7, #12]
 801df7c:	e043      	b.n	801e006 <ee_number+0x1ca>
 801df7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801df80:	1e5a      	subs	r2, r3, #1
 801df82:	66ba      	str	r2, [r7, #104]	; 0x68
 801df84:	2b00      	cmp	r3, #0
 801df86:	dcec      	bgt.n	801df62 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801df88:	e00c      	b.n	801dfa4 <ee_number+0x168>
 801df8a:	68fb      	ldr	r3, [r7, #12]
 801df8c:	1c5a      	adds	r2, r3, #1
 801df8e:	60fa      	str	r2, [r7, #12]
 801df90:	2230      	movs	r2, #48	; 0x30
 801df92:	701a      	strb	r2, [r3, #0]
 801df94:	68bb      	ldr	r3, [r7, #8]
 801df96:	3b01      	subs	r3, #1
 801df98:	60bb      	str	r3, [r7, #8]
 801df9a:	68bb      	ldr	r3, [r7, #8]
 801df9c:	2b00      	cmp	r3, #0
 801df9e:	d101      	bne.n	801dfa4 <ee_number+0x168>
 801dfa0:	68fb      	ldr	r3, [r7, #12]
 801dfa2:	e030      	b.n	801e006 <ee_number+0x1ca>
 801dfa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dfa6:	1e5a      	subs	r2, r3, #1
 801dfa8:	66fa      	str	r2, [r7, #108]	; 0x6c
 801dfaa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801dfac:	429a      	cmp	r2, r3
 801dfae:	dbec      	blt.n	801df8a <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801dfb0:	e010      	b.n	801dfd4 <ee_number+0x198>
 801dfb2:	68fb      	ldr	r3, [r7, #12]
 801dfb4:	1c5a      	adds	r2, r3, #1
 801dfb6:	60fa      	str	r2, [r7, #12]
 801dfb8:	f107 0110 	add.w	r1, r7, #16
 801dfbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801dfbe:	440a      	add	r2, r1
 801dfc0:	7812      	ldrb	r2, [r2, #0]
 801dfc2:	701a      	strb	r2, [r3, #0]
 801dfc4:	68bb      	ldr	r3, [r7, #8]
 801dfc6:	3b01      	subs	r3, #1
 801dfc8:	60bb      	str	r3, [r7, #8]
 801dfca:	68bb      	ldr	r3, [r7, #8]
 801dfcc:	2b00      	cmp	r3, #0
 801dfce:	d101      	bne.n	801dfd4 <ee_number+0x198>
 801dfd0:	68fb      	ldr	r3, [r7, #12]
 801dfd2:	e018      	b.n	801e006 <ee_number+0x1ca>
 801dfd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dfd6:	1e5a      	subs	r2, r3, #1
 801dfd8:	657a      	str	r2, [r7, #84]	; 0x54
 801dfda:	2b00      	cmp	r3, #0
 801dfdc:	dce9      	bgt.n	801dfb2 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801dfde:	e00c      	b.n	801dffa <ee_number+0x1be>
 801dfe0:	68fb      	ldr	r3, [r7, #12]
 801dfe2:	1c5a      	adds	r2, r3, #1
 801dfe4:	60fa      	str	r2, [r7, #12]
 801dfe6:	2220      	movs	r2, #32
 801dfe8:	701a      	strb	r2, [r3, #0]
 801dfea:	68bb      	ldr	r3, [r7, #8]
 801dfec:	3b01      	subs	r3, #1
 801dfee:	60bb      	str	r3, [r7, #8]
 801dff0:	68bb      	ldr	r3, [r7, #8]
 801dff2:	2b00      	cmp	r3, #0
 801dff4:	d101      	bne.n	801dffa <ee_number+0x1be>
 801dff6:	68fb      	ldr	r3, [r7, #12]
 801dff8:	e005      	b.n	801e006 <ee_number+0x1ca>
 801dffa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801dffc:	1e5a      	subs	r2, r3, #1
 801dffe:	66ba      	str	r2, [r7, #104]	; 0x68
 801e000:	2b00      	cmp	r3, #0
 801e002:	dced      	bgt.n	801dfe0 <ee_number+0x1a4>

  return str;
 801e004:	68fb      	ldr	r3, [r7, #12]
}
 801e006:	4618      	mov	r0, r3
 801e008:	3764      	adds	r7, #100	; 0x64
 801e00a:	46bd      	mov	sp, r7
 801e00c:	bc80      	pop	{r7}
 801e00e:	4770      	bx	lr
 801e010:	20000144 	.word	0x20000144
 801e014:	20000148 	.word	0x20000148

0801e018 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801e018:	b580      	push	{r7, lr}
 801e01a:	b092      	sub	sp, #72	; 0x48
 801e01c:	af04      	add	r7, sp, #16
 801e01e:	60f8      	str	r0, [r7, #12]
 801e020:	60b9      	str	r1, [r7, #8]
 801e022:	607a      	str	r2, [r7, #4]
 801e024:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801e026:	68bb      	ldr	r3, [r7, #8]
 801e028:	2b00      	cmp	r3, #0
 801e02a:	dc01      	bgt.n	801e030 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801e02c:	2300      	movs	r3, #0
 801e02e:	e142      	b.n	801e2b6 <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801e030:	68fb      	ldr	r3, [r7, #12]
 801e032:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e034:	e12a      	b.n	801e28c <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801e036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e038:	68fb      	ldr	r3, [r7, #12]
 801e03a:	1ad2      	subs	r2, r2, r3
 801e03c:	68bb      	ldr	r3, [r7, #8]
 801e03e:	3b01      	subs	r3, #1
 801e040:	429a      	cmp	r2, r3
 801e042:	f280 8131 	bge.w	801e2a8 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 801e046:	687b      	ldr	r3, [r7, #4]
 801e048:	781b      	ldrb	r3, [r3, #0]
 801e04a:	2b25      	cmp	r3, #37	; 0x25
 801e04c:	d006      	beq.n	801e05c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801e04e:	687a      	ldr	r2, [r7, #4]
 801e050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e052:	1c59      	adds	r1, r3, #1
 801e054:	62f9      	str	r1, [r7, #44]	; 0x2c
 801e056:	7812      	ldrb	r2, [r2, #0]
 801e058:	701a      	strb	r2, [r3, #0]
      continue;
 801e05a:	e114      	b.n	801e286 <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 801e05c:	2300      	movs	r3, #0
 801e05e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801e060:	687b      	ldr	r3, [r7, #4]
 801e062:	3301      	adds	r3, #1
 801e064:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801e066:	687b      	ldr	r3, [r7, #4]
 801e068:	781b      	ldrb	r3, [r3, #0]
 801e06a:	2b30      	cmp	r3, #48	; 0x30
 801e06c:	d103      	bne.n	801e076 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801e06e:	6a3b      	ldr	r3, [r7, #32]
 801e070:	f043 0301 	orr.w	r3, r3, #1
 801e074:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801e076:	f04f 33ff 	mov.w	r3, #4294967295
 801e07a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801e07c:	687b      	ldr	r3, [r7, #4]
 801e07e:	781b      	ldrb	r3, [r3, #0]
 801e080:	2b2f      	cmp	r3, #47	; 0x2f
 801e082:	d908      	bls.n	801e096 <tiny_vsnprintf_like+0x7e>
 801e084:	687b      	ldr	r3, [r7, #4]
 801e086:	781b      	ldrb	r3, [r3, #0]
 801e088:	2b39      	cmp	r3, #57	; 0x39
 801e08a:	d804      	bhi.n	801e096 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801e08c:	1d3b      	adds	r3, r7, #4
 801e08e:	4618      	mov	r0, r3
 801e090:	f7ff feae 	bl	801ddf0 <ee_skip_atoi>
 801e094:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801e096:	f04f 33ff 	mov.w	r3, #4294967295
 801e09a:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801e09c:	f04f 33ff 	mov.w	r3, #4294967295
 801e0a0:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801e0a2:	230a      	movs	r3, #10
 801e0a4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801e0a6:	687b      	ldr	r3, [r7, #4]
 801e0a8:	781b      	ldrb	r3, [r3, #0]
 801e0aa:	3b58      	subs	r3, #88	; 0x58
 801e0ac:	2b20      	cmp	r3, #32
 801e0ae:	f200 8094 	bhi.w	801e1da <tiny_vsnprintf_like+0x1c2>
 801e0b2:	a201      	add	r2, pc, #4	; (adr r2, 801e0b8 <tiny_vsnprintf_like+0xa0>)
 801e0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e0b8:	0801e1c3 	.word	0x0801e1c3
 801e0bc:	0801e1db 	.word	0x0801e1db
 801e0c0:	0801e1db 	.word	0x0801e1db
 801e0c4:	0801e1db 	.word	0x0801e1db
 801e0c8:	0801e1db 	.word	0x0801e1db
 801e0cc:	0801e1db 	.word	0x0801e1db
 801e0d0:	0801e1db 	.word	0x0801e1db
 801e0d4:	0801e1db 	.word	0x0801e1db
 801e0d8:	0801e1db 	.word	0x0801e1db
 801e0dc:	0801e1db 	.word	0x0801e1db
 801e0e0:	0801e1db 	.word	0x0801e1db
 801e0e4:	0801e147 	.word	0x0801e147
 801e0e8:	0801e1d1 	.word	0x0801e1d1
 801e0ec:	0801e1db 	.word	0x0801e1db
 801e0f0:	0801e1db 	.word	0x0801e1db
 801e0f4:	0801e1db 	.word	0x0801e1db
 801e0f8:	0801e1db 	.word	0x0801e1db
 801e0fc:	0801e1d1 	.word	0x0801e1d1
 801e100:	0801e1db 	.word	0x0801e1db
 801e104:	0801e1db 	.word	0x0801e1db
 801e108:	0801e1db 	.word	0x0801e1db
 801e10c:	0801e1db 	.word	0x0801e1db
 801e110:	0801e1db 	.word	0x0801e1db
 801e114:	0801e1db 	.word	0x0801e1db
 801e118:	0801e1db 	.word	0x0801e1db
 801e11c:	0801e1db 	.word	0x0801e1db
 801e120:	0801e1db 	.word	0x0801e1db
 801e124:	0801e167 	.word	0x0801e167
 801e128:	0801e1db 	.word	0x0801e1db
 801e12c:	0801e227 	.word	0x0801e227
 801e130:	0801e1db 	.word	0x0801e1db
 801e134:	0801e1db 	.word	0x0801e1db
 801e138:	0801e1cb 	.word	0x0801e1cb
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801e13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e13e:	1c5a      	adds	r2, r3, #1
 801e140:	62fa      	str	r2, [r7, #44]	; 0x2c
 801e142:	2220      	movs	r2, #32
 801e144:	701a      	strb	r2, [r3, #0]
 801e146:	69fb      	ldr	r3, [r7, #28]
 801e148:	3b01      	subs	r3, #1
 801e14a:	61fb      	str	r3, [r7, #28]
 801e14c:	69fb      	ldr	r3, [r7, #28]
 801e14e:	2b00      	cmp	r3, #0
 801e150:	dcf4      	bgt.n	801e13c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801e152:	683b      	ldr	r3, [r7, #0]
 801e154:	1d1a      	adds	r2, r3, #4
 801e156:	603a      	str	r2, [r7, #0]
 801e158:	6819      	ldr	r1, [r3, #0]
 801e15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e15c:	1c5a      	adds	r2, r3, #1
 801e15e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801e160:	b2ca      	uxtb	r2, r1
 801e162:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801e164:	e08f      	b.n	801e286 <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801e166:	683b      	ldr	r3, [r7, #0]
 801e168:	1d1a      	adds	r2, r3, #4
 801e16a:	603a      	str	r2, [r7, #0]
 801e16c:	681b      	ldr	r3, [r3, #0]
 801e16e:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801e170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e172:	2b00      	cmp	r3, #0
 801e174:	d101      	bne.n	801e17a <tiny_vsnprintf_like+0x162>
 801e176:	4b52      	ldr	r3, [pc, #328]	; (801e2c0 <tiny_vsnprintf_like+0x2a8>)
 801e178:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801e17a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e17c:	f7e1 fffc 	bl	8000178 <strlen>
 801e180:	4603      	mov	r3, r0
 801e182:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801e184:	e004      	b.n	801e190 <tiny_vsnprintf_like+0x178>
 801e186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e188:	1c5a      	adds	r2, r3, #1
 801e18a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801e18c:	2220      	movs	r2, #32
 801e18e:	701a      	strb	r2, [r3, #0]
 801e190:	69fb      	ldr	r3, [r7, #28]
 801e192:	1e5a      	subs	r2, r3, #1
 801e194:	61fa      	str	r2, [r7, #28]
 801e196:	693a      	ldr	r2, [r7, #16]
 801e198:	429a      	cmp	r2, r3
 801e19a:	dbf4      	blt.n	801e186 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801e19c:	2300      	movs	r3, #0
 801e19e:	62bb      	str	r3, [r7, #40]	; 0x28
 801e1a0:	e00a      	b.n	801e1b8 <tiny_vsnprintf_like+0x1a0>
 801e1a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e1a4:	1c53      	adds	r3, r2, #1
 801e1a6:	627b      	str	r3, [r7, #36]	; 0x24
 801e1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e1aa:	1c59      	adds	r1, r3, #1
 801e1ac:	62f9      	str	r1, [r7, #44]	; 0x2c
 801e1ae:	7812      	ldrb	r2, [r2, #0]
 801e1b0:	701a      	strb	r2, [r3, #0]
 801e1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e1b4:	3301      	adds	r3, #1
 801e1b6:	62bb      	str	r3, [r7, #40]	; 0x28
 801e1b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e1ba:	693b      	ldr	r3, [r7, #16]
 801e1bc:	429a      	cmp	r2, r3
 801e1be:	dbf0      	blt.n	801e1a2 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801e1c0:	e061      	b.n	801e286 <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801e1c2:	6a3b      	ldr	r3, [r7, #32]
 801e1c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e1c8:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801e1ca:	2310      	movs	r3, #16
 801e1cc:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801e1ce:	e02d      	b.n	801e22c <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801e1d0:	6a3b      	ldr	r3, [r7, #32]
 801e1d2:	f043 0302 	orr.w	r3, r3, #2
 801e1d6:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801e1d8:	e025      	b.n	801e226 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801e1da:	687b      	ldr	r3, [r7, #4]
 801e1dc:	781b      	ldrb	r3, [r3, #0]
 801e1de:	2b25      	cmp	r3, #37	; 0x25
 801e1e0:	d004      	beq.n	801e1ec <tiny_vsnprintf_like+0x1d4>
 801e1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e1e4:	1c5a      	adds	r2, r3, #1
 801e1e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 801e1e8:	2225      	movs	r2, #37	; 0x25
 801e1ea:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801e1ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e1ee:	68fb      	ldr	r3, [r7, #12]
 801e1f0:	1ad2      	subs	r2, r2, r3
 801e1f2:	68bb      	ldr	r3, [r7, #8]
 801e1f4:	3b01      	subs	r3, #1
 801e1f6:	429a      	cmp	r2, r3
 801e1f8:	da17      	bge.n	801e22a <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801e1fa:	687b      	ldr	r3, [r7, #4]
 801e1fc:	781b      	ldrb	r3, [r3, #0]
 801e1fe:	2b00      	cmp	r3, #0
 801e200:	d006      	beq.n	801e210 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801e202:	687a      	ldr	r2, [r7, #4]
 801e204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e206:	1c59      	adds	r1, r3, #1
 801e208:	62f9      	str	r1, [r7, #44]	; 0x2c
 801e20a:	7812      	ldrb	r2, [r2, #0]
 801e20c:	701a      	strb	r2, [r3, #0]
 801e20e:	e002      	b.n	801e216 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801e210:	687b      	ldr	r3, [r7, #4]
 801e212:	3b01      	subs	r3, #1
 801e214:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801e216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e218:	68fb      	ldr	r3, [r7, #12]
 801e21a:	1ad2      	subs	r2, r2, r3
 801e21c:	68bb      	ldr	r3, [r7, #8]
 801e21e:	3b01      	subs	r3, #1
 801e220:	429a      	cmp	r2, r3
 801e222:	db2f      	blt.n	801e284 <tiny_vsnprintf_like+0x26c>
 801e224:	e002      	b.n	801e22c <tiny_vsnprintf_like+0x214>
        break;
 801e226:	bf00      	nop
 801e228:	e000      	b.n	801e22c <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801e22a:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801e22c:	697b      	ldr	r3, [r7, #20]
 801e22e:	2b6c      	cmp	r3, #108	; 0x6c
 801e230:	d105      	bne.n	801e23e <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801e232:	683b      	ldr	r3, [r7, #0]
 801e234:	1d1a      	adds	r2, r3, #4
 801e236:	603a      	str	r2, [r7, #0]
 801e238:	681b      	ldr	r3, [r3, #0]
 801e23a:	637b      	str	r3, [r7, #52]	; 0x34
 801e23c:	e00f      	b.n	801e25e <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801e23e:	6a3b      	ldr	r3, [r7, #32]
 801e240:	f003 0302 	and.w	r3, r3, #2
 801e244:	2b00      	cmp	r3, #0
 801e246:	d005      	beq.n	801e254 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801e248:	683b      	ldr	r3, [r7, #0]
 801e24a:	1d1a      	adds	r2, r3, #4
 801e24c:	603a      	str	r2, [r7, #0]
 801e24e:	681b      	ldr	r3, [r3, #0]
 801e250:	637b      	str	r3, [r7, #52]	; 0x34
 801e252:	e004      	b.n	801e25e <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801e254:	683b      	ldr	r3, [r7, #0]
 801e256:	1d1a      	adds	r2, r3, #4
 801e258:	603a      	str	r2, [r7, #0]
 801e25a:	681b      	ldr	r3, [r3, #0]
 801e25c:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801e25e:	68bb      	ldr	r3, [r7, #8]
 801e260:	1e5a      	subs	r2, r3, #1
 801e262:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e264:	68fb      	ldr	r3, [r7, #12]
 801e266:	1acb      	subs	r3, r1, r3
 801e268:	1ad1      	subs	r1, r2, r3
 801e26a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e26c:	6a3b      	ldr	r3, [r7, #32]
 801e26e:	9302      	str	r3, [sp, #8]
 801e270:	69bb      	ldr	r3, [r7, #24]
 801e272:	9301      	str	r3, [sp, #4]
 801e274:	69fb      	ldr	r3, [r7, #28]
 801e276:	9300      	str	r3, [sp, #0]
 801e278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e27a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801e27c:	f7ff fdde 	bl	801de3c <ee_number>
 801e280:	62f8      	str	r0, [r7, #44]	; 0x2c
 801e282:	e000      	b.n	801e286 <tiny_vsnprintf_like+0x26e>
        continue;
 801e284:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801e286:	687b      	ldr	r3, [r7, #4]
 801e288:	3301      	adds	r3, #1
 801e28a:	607b      	str	r3, [r7, #4]
 801e28c:	687b      	ldr	r3, [r7, #4]
 801e28e:	781b      	ldrb	r3, [r3, #0]
 801e290:	2b00      	cmp	r3, #0
 801e292:	f47f aed0 	bne.w	801e036 <tiny_vsnprintf_like+0x1e>
 801e296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e298:	68fb      	ldr	r3, [r7, #12]
 801e29a:	1ad2      	subs	r2, r2, r3
 801e29c:	68bb      	ldr	r3, [r7, #8]
 801e29e:	3b01      	subs	r3, #1
 801e2a0:	429a      	cmp	r2, r3
 801e2a2:	f6bf aec8 	bge.w	801e036 <tiny_vsnprintf_like+0x1e>
 801e2a6:	e000      	b.n	801e2aa <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801e2a8:	bf00      	nop
  }

  *str = '\0';
 801e2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2ac:	2200      	movs	r2, #0
 801e2ae:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801e2b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e2b2:	68fb      	ldr	r3, [r7, #12]
 801e2b4:	1ad3      	subs	r3, r2, r3
}
 801e2b6:	4618      	mov	r0, r3
 801e2b8:	3738      	adds	r7, #56	; 0x38
 801e2ba:	46bd      	mov	sp, r7
 801e2bc:	bd80      	pop	{r7, pc}
 801e2be:	bf00      	nop
 801e2c0:	0801f764 	.word	0x0801f764

0801e2c4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801e2c4:	b580      	push	{r7, lr}
 801e2c6:	b090      	sub	sp, #64	; 0x40
 801e2c8:	af00      	add	r7, sp, #0
 801e2ca:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801e2cc:	4b73      	ldr	r3, [pc, #460]	; (801e49c <UTIL_SEQ_Run+0x1d8>)
 801e2ce:	681b      	ldr	r3, [r3, #0]
 801e2d0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801e2d2:	4b72      	ldr	r3, [pc, #456]	; (801e49c <UTIL_SEQ_Run+0x1d8>)
 801e2d4:	681a      	ldr	r2, [r3, #0]
 801e2d6:	687b      	ldr	r3, [r7, #4]
 801e2d8:	4013      	ands	r3, r2
 801e2da:	4a70      	ldr	r2, [pc, #448]	; (801e49c <UTIL_SEQ_Run+0x1d8>)
 801e2dc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801e2de:	4b70      	ldr	r3, [pc, #448]	; (801e4a0 <UTIL_SEQ_Run+0x1dc>)
 801e2e0:	681b      	ldr	r3, [r3, #0]
 801e2e2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801e2e4:	4b6f      	ldr	r3, [pc, #444]	; (801e4a4 <UTIL_SEQ_Run+0x1e0>)
 801e2e6:	681b      	ldr	r3, [r3, #0]
 801e2e8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801e2ea:	4b6f      	ldr	r3, [pc, #444]	; (801e4a8 <UTIL_SEQ_Run+0x1e4>)
 801e2ec:	681b      	ldr	r3, [r3, #0]
 801e2ee:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801e2f0:	4b6e      	ldr	r3, [pc, #440]	; (801e4ac <UTIL_SEQ_Run+0x1e8>)
 801e2f2:	681b      	ldr	r3, [r3, #0]
 801e2f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801e2f6:	e08d      	b.n	801e414 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801e2f8:	2300      	movs	r3, #0
 801e2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801e2fc:	e002      	b.n	801e304 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801e2fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e300:	3301      	adds	r3, #1
 801e302:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801e304:	4a6a      	ldr	r2, [pc, #424]	; (801e4b0 <UTIL_SEQ_Run+0x1ec>)
 801e306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e308:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801e30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e30e:	401a      	ands	r2, r3
 801e310:	4b62      	ldr	r3, [pc, #392]	; (801e49c <UTIL_SEQ_Run+0x1d8>)
 801e312:	681b      	ldr	r3, [r3, #0]
 801e314:	4013      	ands	r3, r2
 801e316:	2b00      	cmp	r3, #0
 801e318:	d0f1      	beq.n	801e2fe <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801e31a:	4a65      	ldr	r2, [pc, #404]	; (801e4b0 <UTIL_SEQ_Run+0x1ec>)
 801e31c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e31e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801e322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e324:	401a      	ands	r2, r3
 801e326:	4b5d      	ldr	r3, [pc, #372]	; (801e49c <UTIL_SEQ_Run+0x1d8>)
 801e328:	681b      	ldr	r3, [r3, #0]
 801e32a:	4013      	ands	r3, r2
 801e32c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801e32e:	4a60      	ldr	r2, [pc, #384]	; (801e4b0 <UTIL_SEQ_Run+0x1ec>)
 801e330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e332:	00db      	lsls	r3, r3, #3
 801e334:	4413      	add	r3, r2
 801e336:	685a      	ldr	r2, [r3, #4]
 801e338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e33a:	4013      	ands	r3, r2
 801e33c:	2b00      	cmp	r3, #0
 801e33e:	d106      	bne.n	801e34e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801e340:	4a5b      	ldr	r2, [pc, #364]	; (801e4b0 <UTIL_SEQ_Run+0x1ec>)
 801e342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e344:	00db      	lsls	r3, r3, #3
 801e346:	4413      	add	r3, r2
 801e348:	f04f 32ff 	mov.w	r2, #4294967295
 801e34c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801e34e:	4a58      	ldr	r2, [pc, #352]	; (801e4b0 <UTIL_SEQ_Run+0x1ec>)
 801e350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e352:	00db      	lsls	r3, r3, #3
 801e354:	4413      	add	r3, r2
 801e356:	685a      	ldr	r2, [r3, #4]
 801e358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e35a:	4013      	ands	r3, r2
 801e35c:	4618      	mov	r0, r3
 801e35e:	f000 f907 	bl	801e570 <SEQ_BitPosition>
 801e362:	4603      	mov	r3, r0
 801e364:	461a      	mov	r2, r3
 801e366:	4b53      	ldr	r3, [pc, #332]	; (801e4b4 <UTIL_SEQ_Run+0x1f0>)
 801e368:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801e36a:	4a51      	ldr	r2, [pc, #324]	; (801e4b0 <UTIL_SEQ_Run+0x1ec>)
 801e36c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e36e:	00db      	lsls	r3, r3, #3
 801e370:	4413      	add	r3, r2
 801e372:	685a      	ldr	r2, [r3, #4]
 801e374:	4b4f      	ldr	r3, [pc, #316]	; (801e4b4 <UTIL_SEQ_Run+0x1f0>)
 801e376:	681b      	ldr	r3, [r3, #0]
 801e378:	2101      	movs	r1, #1
 801e37a:	fa01 f303 	lsl.w	r3, r1, r3
 801e37e:	43db      	mvns	r3, r3
 801e380:	401a      	ands	r2, r3
 801e382:	494b      	ldr	r1, [pc, #300]	; (801e4b0 <UTIL_SEQ_Run+0x1ec>)
 801e384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e386:	00db      	lsls	r3, r3, #3
 801e388:	440b      	add	r3, r1
 801e38a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e38c:	f3ef 8310 	mrs	r3, PRIMASK
 801e390:	61bb      	str	r3, [r7, #24]
  return(result);
 801e392:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801e394:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801e396:	b672      	cpsid	i
}
 801e398:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801e39a:	4b46      	ldr	r3, [pc, #280]	; (801e4b4 <UTIL_SEQ_Run+0x1f0>)
 801e39c:	681b      	ldr	r3, [r3, #0]
 801e39e:	2201      	movs	r2, #1
 801e3a0:	fa02 f303 	lsl.w	r3, r2, r3
 801e3a4:	43da      	mvns	r2, r3
 801e3a6:	4b3e      	ldr	r3, [pc, #248]	; (801e4a0 <UTIL_SEQ_Run+0x1dc>)
 801e3a8:	681b      	ldr	r3, [r3, #0]
 801e3aa:	4013      	ands	r3, r2
 801e3ac:	4a3c      	ldr	r2, [pc, #240]	; (801e4a0 <UTIL_SEQ_Run+0x1dc>)
 801e3ae:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801e3b0:	2301      	movs	r3, #1
 801e3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801e3b4:	e013      	b.n	801e3de <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801e3b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e3b8:	3b01      	subs	r3, #1
 801e3ba:	4a3d      	ldr	r2, [pc, #244]	; (801e4b0 <UTIL_SEQ_Run+0x1ec>)
 801e3bc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801e3c0:	4b3c      	ldr	r3, [pc, #240]	; (801e4b4 <UTIL_SEQ_Run+0x1f0>)
 801e3c2:	681b      	ldr	r3, [r3, #0]
 801e3c4:	2201      	movs	r2, #1
 801e3c6:	fa02 f303 	lsl.w	r3, r2, r3
 801e3ca:	43da      	mvns	r2, r3
 801e3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e3ce:	3b01      	subs	r3, #1
 801e3d0:	400a      	ands	r2, r1
 801e3d2:	4937      	ldr	r1, [pc, #220]	; (801e4b0 <UTIL_SEQ_Run+0x1ec>)
 801e3d4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801e3d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e3da:	3b01      	subs	r3, #1
 801e3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 801e3de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e3e0:	2b00      	cmp	r3, #0
 801e3e2:	d1e8      	bne.n	801e3b6 <UTIL_SEQ_Run+0xf2>
 801e3e4:	6a3b      	ldr	r3, [r7, #32]
 801e3e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e3e8:	697b      	ldr	r3, [r7, #20]
 801e3ea:	f383 8810 	msr	PRIMASK, r3
}
 801e3ee:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801e3f0:	4b30      	ldr	r3, [pc, #192]	; (801e4b4 <UTIL_SEQ_Run+0x1f0>)
 801e3f2:	681b      	ldr	r3, [r3, #0]
 801e3f4:	4a30      	ldr	r2, [pc, #192]	; (801e4b8 <UTIL_SEQ_Run+0x1f4>)
 801e3f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e3fa:	4798      	blx	r3

    local_taskset = TaskSet;
 801e3fc:	4b28      	ldr	r3, [pc, #160]	; (801e4a0 <UTIL_SEQ_Run+0x1dc>)
 801e3fe:	681b      	ldr	r3, [r3, #0]
 801e400:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801e402:	4b28      	ldr	r3, [pc, #160]	; (801e4a4 <UTIL_SEQ_Run+0x1e0>)
 801e404:	681b      	ldr	r3, [r3, #0]
 801e406:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801e408:	4b27      	ldr	r3, [pc, #156]	; (801e4a8 <UTIL_SEQ_Run+0x1e4>)
 801e40a:	681b      	ldr	r3, [r3, #0]
 801e40c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801e40e:	4b27      	ldr	r3, [pc, #156]	; (801e4ac <UTIL_SEQ_Run+0x1e8>)
 801e410:	681b      	ldr	r3, [r3, #0]
 801e412:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801e414:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801e416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e418:	401a      	ands	r2, r3
 801e41a:	4b20      	ldr	r3, [pc, #128]	; (801e49c <UTIL_SEQ_Run+0x1d8>)
 801e41c:	681b      	ldr	r3, [r3, #0]
 801e41e:	4013      	ands	r3, r2
 801e420:	2b00      	cmp	r3, #0
 801e422:	d005      	beq.n	801e430 <UTIL_SEQ_Run+0x16c>
 801e424:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e428:	4013      	ands	r3, r2
 801e42a:	2b00      	cmp	r3, #0
 801e42c:	f43f af64 	beq.w	801e2f8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801e430:	4b20      	ldr	r3, [pc, #128]	; (801e4b4 <UTIL_SEQ_Run+0x1f0>)
 801e432:	f04f 32ff 	mov.w	r2, #4294967295
 801e436:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801e438:	f000 f88e 	bl	801e558 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e43c:	f3ef 8310 	mrs	r3, PRIMASK
 801e440:	613b      	str	r3, [r7, #16]
  return(result);
 801e442:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801e444:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801e446:	b672      	cpsid	i
}
 801e448:	bf00      	nop
  local_taskset = TaskSet;
 801e44a:	4b15      	ldr	r3, [pc, #84]	; (801e4a0 <UTIL_SEQ_Run+0x1dc>)
 801e44c:	681b      	ldr	r3, [r3, #0]
 801e44e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801e450:	4b14      	ldr	r3, [pc, #80]	; (801e4a4 <UTIL_SEQ_Run+0x1e0>)
 801e452:	681b      	ldr	r3, [r3, #0]
 801e454:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801e456:	4b14      	ldr	r3, [pc, #80]	; (801e4a8 <UTIL_SEQ_Run+0x1e4>)
 801e458:	681b      	ldr	r3, [r3, #0]
 801e45a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801e45c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801e45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e460:	401a      	ands	r2, r3
 801e462:	4b0e      	ldr	r3, [pc, #56]	; (801e49c <UTIL_SEQ_Run+0x1d8>)
 801e464:	681b      	ldr	r3, [r3, #0]
 801e466:	4013      	ands	r3, r2
 801e468:	2b00      	cmp	r3, #0
 801e46a:	d107      	bne.n	801e47c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801e46c:	4b0f      	ldr	r3, [pc, #60]	; (801e4ac <UTIL_SEQ_Run+0x1e8>)
 801e46e:	681a      	ldr	r2, [r3, #0]
 801e470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e472:	4013      	ands	r3, r2
 801e474:	2b00      	cmp	r3, #0
 801e476:	d101      	bne.n	801e47c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801e478:	f7e4 f912 	bl	80026a0 <UTIL_SEQ_Idle>
 801e47c:	69fb      	ldr	r3, [r7, #28]
 801e47e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e480:	68fb      	ldr	r3, [r7, #12]
 801e482:	f383 8810 	msr	PRIMASK, r3
}
 801e486:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801e488:	f000 f86c 	bl	801e564 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801e48c:	4a03      	ldr	r2, [pc, #12]	; (801e49c <UTIL_SEQ_Run+0x1d8>)
 801e48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e490:	6013      	str	r3, [r2, #0]

  return;
 801e492:	bf00      	nop
}
 801e494:	3740      	adds	r7, #64	; 0x40
 801e496:	46bd      	mov	sp, r7
 801e498:	bd80      	pop	{r7, pc}
 801e49a:	bf00      	nop
 801e49c:	20000150 	.word	0x20000150
 801e4a0:	20002464 	.word	0x20002464
 801e4a4:	20002468 	.word	0x20002468
 801e4a8:	2000014c 	.word	0x2000014c
 801e4ac:	2000246c 	.word	0x2000246c
 801e4b0:	20002484 	.word	0x20002484
 801e4b4:	20002470 	.word	0x20002470
 801e4b8:	20002474 	.word	0x20002474

0801e4bc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801e4bc:	b580      	push	{r7, lr}
 801e4be:	b088      	sub	sp, #32
 801e4c0:	af00      	add	r7, sp, #0
 801e4c2:	60f8      	str	r0, [r7, #12]
 801e4c4:	60b9      	str	r1, [r7, #8]
 801e4c6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e4c8:	f3ef 8310 	mrs	r3, PRIMASK
 801e4cc:	617b      	str	r3, [r7, #20]
  return(result);
 801e4ce:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801e4d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801e4d2:	b672      	cpsid	i
}
 801e4d4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801e4d6:	68f8      	ldr	r0, [r7, #12]
 801e4d8:	f000 f84a 	bl	801e570 <SEQ_BitPosition>
 801e4dc:	4603      	mov	r3, r0
 801e4de:	4619      	mov	r1, r3
 801e4e0:	4a06      	ldr	r2, [pc, #24]	; (801e4fc <UTIL_SEQ_RegTask+0x40>)
 801e4e2:	687b      	ldr	r3, [r7, #4]
 801e4e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801e4e8:	69fb      	ldr	r3, [r7, #28]
 801e4ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e4ec:	69bb      	ldr	r3, [r7, #24]
 801e4ee:	f383 8810 	msr	PRIMASK, r3
}
 801e4f2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801e4f4:	bf00      	nop
}
 801e4f6:	3720      	adds	r7, #32
 801e4f8:	46bd      	mov	sp, r7
 801e4fa:	bd80      	pop	{r7, pc}
 801e4fc:	20002474 	.word	0x20002474

0801e500 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801e500:	b480      	push	{r7}
 801e502:	b087      	sub	sp, #28
 801e504:	af00      	add	r7, sp, #0
 801e506:	6078      	str	r0, [r7, #4]
 801e508:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e50a:	f3ef 8310 	mrs	r3, PRIMASK
 801e50e:	60fb      	str	r3, [r7, #12]
  return(result);
 801e510:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801e512:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e514:	b672      	cpsid	i
}
 801e516:	bf00      	nop

  TaskSet |= TaskId_bm;
 801e518:	4b0d      	ldr	r3, [pc, #52]	; (801e550 <UTIL_SEQ_SetTask+0x50>)
 801e51a:	681a      	ldr	r2, [r3, #0]
 801e51c:	687b      	ldr	r3, [r7, #4]
 801e51e:	4313      	orrs	r3, r2
 801e520:	4a0b      	ldr	r2, [pc, #44]	; (801e550 <UTIL_SEQ_SetTask+0x50>)
 801e522:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801e524:	4a0b      	ldr	r2, [pc, #44]	; (801e554 <UTIL_SEQ_SetTask+0x54>)
 801e526:	683b      	ldr	r3, [r7, #0]
 801e528:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801e52c:	687b      	ldr	r3, [r7, #4]
 801e52e:	431a      	orrs	r2, r3
 801e530:	4908      	ldr	r1, [pc, #32]	; (801e554 <UTIL_SEQ_SetTask+0x54>)
 801e532:	683b      	ldr	r3, [r7, #0]
 801e534:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801e538:	697b      	ldr	r3, [r7, #20]
 801e53a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e53c:	693b      	ldr	r3, [r7, #16]
 801e53e:	f383 8810 	msr	PRIMASK, r3
}
 801e542:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801e544:	bf00      	nop
}
 801e546:	371c      	adds	r7, #28
 801e548:	46bd      	mov	sp, r7
 801e54a:	bc80      	pop	{r7}
 801e54c:	4770      	bx	lr
 801e54e:	bf00      	nop
 801e550:	20002464 	.word	0x20002464
 801e554:	20002484 	.word	0x20002484

0801e558 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801e558:	b480      	push	{r7}
 801e55a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801e55c:	bf00      	nop
}
 801e55e:	46bd      	mov	sp, r7
 801e560:	bc80      	pop	{r7}
 801e562:	4770      	bx	lr

0801e564 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801e564:	b480      	push	{r7}
 801e566:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801e568:	bf00      	nop
}
 801e56a:	46bd      	mov	sp, r7
 801e56c:	bc80      	pop	{r7}
 801e56e:	4770      	bx	lr

0801e570 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801e570:	b480      	push	{r7}
 801e572:	b085      	sub	sp, #20
 801e574:	af00      	add	r7, sp, #0
 801e576:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801e578:	2300      	movs	r3, #0
 801e57a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801e57c:	687b      	ldr	r3, [r7, #4]
 801e57e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801e580:	68bb      	ldr	r3, [r7, #8]
 801e582:	0c1b      	lsrs	r3, r3, #16
 801e584:	041b      	lsls	r3, r3, #16
 801e586:	2b00      	cmp	r3, #0
 801e588:	d104      	bne.n	801e594 <SEQ_BitPosition+0x24>
 801e58a:	2310      	movs	r3, #16
 801e58c:	73fb      	strb	r3, [r7, #15]
 801e58e:	68bb      	ldr	r3, [r7, #8]
 801e590:	041b      	lsls	r3, r3, #16
 801e592:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801e594:	68bb      	ldr	r3, [r7, #8]
 801e596:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801e59a:	2b00      	cmp	r3, #0
 801e59c:	d105      	bne.n	801e5aa <SEQ_BitPosition+0x3a>
 801e59e:	7bfb      	ldrb	r3, [r7, #15]
 801e5a0:	3308      	adds	r3, #8
 801e5a2:	73fb      	strb	r3, [r7, #15]
 801e5a4:	68bb      	ldr	r3, [r7, #8]
 801e5a6:	021b      	lsls	r3, r3, #8
 801e5a8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801e5aa:	68bb      	ldr	r3, [r7, #8]
 801e5ac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801e5b0:	2b00      	cmp	r3, #0
 801e5b2:	d105      	bne.n	801e5c0 <SEQ_BitPosition+0x50>
 801e5b4:	7bfb      	ldrb	r3, [r7, #15]
 801e5b6:	3304      	adds	r3, #4
 801e5b8:	73fb      	strb	r3, [r7, #15]
 801e5ba:	68bb      	ldr	r3, [r7, #8]
 801e5bc:	011b      	lsls	r3, r3, #4
 801e5be:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801e5c0:	68bb      	ldr	r3, [r7, #8]
 801e5c2:	0f1b      	lsrs	r3, r3, #28
 801e5c4:	4a06      	ldr	r2, [pc, #24]	; (801e5e0 <SEQ_BitPosition+0x70>)
 801e5c6:	5cd2      	ldrb	r2, [r2, r3]
 801e5c8:	7bfb      	ldrb	r3, [r7, #15]
 801e5ca:	4413      	add	r3, r2
 801e5cc:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801e5ce:	7bfb      	ldrb	r3, [r7, #15]
 801e5d0:	f1c3 031f 	rsb	r3, r3, #31
 801e5d4:	b2db      	uxtb	r3, r3
}
 801e5d6:	4618      	mov	r0, r3
 801e5d8:	3714      	adds	r7, #20
 801e5da:	46bd      	mov	sp, r7
 801e5dc:	bc80      	pop	{r7}
 801e5de:	4770      	bx	lr
 801e5e0:	0801fd1c 	.word	0x0801fd1c

0801e5e4 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801e5e4:	b580      	push	{r7, lr}
 801e5e6:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801e5e8:	4b04      	ldr	r3, [pc, #16]	; (801e5fc <UTIL_TIMER_Init+0x18>)
 801e5ea:	2200      	movs	r2, #0
 801e5ec:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801e5ee:	4b04      	ldr	r3, [pc, #16]	; (801e600 <UTIL_TIMER_Init+0x1c>)
 801e5f0:	681b      	ldr	r3, [r3, #0]
 801e5f2:	4798      	blx	r3
 801e5f4:	4603      	mov	r3, r0
}
 801e5f6:	4618      	mov	r0, r3
 801e5f8:	bd80      	pop	{r7, pc}
 801e5fa:	bf00      	nop
 801e5fc:	2000248c 	.word	0x2000248c
 801e600:	0801f824 	.word	0x0801f824

0801e604 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801e604:	b580      	push	{r7, lr}
 801e606:	b084      	sub	sp, #16
 801e608:	af00      	add	r7, sp, #0
 801e60a:	60f8      	str	r0, [r7, #12]
 801e60c:	60b9      	str	r1, [r7, #8]
 801e60e:	603b      	str	r3, [r7, #0]
 801e610:	4613      	mov	r3, r2
 801e612:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801e614:	68fb      	ldr	r3, [r7, #12]
 801e616:	2b00      	cmp	r3, #0
 801e618:	d023      	beq.n	801e662 <UTIL_TIMER_Create+0x5e>
 801e61a:	683b      	ldr	r3, [r7, #0]
 801e61c:	2b00      	cmp	r3, #0
 801e61e:	d020      	beq.n	801e662 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801e620:	68fb      	ldr	r3, [r7, #12]
 801e622:	2200      	movs	r2, #0
 801e624:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801e626:	4b11      	ldr	r3, [pc, #68]	; (801e66c <UTIL_TIMER_Create+0x68>)
 801e628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e62a:	68b8      	ldr	r0, [r7, #8]
 801e62c:	4798      	blx	r3
 801e62e:	4602      	mov	r2, r0
 801e630:	68fb      	ldr	r3, [r7, #12]
 801e632:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801e634:	68fb      	ldr	r3, [r7, #12]
 801e636:	2200      	movs	r2, #0
 801e638:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801e63a:	68fb      	ldr	r3, [r7, #12]
 801e63c:	2200      	movs	r2, #0
 801e63e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801e640:	68fb      	ldr	r3, [r7, #12]
 801e642:	2200      	movs	r2, #0
 801e644:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801e646:	68fb      	ldr	r3, [r7, #12]
 801e648:	683a      	ldr	r2, [r7, #0]
 801e64a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801e64c:	68fb      	ldr	r3, [r7, #12]
 801e64e:	69ba      	ldr	r2, [r7, #24]
 801e650:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801e652:	68fb      	ldr	r3, [r7, #12]
 801e654:	79fa      	ldrb	r2, [r7, #7]
 801e656:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801e658:	68fb      	ldr	r3, [r7, #12]
 801e65a:	2200      	movs	r2, #0
 801e65c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801e65e:	2300      	movs	r3, #0
 801e660:	e000      	b.n	801e664 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801e662:	2301      	movs	r3, #1
  }
}
 801e664:	4618      	mov	r0, r3
 801e666:	3710      	adds	r7, #16
 801e668:	46bd      	mov	sp, r7
 801e66a:	bd80      	pop	{r7, pc}
 801e66c:	0801f824 	.word	0x0801f824

0801e670 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801e670:	b580      	push	{r7, lr}
 801e672:	b08a      	sub	sp, #40	; 0x28
 801e674:	af00      	add	r7, sp, #0
 801e676:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e678:	2300      	movs	r3, #0
 801e67a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801e67e:	687b      	ldr	r3, [r7, #4]
 801e680:	2b00      	cmp	r3, #0
 801e682:	d056      	beq.n	801e732 <UTIL_TIMER_Start+0xc2>
 801e684:	6878      	ldr	r0, [r7, #4]
 801e686:	f000 f9a9 	bl	801e9dc <TimerExists>
 801e68a:	4603      	mov	r3, r0
 801e68c:	f083 0301 	eor.w	r3, r3, #1
 801e690:	b2db      	uxtb	r3, r3
 801e692:	2b00      	cmp	r3, #0
 801e694:	d04d      	beq.n	801e732 <UTIL_TIMER_Start+0xc2>
 801e696:	687b      	ldr	r3, [r7, #4]
 801e698:	7a5b      	ldrb	r3, [r3, #9]
 801e69a:	2b00      	cmp	r3, #0
 801e69c:	d149      	bne.n	801e732 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e69e:	f3ef 8310 	mrs	r3, PRIMASK
 801e6a2:	613b      	str	r3, [r7, #16]
  return(result);
 801e6a4:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e6a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801e6a8:	b672      	cpsid	i
}
 801e6aa:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801e6ac:	687b      	ldr	r3, [r7, #4]
 801e6ae:	685b      	ldr	r3, [r3, #4]
 801e6b0:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801e6b2:	4b24      	ldr	r3, [pc, #144]	; (801e744 <UTIL_TIMER_Start+0xd4>)
 801e6b4:	6a1b      	ldr	r3, [r3, #32]
 801e6b6:	4798      	blx	r3
 801e6b8:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801e6ba:	6a3a      	ldr	r2, [r7, #32]
 801e6bc:	69bb      	ldr	r3, [r7, #24]
 801e6be:	429a      	cmp	r2, r3
 801e6c0:	d201      	bcs.n	801e6c6 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801e6c2:	69bb      	ldr	r3, [r7, #24]
 801e6c4:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801e6c6:	687b      	ldr	r3, [r7, #4]
 801e6c8:	6a3a      	ldr	r2, [r7, #32]
 801e6ca:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801e6cc:	687b      	ldr	r3, [r7, #4]
 801e6ce:	2200      	movs	r2, #0
 801e6d0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801e6d2:	687b      	ldr	r3, [r7, #4]
 801e6d4:	2201      	movs	r2, #1
 801e6d6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801e6d8:	687b      	ldr	r3, [r7, #4]
 801e6da:	2200      	movs	r2, #0
 801e6dc:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801e6de:	4b1a      	ldr	r3, [pc, #104]	; (801e748 <UTIL_TIMER_Start+0xd8>)
 801e6e0:	681b      	ldr	r3, [r3, #0]
 801e6e2:	2b00      	cmp	r3, #0
 801e6e4:	d106      	bne.n	801e6f4 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801e6e6:	4b17      	ldr	r3, [pc, #92]	; (801e744 <UTIL_TIMER_Start+0xd4>)
 801e6e8:	691b      	ldr	r3, [r3, #16]
 801e6ea:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801e6ec:	6878      	ldr	r0, [r7, #4]
 801e6ee:	f000 f9eb 	bl	801eac8 <TimerInsertNewHeadTimer>
 801e6f2:	e017      	b.n	801e724 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801e6f4:	4b13      	ldr	r3, [pc, #76]	; (801e744 <UTIL_TIMER_Start+0xd4>)
 801e6f6:	699b      	ldr	r3, [r3, #24]
 801e6f8:	4798      	blx	r3
 801e6fa:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801e6fc:	687b      	ldr	r3, [r7, #4]
 801e6fe:	681a      	ldr	r2, [r3, #0]
 801e700:	697b      	ldr	r3, [r7, #20]
 801e702:	441a      	add	r2, r3
 801e704:	687b      	ldr	r3, [r7, #4]
 801e706:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801e708:	687b      	ldr	r3, [r7, #4]
 801e70a:	681a      	ldr	r2, [r3, #0]
 801e70c:	4b0e      	ldr	r3, [pc, #56]	; (801e748 <UTIL_TIMER_Start+0xd8>)
 801e70e:	681b      	ldr	r3, [r3, #0]
 801e710:	681b      	ldr	r3, [r3, #0]
 801e712:	429a      	cmp	r2, r3
 801e714:	d203      	bcs.n	801e71e <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801e716:	6878      	ldr	r0, [r7, #4]
 801e718:	f000 f9d6 	bl	801eac8 <TimerInsertNewHeadTimer>
 801e71c:	e002      	b.n	801e724 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801e71e:	6878      	ldr	r0, [r7, #4]
 801e720:	f000 f9a2 	bl	801ea68 <TimerInsertTimer>
 801e724:	69fb      	ldr	r3, [r7, #28]
 801e726:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e728:	68fb      	ldr	r3, [r7, #12]
 801e72a:	f383 8810 	msr	PRIMASK, r3
}
 801e72e:	bf00      	nop
  {
 801e730:	e002      	b.n	801e738 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801e732:	2301      	movs	r3, #1
 801e734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801e738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801e73c:	4618      	mov	r0, r3
 801e73e:	3728      	adds	r7, #40	; 0x28
 801e740:	46bd      	mov	sp, r7
 801e742:	bd80      	pop	{r7, pc}
 801e744:	0801f824 	.word	0x0801f824
 801e748:	2000248c 	.word	0x2000248c

0801e74c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801e74c:	b580      	push	{r7, lr}
 801e74e:	b088      	sub	sp, #32
 801e750:	af00      	add	r7, sp, #0
 801e752:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e754:	2300      	movs	r3, #0
 801e756:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801e758:	687b      	ldr	r3, [r7, #4]
 801e75a:	2b00      	cmp	r3, #0
 801e75c:	d05b      	beq.n	801e816 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e75e:	f3ef 8310 	mrs	r3, PRIMASK
 801e762:	60fb      	str	r3, [r7, #12]
  return(result);
 801e764:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e766:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801e768:	b672      	cpsid	i
}
 801e76a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801e76c:	4b2d      	ldr	r3, [pc, #180]	; (801e824 <UTIL_TIMER_Stop+0xd8>)
 801e76e:	681b      	ldr	r3, [r3, #0]
 801e770:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801e772:	4b2c      	ldr	r3, [pc, #176]	; (801e824 <UTIL_TIMER_Stop+0xd8>)
 801e774:	681b      	ldr	r3, [r3, #0]
 801e776:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801e778:	687b      	ldr	r3, [r7, #4]
 801e77a:	2201      	movs	r2, #1
 801e77c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801e77e:	4b29      	ldr	r3, [pc, #164]	; (801e824 <UTIL_TIMER_Stop+0xd8>)
 801e780:	681b      	ldr	r3, [r3, #0]
 801e782:	2b00      	cmp	r3, #0
 801e784:	d041      	beq.n	801e80a <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801e786:	687b      	ldr	r3, [r7, #4]
 801e788:	2200      	movs	r2, #0
 801e78a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801e78c:	4b25      	ldr	r3, [pc, #148]	; (801e824 <UTIL_TIMER_Stop+0xd8>)
 801e78e:	681b      	ldr	r3, [r3, #0]
 801e790:	687a      	ldr	r2, [r7, #4]
 801e792:	429a      	cmp	r2, r3
 801e794:	d134      	bne.n	801e800 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801e796:	4b23      	ldr	r3, [pc, #140]	; (801e824 <UTIL_TIMER_Stop+0xd8>)
 801e798:	681b      	ldr	r3, [r3, #0]
 801e79a:	2200      	movs	r2, #0
 801e79c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801e79e:	4b21      	ldr	r3, [pc, #132]	; (801e824 <UTIL_TIMER_Stop+0xd8>)
 801e7a0:	681b      	ldr	r3, [r3, #0]
 801e7a2:	695b      	ldr	r3, [r3, #20]
 801e7a4:	2b00      	cmp	r3, #0
 801e7a6:	d00a      	beq.n	801e7be <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801e7a8:	4b1e      	ldr	r3, [pc, #120]	; (801e824 <UTIL_TIMER_Stop+0xd8>)
 801e7aa:	681b      	ldr	r3, [r3, #0]
 801e7ac:	695b      	ldr	r3, [r3, #20]
 801e7ae:	4a1d      	ldr	r2, [pc, #116]	; (801e824 <UTIL_TIMER_Stop+0xd8>)
 801e7b0:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801e7b2:	4b1c      	ldr	r3, [pc, #112]	; (801e824 <UTIL_TIMER_Stop+0xd8>)
 801e7b4:	681b      	ldr	r3, [r3, #0]
 801e7b6:	4618      	mov	r0, r3
 801e7b8:	f000 f92c 	bl	801ea14 <TimerSetTimeout>
 801e7bc:	e023      	b.n	801e806 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801e7be:	4b1a      	ldr	r3, [pc, #104]	; (801e828 <UTIL_TIMER_Stop+0xdc>)
 801e7c0:	68db      	ldr	r3, [r3, #12]
 801e7c2:	4798      	blx	r3
            TimerListHead = NULL;
 801e7c4:	4b17      	ldr	r3, [pc, #92]	; (801e824 <UTIL_TIMER_Stop+0xd8>)
 801e7c6:	2200      	movs	r2, #0
 801e7c8:	601a      	str	r2, [r3, #0]
 801e7ca:	e01c      	b.n	801e806 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801e7cc:	697a      	ldr	r2, [r7, #20]
 801e7ce:	687b      	ldr	r3, [r7, #4]
 801e7d0:	429a      	cmp	r2, r3
 801e7d2:	d110      	bne.n	801e7f6 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801e7d4:	697b      	ldr	r3, [r7, #20]
 801e7d6:	695b      	ldr	r3, [r3, #20]
 801e7d8:	2b00      	cmp	r3, #0
 801e7da:	d006      	beq.n	801e7ea <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801e7dc:	697b      	ldr	r3, [r7, #20]
 801e7de:	695b      	ldr	r3, [r3, #20]
 801e7e0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801e7e2:	69bb      	ldr	r3, [r7, #24]
 801e7e4:	697a      	ldr	r2, [r7, #20]
 801e7e6:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801e7e8:	e00d      	b.n	801e806 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801e7ea:	2300      	movs	r3, #0
 801e7ec:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801e7ee:	69bb      	ldr	r3, [r7, #24]
 801e7f0:	697a      	ldr	r2, [r7, #20]
 801e7f2:	615a      	str	r2, [r3, #20]
            break;
 801e7f4:	e007      	b.n	801e806 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801e7f6:	697b      	ldr	r3, [r7, #20]
 801e7f8:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801e7fa:	697b      	ldr	r3, [r7, #20]
 801e7fc:	695b      	ldr	r3, [r3, #20]
 801e7fe:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801e800:	697b      	ldr	r3, [r7, #20]
 801e802:	2b00      	cmp	r3, #0
 801e804:	d1e2      	bne.n	801e7cc <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801e806:	2300      	movs	r3, #0
 801e808:	77fb      	strb	r3, [r7, #31]
 801e80a:	693b      	ldr	r3, [r7, #16]
 801e80c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e80e:	68bb      	ldr	r3, [r7, #8]
 801e810:	f383 8810 	msr	PRIMASK, r3
}
 801e814:	e001      	b.n	801e81a <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801e816:	2301      	movs	r3, #1
 801e818:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801e81a:	7ffb      	ldrb	r3, [r7, #31]
}
 801e81c:	4618      	mov	r0, r3
 801e81e:	3720      	adds	r7, #32
 801e820:	46bd      	mov	sp, r7
 801e822:	bd80      	pop	{r7, pc}
 801e824:	2000248c 	.word	0x2000248c
 801e828:	0801f824 	.word	0x0801f824

0801e82c <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801e82c:	b580      	push	{r7, lr}
 801e82e:	b084      	sub	sp, #16
 801e830:	af00      	add	r7, sp, #0
 801e832:	6078      	str	r0, [r7, #4]
 801e834:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e836:	2300      	movs	r3, #0
 801e838:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801e83a:	687b      	ldr	r3, [r7, #4]
 801e83c:	2b00      	cmp	r3, #0
 801e83e:	d102      	bne.n	801e846 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801e840:	2301      	movs	r3, #1
 801e842:	73fb      	strb	r3, [r7, #15]
 801e844:	e014      	b.n	801e870 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801e846:	4b0d      	ldr	r3, [pc, #52]	; (801e87c <UTIL_TIMER_SetPeriod+0x50>)
 801e848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e84a:	6838      	ldr	r0, [r7, #0]
 801e84c:	4798      	blx	r3
 801e84e:	4602      	mov	r2, r0
 801e850:	687b      	ldr	r3, [r7, #4]
 801e852:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801e854:	6878      	ldr	r0, [r7, #4]
 801e856:	f000 f8c1 	bl	801e9dc <TimerExists>
 801e85a:	4603      	mov	r3, r0
 801e85c:	2b00      	cmp	r3, #0
 801e85e:	d007      	beq.n	801e870 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801e860:	6878      	ldr	r0, [r7, #4]
 801e862:	f7ff ff73 	bl	801e74c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801e866:	6878      	ldr	r0, [r7, #4]
 801e868:	f7ff ff02 	bl	801e670 <UTIL_TIMER_Start>
 801e86c:	4603      	mov	r3, r0
 801e86e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801e870:	7bfb      	ldrb	r3, [r7, #15]
}
 801e872:	4618      	mov	r0, r3
 801e874:	3710      	adds	r7, #16
 801e876:	46bd      	mov	sp, r7
 801e878:	bd80      	pop	{r7, pc}
 801e87a:	bf00      	nop
 801e87c:	0801f824 	.word	0x0801f824

0801e880 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801e880:	b590      	push	{r4, r7, lr}
 801e882:	b089      	sub	sp, #36	; 0x24
 801e884:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e886:	f3ef 8310 	mrs	r3, PRIMASK
 801e88a:	60bb      	str	r3, [r7, #8]
  return(result);
 801e88c:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e88e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801e890:	b672      	cpsid	i
}
 801e892:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801e894:	4b38      	ldr	r3, [pc, #224]	; (801e978 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e896:	695b      	ldr	r3, [r3, #20]
 801e898:	4798      	blx	r3
 801e89a:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801e89c:	4b36      	ldr	r3, [pc, #216]	; (801e978 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e89e:	691b      	ldr	r3, [r3, #16]
 801e8a0:	4798      	blx	r3
 801e8a2:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801e8a4:	693a      	ldr	r2, [r7, #16]
 801e8a6:	697b      	ldr	r3, [r7, #20]
 801e8a8:	1ad3      	subs	r3, r2, r3
 801e8aa:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801e8ac:	4b33      	ldr	r3, [pc, #204]	; (801e97c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e8ae:	681b      	ldr	r3, [r3, #0]
 801e8b0:	2b00      	cmp	r3, #0
 801e8b2:	d037      	beq.n	801e924 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801e8b4:	4b31      	ldr	r3, [pc, #196]	; (801e97c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e8b6:	681b      	ldr	r3, [r3, #0]
 801e8b8:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801e8ba:	69fb      	ldr	r3, [r7, #28]
 801e8bc:	681b      	ldr	r3, [r3, #0]
 801e8be:	68fa      	ldr	r2, [r7, #12]
 801e8c0:	429a      	cmp	r2, r3
 801e8c2:	d206      	bcs.n	801e8d2 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801e8c4:	69fb      	ldr	r3, [r7, #28]
 801e8c6:	681a      	ldr	r2, [r3, #0]
 801e8c8:	68fb      	ldr	r3, [r7, #12]
 801e8ca:	1ad2      	subs	r2, r2, r3
 801e8cc:	69fb      	ldr	r3, [r7, #28]
 801e8ce:	601a      	str	r2, [r3, #0]
 801e8d0:	e002      	b.n	801e8d8 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801e8d2:	69fb      	ldr	r3, [r7, #28]
 801e8d4:	2200      	movs	r2, #0
 801e8d6:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801e8d8:	69fb      	ldr	r3, [r7, #28]
 801e8da:	695b      	ldr	r3, [r3, #20]
 801e8dc:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801e8de:	69fb      	ldr	r3, [r7, #28]
 801e8e0:	2b00      	cmp	r3, #0
 801e8e2:	d1ea      	bne.n	801e8ba <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801e8e4:	e01e      	b.n	801e924 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801e8e6:	4b25      	ldr	r3, [pc, #148]	; (801e97c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e8e8:	681b      	ldr	r3, [r3, #0]
 801e8ea:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801e8ec:	4b23      	ldr	r3, [pc, #140]	; (801e97c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e8ee:	681b      	ldr	r3, [r3, #0]
 801e8f0:	695b      	ldr	r3, [r3, #20]
 801e8f2:	4a22      	ldr	r2, [pc, #136]	; (801e97c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e8f4:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801e8f6:	69fb      	ldr	r3, [r7, #28]
 801e8f8:	2200      	movs	r2, #0
 801e8fa:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801e8fc:	69fb      	ldr	r3, [r7, #28]
 801e8fe:	2200      	movs	r2, #0
 801e900:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801e902:	69fb      	ldr	r3, [r7, #28]
 801e904:	68db      	ldr	r3, [r3, #12]
 801e906:	69fa      	ldr	r2, [r7, #28]
 801e908:	6912      	ldr	r2, [r2, #16]
 801e90a:	4610      	mov	r0, r2
 801e90c:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801e90e:	69fb      	ldr	r3, [r7, #28]
 801e910:	7adb      	ldrb	r3, [r3, #11]
 801e912:	2b01      	cmp	r3, #1
 801e914:	d106      	bne.n	801e924 <UTIL_TIMER_IRQ_Handler+0xa4>
 801e916:	69fb      	ldr	r3, [r7, #28]
 801e918:	7a9b      	ldrb	r3, [r3, #10]
 801e91a:	2b00      	cmp	r3, #0
 801e91c:	d102      	bne.n	801e924 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801e91e:	69f8      	ldr	r0, [r7, #28]
 801e920:	f7ff fea6 	bl	801e670 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801e924:	4b15      	ldr	r3, [pc, #84]	; (801e97c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e926:	681b      	ldr	r3, [r3, #0]
 801e928:	2b00      	cmp	r3, #0
 801e92a:	d00d      	beq.n	801e948 <UTIL_TIMER_IRQ_Handler+0xc8>
 801e92c:	4b13      	ldr	r3, [pc, #76]	; (801e97c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e92e:	681b      	ldr	r3, [r3, #0]
 801e930:	681b      	ldr	r3, [r3, #0]
 801e932:	2b00      	cmp	r3, #0
 801e934:	d0d7      	beq.n	801e8e6 <UTIL_TIMER_IRQ_Handler+0x66>
 801e936:	4b11      	ldr	r3, [pc, #68]	; (801e97c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e938:	681b      	ldr	r3, [r3, #0]
 801e93a:	681c      	ldr	r4, [r3, #0]
 801e93c:	4b0e      	ldr	r3, [pc, #56]	; (801e978 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e93e:	699b      	ldr	r3, [r3, #24]
 801e940:	4798      	blx	r3
 801e942:	4603      	mov	r3, r0
 801e944:	429c      	cmp	r4, r3
 801e946:	d3ce      	bcc.n	801e8e6 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801e948:	4b0c      	ldr	r3, [pc, #48]	; (801e97c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e94a:	681b      	ldr	r3, [r3, #0]
 801e94c:	2b00      	cmp	r3, #0
 801e94e:	d009      	beq.n	801e964 <UTIL_TIMER_IRQ_Handler+0xe4>
 801e950:	4b0a      	ldr	r3, [pc, #40]	; (801e97c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e952:	681b      	ldr	r3, [r3, #0]
 801e954:	7a1b      	ldrb	r3, [r3, #8]
 801e956:	2b00      	cmp	r3, #0
 801e958:	d104      	bne.n	801e964 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801e95a:	4b08      	ldr	r3, [pc, #32]	; (801e97c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e95c:	681b      	ldr	r3, [r3, #0]
 801e95e:	4618      	mov	r0, r3
 801e960:	f000 f858 	bl	801ea14 <TimerSetTimeout>
 801e964:	69bb      	ldr	r3, [r7, #24]
 801e966:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e968:	687b      	ldr	r3, [r7, #4]
 801e96a:	f383 8810 	msr	PRIMASK, r3
}
 801e96e:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801e970:	bf00      	nop
 801e972:	3724      	adds	r7, #36	; 0x24
 801e974:	46bd      	mov	sp, r7
 801e976:	bd90      	pop	{r4, r7, pc}
 801e978:	0801f824 	.word	0x0801f824
 801e97c:	2000248c 	.word	0x2000248c

0801e980 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801e980:	b580      	push	{r7, lr}
 801e982:	b082      	sub	sp, #8
 801e984:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801e986:	4b06      	ldr	r3, [pc, #24]	; (801e9a0 <UTIL_TIMER_GetCurrentTime+0x20>)
 801e988:	69db      	ldr	r3, [r3, #28]
 801e98a:	4798      	blx	r3
 801e98c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801e98e:	4b04      	ldr	r3, [pc, #16]	; (801e9a0 <UTIL_TIMER_GetCurrentTime+0x20>)
 801e990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e992:	6878      	ldr	r0, [r7, #4]
 801e994:	4798      	blx	r3
 801e996:	4603      	mov	r3, r0
}
 801e998:	4618      	mov	r0, r3
 801e99a:	3708      	adds	r7, #8
 801e99c:	46bd      	mov	sp, r7
 801e99e:	bd80      	pop	{r7, pc}
 801e9a0:	0801f824 	.word	0x0801f824

0801e9a4 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801e9a4:	b580      	push	{r7, lr}
 801e9a6:	b084      	sub	sp, #16
 801e9a8:	af00      	add	r7, sp, #0
 801e9aa:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801e9ac:	4b0a      	ldr	r3, [pc, #40]	; (801e9d8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e9ae:	69db      	ldr	r3, [r3, #28]
 801e9b0:	4798      	blx	r3
 801e9b2:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801e9b4:	4b08      	ldr	r3, [pc, #32]	; (801e9d8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e9b8:	6878      	ldr	r0, [r7, #4]
 801e9ba:	4798      	blx	r3
 801e9bc:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801e9be:	4b06      	ldr	r3, [pc, #24]	; (801e9d8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e9c2:	68f9      	ldr	r1, [r7, #12]
 801e9c4:	68ba      	ldr	r2, [r7, #8]
 801e9c6:	1a8a      	subs	r2, r1, r2
 801e9c8:	4610      	mov	r0, r2
 801e9ca:	4798      	blx	r3
 801e9cc:	4603      	mov	r3, r0
}
 801e9ce:	4618      	mov	r0, r3
 801e9d0:	3710      	adds	r7, #16
 801e9d2:	46bd      	mov	sp, r7
 801e9d4:	bd80      	pop	{r7, pc}
 801e9d6:	bf00      	nop
 801e9d8:	0801f824 	.word	0x0801f824

0801e9dc <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801e9dc:	b480      	push	{r7}
 801e9de:	b085      	sub	sp, #20
 801e9e0:	af00      	add	r7, sp, #0
 801e9e2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e9e4:	4b0a      	ldr	r3, [pc, #40]	; (801ea10 <TimerExists+0x34>)
 801e9e6:	681b      	ldr	r3, [r3, #0]
 801e9e8:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801e9ea:	e008      	b.n	801e9fe <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801e9ec:	68fa      	ldr	r2, [r7, #12]
 801e9ee:	687b      	ldr	r3, [r7, #4]
 801e9f0:	429a      	cmp	r2, r3
 801e9f2:	d101      	bne.n	801e9f8 <TimerExists+0x1c>
    {
      return true;
 801e9f4:	2301      	movs	r3, #1
 801e9f6:	e006      	b.n	801ea06 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801e9f8:	68fb      	ldr	r3, [r7, #12]
 801e9fa:	695b      	ldr	r3, [r3, #20]
 801e9fc:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801e9fe:	68fb      	ldr	r3, [r7, #12]
 801ea00:	2b00      	cmp	r3, #0
 801ea02:	d1f3      	bne.n	801e9ec <TimerExists+0x10>
  }
  return false;
 801ea04:	2300      	movs	r3, #0
}
 801ea06:	4618      	mov	r0, r3
 801ea08:	3714      	adds	r7, #20
 801ea0a:	46bd      	mov	sp, r7
 801ea0c:	bc80      	pop	{r7}
 801ea0e:	4770      	bx	lr
 801ea10:	2000248c 	.word	0x2000248c

0801ea14 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801ea14:	b590      	push	{r4, r7, lr}
 801ea16:	b085      	sub	sp, #20
 801ea18:	af00      	add	r7, sp, #0
 801ea1a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801ea1c:	4b11      	ldr	r3, [pc, #68]	; (801ea64 <TimerSetTimeout+0x50>)
 801ea1e:	6a1b      	ldr	r3, [r3, #32]
 801ea20:	4798      	blx	r3
 801ea22:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801ea24:	687b      	ldr	r3, [r7, #4]
 801ea26:	2201      	movs	r2, #1
 801ea28:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801ea2a:	687b      	ldr	r3, [r7, #4]
 801ea2c:	681c      	ldr	r4, [r3, #0]
 801ea2e:	4b0d      	ldr	r3, [pc, #52]	; (801ea64 <TimerSetTimeout+0x50>)
 801ea30:	699b      	ldr	r3, [r3, #24]
 801ea32:	4798      	blx	r3
 801ea34:	4602      	mov	r2, r0
 801ea36:	68fb      	ldr	r3, [r7, #12]
 801ea38:	4413      	add	r3, r2
 801ea3a:	429c      	cmp	r4, r3
 801ea3c:	d207      	bcs.n	801ea4e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801ea3e:	4b09      	ldr	r3, [pc, #36]	; (801ea64 <TimerSetTimeout+0x50>)
 801ea40:	699b      	ldr	r3, [r3, #24]
 801ea42:	4798      	blx	r3
 801ea44:	4602      	mov	r2, r0
 801ea46:	68fb      	ldr	r3, [r7, #12]
 801ea48:	441a      	add	r2, r3
 801ea4a:	687b      	ldr	r3, [r7, #4]
 801ea4c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801ea4e:	4b05      	ldr	r3, [pc, #20]	; (801ea64 <TimerSetTimeout+0x50>)
 801ea50:	689b      	ldr	r3, [r3, #8]
 801ea52:	687a      	ldr	r2, [r7, #4]
 801ea54:	6812      	ldr	r2, [r2, #0]
 801ea56:	4610      	mov	r0, r2
 801ea58:	4798      	blx	r3
}
 801ea5a:	bf00      	nop
 801ea5c:	3714      	adds	r7, #20
 801ea5e:	46bd      	mov	sp, r7
 801ea60:	bd90      	pop	{r4, r7, pc}
 801ea62:	bf00      	nop
 801ea64:	0801f824 	.word	0x0801f824

0801ea68 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801ea68:	b480      	push	{r7}
 801ea6a:	b085      	sub	sp, #20
 801ea6c:	af00      	add	r7, sp, #0
 801ea6e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801ea70:	4b14      	ldr	r3, [pc, #80]	; (801eac4 <TimerInsertTimer+0x5c>)
 801ea72:	681b      	ldr	r3, [r3, #0]
 801ea74:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801ea76:	4b13      	ldr	r3, [pc, #76]	; (801eac4 <TimerInsertTimer+0x5c>)
 801ea78:	681b      	ldr	r3, [r3, #0]
 801ea7a:	695b      	ldr	r3, [r3, #20]
 801ea7c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801ea7e:	e012      	b.n	801eaa6 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801ea80:	687b      	ldr	r3, [r7, #4]
 801ea82:	681a      	ldr	r2, [r3, #0]
 801ea84:	68bb      	ldr	r3, [r7, #8]
 801ea86:	681b      	ldr	r3, [r3, #0]
 801ea88:	429a      	cmp	r2, r3
 801ea8a:	d905      	bls.n	801ea98 <TimerInsertTimer+0x30>
    {
        cur = next;
 801ea8c:	68bb      	ldr	r3, [r7, #8]
 801ea8e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801ea90:	68bb      	ldr	r3, [r7, #8]
 801ea92:	695b      	ldr	r3, [r3, #20]
 801ea94:	60bb      	str	r3, [r7, #8]
 801ea96:	e006      	b.n	801eaa6 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801ea98:	68fb      	ldr	r3, [r7, #12]
 801ea9a:	687a      	ldr	r2, [r7, #4]
 801ea9c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801ea9e:	687b      	ldr	r3, [r7, #4]
 801eaa0:	68ba      	ldr	r2, [r7, #8]
 801eaa2:	615a      	str	r2, [r3, #20]
        return;
 801eaa4:	e009      	b.n	801eaba <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801eaa6:	68fb      	ldr	r3, [r7, #12]
 801eaa8:	695b      	ldr	r3, [r3, #20]
 801eaaa:	2b00      	cmp	r3, #0
 801eaac:	d1e8      	bne.n	801ea80 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801eaae:	68fb      	ldr	r3, [r7, #12]
 801eab0:	687a      	ldr	r2, [r7, #4]
 801eab2:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801eab4:	687b      	ldr	r3, [r7, #4]
 801eab6:	2200      	movs	r2, #0
 801eab8:	615a      	str	r2, [r3, #20]
}
 801eaba:	3714      	adds	r7, #20
 801eabc:	46bd      	mov	sp, r7
 801eabe:	bc80      	pop	{r7}
 801eac0:	4770      	bx	lr
 801eac2:	bf00      	nop
 801eac4:	2000248c 	.word	0x2000248c

0801eac8 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801eac8:	b580      	push	{r7, lr}
 801eaca:	b084      	sub	sp, #16
 801eacc:	af00      	add	r7, sp, #0
 801eace:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801ead0:	4b0b      	ldr	r3, [pc, #44]	; (801eb00 <TimerInsertNewHeadTimer+0x38>)
 801ead2:	681b      	ldr	r3, [r3, #0]
 801ead4:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801ead6:	68fb      	ldr	r3, [r7, #12]
 801ead8:	2b00      	cmp	r3, #0
 801eada:	d002      	beq.n	801eae2 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801eadc:	68fb      	ldr	r3, [r7, #12]
 801eade:	2200      	movs	r2, #0
 801eae0:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801eae2:	687b      	ldr	r3, [r7, #4]
 801eae4:	68fa      	ldr	r2, [r7, #12]
 801eae6:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801eae8:	4a05      	ldr	r2, [pc, #20]	; (801eb00 <TimerInsertNewHeadTimer+0x38>)
 801eaea:	687b      	ldr	r3, [r7, #4]
 801eaec:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801eaee:	4b04      	ldr	r3, [pc, #16]	; (801eb00 <TimerInsertNewHeadTimer+0x38>)
 801eaf0:	681b      	ldr	r3, [r3, #0]
 801eaf2:	4618      	mov	r0, r3
 801eaf4:	f7ff ff8e 	bl	801ea14 <TimerSetTimeout>
}
 801eaf8:	bf00      	nop
 801eafa:	3710      	adds	r7, #16
 801eafc:	46bd      	mov	sp, r7
 801eafe:	bd80      	pop	{r7, pc}
 801eb00:	2000248c 	.word	0x2000248c

0801eb04 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801eb04:	b580      	push	{r7, lr}
 801eb06:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801eb08:	2218      	movs	r2, #24
 801eb0a:	2100      	movs	r1, #0
 801eb0c:	4807      	ldr	r0, [pc, #28]	; (801eb2c <UTIL_ADV_TRACE_Init+0x28>)
 801eb0e:	f7fe fff6 	bl	801dafe <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801eb12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801eb16:	2100      	movs	r1, #0
 801eb18:	4805      	ldr	r0, [pc, #20]	; (801eb30 <UTIL_ADV_TRACE_Init+0x2c>)
 801eb1a:	f7fe fff0 	bl	801dafe <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801eb1e:	4b05      	ldr	r3, [pc, #20]	; (801eb34 <UTIL_ADV_TRACE_Init+0x30>)
 801eb20:	681b      	ldr	r3, [r3, #0]
 801eb22:	4805      	ldr	r0, [pc, #20]	; (801eb38 <UTIL_ADV_TRACE_Init+0x34>)
 801eb24:	4798      	blx	r3
 801eb26:	4603      	mov	r3, r0
}
 801eb28:	4618      	mov	r0, r3
 801eb2a:	bd80      	pop	{r7, pc}
 801eb2c:	20002490 	.word	0x20002490
 801eb30:	200024a8 	.word	0x200024a8
 801eb34:	0801f864 	.word	0x0801f864
 801eb38:	0801eda5 	.word	0x0801eda5

0801eb3c <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801eb3c:	b480      	push	{r7}
 801eb3e:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801eb40:	4b06      	ldr	r3, [pc, #24]	; (801eb5c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801eb42:	8a5a      	ldrh	r2, [r3, #18]
 801eb44:	4b05      	ldr	r3, [pc, #20]	; (801eb5c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801eb46:	8a1b      	ldrh	r3, [r3, #16]
 801eb48:	429a      	cmp	r2, r3
 801eb4a:	d101      	bne.n	801eb50 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801eb4c:	2301      	movs	r3, #1
 801eb4e:	e000      	b.n	801eb52 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801eb50:	2300      	movs	r3, #0
}
 801eb52:	4618      	mov	r0, r3
 801eb54:	46bd      	mov	sp, r7
 801eb56:	bc80      	pop	{r7}
 801eb58:	4770      	bx	lr
 801eb5a:	bf00      	nop
 801eb5c:	20002490 	.word	0x20002490

0801eb60 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801eb60:	b408      	push	{r3}
 801eb62:	b580      	push	{r7, lr}
 801eb64:	b08d      	sub	sp, #52	; 0x34
 801eb66:	af00      	add	r7, sp, #0
 801eb68:	60f8      	str	r0, [r7, #12]
 801eb6a:	60b9      	str	r1, [r7, #8]
 801eb6c:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801eb6e:	2300      	movs	r3, #0
 801eb70:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801eb72:	2300      	movs	r3, #0
 801eb74:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801eb76:	4b37      	ldr	r3, [pc, #220]	; (801ec54 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801eb78:	7a1b      	ldrb	r3, [r3, #8]
 801eb7a:	461a      	mov	r2, r3
 801eb7c:	68fb      	ldr	r3, [r7, #12]
 801eb7e:	4293      	cmp	r3, r2
 801eb80:	d902      	bls.n	801eb88 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801eb82:	f06f 0304 	mvn.w	r3, #4
 801eb86:	e05e      	b.n	801ec46 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801eb88:	4b32      	ldr	r3, [pc, #200]	; (801ec54 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801eb8a:	68da      	ldr	r2, [r3, #12]
 801eb8c:	68bb      	ldr	r3, [r7, #8]
 801eb8e:	4013      	ands	r3, r2
 801eb90:	68ba      	ldr	r2, [r7, #8]
 801eb92:	429a      	cmp	r2, r3
 801eb94:	d002      	beq.n	801eb9c <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801eb96:	f06f 0305 	mvn.w	r3, #5
 801eb9a:	e054      	b.n	801ec46 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801eb9c:	4b2d      	ldr	r3, [pc, #180]	; (801ec54 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801eb9e:	685b      	ldr	r3, [r3, #4]
 801eba0:	2b00      	cmp	r3, #0
 801eba2:	d00a      	beq.n	801ebba <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801eba4:	687b      	ldr	r3, [r7, #4]
 801eba6:	2b00      	cmp	r3, #0
 801eba8:	d007      	beq.n	801ebba <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801ebaa:	4b2a      	ldr	r3, [pc, #168]	; (801ec54 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801ebac:	685b      	ldr	r3, [r3, #4]
 801ebae:	f107 0116 	add.w	r1, r7, #22
 801ebb2:	f107 0218 	add.w	r2, r7, #24
 801ebb6:	4610      	mov	r0, r2
 801ebb8:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801ebba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ebbe:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801ebc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ebc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ebc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ebc8:	4823      	ldr	r0, [pc, #140]	; (801ec58 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801ebca:	f7ff fa25 	bl	801e018 <tiny_vsnprintf_like>
 801ebce:	4603      	mov	r3, r0
 801ebd0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801ebd2:	f000 f9f1 	bl	801efb8 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801ebd6:	8afa      	ldrh	r2, [r7, #22]
 801ebd8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801ebda:	4413      	add	r3, r2
 801ebdc:	b29b      	uxth	r3, r3
 801ebde:	f107 0214 	add.w	r2, r7, #20
 801ebe2:	4611      	mov	r1, r2
 801ebe4:	4618      	mov	r0, r3
 801ebe6:	f000 f969 	bl	801eebc <TRACE_AllocateBufer>
 801ebea:	4603      	mov	r3, r0
 801ebec:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ebf0:	d025      	beq.n	801ec3e <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801ebf2:	2300      	movs	r3, #0
 801ebf4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ebf6:	e00e      	b.n	801ec16 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801ebf8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ebfa:	8aba      	ldrh	r2, [r7, #20]
 801ebfc:	3330      	adds	r3, #48	; 0x30
 801ebfe:	443b      	add	r3, r7
 801ec00:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801ec04:	4b15      	ldr	r3, [pc, #84]	; (801ec5c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801ec06:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801ec08:	8abb      	ldrh	r3, [r7, #20]
 801ec0a:	3301      	adds	r3, #1
 801ec0c:	b29b      	uxth	r3, r3
 801ec0e:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801ec10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ec12:	3301      	adds	r3, #1
 801ec14:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ec16:	8afb      	ldrh	r3, [r7, #22]
 801ec18:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801ec1a:	429a      	cmp	r2, r3
 801ec1c:	d3ec      	bcc.n	801ebf8 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801ec1e:	8abb      	ldrh	r3, [r7, #20]
 801ec20:	461a      	mov	r2, r3
 801ec22:	4b0e      	ldr	r3, [pc, #56]	; (801ec5c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801ec24:	18d0      	adds	r0, r2, r3
 801ec26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ec28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ec2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ec2e:	f7ff f9f3 	bl	801e018 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801ec32:	f000 f9df 	bl	801eff4 <TRACE_UnLock>

    return TRACE_Send();
 801ec36:	f000 f831 	bl	801ec9c <TRACE_Send>
 801ec3a:	4603      	mov	r3, r0
 801ec3c:	e003      	b.n	801ec46 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801ec3e:	f000 f9d9 	bl	801eff4 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801ec42:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801ec46:	4618      	mov	r0, r3
 801ec48:	3734      	adds	r7, #52	; 0x34
 801ec4a:	46bd      	mov	sp, r7
 801ec4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801ec50:	b001      	add	sp, #4
 801ec52:	4770      	bx	lr
 801ec54:	20002490 	.word	0x20002490
 801ec58:	200028a8 	.word	0x200028a8
 801ec5c:	200024a8 	.word	0x200024a8

0801ec60 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801ec60:	b480      	push	{r7}
 801ec62:	b083      	sub	sp, #12
 801ec64:	af00      	add	r7, sp, #0
 801ec66:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801ec68:	4a03      	ldr	r2, [pc, #12]	; (801ec78 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801ec6a:	687b      	ldr	r3, [r7, #4]
 801ec6c:	6053      	str	r3, [r2, #4]
}
 801ec6e:	bf00      	nop
 801ec70:	370c      	adds	r7, #12
 801ec72:	46bd      	mov	sp, r7
 801ec74:	bc80      	pop	{r7}
 801ec76:	4770      	bx	lr
 801ec78:	20002490 	.word	0x20002490

0801ec7c <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801ec7c:	b480      	push	{r7}
 801ec7e:	b083      	sub	sp, #12
 801ec80:	af00      	add	r7, sp, #0
 801ec82:	4603      	mov	r3, r0
 801ec84:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801ec86:	4a04      	ldr	r2, [pc, #16]	; (801ec98 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801ec88:	79fb      	ldrb	r3, [r7, #7]
 801ec8a:	7213      	strb	r3, [r2, #8]
}
 801ec8c:	bf00      	nop
 801ec8e:	370c      	adds	r7, #12
 801ec90:	46bd      	mov	sp, r7
 801ec92:	bc80      	pop	{r7}
 801ec94:	4770      	bx	lr
 801ec96:	bf00      	nop
 801ec98:	20002490 	.word	0x20002490

0801ec9c <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801ec9c:	b580      	push	{r7, lr}
 801ec9e:	b088      	sub	sp, #32
 801eca0:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801eca2:	2300      	movs	r3, #0
 801eca4:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801eca6:	2300      	movs	r3, #0
 801eca8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ecaa:	f3ef 8310 	mrs	r3, PRIMASK
 801ecae:	613b      	str	r3, [r7, #16]
  return(result);
 801ecb0:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ecb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ecb4:	b672      	cpsid	i
}
 801ecb6:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801ecb8:	f000 f9ba 	bl	801f030 <TRACE_IsLocked>
 801ecbc:	4603      	mov	r3, r0
 801ecbe:	2b00      	cmp	r3, #0
 801ecc0:	d15d      	bne.n	801ed7e <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801ecc2:	f000 f979 	bl	801efb8 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801ecc6:	4b34      	ldr	r3, [pc, #208]	; (801ed98 <TRACE_Send+0xfc>)
 801ecc8:	8a1a      	ldrh	r2, [r3, #16]
 801ecca:	4b33      	ldr	r3, [pc, #204]	; (801ed98 <TRACE_Send+0xfc>)
 801eccc:	8a5b      	ldrh	r3, [r3, #18]
 801ecce:	429a      	cmp	r2, r3
 801ecd0:	d04d      	beq.n	801ed6e <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801ecd2:	4b31      	ldr	r3, [pc, #196]	; (801ed98 <TRACE_Send+0xfc>)
 801ecd4:	789b      	ldrb	r3, [r3, #2]
 801ecd6:	2b01      	cmp	r3, #1
 801ecd8:	d117      	bne.n	801ed0a <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801ecda:	4b2f      	ldr	r3, [pc, #188]	; (801ed98 <TRACE_Send+0xfc>)
 801ecdc:	881a      	ldrh	r2, [r3, #0]
 801ecde:	4b2e      	ldr	r3, [pc, #184]	; (801ed98 <TRACE_Send+0xfc>)
 801ece0:	8a1b      	ldrh	r3, [r3, #16]
 801ece2:	1ad3      	subs	r3, r2, r3
 801ece4:	b29a      	uxth	r2, r3
 801ece6:	4b2c      	ldr	r3, [pc, #176]	; (801ed98 <TRACE_Send+0xfc>)
 801ece8:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801ecea:	4b2b      	ldr	r3, [pc, #172]	; (801ed98 <TRACE_Send+0xfc>)
 801ecec:	2202      	movs	r2, #2
 801ecee:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801ecf0:	4b29      	ldr	r3, [pc, #164]	; (801ed98 <TRACE_Send+0xfc>)
 801ecf2:	2200      	movs	r2, #0
 801ecf4:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801ecf6:	4b28      	ldr	r3, [pc, #160]	; (801ed98 <TRACE_Send+0xfc>)
 801ecf8:	8a9b      	ldrh	r3, [r3, #20]
 801ecfa:	2b00      	cmp	r3, #0
 801ecfc:	d105      	bne.n	801ed0a <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ecfe:	4b26      	ldr	r3, [pc, #152]	; (801ed98 <TRACE_Send+0xfc>)
 801ed00:	2200      	movs	r2, #0
 801ed02:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ed04:	4b24      	ldr	r3, [pc, #144]	; (801ed98 <TRACE_Send+0xfc>)
 801ed06:	2200      	movs	r2, #0
 801ed08:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ed0a:	4b23      	ldr	r3, [pc, #140]	; (801ed98 <TRACE_Send+0xfc>)
 801ed0c:	789b      	ldrb	r3, [r3, #2]
 801ed0e:	2b00      	cmp	r3, #0
 801ed10:	d115      	bne.n	801ed3e <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ed12:	4b21      	ldr	r3, [pc, #132]	; (801ed98 <TRACE_Send+0xfc>)
 801ed14:	8a5a      	ldrh	r2, [r3, #18]
 801ed16:	4b20      	ldr	r3, [pc, #128]	; (801ed98 <TRACE_Send+0xfc>)
 801ed18:	8a1b      	ldrh	r3, [r3, #16]
 801ed1a:	429a      	cmp	r2, r3
 801ed1c:	d908      	bls.n	801ed30 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ed1e:	4b1e      	ldr	r3, [pc, #120]	; (801ed98 <TRACE_Send+0xfc>)
 801ed20:	8a5a      	ldrh	r2, [r3, #18]
 801ed22:	4b1d      	ldr	r3, [pc, #116]	; (801ed98 <TRACE_Send+0xfc>)
 801ed24:	8a1b      	ldrh	r3, [r3, #16]
 801ed26:	1ad3      	subs	r3, r2, r3
 801ed28:	b29a      	uxth	r2, r3
 801ed2a:	4b1b      	ldr	r3, [pc, #108]	; (801ed98 <TRACE_Send+0xfc>)
 801ed2c:	829a      	strh	r2, [r3, #20]
 801ed2e:	e006      	b.n	801ed3e <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ed30:	4b19      	ldr	r3, [pc, #100]	; (801ed98 <TRACE_Send+0xfc>)
 801ed32:	8a1b      	ldrh	r3, [r3, #16]
 801ed34:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ed38:	b29a      	uxth	r2, r3
 801ed3a:	4b17      	ldr	r3, [pc, #92]	; (801ed98 <TRACE_Send+0xfc>)
 801ed3c:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ed3e:	4b16      	ldr	r3, [pc, #88]	; (801ed98 <TRACE_Send+0xfc>)
 801ed40:	8a1b      	ldrh	r3, [r3, #16]
 801ed42:	461a      	mov	r2, r3
 801ed44:	4b15      	ldr	r3, [pc, #84]	; (801ed9c <TRACE_Send+0x100>)
 801ed46:	4413      	add	r3, r2
 801ed48:	61bb      	str	r3, [r7, #24]
 801ed4a:	697b      	ldr	r3, [r7, #20]
 801ed4c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed4e:	68fb      	ldr	r3, [r7, #12]
 801ed50:	f383 8810 	msr	PRIMASK, r3
}
 801ed54:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801ed56:	f7e3 fda5 	bl	80028a4 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ed5a:	4b11      	ldr	r3, [pc, #68]	; (801eda0 <TRACE_Send+0x104>)
 801ed5c:	68db      	ldr	r3, [r3, #12]
 801ed5e:	4a0e      	ldr	r2, [pc, #56]	; (801ed98 <TRACE_Send+0xfc>)
 801ed60:	8a92      	ldrh	r2, [r2, #20]
 801ed62:	4611      	mov	r1, r2
 801ed64:	69b8      	ldr	r0, [r7, #24]
 801ed66:	4798      	blx	r3
 801ed68:	4603      	mov	r3, r0
 801ed6a:	77fb      	strb	r3, [r7, #31]
 801ed6c:	e00d      	b.n	801ed8a <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801ed6e:	f000 f941 	bl	801eff4 <TRACE_UnLock>
 801ed72:	697b      	ldr	r3, [r7, #20]
 801ed74:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed76:	68bb      	ldr	r3, [r7, #8]
 801ed78:	f383 8810 	msr	PRIMASK, r3
}
 801ed7c:	e005      	b.n	801ed8a <TRACE_Send+0xee>
 801ed7e:	697b      	ldr	r3, [r7, #20]
 801ed80:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed82:	687b      	ldr	r3, [r7, #4]
 801ed84:	f383 8810 	msr	PRIMASK, r3
}
 801ed88:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801ed8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ed8e:	4618      	mov	r0, r3
 801ed90:	3720      	adds	r7, #32
 801ed92:	46bd      	mov	sp, r7
 801ed94:	bd80      	pop	{r7, pc}
 801ed96:	bf00      	nop
 801ed98:	20002490 	.word	0x20002490
 801ed9c:	200024a8 	.word	0x200024a8
 801eda0:	0801f864 	.word	0x0801f864

0801eda4 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801eda4:	b580      	push	{r7, lr}
 801eda6:	b088      	sub	sp, #32
 801eda8:	af00      	add	r7, sp, #0
 801edaa:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801edac:	2300      	movs	r3, #0
 801edae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801edb0:	f3ef 8310 	mrs	r3, PRIMASK
 801edb4:	617b      	str	r3, [r7, #20]
  return(result);
 801edb6:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801edb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801edba:	b672      	cpsid	i
}
 801edbc:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801edbe:	4b3c      	ldr	r3, [pc, #240]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801edc0:	789b      	ldrb	r3, [r3, #2]
 801edc2:	2b02      	cmp	r3, #2
 801edc4:	d106      	bne.n	801edd4 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801edc6:	4b3a      	ldr	r3, [pc, #232]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801edc8:	2200      	movs	r2, #0
 801edca:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801edcc:	4b38      	ldr	r3, [pc, #224]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801edce:	2200      	movs	r2, #0
 801edd0:	821a      	strh	r2, [r3, #16]
 801edd2:	e00a      	b.n	801edea <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801edd4:	4b36      	ldr	r3, [pc, #216]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801edd6:	8a1a      	ldrh	r2, [r3, #16]
 801edd8:	4b35      	ldr	r3, [pc, #212]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801edda:	8a9b      	ldrh	r3, [r3, #20]
 801eddc:	4413      	add	r3, r2
 801edde:	b29b      	uxth	r3, r3
 801ede0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ede4:	b29a      	uxth	r2, r3
 801ede6:	4b32      	ldr	r3, [pc, #200]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801ede8:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801edea:	4b31      	ldr	r3, [pc, #196]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801edec:	8a1a      	ldrh	r2, [r3, #16]
 801edee:	4b30      	ldr	r3, [pc, #192]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801edf0:	8a5b      	ldrh	r3, [r3, #18]
 801edf2:	429a      	cmp	r2, r3
 801edf4:	d04d      	beq.n	801ee92 <TRACE_TxCpltCallback+0xee>
 801edf6:	4b2e      	ldr	r3, [pc, #184]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801edf8:	8adb      	ldrh	r3, [r3, #22]
 801edfa:	2b01      	cmp	r3, #1
 801edfc:	d149      	bne.n	801ee92 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801edfe:	4b2c      	ldr	r3, [pc, #176]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801ee00:	789b      	ldrb	r3, [r3, #2]
 801ee02:	2b01      	cmp	r3, #1
 801ee04:	d117      	bne.n	801ee36 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801ee06:	4b2a      	ldr	r3, [pc, #168]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801ee08:	881a      	ldrh	r2, [r3, #0]
 801ee0a:	4b29      	ldr	r3, [pc, #164]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801ee0c:	8a1b      	ldrh	r3, [r3, #16]
 801ee0e:	1ad3      	subs	r3, r2, r3
 801ee10:	b29a      	uxth	r2, r3
 801ee12:	4b27      	ldr	r3, [pc, #156]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801ee14:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801ee16:	4b26      	ldr	r3, [pc, #152]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801ee18:	2202      	movs	r2, #2
 801ee1a:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801ee1c:	4b24      	ldr	r3, [pc, #144]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801ee1e:	2200      	movs	r2, #0
 801ee20:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801ee22:	4b23      	ldr	r3, [pc, #140]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801ee24:	8a9b      	ldrh	r3, [r3, #20]
 801ee26:	2b00      	cmp	r3, #0
 801ee28:	d105      	bne.n	801ee36 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ee2a:	4b21      	ldr	r3, [pc, #132]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801ee2c:	2200      	movs	r2, #0
 801ee2e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ee30:	4b1f      	ldr	r3, [pc, #124]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801ee32:	2200      	movs	r2, #0
 801ee34:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ee36:	4b1e      	ldr	r3, [pc, #120]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801ee38:	789b      	ldrb	r3, [r3, #2]
 801ee3a:	2b00      	cmp	r3, #0
 801ee3c:	d115      	bne.n	801ee6a <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ee3e:	4b1c      	ldr	r3, [pc, #112]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801ee40:	8a5a      	ldrh	r2, [r3, #18]
 801ee42:	4b1b      	ldr	r3, [pc, #108]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801ee44:	8a1b      	ldrh	r3, [r3, #16]
 801ee46:	429a      	cmp	r2, r3
 801ee48:	d908      	bls.n	801ee5c <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ee4a:	4b19      	ldr	r3, [pc, #100]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801ee4c:	8a5a      	ldrh	r2, [r3, #18]
 801ee4e:	4b18      	ldr	r3, [pc, #96]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801ee50:	8a1b      	ldrh	r3, [r3, #16]
 801ee52:	1ad3      	subs	r3, r2, r3
 801ee54:	b29a      	uxth	r2, r3
 801ee56:	4b16      	ldr	r3, [pc, #88]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801ee58:	829a      	strh	r2, [r3, #20]
 801ee5a:	e006      	b.n	801ee6a <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ee5c:	4b14      	ldr	r3, [pc, #80]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801ee5e:	8a1b      	ldrh	r3, [r3, #16]
 801ee60:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ee64:	b29a      	uxth	r2, r3
 801ee66:	4b12      	ldr	r3, [pc, #72]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801ee68:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ee6a:	4b11      	ldr	r3, [pc, #68]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801ee6c:	8a1b      	ldrh	r3, [r3, #16]
 801ee6e:	461a      	mov	r2, r3
 801ee70:	4b10      	ldr	r3, [pc, #64]	; (801eeb4 <TRACE_TxCpltCallback+0x110>)
 801ee72:	4413      	add	r3, r2
 801ee74:	61fb      	str	r3, [r7, #28]
 801ee76:	69bb      	ldr	r3, [r7, #24]
 801ee78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee7a:	693b      	ldr	r3, [r7, #16]
 801ee7c:	f383 8810 	msr	PRIMASK, r3
}
 801ee80:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ee82:	4b0d      	ldr	r3, [pc, #52]	; (801eeb8 <TRACE_TxCpltCallback+0x114>)
 801ee84:	68db      	ldr	r3, [r3, #12]
 801ee86:	4a0a      	ldr	r2, [pc, #40]	; (801eeb0 <TRACE_TxCpltCallback+0x10c>)
 801ee88:	8a92      	ldrh	r2, [r2, #20]
 801ee8a:	4611      	mov	r1, r2
 801ee8c:	69f8      	ldr	r0, [r7, #28]
 801ee8e:	4798      	blx	r3
 801ee90:	e00a      	b.n	801eea8 <TRACE_TxCpltCallback+0x104>
 801ee92:	69bb      	ldr	r3, [r7, #24]
 801ee94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee96:	68fb      	ldr	r3, [r7, #12]
 801ee98:	f383 8810 	msr	PRIMASK, r3
}
 801ee9c:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801ee9e:	f7e3 fd09 	bl	80028b4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801eea2:	f000 f8a7 	bl	801eff4 <TRACE_UnLock>
  }
}
 801eea6:	bf00      	nop
 801eea8:	bf00      	nop
 801eeaa:	3720      	adds	r7, #32
 801eeac:	46bd      	mov	sp, r7
 801eeae:	bd80      	pop	{r7, pc}
 801eeb0:	20002490 	.word	0x20002490
 801eeb4:	200024a8 	.word	0x200024a8
 801eeb8:	0801f864 	.word	0x0801f864

0801eebc <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801eebc:	b480      	push	{r7}
 801eebe:	b087      	sub	sp, #28
 801eec0:	af00      	add	r7, sp, #0
 801eec2:	4603      	mov	r3, r0
 801eec4:	6039      	str	r1, [r7, #0]
 801eec6:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801eec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801eecc:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eece:	f3ef 8310 	mrs	r3, PRIMASK
 801eed2:	60fb      	str	r3, [r7, #12]
  return(result);
 801eed4:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801eed6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801eed8:	b672      	cpsid	i
}
 801eeda:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801eedc:	4b35      	ldr	r3, [pc, #212]	; (801efb4 <TRACE_AllocateBufer+0xf8>)
 801eede:	8a5a      	ldrh	r2, [r3, #18]
 801eee0:	4b34      	ldr	r3, [pc, #208]	; (801efb4 <TRACE_AllocateBufer+0xf8>)
 801eee2:	8a1b      	ldrh	r3, [r3, #16]
 801eee4:	429a      	cmp	r2, r3
 801eee6:	d11b      	bne.n	801ef20 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801eee8:	4b32      	ldr	r3, [pc, #200]	; (801efb4 <TRACE_AllocateBufer+0xf8>)
 801eeea:	8a5b      	ldrh	r3, [r3, #18]
 801eeec:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801eef0:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801eef2:	88fa      	ldrh	r2, [r7, #6]
 801eef4:	8afb      	ldrh	r3, [r7, #22]
 801eef6:	429a      	cmp	r2, r3
 801eef8:	d33a      	bcc.n	801ef70 <TRACE_AllocateBufer+0xb4>
 801eefa:	4b2e      	ldr	r3, [pc, #184]	; (801efb4 <TRACE_AllocateBufer+0xf8>)
 801eefc:	8a1b      	ldrh	r3, [r3, #16]
 801eefe:	88fa      	ldrh	r2, [r7, #6]
 801ef00:	429a      	cmp	r2, r3
 801ef02:	d235      	bcs.n	801ef70 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801ef04:	4b2b      	ldr	r3, [pc, #172]	; (801efb4 <TRACE_AllocateBufer+0xf8>)
 801ef06:	2201      	movs	r2, #1
 801ef08:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801ef0a:	4b2a      	ldr	r3, [pc, #168]	; (801efb4 <TRACE_AllocateBufer+0xf8>)
 801ef0c:	8a5a      	ldrh	r2, [r3, #18]
 801ef0e:	4b29      	ldr	r3, [pc, #164]	; (801efb4 <TRACE_AllocateBufer+0xf8>)
 801ef10:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801ef12:	4b28      	ldr	r3, [pc, #160]	; (801efb4 <TRACE_AllocateBufer+0xf8>)
 801ef14:	8a1b      	ldrh	r3, [r3, #16]
 801ef16:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801ef18:	4b26      	ldr	r3, [pc, #152]	; (801efb4 <TRACE_AllocateBufer+0xf8>)
 801ef1a:	2200      	movs	r2, #0
 801ef1c:	825a      	strh	r2, [r3, #18]
 801ef1e:	e027      	b.n	801ef70 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ef20:	4b24      	ldr	r3, [pc, #144]	; (801efb4 <TRACE_AllocateBufer+0xf8>)
 801ef22:	8a5a      	ldrh	r2, [r3, #18]
 801ef24:	4b23      	ldr	r3, [pc, #140]	; (801efb4 <TRACE_AllocateBufer+0xf8>)
 801ef26:	8a1b      	ldrh	r3, [r3, #16]
 801ef28:	429a      	cmp	r2, r3
 801ef2a:	d91b      	bls.n	801ef64 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801ef2c:	4b21      	ldr	r3, [pc, #132]	; (801efb4 <TRACE_AllocateBufer+0xf8>)
 801ef2e:	8a5b      	ldrh	r3, [r3, #18]
 801ef30:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ef34:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801ef36:	88fa      	ldrh	r2, [r7, #6]
 801ef38:	8afb      	ldrh	r3, [r7, #22]
 801ef3a:	429a      	cmp	r2, r3
 801ef3c:	d318      	bcc.n	801ef70 <TRACE_AllocateBufer+0xb4>
 801ef3e:	4b1d      	ldr	r3, [pc, #116]	; (801efb4 <TRACE_AllocateBufer+0xf8>)
 801ef40:	8a1b      	ldrh	r3, [r3, #16]
 801ef42:	88fa      	ldrh	r2, [r7, #6]
 801ef44:	429a      	cmp	r2, r3
 801ef46:	d213      	bcs.n	801ef70 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801ef48:	4b1a      	ldr	r3, [pc, #104]	; (801efb4 <TRACE_AllocateBufer+0xf8>)
 801ef4a:	2201      	movs	r2, #1
 801ef4c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801ef4e:	4b19      	ldr	r3, [pc, #100]	; (801efb4 <TRACE_AllocateBufer+0xf8>)
 801ef50:	8a5a      	ldrh	r2, [r3, #18]
 801ef52:	4b18      	ldr	r3, [pc, #96]	; (801efb4 <TRACE_AllocateBufer+0xf8>)
 801ef54:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801ef56:	4b17      	ldr	r3, [pc, #92]	; (801efb4 <TRACE_AllocateBufer+0xf8>)
 801ef58:	8a1b      	ldrh	r3, [r3, #16]
 801ef5a:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801ef5c:	4b15      	ldr	r3, [pc, #84]	; (801efb4 <TRACE_AllocateBufer+0xf8>)
 801ef5e:	2200      	movs	r2, #0
 801ef60:	825a      	strh	r2, [r3, #18]
 801ef62:	e005      	b.n	801ef70 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801ef64:	4b13      	ldr	r3, [pc, #76]	; (801efb4 <TRACE_AllocateBufer+0xf8>)
 801ef66:	8a1a      	ldrh	r2, [r3, #16]
 801ef68:	4b12      	ldr	r3, [pc, #72]	; (801efb4 <TRACE_AllocateBufer+0xf8>)
 801ef6a:	8a5b      	ldrh	r3, [r3, #18]
 801ef6c:	1ad3      	subs	r3, r2, r3
 801ef6e:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801ef70:	8afa      	ldrh	r2, [r7, #22]
 801ef72:	88fb      	ldrh	r3, [r7, #6]
 801ef74:	429a      	cmp	r2, r3
 801ef76:	d90f      	bls.n	801ef98 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801ef78:	4b0e      	ldr	r3, [pc, #56]	; (801efb4 <TRACE_AllocateBufer+0xf8>)
 801ef7a:	8a5a      	ldrh	r2, [r3, #18]
 801ef7c:	683b      	ldr	r3, [r7, #0]
 801ef7e:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801ef80:	4b0c      	ldr	r3, [pc, #48]	; (801efb4 <TRACE_AllocateBufer+0xf8>)
 801ef82:	8a5a      	ldrh	r2, [r3, #18]
 801ef84:	88fb      	ldrh	r3, [r7, #6]
 801ef86:	4413      	add	r3, r2
 801ef88:	b29b      	uxth	r3, r3
 801ef8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ef8e:	b29a      	uxth	r2, r3
 801ef90:	4b08      	ldr	r3, [pc, #32]	; (801efb4 <TRACE_AllocateBufer+0xf8>)
 801ef92:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801ef94:	2300      	movs	r3, #0
 801ef96:	82bb      	strh	r3, [r7, #20]
 801ef98:	693b      	ldr	r3, [r7, #16]
 801ef9a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef9c:	68bb      	ldr	r3, [r7, #8]
 801ef9e:	f383 8810 	msr	PRIMASK, r3
}
 801efa2:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801efa4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801efa8:	4618      	mov	r0, r3
 801efaa:	371c      	adds	r7, #28
 801efac:	46bd      	mov	sp, r7
 801efae:	bc80      	pop	{r7}
 801efb0:	4770      	bx	lr
 801efb2:	bf00      	nop
 801efb4:	20002490 	.word	0x20002490

0801efb8 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801efb8:	b480      	push	{r7}
 801efba:	b085      	sub	sp, #20
 801efbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801efbe:	f3ef 8310 	mrs	r3, PRIMASK
 801efc2:	607b      	str	r3, [r7, #4]
  return(result);
 801efc4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801efc6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801efc8:	b672      	cpsid	i
}
 801efca:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801efcc:	4b08      	ldr	r3, [pc, #32]	; (801eff0 <TRACE_Lock+0x38>)
 801efce:	8adb      	ldrh	r3, [r3, #22]
 801efd0:	3301      	adds	r3, #1
 801efd2:	b29a      	uxth	r2, r3
 801efd4:	4b06      	ldr	r3, [pc, #24]	; (801eff0 <TRACE_Lock+0x38>)
 801efd6:	82da      	strh	r2, [r3, #22]
 801efd8:	68fb      	ldr	r3, [r7, #12]
 801efda:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801efdc:	68bb      	ldr	r3, [r7, #8]
 801efde:	f383 8810 	msr	PRIMASK, r3
}
 801efe2:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801efe4:	bf00      	nop
 801efe6:	3714      	adds	r7, #20
 801efe8:	46bd      	mov	sp, r7
 801efea:	bc80      	pop	{r7}
 801efec:	4770      	bx	lr
 801efee:	bf00      	nop
 801eff0:	20002490 	.word	0x20002490

0801eff4 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801eff4:	b480      	push	{r7}
 801eff6:	b085      	sub	sp, #20
 801eff8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801effa:	f3ef 8310 	mrs	r3, PRIMASK
 801effe:	607b      	str	r3, [r7, #4]
  return(result);
 801f000:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801f002:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801f004:	b672      	cpsid	i
}
 801f006:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801f008:	4b08      	ldr	r3, [pc, #32]	; (801f02c <TRACE_UnLock+0x38>)
 801f00a:	8adb      	ldrh	r3, [r3, #22]
 801f00c:	3b01      	subs	r3, #1
 801f00e:	b29a      	uxth	r2, r3
 801f010:	4b06      	ldr	r3, [pc, #24]	; (801f02c <TRACE_UnLock+0x38>)
 801f012:	82da      	strh	r2, [r3, #22]
 801f014:	68fb      	ldr	r3, [r7, #12]
 801f016:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f018:	68bb      	ldr	r3, [r7, #8]
 801f01a:	f383 8810 	msr	PRIMASK, r3
}
 801f01e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801f020:	bf00      	nop
 801f022:	3714      	adds	r7, #20
 801f024:	46bd      	mov	sp, r7
 801f026:	bc80      	pop	{r7}
 801f028:	4770      	bx	lr
 801f02a:	bf00      	nop
 801f02c:	20002490 	.word	0x20002490

0801f030 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801f030:	b480      	push	{r7}
 801f032:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801f034:	4b05      	ldr	r3, [pc, #20]	; (801f04c <TRACE_IsLocked+0x1c>)
 801f036:	8adb      	ldrh	r3, [r3, #22]
 801f038:	2b00      	cmp	r3, #0
 801f03a:	bf14      	ite	ne
 801f03c:	2301      	movne	r3, #1
 801f03e:	2300      	moveq	r3, #0
 801f040:	b2db      	uxtb	r3, r3
}
 801f042:	4618      	mov	r0, r3
 801f044:	46bd      	mov	sp, r7
 801f046:	bc80      	pop	{r7}
 801f048:	4770      	bx	lr
 801f04a:	bf00      	nop
 801f04c:	20002490 	.word	0x20002490

0801f050 <__libc_init_array>:
 801f050:	b570      	push	{r4, r5, r6, lr}
 801f052:	4d0d      	ldr	r5, [pc, #52]	; (801f088 <__libc_init_array+0x38>)
 801f054:	4c0d      	ldr	r4, [pc, #52]	; (801f08c <__libc_init_array+0x3c>)
 801f056:	1b64      	subs	r4, r4, r5
 801f058:	10a4      	asrs	r4, r4, #2
 801f05a:	2600      	movs	r6, #0
 801f05c:	42a6      	cmp	r6, r4
 801f05e:	d109      	bne.n	801f074 <__libc_init_array+0x24>
 801f060:	4d0b      	ldr	r5, [pc, #44]	; (801f090 <__libc_init_array+0x40>)
 801f062:	4c0c      	ldr	r4, [pc, #48]	; (801f094 <__libc_init_array+0x44>)
 801f064:	f000 f908 	bl	801f278 <_init>
 801f068:	1b64      	subs	r4, r4, r5
 801f06a:	10a4      	asrs	r4, r4, #2
 801f06c:	2600      	movs	r6, #0
 801f06e:	42a6      	cmp	r6, r4
 801f070:	d105      	bne.n	801f07e <__libc_init_array+0x2e>
 801f072:	bd70      	pop	{r4, r5, r6, pc}
 801f074:	f855 3b04 	ldr.w	r3, [r5], #4
 801f078:	4798      	blx	r3
 801f07a:	3601      	adds	r6, #1
 801f07c:	e7ee      	b.n	801f05c <__libc_init_array+0xc>
 801f07e:	f855 3b04 	ldr.w	r3, [r5], #4
 801f082:	4798      	blx	r3
 801f084:	3601      	adds	r6, #1
 801f086:	e7f2      	b.n	801f06e <__libc_init_array+0x1e>
 801f088:	0801fdf8 	.word	0x0801fdf8
 801f08c:	0801fdf8 	.word	0x0801fdf8
 801f090:	0801fdf8 	.word	0x0801fdf8
 801f094:	0801fe00 	.word	0x0801fe00

0801f098 <memset>:
 801f098:	4402      	add	r2, r0
 801f09a:	4603      	mov	r3, r0
 801f09c:	4293      	cmp	r3, r2
 801f09e:	d100      	bne.n	801f0a2 <memset+0xa>
 801f0a0:	4770      	bx	lr
 801f0a2:	f803 1b01 	strb.w	r1, [r3], #1
 801f0a6:	e7f9      	b.n	801f09c <memset+0x4>

0801f0a8 <register_fini>:
 801f0a8:	4b02      	ldr	r3, [pc, #8]	; (801f0b4 <register_fini+0xc>)
 801f0aa:	b113      	cbz	r3, 801f0b2 <register_fini+0xa>
 801f0ac:	4802      	ldr	r0, [pc, #8]	; (801f0b8 <register_fini+0x10>)
 801f0ae:	f000 b805 	b.w	801f0bc <atexit>
 801f0b2:	4770      	bx	lr
 801f0b4:	00000000 	.word	0x00000000
 801f0b8:	0801f0c9 	.word	0x0801f0c9

0801f0bc <atexit>:
 801f0bc:	2300      	movs	r3, #0
 801f0be:	4601      	mov	r1, r0
 801f0c0:	461a      	mov	r2, r3
 801f0c2:	4618      	mov	r0, r3
 801f0c4:	f000 b816 	b.w	801f0f4 <__register_exitproc>

0801f0c8 <__libc_fini_array>:
 801f0c8:	b538      	push	{r3, r4, r5, lr}
 801f0ca:	4d07      	ldr	r5, [pc, #28]	; (801f0e8 <__libc_fini_array+0x20>)
 801f0cc:	4c07      	ldr	r4, [pc, #28]	; (801f0ec <__libc_fini_array+0x24>)
 801f0ce:	1b64      	subs	r4, r4, r5
 801f0d0:	10a4      	asrs	r4, r4, #2
 801f0d2:	b91c      	cbnz	r4, 801f0dc <__libc_fini_array+0x14>
 801f0d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f0d8:	f000 b8d4 	b.w	801f284 <_fini>
 801f0dc:	3c01      	subs	r4, #1
 801f0de:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801f0e2:	4798      	blx	r3
 801f0e4:	e7f5      	b.n	801f0d2 <__libc_fini_array+0xa>
 801f0e6:	bf00      	nop
 801f0e8:	0801fe00 	.word	0x0801fe00
 801f0ec:	0801fe04 	.word	0x0801fe04

0801f0f0 <__retarget_lock_acquire_recursive>:
 801f0f0:	4770      	bx	lr

0801f0f2 <__retarget_lock_release_recursive>:
 801f0f2:	4770      	bx	lr

0801f0f4 <__register_exitproc>:
 801f0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f0f8:	f8df a074 	ldr.w	sl, [pc, #116]	; 801f170 <__register_exitproc+0x7c>
 801f0fc:	4606      	mov	r6, r0
 801f0fe:	f8da 0000 	ldr.w	r0, [sl]
 801f102:	4698      	mov	r8, r3
 801f104:	460f      	mov	r7, r1
 801f106:	4691      	mov	r9, r2
 801f108:	f7ff fff2 	bl	801f0f0 <__retarget_lock_acquire_recursive>
 801f10c:	4b19      	ldr	r3, [pc, #100]	; (801f174 <__register_exitproc+0x80>)
 801f10e:	681b      	ldr	r3, [r3, #0]
 801f110:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 801f114:	b91c      	cbnz	r4, 801f11e <__register_exitproc+0x2a>
 801f116:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 801f11a:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 801f11e:	6865      	ldr	r5, [r4, #4]
 801f120:	f8da 0000 	ldr.w	r0, [sl]
 801f124:	2d1f      	cmp	r5, #31
 801f126:	dd05      	ble.n	801f134 <__register_exitproc+0x40>
 801f128:	f7ff ffe3 	bl	801f0f2 <__retarget_lock_release_recursive>
 801f12c:	f04f 30ff 	mov.w	r0, #4294967295
 801f130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f134:	b19e      	cbz	r6, 801f15e <__register_exitproc+0x6a>
 801f136:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801f13a:	2201      	movs	r2, #1
 801f13c:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801f140:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801f144:	40aa      	lsls	r2, r5
 801f146:	4313      	orrs	r3, r2
 801f148:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801f14c:	2e02      	cmp	r6, #2
 801f14e:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801f152:	bf02      	ittt	eq
 801f154:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801f158:	4313      	orreq	r3, r2
 801f15a:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 801f15e:	1c6b      	adds	r3, r5, #1
 801f160:	3502      	adds	r5, #2
 801f162:	6063      	str	r3, [r4, #4]
 801f164:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801f168:	f7ff ffc3 	bl	801f0f2 <__retarget_lock_release_recursive>
 801f16c:	2000      	movs	r0, #0
 801f16e:	e7df      	b.n	801f130 <__register_exitproc+0x3c>
 801f170:	20000580 	.word	0x20000580
 801f174:	0801fd2c 	.word	0x0801fd2c

0801f178 <floor>:
 801f178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f17c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801f180:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801f184:	2e13      	cmp	r6, #19
 801f186:	4602      	mov	r2, r0
 801f188:	460b      	mov	r3, r1
 801f18a:	4607      	mov	r7, r0
 801f18c:	460c      	mov	r4, r1
 801f18e:	4605      	mov	r5, r0
 801f190:	dc33      	bgt.n	801f1fa <floor+0x82>
 801f192:	2e00      	cmp	r6, #0
 801f194:	da14      	bge.n	801f1c0 <floor+0x48>
 801f196:	a334      	add	r3, pc, #208	; (adr r3, 801f268 <floor+0xf0>)
 801f198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f19c:	f7e0 fffa 	bl	8000194 <__adddf3>
 801f1a0:	2200      	movs	r2, #0
 801f1a2:	2300      	movs	r3, #0
 801f1a4:	f7e1 fc3c 	bl	8000a20 <__aeabi_dcmpgt>
 801f1a8:	b138      	cbz	r0, 801f1ba <floor+0x42>
 801f1aa:	2c00      	cmp	r4, #0
 801f1ac:	da58      	bge.n	801f260 <floor+0xe8>
 801f1ae:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801f1b2:	431d      	orrs	r5, r3
 801f1b4:	d001      	beq.n	801f1ba <floor+0x42>
 801f1b6:	4c2e      	ldr	r4, [pc, #184]	; (801f270 <floor+0xf8>)
 801f1b8:	2500      	movs	r5, #0
 801f1ba:	4623      	mov	r3, r4
 801f1bc:	462f      	mov	r7, r5
 801f1be:	e025      	b.n	801f20c <floor+0x94>
 801f1c0:	4a2c      	ldr	r2, [pc, #176]	; (801f274 <floor+0xfc>)
 801f1c2:	fa42 f806 	asr.w	r8, r2, r6
 801f1c6:	ea01 0208 	and.w	r2, r1, r8
 801f1ca:	4302      	orrs	r2, r0
 801f1cc:	d01e      	beq.n	801f20c <floor+0x94>
 801f1ce:	a326      	add	r3, pc, #152	; (adr r3, 801f268 <floor+0xf0>)
 801f1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1d4:	f7e0 ffde 	bl	8000194 <__adddf3>
 801f1d8:	2200      	movs	r2, #0
 801f1da:	2300      	movs	r3, #0
 801f1dc:	f7e1 fc20 	bl	8000a20 <__aeabi_dcmpgt>
 801f1e0:	2800      	cmp	r0, #0
 801f1e2:	d0ea      	beq.n	801f1ba <floor+0x42>
 801f1e4:	2c00      	cmp	r4, #0
 801f1e6:	bfbe      	ittt	lt
 801f1e8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801f1ec:	fa43 f606 	asrlt.w	r6, r3, r6
 801f1f0:	19a4      	addlt	r4, r4, r6
 801f1f2:	ea24 0408 	bic.w	r4, r4, r8
 801f1f6:	2500      	movs	r5, #0
 801f1f8:	e7df      	b.n	801f1ba <floor+0x42>
 801f1fa:	2e33      	cmp	r6, #51	; 0x33
 801f1fc:	dd0a      	ble.n	801f214 <floor+0x9c>
 801f1fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801f202:	d103      	bne.n	801f20c <floor+0x94>
 801f204:	f7e0 ffc6 	bl	8000194 <__adddf3>
 801f208:	4607      	mov	r7, r0
 801f20a:	460b      	mov	r3, r1
 801f20c:	4638      	mov	r0, r7
 801f20e:	4619      	mov	r1, r3
 801f210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f214:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801f218:	f04f 32ff 	mov.w	r2, #4294967295
 801f21c:	fa22 f808 	lsr.w	r8, r2, r8
 801f220:	ea18 0f00 	tst.w	r8, r0
 801f224:	d0f2      	beq.n	801f20c <floor+0x94>
 801f226:	a310      	add	r3, pc, #64	; (adr r3, 801f268 <floor+0xf0>)
 801f228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f22c:	f7e0 ffb2 	bl	8000194 <__adddf3>
 801f230:	2200      	movs	r2, #0
 801f232:	2300      	movs	r3, #0
 801f234:	f7e1 fbf4 	bl	8000a20 <__aeabi_dcmpgt>
 801f238:	2800      	cmp	r0, #0
 801f23a:	d0be      	beq.n	801f1ba <floor+0x42>
 801f23c:	2c00      	cmp	r4, #0
 801f23e:	da02      	bge.n	801f246 <floor+0xce>
 801f240:	2e14      	cmp	r6, #20
 801f242:	d103      	bne.n	801f24c <floor+0xd4>
 801f244:	3401      	adds	r4, #1
 801f246:	ea25 0508 	bic.w	r5, r5, r8
 801f24a:	e7b6      	b.n	801f1ba <floor+0x42>
 801f24c:	2301      	movs	r3, #1
 801f24e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801f252:	fa03 f606 	lsl.w	r6, r3, r6
 801f256:	4435      	add	r5, r6
 801f258:	42bd      	cmp	r5, r7
 801f25a:	bf38      	it	cc
 801f25c:	18e4      	addcc	r4, r4, r3
 801f25e:	e7f2      	b.n	801f246 <floor+0xce>
 801f260:	2500      	movs	r5, #0
 801f262:	462c      	mov	r4, r5
 801f264:	e7a9      	b.n	801f1ba <floor+0x42>
 801f266:	bf00      	nop
 801f268:	8800759c 	.word	0x8800759c
 801f26c:	7e37e43c 	.word	0x7e37e43c
 801f270:	bff00000 	.word	0xbff00000
 801f274:	000fffff 	.word	0x000fffff

0801f278 <_init>:
 801f278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f27a:	bf00      	nop
 801f27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f27e:	bc08      	pop	{r3}
 801f280:	469e      	mov	lr, r3
 801f282:	4770      	bx	lr

0801f284 <_fini>:
 801f284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f286:	bf00      	nop
 801f288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f28a:	bc08      	pop	{r3}
 801f28c:	469e      	mov	lr, r3
 801f28e:	4770      	bx	lr
