
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e4f0  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec4  0801e628  0801e628  0002e628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801f4ec  0801f4ec  0002f4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801f5ac  0801f5ac  00030178  2**0
                  CONTENTS
  5 .ARM          00000008  0801f5ac  0801f5ac  0002f5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801f5b4  0801f5b4  00030178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  0801f5b4  0801f5b4  0002f5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801f5bc  0801f5bc  0002f5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000178  20000000  0801f5c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000025fc  20000178  0801f738  00030178  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002774  0801f738  00032774  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030178  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000301a2  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004c062  00000000  00000000  000301e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b930  00000000  00000000  0007c247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003e50  00000000  00000000  00087b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002f63  00000000  00000000  0008b9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b19b  00000000  00000000  0008e92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004c743  00000000  00000000  000b9ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d93b7  00000000  00000000  00106209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000104dc  00000000  00000000  001df5c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  001efa9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000178 	.word	0x20000178
 8000154:	00000000 	.word	0x00000000
 8000158:	0801e610 	.word	0x0801e610

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000017c 	.word	0x2000017c
 8000174:	0801e610 	.word	0x0801e610

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_f2iz>:
 8000d40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d48:	d30f      	bcc.n	8000d6a <__aeabi_f2iz+0x2a>
 8000d4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d52:	d90d      	bls.n	8000d70 <__aeabi_f2iz+0x30>
 8000d54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	bf18      	it	ne
 8000d66:	4240      	negne	r0, r0
 8000d68:	4770      	bx	lr
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	4770      	bx	lr
 8000d70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d74:	d101      	bne.n	8000d7a <__aeabi_f2iz+0x3a>
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	d105      	bne.n	8000d86 <__aeabi_f2iz+0x46>
 8000d7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d7e:	bf08      	it	eq
 8000d80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr

08000d8c <__aeabi_uldivmod>:
 8000d8c:	b953      	cbnz	r3, 8000da4 <__aeabi_uldivmod+0x18>
 8000d8e:	b94a      	cbnz	r2, 8000da4 <__aeabi_uldivmod+0x18>
 8000d90:	2900      	cmp	r1, #0
 8000d92:	bf08      	it	eq
 8000d94:	2800      	cmpeq	r0, #0
 8000d96:	bf1c      	itt	ne
 8000d98:	f04f 31ff 	movne.w	r1, #4294967295
 8000d9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000da0:	f000 b970 	b.w	8001084 <__aeabi_idiv0>
 8000da4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dac:	f000 f806 	bl	8000dbc <__udivmoddi4>
 8000db0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db8:	b004      	add	sp, #16
 8000dba:	4770      	bx	lr

08000dbc <__udivmoddi4>:
 8000dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	9e08      	ldr	r6, [sp, #32]
 8000dc2:	460d      	mov	r5, r1
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	460f      	mov	r7, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d14a      	bne.n	8000e62 <__udivmoddi4+0xa6>
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	4694      	mov	ip, r2
 8000dd0:	d965      	bls.n	8000e9e <__udivmoddi4+0xe2>
 8000dd2:	fab2 f382 	clz	r3, r2
 8000dd6:	b143      	cbz	r3, 8000dea <__udivmoddi4+0x2e>
 8000dd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ddc:	f1c3 0220 	rsb	r2, r3, #32
 8000de0:	409f      	lsls	r7, r3
 8000de2:	fa20 f202 	lsr.w	r2, r0, r2
 8000de6:	4317      	orrs	r7, r2
 8000de8:	409c      	lsls	r4, r3
 8000dea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dee:	fa1f f58c 	uxth.w	r5, ip
 8000df2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000df6:	0c22      	lsrs	r2, r4, #16
 8000df8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e00:	fb01 f005 	mul.w	r0, r1, r5
 8000e04:	4290      	cmp	r0, r2
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x62>
 8000e08:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e10:	f080 811b 	bcs.w	800104a <__udivmoddi4+0x28e>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f240 8118 	bls.w	800104a <__udivmoddi4+0x28e>
 8000e1a:	3902      	subs	r1, #2
 8000e1c:	4462      	add	r2, ip
 8000e1e:	1a12      	subs	r2, r2, r0
 8000e20:	b2a4      	uxth	r4, r4
 8000e22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2e:	fb00 f505 	mul.w	r5, r0, r5
 8000e32:	42a5      	cmp	r5, r4
 8000e34:	d90a      	bls.n	8000e4c <__udivmoddi4+0x90>
 8000e36:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3e:	f080 8106 	bcs.w	800104e <__udivmoddi4+0x292>
 8000e42:	42a5      	cmp	r5, r4
 8000e44:	f240 8103 	bls.w	800104e <__udivmoddi4+0x292>
 8000e48:	4464      	add	r4, ip
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e50:	1b64      	subs	r4, r4, r5
 8000e52:	2100      	movs	r1, #0
 8000e54:	b11e      	cbz	r6, 8000e5e <__udivmoddi4+0xa2>
 8000e56:	40dc      	lsrs	r4, r3
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0xbc>
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	f000 80ec 	beq.w	8001044 <__udivmoddi4+0x288>
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000e72:	4608      	mov	r0, r1
 8000e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e78:	fab3 f183 	clz	r1, r3
 8000e7c:	2900      	cmp	r1, #0
 8000e7e:	d149      	bne.n	8000f14 <__udivmoddi4+0x158>
 8000e80:	42ab      	cmp	r3, r5
 8000e82:	d302      	bcc.n	8000e8a <__udivmoddi4+0xce>
 8000e84:	4282      	cmp	r2, r0
 8000e86:	f200 80f7 	bhi.w	8001078 <__udivmoddi4+0x2bc>
 8000e8a:	1a84      	subs	r4, r0, r2
 8000e8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	4617      	mov	r7, r2
 8000e94:	2e00      	cmp	r6, #0
 8000e96:	d0e2      	beq.n	8000e5e <__udivmoddi4+0xa2>
 8000e98:	e9c6 4700 	strd	r4, r7, [r6]
 8000e9c:	e7df      	b.n	8000e5e <__udivmoddi4+0xa2>
 8000e9e:	b902      	cbnz	r2, 8000ea2 <__udivmoddi4+0xe6>
 8000ea0:	deff      	udf	#255	; 0xff
 8000ea2:	fab2 f382 	clz	r3, r2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 808f 	bne.w	8000fca <__udivmoddi4+0x20e>
 8000eac:	1a8a      	subs	r2, r1, r2
 8000eae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb2:	fa1f fe8c 	uxth.w	lr, ip
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ebc:	fb07 2015 	mls	r0, r7, r5, r2
 8000ec0:	0c22      	lsrs	r2, r4, #16
 8000ec2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ec6:	fb0e f005 	mul.w	r0, lr, r5
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x124>
 8000ece:	eb1c 0202 	adds.w	r2, ip, r2
 8000ed2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ed6:	d202      	bcs.n	8000ede <__udivmoddi4+0x122>
 8000ed8:	4290      	cmp	r0, r2
 8000eda:	f200 80ca 	bhi.w	8001072 <__udivmoddi4+0x2b6>
 8000ede:	4645      	mov	r5, r8
 8000ee0:	1a12      	subs	r2, r2, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ee8:	fb07 2210 	mls	r2, r7, r0, r2
 8000eec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ef0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ef4:	45a6      	cmp	lr, r4
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x14e>
 8000ef8:	eb1c 0404 	adds.w	r4, ip, r4
 8000efc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f00:	d202      	bcs.n	8000f08 <__udivmoddi4+0x14c>
 8000f02:	45a6      	cmp	lr, r4
 8000f04:	f200 80ba 	bhi.w	800107c <__udivmoddi4+0x2c0>
 8000f08:	4610      	mov	r0, r2
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f12:	e79f      	b.n	8000e54 <__udivmoddi4+0x98>
 8000f14:	f1c1 0720 	rsb	r7, r1, #32
 8000f18:	408b      	lsls	r3, r1
 8000f1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f22:	fa05 f401 	lsl.w	r4, r5, r1
 8000f26:	fa20 f307 	lsr.w	r3, r0, r7
 8000f2a:	40fd      	lsrs	r5, r7
 8000f2c:	4323      	orrs	r3, r4
 8000f2e:	fa00 f901 	lsl.w	r9, r0, r1
 8000f32:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000f36:	fa1f fe8c 	uxth.w	lr, ip
 8000f3a:	fbb5 f8f0 	udiv	r8, r5, r0
 8000f3e:	0c1c      	lsrs	r4, r3, #16
 8000f40:	fb00 5518 	mls	r5, r0, r8, r5
 8000f44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f48:	fb08 f50e 	mul.w	r5, r8, lr
 8000f4c:	42a5      	cmp	r5, r4
 8000f4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f52:	d90b      	bls.n	8000f6c <__udivmoddi4+0x1b0>
 8000f54:	eb1c 0404 	adds.w	r4, ip, r4
 8000f58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f5c:	f080 8087 	bcs.w	800106e <__udivmoddi4+0x2b2>
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	f240 8084 	bls.w	800106e <__udivmoddi4+0x2b2>
 8000f66:	f1a8 0802 	sub.w	r8, r8, #2
 8000f6a:	4464      	add	r4, ip
 8000f6c:	1b64      	subs	r4, r4, r5
 8000f6e:	b29d      	uxth	r5, r3
 8000f70:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f74:	fb00 4413 	mls	r4, r0, r3, r4
 8000f78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f80:	45a6      	cmp	lr, r4
 8000f82:	d908      	bls.n	8000f96 <__udivmoddi4+0x1da>
 8000f84:	eb1c 0404 	adds.w	r4, ip, r4
 8000f88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f8c:	d26b      	bcs.n	8001066 <__udivmoddi4+0x2aa>
 8000f8e:	45a6      	cmp	lr, r4
 8000f90:	d969      	bls.n	8001066 <__udivmoddi4+0x2aa>
 8000f92:	3b02      	subs	r3, #2
 8000f94:	4464      	add	r4, ip
 8000f96:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000f9a:	fba0 8302 	umull	r8, r3, r0, r2
 8000f9e:	eba4 040e 	sub.w	r4, r4, lr
 8000fa2:	429c      	cmp	r4, r3
 8000fa4:	46c6      	mov	lr, r8
 8000fa6:	461d      	mov	r5, r3
 8000fa8:	d355      	bcc.n	8001056 <__udivmoddi4+0x29a>
 8000faa:	d052      	beq.n	8001052 <__udivmoddi4+0x296>
 8000fac:	b156      	cbz	r6, 8000fc4 <__udivmoddi4+0x208>
 8000fae:	ebb9 030e 	subs.w	r3, r9, lr
 8000fb2:	eb64 0405 	sbc.w	r4, r4, r5
 8000fb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000fba:	40cb      	lsrs	r3, r1
 8000fbc:	40cc      	lsrs	r4, r1
 8000fbe:	431f      	orrs	r7, r3
 8000fc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fca:	f1c3 0120 	rsb	r1, r3, #32
 8000fce:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fd2:	fa20 f201 	lsr.w	r2, r0, r1
 8000fd6:	fa25 f101 	lsr.w	r1, r5, r1
 8000fda:	409d      	lsls	r5, r3
 8000fdc:	432a      	orrs	r2, r5
 8000fde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fe2:	fa1f fe8c 	uxth.w	lr, ip
 8000fe6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fea:	fb07 1510 	mls	r5, r7, r0, r1
 8000fee:	0c11      	lsrs	r1, r2, #16
 8000ff0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ff4:	fb00 f50e 	mul.w	r5, r0, lr
 8000ff8:	428d      	cmp	r5, r1
 8000ffa:	fa04 f403 	lsl.w	r4, r4, r3
 8000ffe:	d908      	bls.n	8001012 <__udivmoddi4+0x256>
 8001000:	eb1c 0101 	adds.w	r1, ip, r1
 8001004:	f100 38ff 	add.w	r8, r0, #4294967295
 8001008:	d22f      	bcs.n	800106a <__udivmoddi4+0x2ae>
 800100a:	428d      	cmp	r5, r1
 800100c:	d92d      	bls.n	800106a <__udivmoddi4+0x2ae>
 800100e:	3802      	subs	r0, #2
 8001010:	4461      	add	r1, ip
 8001012:	1b49      	subs	r1, r1, r5
 8001014:	b292      	uxth	r2, r2
 8001016:	fbb1 f5f7 	udiv	r5, r1, r7
 800101a:	fb07 1115 	mls	r1, r7, r5, r1
 800101e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001022:	fb05 f10e 	mul.w	r1, r5, lr
 8001026:	4291      	cmp	r1, r2
 8001028:	d908      	bls.n	800103c <__udivmoddi4+0x280>
 800102a:	eb1c 0202 	adds.w	r2, ip, r2
 800102e:	f105 38ff 	add.w	r8, r5, #4294967295
 8001032:	d216      	bcs.n	8001062 <__udivmoddi4+0x2a6>
 8001034:	4291      	cmp	r1, r2
 8001036:	d914      	bls.n	8001062 <__udivmoddi4+0x2a6>
 8001038:	3d02      	subs	r5, #2
 800103a:	4462      	add	r2, ip
 800103c:	1a52      	subs	r2, r2, r1
 800103e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001042:	e739      	b.n	8000eb8 <__udivmoddi4+0xfc>
 8001044:	4631      	mov	r1, r6
 8001046:	4630      	mov	r0, r6
 8001048:	e709      	b.n	8000e5e <__udivmoddi4+0xa2>
 800104a:	4639      	mov	r1, r7
 800104c:	e6e7      	b.n	8000e1e <__udivmoddi4+0x62>
 800104e:	4610      	mov	r0, r2
 8001050:	e6fc      	b.n	8000e4c <__udivmoddi4+0x90>
 8001052:	45c1      	cmp	r9, r8
 8001054:	d2aa      	bcs.n	8000fac <__udivmoddi4+0x1f0>
 8001056:	ebb8 0e02 	subs.w	lr, r8, r2
 800105a:	eb63 050c 	sbc.w	r5, r3, ip
 800105e:	3801      	subs	r0, #1
 8001060:	e7a4      	b.n	8000fac <__udivmoddi4+0x1f0>
 8001062:	4645      	mov	r5, r8
 8001064:	e7ea      	b.n	800103c <__udivmoddi4+0x280>
 8001066:	4603      	mov	r3, r0
 8001068:	e795      	b.n	8000f96 <__udivmoddi4+0x1da>
 800106a:	4640      	mov	r0, r8
 800106c:	e7d1      	b.n	8001012 <__udivmoddi4+0x256>
 800106e:	46d0      	mov	r8, sl
 8001070:	e77c      	b.n	8000f6c <__udivmoddi4+0x1b0>
 8001072:	3d02      	subs	r5, #2
 8001074:	4462      	add	r2, ip
 8001076:	e733      	b.n	8000ee0 <__udivmoddi4+0x124>
 8001078:	4608      	mov	r0, r1
 800107a:	e70b      	b.n	8000e94 <__udivmoddi4+0xd8>
 800107c:	4464      	add	r4, ip
 800107e:	3802      	subs	r0, #2
 8001080:	e743      	b.n	8000f0a <__udivmoddi4+0x14e>
 8001082:	bf00      	nop

08001084 <__aeabi_idiv0>:
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <CS_Select>:
#define NRF24_CSN_PORT  GPIOB
#define NRF24_CSN_PIN   GPIO_PIN_9


void CS_Select (void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001092:	4802      	ldr	r0, [pc, #8]	; (800109c <CS_Select+0x14>)
 8001094:	f004 fff8 	bl	8006088 <HAL_GPIO_WritePin>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	48000400 	.word	0x48000400

080010a0 <CS_UnSelect>:

void CS_UnSelect (void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010aa:	4802      	ldr	r0, [pc, #8]	; (80010b4 <CS_UnSelect+0x14>)
 80010ac:	f004 ffec 	bl	8006088 <HAL_GPIO_WritePin>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	48000400 	.word	0x48000400

080010b8 <CE_Enable>:


void CE_Enable (void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c2:	4802      	ldr	r0, [pc, #8]	; (80010cc <CE_Enable+0x14>)
 80010c4:	f004 ffe0 	bl	8006088 <HAL_GPIO_WritePin>
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	48000400 	.word	0x48000400

080010d0 <CE_Disable>:

void CE_Disable (void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010da:	4802      	ldr	r0, [pc, #8]	; (80010e4 <CE_Disable+0x14>)
 80010dc:	f004 ffd4 	bl	8006088 <HAL_GPIO_WritePin>
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	48000400 	.word	0x48000400

080010e8 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	460a      	mov	r2, r1
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	4613      	mov	r3, r2
 80010f6:	71bb      	strb	r3, [r7, #6]
	//HAL_StatusTypeDef checkOK;
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f043 0320 	orr.w	r3, r3, #32
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8001102:	79bb      	ldrb	r3, [r7, #6]
 8001104:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001106:	f7ff ffbf 	bl	8001088 <CS_Select>

//	checkOK = HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800110a:	f7ff ffc9 	bl	80010a0 <CS_UnSelect>
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	f043 0320 	orr.w	r3, r3, #32
 800112c:	b2db      	uxtb	r3, r3
 800112e:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001130:	f7ff ffaa 	bl	8001088 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8001134:	f107 0114 	add.w	r1, r7, #20
 8001138:	2364      	movs	r3, #100	; 0x64
 800113a:	2201      	movs	r2, #1
 800113c:	4808      	ldr	r0, [pc, #32]	; (8001160 <nrf24_WriteRegMulti+0x48>)
 800113e:	f007 fd55 	bl	8008bec <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	b29a      	uxth	r2, r3
 8001146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114a:	68b9      	ldr	r1, [r7, #8]
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <nrf24_WriteRegMulti+0x48>)
 800114e:	f007 fd4d 	bl	8008bec <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001152:	f7ff ffa5 	bl	80010a0 <CS_UnSelect>
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000334 	.word	0x20000334

08001164 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001172:	f7ff ff89 	bl	8001088 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8001176:	1df9      	adds	r1, r7, #7
 8001178:	2364      	movs	r3, #100	; 0x64
 800117a:	2201      	movs	r2, #1
 800117c:	4808      	ldr	r0, [pc, #32]	; (80011a0 <nrf24_ReadReg+0x3c>)
 800117e:	f007 fd35 	bl	8008bec <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8001182:	f107 010f 	add.w	r1, r7, #15
 8001186:	2364      	movs	r3, #100	; 0x64
 8001188:	2201      	movs	r2, #1
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <nrf24_ReadReg+0x3c>)
 800118c:	f007 febe 	bl	8008f0c <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001190:	f7ff ff86 	bl	80010a0 <CS_UnSelect>

	return data;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000334 	.word	0x20000334

080011a4 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80011b2:	f7ff ff69 	bl	8001088 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80011b6:	f107 010f 	add.w	r1, r7, #15
 80011ba:	2364      	movs	r3, #100	; 0x64
 80011bc:	2201      	movs	r2, #1
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <nrf24_ReadReg_Multi+0x3c>)
 80011c0:	f007 fd14 	bl	8008bec <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	4804      	ldr	r0, [pc, #16]	; (80011e0 <nrf24_ReadReg_Multi+0x3c>)
 80011d0:	f007 fe9c 	bl	8008f0c <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80011d4:	f7ff ff64 	bl	80010a0 <CS_UnSelect>
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000334 	.word	0x20000334

080011e4 <nrf24_reset>:
	// Pull the CS HIGH to release the device
	CS_UnSelect();
}

void nrf24_reset(uint8_t REG)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b07      	cmp	r3, #7
 80011f2:	d104      	bne.n	80011fe <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80011f4:	2100      	movs	r1, #0
 80011f6:	2007      	movs	r0, #7
 80011f8:	f7ff ff76 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80011fc:	e090      	b.n	8001320 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2b17      	cmp	r3, #23
 8001202:	d104      	bne.n	800120e <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001204:	2111      	movs	r1, #17
 8001206:	2017      	movs	r0, #23
 8001208:	f7ff ff6e 	bl	80010e8 <nrf24_WriteReg>
}
 800120c:	e088      	b.n	8001320 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 800120e:	2108      	movs	r1, #8
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff ff69 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8001216:	213f      	movs	r1, #63	; 0x3f
 8001218:	2001      	movs	r0, #1
 800121a:	f7ff ff65 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800121e:	2103      	movs	r1, #3
 8001220:	2002      	movs	r0, #2
 8001222:	f7ff ff61 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8001226:	2103      	movs	r1, #3
 8001228:	2003      	movs	r0, #3
 800122a:	f7ff ff5d 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 800122e:	2103      	movs	r1, #3
 8001230:	2004      	movs	r0, #4
 8001232:	f7ff ff59 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8001236:	2102      	movs	r1, #2
 8001238:	2005      	movs	r0, #5
 800123a:	f7ff ff55 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 800123e:	210e      	movs	r1, #14
 8001240:	2006      	movs	r0, #6
 8001242:	f7ff ff51 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8001246:	2100      	movs	r1, #0
 8001248:	2007      	movs	r0, #7
 800124a:	f7ff ff4d 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 800124e:	2100      	movs	r1, #0
 8001250:	2008      	movs	r0, #8
 8001252:	f7ff ff49 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8001256:	2100      	movs	r1, #0
 8001258:	2009      	movs	r0, #9
 800125a:	f7ff ff45 	bl	80010e8 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800125e:	4a32      	ldr	r2, [pc, #200]	; (8001328 <nrf24_reset+0x144>)
 8001260:	f107 0318 	add.w	r3, r7, #24
 8001264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001268:	6018      	str	r0, [r3, #0]
 800126a:	3304      	adds	r3, #4
 800126c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800126e:	f107 0318 	add.w	r3, r7, #24
 8001272:	2205      	movs	r2, #5
 8001274:	4619      	mov	r1, r3
 8001276:	200a      	movs	r0, #10
 8001278:	f7ff ff4e 	bl	8001118 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 800127c:	4a2b      	ldr	r2, [pc, #172]	; (800132c <nrf24_reset+0x148>)
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001286:	6018      	str	r0, [r3, #0]
 8001288:	3304      	adds	r3, #4
 800128a:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	2205      	movs	r2, #5
 8001292:	4619      	mov	r1, r3
 8001294:	200b      	movs	r0, #11
 8001296:	f7ff ff3f 	bl	8001118 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800129a:	21c3      	movs	r1, #195	; 0xc3
 800129c:	200c      	movs	r0, #12
 800129e:	f7ff ff23 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80012a2:	21c4      	movs	r1, #196	; 0xc4
 80012a4:	200d      	movs	r0, #13
 80012a6:	f7ff ff1f 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80012aa:	21c5      	movs	r1, #197	; 0xc5
 80012ac:	200e      	movs	r0, #14
 80012ae:	f7ff ff1b 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80012b2:	21c6      	movs	r1, #198	; 0xc6
 80012b4:	200f      	movs	r0, #15
 80012b6:	f7ff ff17 	bl	80010e8 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80012ba:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <nrf24_reset+0x144>)
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012c4:	6018      	str	r0, [r3, #0]
 80012c6:	3304      	adds	r3, #4
 80012c8:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	2205      	movs	r2, #5
 80012d0:	4619      	mov	r1, r3
 80012d2:	2010      	movs	r0, #16
 80012d4:	f7ff ff20 	bl	8001118 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80012d8:	2100      	movs	r1, #0
 80012da:	2011      	movs	r0, #17
 80012dc:	f7ff ff04 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80012e0:	2100      	movs	r1, #0
 80012e2:	2012      	movs	r0, #18
 80012e4:	f7ff ff00 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80012e8:	2100      	movs	r1, #0
 80012ea:	2013      	movs	r0, #19
 80012ec:	f7ff fefc 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80012f0:	2100      	movs	r1, #0
 80012f2:	2014      	movs	r0, #20
 80012f4:	f7ff fef8 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80012f8:	2100      	movs	r1, #0
 80012fa:	2015      	movs	r0, #21
 80012fc:	f7ff fef4 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8001300:	2100      	movs	r1, #0
 8001302:	2016      	movs	r0, #22
 8001304:	f7ff fef0 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001308:	2111      	movs	r1, #17
 800130a:	2017      	movs	r0, #23
 800130c:	f7ff feec 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8001310:	2100      	movs	r1, #0
 8001312:	201c      	movs	r0, #28
 8001314:	f7ff fee8 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8001318:	2100      	movs	r1, #0
 800131a:	201d      	movs	r0, #29
 800131c:	f7ff fee4 	bl	80010e8 <nrf24_WriteReg>
}
 8001320:	bf00      	nop
 8001322:	3720      	adds	r7, #32
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	0801e628 	.word	0x0801e628
 800132c:	0801e630 	.word	0x0801e630

08001330 <NRF24_Init>:




void NRF24_Init (void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8001334:	f7ff fecc 	bl	80010d0 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff ff53 	bl	80011e4 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 800133e:	2100      	movs	r1, #0
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff fed1 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8001346:	2100      	movs	r1, #0
 8001348:	2001      	movs	r0, #1
 800134a:	f7ff fecd 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 800134e:	2100      	movs	r1, #0
 8001350:	2002      	movs	r0, #2
 8001352:	f7ff fec9 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8001356:	2103      	movs	r1, #3
 8001358:	2003      	movs	r0, #3
 800135a:	f7ff fec5 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 800135e:	2100      	movs	r1, #0
 8001360:	2004      	movs	r0, #4
 8001362:	f7ff fec1 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8001366:	2100      	movs	r1, #0
 8001368:	2005      	movs	r0, #5
 800136a:	f7ff febd 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 800136e:	210e      	movs	r1, #14
 8001370:	2006      	movs	r0, #6
 8001372:	f7ff feb9 	bl	80010e8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001376:	f7ff fe9f 	bl	80010b8 <CE_Enable>

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}

0800137e <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b084      	sub	sp, #16
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	460b      	mov	r3, r1
 8001388:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800138a:	f7ff fea1 	bl	80010d0 <CE_Disable>

	nrf24_reset (STATUS);
 800138e:	2007      	movs	r0, #7
 8001390:	f7ff ff28 	bl	80011e4 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	4619      	mov	r1, r3
 8001398:	2005      	movs	r0, #5
 800139a:	f7ff fea5 	bl	80010e8 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 800139e:	2002      	movs	r0, #2
 80013a0:	f7ff fee0 	bl	8001164 <nrf24_ReadReg>
 80013a4:	4603      	mov	r3, r0
 80013a6:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	f043 0304 	orr.w	r3, r3, #4
 80013ae:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	4619      	mov	r1, r3
 80013b4:	2002      	movs	r0, #2
 80013b6:	f7ff fe97 	bl	80010e8 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 80013ba:	2205      	movs	r2, #5
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	200b      	movs	r0, #11
 80013c0:	f7ff feaa 	bl	8001118 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 80013c4:	21ee      	movs	r1, #238	; 0xee
 80013c6:	200c      	movs	r0, #12
 80013c8:	f7ff fe8e 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 80013cc:	2120      	movs	r1, #32
 80013ce:	2013      	movs	r0, #19
 80013d0:	f7ff fe8a 	bl	80010e8 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff fec5 	bl	8001164 <nrf24_ReadReg>
 80013da:	4603      	mov	r3, r0
 80013dc:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 80013de:	7bbb      	ldrb	r3, [r7, #14]
 80013e0:	f043 0303 	orr.w	r3, r3, #3
 80013e4:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 80013e6:	7bbb      	ldrb	r3, [r7, #14]
 80013e8:	4619      	mov	r1, r3
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff fe7c 	bl	80010e8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80013f0:	f7ff fe62 	bl	80010b8 <CE_Enable>
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8001404:	2007      	movs	r0, #7
 8001406:	f7ff fead 	bl	8001164 <nrf24_ReadReg>
 800140a:	4603      	mov	r3, r0
 800140c:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00b      	beq.n	8001430 <isDataAvailable+0x34>
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4013      	ands	r3, r2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8001424:	2140      	movs	r1, #64	; 0x40
 8001426:	2007      	movs	r0, #7
 8001428:	f7ff fe5e 	bl	80010e8 <nrf24_WriteReg>

		return 1;
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <isDataAvailable+0x36>
	}

	return 0;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 800143a:	b590      	push	{r4, r7, lr}
 800143c:	b085      	sub	sp, #20
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	e00c      	b.n	8001462 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	b2d9      	uxtb	r1, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	18d4      	adds	r4, r2, r3
 8001452:	4608      	mov	r0, r1
 8001454:	f7ff fe86 	bl	8001164 <nrf24_ReadReg>
 8001458:	4603      	mov	r3, r0
 800145a:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3301      	adds	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2b09      	cmp	r3, #9
 8001466:	ddef      	ble.n	8001448 <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	330a      	adds	r3, #10
 800146c:	2205      	movs	r2, #5
 800146e:	4619      	mov	r1, r3
 8001470:	200a      	movs	r0, #10
 8001472:	f7ff fe97 	bl	80011a4 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	330f      	adds	r3, #15
 800147a:	2205      	movs	r2, #5
 800147c:	4619      	mov	r1, r3
 800147e:	200b      	movs	r0, #11
 8001480:	f7ff fe90 	bl	80011a4 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f103 0414 	add.w	r4, r3, #20
 800148a:	200c      	movs	r0, #12
 800148c:	f7ff fe6a 	bl	8001164 <nrf24_ReadReg>
 8001490:	4603      	mov	r3, r0
 8001492:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f103 0415 	add.w	r4, r3, #21
 800149a:	200d      	movs	r0, #13
 800149c:	f7ff fe62 	bl	8001164 <nrf24_ReadReg>
 80014a0:	4603      	mov	r3, r0
 80014a2:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f103 0416 	add.w	r4, r3, #22
 80014aa:	200e      	movs	r0, #14
 80014ac:	f7ff fe5a 	bl	8001164 <nrf24_ReadReg>
 80014b0:	4603      	mov	r3, r0
 80014b2:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f103 0417 	add.w	r4, r3, #23
 80014ba:	200f      	movs	r0, #15
 80014bc:	f7ff fe52 	bl	8001164 <nrf24_ReadReg>
 80014c0:	4603      	mov	r3, r0
 80014c2:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3318      	adds	r3, #24
 80014c8:	2205      	movs	r2, #5
 80014ca:	4619      	mov	r1, r3
 80014cc:	200a      	movs	r0, #10
 80014ce:	f7ff fe69 	bl	80011a4 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 80014d2:	231d      	movs	r3, #29
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	e00e      	b.n	80014f6 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	3b0c      	subs	r3, #12
 80014de:	b2d9      	uxtb	r1, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	18d4      	adds	r4, r2, r3
 80014e6:	4608      	mov	r0, r1
 80014e8:	f7ff fe3c 	bl	8001164 <nrf24_ReadReg>
 80014ec:	4603      	mov	r3, r0
 80014ee:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	3301      	adds	r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	2b25      	cmp	r3, #37	; 0x25
 80014fa:	dded      	ble.n	80014d8 <NRF24_ReadAll+0x9e>
	}

}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	bd90      	pop	{r4, r7, pc}

08001506 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001506:	b480      	push	{r7}
 8001508:	b085      	sub	sp, #20
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800150e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001512:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001514:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4313      	orrs	r3, r2
 800151c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800151e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001522:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4013      	ands	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800153e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001542:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	43db      	mvns	r3, r3
 8001548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800154c:	4013      	ands	r3, r2
 800154e:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
	...

0800155c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <MX_ADC_Init+0x94>)
 8001562:	4a24      	ldr	r2, [pc, #144]	; (80015f4 <MX_ADC_Init+0x98>)
 8001564:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <MX_ADC_Init+0x94>)
 8001568:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800156c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <MX_ADC_Init+0x94>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <MX_ADC_Init+0x94>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_ADC_Init+0x94>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <MX_ADC_Init+0x94>)
 8001582:	2204      	movs	r2, #4
 8001584:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <MX_ADC_Init+0x94>)
 8001588:	2200      	movs	r2, #0
 800158a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <MX_ADC_Init+0x94>)
 800158e:	2200      	movs	r2, #0
 8001590:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <MX_ADC_Init+0x94>)
 8001594:	2200      	movs	r2, #0
 8001596:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_ADC_Init+0x94>)
 800159a:	2201      	movs	r2, #1
 800159c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_ADC_Init+0x94>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <MX_ADC_Init+0x94>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_ADC_Init+0x94>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_ADC_Init+0x94>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <MX_ADC_Init+0x94>)
 80015bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015c0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_ADC_Init+0x94>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_ADC_Init+0x94>)
 80015ca:	2207      	movs	r2, #7
 80015cc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_ADC_Init+0x94>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_ADC_Init+0x94>)
 80015d8:	2200      	movs	r2, #0
 80015da:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_ADC_Init+0x94>)
 80015de:	f002 fc3b 	bl	8003e58 <HAL_ADC_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_ADC_Init+0x90>
  {
    Error_Handler();
 80015e8:	f000 fdba 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000194 	.word	0x20000194
 80015f4:	40012400 	.word	0x40012400

080015f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a05      	ldr	r2, [pc, #20]	; (800161c <HAL_ADC_MspInit+0x24>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d103      	bne.n	8001612 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800160a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800160e:	f7ff ff7a 	bl	8001506 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40012400 	.word	0x40012400

08001620 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a05      	ldr	r2, [pc, #20]	; (8001644 <HAL_ADC_MspDeInit+0x24>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d103      	bne.n	800163a <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001632:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001636:	f7ff ff7e 	bl	8001536 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40012400 	.word	0x40012400

08001648 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <SYS_InitMeasurement+0x14>)
 800164e:	4a04      	ldr	r2, [pc, #16]	; (8001660 <SYS_InitMeasurement+0x18>)
 8001650:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000194 	.word	0x20000194
 8001660:	40012400 	.word	0x40012400

08001664 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001672:	4813      	ldr	r0, [pc, #76]	; (80016c0 <SYS_GetBatteryLevel+0x5c>)
 8001674:	f000 f82a 	bl	80016cc <ADC_ReadChannels>
 8001678:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	80fb      	strh	r3, [r7, #6]
 8001684:	e016      	b.n	80016b4 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <SYS_GetBatteryLevel+0x60>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800168e:	4293      	cmp	r3, r2
 8001690:	d00b      	beq.n	80016aa <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <SYS_GetBatteryLevel+0x60>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	f640 43e4 	movw	r3, #3300	; 0xce4
 800169c:	fb03 f202 	mul.w	r2, r3, r2
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	80fb      	strh	r3, [r7, #6]
 80016a8:	e004      	b.n	80016b4 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80016aa:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <SYS_GetBatteryLevel+0x64>)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80016b4:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	b4002000 	.word	0xb4002000
 80016c4:	1fff75aa 	.word	0x1fff75aa
 80016c8:	004c08d8 	.word	0x004c08d8

080016cc <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80016e4:	f7ff ff3a 	bl	800155c <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80016e8:	481a      	ldr	r0, [pc, #104]	; (8001754 <ADC_ReadChannels+0x88>)
 80016ea:	f003 f9e4 	bl	8004ab6 <HAL_ADCEx_Calibration_Start>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80016f4:	f000 fd34 	bl	8002160 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001700:	2300      	movs	r3, #0
 8001702:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	4619      	mov	r1, r3
 800170a:	4812      	ldr	r0, [pc, #72]	; (8001754 <ADC_ReadChannels+0x88>)
 800170c:	f002 fef0 	bl	80044f0 <HAL_ADC_ConfigChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001716:	f000 fd23 	bl	8002160 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800171a:	480e      	ldr	r0, [pc, #56]	; (8001754 <ADC_ReadChannels+0x88>)
 800171c:	f002 fdcc 	bl	80042b8 <HAL_ADC_Start>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001726:	f000 fd1b 	bl	8002160 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800172a:	f04f 31ff 	mov.w	r1, #4294967295
 800172e:	4809      	ldr	r0, [pc, #36]	; (8001754 <ADC_ReadChannels+0x88>)
 8001730:	f002 fe3a 	bl	80043a8 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001734:	4807      	ldr	r0, [pc, #28]	; (8001754 <ADC_ReadChannels+0x88>)
 8001736:	f002 fe05 	bl	8004344 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800173a:	4806      	ldr	r0, [pc, #24]	; (8001754 <ADC_ReadChannels+0x88>)
 800173c:	f002 fecb 	bl	80044d6 <HAL_ADC_GetValue>
 8001740:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001742:	4804      	ldr	r0, [pc, #16]	; (8001754 <ADC_ReadChannels+0x88>)
 8001744:	f002 fd3c 	bl	80041c0 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001748:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000194 	.word	0x20000194

08001758 <LL_AHB1_GRP1_EnableClock>:
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001764:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001766:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4313      	orrs	r3, r2
 800176e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001774:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4013      	ands	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800177c:	68fb      	ldr	r3, [r7, #12]
}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800178c:	2004      	movs	r0, #4
 800178e:	f7ff ffe3 	bl	8001758 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001792:	2001      	movs	r0, #1
 8001794:	f7ff ffe0 	bl	8001758 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	2102      	movs	r1, #2
 800179c:	200b      	movs	r0, #11
 800179e:	f003 fb30 	bl	8004e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017a2:	200b      	movs	r0, #11
 80017a4:	f003 fb47 	bl	8004e36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	200c      	movs	r0, #12
 80017ae:	f003 fb28 	bl	8004e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80017b2:	200c      	movs	r0, #12
 80017b4:	f003 fb3f 	bl	8004e36 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2100      	movs	r1, #0
 80017bc:	203d      	movs	r0, #61	; 0x3d
 80017be:	f003 fb20 	bl	8004e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 80017c2:	203d      	movs	r0, #61	; 0x3d
 80017c4:	f003 fb37 	bl	8004e36 <HAL_NVIC_EnableIRQ>

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}

080017cc <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017dc:	d101      	bne.n	80017e2 <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 80017e2:	2300      	movs	r3, #0
#endif
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	58004000 	.word	0x58004000

080017f0 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	; 0x30
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t page_start_index = PAGE(address);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001808:	4b56      	ldr	r3, [pc, #344]	; (8001964 <FLASH_IF_Write+0x174>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0299      	lsls	r1, r3, #10
 800180e:	4b56      	ldr	r3, [pc, #344]	; (8001968 <FLASH_IF_Write+0x178>)
 8001810:	400b      	ands	r3, r1
 8001812:	fbb2 f1f3 	udiv	r1, r2, r3
 8001816:	fb01 f303 	mul.w	r3, r1, r3
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	0adb      	lsrs	r3, r3, #11
 800181e:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800182a:	3b01      	subs	r3, #1
 800182c:	4a4d      	ldr	r2, [pc, #308]	; (8001964 <FLASH_IF_Write+0x174>)
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	0291      	lsls	r1, r2, #10
 8001832:	4a4d      	ldr	r2, [pc, #308]	; (8001968 <FLASH_IF_Write+0x178>)
 8001834:	400a      	ands	r2, r1
 8001836:	fbb3 f1f2 	udiv	r1, r3, r2
 800183a:	fb01 f202 	mul.w	r2, r1, r2
 800183e:	1a9b      	subs	r3, r3, r2
 8001840:	0adb      	lsrs	r3, r3, #11
 8001842:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t curr_dest_addr = address;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d009      	beq.n	800186a <FLASH_IF_Write+0x7a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	2b00      	cmp	r3, #0
 800185e:	d104      	bne.n	800186a <FLASH_IF_Write+0x7a>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	2b00      	cmp	r3, #0
 8001868:	d002      	beq.n	8001870 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 800186a:	f06f 0304 	mvn.w	r3, #4
 800186e:	e074      	b.n	800195a <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001870:	4b3e      	ldr	r3, [pc, #248]	; (800196c <FLASH_IF_Write+0x17c>)
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	2b00      	cmp	r3, #0
 8001876:	da02      	bge.n	800187e <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 8001878:	f06f 0303 	mvn.w	r3, #3
 800187c:	e06d      	b.n	800195a <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	429a      	cmp	r2, r3
 8001884:	d005      	beq.n	8001892 <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800188c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	e05b      	b.n	8001950 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800189c:	4618      	mov	r0, r3
 800189e:	f000 f8f8 	bl	8001a92 <FLASH_IF_IsEmpty>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d037      	beq.n	8001918 <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 80018ae:	f06f 0304 	mvn.w	r3, #4
 80018b2:	e052      	b.n	800195a <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80018ba:	02db      	lsls	r3, r3, #11
 80018bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018c0:	4619      	mov	r1, r3
 80018c2:	6838      	ldr	r0, [r7, #0]
 80018c4:	f01b face 	bl	801ce64 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	4413      	add	r3, r2
 80018d2:	6a39      	ldr	r1, [r7, #32]
 80018d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018d6:	b292      	uxth	r2, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f01b fac3 	bl	801ce64 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 80018de:	2200      	movs	r2, #0
 80018e0:	2101      	movs	r1, #1
 80018e2:	69f8      	ldr	r0, [r7, #28]
 80018e4:	f000 f865 	bl	80019b2 <FLASH_IF_EraseByPages>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 80018ee:	f06f 0301 	mvn.w	r3, #1
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 80018f4:	e030      	b.n	8001958 <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80018fc:	02db      	lsls	r3, r3, #11
 80018fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001902:	6839      	ldr	r1, [r7, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f000 f88a 	bl	8001a1e <FLASH_IF_Write_Buffer>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d010      	beq.n	8001932 <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 8001910:	f06f 0302 	mvn.w	r3, #2
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
          break; /* exit for loop */
 8001916:	e01f      	b.n	8001958 <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800191c:	4619      	mov	r1, r3
 800191e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001920:	f000 f87d 	bl	8001a1e <FLASH_IF_Write_Buffer>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 800192a:	f06f 0302 	mvn.w	r3, #2
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 8001930:	e012      	b.n	8001958 <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 8001932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001936:	4413      	add	r3, r2
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
    curr_src_addr += curr_size;
 800193a:	6a3a      	ldr	r2, [r7, #32]
 800193c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193e:	4413      	add	r3, r2
 8001940:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	62bb      	str	r3, [r7, #40]	; 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3301      	adds	r3, #1
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	429a      	cmp	r2, r3
 8001956:	d99f      	bls.n	8001898 <FLASH_IF_Write+0xa8>
  }

  return status;
 8001958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 800195a:	4618      	mov	r0, r3
 800195c:	3730      	adds	r7, #48	; 0x30
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	1fff75e0 	.word	0x1fff75e0
 8001968:	03fffc00 	.word	0x03fffc00
 800196c:	58004000 	.word	0x58004000

08001970 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 800197c:	e00b      	b.n	8001996 <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 800197e:	bf00      	nop
 8001980:	f7ff ff24 	bl	80017cc <LL_FLASH_IsActiveFlag_OperationSuspended>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1fa      	bne.n	8001980 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 800198a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800198e:	68f9      	ldr	r1, [r7, #12]
 8001990:	2001      	movs	r0, #1
 8001992:	f003 fee9 	bl	8005768 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019a0:	4299      	cmp	r1, r3
 80019a2:	bf08      	it	eq
 80019a4:	4290      	cmpeq	r0, r2
 80019a6:	d1ea      	bne.n	800197e <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 80019a8:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b08a      	sub	sp, #40	; 0x28
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	460b      	mov	r3, r1
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 80019c0:	2302      	movs	r3, #2
 80019c2:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 80019c8:	897b      	ldrh	r3, [r7, #10]
 80019ca:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d008      	beq.n	80019e4 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 80019d2:	f107 0318 	add.w	r3, r7, #24
 80019d6:	4618      	mov	r0, r3
 80019d8:	f004 f864 	bl	8005aa4 <HAL_FLASHEx_Erase_IT>
 80019dc:	4603      	mov	r3, r0
 80019de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019e2:	e00a      	b.n	80019fa <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 80019e4:	f107 0214 	add.w	r2, r7, #20
 80019e8:	f107 0318 	add.w	r3, r7, #24
 80019ec:	4611      	mov	r1, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f004 f800 	bl	80059f4 <HAL_FLASHEx_Erase>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 80019fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d008      	beq.n	8001a14 <FLASH_IF_EraseByPages+0x62>
 8001a02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d101      	bne.n	8001a0e <FLASH_IF_EraseByPages+0x5c>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e003      	b.n	8001a16 <FLASH_IF_EraseByPages+0x64>
 8001a0e:	f06f 0301 	mvn.w	r3, #1
 8001a12:	e000      	b.n	8001a16 <FLASH_IF_EraseByPages+0x64>
 8001a14:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3728      	adds	r7, #40	; 0x28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b08a      	sub	sp, #40	; 0x28
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	e020      	b.n	8001a7a <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	2208      	movs	r2, #8
 8001a3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a40:	4618      	mov	r0, r3
 8001a42:	f01b fa0f 	bl	801ce64 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 8001a46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4e:	bf08      	it	eq
 8001a50:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001a54:	d005      	beq.n	8001a62 <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 8001a56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f7ff ff88 	bl	8001970 <FLASH_IF_Write64>
 8001a60:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3308      	adds	r3, #8
 8001a66:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	3308      	adds	r3, #8
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24

    if (status != FLASH_OK)
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d108      	bne.n	8001a86 <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	3301      	adds	r3, #1
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	08db      	lsrs	r3, r3, #3
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d3d9      	bcc.n	8001a38 <FLASH_IF_Write_Buffer+0x1a>
 8001a84:	e000      	b.n	8001a88 <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 8001a86:	bf00      	nop
    }
  }

  return status;
 8001a88:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3728      	adds	r7, #40	; 0x28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001a9c:	e00a      	b.n	8001ab4 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2bff      	cmp	r3, #255	; 0xff
 8001aa8:	d001      	beq.n	8001aae <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e039      	b.n	8001b22 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1ef      	bne.n	8001a9e <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	e010      	b.n	8001aea <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f103 0208 	add.w	r2, r3, #8
 8001ace:	60fa      	str	r2, [r7, #12]
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad8:	bf08      	it	eq
 8001ada:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001ade:	d001      	beq.n	8001ae4 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e01e      	b.n	8001b22 <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	08db      	lsrs	r3, r3, #3
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d3e9      	bcc.n	8001ac8 <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	607b      	str	r3, [r7, #4]
  while (size != 0)
 8001b02:	e00a      	b.n	8001b1a <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2bff      	cmp	r3, #255	; 0xff
 8001b0e:	d001      	beq.n	8001b14 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e006      	b.n	8001b22 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	603b      	str	r3, [r7, #0]
  while (size != 0)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f1      	bne.n	8001b04 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 8001b20:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <LL_AHB2_GRP1_EnableClock>:
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b50:	68fb      	ldr	r3, [r7, #12]
}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b70:	2001      	movs	r0, #1
 8001b72:	f7ff ffdb 	bl	8001b2c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b76:	2002      	movs	r0, #2
 8001b78:	f7ff ffd8 	bl	8001b2c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7c:	2004      	movs	r0, #4
 8001b7e:	f7ff ffd5 	bl	8001b2c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|SPI_CSN_Pin|SPI_CEN_Pin, GPIO_PIN_RESET);
 8001b82:	2200      	movs	r2, #0
 8001b84:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 8001b88:	4825      	ldr	r0, [pc, #148]	; (8001c20 <MX_GPIO_Init+0xc4>)
 8001b8a:	f004 fa7d 	bl	8006088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001b8e:	2201      	movs	r2, #1
 8001b90:	2120      	movs	r1, #32
 8001b92:	4823      	ldr	r0, [pc, #140]	; (8001c20 <MX_GPIO_Init+0xc4>)
 8001b94:	f004 fa78 	bl	8006088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|CONNECT_PM_SENSOR_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f240 2131 	movw	r1, #561	; 0x231
 8001b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba2:	f004 fa71 	bl	8006088 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin;
 8001ba6:	2338      	movs	r3, #56	; 0x38
 8001ba8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4819      	ldr	r0, [pc, #100]	; (8001c20 <MX_GPIO_Init+0xc4>)
 8001bbc:	f004 f836 	bl	8005c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin|SPI_CEN_Pin;
 8001bc0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bc4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4812      	ldr	r0, [pc, #72]	; (8001c20 <MX_GPIO_Init+0xc4>)
 8001bd8:	f004 f828 	bl	8005c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001bdc:	2331      	movs	r3, #49	; 0x31
 8001bde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be8:	2303      	movs	r3, #3
 8001bea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf4:	f004 f81a 	bl	8005c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONNECT_PM_SENSOR_Pin;
 8001bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bfc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001bfe:	2311      	movs	r3, #17
 8001c00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c06:	2303      	movs	r3, #3
 8001c08:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CONNECT_PM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c12:	f004 f80b 	bl	8005c2c <HAL_GPIO_Init>

}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	48000400 	.word	0x48000400

08001c24 <LL_AHB2_GRP1_EnableClock>:
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4013      	ands	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c48:	68fb      	ldr	r3, [r7, #12]
}
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <LL_APB1_GRP1_EnableClock>:
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4013      	ands	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c78:	68fb      	ldr	r3, [r7, #12]
}
 8001c7a:	bf00      	nop
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001c8a:	4a1c      	ldr	r2, [pc, #112]	; (8001cfc <MX_I2C2_Init+0x78>)
 8001c8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001c90:	4a1b      	ldr	r2, [pc, #108]	; (8001d00 <MX_I2C2_Init+0x7c>)
 8001c92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c94:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c9a:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ca0:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001ca6:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001cbe:	480e      	ldr	r0, [pc, #56]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001cc0:	f004 fa12 	bl	80060e8 <HAL_I2C_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001cca:	f000 fa49 	bl	8002160 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4809      	ldr	r0, [pc, #36]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001cd2:	f004 fef9 	bl	8006ac8 <HAL_I2CEx_ConfigAnalogFilter>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001cdc:	f000 fa40 	bl	8002160 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_I2C2_Init+0x74>)
 8001ce4:	f004 ff3a 	bl	8006b5c <HAL_I2CEx_ConfigDigitalFilter>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001cee:	f000 fa37 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200001f8 	.word	0x200001f8
 8001cfc:	40005800 	.word	0x40005800
 8001d00:	00707cbb 	.word	0x00707cbb

08001d04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b096      	sub	sp, #88	; 0x58
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d1c:	f107 030c 	add.w	r3, r7, #12
 8001d20:	2238      	movs	r2, #56	; 0x38
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f01c fb61 	bl	801e3ec <memset>
  if(i2cHandle->Instance==I2C2)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a21      	ldr	r2, [pc, #132]	; (8001db4 <HAL_I2C_MspInit+0xb0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d13b      	bne.n	8001dac <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d38:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d3e:	f107 030c 	add.w	r3, r7, #12
 8001d42:	4618      	mov	r0, r3
 8001d44:	f006 f9e0 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d4e:	f000 fa07 	bl	8002160 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	2001      	movs	r0, #1
 8001d54:	f7ff ff66 	bl	8001c24 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d58:	2002      	movs	r0, #2
 8001d5a:	f7ff ff63 	bl	8001c24 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d62:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d64:	2312      	movs	r3, #18
 8001d66:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d70:	2304      	movs	r3, #4
 8001d72:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d7e:	f003 ff55 	bl	8005c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d86:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d88:	2312      	movs	r3, #18
 8001d8a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001d90:	2301      	movs	r3, #1
 8001d92:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d94:	2304      	movs	r3, #4
 8001d96:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4806      	ldr	r0, [pc, #24]	; (8001db8 <HAL_I2C_MspInit+0xb4>)
 8001da0:	f003 ff44 	bl	8005c2c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001da4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001da8:	f7ff ff54 	bl	8001c54 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001dac:	bf00      	nop
 8001dae:	3758      	adds	r7, #88	; 0x58
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40005800 	.word	0x40005800
 8001db8:	48000400 	.word	0x48000400

08001dbc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dcc:	f023 0218 	bic.w	r2, r3, #24
 8001dd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
	...

08001de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dee:	f001 fe45 	bl	8003a7c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001df2:	f000 f8e3 	bl	8001fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001df6:	f7ff feb1 	bl	8001b5c <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001dfa:	f00a ffe5 	bl	800cdc8 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001dfe:	f001 fa93 	bl	8003328 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001e02:	f7ff ff3f 	bl	8001c84 <MX_I2C2_Init>
  MX_TIM16_Init();
 8001e06:	f000 fee9 	bl	8002bdc <MX_TIM16_Init>
  MX_TIM17_Init();
 8001e0a:	f000 ff1b 	bl	8002c44 <MX_TIM17_Init>
  MX_SPI2_Init();
 8001e0e:	f000 fb0b 	bl	8002428 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  UART2_SET =0;
 8001e12:	4b59      	ldr	r3, [pc, #356]	; (8001f78 <main+0x190>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]

  NRF24_Init();
 8001e18:	f7ff fa8a 	bl	8001330 <NRF24_Init>

  NRF24_RxMode(RxAddress, 10);
 8001e1c:	210a      	movs	r1, #10
 8001e1e:	4857      	ldr	r0, [pc, #348]	; (8001f7c <main+0x194>)
 8001e20:	f7ff faad 	bl	800137e <NRF24_RxMode>


   NRF24_ReadAll(data);
 8001e24:	4856      	ldr	r0, [pc, #344]	; (8001f80 <main+0x198>)
 8001e26:	f7ff fb08 	bl	800143a <NRF24_ReadAll>

  F1_QueueIni(); // init Function queue
 8001e2a:	f000 f9a5 	bl	8002178 <F1_QueueIni>

  HAL_UART_Receive_IT(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 8001e2e:	2220      	movs	r2, #32
 8001e30:	4954      	ldr	r1, [pc, #336]	; (8001f84 <main+0x19c>)
 8001e32:	4855      	ldr	r0, [pc, #340]	; (8001f88 <main+0x1a0>)
 8001e34:	f008 fe76 	bl	800ab24 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e42:	f004 f921 	bl	8006088 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim16);
 8001e46:	4851      	ldr	r0, [pc, #324]	; (8001f8c <main+0x1a4>)
 8001e48:	f008 fbee 	bl	800a628 <HAL_TIM_Base_Start_IT>


  while (1)
  {
	HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(0x44 << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 8001e4c:	2364      	movs	r3, #100	; 0x64
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	2301      	movs	r3, #1
 8001e52:	4a4f      	ldr	r2, [pc, #316]	; (8001f90 <main+0x1a8>)
 8001e54:	2188      	movs	r1, #136	; 0x88
 8001e56:	484f      	ldr	r0, [pc, #316]	; (8001f94 <main+0x1ac>)
 8001e58:	f004 f9d6 	bl	8006208 <HAL_I2C_Master_Transmit>


    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001e5c:	f00a ffbc 	bl	800cdd8 <MX_LoRaWAN_Process>

    /* USER CODE BEGIN 3 */


    F1_pull()();
 8001e60:	f000 f9ce 	bl	8002200 <F1_pull>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4798      	blx	r3


    HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(0x44 << 1),SHT40_dataRX, 6, 100);
 8001e68:	2364      	movs	r3, #100	; 0x64
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2306      	movs	r3, #6
 8001e6e:	4a4a      	ldr	r2, [pc, #296]	; (8001f98 <main+0x1b0>)
 8001e70:	2188      	movs	r1, #136	; 0x88
 8001e72:	4848      	ldr	r0, [pc, #288]	; (8001f94 <main+0x1ac>)
 8001e74:	f004 fabc 	bl	80063f0 <HAL_I2C_Master_Receive>
    temp_hword = SHT40_dataRX[0] * 256 + SHT40_dataRX[1];
 8001e78:	4b47      	ldr	r3, [pc, #284]	; (8001f98 <main+0x1b0>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	4b45      	ldr	r3, [pc, #276]	; (8001f98 <main+0x1b0>)
 8001e84:	785b      	ldrb	r3, [r3, #1]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	4413      	add	r3, r2
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	4b43      	ldr	r3, [pc, #268]	; (8001f9c <main+0x1b4>)
 8001e8e:	801a      	strh	r2, [r3, #0]
    th_hword = SHT40_dataRX[3] * 256 + SHT40_dataRX[4];
 8001e90:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <main+0x1b0>)
 8001e92:	78db      	ldrb	r3, [r3, #3]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	4b3f      	ldr	r3, [pc, #252]	; (8001f98 <main+0x1b0>)
 8001e9c:	791b      	ldrb	r3, [r3, #4]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	4b3e      	ldr	r3, [pc, #248]	; (8001fa0 <main+0x1b8>)
 8001ea6:	801a      	strh	r2, [r3, #0]
    temp  = -45.0 + 175.0 * (float)temp_hword/(float)65535.0;
 8001ea8:	4b3c      	ldr	r3, [pc, #240]	; (8001f9c <main+0x1b4>)
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe feef 	bl	8000c90 <__aeabi_ui2f>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe facb 	bl	8000450 <__aeabi_f2d>
 8001eba:	a32b      	add	r3, pc, #172	; (adr r3, 8001f68 <main+0x180>)
 8001ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec0:	f7fe fb1e 	bl	8000500 <__aeabi_dmul>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	a328      	add	r3, pc, #160	; (adr r3, 8001f70 <main+0x188>)
 8001ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed2:	f7fe fc3f 	bl	8000754 <__aeabi_ddiv>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4610      	mov	r0, r2
 8001edc:	4619      	mov	r1, r3
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	4b30      	ldr	r3, [pc, #192]	; (8001fa4 <main+0x1bc>)
 8001ee4:	f7fe f954 	bl	8000190 <__aeabi_dsub>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4610      	mov	r0, r2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f7fe fdc8 	bl	8000a84 <__aeabi_d2f>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4a2c      	ldr	r2, [pc, #176]	; (8001fa8 <main+0x1c0>)
 8001ef8:	6013      	str	r3, [r2, #0]
    humidity = -6.0 + 125.0 * (float)th_hword/(float)65535.0;
 8001efa:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <main+0x1b8>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fec6 	bl	8000c90 <__aeabi_ui2f>
 8001f04:	4603      	mov	r3, r0
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe faa2 	bl	8000450 <__aeabi_f2d>
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	4b26      	ldr	r3, [pc, #152]	; (8001fac <main+0x1c4>)
 8001f12:	f7fe faf5 	bl	8000500 <__aeabi_dmul>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	a314      	add	r3, pc, #80	; (adr r3, 8001f70 <main+0x188>)
 8001f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f24:	f7fe fc16 	bl	8000754 <__aeabi_ddiv>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <main+0x1c8>)
 8001f36:	f7fe f92b 	bl	8000190 <__aeabi_dsub>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	f7fe fd9f 	bl	8000a84 <__aeabi_d2f>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4a1a      	ldr	r2, [pc, #104]	; (8001fb4 <main+0x1cc>)
 8001f4a:	6013      	str	r3, [r2, #0]
    if(UART2_SET)MeasurePM_sens();
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <main+0x190>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <main+0x170>
 8001f54:	f000 f89c 	bl	8002090 <MeasurePM_sens>
    if (isDataAvailable(2) == 1)
 8001f58:	2002      	movs	r0, #2
 8001f5a:	f7ff fa4f 	bl	80013fc <isDataAvailable>
   	  {
 //  		  NRF24_Receive(RxData);
//   		  HAL_UART_Transmit(&huart2, RxData, strlen((char *)RxData), 1000);
   	  }

    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);///DBG
 8001f5e:	2120      	movs	r1, #32
 8001f60:	4815      	ldr	r0, [pc, #84]	; (8001fb8 <main+0x1d0>)
 8001f62:	f004 f8a8 	bl	80060b6 <HAL_GPIO_TogglePin>
	HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(0x44 << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 8001f66:	e771      	b.n	8001e4c <main+0x64>
 8001f68:	00000000 	.word	0x00000000
 8001f6c:	4065e000 	.word	0x4065e000
 8001f70:	00000000 	.word	0x00000000
 8001f74:	40efffe0 	.word	0x40efffe0
 8001f78:	20000010 	.word	0x20000010
 8001f7c:	20000004 	.word	0x20000004
 8001f80:	20000274 	.word	0x20000274
 8001f84:	20000244 	.word	0x20000244
 8001f88:	200004e0 	.word	0x200004e0
 8001f8c:	200003b0 	.word	0x200003b0
 8001f90:	20000009 	.word	0x20000009
 8001f94:	200001f8 	.word	0x200001f8
 8001f98:	200002a8 	.word	0x200002a8
 8001f9c:	200002ae 	.word	0x200002ae
 8001fa0:	200002b0 	.word	0x200002b0
 8001fa4:	40468000 	.word	0x40468000
 8001fa8:	20000268 	.word	0x20000268
 8001fac:	405f4000 	.word	0x405f4000
 8001fb0:	40180000 	.word	0x40180000
 8001fb4:	2000026c 	.word	0x2000026c
 8001fb8:	48000400 	.word	0x48000400

08001fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b09a      	sub	sp, #104	; 0x68
 8001fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fc2:	f107 0320 	add.w	r3, r7, #32
 8001fc6:	2248      	movs	r2, #72	; 0x48
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f01c fa0e 	bl	801e3ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fd0:	f107 0308 	add.w	r3, r7, #8
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
 8001fe0:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001fe2:	f004 fe07 	bl	8006bf4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7ff fee8 	bl	8001dbc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fec:	4b21      	ldr	r3, [pc, #132]	; (8002074 <SystemClock_Config+0xb8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ff4:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <SystemClock_Config+0xb8>)
 8001ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <SystemClock_Config+0xb8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002008:	2307      	movs	r3, #7
 800200a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 800200c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002012:	2381      	movs	r3, #129	; 0x81
 8002014:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002016:	f44f 7380 	mov.w	r3, #256	; 0x100
 800201a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800201c:	2340      	movs	r3, #64	; 0x40
 800201e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8002020:	2300      	movs	r3, #0
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002024:	2300      	movs	r3, #0
 8002026:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002028:	f107 0320 	add.w	r3, r7, #32
 800202c:	4618      	mov	r0, r3
 800202e:	f005 f92d 	bl	800728c <HAL_RCC_OscConfig>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002038:	f000 f892 	bl	8002160 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800203c:	234f      	movs	r3, #79	; 0x4f
 800203e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002040:	2302      	movs	r3, #2
 8002042:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002044:	2300      	movs	r3, #0
 8002046:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800204c:	2300      	movs	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002054:	f107 0308 	add.w	r3, r7, #8
 8002058:	2101      	movs	r1, #1
 800205a:	4618      	mov	r0, r3
 800205c:	f005 fcb2 	bl	80079c4 <HAL_RCC_ClockConfig>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002066:	f000 f87b 	bl	8002160 <Error_Handler>
  }
}
 800206a:	bf00      	nop
 800206c:	3768      	adds	r7, #104	; 0x68
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	58000400 	.word	0x58000400

08002078 <EnablePM_sens>:

/* USER CODE BEGIN 4 */



void EnablePM_sens(void){
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800207c:	2200      	movs	r2, #0
 800207e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002086:	f003 ffff 	bl	8006088 <HAL_GPIO_WritePin>

}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <MeasurePM_sens>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);


}

void MeasurePM_sens(void){
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	if(aRXBufferUser[0]==0x02 && aRXBufferUser[31]== 0x03){
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <MeasurePM_sens+0x40>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b02      	cmp	r3, #2
 800209a:	d111      	bne.n	80020c0 <MeasurePM_sens+0x30>
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <MeasurePM_sens+0x40>)
 800209e:	7fdb      	ldrb	r3, [r3, #31]
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d10d      	bne.n	80020c0 <MeasurePM_sens+0x30>

	PM2_5 = aRXBufferUser[5] + aRXBufferUser[6]*256 + aRXBufferUser[7]*65536;
 80020a4:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <MeasurePM_sens+0x40>)
 80020a6:	795b      	ldrb	r3, [r3, #5]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <MeasurePM_sens+0x40>)
 80020ac:	799b      	ldrb	r3, [r3, #6]
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	441a      	add	r2, r3
 80020b2:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <MeasurePM_sens+0x40>)
 80020b4:	79db      	ldrb	r3, [r3, #7]
 80020b6:	041b      	lsls	r3, r3, #16
 80020b8:	4413      	add	r3, r2
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <MeasurePM_sens+0x44>)
 80020be:	601a      	str	r2, [r3, #0]
}
	       HAL_UART_Receive_IT(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 80020c0:	2220      	movs	r2, #32
 80020c2:	4903      	ldr	r1, [pc, #12]	; (80020d0 <MeasurePM_sens+0x40>)
 80020c4:	4804      	ldr	r0, [pc, #16]	; (80020d8 <MeasurePM_sens+0x48>)
 80020c6:	f008 fd2d 	bl	800ab24 <HAL_UART_Receive_IT>


}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000244 	.word	0x20000244
 80020d4:	20000264 	.word	0x20000264
 80020d8:	200004e0 	.word	0x200004e0

080020dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
   if (htim == &htim16)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a19      	ldr	r2, [pc, #100]	; (800214c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d12b      	bne.n	8002144 <HAL_TIM_PeriodElapsedCallback+0x68>
   {
	  counter++;
 80020ec:	4b18      	ldr	r3, [pc, #96]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	3301      	adds	r3, #1
 80020f2:	4a17      	ldr	r2, [pc, #92]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80020f4:	6013      	str	r3, [r2, #0]
      switch(counter){
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 80020fe:	d007      	beq.n	8002110 <HAL_TIM_PeriodElapsedCallback+0x34>
 8002100:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8002104:	dc0f      	bgt.n	8002126 <HAL_TIM_PeriodElapsedCallback+0x4a>
 8002106:	2b05      	cmp	r3, #5
 8002108:	d006      	beq.n	8002118 <HAL_TIM_PeriodElapsedCallback+0x3c>
 800210a:	2b0a      	cmp	r3, #10
 800210c:	d008      	beq.n	8002120 <HAL_TIM_PeriodElapsedCallback+0x44>
 800210e:	e00a      	b.n	8002126 <HAL_TIM_PeriodElapsedCallback+0x4a>
      case 820:
    	  F1_push(EnablePM_sens);
 8002110:	4810      	ldr	r0, [pc, #64]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002112:	f000 f841 	bl	8002198 <F1_push>

    	  break;
 8002116:	e006      	b.n	8002126 <HAL_TIM_PeriodElapsedCallback+0x4a>
      case 5:
     	  PM_measure_flag = 1;
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800211a:	2201      	movs	r2, #1
 800211c:	701a      	strb	r2, [r3, #0]
    	//  F1_push(MeasurePM_sens);
    	  break;
 800211e:	e002      	b.n	8002126 <HAL_TIM_PeriodElapsedCallback+0x4a>
      case 10:
    	//  F1_push(DisablePM_sens);
    	  PM_measure_flag = 0;
 8002120:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
      }

      counter %= 20;
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002128:	6819      	ldr	r1, [r3, #0]
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800212c:	fb83 2301 	smull	r2, r3, r3, r1
 8002130:	10da      	asrs	r2, r3, #3
 8002132:	17cb      	asrs	r3, r1, #31
 8002134:	1ad2      	subs	r2, r2, r3
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	1aca      	subs	r2, r1, r3
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002142:	601a      	str	r2, [r3, #0]
   }
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	200003b0 	.word	0x200003b0
 8002150:	20000270 	.word	0x20000270
 8002154:	08002079 	.word	0x08002079
 8002158:	20000000 	.word	0x20000000
 800215c:	66666667 	.word	0x66666667

08002160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002164:	b672      	cpsid	i
}
 8002166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002168:	e7fe      	b.n	8002168 <Error_Handler+0x8>

0800216a <SimpleF1>:
#define Q_SIZE_FAST 16

volatile int F1_last; // number of last element of fast-speed queue
int F1_first; // number of first element of fast-speed queue

void SimpleF1(){;};
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr
	...

08002178 <F1_QueueIni>:

void (*F1_Queue[Q_SIZE_FAST])();

 void F1_QueueIni(void){ // initialization of Queue
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  F1_last = 0;
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <F1_QueueIni+0x18>)
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
  F1_first = 0;
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <F1_QueueIni+0x1c>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	200002b4 	.word	0x200002b4
 8002194:	200002b8 	.word	0x200002b8

08002198 <F1_push>:

 int F1_push(void (*pointerQ)(void) ){ // push element from the queue
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if ((F1_last+1)%Q_SIZE_FAST == F1_first)return 1;
 80021a0:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <F1_push+0x5c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	3301      	adds	r3, #1
 80021a6:	425a      	negs	r2, r3
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	f002 020f 	and.w	r2, r2, #15
 80021b0:	bf58      	it	pl
 80021b2:	4253      	negpl	r3, r2
 80021b4:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <F1_push+0x60>)
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d101      	bne.n	80021c0 <F1_push+0x28>
 80021bc:	2301      	movs	r3, #1
 80021be:	e014      	b.n	80021ea <F1_push+0x52>
  F1_Queue[F1_last++] = pointerQ;
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <F1_push+0x5c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	490b      	ldr	r1, [pc, #44]	; (80021f4 <F1_push+0x5c>)
 80021c8:	600a      	str	r2, [r1, #0]
 80021ca:	490c      	ldr	r1, [pc, #48]	; (80021fc <F1_push+0x64>)
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  F1_last%=Q_SIZE_FAST;
 80021d2:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <F1_push+0x5c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	425a      	negs	r2, r3
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	f002 020f 	and.w	r2, r2, #15
 80021e0:	bf58      	it	pl
 80021e2:	4253      	negpl	r3, r2
 80021e4:	4a03      	ldr	r2, [pc, #12]	; (80021f4 <F1_push+0x5c>)
 80021e6:	6013      	str	r3, [r2, #0]
  return 0;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	200002b4 	.word	0x200002b4
 80021f8:	200002b8 	.word	0x200002b8
 80021fc:	200002bc 	.word	0x200002bc

08002200 <F1_pull>:

 void (*F1_pull(void))(void){ // pull element from the queue
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
  void (*pullVar)(void);
  if (F1_last == F1_first)return SimpleF1;
 8002206:	4b11      	ldr	r3, [pc, #68]	; (800224c <F1_pull+0x4c>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <F1_pull+0x50>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d101      	bne.n	8002216 <F1_pull+0x16>
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <F1_pull+0x54>)
 8002214:	e014      	b.n	8002240 <F1_pull+0x40>
  pullVar = F1_Queue[F1_first++];
 8002216:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <F1_pull+0x50>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	490c      	ldr	r1, [pc, #48]	; (8002250 <F1_pull+0x50>)
 800221e:	600a      	str	r2, [r1, #0]
 8002220:	4a0d      	ldr	r2, [pc, #52]	; (8002258 <F1_pull+0x58>)
 8002222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002226:	607b      	str	r3, [r7, #4]
  F1_first%=Q_SIZE_FAST;
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <F1_pull+0x50>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	425a      	negs	r2, r3
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	f002 020f 	and.w	r2, r2, #15
 8002236:	bf58      	it	pl
 8002238:	4253      	negpl	r3, r2
 800223a:	4a05      	ldr	r2, [pc, #20]	; (8002250 <F1_pull+0x50>)
 800223c:	6013      	str	r3, [r2, #0]
  return pullVar;
 800223e:	687b      	ldr	r3, [r7, #4]
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	200002b4 	.word	0x200002b4
 8002250:	200002b8 	.word	0x200002b8
 8002254:	0800216b 	.word	0x0800216b
 8002258:	200002bc 	.word	0x200002bc

0800225c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002268:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800226c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <LL_APB1_GRP1_EnableClock>:
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002288:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800228a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4313      	orrs	r3, r2
 8002292:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002298:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4013      	ands	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022a0:	68fb      	ldr	r3, [r7, #12]
}
 80022a2:	bf00      	nop
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08c      	sub	sp, #48	; 0x30
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	222c      	movs	r2, #44	; 0x2c
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f01c f897 	bl	801e3ec <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80022be:	4b22      	ldr	r3, [pc, #136]	; (8002348 <MX_RTC_Init+0x9c>)
 80022c0:	4a22      	ldr	r2, [pc, #136]	; (800234c <MX_RTC_Init+0xa0>)
 80022c2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80022c4:	4b20      	ldr	r3, [pc, #128]	; (8002348 <MX_RTC_Init+0x9c>)
 80022c6:	221f      	movs	r2, #31
 80022c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80022ca:	4b1f      	ldr	r3, [pc, #124]	; (8002348 <MX_RTC_Init+0x9c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80022d0:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <MX_RTC_Init+0x9c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80022d6:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <MX_RTC_Init+0x9c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80022dc:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <MX_RTC_Init+0x9c>)
 80022de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022e2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80022e4:	4b18      	ldr	r3, [pc, #96]	; (8002348 <MX_RTC_Init+0x9c>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80022ea:	4b17      	ldr	r3, [pc, #92]	; (8002348 <MX_RTC_Init+0x9c>)
 80022ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80022f2:	4815      	ldr	r0, [pc, #84]	; (8002348 <MX_RTC_Init+0x9c>)
 80022f4:	f006 f822 	bl	800833c <HAL_RTC_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80022fe:	f7ff ff2f 	bl	8002160 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8002302:	4811      	ldr	r0, [pc, #68]	; (8002348 <MX_RTC_Init+0x9c>)
 8002304:	f006 fb10 	bl	8008928 <HAL_RTCEx_SetSSRU_IT>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800230e:	f7ff ff27 	bl	8002160 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002312:	2300      	movs	r3, #0
 8002314:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800231a:	2300      	movs	r3, #0
 800231c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800231e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002322:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8002324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	2200      	movs	r2, #0
 800232e:	4619      	mov	r1, r3
 8002330:	4805      	ldr	r0, [pc, #20]	; (8002348 <MX_RTC_Init+0x9c>)
 8002332:	f006 f87d 	bl	8008430 <HAL_RTC_SetAlarm_IT>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800233c:	f7ff ff10 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002340:	bf00      	nop
 8002342:	3730      	adds	r7, #48	; 0x30
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	200002fc 	.word	0x200002fc
 800234c:	40002800 	.word	0x40002800

08002350 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b090      	sub	sp, #64	; 0x40
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002358:	f107 0308 	add.w	r3, r7, #8
 800235c:	2238      	movs	r2, #56	; 0x38
 800235e:	2100      	movs	r1, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f01c f843 	bl	801e3ec <memset>
  if(rtcHandle->Instance==RTC)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a16      	ldr	r2, [pc, #88]	; (80023c4 <HAL_RTC_MspInit+0x74>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d125      	bne.n	80023bc <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002374:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800237a:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800237c:	f107 0308 	add.w	r3, r7, #8
 8002380:	4618      	mov	r0, r3
 8002382:	f005 fec1 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800238c:	f7ff fee8 	bl	8002160 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002390:	f7ff ff64 	bl	800225c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002394:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002398:	f7ff ff70 	bl	800227c <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 800239c:	2200      	movs	r2, #0
 800239e:	2100      	movs	r1, #0
 80023a0:	2002      	movs	r0, #2
 80023a2:	f002 fd2e 	bl	8004e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80023a6:	2002      	movs	r0, #2
 80023a8:	f002 fd45 	bl	8004e36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80023ac:	2200      	movs	r2, #0
 80023ae:	2100      	movs	r1, #0
 80023b0:	202a      	movs	r0, #42	; 0x2a
 80023b2:	f002 fd26 	bl	8004e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80023b6:	202a      	movs	r0, #42	; 0x2a
 80023b8:	f002 fd3d 	bl	8004e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80023bc:	bf00      	nop
 80023be:	3740      	adds	r7, #64	; 0x40
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40002800 	.word	0x40002800

080023c8 <LL_AHB2_GRP1_EnableClock>:
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4313      	orrs	r3, r2
 80023de:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4013      	ands	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023ec:	68fb      	ldr	r3, [r7, #12]
}
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <LL_APB1_GRP1_EnableClock>:
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002404:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002406:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4313      	orrs	r3, r2
 800240e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002414:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4013      	ands	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800241c:	68fb      	ldr	r3, [r7, #12]
}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800242c:	4b1b      	ldr	r3, [pc, #108]	; (800249c <MX_SPI2_Init+0x74>)
 800242e:	4a1c      	ldr	r2, [pc, #112]	; (80024a0 <MX_SPI2_Init+0x78>)
 8002430:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002432:	4b1a      	ldr	r3, [pc, #104]	; (800249c <MX_SPI2_Init+0x74>)
 8002434:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002438:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800243a:	4b18      	ldr	r3, [pc, #96]	; (800249c <MX_SPI2_Init+0x74>)
 800243c:	2200      	movs	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002440:	4b16      	ldr	r3, [pc, #88]	; (800249c <MX_SPI2_Init+0x74>)
 8002442:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002446:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002448:	4b14      	ldr	r3, [pc, #80]	; (800249c <MX_SPI2_Init+0x74>)
 800244a:	2200      	movs	r2, #0
 800244c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800244e:	4b13      	ldr	r3, [pc, #76]	; (800249c <MX_SPI2_Init+0x74>)
 8002450:	2200      	movs	r2, #0
 8002452:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <MX_SPI2_Init+0x74>)
 8002456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800245a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800245c:	4b0f      	ldr	r3, [pc, #60]	; (800249c <MX_SPI2_Init+0x74>)
 800245e:	2218      	movs	r2, #24
 8002460:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <MX_SPI2_Init+0x74>)
 8002464:	2200      	movs	r2, #0
 8002466:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <MX_SPI2_Init+0x74>)
 800246a:	2200      	movs	r2, #0
 800246c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800246e:	4b0b      	ldr	r3, [pc, #44]	; (800249c <MX_SPI2_Init+0x74>)
 8002470:	2200      	movs	r2, #0
 8002472:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <MX_SPI2_Init+0x74>)
 8002476:	2207      	movs	r2, #7
 8002478:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <MX_SPI2_Init+0x74>)
 800247c:	2200      	movs	r2, #0
 800247e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <MX_SPI2_Init+0x74>)
 8002482:	2208      	movs	r2, #8
 8002484:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002486:	4805      	ldr	r0, [pc, #20]	; (800249c <MX_SPI2_Init+0x74>)
 8002488:	f006 fadc 	bl	8008a44 <HAL_SPI_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002492:	f7ff fe65 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000334 	.word	0x20000334
 80024a0:	40003800 	.word	0x40003800

080024a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b096      	sub	sp, #88	; 0x58
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024bc:	f107 030c 	add.w	r3, r7, #12
 80024c0:	2238      	movs	r2, #56	; 0x38
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f01b ff91 	bl	801e3ec <memset>
  if(spiHandle->Instance==SPI2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a21      	ldr	r2, [pc, #132]	; (8002554 <HAL_SPI_MspInit+0xb0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d13b      	bne.n	800254c <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 80024d4:	2310      	movs	r3, #16
 80024d6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 80024d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024dc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024de:	f107 030c 	add.w	r3, r7, #12
 80024e2:	4618      	mov	r0, r3
 80024e4:	f005 fe10 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80024ee:	f7ff fe37 	bl	8002160 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024f6:	f7ff ff7f 	bl	80023f8 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fa:	2002      	movs	r0, #2
 80024fc:	f7ff ff64 	bl	80023c8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002500:	2001      	movs	r0, #1
 8002502:	f7ff ff61 	bl	80023c8 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8002506:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800250a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250c:	2302      	movs	r3, #2
 800250e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002514:	2300      	movs	r3, #0
 8002516:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002518:	2305      	movs	r3, #5
 800251a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002520:	4619      	mov	r1, r3
 8002522:	480d      	ldr	r0, [pc, #52]	; (8002558 <HAL_SPI_MspInit+0xb4>)
 8002524:	f003 fb82 	bl	8005c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800252c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252e:	2302      	movs	r3, #2
 8002530:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002536:	2300      	movs	r3, #0
 8002538:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800253a:	2305      	movs	r3, #5
 800253c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002542:	4619      	mov	r1, r3
 8002544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002548:	f003 fb70 	bl	8005c2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800254c:	bf00      	nop
 800254e:	3758      	adds	r7, #88	; 0x58
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40003800 	.word	0x40003800
 8002558:	48000400 	.word	0x48000400

0800255c <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8002562:	2201      	movs	r2, #1
 8002564:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	58000400 	.word	0x58000400

08002574 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8002590:	f001 fa94 	bl	8003abc <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8002594:	f7ff ffe2 	bl	800255c <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002598:	2001      	movs	r0, #1
 800259a:	f004 fbbd 	bl	8006d18 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 80025a6:	f001 fa97 	bl	8003ad8 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 80025aa:	f001 f905 	bl	80037b8 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 80025b6:	f001 fa81 	bl	8003abc <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80025ba:	2101      	movs	r1, #1
 80025bc:	2000      	movs	r0, #0
 80025be:	f004 fb27 	bl	8006c10 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80025ca:	f001 fa85 	bl	8003ad8 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025d6:	bf00      	nop
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr

080025de <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025e2:	e7fe      	b.n	80025e2 <NMI_Handler+0x4>

080025e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e8:	e7fe      	b.n	80025e8 <HardFault_Handler+0x4>

080025ea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025ee:	e7fe      	b.n	80025ee <MemManage_Handler+0x4>

080025f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025f4:	e7fe      	b.n	80025f4 <BusFault_Handler+0x4>

080025f6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025fa:	e7fe      	b.n	80025fa <UsageFault_Handler+0x4>

080025fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002630:	4802      	ldr	r0, [pc, #8]	; (800263c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8002632:	f006 f9b5 	bl	80089a0 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200002fc 	.word	0x200002fc

08002640 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002644:	4802      	ldr	r0, [pc, #8]	; (8002650 <DMA1_Channel1_IRQHandler+0x10>)
 8002646:	f002 fe8d 	bl	8005364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000570 	.word	0x20000570

08002654 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002658:	4802      	ldr	r0, [pc, #8]	; (8002664 <DMA1_Channel2_IRQHandler+0x10>)
 800265a:	f002 fe83 	bl	8005364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	200005d0 	.word	0x200005d0

08002668 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 Global Interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */
	static int counter = 0;
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800266c:	4804      	ldr	r0, [pc, #16]	; (8002680 <TIM16_IRQHandler+0x18>)
 800266e:	f008 f827 	bl	800a6c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */
  counter++;
 8002672:	4b04      	ldr	r3, [pc, #16]	; (8002684 <TIM16_IRQHandler+0x1c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3301      	adds	r3, #1
 8002678:	4a02      	ldr	r2, [pc, #8]	; (8002684 <TIM16_IRQHandler+0x1c>)
 800267a:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM16_IRQn 1 */
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	200003b0 	.word	0x200003b0
 8002684:	20000398 	.word	0x20000398

08002688 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
static int counter = 0;
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800268c:	4804      	ldr	r0, [pc, #16]	; (80026a0 <TIM17_IRQHandler+0x18>)
 800268e:	f008 f817 	bl	800a6c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */
  counter++;
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <TIM17_IRQHandler+0x1c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	3301      	adds	r3, #1
 8002698:	4a02      	ldr	r2, [pc, #8]	; (80026a4 <TIM17_IRQHandler+0x1c>)
 800269a:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM17_IRQn 1 */
}
 800269c:	bf00      	nop
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	200003fc 	.word	0x200003fc
 80026a4:	2000039c 	.word	0x2000039c

080026a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026ac:	4802      	ldr	r0, [pc, #8]	; (80026b8 <USART1_IRQHandler+0x10>)
 80026ae:	f008 fb21 	bl	800acf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000450 	.word	0x20000450

080026bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026c0:	4802      	ldr	r0, [pc, #8]	; (80026cc <USART2_IRQHandler+0x10>)
 80026c2:	f008 fb17 	bl	800acf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200004e0 	.word	0x200004e0

080026d0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80026d4:	4802      	ldr	r0, [pc, #8]	; (80026e0 <RTC_Alarm_IRQHandler+0x10>)
 80026d6:	f006 f813 	bl	8008700 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	200002fc 	.word	0x200002fc

080026e4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80026e8:	4802      	ldr	r0, [pc, #8]	; (80026f4 <SUBGHZ_Radio_IRQHandler+0x10>)
 80026ea:	f007 fdaf 	bl	800a24c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	200003a0 	.word	0x200003a0

080026f8 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 80026fc:	4802      	ldr	r0, [pc, #8]	; (8002708 <DMAMUX1_OVR_IRQHandler+0x10>)
 80026fe:	f002 ffe1 	bl	80056c4 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	200005d0 	.word	0x200005d0

0800270c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002718:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800271a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4313      	orrs	r3, r2
 8002722:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002728:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4013      	ands	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002730:	68fb      	ldr	r3, [r7, #12]
}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <MX_SUBGHZ_Init+0x20>)
 8002742:	2208      	movs	r2, #8
 8002744:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002746:	4805      	ldr	r0, [pc, #20]	; (800275c <MX_SUBGHZ_Init+0x20>)
 8002748:	f007 fb04 	bl	8009d54 <HAL_SUBGHZ_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002752:	f7ff fd05 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	200003a0 	.word	0x200003a0

08002760 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002768:	2001      	movs	r0, #1
 800276a:	f7ff ffcf 	bl	800270c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800276e:	2200      	movs	r2, #0
 8002770:	2100      	movs	r1, #0
 8002772:	2032      	movs	r0, #50	; 0x32
 8002774:	f002 fb45 	bl	8004e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002778:	2032      	movs	r0, #50	; 0x32
 800277a:	f002 fb5c 	bl	8004e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800278e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002798:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80027b0:	4b02      	ldr	r3, [pc, #8]	; (80027bc <LL_FLASH_GetUDN+0x10>)
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	1fff7580 	.word	0x1fff7580

080027c0 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80027c4:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <LL_FLASH_GetDeviceID+0x14>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	b2db      	uxtb	r3, r3
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	1fff7584 	.word	0x1fff7584

080027d8 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80027dc:	4b03      	ldr	r3, [pc, #12]	; (80027ec <LL_FLASH_GetSTCompanyID+0x14>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	0a1b      	lsrs	r3, r3, #8
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	1fff7584 	.word	0x1fff7584

080027f0 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80027f4:	2000      	movs	r0, #0
 80027f6:	f7ff ffc6 	bl	8002786 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 80027fa:	f01b f8c1 	bl	801d980 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <SystemApp_Init+0x50>)
 8002800:	2201      	movs	r2, #1
 8002802:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002804:	f000 f988 	bl	8002b18 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002808:	f01b fb4a 	bl	801dea0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800280c:	480d      	ldr	r0, [pc, #52]	; (8002844 <SystemApp_Init+0x54>)
 800280e:	f01b fbf5 	bl	801dffc <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <SystemApp_Init+0x58>)
 8002814:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002818:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800281a:	2002      	movs	r0, #2
 800281c:	f01b fbfc 	bl	801e018 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002820:	f7fe ff12 	bl	8001648 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002824:	f000 f9b0 	bl	8002b88 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8002828:	f01a fa76 	bl	801cd18 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800282c:	2101      	movs	r1, #1
 800282e:	2001      	movs	r0, #1
 8002830:	f01a fab2 	bl	801cd98 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002834:	2101      	movs	r1, #1
 8002836:	2001      	movs	r0, #1
 8002838:	f01a fa7e 	bl	801cd38 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 800283c:	bf00      	nop
 800283e:	bd80      	pop	{r7, pc}
 8002840:	200003ac 	.word	0x200003ac
 8002844:	08002a11 	.word	0x08002a11
 8002848:	58004000 	.word	0x58004000

0800284c <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8002850:	f01a fad2 	bl	801cdf8 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}

08002858 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002862:	f7fe feff 	bl	8001664 <SYS_GetBatteryLevel>
 8002866:	4603      	mov	r3, r0
 8002868:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 800286a:	88bb      	ldrh	r3, [r7, #4]
 800286c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002870:	4293      	cmp	r3, r2
 8002872:	d902      	bls.n	800287a <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8002874:	23fe      	movs	r3, #254	; 0xfe
 8002876:	71fb      	strb	r3, [r7, #7]
 8002878:	e014      	b.n	80028a4 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 800287a:	88bb      	ldrh	r3, [r7, #4]
 800287c:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002880:	d202      	bcs.n	8002888 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	71fb      	strb	r3, [r7, #7]
 8002886:	e00d      	b.n	80028a4 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8002888:	88bb      	ldrh	r3, [r7, #4]
 800288a:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 800288e:	461a      	mov	r2, r3
 8002890:	4613      	mov	r3, r2
 8002892:	01db      	lsls	r3, r3, #7
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	461a      	mov	r2, r3
 800289a:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <GetBatteryLevel+0x58>)
 800289c:	fba3 2302 	umull	r2, r3, r3, r2
 80028a0:	09db      	lsrs	r3, r3, #7
 80028a2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80028a4:	79fb      	ldrb	r3, [r7, #7]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	1b4e81b5 	.word	0x1b4e81b5

080028b4 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 f937 	bl	8002b34 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe fa39 	bl	8000d40 <__aeabi_f2iz>
 80028ce:	4603      	mov	r3, r0
 80028d0:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80028d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3720      	adds	r7, #32
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 80028de:	b590      	push	{r4, r7, lr}
 80028e0:	b087      	sub	sp, #28
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 80028ea:	f7ff ff5f 	bl	80027ac <LL_FLASH_GetUDN>
 80028ee:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f6:	d138      	bne.n	800296a <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80028f8:	f001 f8fc 	bl	8003af4 <HAL_GetUIDw0>
 80028fc:	4604      	mov	r4, r0
 80028fe:	f001 f90d 	bl	8003b1c <HAL_GetUIDw2>
 8002902:	4603      	mov	r3, r0
 8002904:	4423      	add	r3, r4
 8002906:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002908:	f001 f8fe 	bl	8003b08 <HAL_GetUIDw1>
 800290c:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	0e1a      	lsrs	r2, r3, #24
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3307      	adds	r3, #7
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	0c1a      	lsrs	r2, r3, #16
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3306      	adds	r3, #6
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	0a1a      	lsrs	r2, r3, #8
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3305      	adds	r3, #5
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3304      	adds	r3, #4
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	0e1a      	lsrs	r2, r3, #24
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3303      	adds	r3, #3
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	0c1a      	lsrs	r2, r3, #16
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3302      	adds	r3, #2
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	0a1a      	lsrs	r2, r3, #8
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3301      	adds	r3, #1
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	b2da      	uxtb	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002968:	e031      	b.n	80029ce <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3307      	adds	r3, #7
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	0a1a      	lsrs	r2, r3, #8
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3306      	adds	r3, #6
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	0c1a      	lsrs	r2, r3, #16
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3305      	adds	r3, #5
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	0e1a      	lsrs	r2, r3, #24
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3304      	adds	r3, #4
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002998:	f7ff ff12 	bl	80027c0 <LL_FLASH_GetDeviceID>
 800299c:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3303      	adds	r3, #3
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80029a8:	f7ff ff16 	bl	80027d8 <LL_FLASH_GetSTCompanyID>
 80029ac:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3302      	adds	r3, #2
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	0a1a      	lsrs	r2, r3, #8
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3301      	adds	r3, #1
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	0c1b      	lsrs	r3, r3, #16
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	701a      	strb	r2, [r3, #0]
}
 80029ce:	bf00      	nop
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd90      	pop	{r4, r7, pc}

080029d6 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 80029d6:	b590      	push	{r4, r7, lr}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 80029e0:	f7ff fee4 	bl	80027ac <LL_FLASH_GetUDN>
 80029e4:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d10b      	bne.n	8002a06 <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80029ee:	f001 f881 	bl	8003af4 <HAL_GetUIDw0>
 80029f2:	4604      	mov	r4, r0
 80029f4:	f001 f888 	bl	8003b08 <HAL_GetUIDw1>
 80029f8:	4603      	mov	r3, r0
 80029fa:	405c      	eors	r4, r3
 80029fc:	f001 f88e 	bl	8003b1c <HAL_GetUIDw2>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4063      	eors	r3, r4
 8002a04:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8002a06:	687b      	ldr	r3, [r7, #4]

}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd90      	pop	{r4, r7, pc}

08002a10 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002a1a:	f107 0308 	add.w	r3, r7, #8
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f01a fafa 	bl	801d018 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002a2a:	9200      	str	r2, [sp, #0]
 8002a2c:	4a07      	ldr	r2, [pc, #28]	; (8002a4c <TimestampNow+0x3c>)
 8002a2e:	2110      	movs	r1, #16
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f81d 	bl	8002a70 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fd fb9e 	bl	8000178 <strlen>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002a44:	bf00      	nop
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	0801e638 	.word	0x0801e638

08002a50 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002a54:	2101      	movs	r1, #1
 8002a56:	2002      	movs	r0, #2
 8002a58:	f01a f96e 	bl	801cd38 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002a64:	2100      	movs	r1, #0
 8002a66:	2002      	movs	r0, #2
 8002a68:	f01a f966 	bl	801cd38 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002a6c:	bf00      	nop
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002a70:	b40c      	push	{r2, r3}
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002a7c:	f107 031c 	add.w	r3, r7, #28
 8002a80:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002a82:	6839      	ldr	r1, [r7, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f01a fc97 	bl	801d3bc <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a98:	b002      	add	sp, #8
 8002a9a:	4770      	bx	lr

08002a9c <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <HAL_GetTick+0x24>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002ac2:	f000 f9dd 	bl	8002e80 <TIMER_IF_GetTimerValue>
 8002ac6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002ac8:	687b      	ldr	r3, [r7, #4]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200003ac 	.word	0x200003ac

08002ad8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fa53 	bl	8002f8e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <LL_EXTI_EnableIT_32_63+0x24>)
 8002afa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002afe:	4905      	ldr	r1, [pc, #20]	; (8002b14 <LL_EXTI_EnableIT_32_63+0x24>)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	58000800 	.word	0x58000800

08002b18 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8002b1c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b20:	f7ff ffe6 	bl	8002af0 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002b24:	f001 f804 	bl	8003b30 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8002b28:	f001 f808 	bl	8003b3c <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8002b2c:	f001 f80c 	bl	8003b48 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002b3c:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <EnvSensors_Read+0x40>)
 8002b3e:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002b40:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <EnvSensors_Read+0x44>)
 8002b42:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002b44:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <EnvSensors_Read+0x48>)
 8002b46:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a08      	ldr	r2, [pc, #32]	; (8002b80 <EnvSensors_Read+0x4c>)
 8002b5e:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a08      	ldr	r2, [pc, #32]	; (8002b84 <EnvSensors_Read+0x50>)
 8002b64:	611a      	str	r2, [r3, #16]

  return 0;
 8002b66:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	42480000 	.word	0x42480000
 8002b78:	41900000 	.word	0x41900000
 8002b7c:	447a0000 	.word	0x447a0000
 8002b80:	003e090d 	.word	0x003e090d
 8002b84:	000503ab 	.word	0x000503ab

08002b88 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002b92:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002ba2:	bf00      	nop
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr

08002baa <LL_APB2_GRP1_EnableClock>:
{
 8002baa:	b480      	push	{r7}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bce:	68fb      	ldr	r3, [r7, #12]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr
	...

08002bdc <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002be0:	4b16      	ldr	r3, [pc, #88]	; (8002c3c <MX_TIM16_Init+0x60>)
 8002be2:	4a17      	ldr	r2, [pc, #92]	; (8002c40 <MX_TIM16_Init+0x64>)
 8002be4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 999;
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <MX_TIM16_Init+0x60>)
 8002be8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bec:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bee:	4b13      	ldr	r3, [pc, #76]	; (8002c3c <MX_TIM16_Init+0x60>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 32000;
 8002bf4:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <MX_TIM16_Init+0x60>)
 8002bf6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002bfa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bfc:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <MX_TIM16_Init+0x60>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002c02:	4b0e      	ldr	r3, [pc, #56]	; (8002c3c <MX_TIM16_Init+0x60>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <MX_TIM16_Init+0x60>)
 8002c0a:	2280      	movs	r2, #128	; 0x80
 8002c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002c0e:	480b      	ldr	r0, [pc, #44]	; (8002c3c <MX_TIM16_Init+0x60>)
 8002c10:	f007 fcb2 	bl	800a578 <HAL_TIM_Base_Init>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002c1a:	f7ff faa1 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8002c1e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c22:	f7ff ffc2 	bl	8002baa <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002c26:	2200      	movs	r2, #0
 8002c28:	2100      	movs	r1, #0
 8002c2a:	201c      	movs	r0, #28
 8002c2c:	f002 f8e9 	bl	8004e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002c30:	201c      	movs	r0, #28
 8002c32:	f002 f900 	bl	8004e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM16_Init 2 */

}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200003b0 	.word	0x200003b0
 8002c40:	40014400 	.word	0x40014400

08002c44 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002c48:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <MX_TIM17_Init+0x5c>)
 8002c4a:	4a16      	ldr	r2, [pc, #88]	; (8002ca4 <MX_TIM17_Init+0x60>)
 8002c4c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002c4e:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <MX_TIM17_Init+0x5c>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c54:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <MX_TIM17_Init+0x5c>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002c5a:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <MX_TIM17_Init+0x5c>)
 8002c5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c60:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c62:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <MX_TIM17_Init+0x5c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002c68:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <MX_TIM17_Init+0x5c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <MX_TIM17_Init+0x5c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002c74:	480a      	ldr	r0, [pc, #40]	; (8002ca0 <MX_TIM17_Init+0x5c>)
 8002c76:	f007 fc7f 	bl	800a578 <HAL_TIM_Base_Init>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002c80:	f7ff fa6e 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002c84:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002c88:	f7ff ff8f 	bl	8002baa <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2100      	movs	r1, #0
 8002c90:	201d      	movs	r0, #29
 8002c92:	f002 f8b6 	bl	8004e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002c96:	201d      	movs	r0, #29
 8002c98:	f002 f8cd 	bl	8004e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM17_Init 2 */

}
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	200003fc 	.word	0x200003fc
 8002ca4:	40014800 	.word	0x40014800

08002ca8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <HAL_TIM_Base_MspInit+0x58>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002cba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002cbe:	f7ff ff74 	bl	8002baa <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	201c      	movs	r0, #28
 8002cc8:	f002 f89b 	bl	8004e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002ccc:	201c      	movs	r0, #28
 8002cce:	f002 f8b2 	bl	8004e36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002cd2:	e010      	b.n	8002cf6 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM17)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0a      	ldr	r2, [pc, #40]	; (8002d04 <HAL_TIM_Base_MspInit+0x5c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d10b      	bne.n	8002cf6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002cde:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002ce2:	f7ff ff62 	bl	8002baa <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2100      	movs	r1, #0
 8002cea:	201d      	movs	r0, #29
 8002cec:	f002 f889 	bl	8004e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002cf0:	201d      	movs	r0, #29
 8002cf2:	f002 f8a0 	bl	8004e36 <HAL_NVIC_EnableIRQ>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40014400 	.word	0x40014400
 8002d04:	40014800 	.word	0x40014800

08002d08 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
	...

08002d20 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002d2a:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <TIMER_IF_Init+0x5c>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	f083 0301 	eor.w	r3, r3, #1
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01b      	beq.n	8002d70 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <TIMER_IF_Init+0x60>)
 8002d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d3e:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002d40:	f7ff fab4 	bl	80022ac <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002d44:	f000 f856 	bl	8002df4 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002d48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d4c:	480c      	ldr	r0, [pc, #48]	; (8002d80 <TIMER_IF_Init+0x60>)
 8002d4e:	f005 fc7b 	bl	8008648 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <TIMER_IF_Init+0x60>)
 8002d54:	f04f 32ff 	mov.w	r2, #4294967295
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002d5a:	4809      	ldr	r0, [pc, #36]	; (8002d80 <TIMER_IF_Init+0x60>)
 8002d5c:	f005 fdb2 	bl	80088c4 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002d60:	2000      	movs	r0, #0
 8002d62:	f000 f9d3 	bl	800310c <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002d66:	f000 f85f 	bl	8002e28 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002d6a:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <TIMER_IF_Init+0x5c>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002d70:	79fb      	ldrb	r3, [r7, #7]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000448 	.word	0x20000448
 8002d80:	200002fc 	.word	0x200002fc

08002d84 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08e      	sub	sp, #56	; 0x38
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002d92:	f107 0308 	add.w	r3, r7, #8
 8002d96:	222c      	movs	r2, #44	; 0x2c
 8002d98:	2100      	movs	r1, #0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f01b fb26 	bl	801e3ec <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002da0:	f000 f828 	bl	8002df4 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <TIMER_IF_StartTimer+0x68>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	4413      	add	r3, r2
 8002dac:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002dae:	2300      	movs	r3, #0
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002dbc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002dc0:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dc6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002dc8:	f107 0308 	add.w	r3, r7, #8
 8002dcc:	2201      	movs	r2, #1
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4807      	ldr	r0, [pc, #28]	; (8002df0 <TIMER_IF_StartTimer+0x6c>)
 8002dd2:	f005 fb2d 	bl	8008430 <HAL_RTC_SetAlarm_IT>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002ddc:	f7ff f9c0 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002de0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3738      	adds	r7, #56	; 0x38
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	2000044c 	.word	0x2000044c
 8002df0:	200002fc 	.word	0x200002fc

08002df4 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <TIMER_IF_StopTimer+0x2c>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002e04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e08:	4806      	ldr	r0, [pc, #24]	; (8002e24 <TIMER_IF_StopTimer+0x30>)
 8002e0a:	f005 fc1d 	bl	8008648 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002e0e:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <TIMER_IF_StopTimer+0x30>)
 8002e10:	f04f 32ff 	mov.w	r2, #4294967295
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002e16:	79fb      	ldrb	r3, [r7, #7]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40002800 	.word	0x40002800
 8002e24:	200002fc 	.word	0x200002fc

08002e28 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002e2c:	f000 f98e 	bl	800314c <GetTimerTicks>
 8002e30:	4603      	mov	r3, r0
 8002e32:	4a03      	ldr	r2, [pc, #12]	; (8002e40 <TIMER_IF_SetTimerContext+0x18>)
 8002e34:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002e36:	4b02      	ldr	r3, [pc, #8]	; (8002e40 <TIMER_IF_SetTimerContext+0x18>)
 8002e38:	681b      	ldr	r3, [r3, #0]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	2000044c 	.word	0x2000044c

08002e44 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002e48:	4b02      	ldr	r3, [pc, #8]	; (8002e54 <TIMER_IF_GetTimerContext+0x10>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr
 8002e54:	2000044c 	.word	0x2000044c

08002e58 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002e62:	f000 f973 	bl	800314c <GetTimerTicks>
 8002e66:	4602      	mov	r2, r0
 8002e68:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002e70:	687b      	ldr	r3, [r7, #4]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	2000044c 	.word	0x2000044c

08002e80 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <TIMER_IF_GetTimerValue+0x24>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002e92:	f000 f95b 	bl	800314c <GetTimerTicks>
 8002e96:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002e98:	687b      	ldr	r3, [r7, #4]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000448 	.word	0x20000448

08002ea8 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002eb6:	687b      	ldr	r3, [r7, #4]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr

08002ec2 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002ec2:	b5b0      	push	{r4, r5, r7, lr}
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002eca:	2100      	movs	r1, #0
 8002ecc:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	460a      	mov	r2, r1
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	0d95      	lsrs	r5, r2, #22
 8002ed8:	0294      	lsls	r4, r2, #10
 8002eda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	f7fd ff51 	bl	8000d8c <__aeabi_uldivmod>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4613      	mov	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bdb0      	pop	{r4, r5, r7, pc}

08002efc <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002efc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f00:	b085      	sub	sp, #20
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002f06:	2100      	movs	r1, #0
 8002f08:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	460c      	mov	r4, r1
 8002f10:	4605      	mov	r5, r0
 8002f12:	4620      	mov	r0, r4
 8002f14:	4629      	mov	r1, r5
 8002f16:	f04f 0a00 	mov.w	sl, #0
 8002f1a:	f04f 0b00 	mov.w	fp, #0
 8002f1e:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002f22:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002f26:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002f2a:	4650      	mov	r0, sl
 8002f2c:	4659      	mov	r1, fp
 8002f2e:	1b02      	subs	r2, r0, r4
 8002f30:	eb61 0305 	sbc.w	r3, r1, r5
 8002f34:	f04f 0000 	mov.w	r0, #0
 8002f38:	f04f 0100 	mov.w	r1, #0
 8002f3c:	0099      	lsls	r1, r3, #2
 8002f3e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002f42:	0090      	lsls	r0, r2, #2
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	eb12 0804 	adds.w	r8, r2, r4
 8002f4c:	eb43 0905 	adc.w	r9, r3, r5
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f64:	4690      	mov	r8, r2
 8002f66:	4699      	mov	r9, r3
 8002f68:	4640      	mov	r0, r8
 8002f6a:	4649      	mov	r1, r9
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	0a82      	lsrs	r2, r0, #10
 8002f76:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002f7a:	0a8b      	lsrs	r3, r1, #10
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002f80:	68fb      	ldr	r3, [r7, #12]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f8c:	4770      	bx	lr

08002f8e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff ff93 	bl	8002ec2 <TIMER_IF_Convert_ms2Tick>
 8002f9c:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002f9e:	f000 f8d5 	bl	800314c <GetTimerTicks>
 8002fa2:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002fa4:	e000      	b.n	8002fa8 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002fa6:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002fa8:	f000 f8d0 	bl	800314c <GetTimerTicks>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d8f6      	bhi.n	8002fa6 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002fca:	f01a fe27 	bl	801dc1c <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002fde:	f000 f8a5 	bl	800312c <TIMER_IF_BkUp_Read_MSBticks>
 8002fe2:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 f88f 	bl	800310c <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002ff6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ffa:	b08c      	sub	sp, #48	; 0x30
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8003004:	f000 f8a2 	bl	800314c <GetTimerTicks>
 8003008:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800300a:	f000 f88f 	bl	800312c <TIMER_IF_BkUp_Read_MSBticks>
 800300e:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	2200      	movs	r2, #0
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	60fa      	str	r2, [r7, #12]
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	000b      	movs	r3, r1
 8003024:	2200      	movs	r2, #0
 8003026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003028:	2000      	movs	r0, #0
 800302a:	460c      	mov	r4, r1
 800302c:	4605      	mov	r5, r0
 800302e:	eb12 0804 	adds.w	r8, r2, r4
 8003032:	eb43 0905 	adc.w	r9, r3, r5
 8003036:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800303a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	0a82      	lsrs	r2, r0, #10
 8003048:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800304c:	0a8b      	lsrs	r3, r1, #10
 800304e:	4613      	mov	r3, r2
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	2200      	movs	r2, #0
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8003060:	f04f 0b00 	mov.w	fp, #0
 8003064:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff ff46 	bl	8002efc <TIMER_IF_Convert_Tick2ms>
 8003070:	4603      	mov	r3, r0
 8003072:	b29a      	uxth	r2, r3
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8003078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800307a:	4618      	mov	r0, r3
 800307c:	3730      	adds	r7, #48	; 0x30
 800307e:	46bd      	mov	sp, r7
 8003080:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003084 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	2100      	movs	r1, #0
 8003090:	4803      	ldr	r0, [pc, #12]	; (80030a0 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8003092:	f005 fca9 	bl	80089e8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	200002fc 	.word	0x200002fc

080030a4 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	2101      	movs	r1, #1
 80030b0:	4803      	ldr	r0, [pc, #12]	; (80030c0 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80030b2:	f005 fc99 	bl	80089e8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	200002fc 	.word	0x200002fc

080030c4 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80030ce:	2100      	movs	r1, #0
 80030d0:	4804      	ldr	r0, [pc, #16]	; (80030e4 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80030d2:	f005 fca1 	bl	8008a18 <HAL_RTCEx_BKUPRead>
 80030d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80030d8:	687b      	ldr	r3, [r7, #4]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	200002fc 	.word	0x200002fc

080030e8 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80030f2:	2101      	movs	r1, #1
 80030f4:	4804      	ldr	r0, [pc, #16]	; (8003108 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80030f6:	f005 fc8f 	bl	8008a18 <HAL_RTCEx_BKUPRead>
 80030fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80030fc:	687b      	ldr	r3, [r7, #4]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	200002fc 	.word	0x200002fc

0800310c <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	2102      	movs	r1, #2
 8003118:	4803      	ldr	r0, [pc, #12]	; (8003128 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800311a:	f005 fc65 	bl	80089e8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	200002fc 	.word	0x200002fc

0800312c <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8003132:	2102      	movs	r1, #2
 8003134:	4804      	ldr	r0, [pc, #16]	; (8003148 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8003136:	f005 fc6f 	bl	8008a18 <HAL_RTCEx_BKUPRead>
 800313a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 800313c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	200002fc 	.word	0x200002fc

0800314c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8003152:	480b      	ldr	r0, [pc, #44]	; (8003180 <GetTimerTicks+0x34>)
 8003154:	f7ff fdd8 	bl	8002d08 <LL_RTC_TIME_GetSubSecond>
 8003158:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800315a:	e003      	b.n	8003164 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800315c:	4808      	ldr	r0, [pc, #32]	; (8003180 <GetTimerTicks+0x34>)
 800315e:	f7ff fdd3 	bl	8002d08 <LL_RTC_TIME_GetSubSecond>
 8003162:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8003164:	4806      	ldr	r0, [pc, #24]	; (8003180 <GetTimerTicks+0x34>)
 8003166:	f7ff fdcf 	bl	8002d08 <LL_RTC_TIME_GetSubSecond>
 800316a:	4602      	mov	r2, r0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4293      	cmp	r3, r2
 8003170:	d1f4      	bne.n	800315c <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40002800 	.word	0x40002800

08003184 <LL_AHB2_GRP1_EnableClock>:
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800318c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003190:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4313      	orrs	r3, r2
 800319a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800319c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4013      	ands	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031a8:	68fb      	ldr	r3, [r7, #12]
}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <LL_APB1_GRP1_EnableClock>:
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80031bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80031cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4013      	ands	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031d8:	68fb      	ldr	r3, [r7, #12]
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr

080031e4 <LL_APB1_GRP1_DisableClock>:
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80031ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031fa:	4013      	ands	r3, r2
 80031fc:	658b      	str	r3, [r1, #88]	; 0x58
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <LL_APB2_GRP1_EnableClock>:
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003214:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003216:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4313      	orrs	r3, r2
 800321e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003224:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4013      	ands	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800322c:	68fb      	ldr	r3, [r7, #12]
}
 800322e:	bf00      	nop
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <LL_APB2_GRP1_DisableClock>:
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8003240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003244:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	43db      	mvns	r3, r3
 800324a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800324e:	4013      	ands	r3, r2
 8003250:	660b      	str	r3, [r1, #96]	; 0x60
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <LL_SYSCFG_EnableFastModePlus>:
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <LL_SYSCFG_EnableFastModePlus+0x20>)
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	4904      	ldr	r1, [pc, #16]	; (800327c <LL_SYSCFG_EnableFastModePlus+0x20>)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4313      	orrs	r3, r2
 800326e:	604b      	str	r3, [r1, #4]
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40010000 	.word	0x40010000

08003280 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003284:	4b26      	ldr	r3, [pc, #152]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 8003286:	4a27      	ldr	r2, [pc, #156]	; (8003324 <MX_USART1_UART_Init+0xa4>)
 8003288:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800328a:	4b25      	ldr	r3, [pc, #148]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 800328c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003290:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003292:	4b23      	ldr	r3, [pc, #140]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 8003294:	2200      	movs	r2, #0
 8003296:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003298:	4b21      	ldr	r3, [pc, #132]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 800329a:	2200      	movs	r2, #0
 800329c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800329e:	4b20      	ldr	r3, [pc, #128]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032a4:	4b1e      	ldr	r3, [pc, #120]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032a6:	220c      	movs	r2, #12
 80032a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032aa:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80032b0:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032b6:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80032bc:	4b18      	ldr	r3, [pc, #96]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032be:	2200      	movs	r2, #0
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 80032c2:	4b17      	ldr	r3, [pc, #92]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032c4:	2240      	movs	r2, #64	; 0x40
 80032c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 80032c8:	4b15      	ldr	r3, [pc, #84]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 80032d0:	4b13      	ldr	r3, [pc, #76]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032d6:	4812      	ldr	r0, [pc, #72]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032d8:	f007 fbd4 	bl	800aa84 <HAL_UART_Init>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 80032e2:	f7fe ff3d 	bl	8002160 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032e6:	2100      	movs	r1, #0
 80032e8:	480d      	ldr	r0, [pc, #52]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032ea:	f009 fc82 	bl	800cbf2 <HAL_UARTEx_SetTxFifoThreshold>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 80032f4:	f7fe ff34 	bl	8002160 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032f8:	2100      	movs	r1, #0
 80032fa:	4809      	ldr	r0, [pc, #36]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 80032fc:	f009 fcb7 	bl	800cc6e <HAL_UARTEx_SetRxFifoThreshold>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8003306:	f7fe ff2b 	bl	8002160 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800330a:	4805      	ldr	r0, [pc, #20]	; (8003320 <MX_USART1_UART_Init+0xa0>)
 800330c:	f009 fbfe 	bl	800cb0c <HAL_UARTEx_EnableFifoMode>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 8003316:	f7fe ff23 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20000450 	.word	0x20000450
 8003324:	40013800 	.word	0x40013800

08003328 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800332c:	4b23      	ldr	r3, [pc, #140]	; (80033bc <MX_USART2_UART_Init+0x94>)
 800332e:	4a24      	ldr	r2, [pc, #144]	; (80033c0 <MX_USART2_UART_Init+0x98>)
 8003330:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003332:	4b22      	ldr	r3, [pc, #136]	; (80033bc <MX_USART2_UART_Init+0x94>)
 8003334:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003338:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800333a:	4b20      	ldr	r3, [pc, #128]	; (80033bc <MX_USART2_UART_Init+0x94>)
 800333c:	2200      	movs	r2, #0
 800333e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003340:	4b1e      	ldr	r3, [pc, #120]	; (80033bc <MX_USART2_UART_Init+0x94>)
 8003342:	2200      	movs	r2, #0
 8003344:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003346:	4b1d      	ldr	r3, [pc, #116]	; (80033bc <MX_USART2_UART_Init+0x94>)
 8003348:	2200      	movs	r2, #0
 800334a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <MX_USART2_UART_Init+0x94>)
 800334e:	220c      	movs	r2, #12
 8003350:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003352:	4b1a      	ldr	r3, [pc, #104]	; (80033bc <MX_USART2_UART_Init+0x94>)
 8003354:	2200      	movs	r2, #0
 8003356:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8003358:	4b18      	ldr	r3, [pc, #96]	; (80033bc <MX_USART2_UART_Init+0x94>)
 800335a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800335e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003360:	4b16      	ldr	r3, [pc, #88]	; (80033bc <MX_USART2_UART_Init+0x94>)
 8003362:	2200      	movs	r2, #0
 8003364:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003366:	4b15      	ldr	r3, [pc, #84]	; (80033bc <MX_USART2_UART_Init+0x94>)
 8003368:	2200      	movs	r2, #0
 800336a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800336c:	4b13      	ldr	r3, [pc, #76]	; (80033bc <MX_USART2_UART_Init+0x94>)
 800336e:	2200      	movs	r2, #0
 8003370:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003372:	4812      	ldr	r0, [pc, #72]	; (80033bc <MX_USART2_UART_Init+0x94>)
 8003374:	f007 fb86 	bl	800aa84 <HAL_UART_Init>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800337e:	f7fe feef 	bl	8002160 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003382:	2100      	movs	r1, #0
 8003384:	480d      	ldr	r0, [pc, #52]	; (80033bc <MX_USART2_UART_Init+0x94>)
 8003386:	f009 fc34 	bl	800cbf2 <HAL_UARTEx_SetTxFifoThreshold>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8003390:	f7fe fee6 	bl	8002160 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003394:	2100      	movs	r1, #0
 8003396:	4809      	ldr	r0, [pc, #36]	; (80033bc <MX_USART2_UART_Init+0x94>)
 8003398:	f009 fc69 	bl	800cc6e <HAL_UARTEx_SetRxFifoThreshold>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80033a2:	f7fe fedd 	bl	8002160 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80033a6:	4805      	ldr	r0, [pc, #20]	; (80033bc <MX_USART2_UART_Init+0x94>)
 80033a8:	f009 fbeb 	bl	800cb82 <HAL_UARTEx_DisableFifoMode>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80033b2:	f7fe fed5 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	200004e0 	.word	0x200004e0
 80033c0:	40004400 	.word	0x40004400

080033c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b09a      	sub	sp, #104	; 0x68
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 80033dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033ea:	f107 030c 	add.w	r3, r7, #12
 80033ee:	2238      	movs	r2, #56	; 0x38
 80033f0:	2100      	movs	r1, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f01a fffa 	bl	801e3ec <memset>
  if(uartHandle->Instance==USART1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a6f      	ldr	r2, [pc, #444]	; (80035bc <HAL_UART_MspInit+0x1f8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	f040 80a3 	bne.w	800354a <HAL_UART_MspInit+0x186>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003404:	2301      	movs	r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003408:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800340c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800340e:	f107 030c 	add.w	r3, r7, #12
 8003412:	4618      	mov	r0, r3
 8003414:	f004 fe78 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 800341e:	f7fe fe9f 	bl	8002160 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003422:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003426:	f7ff feef 	bl	8003208 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800342a:	2002      	movs	r0, #2
 800342c:	f7ff feaa 	bl	8003184 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8003430:	23c0      	movs	r3, #192	; 0xc0
 8003432:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003434:	2302      	movs	r3, #2
 8003436:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003438:	2301      	movs	r3, #1
 800343a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800343c:	2301      	movs	r3, #1
 800343e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003440:	2307      	movs	r3, #7
 8003442:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003444:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003448:	4619      	mov	r1, r3
 800344a:	485d      	ldr	r0, [pc, #372]	; (80035c0 <HAL_UART_MspInit+0x1fc>)
 800344c:	f002 fbee 	bl	8005c2c <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8003450:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003454:	f7ff ff02 	bl	800325c <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8003458:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800345c:	f7ff fefe 	bl	800325c <LL_SYSCFG_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8003460:	4b58      	ldr	r3, [pc, #352]	; (80035c4 <HAL_UART_MspInit+0x200>)
 8003462:	4a59      	ldr	r2, [pc, #356]	; (80035c8 <HAL_UART_MspInit+0x204>)
 8003464:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003466:	4b57      	ldr	r3, [pc, #348]	; (80035c4 <HAL_UART_MspInit+0x200>)
 8003468:	2212      	movs	r2, #18
 800346a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800346c:	4b55      	ldr	r3, [pc, #340]	; (80035c4 <HAL_UART_MspInit+0x200>)
 800346e:	2210      	movs	r2, #16
 8003470:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003472:	4b54      	ldr	r3, [pc, #336]	; (80035c4 <HAL_UART_MspInit+0x200>)
 8003474:	2200      	movs	r2, #0
 8003476:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003478:	4b52      	ldr	r3, [pc, #328]	; (80035c4 <HAL_UART_MspInit+0x200>)
 800347a:	2280      	movs	r2, #128	; 0x80
 800347c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800347e:	4b51      	ldr	r3, [pc, #324]	; (80035c4 <HAL_UART_MspInit+0x200>)
 8003480:	2200      	movs	r2, #0
 8003482:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003484:	4b4f      	ldr	r3, [pc, #316]	; (80035c4 <HAL_UART_MspInit+0x200>)
 8003486:	2200      	movs	r2, #0
 8003488:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800348a:	4b4e      	ldr	r3, [pc, #312]	; (80035c4 <HAL_UART_MspInit+0x200>)
 800348c:	2200      	movs	r2, #0
 800348e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003490:	4b4c      	ldr	r3, [pc, #304]	; (80035c4 <HAL_UART_MspInit+0x200>)
 8003492:	2200      	movs	r2, #0
 8003494:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003496:	484b      	ldr	r0, [pc, #300]	; (80035c4 <HAL_UART_MspInit+0x200>)
 8003498:	f001 fcea 	bl	8004e70 <HAL_DMA_Init>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 80034a2:	f7fe fe5d 	bl	8002160 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a46      	ldr	r2, [pc, #280]	; (80035c4 <HAL_UART_MspInit+0x200>)
 80034aa:	679a      	str	r2, [r3, #120]	; 0x78
 80034ac:	4a45      	ldr	r2, [pc, #276]	; (80035c4 <HAL_UART_MspInit+0x200>)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80034b2:	4b46      	ldr	r3, [pc, #280]	; (80035cc <HAL_UART_MspInit+0x208>)
 80034b4:	4a46      	ldr	r2, [pc, #280]	; (80035d0 <HAL_UART_MspInit+0x20c>)
 80034b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80034b8:	4b44      	ldr	r3, [pc, #272]	; (80035cc <HAL_UART_MspInit+0x208>)
 80034ba:	2211      	movs	r2, #17
 80034bc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034be:	4b43      	ldr	r3, [pc, #268]	; (80035cc <HAL_UART_MspInit+0x208>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034c4:	4b41      	ldr	r3, [pc, #260]	; (80035cc <HAL_UART_MspInit+0x208>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034ca:	4b40      	ldr	r3, [pc, #256]	; (80035cc <HAL_UART_MspInit+0x208>)
 80034cc:	2280      	movs	r2, #128	; 0x80
 80034ce:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034d0:	4b3e      	ldr	r3, [pc, #248]	; (80035cc <HAL_UART_MspInit+0x208>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034d6:	4b3d      	ldr	r3, [pc, #244]	; (80035cc <HAL_UART_MspInit+0x208>)
 80034d8:	2200      	movs	r2, #0
 80034da:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80034dc:	4b3b      	ldr	r3, [pc, #236]	; (80035cc <HAL_UART_MspInit+0x208>)
 80034de:	2200      	movs	r2, #0
 80034e0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034e2:	4b3a      	ldr	r3, [pc, #232]	; (80035cc <HAL_UART_MspInit+0x208>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80034e8:	4838      	ldr	r0, [pc, #224]	; (80035cc <HAL_UART_MspInit+0x208>)
 80034ea:	f001 fcc1 	bl	8004e70 <HAL_DMA_Init>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 80034f4:	f7fe fe34 	bl	8002160 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80034fc:	2300      	movs	r3, #0
 80034fe:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 8003500:	2300      	movs	r3, #0
 8003502:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 8003506:	2301      	movs	r3, #1
 8003508:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 800350c:	2301      	movs	r3, #1
 800350e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 8003510:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003514:	4619      	mov	r1, r3
 8003516:	482d      	ldr	r0, [pc, #180]	; (80035cc <HAL_UART_MspInit+0x208>)
 8003518:	f002 f894 	bl	8005644 <HAL_DMAEx_ConfigMuxSync>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8003522:	f7fe fe1d 	bl	8002160 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a28      	ldr	r2, [pc, #160]	; (80035cc <HAL_UART_MspInit+0x208>)
 800352a:	67da      	str	r2, [r3, #124]	; 0x7c
 800352c:	4a27      	ldr	r2, [pc, #156]	; (80035cc <HAL_UART_MspInit+0x208>)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8003532:	2200      	movs	r2, #0
 8003534:	2102      	movs	r1, #2
 8003536:	2024      	movs	r0, #36	; 0x24
 8003538:	f001 fc63 	bl	8004e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800353c:	2024      	movs	r0, #36	; 0x24
 800353e:	f001 fc7a 	bl	8004e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003542:	200c      	movs	r0, #12
 8003544:	f001 fc77 	bl	8004e36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003548:	e033      	b.n	80035b2 <HAL_UART_MspInit+0x1ee>
  else if(uartHandle->Instance==USART2)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a21      	ldr	r2, [pc, #132]	; (80035d4 <HAL_UART_MspInit+0x210>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d12e      	bne.n	80035b2 <HAL_UART_MspInit+0x1ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003554:	2302      	movs	r3, #2
 8003556:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003558:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800355c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800355e:	f107 030c 	add.w	r3, r7, #12
 8003562:	4618      	mov	r0, r3
 8003564:	f004 fdd0 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <HAL_UART_MspInit+0x1ae>
      Error_Handler();
 800356e:	f7fe fdf7 	bl	8002160 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003572:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003576:	f7ff fe1d 	bl	80031b4 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800357a:	2001      	movs	r0, #1
 800357c:	f7ff fe02 	bl	8003184 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8003580:	230c      	movs	r3, #12
 8003582:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003584:	2302      	movs	r3, #2
 8003586:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003588:	2301      	movs	r3, #1
 800358a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800358c:	2301      	movs	r3, #1
 800358e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003590:	2307      	movs	r3, #7
 8003592:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003594:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003598:	4619      	mov	r1, r3
 800359a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800359e:	f002 fb45 	bl	8005c2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80035a2:	2200      	movs	r2, #0
 80035a4:	2100      	movs	r1, #0
 80035a6:	2025      	movs	r0, #37	; 0x25
 80035a8:	f001 fc2b 	bl	8004e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80035ac:	2025      	movs	r0, #37	; 0x25
 80035ae:	f001 fc42 	bl	8004e36 <HAL_NVIC_EnableIRQ>
}
 80035b2:	bf00      	nop
 80035b4:	3768      	adds	r7, #104	; 0x68
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40013800 	.word	0x40013800
 80035c0:	48000400 	.word	0x48000400
 80035c4:	20000570 	.word	0x20000570
 80035c8:	40020008 	.word	0x40020008
 80035cc:	200005d0 	.word	0x200005d0
 80035d0:	4002001c 	.word	0x4002001c
 80035d4:	40004400 	.word	0x40004400

080035d8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a16      	ldr	r2, [pc, #88]	; (8003640 <HAL_UART_MspDeInit+0x68>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d115      	bne.n	8003616 <HAL_UART_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80035ea:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80035ee:	f7ff fe23 	bl	8003238 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 80035f2:	21c0      	movs	r1, #192	; 0xc0
 80035f4:	4813      	ldr	r0, [pc, #76]	; (8003644 <HAL_UART_MspDeInit+0x6c>)
 80035f6:	f002 fc79 	bl	8005eec <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035fe:	4618      	mov	r0, r3
 8003600:	f001 fcde 	bl	8004fc0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003608:	4618      	mov	r0, r3
 800360a:	f001 fcd9 	bl	8004fc0 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800360e:	2024      	movs	r0, #36	; 0x24
 8003610:	f001 fc1f 	bl	8004e52 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8003614:	e010      	b.n	8003638 <HAL_UART_MspDeInit+0x60>
  else if(uartHandle->Instance==USART2)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a0b      	ldr	r2, [pc, #44]	; (8003648 <HAL_UART_MspDeInit+0x70>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d10b      	bne.n	8003638 <HAL_UART_MspDeInit+0x60>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003620:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003624:	f7ff fdde 	bl	80031e4 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8003628:	210c      	movs	r1, #12
 800362a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800362e:	f002 fc5d 	bl	8005eec <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003632:	2025      	movs	r0, #37	; 0x25
 8003634:	f001 fc0d 	bl	8004e52 <HAL_NVIC_DisableIRQ>
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40013800 	.word	0x40013800
 8003644:	48000400 	.word	0x48000400
 8003648:	40004400 	.word	0x40004400

0800364c <LL_APB2_GRP1_ForceReset>:
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8003654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800365a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4313      	orrs	r3, r2
 8003662:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr

0800366e <LL_APB2_GRP1_ReleaseReset>:
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8003676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800367a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	43db      	mvns	r3, r3
 8003680:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003684:	4013      	ands	r3, r2
 8003686:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr
	...

08003694 <LL_EXTI_EnableIT_0_31>:
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800369c:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <LL_EXTI_EnableIT_0_31+0x24>)
 800369e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80036a2:	4905      	ldr	r1, [pc, #20]	; (80036b8 <LL_EXTI_EnableIT_0_31+0x24>)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	58000800 	.word	0x58000800

080036bc <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80036c4:	4a07      	ldr	r2, [pc, #28]	; (80036e4 <vcom_Init+0x28>)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80036ca:	f7fe f85d 	bl	8001788 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80036ce:	f7ff fdd7 	bl	8003280 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80036d2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80036d6:	f7ff ffdd 	bl	8003694 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80036da:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20000634 	.word	0x20000634

080036e8 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80036ec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80036f0:	f7ff ffac 	bl	800364c <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80036f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80036f8:	f7ff ffb9 	bl	800366e <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80036fc:	4804      	ldr	r0, [pc, #16]	; (8003710 <vcom_DeInit+0x28>)
 80036fe:	f7ff ff6b 	bl	80035d8 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8003702:	200f      	movs	r0, #15
 8003704:	f001 fba5 	bl	8004e52 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8003708:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800370a:	4618      	mov	r0, r3
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20000450 	.word	0x20000450

08003714 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003720:	887b      	ldrh	r3, [r7, #2]
 8003722:	461a      	mov	r2, r3
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	4804      	ldr	r0, [pc, #16]	; (8003738 <vcom_Trace_DMA+0x24>)
 8003728:	f007 fa52 	bl	800abd0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 800372c:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	20000450 	.word	0x20000450

0800373c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8003744:	4a19      	ldr	r2, [pc, #100]	; (80037ac <vcom_ReceiveInit+0x70>)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800374a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800374e:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8003750:	f107 0308 	add.w	r3, r7, #8
 8003754:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003758:	4815      	ldr	r0, [pc, #84]	; (80037b0 <vcom_ReceiveInit+0x74>)
 800375a:	f009 f94a 	bl	800c9f2 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800375e:	bf00      	nop
 8003760:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <vcom_ReceiveInit+0x74>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376e:	d0f7      	beq.n	8003760 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8003770:	bf00      	nop
 8003772:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <vcom_ReceiveInit+0x74>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003780:	d1f7      	bne.n	8003772 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8003782:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <vcom_ReceiveInit+0x74>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <vcom_ReceiveInit+0x74>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003790:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8003792:	4807      	ldr	r0, [pc, #28]	; (80037b0 <vcom_ReceiveInit+0x74>)
 8003794:	f009 f988 	bl	800caa8 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8003798:	2201      	movs	r2, #1
 800379a:	4906      	ldr	r1, [pc, #24]	; (80037b4 <vcom_ReceiveInit+0x78>)
 800379c:	4804      	ldr	r0, [pc, #16]	; (80037b0 <vcom_ReceiveInit+0x74>)
 800379e:	f007 f9c1 	bl	800ab24 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80037a2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000638 	.word	0x20000638
 80037b0:	20000450 	.word	0x20000450
 80037b4:	20000630 	.word	0x20000630

080037b8 <vcom_Resume>:

void vcom_Resume(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037bc:	4808      	ldr	r0, [pc, #32]	; (80037e0 <vcom_Resume+0x28>)
 80037be:	f007 f961 	bl	800aa84 <HAL_UART_Init>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <vcom_Resume+0x14>
  {
    Error_Handler();
 80037c8:	f7fe fcca 	bl	8002160 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80037cc:	4805      	ldr	r0, [pc, #20]	; (80037e4 <vcom_Resume+0x2c>)
 80037ce:	f001 fb4f 	bl	8004e70 <HAL_DMA_Init>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <vcom_Resume+0x24>
  {
    Error_Handler();
 80037d8:	f7fe fcc2 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80037dc:	bf00      	nop
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20000450 	.word	0x20000450
 80037e4:	20000570 	.word	0x20000570

080037e8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a05      	ldr	r2, [pc, #20]	; (800380c <HAL_UART_TxCpltCallback+0x24>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d103      	bne.n	8003802 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80037fa:	4b05      	ldr	r3, [pc, #20]	; (8003810 <HAL_UART_TxCpltCallback+0x28>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2000      	movs	r0, #0
 8003800:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40013800 	.word	0x40013800
 8003810:	20000634 	.word	0x20000634

08003814 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a13      	ldr	r2, [pc, #76]	; (8003870 <HAL_UART_RxCpltCallback+0x5c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d113      	bne.n	800384e <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8003826:	4b13      	ldr	r3, [pc, #76]	; (8003874 <HAL_UART_RxCpltCallback+0x60>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <HAL_UART_RxCpltCallback+0x30>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d105      	bne.n	8003844 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8003838:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <HAL_UART_RxCpltCallback+0x60>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2200      	movs	r2, #0
 800383e:	2101      	movs	r1, #1
 8003840:	480d      	ldr	r0, [pc, #52]	; (8003878 <HAL_UART_RxCpltCallback+0x64>)
 8003842:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8003844:	2201      	movs	r2, #1
 8003846:	490c      	ldr	r1, [pc, #48]	; (8003878 <HAL_UART_RxCpltCallback+0x64>)
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f007 f96b 	bl	800ab24 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

      if (huart->Instance == USART2) {
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a0a      	ldr	r2, [pc, #40]	; (800387c <HAL_UART_RxCpltCallback+0x68>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d106      	bne.n	8003866 <HAL_UART_RxCpltCallback+0x52>
    	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);        /* Clear IDLE line flag */
 8003858:	4b09      	ldr	r3, [pc, #36]	; (8003880 <HAL_UART_RxCpltCallback+0x6c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2210      	movs	r2, #16
 800385e:	621a      	str	r2, [r3, #32]
    	  UART2_SET = 1;
 8003860:	4b08      	ldr	r3, [pc, #32]	; (8003884 <HAL_UART_RxCpltCallback+0x70>)
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]




  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003866:	bf00      	nop
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40013800 	.word	0x40013800
 8003874:	20000638 	.word	0x20000638
 8003878:	20000630 	.word	0x20000630
 800387c:	40004400 	.word	0x40004400
 8003880:	200004e0 	.word	0x200004e0
 8003884:	20000010 	.word	0x20000010

08003888 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003888:	480d      	ldr	r0, [pc, #52]	; (80038c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800388a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800388c:	f7ff f987 	bl	8002b9e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003890:	480c      	ldr	r0, [pc, #48]	; (80038c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003892:	490d      	ldr	r1, [pc, #52]	; (80038c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003894:	4a0d      	ldr	r2, [pc, #52]	; (80038cc <LoopForever+0xe>)
  movs r3, #0
 8003896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003898:	e002      	b.n	80038a0 <LoopCopyDataInit>

0800389a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800389a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800389c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800389e:	3304      	adds	r3, #4

080038a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038a4:	d3f9      	bcc.n	800389a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038a6:	4a0a      	ldr	r2, [pc, #40]	; (80038d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80038a8:	4c0a      	ldr	r4, [pc, #40]	; (80038d4 <LoopForever+0x16>)
  movs r3, #0
 80038aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038ac:	e001      	b.n	80038b2 <LoopFillZerobss>

080038ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038b0:	3204      	adds	r2, #4

080038b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038b4:	d3fb      	bcc.n	80038ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80038b6:	f01a fda1 	bl	801e3fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038ba:	f7fe fa95 	bl	8001de8 <main>

080038be <LoopForever>:

LoopForever:
    b LoopForever
 80038be:	e7fe      	b.n	80038be <LoopForever>
  ldr   r0, =_estack
 80038c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80038c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038c8:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 80038cc:	0801f5c0 	.word	0x0801f5c0
  ldr r2, =_sbss
 80038d0:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 80038d4:	20002774 	.word	0x20002774

080038d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038d8:	e7fe      	b.n	80038d8 <ADC_IRQHandler>

080038da <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b086      	sub	sp, #24
 80038de:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80038e0:	1d3b      	adds	r3, r7, #4
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	605a      	str	r2, [r3, #4]
 80038e8:	609a      	str	r2, [r3, #8]
 80038ea:	60da      	str	r2, [r3, #12]
 80038ec:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80038ee:	2310      	movs	r3, #16
 80038f0:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80038f2:	2301      	movs	r3, #1
 80038f4:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038fa:	2303      	movs	r3, #3
 80038fc:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80038fe:	1d3b      	adds	r3, r7, #4
 8003900:	4619      	mov	r1, r3
 8003902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003906:	f002 f991 	bl	8005c2c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800390a:	2320      	movs	r3, #32
 800390c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800390e:	1d3b      	adds	r3, r7, #4
 8003910:	4619      	mov	r1, r3
 8003912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003916:	f002 f989 	bl	8005c2c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800391a:	2200      	movs	r2, #0
 800391c:	2120      	movs	r1, #32
 800391e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003922:	f002 fbb1 	bl	8006088 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003926:	2200      	movs	r2, #0
 8003928:	2110      	movs	r1, #16
 800392a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800392e:	f002 fbab 	bl	8006088 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	4603      	mov	r3, r0
 8003944:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	2b03      	cmp	r3, #3
 800394a:	d83f      	bhi.n	80039cc <BSP_RADIO_ConfigRFSwitch+0x90>
 800394c:	a201      	add	r2, pc, #4	; (adr r2, 8003954 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800394e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003952:	bf00      	nop
 8003954:	08003965 	.word	0x08003965
 8003958:	0800397f 	.word	0x0800397f
 800395c:	08003999 	.word	0x08003999
 8003960:	080039b3 	.word	0x080039b3
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003964:	2200      	movs	r2, #0
 8003966:	2110      	movs	r1, #16
 8003968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800396c:	f002 fb8c 	bl	8006088 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003970:	2200      	movs	r2, #0
 8003972:	2120      	movs	r1, #32
 8003974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003978:	f002 fb86 	bl	8006088 <HAL_GPIO_WritePin>
      break;      
 800397c:	e027      	b.n	80039ce <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800397e:	2201      	movs	r2, #1
 8003980:	2110      	movs	r1, #16
 8003982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003986:	f002 fb7f 	bl	8006088 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800398a:	2200      	movs	r2, #0
 800398c:	2120      	movs	r1, #32
 800398e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003992:	f002 fb79 	bl	8006088 <HAL_GPIO_WritePin>
      break;
 8003996:	e01a      	b.n	80039ce <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003998:	2201      	movs	r2, #1
 800399a:	2110      	movs	r1, #16
 800399c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039a0:	f002 fb72 	bl	8006088 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80039a4:	2201      	movs	r2, #1
 80039a6:	2120      	movs	r1, #32
 80039a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039ac:	f002 fb6c 	bl	8006088 <HAL_GPIO_WritePin>
      break;
 80039b0:	e00d      	b.n	80039ce <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80039b2:	2200      	movs	r2, #0
 80039b4:	2110      	movs	r1, #16
 80039b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039ba:	f002 fb65 	bl	8006088 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80039be:	2201      	movs	r2, #1
 80039c0:	2120      	movs	r1, #32
 80039c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039c6:	f002 fb5f 	bl	8006088 <HAL_GPIO_WritePin>
      break;
 80039ca:	e000      	b.n	80039ce <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 80039cc:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80039dc:	2302      	movs	r3, #2
}
 80039de:	4618      	mov	r0, r3
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr

080039e6 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80039e6:	b480      	push	{r7}
 80039e8:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80039ea:	2301      	movs	r3, #1
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80039f8:	2301      	movs	r3, #1
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr

08003a02 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b085      	sub	sp, #20
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	4603      	mov	r3, r0
 8003a0a:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d102      	bne.n	8003a18 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003a12:	230f      	movs	r3, #15
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	e001      	b.n	8003a1c <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003a18:	2316      	movs	r3, #22
 8003a1a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr

08003a28 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003a2c:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4a03      	ldr	r2, [pc, #12]	; (8003a40 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	6053      	str	r3, [r2, #4]
}
 8003a38:	bf00      	nop
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr
 8003a40:	e0042000 	.word	0xe0042000

08003a44 <LL_DBGMCU_EnableDBGStopMode>:
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003a48:	4b04      	ldr	r3, [pc, #16]	; (8003a5c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	4a03      	ldr	r2, [pc, #12]	; (8003a5c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003a4e:	f043 0302 	orr.w	r3, r3, #2
 8003a52:	6053      	str	r3, [r2, #4]
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr
 8003a5c:	e0042000 	.word	0xe0042000

08003a60 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003a64:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	4a03      	ldr	r2, [pc, #12]	; (8003a78 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003a6a:	f043 0304 	orr.w	r3, r3, #4
 8003a6e:	6053      	str	r3, [r2, #4]
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr
 8003a78:	e0042000 	.word	0xe0042000

08003a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a86:	2003      	movs	r0, #3
 8003a88:	f001 f9b0 	bl	8004dec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003a8c:	f004 f95e 	bl	8007d4c <HAL_RCC_GetHCLKFreq>
 8003a90:	4603      	mov	r3, r0
 8003a92:	4a09      	ldr	r2, [pc, #36]	; (8003ab8 <HAL_Init+0x3c>)
 8003a94:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a96:	200f      	movs	r0, #15
 8003a98:	f7ff f800 	bl	8002a9c <HAL_InitTick>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	71fb      	strb	r3, [r7, #7]
 8003aa6:	e001      	b.n	8003aac <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003aa8:	f7fe fd93 	bl	80025d2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003aac:	79fb      	ldrb	r3, [r7, #7]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	2000000c 	.word	0x2000000c

08003abc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003ac0:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <HAL_SuspendTick+0x18>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a03      	ldr	r2, [pc, #12]	; (8003ad4 <HAL_SuspendTick+0x18>)
 8003ac6:	f023 0302 	bic.w	r3, r3, #2
 8003aca:	6013      	str	r3, [r2, #0]
}
 8003acc:	bf00      	nop
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr
 8003ad4:	e000e010 	.word	0xe000e010

08003ad8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003adc:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <HAL_ResumeTick+0x18>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a03      	ldr	r2, [pc, #12]	; (8003af0 <HAL_ResumeTick+0x18>)
 8003ae2:	f043 0302 	orr.w	r3, r3, #2
 8003ae6:	6013      	str	r3, [r2, #0]
}
 8003ae8:	bf00      	nop
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	e000e010 	.word	0xe000e010

08003af4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003af8:	4b02      	ldr	r3, [pc, #8]	; (8003b04 <HAL_GetUIDw0+0x10>)
 8003afa:	681b      	ldr	r3, [r3, #0]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr
 8003b04:	1fff7590 	.word	0x1fff7590

08003b08 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003b0c:	4b02      	ldr	r3, [pc, #8]	; (8003b18 <HAL_GetUIDw1+0x10>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr
 8003b18:	1fff7594 	.word	0x1fff7594

08003b1c <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003b20:	4b02      	ldr	r3, [pc, #8]	; (8003b2c <HAL_GetUIDw2+0x10>)
 8003b22:	681b      	ldr	r3, [r3, #0]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr
 8003b2c:	1fff7598 	.word	0x1fff7598

08003b30 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003b34:	f7ff ff78 	bl	8003a28 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003b38:	bf00      	nop
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003b40:	f7ff ff80 	bl	8003a44 <LL_DBGMCU_EnableDBGStopMode>
}
 8003b44:	bf00      	nop
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8003b4c:	f7ff ff88 	bl	8003a60 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8003b50:	bf00      	nop
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	601a      	str	r2, [r3, #0]
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr

08003b78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr

08003b92 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b085      	sub	sp, #20
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	695a      	ldr	r2, [r3, #20]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2107      	movs	r1, #7
 8003baa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	401a      	ands	r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	fa01 f303 	lsl.w	r3, r1, r3
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003bc4:	bf00      	nop
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr

08003bce <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	695a      	ldr	r2, [r3, #20]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2107      	movs	r1, #7
 8003be4:	fa01 f303 	lsl.w	r3, r1, r3
 8003be8:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr

08003bfe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr

08003c22 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b085      	sub	sp, #20
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	60f8      	str	r0, [r7, #12]
 8003c2a:	60b9      	str	r1, [r7, #8]
 8003c2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f003 031f 	and.w	r3, r3, #31
 8003c38:	210f      	movs	r1, #15
 8003c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	401a      	ands	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	0e9b      	lsrs	r3, r3, #26
 8003c46:	f003 010f 	and.w	r1, r3, #15
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	fa01 f303 	lsl.w	r3, r1, r3
 8003c54:	431a      	orrs	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c5a:	bf00      	nop
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr

08003c64 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr

08003c88 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	401a      	ands	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr

08003cae <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b085      	sub	sp, #20
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	401a      	ands	r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	0219      	lsls	r1, r3, #8
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	400b      	ands	r3, r1
 8003cce:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8003cd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003cdc:	bf00      	nop
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr

08003ce6 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003cf6:	f023 0317 	bic.w	r3, r3, #23
 8003cfa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr

08003d0c <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003d1c:	f023 0317 	bic.w	r3, r3, #23
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6093      	str	r3, [r2, #8]
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr

08003d2e <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d42:	d101      	bne.n	8003d48 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr

08003d54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d64:	f023 0317 	bic.w	r3, r3, #23
 8003d68:	f043 0201 	orr.w	r2, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc80      	pop	{r7}
 8003d78:	4770      	bx	lr

08003d7a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d8a:	f023 0317 	bic.w	r3, r3, #23
 8003d8e:	f043 0202 	orr.w	r2, r3, #2
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr

08003da0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <LL_ADC_IsEnabled+0x18>
 8003db4:	2301      	movs	r3, #1
 8003db6:	e000      	b.n	8003dba <LL_ADC_IsEnabled+0x1a>
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr

08003dc4 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d101      	bne.n	8003ddc <LL_ADC_IsDisableOngoing+0x18>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <LL_ADC_IsDisableOngoing+0x1a>
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr

08003de8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003df8:	f023 0317 	bic.w	r3, r3, #23
 8003dfc:	f043 0204 	orr.w	r2, r3, #4
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bc80      	pop	{r7}
 8003e0c:	4770      	bx	lr

08003e0e <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e1e:	f023 0317 	bic.w	r3, r3, #23
 8003e22:	f043 0210 	orr.w	r2, r3, #16
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr

08003e34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d101      	bne.n	8003e4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr

08003e58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003e64:	2300      	movs	r3, #0
 8003e66:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e19e      	b.n	80041b8 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d109      	bne.n	8003e9c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7fd fbb5 	bl	80015f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff ff44 	bl	8003d2e <LL_ADC_IsInternalRegulatorEnabled>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d115      	bne.n	8003ed8 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff ff18 	bl	8003ce6 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003eb6:	4b99      	ldr	r3, [pc, #612]	; (800411c <HAL_ADC_Init+0x2c4>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	099b      	lsrs	r3, r3, #6
 8003ebc:	4a98      	ldr	r2, [pc, #608]	; (8004120 <HAL_ADC_Init+0x2c8>)
 8003ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec2:	099b      	lsrs	r3, r3, #6
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003eca:	e002      	b.n	8003ed2 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1f9      	bne.n	8003ecc <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff ff26 	bl	8003d2e <LL_ADC_IsInternalRegulatorEnabled>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10d      	bne.n	8003f04 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eec:	f043 0210 	orr.w	r2, r3, #16
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef8:	f043 0201 	orr.w	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff ff93 	bl	8003e34 <LL_ADC_REG_IsConversionOngoing>
 8003f0e:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f040 8144 	bne.w	80041a6 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f040 8140 	bne.w	80041a6 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f2e:	f043 0202 	orr.w	r2, r3, #2
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff ff30 	bl	8003da0 <LL_ADC_IsEnabled>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f040 80a7 	bne.w	8004096 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	7e1b      	ldrb	r3, [r3, #24]
 8003f50:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003f52:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	7e5b      	ldrb	r3, [r3, #25]
 8003f58:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003f5a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	7e9b      	ldrb	r3, [r3, #26]
 8003f60:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003f62:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f68:	2a00      	cmp	r2, #0
 8003f6a:	d002      	beq.n	8003f72 <HAL_ADC_Init+0x11a>
 8003f6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f70:	e000      	b.n	8003f74 <HAL_ADC_Init+0x11c>
 8003f72:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003f74:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003f7a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	da04      	bge.n	8003f8e <HAL_ADC_Init+0x136>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f8c:	e001      	b.n	8003f92 <HAL_ADC_Init+0x13a>
 8003f8e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8003f92:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f9a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003f9c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d114      	bne.n	8003fd8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	7e9b      	ldrb	r3, [r3, #26]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d104      	bne.n	8003fc0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	e00b      	b.n	8003fd8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc4:	f043 0220 	orr.w	r2, r3, #32
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd0:	f043 0201 	orr.w	r2, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d009      	beq.n	8003ff4 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003fec:	4313      	orrs	r3, r2
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8003ffe:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	69b9      	ldr	r1, [r7, #24]
 8004008:	430b      	orrs	r3, r1
 800400a:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004018:	4313      	orrs	r3, r2
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004026:	2b01      	cmp	r3, #1
 8004028:	d111      	bne.n	800404e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004036:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800403c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8004042:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	4b33      	ldr	r3, [pc, #204]	; (8004124 <HAL_ADC_Init+0x2cc>)
 8004056:	4013      	ands	r3, r2
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	6979      	ldr	r1, [r7, #20]
 800405e:	430b      	orrs	r3, r1
 8004060:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800406a:	d014      	beq.n	8004096 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004074:	d00f      	beq.n	8004096 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800407a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800407e:	d00a      	beq.n	8004096 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8004080:	4b29      	ldr	r3, [pc, #164]	; (8004128 <HAL_ADC_Init+0x2d0>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004090:	4925      	ldr	r1, [pc, #148]	; (8004128 <HAL_ADC_Init+0x2d0>)
 8004092:	4313      	orrs	r3, r2
 8004094:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409e:	461a      	mov	r2, r3
 80040a0:	2100      	movs	r1, #0
 80040a2:	f7ff fd76 	bl	8003b92 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ae:	461a      	mov	r2, r3
 80040b0:	491e      	ldr	r1, [pc, #120]	; (800412c <HAL_ADC_Init+0x2d4>)
 80040b2:	f7ff fd6e 	bl	8003b92 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d108      	bne.n	80040d0 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f062 020f 	orn	r2, r2, #15
 80040cc:	629a      	str	r2, [r3, #40]	; 0x28
 80040ce:	e042      	b.n	8004156 <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040d8:	d13d      	bne.n	8004156 <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80040da:	2300      	movs	r3, #0
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	e00c      	b.n	80040fa <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
 80040ec:	f003 030f 	and.w	r3, r3, #15
 80040f0:	2b0f      	cmp	r3, #15
 80040f2:	d006      	beq.n	8004102 <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	3301      	adds	r3, #1
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b07      	cmp	r3, #7
 80040fe:	d9ef      	bls.n	80040e0 <HAL_ADC_Init+0x288>
 8004100:	e000      	b.n	8004104 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 8004102:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d112      	bne.n	8004130 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f062 020f 	orn	r2, r2, #15
 8004118:	629a      	str	r2, [r3, #40]	; 0x28
 800411a:	e01c      	b.n	8004156 <HAL_ADC_Init+0x2fe>
 800411c:	2000000c 	.word	0x2000000c
 8004120:	053e2d63 	.word	0x053e2d63
 8004124:	1ffffc02 	.word	0x1ffffc02
 8004128:	40012708 	.word	0x40012708
 800412c:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	3b01      	subs	r3, #1
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	f003 031c 	and.w	r3, r3, #28
 8004142:	f06f 020f 	mvn.w	r2, #15
 8004146:	fa02 f103 	lsl.w	r1, r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2100      	movs	r1, #0
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff fd36 	bl	8003bce <LL_ADC_GetSamplingTimeCommonChannels>
 8004162:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004168:	429a      	cmp	r2, r3
 800416a:	d10b      	bne.n	8004184 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004176:	f023 0303 	bic.w	r3, r3, #3
 800417a:	f043 0201 	orr.w	r2, r3, #1
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004182:	e018      	b.n	80041b6 <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004188:	f023 0312 	bic.w	r3, r3, #18
 800418c:	f043 0210 	orr.w	r2, r3, #16
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004198:	f043 0201 	orr.w	r2, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80041a4:	e007      	b.n	80041b6 <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041aa:	f043 0210 	orr.w	r2, r3, #16
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80041b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3720      	adds	r7, #32
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e06a      	b.n	80042a8 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d6:	f043 0202 	orr.w	r2, r3, #2
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fabe 	bl	8004760 <ADC_ConversionStop>
 80041e4:	4603      	mov	r3, r0
 80041e6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10f      	bne.n	800420e <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fb82 	bl	80048f8 <ADC_Disable>
 80041f4:	4603      	mov	r3, r0
 80041f6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d102      	bne.n	8004204 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fd7f 	bl	8003d0c <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6812      	ldr	r2, [r2, #0]
 8004218:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 800421c:	f023 0303 	bic.w	r3, r3, #3
 8004220:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f240 329f 	movw	r2, #927	; 0x39f
 800422a:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68d9      	ldr	r1, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	4b1e      	ldr	r3, [pc, #120]	; (80042b0 <HAL_ADC_DeInit+0xf0>)
 8004238:	400b      	ands	r3, r1
 800423a:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800424a:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0207 	bic.w	r2, r2, #7
 800425a:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6a1a      	ldr	r2, [r3, #32]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800426a:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2200      	movs	r2, #0
 8004278:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800427a:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <HAL_ADC_DeInit+0xf4>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a0d      	ldr	r2, [pc, #52]	; (80042b4 <HAL_ADC_DeInit+0xf4>)
 8004280:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8004284:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fd f9ca 	bl	8001620 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	833e0200 	.word	0x833e0200
 80042b4:	40012708 	.word	0x40012708

080042b8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff fdb5 	bl	8003e34 <LL_ADC_REG_IsConversionOngoing>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d132      	bne.n	8004336 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_ADC_Start+0x26>
 80042da:	2302      	movs	r3, #2
 80042dc:	e02e      	b.n	800433c <HAL_ADC_Start+0x84>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fa80 	bl	80047ec <ADC_Enable>
 80042ec:	4603      	mov	r3, r0
 80042ee:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d11a      	bne.n	800432c <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042fe:	f023 0301 	bic.w	r3, r3, #1
 8004302:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	221c      	movs	r2, #28
 8004316:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff fd5f 	bl	8003de8 <LL_ADC_REG_StartConversion>
 800432a:	e006      	b.n	800433a <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004334:	e001      	b.n	800433a <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004336:	2302      	movs	r3, #2
 8004338:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800433a:	7bfb      	ldrb	r3, [r7, #15]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <HAL_ADC_Stop+0x16>
 8004356:	2302      	movs	r3, #2
 8004358:	e022      	b.n	80043a0 <HAL_ADC_Stop+0x5c>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f9fc 	bl	8004760 <ADC_ConversionStop>
 8004368:	4603      	mov	r3, r0
 800436a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d111      	bne.n	8004396 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fac0 	bl	80048f8 <ADC_Disable>
 8004378:	4603      	mov	r3, r0
 800437a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d109      	bne.n	8004396 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004386:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800438a:	f023 0301 	bic.w	r3, r3, #1
 800438e:	f043 0201 	orr.w	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800439e:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d102      	bne.n	80043c0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80043ba:	2308      	movs	r3, #8
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	e010      	b.n	80043e2 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d007      	beq.n	80043de <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d2:	f043 0220 	orr.w	r2, r3, #32
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e077      	b.n	80044ce <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80043de:	2304      	movs	r3, #4
 80043e0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80043e2:	f7fe fb65 	bl	8002ab0 <HAL_GetTick>
 80043e6:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80043e8:	e021      	b.n	800442e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f0:	d01d      	beq.n	800442e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80043f2:	f7fe fb5d 	bl	8002ab0 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d302      	bcc.n	8004408 <HAL_ADC_PollForConversion+0x60>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d112      	bne.n	800442e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4013      	ands	r3, r2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10b      	bne.n	800442e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441a:	f043 0204 	orr.w	r2, r3, #4
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e04f      	b.n	80044ce <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4013      	ands	r3, r2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0d6      	beq.n	80043ea <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004440:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff fbd6 	bl	8003bfe <LL_ADC_REG_IsTriggerSourceSWStart>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d031      	beq.n	80044bc <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	7e9b      	ldrb	r3, [r3, #26]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d12d      	bne.n	80044bc <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b08      	cmp	r3, #8
 800446c:	d126      	bne.n	80044bc <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff fcde 	bl	8003e34 <LL_ADC_REG_IsConversionOngoing>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d112      	bne.n	80044a4 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 020c 	bic.w	r2, r2, #12
 800448c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004492:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004496:	f023 0301 	bic.w	r3, r3, #1
 800449a:	f043 0201 	orr.w	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	659a      	str	r2, [r3, #88]	; 0x58
 80044a2:	e00b      	b.n	80044bc <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	f043 0220 	orr.w	r2, r3, #32
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b4:	f043 0201 	orr.w	r2, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	7e1b      	ldrb	r3, [r3, #24]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d103      	bne.n	80044cc <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	220c      	movs	r2, #12
 80044ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr
	...

080044f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80044fe:	2300      	movs	r3, #0
 8004500:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_ADC_ConfigChannel+0x28>
 8004514:	2302      	movs	r3, #2
 8004516:	e110      	b.n	800473a <HAL_ADC_ConfigChannel+0x24a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff fc85 	bl	8003e34 <LL_ADC_REG_IsConversionOngoing>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	f040 80f7 	bne.w	8004720 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b02      	cmp	r3, #2
 8004538:	f000 80b1 	beq.w	800469e <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004544:	d004      	beq.n	8004550 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800454a:	4a7e      	ldr	r2, [pc, #504]	; (8004744 <HAL_ADC_ConfigChannel+0x254>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d108      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4619      	mov	r1, r3
 800455a:	4610      	mov	r0, r2
 800455c:	f7ff fb82 	bl	8003c64 <LL_ADC_REG_SetSequencerChAdd>
 8004560:	e041      	b.n	80045e6 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f003 031f 	and.w	r3, r3, #31
 800456e:	210f      	movs	r1, #15
 8004570:	fa01 f303 	lsl.w	r3, r1, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	401a      	ands	r2, r3
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004580:	2b00      	cmp	r3, #0
 8004582:	d105      	bne.n	8004590 <HAL_ADC_ConfigChannel+0xa0>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	0e9b      	lsrs	r3, r3, #26
 800458a:	f003 031f 	and.w	r3, r3, #31
 800458e:	e011      	b.n	80045b4 <HAL_ADC_ConfigChannel+0xc4>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	fa93 f3a3 	rbit	r3, r3
 800459c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80045a8:	2320      	movs	r3, #32
 80045aa:	e003      	b.n	80045b4 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	fab3 f383 	clz	r3, r3
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	6839      	ldr	r1, [r7, #0]
 80045b6:	6849      	ldr	r1, [r1, #4]
 80045b8:	f001 011f 	and.w	r1, r1, #31
 80045bc:	408b      	lsls	r3, r1
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	089b      	lsrs	r3, r3, #2
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d808      	bhi.n	80045e6 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	6859      	ldr	r1, [r3, #4]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	461a      	mov	r2, r3
 80045e2:	f7ff fb1e 	bl	8003c22 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6819      	ldr	r1, [r3, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	461a      	mov	r2, r3
 80045f4:	f7ff fb5b 	bl	8003cae <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f280 8097 	bge.w	8004730 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004602:	4851      	ldr	r0, [pc, #324]	; (8004748 <HAL_ADC_ConfigChannel+0x258>)
 8004604:	f7ff fab8 	bl	8003b78 <LL_ADC_GetCommonPathInternalCh>
 8004608:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a4f      	ldr	r2, [pc, #316]	; (800474c <HAL_ADC_ConfigChannel+0x25c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d120      	bne.n	8004656 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800461a:	2b00      	cmp	r3, #0
 800461c:	d11b      	bne.n	8004656 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004624:	4619      	mov	r1, r3
 8004626:	4848      	ldr	r0, [pc, #288]	; (8004748 <HAL_ADC_ConfigChannel+0x258>)
 8004628:	f7ff fa94 	bl	8003b54 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800462c:	4b48      	ldr	r3, [pc, #288]	; (8004750 <HAL_ADC_ConfigChannel+0x260>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	099b      	lsrs	r3, r3, #6
 8004632:	4a48      	ldr	r2, [pc, #288]	; (8004754 <HAL_ADC_ConfigChannel+0x264>)
 8004634:	fba2 2303 	umull	r2, r3, r2, r3
 8004638:	099b      	lsrs	r3, r3, #6
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	4613      	mov	r3, r2
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	4413      	add	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004646:	e002      	b.n	800464e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	3b01      	subs	r3, #1
 800464c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f9      	bne.n	8004648 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004654:	e06c      	b.n	8004730 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a3f      	ldr	r2, [pc, #252]	; (8004758 <HAL_ADC_ConfigChannel+0x268>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d10c      	bne.n	800467a <HAL_ADC_ConfigChannel+0x18a>
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d107      	bne.n	800467a <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004670:	4619      	mov	r1, r3
 8004672:	4835      	ldr	r0, [pc, #212]	; (8004748 <HAL_ADC_ConfigChannel+0x258>)
 8004674:	f7ff fa6e 	bl	8003b54 <LL_ADC_SetCommonPathInternalCh>
 8004678:	e05a      	b.n	8004730 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a37      	ldr	r2, [pc, #220]	; (800475c <HAL_ADC_ConfigChannel+0x26c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d155      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800468a:	2b00      	cmp	r3, #0
 800468c:	d150      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004694:	4619      	mov	r1, r3
 8004696:	482c      	ldr	r0, [pc, #176]	; (8004748 <HAL_ADC_ConfigChannel+0x258>)
 8004698:	f7ff fa5c 	bl	8003b54 <LL_ADC_SetCommonPathInternalCh>
 800469c:	e048      	b.n	8004730 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046a6:	d004      	beq.n	80046b2 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80046ac:	4a25      	ldr	r2, [pc, #148]	; (8004744 <HAL_ADC_ConfigChannel+0x254>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d107      	bne.n	80046c2 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4619      	mov	r1, r3
 80046bc:	4610      	mov	r0, r2
 80046be:	f7ff fae3 	bl	8003c88 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	da32      	bge.n	8004730 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046ca:	481f      	ldr	r0, [pc, #124]	; (8004748 <HAL_ADC_ConfigChannel+0x258>)
 80046cc:	f7ff fa54 	bl	8003b78 <LL_ADC_GetCommonPathInternalCh>
 80046d0:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a1d      	ldr	r2, [pc, #116]	; (800474c <HAL_ADC_ConfigChannel+0x25c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d107      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80046e2:	4619      	mov	r1, r3
 80046e4:	4818      	ldr	r0, [pc, #96]	; (8004748 <HAL_ADC_ConfigChannel+0x258>)
 80046e6:	f7ff fa35 	bl	8003b54 <LL_ADC_SetCommonPathInternalCh>
 80046ea:	e021      	b.n	8004730 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a19      	ldr	r2, [pc, #100]	; (8004758 <HAL_ADC_ConfigChannel+0x268>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d107      	bne.n	8004706 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046fc:	4619      	mov	r1, r3
 80046fe:	4812      	ldr	r0, [pc, #72]	; (8004748 <HAL_ADC_ConfigChannel+0x258>)
 8004700:	f7ff fa28 	bl	8003b54 <LL_ADC_SetCommonPathInternalCh>
 8004704:	e014      	b.n	8004730 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a14      	ldr	r2, [pc, #80]	; (800475c <HAL_ADC_ConfigChannel+0x26c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d10f      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004716:	4619      	mov	r1, r3
 8004718:	480b      	ldr	r0, [pc, #44]	; (8004748 <HAL_ADC_ConfigChannel+0x258>)
 800471a:	f7ff fa1b 	bl	8003b54 <LL_ADC_SetCommonPathInternalCh>
 800471e:	e007      	b.n	8004730 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004724:	f043 0220 	orr.w	r2, r3, #32
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004738:	7ffb      	ldrb	r3, [r7, #31]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	80000004 	.word	0x80000004
 8004748:	40012708 	.word	0x40012708
 800474c:	b0001000 	.word	0xb0001000
 8004750:	2000000c 	.word	0x2000000c
 8004754:	053e2d63 	.word	0x053e2d63
 8004758:	b8004000 	.word	0xb8004000
 800475c:	b4002000 	.word	0xb4002000

08004760 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff fb61 	bl	8003e34 <LL_ADC_REG_IsConversionOngoing>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d033      	beq.n	80047e0 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff fb21 	bl	8003dc4 <LL_ADC_IsDisableOngoing>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d104      	bne.n	8004792 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff fb3e 	bl	8003e0e <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004792:	f7fe f98d 	bl	8002ab0 <HAL_GetTick>
 8004796:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004798:	e01b      	b.n	80047d2 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800479a:	f7fe f989 	bl	8002ab0 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d914      	bls.n	80047d2 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00d      	beq.n	80047d2 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ba:	f043 0210 	orr.w	r2, r3, #16
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c6:	f043 0201 	orr.w	r2, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e007      	b.n	80047e2 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1dc      	bne.n	800479a <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff facf 	bl	8003da0 <LL_ADC_IsEnabled>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d169      	bne.n	80048dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	4b36      	ldr	r3, [pc, #216]	; (80048e8 <ADC_Enable+0xfc>)
 8004810:	4013      	ands	r3, r2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00d      	beq.n	8004832 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481a:	f043 0210 	orr.w	r2, r3, #16
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004826:	f043 0201 	orr.w	r2, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e055      	b.n	80048de <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff fa8c 	bl	8003d54 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800483c:	482b      	ldr	r0, [pc, #172]	; (80048ec <ADC_Enable+0x100>)
 800483e:	f7ff f99b 	bl	8003b78 <LL_ADC_GetCommonPathInternalCh>
 8004842:	4603      	mov	r3, r0
 8004844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00f      	beq.n	800486c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800484c:	4b28      	ldr	r3, [pc, #160]	; (80048f0 <ADC_Enable+0x104>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	099b      	lsrs	r3, r3, #6
 8004852:	4a28      	ldr	r2, [pc, #160]	; (80048f4 <ADC_Enable+0x108>)
 8004854:	fba2 2303 	umull	r2, r3, r2, r3
 8004858:	099b      	lsrs	r3, r3, #6
 800485a:	3301      	adds	r3, #1
 800485c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800485e:	e002      	b.n	8004866 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	3b01      	subs	r3, #1
 8004864:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1f9      	bne.n	8004860 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	7e5b      	ldrb	r3, [r3, #25]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d033      	beq.n	80048dc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004874:	f7fe f91c 	bl	8002ab0 <HAL_GetTick>
 8004878:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800487a:	e028      	b.n	80048ce <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff fa8d 	bl	8003da0 <LL_ADC_IsEnabled>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d104      	bne.n	8004896 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff fa5f 	bl	8003d54 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004896:	f7fe f90b 	bl	8002ab0 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d914      	bls.n	80048ce <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d00d      	beq.n	80048ce <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b6:	f043 0210 	orr.w	r2, r3, #16
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c2:	f043 0201 	orr.w	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e007      	b.n	80048de <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d1cf      	bne.n	800487c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	80000017 	.word	0x80000017
 80048ec:	40012708 	.word	0x40012708
 80048f0:	2000000c 	.word	0x2000000c
 80048f4:	053e2d63 	.word	0x053e2d63

080048f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff fa5d 	bl	8003dc4 <LL_ADC_IsDisableOngoing>
 800490a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff fa45 	bl	8003da0 <LL_ADC_IsEnabled>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d047      	beq.n	80049ac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d144      	bne.n	80049ac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 0305 	and.w	r3, r3, #5
 800492c:	2b01      	cmp	r3, #1
 800492e:	d10c      	bne.n	800494a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fa20 	bl	8003d7a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2203      	movs	r2, #3
 8004940:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004942:	f7fe f8b5 	bl	8002ab0 <HAL_GetTick>
 8004946:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004948:	e029      	b.n	800499e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494e:	f043 0210 	orr.w	r2, r3, #16
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800495a:	f043 0201 	orr.w	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e023      	b.n	80049ae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004966:	f7fe f8a3 	bl	8002ab0 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d914      	bls.n	800499e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00d      	beq.n	800499e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004986:	f043 0210 	orr.w	r2, r3, #16
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004992:	f043 0201 	orr.w	r2, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e007      	b.n	80049ae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1dc      	bne.n	8004966 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <LL_ADC_SetCalibrationFactor>:
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049c6:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	bc80      	pop	{r7}
 80049dc:	4770      	bx	lr

080049de <LL_ADC_GetCalibrationFactor>:
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr

080049fa <LL_ADC_Enable>:
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a0a:	f023 0317 	bic.w	r3, r3, #23
 8004a0e:	f043 0201 	orr.w	r2, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	609a      	str	r2, [r3, #8]
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr

08004a20 <LL_ADC_Disable>:
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a30:	f023 0317 	bic.w	r3, r3, #23
 8004a34:	f043 0202 	orr.w	r2, r3, #2
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	609a      	str	r2, [r3, #8]
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bc80      	pop	{r7}
 8004a44:	4770      	bx	lr

08004a46 <LL_ADC_IsEnabled>:
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d101      	bne.n	8004a5e <LL_ADC_IsEnabled+0x18>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <LL_ADC_IsEnabled+0x1a>
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr

08004a6a <LL_ADC_StartCalibration>:
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a7a:	f023 0317 	bic.w	r3, r3, #23
 8004a7e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	609a      	str	r2, [r3, #8]
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr

08004a90 <LL_ADC_IsCalibrationOnGoing>:
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aa4:	d101      	bne.n	8004aaa <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bc80      	pop	{r7}
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b088      	sub	sp, #32
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_ADCEx_Calibration_Start+0x1e>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e0b9      	b.n	8004c48 <HAL_ADCEx_Calibration_Start+0x192>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff ff0b 	bl	80048f8 <ADC_Disable>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff ffab 	bl	8004a46 <LL_ADC_IsEnabled>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f040 809d 	bne.w	8004c32 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004b00:	f043 0202 	orr.w	r2, r3, #2
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	f248 0303 	movw	r3, #32771	; 0x8003
 8004b12:	4013      	ands	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6812      	ldr	r2, [r2, #0]
 8004b20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b24:	f023 0303 	bic.w	r3, r3, #3
 8004b28:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
 8004b2e:	e02e      	b.n	8004b8e <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff ff98 	bl	8004a6a <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004b3a:	e014      	b.n	8004b66 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004b48:	d30d      	bcc.n	8004b66 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4e:	f023 0312 	bic.w	r3, r3, #18
 8004b52:	f043 0210 	orr.w	r2, r3, #16
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e070      	b.n	8004c48 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff ff90 	bl	8004a90 <LL_ADC_IsCalibrationOnGoing>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1e2      	bne.n	8004b3c <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff ff2f 	bl	80049de <LL_ADC_GetCalibrationFactor>
 8004b80:	4602      	mov	r2, r0
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	4413      	add	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	2b07      	cmp	r3, #7
 8004b92:	d9cd      	bls.n	8004b30 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9c:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff ff29 	bl	80049fa <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	69b9      	ldr	r1, [r7, #24]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7ff ff01 	bl	80049b6 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7ff ff31 	bl	8004a20 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004bbe:	f7fd ff77 	bl	8002ab0 <HAL_GetTick>
 8004bc2:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004bc4:	e01c      	b.n	8004c00 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004bc6:	f7fd ff73 	bl	8002ab0 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d915      	bls.n	8004c00 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff ff34 	bl	8004a46 <LL_ADC_IsEnabled>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00d      	beq.n	8004c00 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be8:	f043 0210 	orr.w	r2, r3, #16
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf4:	f043 0201 	orr.w	r2, r3, #1
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e023      	b.n	8004c48 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff ff1e 	bl	8004a46 <LL_ADC_IsEnabled>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1da      	bne.n	8004bc6 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68d9      	ldr	r1, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c24:	f023 0303 	bic.w	r3, r3, #3
 8004c28:	f043 0201 	orr.w	r2, r3, #1
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	659a      	str	r2, [r3, #88]	; 0x58
 8004c30:	e005      	b.n	8004c3e <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c36:	f043 0210 	orr.w	r2, r3, #16
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3720      	adds	r7, #32
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c60:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <__NVIC_SetPriorityGrouping+0x44>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c82:	4a04      	ldr	r2, [pc, #16]	; (8004c94 <__NVIC_SetPriorityGrouping+0x44>)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	60d3      	str	r3, [r2, #12]
}
 8004c88:	bf00      	nop
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bc80      	pop	{r7}
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	e000ed00 	.word	0xe000ed00

08004c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c9c:	4b04      	ldr	r3, [pc, #16]	; (8004cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	0a1b      	lsrs	r3, r3, #8
 8004ca2:	f003 0307 	and.w	r3, r3, #7
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bc80      	pop	{r7}
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	e000ed00 	.word	0xe000ed00

08004cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	db0b      	blt.n	8004cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	f003 021f 	and.w	r2, r3, #31
 8004ccc:	4906      	ldr	r1, [pc, #24]	; (8004ce8 <__NVIC_EnableIRQ+0x34>)
 8004cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8004cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr
 8004ce8:	e000e100 	.word	0xe000e100

08004cec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	db12      	blt.n	8004d24 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cfe:	79fb      	ldrb	r3, [r7, #7]
 8004d00:	f003 021f 	and.w	r2, r3, #31
 8004d04:	490a      	ldr	r1, [pc, #40]	; (8004d30 <__NVIC_DisableIRQ+0x44>)
 8004d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	2001      	movs	r0, #1
 8004d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d12:	3320      	adds	r3, #32
 8004d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d18:	f3bf 8f4f 	dsb	sy
}
 8004d1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d1e:	f3bf 8f6f 	isb	sy
}
 8004d22:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	e000e100 	.word	0xe000e100

08004d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	6039      	str	r1, [r7, #0]
 8004d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	db0a      	blt.n	8004d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	490c      	ldr	r1, [pc, #48]	; (8004d80 <__NVIC_SetPriority+0x4c>)
 8004d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d52:	0112      	lsls	r2, r2, #4
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	440b      	add	r3, r1
 8004d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d5c:	e00a      	b.n	8004d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	4908      	ldr	r1, [pc, #32]	; (8004d84 <__NVIC_SetPriority+0x50>)
 8004d64:	79fb      	ldrb	r3, [r7, #7]
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	3b04      	subs	r3, #4
 8004d6c:	0112      	lsls	r2, r2, #4
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	440b      	add	r3, r1
 8004d72:	761a      	strb	r2, [r3, #24]
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bc80      	pop	{r7}
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	e000e100 	.word	0xe000e100
 8004d84:	e000ed00 	.word	0xe000ed00

08004d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b089      	sub	sp, #36	; 0x24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f1c3 0307 	rsb	r3, r3, #7
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	bf28      	it	cs
 8004da6:	2304      	movcs	r3, #4
 8004da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	3304      	adds	r3, #4
 8004dae:	2b06      	cmp	r3, #6
 8004db0:	d902      	bls.n	8004db8 <NVIC_EncodePriority+0x30>
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	3b03      	subs	r3, #3
 8004db6:	e000      	b.n	8004dba <NVIC_EncodePriority+0x32>
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	43da      	mvns	r2, r3
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	401a      	ands	r2, r3
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dda:	43d9      	mvns	r1, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004de0:	4313      	orrs	r3, r2
         );
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3724      	adds	r7, #36	; 0x24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bc80      	pop	{r7}
 8004dea:	4770      	bx	lr

08004dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff ff2b 	bl	8004c50 <__NVIC_SetPriorityGrouping>
}
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b086      	sub	sp, #24
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	4603      	mov	r3, r0
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	607a      	str	r2, [r7, #4]
 8004e0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e10:	f7ff ff42 	bl	8004c98 <__NVIC_GetPriorityGrouping>
 8004e14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	68b9      	ldr	r1, [r7, #8]
 8004e1a:	6978      	ldr	r0, [r7, #20]
 8004e1c:	f7ff ffb4 	bl	8004d88 <NVIC_EncodePriority>
 8004e20:	4602      	mov	r2, r0
 8004e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e26:	4611      	mov	r1, r2
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff ff83 	bl	8004d34 <__NVIC_SetPriority>
}
 8004e2e:	bf00      	nop
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff ff35 	bl	8004cb4 <__NVIC_EnableIRQ>
}
 8004e4a:	bf00      	nop
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	4603      	mov	r3, r0
 8004e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff ff43 	bl	8004cec <__NVIC_DisableIRQ>
}
 8004e66:	bf00      	nop
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e08e      	b.n	8004fa0 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	461a      	mov	r2, r3
 8004e88:	4b47      	ldr	r3, [pc, #284]	; (8004fa8 <HAL_DMA_Init+0x138>)
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d80f      	bhi.n	8004eae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	461a      	mov	r2, r3
 8004e94:	4b45      	ldr	r3, [pc, #276]	; (8004fac <HAL_DMA_Init+0x13c>)
 8004e96:	4413      	add	r3, r2
 8004e98:	4a45      	ldr	r2, [pc, #276]	; (8004fb0 <HAL_DMA_Init+0x140>)
 8004e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9e:	091b      	lsrs	r3, r3, #4
 8004ea0:	009a      	lsls	r2, r3, #2
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a42      	ldr	r2, [pc, #264]	; (8004fb4 <HAL_DMA_Init+0x144>)
 8004eaa:	641a      	str	r2, [r3, #64]	; 0x40
 8004eac:	e00e      	b.n	8004ecc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	4b40      	ldr	r3, [pc, #256]	; (8004fb8 <HAL_DMA_Init+0x148>)
 8004eb6:	4413      	add	r3, r2
 8004eb8:	4a3d      	ldr	r2, [pc, #244]	; (8004fb0 <HAL_DMA_Init+0x140>)
 8004eba:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebe:	091b      	lsrs	r3, r3, #4
 8004ec0:	009a      	lsls	r2, r3, #2
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a3c      	ldr	r2, [pc, #240]	; (8004fbc <HAL_DMA_Init+0x14c>)
 8004eca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee6:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6819      	ldr	r1, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689a      	ldr	r2, [r3, #8]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fb24 	bl	800556c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f2c:	d102      	bne.n	8004f34 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f40:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f4a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d010      	beq.n	8004f76 <HAL_DMA_Init+0x106>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d80c      	bhi.n	8004f76 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fb4d 	bl	80055fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004f72:	605a      	str	r2, [r3, #4]
 8004f74:	e008      	b.n	8004f88 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40020407 	.word	0x40020407
 8004fac:	bffdfff8 	.word	0xbffdfff8
 8004fb0:	cccccccd 	.word	0xcccccccd
 8004fb4:	40020000 	.word	0x40020000
 8004fb8:	bffdfbf8 	.word	0xbffdfbf8
 8004fbc:	40020400 	.word	0x40020400

08004fc0 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e07b      	b.n	80050ca <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0201 	bic.w	r2, r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	4b3a      	ldr	r3, [pc, #232]	; (80050d4 <HAL_DMA_DeInit+0x114>)
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d80f      	bhi.n	800500e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	4b38      	ldr	r3, [pc, #224]	; (80050d8 <HAL_DMA_DeInit+0x118>)
 8004ff6:	4413      	add	r3, r2
 8004ff8:	4a38      	ldr	r2, [pc, #224]	; (80050dc <HAL_DMA_DeInit+0x11c>)
 8004ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffe:	091b      	lsrs	r3, r3, #4
 8005000:	009a      	lsls	r2, r3, #2
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a35      	ldr	r2, [pc, #212]	; (80050e0 <HAL_DMA_DeInit+0x120>)
 800500a:	641a      	str	r2, [r3, #64]	; 0x40
 800500c:	e00e      	b.n	800502c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	4b33      	ldr	r3, [pc, #204]	; (80050e4 <HAL_DMA_DeInit+0x124>)
 8005016:	4413      	add	r3, r2
 8005018:	4a30      	ldr	r2, [pc, #192]	; (80050dc <HAL_DMA_DeInit+0x11c>)
 800501a:	fba2 2303 	umull	r2, r3, r2, r3
 800501e:	091b      	lsrs	r3, r3, #4
 8005020:	009a      	lsls	r2, r3, #2
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a2f      	ldr	r2, [pc, #188]	; (80050e8 <HAL_DMA_DeInit+0x128>)
 800502a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005038:	f003 021c 	and.w	r2, r3, #28
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005040:	2101      	movs	r1, #1
 8005042:	fa01 f202 	lsl.w	r2, r1, r2
 8005046:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fa8f 	bl	800556c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800505e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00f      	beq.n	8005088 <HAL_DMA_DeInit+0xc8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b04      	cmp	r3, #4
 800506e:	d80b      	bhi.n	8005088 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fac3 	bl	80055fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005086:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	40020407 	.word	0x40020407
 80050d8:	bffdfff8 	.word	0xbffdfff8
 80050dc:	cccccccd 	.word	0xcccccccd
 80050e0:	40020000 	.word	0x40020000
 80050e4:	bffdfbf8 	.word	0xbffdfbf8
 80050e8:	40020400 	.word	0x40020400

080050ec <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_DMA_Start_IT+0x20>
 8005108:	2302      	movs	r3, #2
 800510a:	e069      	b.n	80051e0 <HAL_DMA_Start_IT+0xf4>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b01      	cmp	r3, #1
 800511e:	d155      	bne.n	80051cc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0201 	bic.w	r2, r2, #1
 800513c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	68b9      	ldr	r1, [r7, #8]
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 f9d3 	bl	80054f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	2b00      	cmp	r3, #0
 8005150:	d008      	beq.n	8005164 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f042 020e 	orr.w	r2, r2, #14
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	e00f      	b.n	8005184 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0204 	bic.w	r2, r2, #4
 8005172:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 020a 	orr.w	r2, r2, #10
 8005182:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d007      	beq.n	80051a2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800519c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051a0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d007      	beq.n	80051ba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051b8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f042 0201 	orr.w	r2, r2, #1
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	e008      	b.n	80051de <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2280      	movs	r2, #128	; 0x80
 80051d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80051de:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e04f      	b.n	800529a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d008      	beq.n	8005218 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2204      	movs	r2, #4
 800520a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e040      	b.n	800529a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 020e 	bic.w	r2, r2, #14
 8005226:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005232:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005236:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0201 	bic.w	r2, r2, #1
 8005246:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524c:	f003 021c 	and.w	r2, r3, #28
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005254:	2101      	movs	r1, #1
 8005256:	fa01 f202 	lsl.w	r2, r1, r2
 800525a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005264:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00c      	beq.n	8005288 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800527c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005286:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	bc80      	pop	{r7}
 80052a2:	4770      	bx	lr

080052a4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d005      	beq.n	80052c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2204      	movs	r2, #4
 80052c0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	73fb      	strb	r3, [r7, #15]
 80052c6:	e047      	b.n	8005358 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 020e 	bic.w	r2, r2, #14
 80052d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0201 	bic.w	r2, r2, #1
 80052e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fc:	f003 021c 	and.w	r2, r3, #28
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005304:	2101      	movs	r1, #1
 8005306:	fa01 f202 	lsl.w	r2, r1, r2
 800530a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005314:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00c      	beq.n	8005338 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005328:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800532c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005336:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	4798      	blx	r3
    }
  }
  return status;
 8005358:	7bfb      	ldrb	r3, [r7, #15]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005380:	f003 031c 	and.w	r3, r3, #28
 8005384:	2204      	movs	r2, #4
 8005386:	409a      	lsls	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4013      	ands	r3, r2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d027      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x7c>
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f003 0304 	and.w	r3, r3, #4
 8005396:	2b00      	cmp	r3, #0
 8005398:	d022      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d107      	bne.n	80053b8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0204 	bic.w	r2, r2, #4
 80053b6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053bc:	f003 021c 	and.w	r2, r3, #28
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	2104      	movs	r1, #4
 80053c6:	fa01 f202 	lsl.w	r2, r1, r2
 80053ca:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 8081 	beq.w	80054d8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80053de:	e07b      	b.n	80054d8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e4:	f003 031c 	and.w	r3, r3, #28
 80053e8:	2202      	movs	r2, #2
 80053ea:	409a      	lsls	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4013      	ands	r3, r2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d03d      	beq.n	8005470 <HAL_DMA_IRQHandler+0x10c>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d038      	beq.n	8005470 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0320 	and.w	r3, r3, #32
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10b      	bne.n	8005424 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 020a 	bic.w	r2, r2, #10
 800541a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	461a      	mov	r2, r3
 800542a:	4b2e      	ldr	r3, [pc, #184]	; (80054e4 <HAL_DMA_IRQHandler+0x180>)
 800542c:	429a      	cmp	r2, r3
 800542e:	d909      	bls.n	8005444 <HAL_DMA_IRQHandler+0xe0>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005434:	f003 031c 	and.w	r3, r3, #28
 8005438:	4a2b      	ldr	r2, [pc, #172]	; (80054e8 <HAL_DMA_IRQHandler+0x184>)
 800543a:	2102      	movs	r1, #2
 800543c:	fa01 f303 	lsl.w	r3, r1, r3
 8005440:	6053      	str	r3, [r2, #4]
 8005442:	e008      	b.n	8005456 <HAL_DMA_IRQHandler+0xf2>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005448:	f003 031c 	and.w	r3, r3, #28
 800544c:	4a27      	ldr	r2, [pc, #156]	; (80054ec <HAL_DMA_IRQHandler+0x188>)
 800544e:	2102      	movs	r1, #2
 8005450:	fa01 f303 	lsl.w	r3, r1, r3
 8005454:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005462:	2b00      	cmp	r3, #0
 8005464:	d038      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800546e:	e033      	b.n	80054d8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005474:	f003 031c 	and.w	r3, r3, #28
 8005478:	2208      	movs	r2, #8
 800547a:	409a      	lsls	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4013      	ands	r3, r2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d02a      	beq.n	80054da <HAL_DMA_IRQHandler+0x176>
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b00      	cmp	r3, #0
 800548c:	d025      	beq.n	80054da <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 020e 	bic.w	r2, r2, #14
 800549c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a2:	f003 021c 	and.w	r2, r3, #28
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	2101      	movs	r1, #1
 80054ac:	fa01 f202 	lsl.w	r2, r1, r2
 80054b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d004      	beq.n	80054da <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80054d8:	bf00      	nop
 80054da:	bf00      	nop
}
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40020080 	.word	0x40020080
 80054e8:	40020400 	.word	0x40020400
 80054ec:	40020000 	.word	0x40020000

080054f0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005506:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550c:	2b00      	cmp	r3, #0
 800550e:	d004      	beq.n	800551a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005518:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800551e:	f003 021c 	and.w	r2, r3, #28
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	2101      	movs	r1, #1
 8005528:	fa01 f202 	lsl.w	r2, r1, r2
 800552c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	2b10      	cmp	r3, #16
 800553c:	d108      	bne.n	8005550 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800554e:	e007      	b.n	8005560 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	60da      	str	r2, [r3, #12]
}
 8005560:	bf00      	nop
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	bc80      	pop	{r7}
 8005568:	4770      	bx	lr
	...

0800556c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	461a      	mov	r2, r3
 800557a:	4b1c      	ldr	r3, [pc, #112]	; (80055ec <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 800557c:	429a      	cmp	r2, r3
 800557e:	d813      	bhi.n	80055a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005584:	089b      	lsrs	r3, r3, #2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800558c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	b2db      	uxtb	r3, r3
 800559a:	3b08      	subs	r3, #8
 800559c:	4a14      	ldr	r2, [pc, #80]	; (80055f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800559e:	fba2 2303 	umull	r2, r3, r2, r3
 80055a2:	091b      	lsrs	r3, r3, #4
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	e011      	b.n	80055cc <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ac:	089b      	lsrs	r3, r3, #2
 80055ae:	009a      	lsls	r2, r3, #2
 80055b0:	4b10      	ldr	r3, [pc, #64]	; (80055f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80055b2:	4413      	add	r3, r2
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	3b08      	subs	r3, #8
 80055c0:	4a0b      	ldr	r2, [pc, #44]	; (80055f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80055c2:	fba2 2303 	umull	r2, r3, r2, r3
 80055c6:	091b      	lsrs	r3, r3, #4
 80055c8:	3307      	adds	r3, #7
 80055ca:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a0a      	ldr	r2, [pc, #40]	; (80055f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80055d0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f003 031f 	and.w	r3, r3, #31
 80055d8:	2201      	movs	r2, #1
 80055da:	409a      	lsls	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	651a      	str	r2, [r3, #80]	; 0x50
}
 80055e0:	bf00      	nop
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bc80      	pop	{r7}
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40020407 	.word	0x40020407
 80055f0:	cccccccd 	.word	0xcccccccd
 80055f4:	4002081c 	.word	0x4002081c
 80055f8:	40020880 	.word	0x40020880

080055fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800560c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4b0a      	ldr	r3, [pc, #40]	; (800563c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	461a      	mov	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a08      	ldr	r2, [pc, #32]	; (8005640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005620:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3b01      	subs	r3, #1
 8005626:	f003 0303 	and.w	r3, r3, #3
 800562a:	2201      	movs	r2, #1
 800562c:	409a      	lsls	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005632:	bf00      	nop
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr
 800563c:	1000823f 	.word	0x1000823f
 8005640:	40020940 	.word	0x40020940

08005644 <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b01      	cmp	r3, #1
 8005658:	d12b      	bne.n	80056b2 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_DMAEx_ConfigMuxSync+0x24>
 8005664:	2302      	movs	r3, #2
 8005666:	e028      	b.n	80056ba <HAL_DMAEx_ConfigMuxSync+0x76>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	3b01      	subs	r3, #1
 8005684:	04db      	lsls	r3, r3, #19
 8005686:	431a      	orrs	r2, r3
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	431a      	orrs	r2, r3
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	7a1b      	ldrb	r3, [r3, #8]
 8005692:	041b      	lsls	r3, r3, #16
 8005694:	431a      	orrs	r2, r3
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	7a5b      	ldrb	r3, [r3, #9]
 800569a:	025b      	lsls	r3, r3, #9
 800569c:	431a      	orrs	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056a2:	430a      	orrs	r2, r1
 80056a4:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	e003      	b.n	80056ba <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2280      	movs	r2, #128	; 0x80
 80056b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
  }
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	bc80      	pop	{r7}
 80056c2:	4770      	bx	lr

080056c4 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d6:	4013      	ands	r3, r2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01a      	beq.n	8005712 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80056f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005716:	2b00      	cmp	r3, #0
 8005718:	d022      	beq.n	8005760 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005724:	4013      	ands	r3, r2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d01a      	beq.n	8005760 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005734:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005738:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005742:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005748:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800574c:	687b      	ldr	